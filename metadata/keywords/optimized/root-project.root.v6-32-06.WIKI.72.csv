quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,"foLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf). Definition at line 72 of file TStreamerInfoActions.h. ◆ TStreamerInfoVecPtrLoopAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TConfiguration *conf). Definition at line 71 of file TStreamerInfoActions.h. Enumeration Type Documentation. ◆ ESelectLooper. enum TStreamerInfoActions::ESelectLooper. EnumeratorkVectorLooper ; kVectorPtrLooper ; kAssociativeLooper ; kGenericLooper . Definition at line 1697 of file TStreamerInfoActions.cxx. Function Documentation. ◆ GenericReadAction(). Int_t TStreamerInfoActions::GenericReadAction ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 191 of file TStreamerInfoActions.cxx. ◆ GenericWriteAction(). Int_t TStreamerInfoActions::GenericWriteAction ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 198 of file TStreamerInfoActions.cxx. ◆ HandleReferencedTObject(). void TStreamerInfoActions::HandleReferencedTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 214 of file TStreamerInfoActions.cxx. ◆ IsDefaultVector(). bool TStreamerInfoActions::IsDefaultVector ; (; TVirtualCollectionProxy & ; proxy). Definition at line 47 of file TStreamerInfoActions.cxx. ◆ PopDataCache(). Int_t TStreamerInfoActions::PopDataCache ; (; TBuffer & ; b, . void * ; , . const TConfiguration * ;  . ). Definition at line 1534 of file TStreamerInfoActions.cxx. ◆ PopDataCacheGenericCollection(). Int_t TStreamerInfoActions::PopDataCacheGenericCollection ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TLoopConfiguration * ; , . const TConfiguration * ;  . ). Definition at line 1546 of file TStreamerInfoActions.cxx. ◆ PopDataCacheVectorPtr(). Int_t TStreamerInfoActions::PopDataCacheVectorPtr ; (; TBuffer & ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTStreamerInfoActions.html:8907,config,config,8907,doc/master/namespaceTStreamerInfoActions.html,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html,1,['config'],['config']
Modifiability,"foType { kNodeType; , kOption; , kHost; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofResourcesStatic ();  This ctor is used in TProofServ::Setup() in combination with GetWorkDir() for a quick scan of the config file to retrieve the work directory. ;  ;  TProofResourcesStatic (const char *confDir, const char *fileName);  Using this ctor will retrieve all information in the config file and store it in fMaster, fSubmasterList and fWorkerList, condorworkers will be stored in the fWorkerList. ;  ;  ~TProofResourcesStatic () override;  Destructor. ;  ; TString GetFileName () const;  ; TProofNodeInfo * GetMaster () override;  Get the master node. ;  ; TList * GetSubmasters () override;  Get the list of submaster nodes. ;  ; TList * GetWorkers () override;  Get the list of worker nodes. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofResources;  TProofResources ();  ;  ~TProofResources () override;  ; virtual Bool_t IsValid () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject dest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofResourcesStatic.html:1924,config,config,1924,doc/master/classTProofResourcesStatic.html,https://root.cern,https://root.cern/doc/master/classTProofResourcesStatic.html,1,['config'],['config']
Modifiability,"fold.ScanLcurve(nScan,0.0,0.0,&lCurve);. std::cout<<""tau=""<<unfold.GetTau()<<""\n"";. TH1D *x=unfold.GetOutput(""x"",""myVariable"");; TH2D *rhoij=unfold.GetRhoIJ(""correlation"",""myVariable"");. This creates; logTauX: the L-curve's x-coordinate as a function of log(tau); logTauY: the L-curve's y-coordinate as a function of log(tau); lCurve: a graph of the L-curve; x,rhoij: unfolding result for best choice of tau; iBest: the coordinate/spline knot number with the best choice of tau. Note: always check the L curve after unfolding. The algorithm is not; perfect. Bin averaging of the output. Sometimes it is useful to unfold for a fine binning in x and; calculate the final result with a smaller number of bins. The advantage; is a reduction in the correlation coefficients if bins are averaged.; For this type of averaging the full error matrix has to be used.; There are methods in TUnfold to support this type of calculation; Example:; The vector x has dimension 49, it consists of 7x7 bins; in two variables (Pt,Eta); The unfolding result is to be presented as one-dimensional projections; in (Pt) and (Eta); The bins of x are mapped as: bins 1..7 the first Eta bin; bins 2..14 the second Eta bin. bins 1,8,15,... the first Pt bin. code fragment:. TUnfold unfold(A,TUnfold::kHistMapOutputHoriz);; Double_t tau=1.E-4;; Double_t biasScale=0.0;; unfold.DoUnfold(tau,y,biasScale);; Int_t binMapEta[49+2];; Int_t binMapPt[49+2];; // overflow and underflow bins are not used; binMapEta[0]=-1;; binMapEta[49+1]=-1;; binMapPt[0]=-1;; binMapPt[49+1]=-1;; for(Int_t i=1;i<=49;i++) {; // all bins (i) with the same (i-1)/7 are added; binMapEta[i] = (i-1)/7 +1;; // all bins (i) with the same (i-1)%7 are added; binMapPt[i] = (i-1)%7 +1;; }; TH1D *etaHist=new TH1D(""eta(unfolded)"","";eta"",7,etamin,etamax);; TH1D *etaCorr=new TH2D(""eta(unfolded)"","";eta;eta"",7,etamin,etamax,7,etamin,etamax);; TH1D *ptHist=new TH1D(""pt(unfolded)"","";pt"",7,ptmin,ptmax);; TH1D *ptCorr=new TH2D(""pt(unfolded)"","";pt;pt"",7,ptmin,ptmax,7",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:6792,variab,variables,6792,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,3,['variab'],['variables']
Modifiability,"for (UInt_t ivar=0; ivar<4; ivar++) vars[ivar] = treevars[ivar];; 261 // // add training and test events; here: first half is training, second is testing; 262 // // note that the weight can also be event-wise; 263 // if (i < signalTree->GetEntries()/2.0) dataloader->AddSignalTrainingEvent( vars, signalWeight );; 264 // else dataloader->AddSignalTestEvent ( vars, signalWeight );; 265 // }; 266 //; 267 // // Background (has event weights); 268 // background->SetBranchAddress( ""weight"", &weight );; 269 // for (UInt_t ivar=0; ivar<4; ivar++) background->SetBranchAddress( Form( ""var%i"", ivar+1 ), &(treevars[ivar]) );; 270 // for (UInt_t i=0; i<background->GetEntries(); i++) {; 271 // background->GetEntry(i);; 272 // for (UInt_t ivar=0; ivar<4; ivar++) vars[ivar] = treevars[ivar];; 273 // // add training and test events; here: first half is training, second is testing; 274 // // note that the weight can also be event-wise; 275 // if (i < background->GetEntries()/2) dataloader->AddBackgroundTrainingEvent( vars, backgroundWeight*weight );; 276 // else dataloader->AddBackgroundTestEvent ( vars, backgroundWeight*weight );; 277 // }; 278 // // --- end ------------------------------------------------------------; 279 // ```; 280 // End of tree registration; 281 ; 282 // Set individual event weights (the variables must exist in the original TTree); 283 // - for signal : `dataloader->SetSignalWeightExpression (""weight1*weight2"");`; 284 // - for background: `dataloader->SetBackgroundWeightExpression(""weight1*weight2"");`; 285 dataloader->SetBackgroundWeightExpression( ""weight"" );; 286 ; 287 // Apply additional cuts on the signal and background samples (can be different); 288 TCut mycuts = """"; // for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; 289 TCut mycutb = """"; // for example: TCut mycutb = ""abs(var1)<0.5"";; 290 ; 291 // Tell the dataloader how to use the training and testing events; 292 //; 293 // If no numbers of events are given, half of the events in the tree ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:12347,variab,variables,12347,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['variab'],['variables']
Modifiability,"for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumGenConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumGenConfig(); Constructor. ~RooNumGenConfig(); Destructor. RooNumGenConfig(const RooNumGenConfig& other); Copy constructor. RooNumGenConfig& operator=(const RooNumGenConfig& other); Assignment operator from other RooNumGenConfig. RooCategory& method1D(Bool_t cond, Bool_t cat). RooCategory& method2D(Bool_t cond, Bool_t cat). RooCategory& methodND(Bool_t cond, Bool_t cat). const RooCategory& method1D(Bool_t cond, Bool_t cat). const RooCategory& method2D(Bool_t cond, Bool_t cat). const RooCategory& methodND(Bool_t cond, Bool_t cat). Bool_t addConfigSection(const RooAbsNumGenerator* proto, const RooArgSet& defaultConfig); Add a configuration section for a particular integrator. Integrator name and capabilities are; automatically determined from instance passed as 'proto'. The defaultConfig object is associated; as the default configuration for the integrator. RooArgSet& getConfigSection(const char* name); Return section with configuration parameters for integrator with given (class) name. const RooArgSet& getConfigSection(const char* name); Retrieve configuration information specific to integrator with given name. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. void Print(Option_t* options = 0) const. » Last changed: Mon Dec 7 13:48:31 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenConfig.html:9153,config,configuration,9153,root/html526/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html526/RooNumGenConfig.html,4,['config'],['configuration']
Modifiability,"for RooProdPdf. More...;  ; class  RooHist;  Graphical representation of binned data based on the TGraphAsymmErrors class. More...;  ; class  RooHistError;  Singleton class used to calculate the error bars for each bin of a RooHist object. More...;  ; class  RooHistFunc;  A real-valued function sampled from a multidimensional histogram. More...;  ; class  RooHistPdf;  A propability density function sampled from a multidimensional histogram. More...;  ; class  RooImproperIntegrator1D;  Special numeric integrator that can handle integrals over open domains. More...;  ; class  RooInvTransform;  Lightweight function binding that returns the inverse of an input function binding. More...;  ; class  RooLinkedList;  Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. More...;  ; class  RooLinkedListElem;  Link element for the RooLinkedList class. More...;  ; class  RooLinTransBinning;  Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:12463,variab,variable,12463,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['variab'],['variable']
Modifiability,"for X World to absolute pixel. ;  ; Double_t fXtoPixel;  xpixel = fXtoPixelk + fXtoPixel*xworld ;  ; Double_t fXtoPixelk;  Conversion coefficient for X World to pixel. ;  ; Double_t fXUpNDC;  ; Double_t fY1;  Y of lower Y coordinate. ;  ; Double_t fY2;  Y of upper Y coordinate. ;  ; Double_t fYlowNDC;  Y bottom left corner of pad in NDC [0,1]. ;  ; Double_t fYtoAbsPixelk;  Conversion coefficient for Y World to absolute pixel. ;  ; Double_t fYtoPixel;  ypixel = fYtoPixelk + fYtoPixel*yworld ;  ; Double_t fYtoPixelk;  Conversion coefficient for Y World to pixel. ;  ; Double_t fYUpNDC;  ;  Protected Attributes inherited from TVirtualPad; Bool_t fResizing;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:59327,inherit,inherited,59327,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,8,['inherit'],['inherited']
Modifiability,"for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction2PdfBinding_double_double_double_.html:39687,config,configuration,39687,root/html530/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction2PdfBinding_double_double_double_.html,1,['config'],['configuration']
Modifiability,"for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooCategoryProxy_rhoQ; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooNonCPEigenDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxy_wQ; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNonCPEigenDecay.html:43026,config,configuration,43026,root/html532/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html532/RooNonCPEigenDecay.html,1,['config'],['configuration']
Modifiability,"for all axis. void SetAxisHistogramHeight(Double_t h = 0.5); Set the same histogram axis height for all axis. void SetGlobalLogScale(Bool_t ); All axes in log scale. void SetGlobalScale(Bool_t gl); Constraint all axes to the same scale. void SetAxisHistogramLineWidth(Int_t lw = 2); Set the same histogram axis line width for all axis. void SetCandleChart(Bool_t can); Set a candle chart display. void SetCurrentFirst(Long64_t ); Set the first entry to be dispayed. void SetCurrentN(Long64_t ); Set the number of entry to be displayed. TParallelCoordSelect* SetCurrentSelection(const char* title); Set the selection beeing edited. void SetCurrentSelection(TParallelCoordSelect* sel); Set the selection beeing edited. void SetDotsSpacing(Int_t s = 0); Set dots spacing. Modify the line style 11. void SetEntryList(TParallelCoord* para, TEntryList* enlist); Set the entry lists of ""para"". void SetGlobalMax(Double_t max); Force all variables to adopt the same max. void SetGlobalMin(Double_t min); Force all variables to adopt the same min. void SetLiveRangesUpdate(Bool_t ); If true, the pad is updated while the motion of a dragged range. void SetVertDisplay(Bool_t vert = kTRUE); Set the vertical or horizontal display. void UnzoomAll(); Unzoom all variables. TParallelCoord(). Bool_t GetCandleChart(); {return TestBit(kCandleChart);}. Long64_t GetCurrentFirst(); {return fCurrentFirst;}. Long64_t GetCurrentN(); {return fCurrentN;}. Bool_t GetCurveDisplay() const; {return TestBit(kCurveDisplay);}. Int_t GetDotsSpacing() const; {return fDotsSpacing;}. Bool_t GetGlobalScale(); {return TestBit(kGlobalScale);}. Bool_t GetGlobalLogScale(); {return TestBit(kGlobalLogScale);}. Color_t GetLineColor(); {return fLineColor;}. Width_t GetLineWidth(); {return fLineWidth;}. UInt_t GetNvar(); {return fNvar;}. Long64_t GetNentries(); {return fNentries;}. TList * GetSelectList(); {return fSelectList;}. TList * GetVarList(); {return fVarList;}. Bool_t GetVertDisplay() const; {return TestBit(kVertDisplay);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParallelCoord.html:16927,variab,variables,16927,root/html530/TParallelCoord.html,https://root.cern,https://root.cern/root/html530/TParallelCoord.html,2,['variab'],['variables']
Modifiability,"for any p.d.f ; Reimplemented in RooEffProd, RooAbsAnaConvPdf, RooAddModel, RooAddPdf, RooFFTConvPdf, RooNumConvPdf, RooProdPdf, and RooSimultaneous.; Definition at line 1127 of file RooAbsPdf.cxx. ◆ generate() [1/6]. RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Generate a new dataset containing the specified variables with events sampled from our distribution. ; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:113674,variab,variables,113674,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['variab'],['variables']
Modifiability,"for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,int>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction4Binding_double_double_double_double_int_.html:33594,config,configuration,33594,root/html532/RooCFunction4Binding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html532/RooCFunction4Binding_double_double_double_double_int_.html,1,['config'],['configuration']
Modifiability,"for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ;  ; static double Eval (IParamFunction &f, double x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:2934,adapt,adaptive,2934,doc/master/classROOT_1_1Math_1_1Derivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html,1,['adapt'],['adaptive']
Modifiability,"for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; int_l1; int_l2; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; int_m1; int_m2; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLegendre.html:32169,config,configuration,32169,root/html528/RooLegendre.html,https://root.cern,https://root.cern/root/html528/RooLegendre.html,2,['config'],['configuration']
Modifiability,"for it. ;  ;  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ;  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ;  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ;  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ;  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ;  ratioplot6.C;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ;  ratioplot6.py;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ;  ratioplotOld.C;  Example displaying two histograms and their ratio. ;  ;  rebin.C;   Rebin a variable bin-width histogram. ;  ;  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ;  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ;  statsEditing.C;   Edit statistics box. ;  ;  testSmooth.C;   Histogram smoothing. ;  ;  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ;  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ;  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ;  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ;  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ;  thstackcolorscheme.C;   This example demonstrate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html:4902,variab,variable,4902,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,1,['variab'],['variable']
Modifiability,"for name)Definition MsgLogger.h:108; TMVA::MsgLogger::fgSuffixstatic const std::string fgSuffixsuffix following source nameDefinition MsgLogger.h:111; TMVA::MsgLogger::EnableOutputstatic void EnableOutput()Definition MsgLogger.cxx:68; TMVA::MsgLogger::fMinTypeEMsgType fMinTypeminimum type for outputDefinition MsgLogger.h:119; TMVA::MsgLogger::fgTypeMapstatic std::atomic< const std::map< EMsgType, std::string > * > fgTypeMapmatches output types with stringsDefinition MsgLogger.h:117; TMVA::MsgLogger::GetSourcestd::string GetSource() constDefinition MsgLogger.h:71; TMVA::MsgLogger::GetFormattedSourcestd::string GetFormattedSource() constmake sure the source name is no longer than fgMaxSourceSize:Definition MsgLogger.cxx:143; TMVA::MsgLogger::InitMapsvoid InitMaps()Create the message type and color maps.Definition MsgLogger.cxx:270; TMVA::MsgLogger::fActiveTypeEMsgType fActiveTypeactive typeDefinition MsgLogger.h:112; TMVA::MsgLogger::WriteMsgvoid WriteMsg(EMsgType type, const std::string &line) constputting the output string, the message type, and the color switcher together into a single stringDefinition MsgLogger.cxx:220; TMVA::MsgLogger::Endmsgstatic MsgLogger & Endmsg(MsgLogger &logger)end lineDefinition MsgLogger.cxx:261; TMVA::MsgLogger::fgInhibitOutputstatic std::atomic< Bool_t > fgInhibitOutputflag to suppress all outputDefinition MsgLogger.h:115; TMVA::MsgLogger::Sendvoid Send()activates the logger writerDefinition MsgLogger.cxx:185; TMVA::MsgLogger::GetMinTypeEMsgType GetMinType() constDefinition MsgLogger.h:69; TMVA::EMsgTypeEMsgTypeDefinition Types.h:55; TObjectMother of all ROOT objects.Definition TObject.h:41; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; Types.h. tmvatmvaincTMVAMsgLogger.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MsgLogger_8h_source.html:9706,variab,variable,9706,doc/master/MsgLogger_8h_source.html,https://root.cern,https://root.cern/doc/master/MsgLogger_8h_source.html,1,['variab'],['variable']
Modifiability,"for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooPolyVar(); Default constructor. RooPolyVar(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList, Int_t lowestOrd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPolyVar.html:35104,config,configuration,35104,root/html534/RooPolyVar.html,https://root.cern,https://root.cern/root/html534/RooPolyVar.html,1,['config'],['configuration']
Modifiability,"for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxy_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsHiddenReal(); Destructor. void printValue(ostream& stream) const; Special version of printValue that doesn't reveal t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsHiddenReal.html:35177,config,configuration,35177,root/html534/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html534/RooAbsHiddenReal.html,1,['config'],['configuration']
Modifiability,"for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooArgSet*_nset! Normalization set to be passed along to contents; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFormulaVar(const char* name, const char* title, const char* formula, const RooArgList& dependents); Constructor with form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFormulaVar.html:37551,config,configuration,37551,root/html602/RooFormulaVar.html,https://root.cern,https://root.cern/root/html602/RooFormulaVar.html,2,['config'],['configuration']
Modifiability,"for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. XrdClient*fClientHandle to the client object; void*fInitMtxProtects fInitDone, serializes the; Bool_tfIsRootdNature of remote file server; static TFileStager*fgFileStagerStager for IsStaged checks; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); Create a TXNetFile object. A TXNetFile object is the same as a TNetFile; (from which the former derives) except that the protocol is extended to; support dealing with new xrootd data server or xrootd load balancer; server. The ""url"" argument must be of the form. root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options fiel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXNetFile.html:25141,extend,extended,25141,root/html534/TXNetFile.html,https://root.cern,https://root.cern/root/html534/TXNetFile.html,1,['extend'],['extended']
Modifiability,"for plotting. ; xThe variable of the PDF. ; x0Location parameter of the Gaussian component. ; sigmaLRWidth parameter of the Gaussian component. ; alphaLLocation of transition to a power law on the left, in standard deviations away from the mean. ; nLExponent of power-law tail on the left. ; alphaRLocation of transition to a power law on the right, in standard deviations away from the mean. ; nRExponent of power-law tail on the right. . Definition at line 102 of file RooCrystalBall.cxx. ◆ RooCrystalBall() [4/5]. RooCrystalBall::RooCrystalBall ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . RooAbsReal & ; x0, . RooAbsReal & ; sigmaLR, . RooAbsReal & ; alpha, . RooAbsReal & ; n, . bool ; doubleSided = false . ). Create a crystal ball shape with symmetric Gaussian core and only a tail on one side (just like RooCBShape) or two symmetric tails (like RooSDSCBShape). ; Parameters. nameName that identifies the PDF in computations. ; titleTitle for plotting. ; xThe variable of the PDF. ; x0Location parameter of the Gaussian component. ; sigmaLRWidth parameter of the Gaussian component. ; alphaLocation of transition to a power law, in standard deviations away from the mean. ; nExponent of power-law tail. ; doubleSidedWhether the tail is only on one side or on both sides . Definition at line 129 of file RooCrystalBall.cxx. ◆ RooCrystalBall() [5/5]. RooCrystalBall::RooCrystalBall ; (; const RooCrystalBall & ; other, . const char * ; name = nullptr . ). Copy a RooCrystalBall. ; Definition at line 150 of file RooCrystalBall.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooCrystalBall::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ; This functions will only be called with codes returned by getAnalyticalIntegral, except code zero. ; Reimplemented from RooAbsReal.; Definition at line 241 of file RooCr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCrystalBall.html:77837,variab,variable,77837,doc/master/classRooCrystalBall.html,https://root.cern,https://root.cern/doc/master/classRooCrystalBall.html,1,['variab'],['variable']
Modifiability,"for possible alternative name (default template; parameter, typedefs template arguments, typedefed name). TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class with name. Obsolete, use TClass::GetClass directly. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. If load is true; force reading of all currently defined globals from CINT (more; expensive). TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name. If params != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:23445,variab,variable,23445,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,4,['variab'],['variable']
Modifiability,"for the READER to ensure backward compatibility ;  ; void DeclareOptions ();  declare options available for this method ;  ; Double_t getLoss (TString lossFunction);  getLoss Calculates loss for testing dataset. ;  ; void ProcessOptions ();  option post processing (if necessary) ;  . Private Attributes; Float_t fBparm;  free plane coefficient ;  ; Float_t fCost;  cost value ;  ; Int_t fDataSize;  ; Float_t fDoubleSigmaSquared;  for RBF Kernel ;  ; Float_t fGamma;  RBF Kernel parameter. ;  ; std::string fGammaList;  ; std::string fGammas;  ; std::vector< TMVA::SVEvent * > * fInputData;  vector of training data in SVM format ;  ; Float_t fKappa;  for Sigmoidal Kernel ;  ; TString fLoss;  ; UInt_t fMaxIter;  max number of iteration ;  ; TVectorD * fMaxVars;  for normalization //is it still needed?? ;  ; std::vector< Float_t > fmGamma;  vector of gammas for multi-gaussian kernel ;  ; TVectorD * fMinVars;  for normalization //is it still needed?? ;  ; Float_t fMult;  ; std::string fMultiKernels;  ; UShort_t fNSubSets;  nr of subsets, default 1 ;  ; Float_t fNumVars;  number of input variables for multi-gaussian ;  ; Int_t fOrder;  for Polynomial Kernel ( polynomial order ) ;  ; std::vector< TMVA::SVEvent * > * fSupportVectors;  contains support vectors ;  ; SVKernelFunction * fSVKernelFunction;  kernel function ;  ; TString fTheKernel;  kernel name ;  ; Float_t fTheta;  for Sigmoidal Kernel ;  ; Float_t fTolerance;  tolerance parameter ;  ; std::string fTune;  Specify parameters to be tuned. ;  ; std::vector< TString > fVarNames;  ; SVWorkingSet * fWgSet;  svm working set ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html:27595,variab,variables,27595,doc/master/classTMVA_1_1MethodSVM.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html,1,['variab'],['variables']
Modifiability,"for the current shape that will be created in this process. Such volumes having shape parameters known only when used have to be positioned only with TGeoManager::Node() method (see ‘Creating and Positioning Volumes’).; Other case when shape parameterizations are quite useful is scaling geometry structures. Imagine that we would like to enlarge/shrink a detector structure on one or more axes. This happens quite often in real life and is handled by “fitting mother” parameters. This is accomplished by defining shapes with one or more invalid (negative) parameters. For instance, defining a box having dx=10., dy=10., and dz=-1 will not generate an error but will be interpreted in a different way: A special volume TGeoVolumeMulti will be created. Whenever positioned inside a mother volume, this will create a normal TGeoVolume object having as shape a box with dz fitting the corresponding dzof the mother shape. Generally, this type of parameterization is used when positioning volumes in containers having a matching shape, but it works also for most reasonable combinations.; 18.4 Geometry Creation; A given geometry can be built in various ways, but one has to follow some mandatory steps. Even if we might use some terms that will be explained later, here are few general rules:. Volumes need media and shapes in order to be created.; Both containers and contained volumes must be created before linking them together, and the relative transformation matrix must be provided.; Any volume have to be positioned somewhere otherwise it will not be considered as part of the geometry.; Visibility or tracking properties of volumes can be provided both at build time or after geometry is closed, but global visualization settings (see section: “The Drawing Package”) should not be provided at build time, otherwise the drawing package will be loaded. There is also a list of specific rules:. Positioned volumes should not extrude their container or intersect with others within this unless it is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:927807,parameteriz,parameterization,927807,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['parameteriz'],['parameterization']
Modifiability,"for the data member.; 512 TMemberStreamer* pstreamer = config->fCompInfo->fStreamer;; 513 // -- We have a private streamer.; 514 UInt_t pos = buf.WriteVersion(config->fInfo->IsA(), kTRUE);; 515 // Loop over the entries in the clones array or the STL container.; 516 //for (int k = 0; k < narr; ++k) {; 517 // Get a pointer to the counter for the varying length array.; 518 Int_t* counter = (Int_t*) ((char *) addr /*entry pointer*/ + eoffset /*entry offset*/ + config->fCompInfo->fMethod /*counter offset*/);; 519 ; 520 // And call the private streamer, passing it the buffer, the object, and the counter.; 521 (*pstreamer)(buf, (char *) addr /*entry pointer*/ + ioffset /*object offset*/, *counter);; 522 //} for k; 523 buf.SetByteCount(pos, kTRUE);; 524 // We are done, next streamer element.; 525 return 0;; 526 }; 527 ; 528 // Get the class of the data member.; 529 TClass* cl = config->fCompInfo->fClass;; 530 // Which are we, an array of objects or an array of pointers to objects?; 531 Bool_t isPtrPtr = (strstr(config->fCompInfo->fElem->GetTypeName(), ""**"") != 0);; 532 ; 533 // By default assume the file version is the newest.; 534 Int_t fileVersion = kMaxInt;; 535 ; 536 if (!kIsTextT) {; 537 // At this point we do *not* have a private streamer.; 538 // Get the version of the file we are writing to.; 539 TFile* file = (TFile*) buf.GetParent();; 540 if (file) {; 541 fileVersion = file->GetVersion();; 542 }; 543 }; 544 // Write the class version to the buffer.; 545 UInt_t pos = buf.WriteVersion(config->fInfo->IsA(), kTRUE);; 546 if (fileVersion > 51508) {; 547 // -- Newer versions allow polymorphic pointers to objects.; 548 // Loop over the entries in the clones array or the STL container.; 549 //for (int k = 0; k < narr; ++k) {; 550 // Get the counter for the varying length array.; 551 Int_t vlen = *((Int_t*) ((char *) addr /*entry pointer*/ + eoffset /*entry offset*/ + config->fCompInfo->fMethod /*counter offset*/));; 552 ; 553 //b << vlen;; 554 if (vlen) {; 555 // Get a po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:20758,config,config,20758,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,2,['config'],['config']
Modifiability,"for the event sample and the variables used. Double_t TrainNodeFull(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node). TMVA::DecisionTreeNode* GetEventNode(const TMVA::Event& e) const; get the pointer to the leaf node where a particular event ends up in...; (used in gradient boosting). Double_t CheckEvent(const TMVA::Event* , Bool_t UseYesNoLeaf = kFALSE) const; the event e is put into the decision tree (starting at the root node); and the output is NodeType (signal) or (background) of the final node (basket); in which the given events ends up. I.e. the result of the classification if; the event for this decision tree. Double_t SamplePurity(TMVA::DecisionTree::EventList eventSample); calculates the purity S/(S+B) of a given event sample. vector< Double_t > GetVariableImportance(); Return the relative variable importance, normalized to all; variables together having the importance 1. The importance in; evaluated as the total separation-gain that this variable had in; the decision trees (weighted by the number of events). Double_t GetVariableImportance(UInt_t ivar); returns the relative improtance of variable ivar. DecisionTreeNode* GetRoot() const; Retrieves the address of the root node. { return dynamic_cast<TMVA::DecisionTreeNode*>(fRoot); }. DecisionTreeNode * CreateNode(UInt_t ) const; { return new DecisionTreeNode(); }. BinaryTree* CreateTree() const; { return new DecisionTree(); }. const char* ClassName() const; { return ""DecisionTree""; }. Double_t TrainNode(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node); determine the way how a node is split (which variable, which cut value). { return TrainNodeFast( eventSample, node ); }. void SetPruneMethod(TMVA::DecisionTree::EPruneMethod m = kCostComplexityPruning); { fPruneMethod = m; }. void SetPruneStrength(Double_t p); manage the pruning strength parameter (iff < 0 -> automate the pruning process). { fPruneStrength = p; }. Double_t GetPruneStrengt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:14914,variab,variable,14914,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,3,['variab'],['variable']
Modifiability,"for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Additional Inherited Members;  Public Types inherited from TCanvas; enum  { ;   kShowEventStatus = (1ULL << ( 15 )); , kAutoExec = (1ULL << ( 16 )); , kMenuBar = (1ULL << ( 17 )); , kShowToolBar = (1ULL << ( 18 )); , ;   kShowEditor = (1ULL << ( 19 )); , kMoveOpaque = (1ULL << ( 20 )); , kResizeOpaque = (1ULL << ( 21 )); , kIsGrayscale = (1ULL << ( 22 )); , ;   kShowToolTips = (1ULL << ( 23 )). };  ;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:59499,inherit,inherited,59499,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,2,['inherit'],['inherited']
Modifiability,"for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Private Member Functions;  TButton (const TButton &)=delete;  ; TButton & operator= (const TButton &)=delete;  . Private Attributes; Bool_t fFocused;  If cursor is in... ;  ; Bool_t fFraming;  True if you want a frame to be painted when pressed. ;  . Additional Inherited Members;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:51602,inherit,inherited,51602,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,2,['inherit'],['inherited']
Modifiability,"for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Private Member Functions;  TDialogCanvas (const TDialogCanvas &)=delete;  ; TDialogCanvas & operator= (const TDialogCanvas &)=delete;  . Additional Inherited Members;  Public Types inherited from TCanvas; enum  { ;   kShowEventStatus = (1ULL << ( 15 )); , kAutoExec = (1ULL << ( 16 )); , kMenuBar = (1ULL << ( 17 )); , kShowToolBar = (1ULL << ( 18 )); , ;   kShowEditor = (1ULL << ( 19 )); , kMoveOpaque = (1ULL << ( 20 )); , kResizeOpaque = (1ULL << ( 21 )); , kIsGrayscale = (1ULL << ( 22 )); , ;   kShowToolTips = (1ULL << ( 23 )). };  ;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDialogCanvas.html:59591,inherit,inherited,59591,doc/master/classTDialogCanvas.html,https://root.cern,https://root.cern/doc/master/classTDialogCanvas.html,2,['inherit'],['inherited']
Modifiability,"for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Static Protected Attributes inherited from TPad; static Int_t fgMaxPickDistance = 5;  Maximum Pick Distance. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGroupButton.h>. Inheritance diagram for TGroupButton:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGroupButton() [1/3]. TGroupButton::TGroupButton ; (; const TGroupButton & ; ). privatedelete . ◆ TGroupButton() [2/3]. TGroupButton::TGroupButton ; (; ). GroupButton default constructor. ; Definition at line 46 of file TGroupButton.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGroupButton.html:53020,inherit,inherited,53020,doc/master/classTGroupButton.html,https://root.cern,https://root.cern/doc/master/classTGroupButton.html,2,['inherit'],['inherited']
Modifiability,"for the format description. ; Definition at line 29 of file TTreeDrawArgsParser.h. Public Types; enum  EOutputType { ;   kUNKNOWN; , kEVENTLIST; , kENTRYLIST; , kPROFILE; , ;   kPROFILE2D; , kGRAPH; , kPOLYMARKER3D; , kHISTOGRAM1D; , ;   kHISTOGRAM2D; , kLISTOFGRAPHS; , kLISTOFPOLYMARKERS3D; , kHISTOGRAM3D. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeDrawArgsParser ();  Constructor - cleans all the class variables. ;  ;  ~TTreeDrawArgsParser () override;  Destructor. ;  ; bool GetAdd () const;  ; Int_t GetDimension () const;  ; TString const & GetExp () const;  ; Double_t GetIfSpecified (Int_t num, Double_t def) const;  ; Int_t GetNoParameters () const;  ; TString const & GetObjectName () const;  ; TString GetObjectTitle () const;  Returns the desired plot title. ;  ; bool GetOptionSame () const;  ; TObject * GetOriginal () const;  ; Double_t GetParameter (int num) const;  returns num-th parameter from brackets in the expression in case of an error (wrong number) returns 0.0 num - number of parameter (counted from 0) ;  ; TString GetProofSelectorName () const;  Returns appropriate TSelector class name for proof for the object that is to be drawn assumes that Parse() method has been called before. ;  ; TString const & GetSelection () const;  ; bool GetShouldDraw () const;  ; TString GetVarExp () const;  Returns the variable string, i.e. [var1[:var2[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeDrawArgsParser.html:1482,variab,variables,1482,doc/master/classTTreeDrawArgsParser.html,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html,1,['variab'],['variables']
Modifiability,"for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:31866,variab,variable,31866,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['variab'],['variable']
Modifiability,"for this node; Bool_t_logInit! flag used for chaching polynomial coefficients; vector<double>_low; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Double_t_nominal; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_paramIter! do not persist; RooListProxy_paramList; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; vector<double>_polCoeff! cached polynomial coefficients; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FlexibleInterpVar(); Default constructor. FlexibleInterpVar(const char* name, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__FlexibleInterpVar.html:37877,config,configuration,37877,root/html602/RooStats__HistFactory__FlexibleInterpVar.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__FlexibleInterpVar.html,2,['config'],['configuration']
Modifiability,for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGGroupFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static FontStruct_t GetDefaultFontStruct ();  Return default font structure in use. ;  ; static const TGGC & GetDefaultGC ();  Return default graphics context in use. ;  ;  Static Public Member Functions inherited from TGCompositeFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shadow color graphics context. ;  ; static const TGGC & GetWhiteGC ();  Get white graphics context. ;  ; static Pixel_t GetWhitePixel ();  Get white pixel value. ;  ;  Static Public Member Functions inherited from TGWindow; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ver,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGButtonGroup.html:28099,inherit,inherited,28099,doc/master/classTGButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html,2,['inherit'],['inherited']
Modifiability,"for this socket to change status. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ;  ; virtual Int_t SetOption (ESockOptions opt, Int_t val);  Set socket options. ;  ; void SetRemoteProtocol (Int_t rproto);  ; void SetSecContext (TSecContext *ctx);  ; void SetService (const char *service);  ; void SetServType (Int_t st);  ; void SetUrl (const char *url);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Touch ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and tit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPServerSocket.html:5694,inherit,inherited,5694,doc/master/classTPServerSocket.html,https://root.cern,https://root.cern/doc/master/classTPServerSocket.html,2,['inherit'],['inherited']
Modifiability,"for tree "" << tr->GetName() << Endl;; 304 std::vector<TTreeFormula*>::const_iterator formIt, formItEnd;; 305 for (formIt = fInputFormulas.begin(), formItEnd=fInputFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 306 fInputFormulas.clear();; 307 TTreeFormula* ttf = 0;; 308 fInputTableFormulas.clear(); // this contains shallow pointer copies; 309 ; 310 bool firstArrayVar = kTRUE;; 311 int firstArrayVarIndex = -1;; 312 int arraySize = -1;; 313 for (UInt_t i = 0; i < dsi.GetNVariables(); i++) {; 314 ; 315 // create TTreeformula; 316 if (! dsi.IsVariableFromArray(i) ) {; 317 ttf = new TTreeFormula(Form(""Formula%s"", dsi.GetVariableInfo(i).GetInternalName().Data()),; 318 dsi.GetVariableInfo(i).GetExpression().Data(), tr);; 319 CheckTTreeFormula(ttf, dsi.GetVariableInfo(i).GetExpression(), hasDollar);; 320 fInputFormulas.emplace_back(ttf);; 321 fInputTableFormulas.emplace_back(std::make_pair(ttf, (Int_t) 0));; 322 } else {; 323 // it is a variable from an array; 324 if (firstArrayVar) {; 325 ; 326 // create a new TFormula; 327 ttf = new TTreeFormula(Form(""Formula%s"", dsi.GetVariableInfo(i).GetInternalName().Data()),; 328 dsi.GetVariableInfo(i).GetExpression().Data(), tr);; 329 CheckTTreeFormula(ttf, dsi.GetVariableInfo(i).GetExpression(), hasDollar);; 330 fInputFormulas.push_back(ttf);; 331 ; 332 arraySize = dsi.GetVarArraySize(dsi.GetVariableInfo(i).GetExpression());; 333 firstArrayVar = kFALSE;; 334 firstArrayVarIndex = i;; 335 ; 336 Log() << kINFO << ""Using variable "" << dsi.GetVariableInfo(i).GetInternalName() <<; 337 "" from array expression "" << dsi.GetVariableInfo(i).GetExpression() << "" of size "" << arraySize << Endl;; 338 }; 339 fInputTableFormulas.push_back(std::make_pair(ttf, (Int_t) i-firstArrayVarIndex));; 340 if (int(i)-firstArrayVarIndex == arraySize-1 ) {; 341 // I am the last element of the array; 342 firstArrayVar = kTRUE;; 343 firstArrayVarIndex = -1;; 344 Log() << kDEBUG << ""Using Last variable from array : "" << dsi.GetVariableInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:12859,variab,variable,12859,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['variab'],['variable']
Modifiability,"for(void *iter = start; iter != end; iter = (char*)iter + incr, ++i ) {; 1897 arrptr[i] = (char*)iter;; 1898 }; 1899 ((TStreamerInfo*)config->fInfo)->WriteBufferAux(buf, arrptr, &(config->fCompInfo), /*first*/ 0, /*last*/ 1, n, config->fOffset, 1|2 );; 1900 delete [] arrptr;; 1901 return 0;; 1902 }; 1903 ; 1904 template <typename T>; 1905 static INLINE_TEMPLATE_ARGS Int_t ReadCollectionBasicType(TBuffer &buf, void *addr, const TConfiguration *conf); 1906 {; 1907 // Collection of numbers. Memberwise or not, it is all the same.; 1908 ; 1909 TConfigSTL *config = (TConfigSTL*)conf;; 1910 UInt_t start, count;; 1911 /* Version_t vers = */ buf.ReadVersion(&start, &count, config->fOldClass);; 1912 ; 1913 std::vector<T> *const vec = (std::vector<T>*)(((char*)addr)+config->fOffset);; 1914 Int_t nvalues;; 1915 buf.ReadInt(nvalues);; 1916 vec->resize(nvalues);; 1917 ; 1918#ifdef R__VISUAL_CPLUSPLUS; 1919 if (nvalues <= 0) {; 1920 buf.CheckByteCount(start,count,config->fTypeName);; 1921 return 0;; 1922 }; 1923#endif; 1924 T *begin = &(*vec->begin());; 1925 buf.ReadFastArray(begin, nvalues);; 1926 ; 1927 buf.CheckByteCount(start,count,config->fTypeName);; 1928 return 0;; 1929 }; 1930 ; 1931 ; 1932 static INLINE_TEMPLATE_ARGS Int_t ReadCollectionFloat16(TBuffer &buf, void *addr, const TConfiguration *conf); 1933 {; 1934 // Collection of numbers. Memberwise or not, it is all the same.; 1935 ; 1936 TConfigSTL *config = (TConfigSTL*)conf;; 1937 UInt_t start, count;; 1938 /* Version_t vers = */ buf.ReadVersion(&start, &count, config->fOldClass);; 1939 ; 1940 std::vector<float> *const vec = (std::vector<float>*)(((char*)addr)+config->fOffset);; 1941 Int_t nvalues;; 1942 buf.ReadInt(nvalues);; 1943 vec->resize(nvalues);; 1944 ; 1945#ifdef R__VISUAL_CPLUSPLUS; 1946 if (nvalues <= 0) {; 1947 buf.CheckByteCount(start,count,config->fTypeName);; 1948 return 0;; 1949 }; 1950#endif; 1951 float *begin = &(*vec->begin());; 1952 buf.ReadFastArrayFloat16(begin, nvalues);; 1953 ; 1954 buf.CheckByte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:80274,config,config,80274,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['config'],['config']
Modifiability,"force=kFALSE)Close socket connection.Definition TSystem.cxx:2390; TSystem::GetLibrariesvirtual const char * GetLibraries(const char *regexp="""", const char *option="""", Bool_t isRegexp=kTRUE)Return a space separated list of loaded shared libraries.Definition TSystem.cxx:2136; TSystem::fBuildDirTString fBuildDirDefinition TSystem.h:307; TSystem::SetErrorStrvoid SetErrorStr(const char *errstr)Set the system error string.Definition TSystem.cxx:245; TSystem::RemoveSignalHandlervirtual TSignalHandler * RemoveSignalHandler(TSignalHandler *sh)Remove a signal handler from list of signal handlers.Definition TSystem.cxx:542; TSystem::SetSoExtvirtual void SetSoExt(const char *soExt)Set shared library extension, should be either .so, .sl, .a, .dll, etc.Definition TSystem.cxx:4236; TSystem::Closelogvirtual void Closelog()Close connection to system log daemon.Definition TSystem.cxx:1694; TSystem::fBuildCompilerTString fBuildCompilerDefinition TSystem.h:303; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; TSystem::GetBuildArchvirtual const char * GetBuildArch() constReturn the build architecture.Definition TSystem.cxx:3875; TSystem::Linkvirtual int Link(const char *from, const char *to)Create a link from file1 to file2.Definition TSystem.cxx:1359; TSystem::SigAlarmInterruptsSyscallsvirtual void SigAlarmInterruptsSyscalls(Bool_t)Definition TSystem.h:330; TSystem::HomeDirectoryvirtual const char * HomeDirectory(const char *userName=nullptr)Return the user's home directory.Definition TSystem.cxx:887; TSystem::SetLinkedLibsvirtual void SetLinkedLibs(const char *linkedLibs)LinkedLibs should contain the library directory and list of libraries needed to recreate the current ...Definition TSystem.cxx:4205; TSystem::GetWorkingDirectoryvirtual std::string GetWorkingDirectory() constReturn working directory.Definition TSystem.cxx:879; TSystem::fSoExtTString fSoExtDefinition TSystem.h:313; TSystem::SetBuildDirvirtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:191916,variab,variable,191916,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['variab'],['variable']
Modifiability,"forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_t_intOrderInterpolation order; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Double_t_totVolume! Total volume of space (product of ranges of observables); Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_unitNorm! Assume contents is unit normalized (for use as pdf cache); Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHistFunc.html:32211,config,configuration,32211,root/html526/RooHistFunc.html,https://root.cern,https://root.cern/root/html526/RooHistFunc.html,2,['config'],['configuration']
Modifiability,"fore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit.; ; In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information.; ; And example of usage is given in; $ROOTSYS/tutorials/fit/multidimfit.C.; . The Method; . Let by the dependent quantity of interest, which depends smoothly; on the observable quantities ; , which we'll denote by; ; . Given a training sample of tuples of the form,; (TMultiDimFit::AddRow); . where ; are independent; variables, is the known, quantity dependent at ; ,; and is the square error in , the class; TMultiDimFit; will; try to find the parameterization; . (1). such that; . (2). is minimal. Here ; are monomials, or Chebyshev or Legendre; polynomials, labelled ; , in each variable; , ; .; ; So what TMultiDimFit does, is to determine the number of; terms , and then terms (or functions) , and the ; coefficients , so that is minimal; (TMultiDimFit::FindParameterization).; ; Of course it's more than a little unlikely that will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error ; (TMultiDimFit::SetMinRelativeError), and ; will be considered minimized when; . Optionally, the user may impose a functional expression by specifying; the powers of each variable in specified functions ; (TMultiDimFit::SetPowers). In that case, only the; coefficients is calculated by the class.; . Limiting the Number of Terms; . As always when dealing with fits, there's a real chance of; over fitting. As is well-known, it's always possible to fit an; polynomial in to points with ; , but; the polynomial is not likely to fit new data at all; [1]. Therefore, the user is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:2743,variab,variable,2743,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['variab'],['variable']
Modifiability,"form.cxx. ◆ PrepareTransformation(). Bool_t TMVA::VariableNormalizeTransform::PrepareTransformation ; (; const std::vector< Event * > & ; events). virtual . prepare transformation ; Implements TMVA::VariableTransformBase.; Definition at line 90 of file VariableNormalizeTransform.cxx. ◆ PrintTransformation(). void TMVA::VariableNormalizeTransform::PrintTransformation ; (; std::ostream & ; o). virtual . prints the transformation ranges ; Reimplemented from TMVA::VariableTransformBase.; Definition at line 534 of file VariableNormalizeTransform.cxx. ◆ ReadFromXML(). void TMVA::VariableNormalizeTransform::ReadFromXML ; (; void * ; trfnode). virtual . Read the transformation matrices from the xml node. ; Implements TMVA::VariableTransformBase.; Definition at line 355 of file VariableNormalizeTransform.cxx. ◆ ReadTransformationFromStream(). void TMVA::VariableNormalizeTransform::ReadTransformationFromStream ; (; std::istream & ; istr, . const TString & ;  . ). virtual . Read the variable ranges from an input stream. ; Implements TMVA::VariableTransformBase.; Definition at line 491 of file VariableNormalizeTransform.cxx. ◆ Streamer(). virtual void TMVA::VariableNormalizeTransform::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::VariableTransformBase. ◆ StreamerNVirtual(). void TMVA::VariableNormalizeTransform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 87 of file VariableNormalizeTransform.h. ◆ Transform(). const TMVA::Event * TMVA::VariableNormalizeTransform::Transform ; (; const Event * const ; ev, . Int_t ; cls . ); const. virtual . apply the normalization transformation ; Implements TMVA::VariableTransformBase.; Definition at line 108 of file VariableNormalizeTransform.cxx. ◆ WriteTransformationToStream(). void TMVA::VariableNormalizeTransform::WriteTransformationToStream ; (; std::ostream & ; o); const. virtual . write the transformation to the stream ; Implements T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html:20254,variab,variable,20254,doc/master/classTMVA_1_1VariableNormalizeTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html,1,['variab'],['variable']
Modifiability,"formBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. vector<TMatrixD*>fDecorrMatrices! Decorrelation matrix [class0/class1/.../all classes]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableDecorrTransform( DataSetInfo& dsi ); constructor. ~VariableDecorrTransform(); destructor. void Initialize(); initialisation. Bool_t PrepareTransformation(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); calculate the decorrelation matrix and the normalization. std::vector<TString>* GetTransformationStrings(Int_t cls) const; creates string with variable transformations applied. const TMVA::Event* Transform(const TMVA::Event *const , Int_t cls) const; apply the decorrelation transformation. const TMVA::Event* InverseTransform(const TMVA::Event *const , Int_t cls) const; apply the inverse decorrelation transformation ...; TODO : ... build the inverse transformation. void CalcSQRMats(const vector<TMVA::Event*,allocator<TMVA::Event*> >& , Int_t maxCls); compute square-root matrices for signal and background. void WriteTransformationToStream(ostream& ) const; write the decorrelation matrix to the stream. void AttachXMLTo(void* parent); node attachment to parent. void ReadFromXML(void* trfnode); Read the transformation matrices from the xml node. void ReadTransformationFromStream(istream& , const TString& ); Read the decorellation matrix from an input stream. void PrintTransformation(ostream& o); prints the transformation matrix. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableDecorrTransform.html:9828,variab,variable,9828,root/html530/TMVA__VariableDecorrTransform.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableDecorrTransform.html,3,['variab'],['variable']
Modifiability,"formation for all or the slowest showlast workers. ;  ; void PrintWrkInfo (const char *wrk);  Print information for worker 'wn' (ordinal) or on the machine whose ordinal or fqdn matches 'wn'. ;  ; void PrintWrkInfo (Int_t showlast=10);  Print information for all or the slowest showlast workers. ;  ; void RatePlot (const char *wrks=0);  Show event processing or MB processing rate plot vs time. ;  ; void SetDebug (Int_t d=0);  Static setter for the verbosity level. ;  ; Int_t SetSaveResult (const char *file=""results.root"", Option_t *mode=""RECREATE"");  Set save result mode and validate 'file' according to 'mode'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Summary (Option_t *opt="""", const char *out="""");  Print summary of query. ;  ; void WorkerActivity ();  Measure the worker activity. ;  ; Bool_t WrkInfoOK () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis.html:2986,inherit,inherited,2986,doc/master/classTProofPerfAnalysis.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis.html,1,['inherit'],['inherited']
Modifiability,"formation.Definition DataSetInfo.h:62; TMVA::DataSetInfo::GetNVariablesUInt_t GetNVariables() constDefinition DataSetInfo.h:127; TMVA::DataSetInfo::GetNamevirtual const char * GetName() constReturns name of object.Definition DataSetInfo.h:71; TMVA::DataSetInfo::CorrelationMatrixconst TMatrixD * CorrelationMatrix(const TString &className) constDefinition DataSetInfo.cxx:197; TMVA::DataSetInfo::GetNClassesUInt_t GetNClasses() constDefinition DataSetInfo.h:155; TMVA::DataSetInfo::GetSplitOptionsconst TString & GetSplitOptions() constDefinition DataSetInfo.h:186; TMVA::DataSetInfo::GetNTargetsUInt_t GetNTargets() constDefinition DataSetInfo.h:128; TMVA::DataSetInfo::GetDataSetDataSet * GetDataSet() constreturns data setDefinition DataSetInfo.cxx:493; TMVA::DataSetInfo::CreateCorrelationMatrixHistTH2 * CreateCorrelationMatrixHist(const TMatrixD *m, const TString &hName, const TString &hTitle) constDefinition DataSetInfo.cxx:429; TMVA::DataSetInfo::GetListOfVariablesstd::vector< TString > GetListOfVariables() constreturns list of variablesDefinition DataSetInfo.cxx:406; TMVA::DataSetInfo::GetClassInfoClassInfo * GetClassInfo(Int_t clNum) constDefinition DataSetInfo.cxx:146; TMVA::DataSetInfo::GetCutconst TCut & GetCut(Int_t i) constDefinition DataSetInfo.h:168; TMVA::DataSetInfo::GetVariableInfoVariableInfo & GetVariableInfo(Int_t i)Definition DataSetInfo.h:105; TMVA::DataSetInfo::IsSignalBool_t IsSignal(const Event *ev) constDefinition DataSetInfo.cxx:167; TMVA::DataSetInfo::GetDataSetManagerDataSetManager * GetDataSetManager()Definition DataSetInfo.h:194; TMVA::DataSetManager::DataInputDataInputHandler & DataInput()Definition DataSetManager.h:76; TMVA::DataSetClass that contains all the data information.Definition DataSet.h:58; TMVA::DataSet::GetNEvtSigTestLong64_t GetNEvtSigTest()return number of signal test events in datasetDefinition DataSet.cxx:427; TMVA::DataSet::GetTreeTTree * GetTree(Types::ETreeType type)create the test/trainings tree with all the variables, the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:117739,variab,variablesDefinition,117739,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['variab'],['variablesDefinition']
Modifiability,"forming the projection to 1D histogram called from TH3::Project3D ;  ; virtual TH2D * DoProject2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal method performing the projection to a 2D histogram called from TH3::Project3D ;  ; Int_t Fill (const char *, const char *, Double_t);  ; Int_t Fill (const char *, Double_t, Double_t);  ; Int_t Fill (Double_t, const char *, Double_t);  ; Double_t Interpolate (Double_t x) const override;  Not yet implemented. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Not yet implemented. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:56829,variab,variable,56829,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['variab'],['variable']
Modifiability,"formula.ReplaceAll(pattern, replacement);; 2180 continue;; 2181 }; 2182 // looking for default variables defined in fVars; 2183 ; 2184 map<TString, TFormulaVariable>::iterator varsIt = fVars.find(fun.GetName());; 2185 if (varsIt != fVars.end()) {; 2186 ; 2187 TString name = (*varsIt).second.GetName();; 2188 Double_t value = (*varsIt).second.fValue;; 2189 ; 2190 AddVariable(name, value); // this set the cling variable; 2191 if (!fVars[name].fFound) {; 2192 ; 2193 fVars[name].fFound = true;; 2194 int varDim = (*varsIt).second.fArrayPos; // variable dimensions (0 for x, 1 for y, 2, for z); 2195 if (varDim >= fNdim) {; 2196 fNdim = varDim + 1;; 2197 ; 2198 // we need to be sure that all other variables are added with position less; 2199 for (auto &v : fVars) {; 2200 if (v.second.fArrayPos < varDim && !v.second.fFound) {; 2201 AddVariable(v.first, v.second.fValue);; 2202 v.second.fFound = true;; 2203 }; 2204 }; 2205 }; 2206 }; 2207 // remove the ""{.. }"" added around the variable; 2208 TString pattern = TString::Format(""{%s}"", name.Data());; 2209 TString replacement = TString::Format(""x[%d]"", (*varsIt).second.fArrayPos);; 2210 formula.ReplaceAll(pattern, replacement);; 2211 ; 2212 // std::cout << ""Found an observable for "" << fun.GetName() << std::endl;; 2213 ; 2214 fun.fFound = true;; 2215 continue;; 2216 }; 2217 // check for observables defined as x[0],x[1],....; 2218 // maybe could use a regular expression here; 2219 // only in case match with defined variables is not successful; 2220 TString funname = fun.GetName();; 2221 if (funname.Contains(""x["") && funname.Contains(""]"")) {; 2222 TString sdigit = funname(2, funname.Index(""]""));; 2223 int digit = sdigit.Atoi();; 2224 if (digit >= fNdim) {; 2225 fNdim = digit + 1;; 2226 // we need to add the variables in fVars all of them before x[n]; 2227 for (int j = 0; j < fNdim; ++j) {; 2228 TString vname = TString::Format(""x[%d]"", j);; 2229 if (fVars.find(vname) == fVars.end()) {; 2230 fVars[vname] = TFormulaVariable(vname, 0, j);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:84347,variab,variable,84347,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['variab'],['variable']
Modifiability,found - save the configuration ; : 5 | 31879.6 30001 0.0200761 0.00184919 43891 0; : 6 Minimum Test error found - save the configuration ; : 6 | 30965 29177.4 0.0203037 0.00185469 43362.8 0; : 7 Minimum Test error found - save the configuration ; : 7 | 30273.8 28682.9 0.0206315 0.00190133 42711.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 29852.4 28319.6 0.0206438 0.00186969 42611.9 0; : 9 Minimum Test error found - save the configuration ; : 9 | 29498.2 28000.3 0.0204359 0.0018446 43030.8 0; : 10 Minimum Test error found - save the configuration ; : 10 | 29182.7 27696.8 0.0202998 0.00181461 43277.8 0; : 11 Minimum Test error found - save the configuration ; : 11 | 28878.3 27413.2 0.0196838 0.00176755 44652.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 28593.7 27134.7 0.0196593 0.00176089 44696.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:12666,config,configuration,12666,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,"found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. void setBinning(const RooAbsBinning& binning, const char* name = 0); Add given binning under name 'name' with this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,max]. If name is null; range of default range is adjusted. If no range with; 'name' exists it is created on the fly. void setRange(const char* name, RooAbsReal& min, RooAbsReal& max); Create or modify a parameterized range named 'name' that has external functions; min and max parameterizing its boundaries. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. void printValue(ostream& os) const; Print value of variable. void printExtras(ostream& os) const; Print extras of variable: (asymmetric) error, constant flag, limits and binning. Int_t defaultPrintContents(Option_t* opt) const; Mapping of Print() option string to RooPrintable contents specifications. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. TString* format(const RooCmdArg& formatArg) const; Format contents of RooRealVar for pretty printing on RooPlot; parameter boxes. This function processes the named arguments; taken by paramOn() and translates them to an option string; parsed by RooRealVar::for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealVar.html:41362,parameteriz,parameterized,41362,root/html526/RooRealVar.html,https://root.cern,https://root.cern/root/html526/RooRealVar.html,8,['parameteriz'],"['parameterized', 'parameterizing']"
Modifiability,"fox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RooNumGenFactory(). RooNumGenFactory::~RooNumGenFactory ; (; ). override . Destructor. ; Definition at line 79 of file RooNumGenFactory.cxx. ◆ RooNumGenFactory() [1/2]. RooNumGenFactory::RooNumGenFactory ; (; ). protected . Constructor. ; Register all known integrators by calling their static registration functions ; Definition at line 51 of file RooNumGenFactory.cxx. ◆ RooNumGenFactory() [2/2]. RooNumGenFactory::RooNumGenFactory ; (; const RooNumGenFactory & ; other). protected . Copy constructor. ; Definition at line 92 of file RooNumGenFactory.cxx. Member Function Documentation. ◆ createSampler(). RooAbsNumGenerator * RooNumGenFactory::createSampler ; (; RooAbsReal & ; func, . const RooArgSet & ; genVars, . const RooArgSet & ; condVars, . const RooNumGenConfig & ; config, . bool ; verbose = false, . RooAbsReal * ; maxFuncVal = nullptr . ). Construct a numeric integrator instance that operates on function 'func' and is configured with 'config'. ; If ndimPreset is greater than zero that number is taken as the dimensionality of the integration, otherwise it is queried from 'func'. This function iterators over list of available prototype integrators and returns an clone attached to the given function of the first class that matches the specifications of the requested integration considering the number of dimensions, the nature of the limits (open ended vs closed) and the user preference stated in 'config' ; Definition at line 156 of file RooNumGenFactory.cxx. ◆ getProtoSampler(). const RooAbsNumGenerator * RooNumGenFactory::getProtoSampler ; (; const char * ; name). Return prototype integrator with given (class) name. ; Definition at line 136 of file RooNumGenFactory.cxx. ◆ instance(). RooNumGenFactory & RooNumGenFactory::instance ; (; ). static . Static method returning reference to singleton instance of factory. ; Definition at line 101 of file RooNumGenFactory.cxx. ◆ store",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenFactory.html:12436,config,configured,12436,doc/master/classRooNumGenFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumGenFactory.html,2,['config'],"['config', 'configured']"
Modifiability,"fr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooFit.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooFit::StoredFitResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ StoredFitResult() [1/2]. xRooFit::StoredFitResult::StoredFitResult ; (; RooFitResult * ; _fr). Definition at line 711 of file xRooFit.cxx. ◆ StoredFitResult() [2/2]. xRooFit::StoredFitResult::StoredFitResult ; (; const std::shared_ptr< RooFitResult > & ; _fr). Definition at line 716 of file xRooFit.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooFit::StoredFitResult::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooFit::StoredFitResult::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Experimenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:11179,inherit,inherited,11179,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,1,['inherit'],['inherited']
Modifiability,"frac);; ; // Import model into pdf; w.import(model);; ; // E n c o d e d e f i n i t i o n o f p a r a m e t e r s i n w o r k s p a c e; // ---------------------------------------------------------------------------------------; ; // Define named sets ""parameters"" and ""observables"", which list which variables should be considered; // parameters and observables by the users convention; //; // Variables appearing in sets _must_ live in the workspace already, or the autoImport flag; // of defineSet must be set to import them on the fly. Named sets contain only references; // to the original variables, therefore the value of observables in named sets already; // reflect their 'current' value; std::unique_ptr<RooArgSet> params{model.getParameters(x)};; w.defineSet(""parameters"", *params);; w.defineSet(""observables"", x);; ; // E n c o d e r e f e r e n c e v a l u e f o r p a r a m e t e r s i n w o r k s p a c e; // ---------------------------------------------------------------------------------------------------; ; // Define a parameter 'snapshot' in the pdf; // Unlike a named set, a parameter snapshot stores an independent set of values for; // a given set of variables in the workspace. The values can be stored and reloaded; // into the workspace variable objects using the loadSnapshot() and saveSnapshot(); // methods. A snapshot saves the value of each variable, any errors that are stored; // with it as well as the 'Constant' flag that is used in fits to determine if a; // parameter is kept fixed or not.; ; // Do a dummy fit to a (supposedly) reference dataset here and store the results; // of that fit into a snapshot; std::unique_ptr<RooDataSet> refData{model.generate(x, 10000)};; model.fitTo(*refData, PrintLevel(-1));; ; // The true flag imports the values of the objects in (*params) into the workspace; // If not set, the present values of the workspace parameters objects are stored; w.saveSnapshot(""reference_fit"", *params, true);; ; // Make another fit with the sig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8C.html:4275,variab,variables,4275,doc/master/rf510__wsnamedsets_8C.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8C.html,1,['variab'],['variables']
Modifiability,"frame position centered vertically (with horizontal containers only). kLHintsBottom; specifies the frame position to the bottom of the container frame, above any laid out frames with the same hint. kLHintsExpandX; specifies the frame to be expanded up to the width of the container frame. If the container frame is a vertical frame - it will fit the whole width. If it is a horizontal frame - after the positioning of all frames the available “free” width space is shared between the frames having this hint. kLHintsExpandY; specifies the frame to be expanded up to the height of the container frame. If the container frame is a horizontal frame - it will fit the whole height. If the container frame is a vertical frame - after the arrangement of all frames the available “free” height space is shared between the frames having this hint. kLHintsNormal; = kLHintsLeft | kLHintsTop - default hints. Layout policy:; Child frames never modify their container frame. The container frame can (or cannot) adapt its size in the layout process. It can show all or a part of its frames. Every TGFrame object has a default minimum size (1, 1) assured by TGWindow.; 25.7 Event Processing: Signals and Slots; Event handling covers the interaction between different objects and between the user and the objects in an application. There are two general ways for the user to interact with an application: the keyboard and the mouse. The Graphical User Interface is as a bridge between the user and the program - it provides methods to detect the user actions and instruments that do something as a reaction of these actions. The user communicates with an application through the window system. The window system reports interaction events to the application. The application in turn forwards them to the currently active window. The objects/widgets receive the events and react to them according to the application functionality. The signals/slot communication mechanism is an advanced object communication concept",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1162281,adapt,adapt,1162281,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['adapt'],['adapt']
Modifiability,"frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;; ; // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);; ; // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));; ; // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();; ; // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;; ; return mainframe;; }; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree.Definition TTreeTableInterface.h:25; TTreeTableInterface::SetSelectionvirtual void SetSelection(const char *selection)Set the selection expression.Definition TTreeTableInterface.cxx:140; TTreeTableInterface::AddColumnvirtual void AddColumn(const char *expression, UInt_t position)Add column according ot expression at position, TGTable->Update() is needed afterwards to apply the c...Definition TTreeTableInterface.cxx:378. Definition at line 34 of file TGTable.h. Public Member Functions;  TGTable (const TGWindow *p=nullptr, Int_t id=0, TVirtualTableInterface *interface=nullptr, UInt_t nrows=50, UInt_t ncolumns=20);  TGTable constuctor. ;  ;  ~TGTable () override;  TGTable destructor. ;  ; virtual TGTableCell * FindCell (TGString label);  Find the TGTableCell with label. ;  ; virtual const TGTableCell * FindCell (TGString label) const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:5876,variab,variables,5876,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['variab'],['variables']
Modifiability,"free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:9223,variab,variable,9223,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,3,['variab'],['variable']
Modifiability,"freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; Model is self normalized when used as p.d.f. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Tue Jun 30 14:30:45 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddModel.html:53543,extend,extendMode,53543,root/html602/RooAddModel.html,https://root.cern,https://root.cern/root/html602/RooAddModel.html,2,['extend'],"['extendMode', 'extended']"
Modifiability,"freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; Model is self normalized when used as p.d.f. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Tue Mar 10 17:14:23 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:51886,extend,extendMode,51886,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,2,['extend'],"['extendMode', 'extended']"
Modifiability,"friend element. ;  ;  ~TFriendElement () override;  Destructor. Disconnect from the owning tree if needed. ;  ; virtual TTree * Connect ();  Connect file and return TTree. ;  ; virtual TTree * DisConnect ();  DisConnect file and TTree. ;  ; virtual TFile * GetFile ();  Return pointer to TFile containing this friend TTree. ;  ; virtual TTree * GetParentTree () const;  ; virtual TTree * GetTree ();  Return pointer to friend TTree. ;  ; virtual const char * GetTreeName () const;  Get the actual TTree name of the friend. ;  ; TClass * IsA () const override;  ; bool IsUpdated () const;  ; void ls (Option_t *option="""") const override;  List this friend element. ;  ; void MarkUpdated ();  ; void RecursiveRemove (TObject *obj) override;  Forget deleted elements. ;  ; void Reset ();  ; void ResetUpdated ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFriendElement.html:2841,inherit,inherited,2841,doc/master/classTFriendElement.html,https://root.cern,https://root.cern/doc/master/classTFriendElement.html,1,['inherit'],['inherited']
Modifiability,"from 20 files; 644/// TChain ch1(""t1"");; 645/// TChain ch2(""t2"");; 646/// TChain ch3(""t3"");; 647/// ~~~; 648/// Now we can add the friends to the first chain.; 649/// ~~~ {.cpp}; 650/// ch.AddFriend(""t1""); 651/// ch.AddFriend(""t2""); 652/// ch.AddFriend(""t3""); 653/// ~~~; 654/// \image html tchain_friend.png; 655///; 656///; 657/// The parameter is the name of friend chain (the name of a chain is always; 658/// the name of the tree from which it was created).; 659/// The original chain has access to all variable in its friends.; 660/// We can use the TChain::Draw method as if the values in the friends were; 661/// in the original chain.; 662/// To specify the chain to use in the Draw method, use the syntax:; 663/// ~~~ {.cpp}; 664/// <chainname>.<branchname>.<varname>; 665/// ~~~; 666/// If the variable name is enough to uniquely identify the variable, you can; 667/// leave out the chain and/or branch name.; 668/// For example, this generates a 3-d scatter plot of variable ""var"" in the; 669/// TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2.; 670/// ~~~ {.cpp}; 671/// ch.Draw(""var:t1.v1:t2.v2"");; 672/// ~~~; 673/// When a TChain::Draw is executed, an automatic call to TTree::AddFriend; 674/// connects the trees in the chain. When a chain is deleted, its friend; 675/// elements are also deleted.; 676///; 677/// The number of entries in the friend must be equal or greater to the number; 678/// of entries of the original chain. If the friend has fewer entries a warning; 679/// is given and the resulting histogram will have missing entries.; 680/// For additional information see TTree::AddFriend.; 681 ; 682TFriendElement* TChain::AddFriend(const char* chain, const char* dummy /* = """" */); 683{; 684 if (!fFriends) {; 685 fFriends = new TList();; 686 }; 687 TFriendElement* fe = new TFriendElement(this, chain, dummy);; 688 ; 689 R__ASSERT(fe); // There used to be a ""if (fe)"" test ... Keep this assert until we are sure that fe is never null; 690 ; 69",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:25917,variab,variable,25917,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,3,['variab'],['variable']
Modifiability,"from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ;  Protected Member Functions inherited from RooAbsHiddenReal; RooAbsCategory & dummyBlindState () const;  Return reference to internal dummy RooCategory implementation blinding state switch. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Return value of object. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindCPAsymVar.html:50010,inherit,inherited,50010,doc/master/classRooUnblindCPAsymVar.html,https://root.cern,https://root.cern/doc/master/classRooUnblindCPAsymVar.html,1,['inherit'],['inherited']
Modifiability,"from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions;  RooProdGenContext (const RooProdGenContext &other);  ; void generateEvent (RooArgSet &theEvent, Int_t remaining) override;  Generate a single event of the product by generating the components of the products sequentially. ;  ; void initGenerator (const RooArgSet &theEvent) override;  One-time initialization of generator context, forward to component generators. ;  ; void updateCCDTable ();  ;  Protected Member Functions inherited from RooAbsGenContext; virtual RooDataSet * createDataSet (const char *name, const char *title, const RooArgSet &obs);  Create an empty dataset to hold the events that will be generated. ;  ; void resampleData (double &ratio);  Rescale existing output buffer with given ratio. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooArgSet * _ccdCloneSet;  ; bool _ccdRefresh;  ; RooSuperCategory * _ccdSuper;  SuperCategory of Common category dependents. ;  ; double * _ccdTable;  ; RooArgSet _commonCats;  Common category dependents. ;  ; std::list< std::unique_ptr< RooAbsGenContext > > _gcList;  List of component generator contexts. ;  ; RooArgSet _ownedMultiProds;  Owned auxiliary multi-term product PDFs. ;  ; const RooProdPdf * _pdf;  Original PDF. ;  ; RooRealIntegral * _pdfCcdInt;  ; RooAbsPdf * _pdfClone;  ; RooArgSet * _pdfCloneSet;  ; RooArgSet _uniObs;  Ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdGenContext.html:14290,inherit,inherited,14290,doc/master/classRooProdGenContext.html,https://root.cern,https://root.cern/doc/master/classRooProdGenContext.html,1,['inherit'],['inherited']
Modifiability,"from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const char *line);  The function ("".gh <type>"") submits a new issue on GitHub via web browser. ;  ; virtual void Help (const char *line);  The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxygen ("".help scope"" or "".help scope::member""). ;  ; virtual void MakeBatch ();  Switch to batch mode. ;  ; virtual Longptr_t ProcessRemote (const char *line, Int_t *error=nullptr);  Process the content of a line starting with "".R"" (already stripped-off) The format is. ;  ; void SetSignalHandler (TSignalHandler *sh);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Private Attributes; TGClient * fClient {nullptr};  pointer to the client environment ;  ; TString fDisplay;  display server to connect to ;  . Additional Inherited Members;  Public Types inherited from TApplication; enum  EExitOnException { kDontExit; , kExit; , kAbort; };  ; enum  EFileBits { kExpression = (1ULL << ( 14 )); };  ; enum  EStatusBits { kProcessRemotely = (1ULL << ( 15 )); , kDefaultApplication = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGApplication.html:18125,inherit,inherited,18125,doc/master/classTGApplication.html,https://root.cern,https://root.cern/doc/master/classTGApplication.html,1,['inherit'],['inherited']
Modifiability,"from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TPolyMarker3D * fMarker;  ; TGeoHMatrix * fMatrix1;  ; TGeoHMatrix * fMatrix2;  ; Double_t fOverlap;  ; TGeoVolume * fVolume1;  ; TGeoVolume * fVolume2;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Private Member Functions;  TGeoOverlap (const TGeoOverlap &)=delete;  ; TGeoOverlap & operator= (const TGeoOverlap &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGeoOverlap.h>. Inheritance diagram for TGeoOverlap:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EOverlapType. enum TGeoOverlap::EOverlapType. EnumeratorkGeoOverlap ; kGeoExtrusion . Definition at line 39 of file TGeoOverlap.h. Constructor & Destructor Documentation. ◆ TGeoOverlap() [1/3]. TGeoOverlap::TGeoOverlap ; (; const TGeoOverlap & ; ). privatedelete . ◆ TGeoOverlap() [2/3]. TGeoOverlap::TGeoOverlap ; (; ). Default ctor. ; Definition at line 39 of file TGeoOverlap.cxx. ◆ TGeoOverlap() [3/3]. TGeoOverlap::TGeoOverlap ; (; const char * ; name, . TGeoVolume * ; vol1, . TGeoVolume * ; vol2, . const TGeoMatrix * ; matrix1, . const TGeoMatrix * ; matrix2, . Bool_t ; isovlp = kTRUE, . Double_t ; ovlp = 0.01 . ). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoOverlap.html:16624,inherit,inherited,16624,doc/master/classTGeoOverlap.html,https://root.cern,https://root.cern/doc/master/classTGeoOverlap.html,2,['inherit'],['inherited']
Modifiability,"from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; TEveVector CalcBaseVec (Float_t alpha) const;  Returns point on the base of the cone with internal angle alpha: alpha = 0 -> max eta, alpha = pi/2 -> max phi, ... ;  ; TEveVector CalcBaseVec (Float_t eta, Float_t phi) const;  Returns point on the base of the cone with given eta and phi. ;  ; TEveVector CalcEtaPhiVec (Float_t eta, Float_t phi) const;  Fill TEveVector with eta and phi, magnitude 1. ;  ; Bool_t IsInTransitionRegion () const;  Returns true if the cone is in barrel / endcap transition region. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveJetCone.html:34089,inherit,inherited,34089,doc/master/classTEveJetCone.html,https://root.cern,https://root.cern/doc/master/classTEveJetCone.html,1,['inherit'],['inherited']
Modifiability,"from TGCompositeFrame.; Definition at line 233 of file TSessionViewer.h. ◆ IsSync(). Bool_t TSessionServerFrame::IsSync ; (; ); const. inline . Definition at line 207 of file TSessionViewer.h. ◆ OnBtnAddClicked(). void TSessionServerFrame::OnBtnAddClicked ; (; ). Add newly created session configuration in the list of sessions. ; Definition at line 684 of file TSessionViewer.cxx. ◆ OnBtnConnectClicked(). void TSessionServerFrame::OnBtnConnectClicked ; (; ). Connect to selected server. ; Definition at line 432 of file TSessionViewer.cxx. ◆ OnBtnDeleteClicked(). void TSessionServerFrame::OnBtnDeleteClicked ; (; ). Delete selected session configuration (remove it from the list). ; Definition at line 377 of file TSessionViewer.cxx. ◆ OnBtnNewServerClicked(). void TSessionServerFrame::OnBtnNewServerClicked ; (; ). Reset server configuration fields. ; Definition at line 661 of file TSessionViewer.cxx. ◆ OnConfigFileClicked(). void TSessionServerFrame::OnConfigFileClicked ; (; ). Browse configuration files. ; Definition at line 362 of file TSessionViewer.cxx. ◆ ProcessMessage(). Bool_t TSessionServerFrame::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Process messages for session server frame. ; Used to navigate between text entry fields. ; Reimplemented from TGCompositeFrame.; Definition at line 805 of file TSessionViewer.cxx. ◆ SetAddEnabled(). void TSessionServerFrame::SetAddEnabled ; (; Bool_t ; on = kTRUE). inline . Definition at line 209 of file TSessionViewer.h. ◆ SetAddress(). void TSessionServerFrame::SetAddress ; (; const char * ; str). inline . Definition at line 214 of file TSessionViewer.h. ◆ SetConfigText(). void TSessionServerFrame::SetConfigText ; (; const char * ; str). inline . Definition at line 217 of file TSessionViewer.h. ◆ SetConnectEnabled(). void TSessionServerFrame::SetConnectEnabled ; (; Bool_t ; on = kTRUE). inline . Definition at line 211 of file TSessionViewer.h. ◆ SetLogLevel(). void TSess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionServerFrame.html:35435,config,configuration,35435,doc/master/classTSessionServerFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionServerFrame.html,1,['config'],['configuration']
Modifiability,"from TGPicture; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * HashName (const char *name, Int_t width, Int_t height);  Static function returning a unique name used to look up a picture. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGSelectedPicture (const TGSelectedPicture &gp);  ; TGSelectedPicture & operator= (const TGSelectedPicture &gp);  ;  Protected Member Functions inherited from TGPicture;  TGPicture (const char *name, Bool_t scaled=kFALSE);  ;  TGPicture (const char *name, Pixmap_t pxmap, Pixmap_t mask=0);  ctor. Important: both pixmaps pxmap and mask must be unique (not shared) ;  ; void Draw (Option_t *="""") override;  Default Draw method for all objects. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static TGGC & GetSelectedGC ();  Return selection graphics context in use. ;  . Protected Attributes; const TGClient * fClient;  ;  Protected Attributes inherited from TGPicture; PictureAttributes_t fAttributes;  picture attributes ;  ; Pixmap_t fMask;  picture mask pixmap ;  ; TString fName;  name of picture ;  ; Pixmap_t fPic;  picture pixmap ;  ; Bool_t fScaled;  kTRUE if picture is scaled ;  ;  Protected Attributes inherited from T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSelectedPicture.html:10191,inherit,inherited,10191,doc/master/classTGSelectedPicture.html,https://root.cern,https://root.cern/doc/master/classTGSelectedPicture.html,1,['inherit'],['inherited']
Modifiability,"from TGeoNode; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TGeoAtt; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TGeoNodeMatrix (const TGeoNodeMatrix &gnm)=delete;  ; TGeoNodeMatrix & operator= (const TGeoNodeMatrix &gnm)=delete;  . Private Attributes; TGeoMatrix * fMatrix = nullptr;  . Additional Inherited Members;  Public Types inherited from TGeoNode; enum  { ;   kGeoNodeMatrix = (1ULL << ( 14 )); , kGeoNodeOffset = (1ULL << ( 15 )); , kGeoNodeVC = (1ULL << ( 16 )); , kGeoNodeOverlap = (1ULL << ( 17 )); , ;   kGeoNodeCloned = (1ULL << ( 18 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeMatrix.html:16483,inherit,inherited,16483,doc/master/classTGeoNodeMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html,1,['inherit'],['inherited']
Modifiability,"from TGeoNode; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TGeoAtt; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TGeoNodeOffset (const TGeoNodeOffset &)=delete;  ; TGeoNodeOffset & operator= (const TGeoNodeOffset &)=delete;  . Private Attributes; TGeoPatternFinder * fFinder = nullptr;  ; Int_t fIndex = 0;  ; Double_t fOffset = 0.;  . Additional Inherited Members;  Public Types inherited from TGeoNode; enum  { ;   kGeoNodeMatrix = (1ULL << ( 14 )); , kGeoNodeOffset = (1ULL << ( 15 )); , kGeoNodeVC = (1ULL << ( 16 )); , kGeoNodeOverlap = (1ULL << ( 17 )); , ;   kGeoNodeCloned = (1ULL << ( 18 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeOffset.html:16475,inherit,inherited,16475,doc/master/classTGeoNodeOffset.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html,1,['inherit'],['inherited']
Modifiability,"from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TKey; void Build (TDirectory *motherDir, const char *classname, Long64_t filepos);  Method used in all TKey constructor to initialize basic data fields. ;  ; virtual void Create (Int_t nbytes, TFile *f=nullptr);  Create a TKey object of specified size. ;  ; Int_t Read (const char *name) override;  Read cont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:13891,inherit,inherited,13891,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,1,['inherit'],['inherited']
Modifiability,"from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TString * fInsertQuery;  ; TSQLResult ** fResultPtr;  ; TSQLRow ** fRowPtr;  ;  Protected Attributes inherited from TBasket; TBranch * fBranch {nullptr};  Pointer to the basket support branch. ;  ; Int_t fBufferSize {0};  fBuffer length in bytes ;  ; TBuffer * fCompressedBufferRef {nullptr};  ! Compressed buffer. ;  ; Int_t * fDisplacement {nullptr};  ![fNevBuf] Displacement of entries in fBuffer(TKey) ;  ; Int_t * fEntryOffset {nullptr};  [fNevBuf] Offset of entries in fBuffer(TKey); generated at runtime. ;  ; bool fHeaderOnly {false};  True when only the basket header must be read/written. ;  ; UChar_t fIOBits {0};  !IO feature flags. Serialized in custom portion of streamer to avoid forward compat issues unless needed. ;  ; Int_t fLast {0};  Pointer to last used byte in basket. ;  ; Int_t fLastWriteBufferSize [3] = {0,0,0};  ! Size of the buffer last three buffers we wrote it to disk ;  ; Int_t fNevBuf {0};  Number of entries in basket. ;  ; Int_t fNevBufSize {0};  Length in Int_t of fEntryOffset OR fixed length of each entry if fEntryOffset is null! ;  ; UChar_t fN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasketSQL.html:16702,inherit,inherited,16702,doc/master/classTBasketSQL.html,https://root.cern,https://root.cern/doc/master/classTBasketSQL.html,1,['inherit'],['inherited']
Modifiability,from TLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t fAngle;  Arrow opening angle (degrees) ;  ; Float_t fArrowSize;  Arrow Size. ;  ; TString fOption;  Arrow shapes. ;  ;  Protected Attributes inherited from TLine; Double_t fX1 {0};  X of 1st point. ;  ; Double_t fX2 {0};  X of 2nd point. ;  ; Double_t fY1 {0};  Y of 1st point. ;  ; Double_t fY2 {0};  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Static Protected Attributes; st,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrow.html:17603,inherit,inherited,17603,doc/master/classTArrow.html,https://root.cern,https://root.cern/doc/master/classTArrow.html,3,['inherit'],['inherited']
Modifiability,"from TLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TGaxis (const TGaxis &);  Copy constructor. ;  ; void CleanupModLabs ();  Correctly cleanup fModLabs - delete content when owned by TGaxis. ;  ; TAxisModLab * FindModLab (Int_t indx, Int_t numlabels=0, Double_t v=0., Double_t eps=-1.) const;  Search for axis modifier by index or value. ;  ; Bool_t IsOwnedModLabs () const;  Returns kTRUE when fModLabs owned by TGaxis and should be cleaned up. ;  ; TGaxis & operator= (const TGaxis &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:55204,inherit,inherited,55204,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,3,['inherit'],['inherited']
Modifiability,"from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodCFMlpANN() [1/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = ""3000:N-1:N-2"" . ). standard constructor ; option string: ""n_training_cycles:n_hidden_layers""; default is: n_training_cycles = 5000, n_layers = 4. note that the number of hidden layers in the NN is: n_hidden_layers = n_layers - 2; since there is one input and one output layer. The number of nodes (neurons) is predefined to be:; n_nodes[i] = nvars + 1 - i (where i=1..n_layers); with nvars being the number of variables used in the NN. Hence, the default case is: n_neurons(layer 1 (input)) : nvars; n_neurons(layer 2 (hidden)): nvars-1; n_neurons(layer 3 (hidden)): nvars-1; n_neurons(layer 4 (out)) : 2; This artificial neural network usually needs a relatively large number of cycles to converge (8000 and more). Overtraining can be efficiently tested by comparing the signal and background output of the NN for the events that were used for training and an independent data sample (with equal properties). If the separation performance is significantly better for the training sample, the NN interprets statistical effects, and is hence overtrained. In this case, the number of cycles should be reduced, or the size of the training sample increased. ; Definition at line 130 of file MethodCFMlpANN.cxx. ◆ MethodCFMlpANN() [2/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; DataSetInfo & ; theData, . const TString & ; theWeightFile . ). constructor from weight file ; Definition at line 149 of file M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:35060,variab,variables,35060,doc/master/classTMVA_1_1MethodCFMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html,1,['variab'],['variables']
Modifiability,"from TNamed.; Definition at line 89 of file TToggle.h. ◆ IsInitialized(). virtual Bool_t TToggle::IsInitialized ; (; ). inlinevirtual . Definition at line 72 of file TToggle.h. ◆ SetOffValue(). virtual void TToggle::SetOffValue ; (; Long_t ; lof). inlinevirtual . Definition at line 80 of file TToggle.h. ◆ SetOnValue(). virtual void TToggle::SetOnValue ; (; Long_t ; lon). inlinevirtual . Definition at line 78 of file TToggle.h. ◆ SetState(). void TToggle::SetState ; (; Bool_t ; state). virtual . Sets the value of toggle to fOnValue or fOffValue according to passed argument. ; Definition at line 80 of file TToggle.cxx. ◆ SetToggledObject(). void TToggle::SetToggledObject ; (; TObject * ; obj, . TMethod * ; anymethod . ). virtual . Initializes it to toggle an object's datamember using this object's method. ; Definition at line 135 of file TToggle.cxx. ◆ SetToggledVariable(). void TToggle::SetToggledVariable ; (; Int_t & ; var). virtual . Initializes object for use with a variable - you pass it via reference so it will be modified by Toggle. ; Definition at line 59 of file TToggle.cxx. ◆ SetValue(). void TToggle::SetValue ; (; Long_t ; val). virtual . Sets the value of toggle and modifies its state according to whether the value is equal to fOnValue. ; Definition at line 98 of file TToggle.cxx. ◆ Streamer(). void TToggle::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TToggle::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file TToggle.h. ◆ Toggle(). void TToggle::Toggle ; (; ). virtual . Toggles the Values and State of this object and connected data! ; Definition at line 112 of file TToggle.cxx. Member Data Documentation. ◆ fGetter. TMethodCall* TToggle::fGetter. protected . Definition at line 58 of file TToggle.h. ◆ fInitialized. Bool_t TToggle::fInitialized. protected . Definition at line 56 of file TToggle.h. ◆ fObject. TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTToggle.html:15954,variab,variable,15954,doc/master/classTToggle.html,https://root.cern,https://root.cern/doc/master/classTToggle.html,1,['variab'],['variable']
Modifiability,from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Pro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphNode.html:15257,inherit,inherited,15257,doc/master/classTGraphNode.html,https://root.cern,https://root.cern/doc/master/classTGraphNode.html,3,['inherit'],['inherited']
Modifiability,"from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Double_tfAdaptiveSpeedhow fast temperature change in adaptive (in adaptive two variables describe; Double_tfEpsrelative required FCN accuracy at minimum; Double_tfInitialTemperatureinitial temperature (depends on FCN); TStringfKernelTemperatureSstring just to set fKernelTemperature; Int_tfMaxCallsmax number of FCN calls; Double_tfMinTemperatureminimum temperature before SA quit; Double_tfTemperatureAdaptiveStepused to calculate InitialTemperature if fUseDefaultTemperature; Double_tfTemperatureScalehow fast temperature change; Bool_tfUseDefaultScaleif TRUE, SA calculates its own TemperatureScale; Bool_tfUseDefaultTemperatureif TRUE, SA calculates its own InitialTemperature (MinTemperautre). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimulatedAnnealingFitter(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. void DeclareOptions(); declare SA options. void SetParameters(Int_t fMaxCalls, Double_t fInitialTemperature, Double_t fMinTemperature, Double_t fEps, TString fKernelTemperatureS, Double_t fTemperatureScale, Double_t fTemperatureAdaptiveStep, Bool_t fUseDefaultScale, Bool_t fUseDefaultTemperature); set SA configuration parameters. Double_t Run(vector<Double_t>& pars); Execute fitting. virtual ~SimulatedAnnealingFitter(); {}. » Author: Andreas Hoecker, Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk » Copyright (c) 2008: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__SimulatedAnnealingFitter.html:8682,config,configuration,8682,root/html534/TMVA__SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/root/html534/TMVA__SimulatedAnnealingFitter.html,1,['config'],['configuration']
Modifiability,"from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual TTime GetTime () const;  ; virtual ERecEventType GetType () const =0;  ; TClass * IsA () const override;  ; virtual void ReplayEvent (Bool_t showMouseCursor=kTRUE)=0;  ; virtual void SetTime (TTime t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecEvent.html:1745,inherit,inherited,1745,doc/master/classTRecEvent.html,https://root.cern,https://root.cern/doc/master/classTRecEvent.html,1,['inherit'],['inherited']
Modifiability,"from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Static Public Attributes; static Int_t fgMaxDimension = 4;  = 4 ;  ; static Int_t fgMaxParameters = 9;  = 9 ;  . Protected Member Functions; void ClearPrevious ();  Resets all the variables of the class. ;  ; TTreeDrawArgsParser::EOutputType DefineType ();  Put the type of the draw result into fOutputType and return it. ;  ; bool ParseName (TString name);  Syntax: ;  ; bool ParseOption ();  Check if options contain some data important for choosing the type of the drawn object. ;  ; bool ParseVarExp ();  Split variables and parse name and parameters in brackets. ;  ; bool SplitVariables (TString variables);  Parse expression [var1 [:var2 [:var3] ...]], number of variables cannot be greater than fgMaxDimension. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool fAdd;  Values should be added to an existing object. ;  ; Int_t fDimension;  Dimension of the histogram/plot. ;  ; bool fDrawProfile;  True if the options contain :""prof"". ;  ; bool fEntryList;  If fill a TEntryList. ;  ; TString fExp;  Complete variable expression. ;  ; TString fName;  Histogram's/plot's name. ;  ; Int_t fNoParameters;  If dimensions of the plot was specified. ;  ; TString fOption;  Draw options. ;  ; bool fOptionSame;  If option contained ""same"". ;  ; TObject * fOriginal;  Original plot (if it is to be reused) ;  ; EOutputType fOutputTyp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeDrawArgsParser.html:12028,variab,variables,12028,doc/master/classTTreeDrawArgsParser.html,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html,1,['variab'],['variables']
Modifiability,"from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TEveProjected; void SetDepthCommon (Float_t d, TEveElement *el, Float_t *bbox);  Utility function to update the z-values of the bounding-box. ;  . Protected Attributes; std::vector< Int_t > fBreakPoints;  ;  Protected Attributes inherited from TEveTrack; Double_t fBeta;  ; Int_t fCharge;  ; Double_t fDpDs;  ; Int_t fIndex;  ; Int_t fLabel;  ; Int_t fLastPMIdx;  ; Bool_t fLockPoints;  ; TEveVectorD fP;  ; vPathMark_t fPathMarks;  ; Int_t fPdg;  ; TEveVectorD fPEnd;  ; TEveTrackPropagator * fPropagator;  Last path-mark index tried in track-propagation. ;  ; Int_t fStatus;  ; TEveVectorD fV;  ;  Protected Attributes inherited from TEveLine; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ; Bool_t fSmooth;  ;  Protected Attributes inherited from TEvePointSet; TArrayI * fIntIds;  ; Int_t fIntIdsPerPoint;  ; TString fTitle;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TPoin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackProjected.html:48444,inherit,inherited,48444,doc/master/classTEveTrackProjected.html,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html,3,['inherit'],['inherited']
Modifiability,"from a TMatrixDBase. ;  ;  ~TH2D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2D & operator= (const TH2D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2D. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, Double_t w);  Increment cell defined by x,y by a weight w. ;  ; void FillN (Int_t ntimes, const Double_t *x, const Double_t *y, const Double_t *w, Int_t stride=1) override;  Fill a 2-D histogram with an array of values and weights. ;  ; void FillN (Int_t, const Double_t *, const Double_t *, Int_t) override;  Fill this his",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2D.html:2551,inherit,inherited,2551,doc/master/classTH2D.html,https://root.cern,https://root.cern/doc/master/classTH2D.html,1,['inherit'],['inherited']
Modifiability,"from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaletteAxis.html:20278,inherit,inherited,20278,doc/master/classTPaletteAxis.html,https://root.cern,https://root.cern/doc/master/classTPaletteAxis.html,1,['inherit'],['inherited']
Modifiability,"from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TGWidget; TString fCommand;  command to be executed ;  ; const TGWindow * fMsgWindow;  window which handles widget events ;  ; Int_t fWidgetFlags;  widget status flags (OR of EWidgetStatus) ;  ; Int_t fWidgetId;  the widget id (used for event processing) ;  . Static Protected Attributes; static const TGFont * fgDefaultFont = nullptr;  ; static const TGGC * fgDefaultGC = nullptr;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fgDbw = 0;  ; static Int_t fgDbx = 0;  ; static Int_t fgDby = 0;  ; static Pixel_t fgDefaultFrameBackground = 0;  ; static Pixel_t fgDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TGTab (const TGTab &)=delete;  ; TGTab & operator= (const TGTab &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTab.html:31542,inherit,inherited,31542,doc/master/classTGTab.html,https://root.cern,https://root.cern/doc/master/classTGTab.html,4,['inherit'],['inherited']
Modifiability,"from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxy_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsHiddenReal.html:32944,config,configuration,32944,root/html532/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html532/RooAbsHiddenReal.html,1,['config'],['configuration']
Modifiability,"fset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPolynomial.h>. Inheritance diagram for RooPolynomial:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooPolynomial() [1/4]. RooPolynomial::RooPolynomial ; (; ). inline . Definition at line 27 of file RooPolynomial.h. ◆ RooPolynomial() [2/4]. RooPolynomial::RooPolynomial ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x . ). Definition at line 83 of file RooPolynomial.cxx. ◆ RooPolynomial() [3/4]. RooPolynomial::RooPolynomial ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . Int_t ; lowestOrder = 1 . ). Create a polynomial in the variable x. ; Parameters. [in]nameName of the PDF ; [in]titleTitle for plotting the PDF ; [in]xThe variable of the polynomial ; [in]coefListThe coefficients \( a_i \) ; [in]lowestOrder[optional] Truncate the sum such that it skips the lower orders: ; \[; 1. + \sum_{i=0}^{\mathrm{coefList.size()}} a_{i} * x^{(i + \mathrm{lowestOrder})}; \]. This means that RooPolynomial pol(""pol"", ""pol"", x, RooArgList(a, b), lowestOrder = 2); b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooPolynomialRooPolynomial implements a polynomial p.d.f of the form.Definition RooPolynomial.h:25; RooPolynomial::xRooAbsReal const & x() constGet the x variable.Definition RooPolynomial.h:39; RooPolynomial::lowestOrderint lowestOrder() constReturn the order for the first coefficient in the list.Definition RooPolynomial.h:45; computes ; \[; \mathrm{pol}(x) = 1 * x^0 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:74724,variab,variable,74724,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['variab'],['variable']
Modifiability,"fset;  X axis exponent label Y offset. ;  ; TAttAxis fYaxis;  Y axis attributes. ;  ; Float_t fYAxisExpXOffset;  Y axis exponent label X offset. ;  ; Float_t fYAxisExpYOffset;  Y axis exponent label Y offset. ;  ; TAttAxis fZaxis;  Z axis attributes. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . #include <TStyle.h>. Inheritance diagram for TStyle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EPaperSize. enum TStyle::EPaperSize. EnumeratorkA4 ; kUSLetter . Definition at line 153 of file TStyle.h. Constructor & Destructor Documentation. ◆ TStyle() [1/3]. TStyle::TStyle ; (; ). Default constructor. ; Definition at line 145 of file TStyle.cxx. ◆ TStyle() [2/3]. TStyle::TStyle ; (; const char * ; name, . const char * ; title . ). Create a new TStyle. ; The following names are reserved to create special styles:. Classic: Similar to Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:43318,inherit,inherited,43318,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['inherit'],['inherited']
Modifiability,"fset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:10969,variab,variables,10969,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,10,['variab'],['variables']
Modifiability,"fsetLen (Int_t len, bool updateSubBranches=false);  Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and the new value is not zero) If updateExisting is true, also update all the existing branches. ;  ; virtual void SetFile (const char *filename);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFile (TFile *file=nullptr);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFirstEntry (Long64_t entry);  set the first entry number (case of TBranchSTL) ;  ; void SetIOFeatures (TIOFeatures &features);  ; virtual void SetStatus (bool status=true);  Set branch status to Process or DoNotProcess. ;  ; virtual void SetTree (TTree *tree);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool SupportsBulkRead () const;  Returns true if this branch supports bulk IO, false otherwise. ;  ; virtual void UpdateAddress ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:14822,inherit,inherited,14822,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['inherit'],['inherited']
Modifiability,"fsetvirtual UShort_t GetPidOffset() const =0; TBuffer::IsReadingBool_t IsReading() constDefinition TBuffer.h:86; TBuffer::WriteVersionvirtual UInt_t WriteVersion(const TClass *cl, Bool_t useBcnt=kFALSE)=0; TBuffer::SkipVersionvirtual void SkipVersion(const TClass *cl=nullptr)=0; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::Drawvoid Draw(Option_t *option="""") overrideDraw detailed class inheritance structure.Definition TClass.cxx:2554; TClass::DynamicCastvoid * DynamicCast(const TClass *base, void *obj, Bool_t up=kTRUE)Cast obj of this class type up to baseclass cl if up is true.Definition TClass.cxx:4982; TClass::AutoBrowsestatic Int_t AutoBrowse(TObject *obj, TBrowser *browser)Browse external object inherited from TObject.Definition TClass.cxx:2033; TClass::Dumpvoid Dump() const overrideDump contents of object on stdout.Definition TClass.h:398; TClass::InheritsFromBool_t InheritsFrom(const char *cl) const overrideReturn kTRUE if this class inherits from a class with name ""classname"".Definition TClass.cxx:4941; TGuiFactory::CreateInspectorImpvirtual TInspectorImp * CreateInspectorImp(const TObject *obj, UInt_t width, UInt_t height)Create a batch version of TInspectorImp.Definition TGuiFactory.cxx:182; TListIterIterator of linked list.Definition TList.h:193; TListIter::GetOptionOption_t * GetOption() const overrideReturns the object option stored in the list.Definition TList.cxx:1140; TListIter::SetOptionvoid SetOption(Option_t *option)Sets the object option stored in the list.Definition TList.cxx:1149; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectTable::AddObjstatic void AddObj(TObject *o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:47454,inherit,inherits,47454,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['inherit'],['inherits']
Modifiability,"fsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidTHttpEngine::Process(); voidTHttpEngine::SetServer(THttpServer* serv). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfDebugMode! debug mode, may required for fastcgi debugging in other servers; TStringTNamed::fNameobject identifier; THttpServer*THttpEngine::fServer! object server; Int_tfSocket! socket used by fastcgi; TThread*fThrd! thread which takes requests, can be many later; TStringTNamed::fTitleobject title; TStringfTopName! name of top item. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFastCgi(); normal constructor. ~TFastCgi(); destructor. Bool_t Create(const char* args); initializes fastcgi variables and start thread,; which will process incoming http requests. void * run_func(void* ). TFastCgi(). Int_t GetSocket() const. » Last changed: Tue Sep 8 17:43:50 2015 » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFastCgi.html:7366,variab,variables,7366,root/html604/TFastCgi.html,https://root.cern,https://root.cern/root/html604/TFastCgi.html,1,['variab'],['variables']
Modifiability,"ft ;  ; Int_t fMRight;  margin right ;  ; Int_t fMTop;  margin top ;  ; GContext_t fNormGC;  graphics context used for drawing label ;  ; TGString * fText;  label text ;  ; Bool_t fTextChanged;  has text changed ;  ; Int_t fTFlags;  text flags (see TGFont.h ETextLayoutFlags) ;  ; UInt_t fTHeight;  text height ;  ; TGTextLayout * fTLayout;  text layout ;  ; Int_t fTMode;  text alignment ;  ; UInt_t fTWidth;  text width ;  ; Int_t fWrapLength;  wrap length ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static const TGFont * fgDefaultFont = nullptr;  ; static const TGGC * fgDefaultGC = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLabel.html:26027,inherit,inherited,26027,doc/master/classTGLabel.html,https://root.cern,https://root.cern/doc/master/classTGLabel.html,1,['inherit'],['inherited']
Modifiability,"ft to the user to correctly cast the TObject pointer to the right class. Casting to the wrong class will give wrong results and may well crash the program! Therefore, the user has to be very careful. Often a container only contains one class of objects, but if it really contains a mixture, it is possible to ask each object about its class using the InheritsFrom method.; For example if myObject is a TObject pointer:; if (myObject->InheritsFrom(""TParticle"") {; printf(""myObject is a TParticlen"");; }; As the name suggests, this test works even if the object is a subclass of TParticle. The member function IsA() can be used instead of InheritsFrom to make the test exact. The InheritsFrom and IsA methods use the extensive Run Time Type Information (RTTI) available via the ROOT meta-classes.; 16.1.3 Types of Collections; The ROOT system implements the following basic types of collections: unordered collections, ordered collections and sorted collections. Next figure shows the inheritance hierarchy for the primary collection classes. All primary collection classes derive from the abstract base class TCollection. The inheritance hierarchy of the primary collection classes. 16.1.4 Ordered Collections (Sequences); Sequences are collections that are externally ordered because they maintain internal elements according to the order in which they were added. The following sequences are available:. TList; THashList; TOrdCollection; TObjArray; TClonesArray. The TOrdCollection, TObjArray as well as the TClonesArray can be sorted using their Sort() member function (for this, the stored objects must provide a comparison function by overriding TObject::Compare() and also must enable sorting by overriding TObject::IsSortable() to return true). Ordered collections all derive from the abstract base class TSeqCollection. Sorted collections are ordered by an internal (automatic) sorting mechanism. The following sorted collections are available (the stored items must be sortable):. TSortedList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:842577,inherit,inheritance,842577,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['inherit'],['inheritance']
Modifiability,"ft(-\frac{m - m_0}{C}\right) \right); \cdot \left(\frac{m}{m_0}\right)^A + B; \cdot \left(\frac{m}{m_0} - 1 \right); \]. Definition at line 26 of file RooDstD0BG.h. Public Member Functions;  RooDstD0BG ();  ;  RooDstD0BG (const char *name, const char *title, RooAbsReal &_dm, RooAbsReal &_dm0, RooAbsReal &_c, RooAbsReal &_a, RooAbsReal &_b);  ;  RooDstD0BG (const RooDstD0BG &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  if (matchArgs(allVars,analVars,dm)) return 1 ; ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extend",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDstD0BG.html:1521,inherit,inherited,1521,doc/master/classRooDstD0BG.html,https://root.cern,https://root.cern/doc/master/classRooDstD0BG.html,1,['inherit'],['inherited']
Modifiability,"fterwards with TParallelCoord::AddVariable(Double_t*,const char*). ; Definition at line 141 of file TParallelCoord.cxx. ◆ TParallelCoord() [3/3]. TParallelCoord::TParallelCoord ; (; TTree * ; tree, . Long64_t ; nentries . ). Normal constructor, the datas must be added afterwards with TParallelCoord::AddVariable(Double_t*,const char*). ; Definition at line 156 of file TParallelCoord.cxx. ◆ ~TParallelCoord(). TParallelCoord::~TParallelCoord ; (; ). override . Destructor. ; Definition at line 181 of file TParallelCoord.cxx. Member Function Documentation. ◆ AddSelection(). void TParallelCoord::AddSelection ; (; const char * ; title). Add a selection. ; Definition at line 242 of file TParallelCoord.cxx. ◆ AddVariable() [1/2]. void TParallelCoord::AddVariable ; (; const char * ; varexp). Add a variable from an expression. ; Definition at line 209 of file TParallelCoord.cxx. ◆ AddVariable() [2/2]. void TParallelCoord::AddVariable ; (; Double_t * ; val, . const char * ; title = """" . ). Add a variable. ; Definition at line 199 of file TParallelCoord.cxx. ◆ ApplySelectionToTree(). void TParallelCoord::ApplySelectionToTree ; (; ). Apply the current selection to the tree. ; Definition at line 252 of file TParallelCoord.cxx. ◆ BuildParallelCoord(). void TParallelCoord::BuildParallelCoord ; (; TSelectorDraw * ; selector, . bool ; candle . ). static . Call constructor and add the variables. ; Definition at line 288 of file TParallelCoord.cxx. ◆ Class(). static TClass * TParallelCoord::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TParallelCoord::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TParallelCoord::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 136 of file TParallelCoord.h. ◆ CleanUpSelections(). void TParallelCoord::CleanUpSelections ; (; TParallelCoordRange * ; range). Clean up the selections from the ranges which cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:24740,variab,variable,24740,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['variab'],['variable']
Modifiability,"full range of all variables. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forward determination of analytical integration capabilities to input p.d.f. ;  ; TClass * IsA () const override;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendPdf.html:3274,inherit,inherited,3274,doc/master/classRooExtendPdf.html,https://root.cern,https://root.cern/doc/master/classRooExtendPdf.html,1,['inherit'],['inherited']
Modifiability,"function (model function) from a parametric gradient function interface. ;  ; void SetFunction (const IModel1DFunction &func, bool useGradient=false);  Set the fitted function (model function) from a vectorized parametric function interface. ;  ; void SetFunction (const IModelFunction &func, bool useGradient=false);  Set the fitted function (model function) from a parametric function interface. ;  ; void SetNumberOfFitPoints (unsigned int npoints);  Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ;  . Protected Member Functions; bool DoBinnedLikelihoodFit (bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  binned likelihood fit ;  ; bool DoInitMinimizer ();  ; bool DoLeastSquareFit (const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  least square fit ;  ; bool DoLinearFit ();  linear least square fit ;  ; bool DoMinimization (const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  ; template<class ObjFunc_t > ; bool DoMinimization (std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  do minimization ;  ; bool DoSetFCN (bool useExtFCN, const ROOT::Math::IMultiGenFunction &fcn, const double *params, unsigned int dataSize, int fitType);  Set Objective function. ;  ; bool DoUnbinnedLikelihoodFit (bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  un-binned likelihood fit ;  ; void DoUpdateFitConfig ();  ; bool DoUpdateMinimizerOptions (bool canDifferentMinim=true);  ; template<class ObjFunc_t > ; bool DoWeightMinimization (std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  ; void ExamineFCN ();  look at the user provided FCN and get data and model function is they derive from ROOT::Fit FCN classes ;  ; template<class ObjFuncType > ; bool GetDataFromFCN ();  intern",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:11109,extend,extended,11109,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['extend'],['extended']
Modifiability,"function can be overloaded in derived classes; -; *-* If you overload this member function, you also HAVE TO; *-* never call the constructor:; -; *-* TFormula::TFormula(const char *name,const char *expression); -; *-* and write your own constructor; -; *-* MyClass::MyClass(const char *name,const char *expression) : TFormula(); -; *-* which has to call the TFormula default constructor and whose implementation; *-* should be similar to the implementation of the normal TFormula constructor; -; *-* This is necessary because the normal TFormula constructor call indirectly; *-* the virtual member functions Analyze, DefaultString, DefaultValue; *-* and DefaultVariable.; -; *-* The expected returns values are; *-* -2 : the name has been recognized but won't be usable; *-* -1 : the name has not been recognized; *-* >=0 : the name has been recognized, return the action parameter.; -; -. Double_t Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; Evaluate this formula*-*-*-*-*-*-; *-* =====================; -; *-* The current value of variables x,y,z,t is passed through x, y, z and t.; *-* The parameters used will be the ones in the array params if params is given; *-* otherwise parameters will be taken from the stored data members fParams; -; -. Double_t EvalParOld(const Double_t* x, const Double_t* params = 0); Evaluate this formula*-*-*-*-*-*-; *-* =====================; -; *-* The current value of variables x,y,z,t is passed through the pointer x.; *-* The parameters used will be the ones in the array params if params is given; *-* otherwise parameters will be taken from the stored data members fParams. /*. */. -; -; -. TString GetExpFormula(Option_t* option = """") const; Reconstruct the formula expression from*-*-; *-* the internal TFormula member variables; *-* =======================================; -; *-* This function uses the internal member variables of TFormula to; *-* construct the mathematical expression associated with the TFormula; *-* inst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFormula.html:25948,variab,variables,25948,root/html528/TFormula.html,https://root.cern,https://root.cern/root/html528/TFormula.html,3,['variab'],['variables']
Modifiability,"function loads all tree headers, because the entry numbers in the TEventList are global and have to be recomputed, taking into account the number of entries in each tree.; The new TEntryList is owned by the TChain and gets deleted when the chain is deleted. This TEntryList is returned by GetEntryList() function, and after GetEntryList() function is called, the TEntryList is not owned by the chain any more and will not be deleted with it. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2868 of file TChain.cxx. ◆ SetMakeClass(). void TChain::SetMakeClass ; (; Int_t ; make). inlineoverridevirtual . Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode). ; For MakeClass mode 0, the TTree expects the address where the data is stored to be set by either the user or the TTree to the address of a full object through the top level branch. For MakeClass mode 1, this address is expected to point to a numerical type or C-style array (variable or not) of numerical type, representing the primitive data members. The function's primary purpose is to allow the user to access the data directly with numerical type variable rather than having to have the original set of classes (or a reproduction thereof). ; Reimplemented from TTree.; Definition at line 166 of file TChain.h. ◆ SetName(). void TChain::SetName ; (; const char * ; name). overridevirtual . Change the name of this TChain. ; Reimplemented from TNamed.; Reimplemented in TProofChain.; Definition at line 2943 of file TChain.cxx. ◆ SetPacketSize(). void TChain::SetPacketSize ; (; Int_t ; size = 100). virtual . Set number of entries per packet for parallel root. ; Definition at line 2965 of file TChain.cxx. ◆ SetProof(). void TChain::SetProof ; (; bool ; on = true, . bool ; refresh = false, . bool ; gettreeheader = false . ). virtual . Enable/Disable PROOF processing on the current default Proof (gProof). ; ""Draw"" and ""Processed"" commands will be handled by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:101015,variab,variable,101015,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['variab'],['variable']
Modifiability,"function loads all tree headers, because the entry numbers in the TEventList are global and have to be recomputed, taking into account the number of entries in each tree.; The new TEntryList is owned by the TChain and gets deleted when the chain is deleted. This TEntryList is returned by GetEntryList() function, and after GetEntryList() function is called, the TEntryList is not owned by the chain any more and will not be deleted with it. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2894 of file TChain.cxx. ◆ SetMakeClass(). void TChain::SetMakeClass ; (; Int_t ; make). inlineoverridevirtual . Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode). ; For MakeClass mode 0, the TTree expects the address where the data is stored to be set by either the user or the TTree to the address of a full object through the top level branch. For MakeClass mode 1, this address is expected to point to a numerical type or C-style array (variable or not) of numerical type, representing the primitive data members. The function's primary purpose is to allow the user to access the data directly with numerical type variable rather than having to have the original set of classes (or a reproduction thereof). ; Reimplemented from TTree.; Definition at line 166 of file TChain.h. ◆ SetName(). void TChain::SetName ; (; const char * ; name). overridevirtual . Change the name of this TChain. ; Reimplemented from TNamed.; Reimplemented in TProofChain.; Definition at line 2969 of file TChain.cxx. ◆ SetPacketSize(). void TChain::SetPacketSize ; (; Int_t ; size = 100). virtual . Set number of entries per packet for parallel root. ; Definition at line 2991 of file TChain.cxx. ◆ SetProof(). void TChain::SetProof ; (; bool ; on = true, . bool ; refresh = false, . bool ; gettreeheader = false . ). virtual . Enable/Disable PROOF processing on the current default Proof (gProof). ; ""Draw"" and ""Processed"" commands will be handled by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:101636,variab,variable,101636,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['variab'],['variable']
Modifiability,"function to call when input is needed. void RecursiveRemove(TObject* obj); Delete object from CINT symbol table so it can not be used anymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj from CINT symbol table so it cannot be accessed anymore.; Returns 1 in case of success and 0 in case object was not in table. void SaveContext(); Save the current CINT state. void SaveGlobalsContext(); Save the current CINT state of global objects. void UpdateListOfGlobals(); Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:22657,variab,variables,22657,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,2,['variab'],['variables']
Modifiability,"function value; RooRealVar*RooAbsNumGenerator::_funcValPtrRRVs storing function value in context and in output dataset; RooRealVar*RooAbsNumGenerator::_funcValStore; Bool_tRooAbsNumGenerator::_isValidVerbose and valid flag; static Int_tRooPrintable::_nameLength; Double_t*_rangeRange of observables to be generated ;; RooArgSetRooAbsNumGenerator::_realVarsSets of discrete and real valued observabeles; TIterator*_rvIterIteratator over _realVars ;; TFoam*_tfoamInstance of TFOAM generator; Double_t*_vecTransfer array for FOAM output; Bool_tRooAbsNumGenerator::_verbose; Double_t*_xminLower bound of observables to be generated ;; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerSampler(RooNumGenFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). ~RooFoamGenerator(); Destructor. const RooArgSet * generateEvent(UInt_t remaining, Double_t& resampleRatio); are we actually generating anything? (the cache always contains at least our function value). RooFoamGenerator(); {}. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). RooAbsNumGenerator* clone(const RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& , const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0) const. TFoam& engine(); { return *_tfoam; }. Bool_t canSampleConditional() const; { return kFALSE ; }. Bool_t canSampleCategories() const; { return kFALSE ; }. » Last changed: Mon Dec 7 13:47:39 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFoamGenerator.html:9218,config,config,9218,root/html526/RooFoamGenerator.html,https://root.cern,https://root.cern/root/html526/RooFoamGenerator.html,1,['config'],['config']
Modifiability,"function value; RooRealVar*RooAbsNumGenerator::_funcValPtrRRVs storing function value in context and in output dataset; RooRealVar*RooAbsNumGenerator::_funcValStore; Bool_tRooAbsNumGenerator::_isValidVerbose and valid flag; static Int_tRooPrintable::_nameLength; Double_t*_rangeRange of observables to be generated ;; RooArgSetRooAbsNumGenerator::_realVarsSets of discrete and real valued observabeles; TIterator*_rvIterIteratator over _realVars ;; TFoam*_tfoamInstance of TFOAM generator; Double_t*_vecTransfer array for FOAM output; Bool_tRooAbsNumGenerator::_verbose; Double_t*_xminLower bound of observables to be generated ;; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerSampler(RooNumGenFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). ~RooFoamGenerator(); Destructor. const RooArgSet * generateEvent(UInt_t remaining, Double_t& resampleRatio); are we actually generating anything? (the cache always contains at least our function value). RooFoamGenerator(); {}. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). RooAbsNumGenerator* clone(const RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& , const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0) const. TFoam& engine(); { return *_tfoam; }. Bool_t canSampleConditional() const; { return kFALSE ; }. Bool_t canSampleCategories() const; { return kFALSE ; }. » Last changed: Mon Jul 4 15:22:50 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFoamGenerator.html:9273,config,config,9273,root/html530/RooFoamGenerator.html,https://root.cern,https://root.cern/root/html530/RooFoamGenerator.html,1,['config'],['config']
Modifiability,"function value; RooRealVar*RooAbsNumGenerator::_funcValPtrRRVs storing function value in context and in output dataset; RooRealVar*RooAbsNumGenerator::_funcValStore; Bool_tRooAbsNumGenerator::_isValidVerbose and valid flag; static Int_tRooPrintable::_nameLength; Double_t*_rangeRange of observables to be generated ;; RooArgSetRooAbsNumGenerator::_realVarsSets of discrete and real valued observabeles; TIterator*_rvIterIteratator over _realVars ;; TFoam*_tfoamInstance of TFOAM generator; Double_t*_vecTransfer array for FOAM output; Bool_tRooAbsNumGenerator::_verbose; Double_t*_xminLower bound of observables to be generated ;; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerSampler(RooNumGenFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). ~RooFoamGenerator(); Destructor. const RooArgSet * generateEvent(UInt_t remaining, Double_t& resampleRatio); are we actually generating anything? (the cache always contains at least our function value). RooFoamGenerator(); {}. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). RooAbsNumGenerator* clone(const RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& , const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0) const. TFoam& engine(); { return *_tfoam; }. Bool_t canSampleConditional() const; { return kFALSE ; }. Bool_t canSampleCategories() const; { return kFALSE ; }. » Last changed: Thu Nov 3 20:08:08 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFoamGenerator.html:9273,config,config,9273,root/html532/RooFoamGenerator.html,https://root.cern,https://root.cern/root/html532/RooFoamGenerator.html,1,['config'],['config']
Modifiability,"function value; RooRealVar*RooAbsNumGenerator::_funcValPtrRRVs storing function value in context and in output dataset; RooRealVar*RooAbsNumGenerator::_funcValStore; Bool_tRooAbsNumGenerator::_isValidVerbose and valid flag; static Int_tRooPrintable::_nameLength; Double_t*_rangeRange of observables to be generated ;; RooArgSetRooAbsNumGenerator::_realVarsSets of discrete and real valued observabeles; TIterator*_rvIterIteratator over _realVars ;; TFoam*_tfoamInstance of TFOAM generator; Double_t*_vecTransfer array for FOAM output; Bool_tRooAbsNumGenerator::_verbose; Double_t*_xminLower bound of observables to be generated ;; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerSampler(RooNumGenFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). ~RooFoamGenerator(); Destructor. const RooArgSet * generateEvent(UInt_t remaining, Double_t& resampleRatio); are we actually generating anything? (the cache always contains at least our function value). RooFoamGenerator(); {}. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). RooAbsNumGenerator* clone(const RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& , const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0) const. TFoam& engine(); { return *_tfoam; }. Bool_t canSampleConditional() const; { return kFALSE ; }. Bool_t canSampleCategories() const; { return kFALSE ; }. » Last changed: Thu Sep 23 19:59:39 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFoamGenerator.html:9204,config,config,9204,root/html528/RooFoamGenerator.html,https://root.cern,https://root.cern/root/html528/RooFoamGenerator.html,1,['config'],['config']
Modifiability,"function value; RooRealVar*RooAbsNumGenerator::_funcValPtrRRVs storing function value in context and in output dataset; RooRealVar*RooAbsNumGenerator::_funcValStore; Bool_tRooAbsNumGenerator::_isValidVerbose and valid flag; static Int_tRooPrintable::_nameLength; Double_t*_rangeRange of observables to be generated ;; RooArgSetRooAbsNumGenerator::_realVarsSets of discrete and real valued observabeles; TIterator*_rvIterIteratator over _realVars ;; TFoam*_tfoamInstance of TFOAM generator; Double_t*_vecTransfer array for FOAM output; Bool_tRooAbsNumGenerator::_verbose; Double_t*_xminLower bound of observables to be generated ;; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerSampler(RooNumGenFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). ~RooFoamGenerator(); Destructor. const RooArgSet * generateEvent(UInt_t remaining, Double_t& resampleRatio); are we actually generating anything? (the cache always contains at least our function value). RooFoamGenerator(); {}. RooFoamGenerator(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). RooAbsNumGenerator* clone(const RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& , const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0) const. TFoam& engine(); { return *_tfoam; }. Bool_t canSampleConditional() const; { return kFALSE ; }. Bool_t canSampleCategories() const; { return kFALSE ; }. » Last changed: Tue Mar 10 17:16:48 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFoamGenerator.html:9292,config,config,9292,root/html534/RooFoamGenerator.html,https://root.cern,https://root.cern/root/html534/RooFoamGenerator.html,1,['config'],['config']
Modifiability,"function which is called — for historical reasons — the \(\mbox{FCN}\) function (see [howto:fcn]). This function is usually a chisquared or a log–likelihood, but it could also be a mathematical function. The \(\mbox{FCN}\) function needs to be written in for which M defines the pure abstract base class FCNBase as interface. The user must define and implement the \(\mbox{FCN}\) function in a derived class from FCNBase. Sometimes this is done by an intermediate program such as HippoDraw@bib-HippoDraw, in which case M is being used under the control of such an intermediate program1. The value of the \(\mbox{FCN}\) function will in general depend on one or more variable parameters whose meaning is defined by the user (or by the intermediate program), but whose trial values are determined by M .; To take a simple example, suppose the problem is to fit a polynomial through a set of data points. Then the user would write a \(\mbox{FCN}\) which calculates the \(\chi^2\) between a polynomial and the data; the variable parameters of \(\mbox{FCN}\) would be the coefficients of the polynomials. Using objects for minimization from M , the user would request M to minimize the \(\mbox{FCN}\) with respect to the parameters, that is, find those values of the coefficients which give the lowest value of chisquare.; The user must therefore supply, in addition to the function to be analyzed, via a set or sequence of M applications the instructions which analysis is wanted. The instructions are coded in in the calling program (main.cpp), which allows looping, conditional execution, and all the other possibilities of , but not interactivity, since it must be compiled before execution.; 2.2 Design aspects of M in; What M is:. platform independent; written in an object-oriented way using standard; independent of any external package. The maintainability should be guaranteed with the choice of a modern computer language. Choosing object-oriented technology M should profit from an increased f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:8326,variab,variable,8326,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['variab'],['variable']
Modifiability,"functions compute the bin number corresponding to the given; x, y or z argument and increment this bin by the given weight.; The Fill functions return the bin number for 1-D histograms or global; bin number for 2-D and 3-D histograms.; If TH1::Sumw2 has been called before filling, the sum of squares of; weights is also stored.; One can also increment directly a bin number via TH1::AddBinContent; or replace the existing content via TH1::SetBinContent.; To access the bin content of a given bin, do:. Double_t binContent = h->GetBinContent(bin);. By default, the bin number is computed using the current axis ranges.; If the automatic binning option has been set via. h->SetBit(TH1::kCanRebin);. then, the Fill Function will automatically extend the axis range to; accomodate the new value specified in the Fill argument. The method; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents.; Rebinning; At any time, an histogram can be rebinned via TH1::Rebin. This function; returns a new histogram with the rebinned contents.; If bin errors were stored, they are recomputed during the rebinning.; Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sq",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:9014,variab,variables,9014,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,4,['variab'],['variables']
Modifiability,"functions compute the bin number corresponding to the given; x, y or z argument and increment this bin by the given weight.; The Fill functions return the bin number for 1-D histograms or global; bin number for 2-D and 3-D histograms.; If TH1::Sumw2 has been called before filling, the sum of squares of; weights is also stored.; One can also increment directly a bin number via TH1::AddBinContent; or replace the existing content via TH1::SetBinContent.; To access the bin content of a given bin, do:. Double_t binContent = h->GetBinContent(bin);. By default, the bin number is computed using the current axis ranges.; If the automatic binning option has been set via. h->SetCanExtend(kAllAxes);. then, the Fill Function will automatically extend the axis range to; accomodate the new value specified in the Fill argument. The method; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents.; Rebinning; At any time, an histogram can be rebinned via TH1::Rebin. This function; returns a new histogram with the rebinned contents.; If bin errors were stored, they are recomputed during the rebinning.; Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sq",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:9013,variab,variables,9013,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['variab'],['variables']
Modifiability,"functions. The following types of functions can be created:. A - Expression using variable x and no parameters; B - Expression using variable x with parameters; C - A general C function with parameters; D - A general C++ function object (functor) with parameters; E - A member function with parameters of a general C++ class. A - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators. TF1 *fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();. Case 2: inline expression using TMath functions without parameters. TF1 *fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();. Case 3: inline expression using a CINT function by name. Double_t myFunc(x) {; return x+sin(x);; }; TF1 *fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();. B - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators. Example a:; >; TF1 *fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);. This creates a function of variable x with 2 parameters.; The parameters must be initialized via:. fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);. Parameters may be given a name:. fa->SetParName(0,""Constant"");. Example b:; >; TF1 *fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); and (0) means start numbering parameters at 0.; expo(3) is a substitute for exp([3]+[4]*x). Case 2: inline expression using TMath functions with parameters; >; TF1 *fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();. C - A general C function with parameters; Consider the macro myfunc.C below:. // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; TF1 *f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2,1);; f1->SetParNames(""constant"",""coefficient"");; f1->Draw();; }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:1611,variab,variable,1611,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,7,['variab'],['variable']
Modifiability,"fwd file; 40 template<class FunctionType> class BasicFitMethodFunction;; 41 ; 42 // define the normal and gradient function; 43 typedef BasicFitMethodFunction<ROOT::Math::IMultiGenFunction> FitMethodFunction;; 44 typedef BasicFitMethodFunction<ROOT::Math::IMultiGradFunction> FitMethodGradFunction;; 45 ; 46 }; 47 ; 48 /**; 49 Namespace for the fitting classes; 50 @ingroup Fit; 51 */; 52 ; 53 namespace Fit {; 54 ; 55/**; 56 @defgroup FitMain User Fitting classes; 57 ; 58 Main Classes used for fitting a given data set; 59 @ingroup Fit; 60*/; 61 ; 62 ; 63//___________________________________________________________________________________; 64/**; 65 Fitter class, entry point for performing all type of fits.; 66 Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; 67 The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); 68 The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; 69 The configuration of the fit (parameters, options, etc...) are specified in the; 70 ROOT::Math::FitConfig class.; 71 After fitting the config of the fit will be modified to have the new values the resulting; 72 parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with; 73 initial parameters by calling FitConfig.SetUpdateAfterFit(false);; 74 ; 75 @ingroup FitMain; 76*/; 77class Fitter {; 78 ; 79public:; 80 ; 81 typedef ROOT::Math::IParamMultiFunction IModelFunction;; 82 template <class T>; 83 using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl<T>;; 84#ifdef R__HAS_VECCORE; 85 typedef ROOT::Math::IParametricFunctionMultiDimTempl<ROOT::Double_v> IModelFunction_v;; 86 typedef ROOT::Math::IParamMultiGradFunctionTempl<ROOT::Double_v> IGradModelFunction_v;; 87#else; 88 typedef ROOT::Math::IParamMultiFunction IModelFunction_v;; 89 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;; 90#endif; 91 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:2129,config,configuration,2129,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['config'],['configuration']
Modifiability,"fy option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ""C"" show References from code; ""H"" show Has a relations; ""M"" show Multiple Inheritance; ""R"" show References from data members. void ShowMul(); Draw the Multiple inheritance relationships. void ShowRef(); Draw the References relationships (other than inheritance or composition). void Streamer(TBuffer& b); Stream an object of class TClassTree.; the status of the object is saved and can be replayed in a subsequent session. TClassTree(). const char * GetClasses() const; {return fClasses.Data();}. const char * GetSourceDir() const; {return fSourceDir.Data();}. void SetSourceDir(const char* dir = ""src""); {fSourceDir = dir;}. » Author: Rene Brun 01/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id: TClassTree.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2009-12-07 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassTree.html:14518,inherit,inheritance,14518,root/html526/TClassTree.html,https://root.cern,https://root.cern/root/html526/TClassTree.html,2,['inherit'],['inheritance']
Modifiability,"fy option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ""C"" show References from code; ""H"" show Has a relations; ""M"" show Multiple Inheritance; ""R"" show References from data members. void ShowMul(); Draw the Multiple inheritance relationships. void ShowRef(); Draw the References relationships (other than inheritance or composition). void Streamer(TBuffer& b); Stream an object of class TClassTree.; the status of the object is saved and can be replayed in a subsequent session. TClassTree(). const char * GetClasses() const; {return fClasses.Data();}. const char * GetSourceDir() const; {return fSourceDir.Data();}. void SetSourceDir(const char* dir = ""src""); {fSourceDir = dir;}. » Author: Rene Brun 01/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id: TClassTree.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-11-15 15:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClassTree.html:14504,inherit,inheritance,14504,root/html528/TClassTree.html,https://root.cern,https://root.cern/root/html528/TClassTree.html,2,['inherit'],['inheritance']
Modifiability,"fy option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ""C"" show References from code; ""H"" show Has a relations; ""M"" show Multiple Inheritance; ""R"" show References from data members. void ShowMul(); Draw the Multiple inheritance relationships. void ShowRef(); Draw the References relationships (other than inheritance or composition). void Streamer(TBuffer& b); Stream an object of class TClassTree.; the status of the object is saved and can be replayed in a subsequent session. TClassTree(). const char * GetClasses() const; {return fClasses.Data();}. const char * GetSourceDir() const; {return fSourceDir.Data();}. void SetSourceDir(const char* dir = ""src""); {fSourceDir = dir;}. » Author: Rene Brun 01/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id: TClassTree.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClassTree.html:14573,inherit,inheritance,14573,root/html530/TClassTree.html,https://root.cern,https://root.cern/root/html530/TClassTree.html,2,['inherit'],['inheritance']
Modifiability,"fy option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ""C"" show References from code; ""H"" show Has a relations; ""M"" show Multiple Inheritance; ""R"" show References from data members. void ShowMul(); Draw the Multiple inheritance relationships. void ShowRef(); Draw the References relationships (other than inheritance or composition). void Streamer(TBuffer& b); Stream an object of class TClassTree.; the status of the object is saved and can be replayed in a subsequent session. TClassTree(). const char * GetClasses() const; {return fClasses.Data();}. const char * GetSourceDir() const; {return fSourceDir.Data();}. void SetSourceDir(const char* dir = ""src""); {fSourceDir = dir;}. » Author: Rene Brun 01/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id: TClassTree.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClassTree.html:14573,inherit,inheritance,14573,root/html532/TClassTree.html,https://root.cern,https://root.cern/root/html532/TClassTree.html,2,['inherit'],['inheritance']
Modifiability,"fy that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::string _binningName;  Name of binning to be used for cache histogram. ;  ; RooRealProxy func;  Proxy to functions whose running integral is calculated. ;  ; RooRealProxy x;  Integrated observable. ;  ;  Protected Attributes inherited from RooAbsCachedReal; std::map< Int_t, std::pair< const RooArgSet *, const RooArgSet * > > _anaIntMap;  ! Map for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; Int_t _ipOrder;  Interpolation order for cache histograms. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumRunningInt.html:57519,inherit,inherited,57519,doc/master/classRooNumRunningInt.html,https://root.cern,https://root.cern/doc/master/classRooNumRunningInt.html,1,['inherit'],['inherited']
Modifiability,"g &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::createIntegralRooFit::OwningPtr< RooAbsReal > createIntegral(const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCreate an object that represents the integral of the function over one or more observables listed in ...Definition RooAbsReal.cxx:514; RooAbsReal::getValdouble getVal(const RooArgSet *normalisationSet=nullptr) constEvaluate object.Definition RooAbsReal.h:103; RooAbsReal::setIntegratorConfigvoid setIntegratorConfig()Remove the specialized numeric integration configuration associated with this object.Definition RooAbsReal.cxx:3346; RooAbsReal::forceNumIntvirtual void forceNumInt(bool flag=true)Definition RooAbsReal.h:169; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAddPdfEfficient implementation of a sum of PDFs of the form.Definition RooAddPdf.h:33; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooExponentialExponential PDF.Definition RooExponential.h:22; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooMsgService::instancestatic RooMsgService & instance()Return reference to singleton instance.Definition RooMsgService.cxx:345; RooMsgService::getStreamStreamConfig & getStream(Int_t id)Definition RooMsgService.h:161; RooNumIntConfigHolds the configuration parameters of the various numeric integrat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:10296,config,configuration,10296,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,1,['config'],['configuration']
Modifiability,"g &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const;  Plot (project) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:18316,config,configuration,18316,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['config'],['configuration']
Modifiability,"g &className, const std::vector< Double_t > &event, Double_t weight)add signal training eventDefinition DataLoader.cxx:260; TMVA::DataLoader::SetTreevoid SetTree(TTree *tree, const TString &className, Double_t weight)deprecatedDefinition DataLoader.cxx:447; TMVA::DataLoader::AddSignalTestEventvoid AddSignalTestEvent(const std::vector< Double_t > &event, Double_t weight=1.0)add signal testing eventDefinition DataLoader.cxx:236; TMVA::DataLoader::DefaultDataSetInfoDataSetInfo & DefaultDataSetInfo()default creationDefinition DataLoader.cxx:533; TMVA::DataLoader::AddBackgroundTestEventvoid AddBackgroundTestEvent(const std::vector< Double_t > &event, Double_t weight=1.0)add signal training eventDefinition DataLoader.cxx:252; TMVA::DataLoader::fDataSetManagerDataSetManager * fDataSetManagerDefinition DataLoader.h:186; TMVA::DataLoader::MakeCopyDataLoader * MakeCopy(TString name)Copy method use in VI and CV.Definition DataLoader.cxx:691; TMVA::DataLoader::SetSignalWeightExpressionvoid SetSignalWeightExpression(const TString &variable)Definition DataLoader.cxx:549; TMVA::DataLoader::MakeKFoldDataSetvoid MakeKFoldDataSet(CvSplit &s)Function required to split the training and testing datasets into a number of folds.Definition DataLoader.cxx:662; TMVA::DataLoader::SetWeightExpressionvoid SetWeightExpression(const TString &variable, const TString &className="""")Definition DataLoader.cxx:563; TMVA::DataLoader::AddBackgroundTrainingEventvoid AddBackgroundTrainingEvent(const std::vector< Double_t > &event, Double_t weight=1.0)add signal training eventDefinition DataLoader.cxx:244; TMVA::DataLoader::RecombineKFoldDataSetvoid RecombineKFoldDataSet(CvSplit &s, Types::ETreeType tt=Types::kTraining)Recombines the dataset.Definition DataLoader.cxx:683; TMVA::DataLoader::VarTransformDataLoader * VarTransform(TString trafoDefinition)Transforms the variables and return a new DataLoader with the transformed variables.Definition DataLoader.cxx:146; TMVA::DataLoader::SetBackgroundWeightExpressi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8cxx_source.html:33968,variab,variable,33968,doc/master/DataLoader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html,1,['variab'],['variable']
Modifiability,"g &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Configurable.html:2268,inherit,inherited,2268,doc/master/classTMVA_1_1Configurable.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html,1,['inherit'],['inherited']
Modifiability,"g &methodTag, Double_t aux=0)evaluates MVA for given set of input variablesDefinition Reader.cxx:630; TMVA::Reader::AddVariablevoid AddVariable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separator) constsplits the option string at 'separator' and fills the list 'splitV' with the primitive stringsDefinition Tools.cxx:1199; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::gToolsTools & gTools(). tutorialstmvaTMVAMulticlassApplication.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlassApplication_8C_source.html:11870,variab,variable,11870,doc/master/TMVAMulticlassApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlassApplication_8C_source.html,1,['variab'],['variable']
Modifiability,"g &title="""", const TString &unit="""", Double_t min=0, Double_t max=0)user inserts target in data set infoDefinition DataLoader.cxx:524; TMVA::DataLoader::AddRegressionTreevoid AddRegressionTree(TTree *tree, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)Definition DataLoader.h:103; TMVA::DataLoader::SetWeightExpressionvoid SetWeightExpression(const TString &variable, const TString &className="""")Definition DataLoader.cxx:563; TMVA::DataLoader::PrepareTrainingAndTestTreevoid PrepareTrainingAndTestTree(const TCut &cut, const TString &splitOpt)prepare the training and test trees -> same cuts for signal and backgroundDefinition DataLoader.cxx:632; TMVA::DataLoader::AddTargetvoid AddTarget(const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0)user inserts target in data set infoDefinition DataLoader.cxx:512; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::Factory::TrainAllMethodsvoid TrainAllMethods()Iterates through all booked methods and calls training.Definition Factory.cxx:1114; TMVA::Factory::BookMethodMethodBase * BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")Book a classifier or regression method.Definition Factory.cxx:352; TMVA::Factory::TestAllMethodsvoid TestAllMethods()Evaluates all booked methods on the testing data and adds the output to the Results in the corresponi...Definition Factory.cxx:1271; TMVA::Factory::EvaluateAllMethodsvoid EvaluateAllMethods(void)Iterates over all MVAs that have been booked, and calls their evaluation methods.Definition Factory.cxx:1376; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Tools::SplitStringstd::ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:149353,variab,variable,149353,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,2,['variab'],['variable']
Modifiability,"g () const;  ; virtual Bool_t IsEnablePrefetching () const;  ; virtual void Prefetch (Long64_t pos, Int_t len);  Add block of length len at position pos in the list of blocks to be prefetched. ;  ; virtual Int_t ReadBufferExt (char *buf, Long64_t pos, Int_t len, Int_t &loc);  ; virtual Int_t ReadBufferExtNormal (char *buf, Long64_t pos, Int_t len, Int_t &loc);  Base function for ReadBuffer. ;  ; virtual Int_t ReadBufferExtPrefetch (char *buf, Long64_t pos, Int_t len, Int_t &loc);  prefetch the first block ;  ; virtual void SecondPrefetch (Long64_t, Int_t);  ; virtual void SecondSort ();  Sort buffers to be prefetched in increasing order of positions. ;  ; virtual void SetEnablePrefetching (Bool_t setPrefetching=kFALSE);  Set the prefetching mode of this file. ;  ; virtual void SetSkipZip (Bool_t=kTRUE);  ; virtual void Sort ();  Sort buffers to be prefetched in increasing order of positions. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WaitFinishPrefetch ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:18640,inherit,inherited,18640,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,2,['inherit'],['inherited']
Modifiability,"g (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Static Protected Member Functions; static const TGGC & GetLineGC ();  Get graphics context for line drawing. ;  ;  Static Protected Member Functions inherited from TGFrame; static Time_t GetLastClick ();  Get time of last mouse click. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; Bool_t fBdown;  ; TGCanvas * fCanvas;  pointer to canvas ;  ; Bool_t fDragging;  true if in dragging mode ;  ; TGRectangle fExposedRegion;  exposed area ;  ; TString fKeyInput;  keyboard input (buffer) ;  ; TTimer * fKeyTimer;  keyboard time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainer.html:31787,inherit,inherited,31787,doc/master/classTGContainer.html,https://root.cern,https://root.cern/doc/master/classTGContainer.html,1,['inherit'],['inherited']
Modifiability,"g (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:26955,variab,variable,26955,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['variab'],['variable']
Modifiability,"g (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:34182,variab,variable,34182,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,1,['variab'],['variable']
Modifiability,"g (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT.html:33970,variab,variable,33970,doc/master/namespaceROOT.html,https://root.cern,https://root.cern/doc/master/namespaceROOT.html,2,['variab'],['variable']
Modifiability,"g * TMVA::MethodPDERS::CreateRanking ; (; ). inlineprotectedvirtual . Implements TMVA::MethodBase.; Definition at line 130 of file MethodPDERS.h. ◆ CRScalc(). Double_t TMVA::MethodPDERS::CRScalc ; (; const Event & ; e). private . Definition at line 778 of file MethodPDERS.cxx. ◆ DeclareOptions(). void TMVA::MethodPDERS::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string. ; know options:; VolumeRangeMode <string> Method to determine volume range available values are:; MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function available values are:; Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator . Implements TMVA::MethodBase.; Definition at line 252 of file MethodPDERS.cxx. ◆ DeclFileName(). static const char * TMVA::MethodPDERS::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 221 of file MethodPDERS.h. ◆ GetBinaryTree(). BinarySearchTree * TMVA::MethodPDERS::GetBinaryTree ; (; void ; ); const. inlineprotected . Definition at line 116 of file MethodPDERS.h. ◆ GetError(). Float_t TMVA::MethodPDERS::GetError ; (; Float_t ; countS, . Float_t ; countB, . Float_t ; sumW2S, . Float_t ; sumW2B . ); const. private . statistical error estimate for RS estimator ; Definition at line 1080 of file MethodPDERS.cxx. ◆ GetHelpMessage(). void TMVA::MethodPDERS::GetHelpMessage ; (; ); const. protectedvirtual . g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:37128,adapt,adaptive,37128,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,4,['adapt'],['adaptive']
Modifiability,"g . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure : std::uint16_t. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkInvalid ; kLeaf ; kCollection ; kRecord ; kVariant ; kStreamer ; kUnknown . Definition at line 112 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:43850,config,configuration,43850,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,1,['config'],['configuration']
Modifiability,"g 2nd variable. FUN(IA,IB,F,T) - external routine; IA - cell number for 1st variable; IB - cell number for 2nd variable; F(3,4) - face which corresponds to the cell; F(1,*) - A; F(2,*) - B; F(3,*) - R; T(4) - additional function (for example: temperature). DRFACE(ICODES,XYZ,NP,IFACE,T) - routine for face drawing; ICODES(*) - set of codes for this face; ICODES(1) - IA; ICODES(2) - IB; XYZ(3,*) - coordinates of nodes; NP - number of nodes in face; IFACE(NP) - face; T(NP) - additional function. CHOPT - options: 'BF' - from BACK to FRONT; 'FB' - from FRONT to BACK. /*; ; */. void SurfaceSpherical(Int_t ipsdr, Int_t iordr, Int_t na, Int_t nb, const char* chopt); Draw surface in spheric coordinates. Input: IPSDR - pseudo-rapidity flag; IORDR - order of variables (0 - THETA,PHI; 1 - PHI,THETA); NA - number of steps along 1st variable; NB - number of steps along 2nd variable. FUN(IA,IB,F,T) - external routine; IA - cell number for 1st variable; IB - cell number for 2nd variable; F(3,4) - face which corresponds to the cell; F(1,*) - A; F(2,*) - B; F(3,*) - R; T(4) - additional function (for example: temperature). DRFACE(ICODES,XYZ,NP,IFACE,T) - routine for face drawing; ICODES(*) - set of codes for this face; ICODES(1) - IA; ICODES(2) - IB; XYZ(3,*) - coordinates of nodes; NP - number of nodes in face; IFACE(NP) - face; T(NP) - additional function. CHOPT - options: 'BF' - from BACK to FRONT; 'FB' - from FRONT to BACK. void SurfaceProperty(Double_t qqa, Double_t qqd, Double_t qqs, Int_t nnqs, Int_t& irep); Set surface property coefficients. Input: QQA - diffusion coefficient for diffused light [0.,1.]; QQD - diffusion coefficient for direct light [0.,1.]; QQS - diffusion coefficient for reflected light [0.,1.]; NNCS - power coefficient for reflected light (.GE.1). --; Lightness model formula: Y = YD*QA + > YLi*(QD*cosNi+QS*cosRi); --. Output: IREP - reply : 0 - O.K.; -1 - error in cooefficients. void ImplicitFunction(Double_t* rmin, Double_t* rmax, Int_t nx, Int_t ny, Int_t nz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPainter3dAlgorithms.html:31872,variab,variable,31872,root/html528/TPainter3dAlgorithms.html,https://root.cern,https://root.cern/root/html528/TPainter3dAlgorithms.html,12,['variab'],['variable']
Modifiability,"g ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/HybridPlot.h>. Inheritance diagram for RooStats::HybridPlot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HybridPlot(). HybridPlot::HybridPlot ; (; const char * ; name, . const char * ; title, . const std::vector< double > & ; sb_values, . const std::vector< double > & ; b_values, . double ; testStat_data, . int ; n_bins, . bool ; verbosity = true . ). Constructor. ; HybridPlot constructor. ; Definition at line 41 of file HybridPlot.cxx. ◆ ~HybridPlot(). HybridPlot::~HybridPlot ; (; ). override . Destructor. ; destructor ; Definition at line 123 of file HybridPlot.cxx. Member Function Documentation. ◆ Class(). static TClass * RooStats::HybridPlot::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::HybridPlot::Class_Name ; (; ). static . ReturnsName of this class . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html:13244,inherit,inherited,13244,doc/master/classRooStats_1_1HybridPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html,1,['inherit'],['inherited']
Modifiability,"g ;  ; TMatrixD readMatrixFromFile (const char *fname);  read a matrix from a text file ;  ; TMatrixD readMatrixFromStream (std::istream &stream);  read a matrix from a stream ;  ; void readParameters (TDirectory *f);  read the parameters from the input file ;  ; bool selfNormalized () const;  ; void setCacheAndTrackHints (RooArgSet &) override;  Retrieve the matrix of coefficients. ;  ; void setFlag (const char *name, double value);  set one flag to a specific value ;  ; void setParameter (const char *name, double value);  set one parameter to a specific value ;  ; void setParameter (const char *name, double value, double min, double max);  set one parameter to a specific value and range ;  ; void setParameter (const char *name, double value, double min, double max, double error);  set one parameter to a specific value and range ;  ; void setParameterConstant (const char *paramname, bool constant) const;  call setConstant with the boolean argument provided on the parameter with the given name ;  ; void setParameters (const char *foldername);  set the morphing parameters to those supplied in the sample with the given name ;  ; void setParameters (const ParamSet &params);  retrieve a set of couplings (-?-) ;  ; void setParameters (const RooArgList *list);  set the morphing parameters to those supplied in the list with the given name ;  ; void setParameters (TH1 *paramhist);  set the morphing parameters to those supplied in the given param hist ;  ; void setScale (double val);  set energy scale of the EFT expansion ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool updateCoefficients ();  Retrieve the new physics objects and update the weights in the morphing function. ;  ; bool useCoefficients (const char *filename);  ; bool useCoefficients (const TMatrixD &inverse);  setup the morphing function with a predefined inverse matrix call this function before any other afte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:12272,coupling,couplings,12272,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['coupling'],['couplings']
Modifiability,"g ;  ; std::vector< Double_t > fHighBkgCut;  ; std::vector< Double_t > fHighSigCut;  ; Bool_t fHistoricBool;  ; Double_t fHuberQuantile;  the option string determining the quantile for the Huber Loss Function in BDT regression. ;  ; Bool_t fInverseBoostNegWeights;  boost ev. with neg. weights with 1/boostweight rather than boostweight ;  ; std::vector< Bool_t > fIsHighBkgCut;  ; std::vector< Bool_t > fIsHighSigCut;  ; std::vector< Bool_t > fIsLowBkgCut;  ; std::vector< Bool_t > fIsLowSigCut;  ; Int_t fITree;  ntuple var: ith tree ;  ; std::map< const TMVA::Event *, LossFunctionEventInfo > fLossFunctionEventInfo;  map event to true value, predicted value, and weight used by different loss functions for BDT regression ;  ; std::vector< Double_t > fLowBkgCut;  ; std::vector< Double_t > fLowSigCut;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ;  ; Int_t fMinNodeEvents;  min number of events in node ;  ; Float_t fMinNodeSize;  min percentage of training events in node ;  ; TString fMinNodeSizeS;  string containing min percentage of training events in node ;  ; TTree * fMonitorNtuple;  monitoring ntuple ;  ; Int_t fNCuts;  grid used in cut applied in node splitting ;  ; TString fNegWeightTreatment;  variable that holds the option of how to treat negative event weights in training ;  ; UInt_t fNNodesMax;  max # of nodes ;  ; Double_t fNodePurityLimit;  purity limit for sig/bkg nodes ;  ; Bool_t fNoNegWeightsInTraining;  ignore negative event weights in the training ;  ; Int_t fNTrees;  number of decision trees requested ;  ; Bool_t fPairNegWeightsGlobal;  pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ;  ; DecisionTree::EPruneMethod fPruneMethod;  method used for pruning ;  ; TString fPruneMethodS;  prune method option String ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:36182,variab,variables,36182,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,2,['variab'],"['variable', 'variables']"
Modifiability,"g = (TConfigSTL*)conf;; 2219 UInt_t start, count;; 2220 /* Version_t vers = */ buf.ReadVersion(&start, &count, config->fOldClass);; 2221 ; 2222 TClass *newClass = config->fNewClass;; 2223 TVirtualCollectionProxy *newProxy = newClass->GetCollectionProxy();; 2224 TVirtualCollectionProxy::TPushPop helper( newProxy, ((char*)addr)+config->fOffset );; 2225 ; 2226 Int_t nvalues;; 2227 buf.ReadInt(nvalues);; 2228 void* alternative = newProxy->Allocate(nvalues,true);; 2229 if (nvalues) {; 2230 char startbuf[TVirtualCollectionProxy::fgIteratorArenaSize];; 2231 char endbuf[TVirtualCollectionProxy::fgIteratorArenaSize];; 2232 void *begin = &(startbuf[0]);; 2233 void *end = &(endbuf[0]);; 2234 config->fCreateIterators(alternative, &begin, &end, newProxy);; 2235 // We can not get here with a split vector of pointer, so we can indeed assume; 2236 // that actions->fConfiguration != null.; 2237 ; 2238 action(buf,begin,nvalues);; 2239 ; 2240 if (begin != &(startbuf[0])) {; 2241 // assert(end != endbuf);; 2242 config->fDeleteTwoIterators(begin,end);; 2243 }; 2244 }; 2245 newProxy->Commit(alternative);; 2246 ; 2247 buf.CheckByteCount(start,count,config->fTypeName);; 2248 return 0;; 2249 }; 2250 ; 2251 static INLINE_TEMPLATE_ARGS Int_t ReadCollectionFloat16(TBuffer &buf, void *addr, const TConfiguration *conf); 2252 {; 2253 return ReadNumericalCollection<Float_t,SimpleReadFloat16 >(buf,addr,conf);; 2254 }; 2255 ; 2256 static INLINE_TEMPLATE_ARGS Int_t ReadCollectionDouble32(TBuffer &buf, void *addr, const TConfiguration *conf); 2257 {; 2258 return ReadNumericalCollection<Double_t,SimpleReadDouble32 >(buf,addr,conf);; 2259 }; 2260 ; 2261 template <typename T>; 2262 static INLINE_TEMPLATE_ARGS Int_t ReadCollectionBasicType(TBuffer &buf, void *addr, const TConfiguration *conf); 2263 {; 2264 return ReadNumericalCollection<T,SimpleRead<T> >(buf,addr,conf);; 2265 }; 2266 ; 2267 template <typename From, typename To>; 2268 struct ConvertRead {; 2269 static INLINE_TEMPLATE_ARGS void Action(TBuffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:91719,config,config,91719,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['config'],['config']
Modifiability,"g an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; virtual TKey * CreateKey (TDirectory *mother, const void *obj, const TClass *cl, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Pain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelMergingFile.html:3330,inherit,inherited,3330,doc/master/classTParallelMergingFile.html,https://root.cern,https://root.cern/doc/master/classTParallelMergingFile.html,1,['inherit'],['inherited']
Modifiability,"g and add xml node to buffer. ;  ; XMLNodePointer_t XmlWriteBasic (ULong_t value);  Converts ULong_t to string and add xml node to buffer. ;  ; XMLNodePointer_t XmlWriteBasic (UShort_t value);  Converts UShort_t to string and add xml node to buffer. ;  ; void XmlWriteBlock (XMLNodePointer_t node);  Write binary data block from buffer to xml. ;  ; template<typename T > ; R__ALWAYS_INLINE void XmlWriteFastArray (const T *arr, Long64_t n);  Write array without size attribute Also treat situation, when instead of one single array chain of several elements should be produced. ;  ; XMLNodePointer_t XmlWriteObject (const void *obj, const TClass *objClass, Bool_t cacheReuse);  Write object to buffer If object was written before, only pointer will be stored Return pointer to top xml node, representing object. ;  ; XMLNodePointer_t XmlWriteValue (const char *value, const char *name);  Create xml node with specified name and adds it to stack node. ;  ;  Protected Member Functions inherited from TBufferText;  TBufferText ();  Default constructor. ;  ;  TBufferText (TBuffer::EMode mode, TObject *parent=nullptr);  Normal constructor. ;  ;  Protected Member Functions inherited from TBufferIO;  TBufferIO ();  ;  TBufferIO (TBuffer::EMode mode);  constructor ;  ;  TBufferIO (TBuffer::EMode mode, Int_t bufsiz);  constructor ;  ;  TBufferIO (TBuffer::EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr);  constructor ;  ; virtual void CheckCount (UInt_t);  ; Long64_t GetObjectTag (const void *obj);  Returns tag for specified object from objects map (if exists) Returns 0 if object not included into objects map. ;  ;  Protected Member Functions inherited from TBuffer;  TBuffer ();  ;  TBuffer (const TBuffer &)=delete;  ; void operator= (const TBuffer &)=delete;  ; Int_t Read (const char *name) override;  Read contents of object with specified name from the current directory. ;  ; Int_t Write (const char *name, Int_t opt, Int_t bufs) const overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferXML.html:47179,inherit,inherited,47179,doc/master/classTBufferXML.html,https://root.cern,https://root.cern/doc/master/classTBufferXML.html,1,['inherit'],['inherited']
Modifiability,"g attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction2Ref<VO,VI1,VI2> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction2Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Sep 8 17:02:50 2015 » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction2PdfBinding_double_int_int_.html:44328,variab,variable,44328,root/html534/RooCFunction2PdfBinding_double_int_int_.html,https://root.cern,https://root.cern/root/html534/RooCFunction2PdfBinding_double_int_int_.html,1,['variab'],['variable']
Modifiability,"g attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction2Ref<VO,VI1,VI2> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction2Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Jun 30 14:31:28 2015 » Last generated: 2015-06-30 14:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_int_int_.html:46482,variab,variable,46482,root/html602/RooCFunction2PdfBinding_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_int_int_.html,1,['variab'],['variable']
Modifiability,"g automatically generated by this ProposalHelper ;  ; virtual void SetCovMatrix (const TMatrixDSym &covMatrix);  set the covariance matrix to use for a multi-variate Gaussian proposal ;  ; virtual void SetPdf (RooAbsPdf &pdf);  Set the PDF to be the proposal density function. ;  ; virtual void SetUniformFraction (double uniFrac);  set what fraction of the proposal density function should come from a uniform proposal distribution ;  ; virtual void SetUpdateProposalParameters (bool updateParams);  ; virtual void SetVariables (const RooArgList &vars);  ; virtual void SetVariables (RooArgList &vars);  ; virtual void SetVariables (RooArgSet &vars);  ; virtual void SetWidthRangeDivisor (double divisor);  set what divisor we will use when dividing the range of a variable to determine the width of the proposal function for each dimension e.g. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ProposalHelper.html:2100,inherit,inherited,2100,doc/master/classRooStats_1_1ProposalHelper.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ProposalHelper.html,1,['inherit'],['inherited']
Modifiability,"g bits in rhs are assumed to be zero. ;  ; void DoFlip ();  Execute ~(*this) ;  ; void DoLeftShift (UInt_t shift);  Execute the left shift operation. ;  ; void DoOrEqual (const TBits &rhs);  Execute (*this) &= rhs; Extra bits in rhs are ignored Missing bits in rhs are assumed to be zero. ;  ; void DoRightShift (UInt_t shift);  Execute the left shift operation. ;  ; void DoXorEqual (const TBits &rhs);  Execute (*this) ^= rhs; Extra bits in rhs are ignored Missing bits in rhs are assumed to be zero. ;  ; void ReserveBytes (UInt_t nbytes);  Reverse each bytes. ;  ; void Resize (UInt_t newlen);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UChar_t * fAllBits;  ; UInt_t fNbits;  ; UInt_t fNbytes;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TBits.h>. Inheritance diagram for TBits:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBits() [1/2]. TBits::TBits ; (; UInt_t ; nbits = 8). TBits constructor. All bits set to 0. ; Definition at line 33 of file TBits.cxx. ◆ TBits() [2/2]. TBits::TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBits.html:12860,inherit,inherited,12860,doc/master/classTBits.html,https://root.cern,https://root.cern/doc/master/classTBits.html,1,['inherit'],['inherited']
Modifiability,"g box of a volume. ;  ; void RandomRays (Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char *target_vol=nullptr, Bool_t check_norm=kFALSE) override;  Shoot nrays in the current drawn geometry. ;  ; void Raytrace (Option_t *option="""") override;  Raytrace current drawn geometry. ;  ; TGeoNode * SamplePoints (Int_t npoints, Double_t &dist, Double_t epsil, const char *g3path) override;  Shoot npoints randomly in a box of 1E-5 around current point. ;  ; void SetBombFactors (Double_t bombx=1.3, Double_t bomby=1.3, Double_t bombz=1.3, Double_t bombr=1.3) override;  Set cartesian and radial bomb factors for translations. ;  ; void SetCheckedNode (TGeoNode *node) override;  Select a node to be checked for overlaps. ;  ; void SetClippingShape (TGeoShape *shape) override;  ; void SetExplodedView (Int_t iopt=0) override;  Set type of exploding view. ;  ; void SetGeoManager (TGeoManager *geom) override;  ; void SetIteratorPlugin (TGeoIteratorPlugin *plugin) override;  ; void SetNmeshPoints (Int_t npoints) override;  Set number of points to be generated on the shape outline when checking for overlaps. ;  ; void SetNsegments (Int_t nseg=20) override;  Set number of segments to approximate circles. ;  ; void SetRaytracing (Bool_t flag=kTRUE) override;  ; void SetTopVisible (Bool_t vis=kTRUE) override;  Set top geometry volume as visible. ;  ; void SetTopVolume (TGeoVolume *vol) override;  ; void SetVisLevel (Int_t level=3) override;  Set default level down to which visualization is performed. ;  ; void SetVisOption (Int_t option=0) override;  Set drawing mode : ;  ; Int_t ShapeDistancetoPrimitive (const TGeoShape *shape, Int_t numpoints, Int_t px, Int_t py) const override;  Returns distance between point px,py on the pad an a shape. ;  ; void Test (Int_t npoints, Option_t *option) override;  Check time of finding ""Where am I"" for n points. ;  ; void TestOverlaps (const char *path) override;  Geometry overlap checker based on sampling. ;  ; Bool_t TestVoxels (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:8356,plugin,plugin,8356,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['plugin'],['plugin']
Modifiability,"g branches. ;  . Static Private Member Functions; static void RegisterDefaultGenerators ();  Adds the default generators. ;  . Private Attributes; const TBranch * fBranch {nullptr};  pointer to the branch element representing the top object ;  ; TClass * fClass {nullptr};  pointer to TClass representing our type (i.e. return type for methods), 0 if basic type ;  ; TList * fLeaves {nullptr};  pointer to leaves ;  ; const TVirtualBranchBrowsable * fParent {nullptr};  parent method if this method is member of a returned class ;  ; bool fTypeIsPointer {false};  return type is pointer to class ;  . Static Private Attributes; static std::list< MethodCreateListOfBrowsables_t > fgGenerators;  list of MethodCreateListOfBrowsables_t called by CreateListOfBrowsables ;  ; static bool fgGeneratorsSet =false;  have we set the generators yet? empty is not good enough - user might have removed them ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchBrowsable.h>. Inheritance diagram for TVirtualBranchBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MethodCreateListOfBrowsables_t. typedef Int_t(* TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t) (TList &, const TBranch *branch, const TVirtualBranchBrowsable *parent). Definition at line 35 of file TBranchBrowsable.h. Constructor & Destructor Documentation. ◆ ~TVirtualBranchBrowsable(). TVirtualBranchBrowsable::~TVirtualBranchBrowsable ; (; ). override . Destructor. Delete our leaves. ; Definition at line 97 of file TBranchBrowsable.cxx. ◆ TVirtualBranchBrowsable(). TVirtualBranchBrowsable::TVirtualBranchBrowsable ; (; const TBranch * ; b, . TClass * ; type, . bool ; typeIsPointer, . const TVirtualBranchBrowsable * ; parent = nullptr . ). protected . Constructor setting a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualBranchBrowsable.html:16513,inherit,inherited,16513,doc/master/classTVirtualBranchBrowsable.html,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html,2,['inherit'],['inherited']
Modifiability,"g chmod.; 2743///; 2744/// If library_specified is not specified, CompileMacro generate a default name; 2745/// for library by taking the name of the file ""filename"" but replacing the; 2746/// dot before the extension by an underscore and by adding the shared; 2747/// library extension for the current platform.; 2748/// For example on most platform, hsimple.cxx will generate hsimple_cxx.so; 2749///; 2750/// It uses the directive fMakeSharedLibs to create a shared library.; 2751/// If loading the shared library fails, it tries to output a list of missing; 2752/// symbols by creating an executable (on some platforms like OSF, this does; 2753/// not HAVE to be an executable) containing the script. It uses the; 2754/// directive fMakeExe to do so.; 2755/// For both directives, before passing them to TSystem::Exec, it expands the; 2756/// variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; 2757/// $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; 2758/// information on those variables.; 2759///; 2760/// This method is used to implement the following feature:; 2761///; 2762/// Synopsis:; 2763///; 2764/// The purpose of this addition is to allow the user to use an external; 2765/// compiler to create a shared library from its C++ macro (scripts).; 2766/// Currently in order to execute a script, a user has to type at the root; 2767/// prompt; 2768/// ~~~ {.cpp}; 2769/// .X myfunc.C(arg1,arg2); 2770/// ~~~; 2771/// We allow them to type:; 2772/// ~~~ {.cpp}; 2773/// .X myfunc.C++(arg1,arg2); 2774/// ~~~; 2775/// or; 2776/// ~~~ {.cpp}; 2777/// .X myfunc.C+(arg1,arg2); 2778/// ~~~; 2779/// In which case an external compiler will be called to create a shared; 2780/// library. This shared library will then be loaded and the function; 2781/// myfunc will be called with the two arguments. With '++' the shared library; 2782/// is always recompiled. With '+' the shared library is recompiled only; 2783/// if it does not exist yet or the macro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:90236,variab,variables,90236,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['variab'],['variables']
Modifiability,"g event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;; ; // You can add an arbitrary number of signal or background trees; dataloader->AddSignalTree ( signalTree, signalWeight );; dataloader->AddBackgroundTree( background, backgroundWeight );; ; // Apply additional cuts on the signal and background samples (can be different); TCut mycuts = """"; // for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; TCut mycutb = """"; // for example: TCut mycutb = ""abs(var1)<0.5"";; ; // Tell the factory how to use the training and testing events; dataloader->PrepareTrainingAndTestTree( mycuts, mycutb,; ""nTrain_Signal=0:nTrain_Background=0:SplitMode=Random:NormMode=NumEvents:!V"" );; ; // Book MVA methods; ; // Fisher discriminant; factory->BookMethod( dataloader, TMVA::Types::kFisher, ""Fisher"", ""!H:!V:Fisher"" );; ; // Likelihood; factory->BookMethod( dataloader, TMVA::Types::kLikelihood, ""Likelihood"",; ""!H:!V:TransformOutput:PDFInterpol=Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmoothBkg[1]=10:NSmooth=1:NAvEvtPerBin=50"" );; ; // Categorised classifier; TMVA::MethodCategory* mcat = 0;; ; // The variable sets; TString theCat1Vars = ""var1:var2:var3:var4"";; TString theCat2Vars = (UseOffsetMethod ? ""var1:var2:var3:var4"" : ""var1:var2:var3"");; ; // Fisher with categories; TMVA::MethodBase* fiCat = factory->BookMethod( dataloader, TMVA::Types::kCategory, ""FisherCat"","""" );; mcat = dynamic_cast<TMVA::MethodCategory*>(fiCat);; mcat->AddMethod( ""abs(eta)<=1.3"", theCat1Vars, TMVA::Types::kFisher, ""Category_Fisher_1"",""!H:!V:Fisher"" );; mcat->AddMethod( ""abs(eta)>1.3"", theCat2Vars, TMVA::Types::kFisher, ""Category_Fisher_2"",""!H:!V:Fisher"" );; ; // Likelihood with categories; TMVA::MethodBase* liCat = factory->BookMethod( dataloader, TMVA::Types::kCategory, ""LikelihoodCat"","""" );; mcat = dynamic_cast<TMVA::MethodCategory*>(liCat);; mcat->AddMethod( ""abs(eta)<=1.3"",theCat1Vars, TMVA::Types::kLikelihood,; ""Category_Likelihood_1"",""!H:!V:TransformOutput:PDFInterpo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:31711,variab,variable,31711,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['variab'],['variable']
Modifiability,"g flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooProfileLL.h>. Inheritance diagram for RooProfileLL:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooProfileLL() [1/3]. RooProfileLL::RooProfileLL ; (; ). Default constructor Should only be used by proof. ; Definition at line 42 of file RooProfileLL.cxx. ◆ RooProfileLL() [2/3]. RooProfileLL::RooProfileLL ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; nllIn, . const RooArgSet & ; observables . ). Constructor of profile likelihood given input likelihood nll w.r.t the given set of variables. ; The input log likelihood is minimized w.r.t to all other variables of the likelihood at each evaluation and the value of the global log likelihood minimum is always subtracted. ; Definition at line 56 of file RooProfileLL.cxx. ◆ RooProfileLL() [3/3]. RooProfileLL::RooProfileLL ; (; const RooProfileLL & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 73 of file RooProfileLL.cxx. Member Function Documentation. ◆ alwaysStartFromMin(). bool RooProfileLL::alwaysStartFromMin ; (; ); const. inline . Definition at line 31 of file RooProfileLL.h. ◆ bestFitObs(). const RooArgSet & RooProfileLL::bestFitObs ; (; ); const. Definition at line 98 of file RooProfileLL.cxx. ◆ bestFitParams(). const RooArgSet & RooProfileLL::bestFitParams ; (; ); const. Definition at line 89 of file RooProfileLL.cxx. ◆ Class(). static TClass * RooProfileLL::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooProfileLL::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooProfileLL::Class_Vers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:61833,variab,variables,61833,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['variab'],['variables']
Modifiability,"g function is not a PDF, this will always return zero. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; Int_t minTrialSamples (const RooArgSet &arGenObs) const override;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:3435,inherit,inherited,3435,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,1,['inherit'],['inherited']
Modifiability,"g global bin number which has its content; 570/// incremented by w; 571 ; 572Int_t TH3::Fill(const char *namex, const char *namey, Double_t z, Double_t w); 573{; 574 Int_t binx, biny, binz, bin;; 575 fEntries++;; 576 binx = fXaxis.FindBin(namex);; 577 biny = fYaxis.FindBin(namey);; 578 binz = fZaxis.FindBin(z);; 579 if (binx <0 || biny <0 || binz<0) return -1;; 580 bin = binx + (fXaxis.GetNbins()+2)*(biny + (fYaxis.GetNbins()+2)*binz);; 581 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 582 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 583 AddBinContent(bin,w);; 584 if (binx == 0 || binx > fXaxis.GetNbins()) return -1;; 585 if (biny == 0 || biny > fYaxis.GetNbins()) return -1;; 586 if (binz == 0 || binz > fZaxis.GetNbins()) {; 587 if (!GetStatOverflowsBehaviour()) return -1;; 588 }; 589 Double_t v = w;; 590 fTsumw += v;; 591 fTsumw2 += v*v;; 592 fTsumwz += v*z;; 593 fTsumwz2 += v*z*z;; 594 // skip computation of the statistics along axis that have labels (can be extended and are aphanumeric); 595 UInt_t labelBitMask = GetAxisLabelStatus();; 596 if (labelBitMask != (TH1::kXaxis | TH1::kYaxis)) {; 597 Double_t x = (labelBitMask & TH1::kXaxis) ? 0 : fXaxis.GetBinCenter(binx);; 598 Double_t y = (labelBitMask & TH1::kYaxis) ? 0 : fYaxis.GetBinCenter(biny);; 599 fTsumwx += v * x;; 600 fTsumwx2 += v * x * x;; 601 fTsumwy += v * y;; 602 fTsumwy2 += v * y * y;; 603 fTsumwxy += v * x * y;; 604 fTsumwxz += v * x * z;; 605 fTsumwyz += v * y * z;; 606 }; 607 return bin;; 608}; 609 ; 610 ; 611////////////////////////////////////////////////////////////////////////////////; 612/// Increment cell defined by x,namey,namez by a weight w; 613///; 614/// If the weight is not equal to 1, the storage of the sum of squares of; 615/// weights is automatically triggered and the sum of the squares of weights is incremented; 616/// by w^2 in the corresponding cell.; 617/// The function returns the corresponding global bin number which has i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:22917,extend,extended,22917,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['extend'],['extended']
Modifiability,"g mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Bool_t fAutoFit;  canvas container keeps same size as canvas ;  ; Int_t fButton;  currently pressed button ;  ; TCanvas * fCanvas;  pointer to TCanvas ;  ; TRootEmbeddedContainer * fCanvasContainer;  container in canvas widget ;  ; Int_t fCWinId;  window id used by embedded TCanvas ;  ; Atom_t * fDNDTypeList;  handles DND types ;  ;  Protected Attributes inherited from TGCanvas; TGHScrollBar * fHScrollbar;  horizontal scrollbar ;  ; Int_t fScrolling;  flag which scrolling modes are allowed ;  ; TGViewPort * fVport;  viewport through which we look at contents ;  ; TGVScrollBar * fVScrollbar;  vertical scrollbar ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootEmbeddedCanvas.html:25618,inherit,inherited,25618,doc/master/classTRootEmbeddedCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootEmbeddedCanvas.html,2,['inherit'],['inherited']
Modifiability,"g name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; char _label [256];  State name. ;  ; Int_t _value = 0;  Index value. ;  . Friends; class RooAbsCategory;  ; class RooAbsCategoryLValue;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFitLegacy/RooCatTypeLegacy.h>. Inheritance diagram for RooCatType:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCatType() [1/3]. RooCatType::RooCatType ; (; ). inline . Definition at line 25 of file RooCatTypeLegacy.h. ◆ RooCatType() [2/3]. RooCatType::RooCatType ; (; const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:12497,inherit,inherited,12497,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['inherit'],['inherited']
Modifiability,"g of main transparency.; UChar_tTEveElement::fChangeBits!; TClass*TEveElementList::fChildClassClass of acceptable children, others are rejected.; list<TEveElement*>TEveElement::fChildrenList of children.; Color_tTEveElementList::fColorColor of the object.; TEveCompound*TEveElement::fCompoundCompound this object belongs to.; Int_tTEveElement::fDenyDestroy! Deny-destroy count.; Bool_tTEveElement::fDestroyOnZeroRefCntAuto-destruct when ref-count reaches zero.; Bool_tTEveElement::fDestructing!; TEveCompositeFrame*TEveWindow::fEveFrame; TGFrame*fGUIFrame; Bool_tTEveElement::fHighlighted!; Short_tTEveElement::fImpliedHighlighted!; Short_tTEveElement::fImpliedSelected!; set<TEveElement::TEveListTreeInfo,less<TEveElement::TEveListTreeInfo>,allocator<TEveElement::TEveListTreeInfo> >TEveElement::fItems! Set of list-tree-items.; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; TStringTNamed::fNameobject identifier; Int_tTEveElement::fNumChildren!; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tTEveWindow::fShowTitleBar; TRefTEveElement::fSourceExternal object that is represented by this element.; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; void*TEveElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element.; static Pixel_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowFrame.html:20084,variab,variable,20084,root/html528/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html528/TEveWindowFrame.html,1,['variab'],['variable']
Modifiability,"g of main transparency.; UChar_tTEveElement::fChangeBits!; TClass*TEveElementList::fChildClassClass of acceptable children, others are rejected.; list<TEveElement*>TEveElement::fChildrenList of children.; Color_tTEveElementList::fColorColor of the object.; TEveCompound*TEveElement::fCompoundCompound this object belongs to.; Int_tTEveElement::fDenyDestroy! Deny-destroy count.; Bool_tTEveElement::fDestroyOnZeroRefCntAuto-destruct when ref-count reaches zero.; Char_tTEveElement::fDestructing!; TEveCompositeFrame*TEveWindow::fEveFrame; TGFrame*fGUIFrame; Bool_tTEveElement::fHighlighted!; Short_tTEveElement::fImpliedHighlighted!; Short_tTEveElement::fImpliedSelected!; set<TEveElement::TEveListTreeInfo,less<TEveElement::TEveListTreeInfo>,allocator<TEveElement::TEveListTreeInfo> >TEveElement::fItems! Set of list-tree-items.; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; TStringTNamed::fNameobject identifier; Int_tTEveElement::fNumChildren!; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tTEveWindow::fShowTitleBar; TRefTEveElement::fSourceExternal object that is represented by this element.; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; void*TEveElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element.; static Pixel_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveWindowFrame.html:20450,variab,variable,20450,root/html530/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html530/TEveWindowFrame.html,3,['variab'],['variable']
Modifiability,"g of object arguments. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const;  Interface for detailed printing of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; virtual void printTree (std::ostream &os, TString indent="""") const;  Interface for tree structure printing of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:10646,inherit,inherited,10646,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['inherit'],['inherited']
Modifiability,"g of objects in the TObjectTable. ;  . Private Attributes; TH1 * fHistoEdm;  ; TH1 * fHistoFval;  ; TList * fHistoParList;  ; int fIterOffset;  ; TVirtualPad * fMinuitPad;  ; TVirtualPad * fOldPad;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMinuit2TraceObject.h>. Inheritance diagram for TMinuit2TraceObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMinuit2TraceObject(). TMinuit2TraceObject::TMinuit2TraceObject ; (; int ; parNumber = -1). Definition at line 19 of file TMinuit2TraceObject.cxx. ◆ ~TMinuit2TraceObject(). TMinuit2TraceObject::~TMinuit2TraceObject ; (; ). override . Definition at line 25 of file TMinuit2TraceObject.cxx. Member Function Documentation. ◆ Class(). static TClass * TMinuit2TraceObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMinuit2TraceObject::Class_Name ; (; ). static . ReturnsName of this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit2TraceObject.html:11305,inherit,inherited,11305,doc/master/classTMinuit2TraceObject.html,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html,2,['inherit'],['inherited']
Modifiability,"g option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; virtual void printTree (std::ostream &os, TString indent="""") const;  Interface for tree structure printing of object. ;  ; virtual void printValue (std::ostream &os) const;  Interface to print value of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvGenContext.html:12355,inherit,inherited,12355,doc/master/classRooConvGenContext.html,https://root.cern,https://root.cern/doc/master/classRooConvGenContext.html,8,['inherit'],['inherited']
Modifiability,"g option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; virtual void printTree (std::ostream &os, TString indent="""") const;  Interface for tree structure printing of object. ;  ; virtual void printValue (std::ostream &os) const;  Interface to print value of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; template<class Pdf_t > ; static std::unique_ptr< RooAbsGenContext > create ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddGenContext.html:11572,inherit,inherited,11572,doc/master/classRooAddGenContext.html,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html,1,['inherit'],['inherited']
Modifiability,"g option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; virtual void printTree (std::ostream &os, TString indent="""") const;  Interface for tree structure printing of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooDirItem;  RooDirItem ();  ;  RooDirItem (const RooDirItem &);  ; virtual ~RooDirItem ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:15015,inherit,inherited,15015,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['inherit'],['inherited']
Modifiability,"g phase). void InitBase(); default initialization called by all constructors. void DeclareBaseOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: VariableTransform=None,Decorrelated,PCA to use transformed variables; instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use; in the method. Only the Likelihood; Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(). std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const. void AddRegressionOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void AddMulticlassOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void NoErrorCalc(Double_t *const err, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBase.html:21816,variab,variable,21816,root/html530/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBase.html,2,['variab'],['variable']
Modifiability,"g phase). void InitBase(); default initialization called by all constructors. void DeclareBaseOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: VariableTransform=None,Decorrelated,PCA to use transformed variables; instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use; in the method. Only the Likelihood; Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility; they are hence without any effect (the reader is only reading the training; options that HAD been used at the training of the .xml weightfile at hand. std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const. void AddRegressionOutput(TMVA::Types::ETreeType type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBase.html:21785,variab,variable,21785,root/html534/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBase.html,3,['variab'],['variable']
Modifiability,"g point (`Double_t`); 101 - `d` : a 24 bit truncated floating point (`Double32_t`); 102 - `L` : a 64 bit signed integer (`Long64_t`); 103 - `l` : a 64 bit unsigned integer (`ULong64_t`); 104 - `G` : a long signed integer, stored as 64 bit (`Long_t`); 105 - `g` : a long unsigned integer, stored as 64 bit (`ULong_t`); 106 - `O` : [the letter `o`, not a zero] a boolean (`bool`); 107 ; 108 Examples:; 109 - A int: ""myVar/I""; 110 - A float array with fixed size: ""myArrfloat[42]/F""; 111 - An double array with variable size, held by the `myvar` column: ""myArrdouble[myvar]/D""; 112 - An Double32_t array with variable size, held by the `myvar` column , with values between 0 and 16: ""myArr[myvar]/d[0,10]""; 113 - The `myvar` column, which holds the variable size, **MUST** be an `Int_t` (/I).; 114 ; 115- If the address points to a single numerical variable, the leaflist is optional:; 116~~~ {.cpp}; 117 int value;; 118 tree->Branch(branchname, &value);; 119~~~; 120- If the address points to more than one numerical variable, we strongly recommend; 121 that the variable be sorted in decreasing order of size. Any other order will; 122 result in a non-portable TTree (i.e. you will not be able to read it back on a; 123 platform with a different padding strategy).; 124 We recommend to persistify objects rather than composite leaflists.; 125- In case of the truncated floating point types (Float16_t and Double32_t) you can; 126 furthermore specify the range in the style [xmin,xmax] or [xmin,xmax,nbits] after; 127 the type character. For example, for storing a variable size array `myArr` of; 128 `Double32_t` with values within a range of `[0, 2*pi]` and the size of which is stored; 129 in an `Int_t` (/I) branch called `myArrSize`, the syntax for the `leaflist` string would; 130 be: `myArr[myArrSize]/d[0,twopi]`. Of course the number of bits could be specified,; 131 the standard rules of opaque typedefs annotation are valid. For example, if only; 132 18 bits were sufficient, the syntax woul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:6181,variab,variable,6181,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['variab'],['variable']
Modifiability,"g read via a HTTP server. The url; argument must be of the form: http://host.dom.ain/file.root.; The opt can be ""NOPROXY"", to bypass any set ""http_proxy"" shell; variable. The proxy can be specified as (in sh, or equivalent csh):; export http_proxy=http://pcsalo.cern.ch:3128; The proxy can also be specified via the static method TWebFile::SetProxy().; Basic authentication (AuthType Basic) is supported. The user name and; passwd can be specified in the url like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root; If the file specified in the URL does not exist or is not accessible; the kZombie bit will be set in the TWebFile object. Use IsZombie(); to see if the file is accessible. The preferred interface to this; constructor is via TFile::Open(). TWebFile(TUrl url, Option_t* opt = """"); Create a Web file object. A web file is the same as a read-only; TFile except that it is being read via a HTTP server. Make sure url; is a valid TUrl object.; The opt can be ""NOPROXY"", to bypass any set ""http_proxy"" shell; variable. The proxy can be specified as (in sh, or equivalent csh):; export http_proxy=http://pcsalo.cern.ch:3128; The proxy can also be specified via the static method TWebFile::SetProxy().; Basic authentication (AuthType Basic) is supported. The user name and; passwd can be specified in the url like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root; If the file specified in the URL does not exist or is not accessible; the kZombie bit will be set in the TWebFile object. Use IsZombie(); to see if the file is accessible. ~TWebFile(); Cleanup. void Init(Bool_t readHeadOnly); Initialize a TWebFile object. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Set GET command for use by ReadBuffer(s)10(), handle redirection if; needed. Give full URL so Apache's virtual hosts solution works. void CheckProxy(); Check if shell var ""http_proxy"" has been set and should be used. Bool_t IsOpen() const; A TWebFile that has b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TWebFile.html:24003,variab,variable,24003,root/html528/TWebFile.html,https://root.cern,https://root.cern/root/html528/TWebFile.html,6,['variab'],['variable']
Modifiability,g selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofNodeInfo Class describing a PROOF node; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelector Python equivalent base class for PROOF; TPythia6 Interface to Pythia6.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:114775,config,config,114775,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['config'],['config']
Modifiability,"g set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; vector<double>_high; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; vector<int>_interpCode; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; vector<double>_low; static Int_tRooPrintable::_nameLength; double_nominal; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_paramIter! do not persist; RooListProxy_paramList; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HistFactory__FlexibleInterpVar.html:33034,config,configuration,33034,root/html530/RooStats__HistFactory__FlexibleInterpVar.html,https://root.cern,https://root.cern/root/html530/RooStats__HistFactory__FlexibleInterpVar.html,1,['config'],['configuration']
Modifiability,g table in a MySQL test database ;  sqlcreatedb.py Create a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlfilldb.py Fill run catalog with nfiles entries ;  SQLiteIPLocation.C ;  SQLitePlatformDistribution.C ;  SQLiteTimeVersionOfRoot.C ;  SQLiteVersionsOfRoot.C ;  sqlselect.CQuery example to MySQL test database ;  sqlselect.py Query example to MySQL test database ;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVACrossValidationApplication.C This macro provides an example of how to use TMVA for k-folds cross evaluation in application ;  TMVACrossValidationRegression.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TM,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:164758,variab,variables,164758,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['variab'],['variables']
Modifiability,"g terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TTreeViewer; 13A graphic user interface designed to handle ROOT trees and to take advantage of; 14TTree class features.; 15 ; 16It uses ROOT native GUI widgets adapted for ""drag and drop"" functionality.; 17in the same session.; 18 ; 19### The following capabilities are making the viewer a helpful tool for analysis:; 20 ; 21 - several trees may be opened in the same session;; 22 - branches and leaves can be easily browsed or scanned;; 23 - fast drawing of branch expressions by double-clicking;; 24 - new variables/selections easy to compose with the built-in editor;; 25 - histograms can be composed by dragging leaves or user-defined expressions; 26 to X, Y and Z axis items;; 27 - the tree entries to be processed can be selected with a double slider;; 28 - selections can be defined and activated by dragging them to the 'Cut' item;; 29 - all expressions can be aliased and aliases can be used in composing others;; 30 - input/output event lists easy to handle;; 31 - menu with histogram drawing options;; 32 - user commands may be executed within the viewer and the current command; 33 can be echoed;; 34 - current 'Draw' event loop is reflected by a progress bar and may be; 35 interrupted by the user;; 36 - all widgets have self-explaining tool tips and/or context menus;; 37 - expressions/leaves can be dragged to a 'scan box' and scanned by; 38 double-clicking this item. The result can be redirected to an ASCII file;; 39 ; 40### The layout has the following items:; 41 ; 42 - a menu bar with entries : File, Edit, Run, Options and Help;; 43 - a toolbar in the upper part where you can issue user commands, change; 44 the drawing option and the histogram name, three check buttons Hist, Rec; 45 and Scan.HIST toggles histogram drawing mode, REC enables recording of the; 46 last command issu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:1204,variab,variables,1204,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['variab'],['variables']
Modifiability,"g the model....; The PyTorch CNN model is created and saved as PyTorchModelCNN.pt; : Loaded pytorch train function: ; : Loaded pytorch optimizer: ; : Loaded pytorch loss function: ; : Loaded pytorch predict function: ; : Loaded model from file: PyTorchTrainedModelCNN.pt; PyTorch : [dataset] : Evaluation of PyTorch on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.12 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN_CPU; : ; TMVA_DNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_CNN_CPU; : ; TMVA_CNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: PyKeras; : ; PyKeras : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: PyTorch; : ; PyTorch : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; : ; : Evaluation results ranked by best signal efficiency and purity (area); : ---------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:42011,variab,variable,42011,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,2,['variab'],"['variable', 'variables']"
Modifiability,"g the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBDT.html:2131,adapt,adaptive,2131,root/html528/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBDT.html,6,['adapt'],['adaptive']
Modifiability,"g the tutorial TestSPlot.C ; Definition at line 21 of file TSPlot.h. Public Member Functions;  TSPlot ();  default constructor (used by I/O only) ;  ;  TSPlot (Int_t nx, Int_t ny, Int_t ne, Int_t ns, TTree *tree);  Normal TSPlot constructor. ;  ;  ~TSPlot () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  To browse the histograms. ;  ; void FillSWeightsHists (Int_t nbins=50);  The order of histograms in the array: ;  ; void FillXvarHists (Int_t nbins=100);  Fills the histograms of x variables (not weighted) with nbins. ;  ; void FillYpdfHists (Int_t nbins=100);  Fills the histograms of pdf-s of y variables with binning nbins. ;  ; void FillYvarHists (Int_t nbins=100);  Fill the histograms of y variables. ;  ; Int_t GetNevents ();  ; Int_t GetNspecies ();  ; void GetSWeights (Double_t *weights);  Returns the matrix of sweights. ;  ; void GetSWeights (TMatrixD &weights);  Returns the matrix of sweights. ;  ; TH1D * GetSWeightsHist (Int_t ixvar, Int_t ispecies, Int_t iyexcl=-1);  Returns the histogram of a variable, weighted with sWeights. ;  ; TObjArray * GetSWeightsHists ();  Returns an array of all histograms of variables, weighted with sWeights. ;  ; TString * GetTreeExpression ();  ; TString * GetTreeName ();  ; TString * GetTreeSelection ();  ; TH1D * GetXvarHist (Int_t ixvar);  Returns the histogram of variable ixvar. ;  ; TObjArray * GetXvarHists ();  Returns the array of histograms of x variables (not weighted). ;  ; TH1D * GetYpdfHist (Int_t iyvar, Int_t ispecies);  Returns the histogram of the pdf of variable iyvar for species #ispecies, binning nbins. ;  ; TObjArray * GetYpdfHists ();  Returns the array of histograms of pdf's of y variables with binning nbins. ;  ; TH1D * GetYvarHist (Int_t iyvar);  Returns the histogram of variable iyvar.If histograms have not already been filled, they are filled with default binning 100. ;  ; TObjArray * GetYvarHists ();  Returns the array of histograms of y variables. ;  ; TClass * IsA () const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPlot.html:12337,variab,variable,12337,doc/master/classTSPlot.html,https://root.cern,https://root.cern/doc/master/classTSPlot.html,1,['variab'],['variable']
Modifiability,"g these least significant vectors in the subsequent analysis. On the other hand, in the analysis of real data, these least; significant variables(?) can be used for the pattern; recognition problem of extracting the valid combinations of; coordinates describing a true trajectory from the set of all possible; wrong combinations. The program described here performs this principal components analysis; on a sample of data provided by the user. It computes the covariance; matrix, its eigenvalues ands corresponding eigenvectors and exhibits; the behavior of the principal components (), thus providing; to the user all the means of understanding his data. Principal Components Method. Let's consider a sample of prototypes each being characterized by; variables. . Each prototype is a point, or a; column vector, in a -dimensional pattern space. (1). where each represents the particular value associated with the; -dimension. Those variables are the quantities accessible to the; experimentalist, but are not necessarily the most significant for the; classification purpose. The Principal Components Method consists of applying a; linear transformation to the original variables. This; transformation is described by an orthogonal matrix and is equivalent; to a rotation of the original pattern space into a new set of; coordinate vectors, which hopefully provide easier feature; identification and dimensionality reduction. Let's define the covariance matrix:. (2). and the brackets indicate mean value over the sample of ; prototypes. This matrix is real, positive definite, symmetric, and will; have all its eigenvalues greater then zero. It will now be show that; among the family of all the complete orthonormal bases of the pattern; space, the base formed by the eigenvectors of the covariance matrix; and belonging to the largest eigenvalues, corresponds to the most; significant features of the description of the original prototypes. let the prototypes be expanded on into a set of basis vec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPrincipal.html:3215,variab,variables,3215,root/html528/TPrincipal.html,https://root.cern,https://root.cern/root/html528/TPrincipal.html,4,['variab'],['variables']
Modifiability,"g to LUT; TStringRooAbsGenContext::_normRangeNormalization range of pdf; RooAbsPdf*_pdfPointer to cloned p.d.f; RooArgSet*_pdfSetSet owned all nodes of internal clone of p.d.f; Int_t*RooAbsGenContext::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; const RooArgSet*_vars; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBinnedGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); Constructor. ~RooBinnedGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach given set of variables to internal p.d.f. clone. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator contex. Attach theEvent; to internal p.d.f clone and forward initialization call to; the component generators. void setExpectedData(Bool_t ). RooDataSet * generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE). void generateEvent(RooArgSet& theEvent, Int_t remaining); this method is not implemented for this context. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print the details of the context. RooBinnedGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). void setProtoDataOrder(Int_t* ); {}. » Last changed: Tue Jun 2 15:28:03 2015 » Last generated: 2015-06-02 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooBinnedGenContext.html:10080,variab,variables,10080,root/html604/RooBinnedGenContext.html,https://root.cern,https://root.cern/root/html604/RooBinnedGenContext.html,1,['variab'],['variables']
Modifiability,"g to LUT; TStringRooAbsGenContext::_normRangeNormalization range of pdf; RooAbsPdf*_pdfPointer to cloned p.d.f; RooArgSet*_pdfSetSet owned all nodes of internal clone of p.d.f; Int_t*RooAbsGenContext::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; const RooArgSet*_vars; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBinnedGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); Constructor. ~RooBinnedGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach given set of variables to internal p.d.f. clone. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator contex. Attach theEvent; to internal p.d.f clone and forward initialization call to; the component generators. void setExpectedData(Bool_t ). RooDataSet * generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE). void generateEvent(RooArgSet& theEvent, Int_t remaining); this method is not implemented for this context. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print the details of the context. RooBinnedGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). void setProtoDataOrder(Int_t* ); {}. » Last changed: Tue Jun 30 14:31:07 2015 » Last generated: 2015-06-30 14:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBinnedGenContext.html:10080,variab,variables,10080,root/html602/RooBinnedGenContext.html,https://root.cern,https://root.cern/root/html602/RooBinnedGenContext.html,1,['variab'],['variables']
Modifiability,"g to LUT; TStringRooAbsGenContext::_normRangeNormalization range of pdf; RooAbsPdf*_pdfPointer to cloned p.d.f; RooArgSet*_pdfSetSet owned all nodes of internal clone of p.d.f; Int_t*RooAbsGenContext::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; const RooArgSet*_vars; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBinnedGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); Constructor. ~RooBinnedGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach given set of variables to internal p.d.f. clone. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator contex. Attach theEvent; to internal p.d.f clone and forward initialization call to; the component generators. void setExpectedData(Bool_t ). RooDataSet * generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE). void generateEvent(RooArgSet& theEvent, Int_t remaining); this method is not implemented for this context. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print the details of the context. RooBinnedGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). void setProtoDataOrder(Int_t* ); {}. » Last changed: Tue Mar 10 17:14:37 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBinnedGenContext.html:9061,variab,variables,9061,root/html534/RooBinnedGenContext.html,https://root.cern,https://root.cern/root/html534/RooBinnedGenContext.html,1,['variab'],['variables']
Modifiability,"g to LUT; TStringRooAbsGenContext::_normRangeNormalization range of pdf; RooAbsPdf*_pdfPointer to cloned p.d.f; RooArgSet*_pdfSetSet owned all nodes of internal clone of p.d.f; Int_t*RooAbsGenContext::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; const RooArgSet*_vars; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBinnedGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); Constructor. ~RooBinnedGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach given set of variables to internal p.d.f. clone. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator contex. Attach theEvent; to internal p.d.f clone and forward initialization call to; the component generators. void setExpectedData(Bool_t ). RooDataSet * generate(Int_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE). void generateEvent(RooArgSet& theEvent, Int_t remaining); this method is not implemented for this context. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print the details of the context. RooBinnedGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). void setProtoDataOrder(Int_t* ); {}. » Last changed: Fri Dec 2 14:26:42 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinnedGenContext.html:9039,variab,variables,9039,root/html532/RooBinnedGenContext.html,https://root.cern,https://root.cern/root/html532/RooBinnedGenContext.html,1,['variab'],['variables']
Modifiability,"g to something inside the leaf; Returns:; -2 Error: some information is missing (message already printed); -1 Error: Syntax is incorrect (message already printed); 0; >0 the value returns is the action code. Int_t FindLeafForExpression(const char* expression, TLeaf*& leaf, TString& leftover, Bool_t& final, UInt_t& paran_level, TObjArray& castqueue, vector<std::string>& aliasUsed, Bool_t& useLeafCollectionObject, const char* fullExpression); Look for the leaf corresponding to the start of expression.; It returns the corresponding leaf if any.; It also modify the following arguments:; leftover: contain from expression that was not used to determine the leaf; final:; paran_level: number of un-matched open parenthesis; cast_queue: list of cast to be done; aliases: list of aliases used; Return <0 in case of failure; Return 0 if a leaf has been found; Return 2 if info about the TTree itself has been requested. Int_t DefinedVariable(TString& variable, Int_t& action); -*Check if name is in the list of Tree/Branch leaves; *-* ==================================================. This member function redefines the function in TFormula; If a leaf has a name corresponding to the argument name, then; returns a new code.; A TTreeFormula may contain more than one variable.; For each variable referenced, the pointers to the corresponding; branch and leaf is stored in the object arrays fBranches and fLeaves. name can be :; - Leaf_Name (simple variable or data member of a ClonesArray); - Branch_Name.Leaf_Name; - Branch_Name.Method_Name; - Leaf_Name[index]; - Branch_Name.Leaf_Name[index]; - Branch_Name.Leaf_Name[index1]; - Branch_Name.Leaf_Name[][index2]; - Branch_Name.Leaf_Name[index1][index2]; New additions:; - Branch_Name.Leaf_Name[OtherLeaf_Name]; - Branch_Name.Datamember_Name; - '.' can be replaced by '->'; and; - Branch_Name[index1].Leaf_Name[index2]; - Leaf_name[index].Action().OtherAction(param); - Leaf_name[index].Action()[val].OtherAction(param). The expected returns values are",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeFormula.html:20495,variab,variable,20495,root/html528/TTreeFormula.html,https://root.cern,https://root.cern/root/html528/TTreeFormula.html,4,['variab'],['variable']
Modifiability,"g to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; dependi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:184532,adapt,adapted,184532,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['adapt'],['adapted']
Modifiability,"g toolbar button, or by using Ctrl+F5 accelerator keys. This is identical to the command "".x macro.C"" in the root prompt command line.; Compiling Macros; The currently loaded macro can be compiled with ACLiC if you select Tools menu / Compile Macro; by clicking on the corresponding toolbar button, or by using Ctrl+F7 accelerator keys. This is identical to the command "".L macro.C++"" in the root prompt command line.; Interrupting a Running Macro; You can interrupt a running macro by selecting the Tools menu / Interrupt; by clicking on the corresponding toolbar button, or by using Shift+F5 accelerator keys.; Interface to CINT Interpreter; Any command entered in the Command combo box will be passed to the CINT interpreter. This combo box will keep the commands history and will allow you to re-execute the same commands during an editor session.; Keyboard Bindings; The following table lists the keyboard shortcuts and accelerator keys. Key: Action . Up Move cursor up. . Shift+Up Move cursor up and extend selection. . Down Move cursor down. . Shift+Down Move cursor down and extend selection. . Left Move cursor left. . Shift+Left Move cursor left and extend selection. . Right Move cursor right. . Shift+Right Move cursor right and extend selection. . Home Move cursor to begin of line. . Shift+Home Move cursor to begin of line and extend selection. . Ctrl+Home Move cursor to top of page. . End Move cursor to end of line. . Shift+End Move cursor to end of line and extend selection. . Ctrl+End Move cursor to end of page. . PgUp Move cursor up one page. . Shift+PgUp Move cursor up one page and extend selection. . PgDn Move cursor down one page. . Shift+PgDn Move cursor down one page and extend selection. . Delete Delete character after cursor, or text selection. . BackSpace Delete character before cursor, or text selection. . Ctrl+B Move cursor left. . Ctrl+D Delete character after cursor, or text selection. . Ctrl+E Move cursor to end of line. . Ctrl+H Delete character before cu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:3565,extend,extend,3565,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,1,['extend'],['extend']
Modifiability,"g validation sample. UInt_t CountLeafNodes(TMVA::Node* n = NULL); return the number of terminal nodes in the sub-tree below Node n. void DescendTree(TMVA::Node* n = NULL); descend a tree to find all its leaf nodes. void PruneNode(TMVA::DecisionTreeNode* node); prune away the subtree below the node. void PruneNodeInPlace(TMVA::DecisionTreeNode* node); prune a node temporaily (without actually deleting its decendants; which allows testing the pruned tree quality for many different; pruning stages without ""touching"" the tree. TMVA::Node* GetNode(ULong_t sequence, UInt_t depth); retrieve node from the tree. Its position (up to a maximal tree depth of 64); is coded as a sequence of left-right moves starting from the root, coded as; 0-1 bit patterns stored in the ""long-integer"" (i.e. 0:left ; 1:right. void GetRandomisedVariables(Bool_t* useVariable, UInt_t* variableMap, UInt_t& nVars). Double_t TrainNodeFast(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node); Decide how to split a node using one of the variables that gives; the best separation of signal/background. In order to do this, for each; variable a scan of the different cut values in a grid (grid = fNCuts) is; performed and the resulting separation gains are compared.; in addition to the individual variables, one can also ask for a fisher; discriminant being built out of (some) of the variables and used as a; possible multivariate split. std::vector<Double_t> GetFisherCoefficients(const TMVA::DecisionTree::EventConstList& eventSample, UInt_t nFisherVars, UInt_t* mapVarInFisher); calculate the fisher coefficients for the event sample and the variables used. Double_t TrainNodeFull(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node). TMVA::DecisionTreeNode* GetEventNode(const TMVA::Event& e) const; get the pointer to the leaf node where a particular event ends up in...; (used in gradient boosting). Double_t CheckEvent(const TMVA::Event* , Bool_t UseYes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:13336,variab,variables,13336,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,1,['variab'],['variables']
Modifiability,"g with ext. ;  ; TDocOutput * GetDocOutput () const;  ; TDocParser * GetDocParser () const;  ; THtml * GetHtml () const;  ; const char * GetName () const override;  Returns name of object. ;  ; void GetName (TString &name) const;  Get the full name, based on fName, fTitle, fDocParser's tag. ;  ; const char * GetOutputDir () const;  Get the directory for documentation output. ;  ; void SetCounter (Int_t count);  ; void SetParameters (const char *params);  Given a string containing parameters in params, we call AddParameter() for each of them. ;  ; void SetParser (TDocParser *parser);  Set the parser, and fDocOutput, fHtml from that. ;  ; void SetTag (const char *tag);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TDocDirective; Int_t fCounter;  ; TDocOutput * fDocOutput;  ; TDocParser * fDocParser;  ; THtml * fHtml;  ; TString fParameters;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TDocDirective.h>. Inheritance diagram for TDocHtmlDirective:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDocHtmlDirective(). TDocHtmlDirective::TDocHtmlDirective ; (; ). inline . Definition at line 85 of file TDocDirective.h. ◆ ~TDocHtmlDirective(). TDocHtmlDirective::~TDocHtmlDirective ; (; ). inlineoverride . Definition at line 86 of file TDocDirective.h. Member Function Documentation. ◆ AddLine(). void TDocHtmlDirective::AddLine ; (; const TSubString & ; line). overridevirtual . Add a line of HTML. ; Implements TDocDirective.; Definition at line 169 of file TDocDirective.cxx. ◆ Class(). static TClass * TDocHtmlDirective::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDocHtmlDirective::Class_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocHtmlDirective.html:12705,inherit,inherited,12705,doc/master/classTDocHtmlDirective.html,https://root.cern,https://root.cern/doc/master/classTDocHtmlDirective.html,2,['inherit'],['inherited']
Modifiability,"g with ext. ;  ; TDocOutput * GetDocOutput () const;  ; TDocParser * GetDocParser () const;  ; THtml * GetHtml () const;  ; const char * GetName () const override;  Returns name of object. ;  ; void GetName (TString &name) const;  Get the full name, based on fName, fTitle, fDocParser's tag. ;  ; const char * GetOutputDir () const;  Get the directory for documentation output. ;  ; void SetCounter (Int_t count);  ; void SetParameters (const char *params);  Given a string containing parameters in params, we call AddParameter() for each of them. ;  ; void SetParser (TDocParser *parser);  Set the parser, and fDocOutput, fHtml from that. ;  ; void SetTag (const char *tag);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TDocDirective; Int_t fCounter;  ; TDocOutput * fDocOutput;  ; TDocParser * fDocParser;  ; THtml * fHtml;  ; TString fParameters;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TDocDirective.h>. Inheritance diagram for TDocMacroDirective:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDocMacroDirective(). TDocMacroDirective::TDocMacroDirective ; (; ). inline . Definition at line 106 of file TDocDirective.h. ◆ ~TDocMacroDirective(). TDocMacroDirective::~TDocMacroDirective ; (; ). override . Destructor. ; Definition at line 251 of file TDocDirective.cxx. Member Function Documentation. ◆ AddLine(). void TDocMacroDirective::AddLine ; (; const TSubString & ; line). overridevirtual . Add a macro line. ; Lines ending on ""*HIDE*"" will be executed as part of the macro, but not shown in the source tab if the parameter source is supplied. ; Implements TDocDirective.; Definition at line 325 of file TDocDirective.cxx. ◆ AddParameter(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMacroDirective.html:13035,inherit,inherited,13035,doc/master/classTDocMacroDirective.html,https://root.cern,https://root.cern/doc/master/classTDocMacroDirective.html,2,['inherit'],['inherited']
Modifiability,"g!; Double_tfDpDsMomentum loss over distance; Bool_tTEveElement::fHighlighted!; TRefArrayTPointSet3D::fIdsUser-provided point identifications; Short_tTEveElement::fImpliedHighlighted!; Short_tTEveElement::fImpliedSelected!; Int_tfIndexReconstruction index; TArrayI*TEvePointSet::fIntIdsOptional array of integer ideices.; Int_tTEvePointSet::fIntIdsPerPointNumber of integer indices assigned to each point.; TEveElement::sLTI_tTEveElement::fItems! Set of list-tree-items.; Int_tfLabelSimulation label; Int_tfLastPMIdx!Last path-mark index tried in track-propagation.; Int_tTPolyMarker3D::fLastPointThe index of the last filled point; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tfLockPointsLock points that are currently in - do nothing in MakeTrack().; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTPolyMarker3D::fNNumber of allocated points; TStringTPolyMarker3D::fNameName of polymarker; Int_tTEveElement::fNumChildren!; TStringTPolyMarker3D::fOptionOptions; Bool_tTPointSet3D::fOwnIdsFlag specifying id-objects are owned by the point-set; TEveVectorDfPStarting momentum; Float_t*TPolyMarker3D::fP[3*fN] Array of X,Y,Z coordinates; TEveVectorDfPEndMomentum at the last point of extrapolation; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; TEveElement::List_tTEveElement::fParentsList of parents.; TEveTrack::vPathMark_tfPathMarksTEveVector of known points along the track; Int_tfPdgPDG code; Bool_tTEveElement::fPickable; TEveProjectab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrack.html:28579,variab,variable,28579,root/html602/TEveTrack.html,https://root.cern,https://root.cern/root/html602/TEveTrack.html,2,['variab'],['variable']
Modifiability,"g& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); static TClass*Class(); virtual TClass*IsA() const; RooSimWSTool::BuildConfig&operator=(const RooSimWSTool::BuildConfig&); voidrestrictBuild(const char* catName, const char* stateList); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. RooSimWSTool::BuildConfigBuildConfig(); voidinternalAddPdf(const char* pdfName, const char* miStateList, RooSimWSTool::SplitRule& sr). Data Members; protected:. RooCmdArg_conflProtocol; string_masterCatName; map<std::string,SplitRule>_pdfmap; map<std::string,std::string>_restr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr); Add prototype p.d.f pdfName to build configuration with associated split rules 'sr'. BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Construct build configuration from single prototype 'pdfName' and list of arguments; that can be passed to RooSimWSTool::build() method. This routine parses SplitParam(); SplitParamConstrained() and Restrict() arguments. BuildConfig(const RooArgSet& legacyBuildConfig); Constructor to make BuildConfig from legacy RooSimPdfBuilder configuration; Empty for now. void internalAddPdf(const char* pdfName, const char* miStateList, RooSimWSTool::SplitRule& sr); Internal routine to add prototype pdf 'pdfName' with list of associated master states 'miStateNameList; and split rules 'sr' to configuration. void restrictBuild(const char* catName, const char* stateList); Restrict b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSimWSTool__BuildConfig.html:5001,config,configuration,5001,root/html528/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html528/RooSimWSTool__BuildConfig.html,3,['config'],['configuration']
Modifiability,"g& arg6) const; 1600{; 1601 ; 1602 // Select the pdf-specific commands; 1603 RooCmdConfig pc(""RooAbsPdf::generate("" + std::string(GetName()) + "")"");; 1604 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1605 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1606 pc.defineInt(""extended"",""Extended"",0,0) ;; 1607 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1608 pc.defineDouble(""nEventsD"",""NumEventsD"",0,-1.) ;; 1609 pc.defineInt(""expectedData"",""ExpectedData"",0,0) ;; 1610 ; 1611 // Process and check varargs; 1612 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1613 if (!pc.ok(true)) {; 1614 return nullptr;; 1615 }; 1616 ; 1617 // Decode command line arguments; 1618 double nEvents = pc.getDouble(""nEventsD"") ;; 1619 if (nEvents<0) {; 1620 nEvents = pc.getInt(""nEvents"") ;; 1621 }; 1622 //bool verbose = pc.getInt(""verbose"") ;; 1623 bool extended = pc.getInt(""extended"") ;; 1624 bool expectedData = pc.getInt(""expectedData"") ;; 1625 const char* dsetName = pc.getString(""dsetName"") ;; 1626 ; 1627 if (extended) {; 1628 //nEvents = (nEvents==0?Int_t(expectedEvents(&whatVars)+0.5):nEvents) ;; 1629 nEvents = (nEvents==0 ? expectedEvents(&whatVars) :nEvents) ;; 1630 cxcoutI(Generation) << "" Extended mode active, number of events generated ("" << nEvents << "") is Poisson fluctuation on ""; 1631 << GetName() << ""::expectedEvents() = "" << nEvents << endl ;; 1632 // If Poisson fluctuation results in zero events, stop here; 1633 if (nEvents==0) {; 1634 return nullptr ;; 1635 }; 1636 } else if (nEvents==0) {; 1637 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1638 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1639 }; 1640 ; 1641 // Forward to appropriate implementation; 1642 auto data = generateBinned(whatVars,nEvents,expectedData,extended);; 1643 ; 1644 // Rename dataset to given name if supplied; 1645 if (dsetName && strlen(dsetName)>0) {; 1646 data->SetName(dsetName) ;; 1647 }; 1648 ; 1649 return data;; 1650}; 1651 ; 1652 ; 1653 ; 165",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:79531,extend,extended,79531,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['extend'],['extended']
Modifiability,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Mon Dec 7 13:48:03 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:10220,variab,variables,10220,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Mon Jul 4 15:23:08 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegrator1D.html:10328,variab,variables,10328,root/html530/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooIntegrator1D.html,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Sat Oct 9 06:58:30 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator1D.html:10236,variab,variables,10236,root/html528/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator1D.html,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Thu Nov 3 20:08:26 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooIntegrator1D.html:10328,variab,variables,10328,root/html532/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html532/RooIntegrator1D.html,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Tue Jun 2 15:31:38 2015 » Last generated: 2015-06-02 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooIntegrator1D.html:10884,variab,variables,10884,root/html604/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html604/RooIntegrator1D.html,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,"g& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. protected:. boolCheckDimension() const; boolCheckObjFunction() const; ROOT::Math::MinimTransformFunction*CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidSetFinalValues(const double* x); voidSetMinValue(double val). private:. ROOT::Math::BasicMinimizerBasicMinimizer(const ROOT::Math::BasicMinimizer&); ROOT::Math::BasicMinimizer&operator=(const ROOT::Math::BasicMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. map<unsigned int,std::pair<double,double> >fBoundsmap specifying the bound using as key the parameter index; unsigned intfDim; doublefMinVal; vector<std::string>fNames; const ROOT::Math::IMultiGenFunction*fObjFunc; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BasicMinimizer.html:6231,variab,variables,6231,root/html534/ROOT__Math__BasicMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BasicMinimizer.html,1,['variab'],['variables']
Modifiability,"g& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in cas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html:7754,variab,variable,7754,root/html534/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html,3,['variab'],['variable']
Modifiability,"g(), const RooCmdArg& arg3 = RooCmdArg()); Import a dataset (RooDataSet or RooDataHist) into the work space. The workspace will contain a copy of the data; The dataset and its variables can be renamed upon insertion with the options below. Accepted arguments. Rename(const char* suffix) -- Rename dataset upon insertion; RenameVariable(const char* inputName, const char* outputName) -- Change names of observables in dataset upon insertion. Bool_t defineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); Define a named RooArgSet with given constituents. If importMissing is true, any constituents; of aset that are not in the workspace will be imported, otherwise an error is returned; for missing components. Bool_t defineSet(const char* name, const char* contentList); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. Bool_t extendSet(const char* name, const char* newContents); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. const RooArgSet* set(const char* name); Return pointer to previously defined named set with given nmame; If no such set is found a null pointer is returned. Bool_t renameSet(const char* name, const char* newName); Rename set to a new name. Bool_t removeSet(const char* name); Remove a named set from the workspace. Bool_t startTransaction(); Open an import transaction operations. Returns kTRUE if successful, kFALSE; if there is already an ongoing transaction. Bool_t cancelTransaction(); Cancel an ongoing import transaction. All objects imported since startTransaction(); will be removed and the transaction will be terminated. Return kTRUE if cancel operation; succeeds, return kFALSE if there was no open transaction. Bool_t commitTransaction(); Commit an ongoing import transaction. Returns kTRUE if commit succeeded,; return kFALSE if there was no ongoing transaction. Bool_t importClassCode(TClass* theC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooWorkspace.html:15676,extend,extendSet,15676,root/html530/RooWorkspace.html,https://root.cern,https://root.cern/root/html530/RooWorkspace.html,2,['extend'],['extendSet']
Modifiability,"g(), const RooCmdArg& arg3 = RooCmdArg()); Import a dataset (RooDataSet or RooDataHist) into the work space. The workspace will contain a copy of the data; The dataset and its variables can be renamed upon insertion with the options below. Accepted arguments. Rename(const char* suffix) -- Rename dataset upon insertion; RenameVariable(const char* inputName, const char* outputName) -- Change names of observables in dataset upon insertion. Bool_t defineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); Define a named RooArgSet with given constituents. If importMissing is true, any constituents; of aset that are not in the workspace will be imported, otherwise an error is returned; for missing components. Bool_t defineSet(const char* name, const char* contentList); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. Bool_t extendSet(const char* name, const char* newContents); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. const RooArgSet* set(const char* name); Return pointer to previously defined named set with given nmame; If no such set is found a null pointer is returned. Bool_t startTransaction(); Open an import transaction operations. Returns kTRUE if successful, kFALSE; if there is already an ongoing transaction. Bool_t cancelTransaction(); Cancel an ongoing import transaction. All objects imported since startTransaction(); will be removed and the transaction will be terminated. Return kTRUE if cancel operation; succeeds, return kFALSE if there was no open transaction. Bool_t commitTransaction(); Commit an ongoing import transaction. Returns kTRUE if commit succeeded,; return kFALSE if there was no ongoing transaction. Bool_t importClassCode(TClass* theClass, Bool_t doReplace = kFALSE). Bool_t importClassCode(const char* pat = ""*"", Bool_t doReplace = kFALSE); Inport code of all classes in the workspace that h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooWorkspace.html:15516,extend,extendSet,15516,root/html528/RooWorkspace.html,https://root.cern,https://root.cern/root/html528/RooWorkspace.html,1,['extend'],['extendSet']
Modifiability,"g(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Create a reduced copy of this dataset. The caller takes ownership of the returned dataset. The following optional named arguments are accepted. SelectVars(const RooArgSet& vars) -- Only retain the listed observables in the output dataset; Cut(const char* expression) -- Only retain event surviving the given cut expression; Cut(const RooFormulaVar& expr) -- Only retain event surviving the given cut formula; CutRange(const char* name) -- Only retain events inside range with given name. Multiple CutRange; arguments may be given to select multiple ranges; EventRange(int lo, int hi) -- Only retain events with given sequential event numbers; Name(const char* name) -- Give specified name to output dataset; Title(const char* name) -- Give specified title to output dataset. RooAbsData* reduce(const char* cut); Create a subset of the data set by applying the given cut on the data points.; The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points.; The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. RooAbsData* reduce(const RooArgSet& varSubset, const char* cut = 0); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsData.html:15915,variab,variable,15915,root/html528/RooAbsData.html,https://root.cern,https://root.cern/root/html528/RooAbsData.html,6,['variab'],['variable']
Modifiability,"g(), const RooCmdArg& arg9 = RooCmdArg()); Import a dataset (RooDataSet or RooDataHist) into the work space. The workspace will contain a copy of the data; The dataset and its variables can be renamed upon insertion with the options below. Accepted arguments. Rename(const char* suffix) -- Rename dataset upon insertion; RenameVariable(const char* inputName, const char* outputName) -- Change names of observables in dataset upon insertion. Bool_t defineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); Define a named RooArgSet with given constituents. If importMissing is true, any constituents; of aset that are not in the workspace will be imported, otherwise an error is returned; for missing components. Bool_t defineSet(const char* name, const char* contentList); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. Bool_t extendSet(const char* name, const char* newContents); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. const RooArgSet* set(const char* name); Return pointer to previously defined named set with given nmame; If no such set is found a null pointer is returned. Bool_t renameSet(const char* name, const char* newName); Rename set to a new name. Bool_t removeSet(const char* name); Remove a named set from the workspace. Bool_t startTransaction(); Open an import transaction operations. Returns kTRUE if successful, kFALSE; if there is already an ongoing transaction. Bool_t cancelTransaction(); Cancel an ongoing import transaction. All objects imported since startTransaction(); will be removed and the transaction will be terminated. Return kTRUE if cancel operation; succeeds, return kFALSE if there was no open transaction. Bool_t commitTransaction(); Commit an ongoing import transaction. Returns kTRUE if commit succeeded,; return kFALSE if there was no ongoing transaction. Bool_t importClassCode(TClass* theC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:17695,extend,extendSet,17695,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,3,['extend'],['extendSet']
Modifiability,"g(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:9113,extend,extendedTerm,9113,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,10,['extend'],"['extended', 'extendedTerm']"
Modifiability,"g(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool ra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:8308,extend,extendedTerm,8308,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,14,['extend'],"['extended', 'extendedTerm']"
Modifiability,"g) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionServerFrame.html:20330,config,configuration,20330,root/html528/TSessionServerFrame.html,https://root.cern,https://root.cern/root/html528/TSessionServerFrame.html,4,['config'],['configuration']
Modifiability,"g); 1776 {; 1777 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1778 TConfWithFactor *conf = (TConfWithFactor *)config;; 1779 From temp;; 1780 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1781 iter = (char*)iter + config->fOffset;; 1782 end = (char*)end + config->fOffset;; 1783 for(; iter != end; iter = (char*)iter + incr ) {; 1784 buf.ReadWithFactor(&temp, conf->fFactor, conf->fXmin);; 1785 *(To*)( ((char*)iter) ) = (To)temp;; 1786 }; 1787 return 0;; 1788 }; 1789 };; 1790 ; 1791 template <typename From, typename To>; 1792 struct ConvertBasicType<NoFactorMarker<From>,To> {; 1793 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config); 1794 {; 1795 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1796 TConfNoFactor *conf = (TConfNoFactor *)config;; 1797 From temp;; 1798 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1799 iter = (char*)iter + config->fOffset;; 1800 end = (char*)end + config->fOffset;; 1801 for(; iter != end; iter = (char*)iter + incr ) {; 1802 buf.ReadWithNbits(&temp, conf->fNbits);; 1803 *(To*)( ((char*)iter) ) = (To)temp;; 1804 }; 1805 return 0;; 1806 }; 1807 };; 1808 ; 1809 template <typename T>; 1810 static INLINE_TEMPLATE_ARGS Int_t WriteBasicType(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config); 1811 {; 1812 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1813 iter = (char*)iter + config->fOffset;; 1814 end = (char*)end + config->fOffset;; 1815 for(; iter != end; iter = (char*)iter + incr ) {; 1816 T *x = (T*) ((char*) iter);; 1817 buf << *x;; 1818 }; 1819 return 0;; 1820 }; 1821 ; 1822 template <Int_t (*iter_action)(TBuffer&,void *,const TConfiguration*)>; 1823 static INLINE_TEMPLATE_ARGS Int_t ReadAction(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconfig, const TConfigu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:74814,config,config,74814,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,3,['config'],['config']
Modifiability,"g);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQCommand; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TQCommand * GetCommand ();  Return a command which is doing redo/undo action. ;  ;  Static Public Member Functions inherited from TList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSeqCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t ObjCompare (TObject *a, TObject *b);  Compare to objects in the collection. Use member Compare() of object a. ;  ; static void QSort (TObject **a, Int_t first, Int_t last);  Sort array of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, Int_t nBs, TObject ***b, Int_t first, Int_t last);  Sort array a of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, TObject **b, Int_t first, Int_t last);  ;  Static Public Member Functions inherited from TCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:19842,inherit,inherited,19842,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,2,['inherit'],['inherited']
Modifiability,"g* specialIntegratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumIntConfig* getIntegratorConfig() const; Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. RooNumIntConfig* getIntegratorConfig(); Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setIntegratorConfig(const RooNumIntConfig& config); Set the given integrator configuration as default numeric integration; configuration for this object. void setIntegratorConfig(); Remove the specialized numeric integration configuration associated; with this object. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function to force use of a given set of observables; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on the choice of normalization such as; RooAddPdf. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function to force use of a given normalization range; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on the choice of normalization such as; RooAddPdf. void setCacheCheck(Bool_t flag); Activate cache validation mode. Int_t getMaxVal(const RooArgSet& vars) const; Advertise capability to determine maximum value of function for given set of; observables. If no direct generator method is provided, this inf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:60624,config,config,60624,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,18,['config'],"['config', 'configuration']"
Modifiability,"g, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are the two TEventLists defining events; to be used during the neural net training.; Both the TTree and the TEventLists can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are the two TEventLists defining events; to be used during the neural net training.; Both the TTree and the TEventLists can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:19980,layers,layers,19980,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['layers'],['layers']
Modifiability,"g, and RooUniformBinning. ◆ highBoundFunc(). virtual RooAbsReal * RooAbsBinning::highBoundFunc ; (; ); const. inlinevirtual . Return pointer to RooAbsReal parameterized upper bound, if any. ; Reimplemented in RooParamBinning.; Definition at line 110 of file RooAbsBinning.h. ◆ insertHook(). virtual void RooAbsBinning::insertHook ; (; RooAbsRealLValue & ; ); const. inlinevirtual . Hook interface function to execute code upon insertion into a RooAbsRealLValue. ; Reimplemented in RooParamBinning.; Definition at line 118 of file RooAbsBinning.h. ◆ IsA(). TClass * RooAbsBinning::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooBinning, RooLinTransBinning, RooParamBinning, RooRangeBinning, and RooUniformBinning.; Definition at line 125 of file RooAbsBinning.h. ◆ isParameterized(). virtual bool RooAbsBinning::isParameterized ; (; ); const. inlinevirtual . Interface function. ; If true, min/max of binning is parameterized by external RooAbsReals. Default to false, unless overridden by a sub class. ; Reimplemented in RooParamBinning.; Definition at line 102 of file RooAbsBinning.h. ◆ isShareable(). virtual bool RooAbsBinning::isShareable ; (; ); const. inlinevirtual . If true (default), the range definition can be shared across clones of a RooRealVar. ; Reimplemented in RooParamBinning.; Definition at line 114 of file RooAbsBinning.h. ◆ isUniform(). virtual bool RooAbsBinning::isUniform ; (; ); const. inlinevirtual . Reimplemented in RooUniformBinning.; Definition at line 70 of file RooAbsBinning.h. ◆ lowBound(). virtual double RooAbsBinning::lowBound ; (; ); const. pure virtual . Implemented in RooBinning, RooLinTransBinning, RooParamBinning, RooRangeBinning, and RooUniformBinning. ◆ lowBoundFunc(). virtual RooAbsReal * RooAbsBinning::lowBoundFunc ; (; ); const. inlinevirtual . Return pointer to RooAbsReal parameterized lower bound, if any. ; Reimplemented in RooParamBinning.; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsBinning.html:21358,parameteriz,parameterized,21358,doc/master/classRooAbsBinning.html,https://root.cern,https://root.cern/doc/master/classRooAbsBinning.html,1,['parameteriz'],['parameterized']
Modifiability,"g, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoParallel(Int_t nodes, Bool_t accept = kFALSE, Bool_t random = kFALSE); Go in parallel mode with at most ""nodes"" slaves. Since the fSlaves; list is sorted by slave performace the active list will contain first; the most performant nodes. Returns the number of active slaves.; If random is TRUE, and nodes is less than the number of available workers,; a random selection is done.; Returns -1 in case of error. void ShowData(); List contents of the data directory in the sandbox.; This is the place where files produced by the client queries are kept. void ClearData(UInt_t what = kUnregistered, const char* dsname = 0); Remove files for the data directory.; The option 'what' can take the values:; kPurge remove all files and directories under '~/data'; kUnregistered remove only files not in registered datasets (default); kDataset remove files belonging to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:58957,sandbox,sandbox,58957,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['sandbox'],['sandbox']
Modifiability,"g, re-sampling or whatever you like, in the end it is nothing; else but applying ""random boostweights"" to each event. void AddWeightsXMLTo(void* parent) const. void ReadWeightsFromStream(istream& istr); read the state of the method from an input stream. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); return the MVA value (range [-1;1]) that classifies the; event.according to the majority vote from the total number of; decision trees; In the literature I found that people actually use the; weighted majority vote (using the boost weights) .. However I; did not see any improvement in doing so :(; --> this is currently switched off. void WriteMonitoringHistosToFile( void ); here we could write some histograms created during the processing; to the output file. vector< Double_t > GetVariableImportance(); return the relative variable importance, normalized to all; variables together having the importance 1. The importance in; evaluated as the total separation-gain that this variable had in; the decision trees (weighted by the number of events). Double_t GetVariableImportance(UInt_t ivar); return the variable importance. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". void ReadWeightsFromXML(void* ); {}. const std::vector<TMVA::IMethod*>& GetCommittee() const; accessors. { return fCommittee; }. const std::vector<Double_t>& GetBoostWeights() const; { return fBoostWeights; }. std::vector<IMethod*>& GetCommittee(); accessors. { return fCommittee; }. std::vector<Double_t>& GetBoostWeights(); { return fBoostWeights; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodCommittee.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCommittee.html:20436,variab,variable,20436,root/html528/TMVA__MethodCommittee.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCommittee.html,1,['variab'],['variable']
Modifiability,"g, re-sampling or whatever you like, in the end it is nothing; else but applying ""random boostweights"" to each event. void AddWeightsXMLTo(void* parent) const. void ReadWeightsFromStream(istream& istr); read the state of the method from an input stream. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); return the MVA value (range [-1;1]) that classifies the; event.according to the majority vote from the total number of; decision trees; In the literature I found that people actually use the; weighted majority vote (using the boost weights) .. However I; did not see any improvement in doing so :(; --> this is currently switched off. void WriteMonitoringHistosToFile( void ); here we could write some histograms created during the processing; to the output file. vector< Double_t > GetVariableImportance(); return the relative variable importance, normalized to all; variables together having the importance 1. The importance in; evaluated as the total separation-gain that this variable had in; the decision trees (weighted by the number of events). Double_t GetVariableImportance(UInt_t ivar); return the variable importance. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". void ReadWeightsFromXML(void* ); {}. const std::vector<TMVA::IMethod*>& GetCommittee() const; accessors. { return fCommittee; }. const std::vector<Double_t>& GetBoostWeights() const; { return fBoostWeights; }. std::vector<IMethod*>& GetCommittee(); accessors. { return fCommittee; }. std::vector<Double_t>& GetBoostWeights(); { return fBoostWeights; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodCommittee.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodCommittee.html:21056,variab,variable,21056,root/html530/TMVA__MethodCommittee.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodCommittee.html,1,['variab'],['variable']
Modifiability,"g, re-sampling or whatever you like, in the end it is nothing; else but applying ""random boostweights"" to each event. void AddWeightsXMLTo(void* parent) const. void ReadWeightsFromStream(istream& istr); read the state of the method from an input stream. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); return the MVA value (range [-1;1]) that classifies the; event.according to the majority vote from the total number of; decision trees; In the literature I found that people actually use the; weighted majority vote (using the boost weights) .. However I; did not see any improvement in doing so :(; --> this is currently switched off. void WriteMonitoringHistosToFile( void ); here we could write some histograms created during the processing; to the output file. vector< Double_t > GetVariableImportance(); return the relative variable importance, normalized to all; variables together having the importance 1. The importance in; evaluated as the total separation-gain that this variable had in; the decision trees (weighted by the number of events). Double_t GetVariableImportance(UInt_t ivar); return the variable importance. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". void ReadWeightsFromXML(void* ); {}. const std::vector<TMVA::IMethod*>& GetCommittee() const; accessors. { return fCommittee; }. const std::vector<Double_t>& GetBoostWeights() const; { return fBoostWeights; }. std::vector<IMethod*>& GetCommittee(); accessors. { return fCommittee; }. std::vector<Double_t>& GetBoostWeights(); { return fBoostWeights; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodCommittee.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodCommittee.html:21056,variab,variable,21056,root/html532/TMVA__MethodCommittee.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodCommittee.html,1,['variab'],['variable']
Modifiability,"g,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& b); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction3Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Thu Sep 23 19:58:53 2010 » Last generated: 2010-09-23 19:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCFunction3Binding_double_unsigned_int_double_double_.html:34502,variab,variable,34502,root/html528/RooCFunction3Binding_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html528/RooCFunction3Binding_double_unsigned_int_double_double_.html,1,['variab'],['variable']
Modifiability,"g,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenericPdf(const char* name, const char* title, const RooArgList& dependents); Constructor with formula expression and list of input variables. RooGenericPdf(const char* name, const char* title, const char* formula, const RooArgList& dependents); Constructor with a name, title, formula expression and a list of variables. RooGenericPdf(const RooGenericPdf& other, const char* name = 0); Copy constructor. ~RooGenericPdf(); Destructor. RooFormula& formula() const. Double_t evaluate() const; Calculate current value of this object. Bool_t setFormula(const char* formula); Change formula expression to given expression. Bool_t isValidReal(Double_t value, Bool_t printError) const; Check if given value is valid. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Propagate server changes to embedded formula object. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. void printMetaArgs(ostream& os) const; Add formula expression as meta argument in printing interface. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGenericPdf.html:46011,variab,variables,46011,root/html602/RooGenericPdf.html,https://root.cern,https://root.cern/root/html602/RooGenericPdf.html,2,['variab'],['variables']
Modifiability,"g,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction1Ref<double,double>funcFunction pointer reference; RooRealProxyxArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction1Ref<VO,VI> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registered name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction1Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Jun 30 14:31:18 2015 » Last generated: 2015-06-30 14:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction1PdfBinding_double_double_.html:46417,variab,variable,46417,root/html602/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction1PdfBinding_double_double_.html,1,['variab'],['variable']
Modifiability,"g->fCopyIterator(&iterator,start);; 2395 void *addr;; 2396 while( (addr = next(iter,end)) ) {; 2397 To *x = (To*)( ((char*)addr) + offset );; 2398 *x = (To)(*items);; 2399 ++items;; 2400 }; 2401 if (iter != &iterator[0]) {; 2402 loopconfig->fDeleteIterator(iter);; 2403 }; 2404 }; 2405 };; 2406 ; 2407 template <typename From, typename To>; 2408 struct Numeric {; 2409 static void ConvertAction(From *items, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration * /* config */); 2410 {; 2411 // The difference with ConvertAction is that we can modify the start; 2412 // iterator and skip the copy. We also never have an offset.; 2413 ; 2414 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2415 Next_t next = loopconfig->fNext;; 2416 ; 2417 void *iter = start;; 2418 void *addr;; 2419 while( (addr = next(iter,end)) ) {; 2420 To *x = (To*)(addr);; 2421 *x = (To)(*items);; 2422 ++items;; 2423 }; 2424 }; 2425 };; 2426 ; 2427 template <typename From, typename To, template <typename F, typename T> class Converter = Generic >; 2428 struct ConvertBasicType {; 2429 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config); 2430 {; 2431 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2432 ; 2433 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2434 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2435 Int_t nvalues = proxy->Size();; 2436 ; 2437 From *items = new From[nvalues];; 2438 buf.ReadFastArray(items, nvalues);; 2439 Converter<From,To>::ConvertAction(items,start,end,loopconfig,config);; 2440 delete [] items;; 2441 return 0;; 2442 }; 2443 };; 2444 ; 2445 template <typename To>; 2446 struct ConvertBasicType<BitsMarker, To, Generic> {; 2447 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config); 2448 {; 2449 // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:98282,config,config,98282,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['config'],['config']
Modifiability,"g->fOldClass);; 1965 ; 1966 std::vector<double> *const vec = (std::vector<double>*)(((char*)addr)+config->fOffset);; 1967 Int_t nvalues;; 1968 buf.ReadInt(nvalues);; 1969 vec->resize(nvalues);; 1970 ; 1971#ifdef R__VISUAL_CPLUSPLUS; 1972 if (nvalues <= 0) {; 1973 buf.CheckByteCount(start,count,config->fTypeName);; 1974 return 0;; 1975 }; 1976#endif; 1977 double *begin = &(*vec->begin());; 1978 buf.ReadFastArrayDouble32(begin, nvalues);; 1979 ; 1980 buf.CheckByteCount(start,count,config->fTypeName);; 1981 return 0;; 1982 }; 1983 ; 1984 template <typename From, typename To>; 1985 struct ConvertCollectionBasicType {; 1986 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *addr, const TConfiguration *conf); 1987 {; 1988 // Collection of numbers. Memberwise or not, it is all the same.; 1989 ; 1990 TConfigSTL *config = (TConfigSTL*)conf;; 1991 UInt_t start, count;; 1992 /* Version_t vers = */ buf.ReadVersion(&start, &count, config->fOldClass);; 1993 ; 1994 std::vector<To> *const vec = (std::vector<To>*)(((char*)addr)+config->fOffset);; 1995 Int_t nvalues;; 1996 buf.ReadInt(nvalues);; 1997 vec->resize(nvalues);; 1998 ; 1999 From *temp = new From[nvalues];; 2000 buf.ReadFastArray(temp, nvalues);; 2001 for(Int_t ind = 0; ind < nvalues; ++ind) {; 2002 (*vec)[ind] = (To)temp[ind];; 2003 }; 2004 delete [] temp;; 2005 ; 2006 buf.CheckByteCount(start,count,config->fTypeName);; 2007 return 0;; 2008 }; 2009 };; 2010 ; 2011 template <typename From, typename To>; 2012 struct ConvertCollectionBasicType<NoFactorMarker<From>,To> {; 2013 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *addr, const TConfiguration *conf); 2014 {; 2015 // Collection of numbers. Memberwise or not, it is all the same.; 2016 ; 2017 TConfigSTL *config = (TConfigSTL*)conf;; 2018 UInt_t start, count;; 2019 /* Version_t vers = */ buf.ReadVersion(&start, &count, config->fOldClass);; 2020 ; 2021 std::vector<To> *const vec = (std::vector<To>*)(((char*)addr)+config->fOffset);; 2022 Int_t nvalues;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:82664,config,config,82664,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,2,['config'],['config']
Modifiability,g. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; REvePointSelectorConsumer * fConsumer {nullptr};  ; TList fInputList;  ; TString fSelection;  ; TTree * fSelectTree {nullptr};  ; TString fSubIdExp;  ; Int_t fSubIdNum;  ; TString fVarexp;  ;  Protected Attributes inherited from TSelectorDraw; Int_t fAction;  ! Action type ;  ; bool fCleanElist;  True if original Tree elist must be saved. ;  ; Long64_t fCurrentSubEntry;  Current subentry when fSelectMultiple is true. Used to fill TEntryListArray. ;  ; Int_t fDimension;  Dimension of the current expression. ;  ; Long64_t fDraw;  ! Last entry loop number when object was drawn ;  ; Int_t fForceRead;  Force Read flag. ;  ; TTreeFormulaManager * fManager;  Pointer to the formula manager. ;  ; Int_t fMultiplicity;  Indicator of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:15140,variab,variability,15140,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,1,['variab'],['variability']
Modifiability,"g. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ; virtual void CompleteWSSend (UInt_t);  Method called when multi-threaded send operation is completed. ;  ; virtual std::string GetCodeVersion ();  Method generate extra suffix for all kinds of loaded code. ;  ; virtual Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &);  Method used to accept or reject root_batch_holder.js request. ;  ; virtual void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg);  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; Int_t CompleteSend (std::shared_ptr< THttpWSEngine > &engine);  Complete current send operation. ;  ; std::shared_ptr< THttpWSEngine > FindEngine (UInt_t id, Bool_t book_send=kFALSE);  Find websocket connection handle with given id If book_send parameter specified, have to book send operation under the mutex. ;  ; Bool_t HandleWS (std::shared_ptr< THttpCallArg > &arg);  Process request to websocket Different kind of requests coded into THttpCallArg::Method: ;  ; Int_t PerformSend (std::shared_ptr< THttpWSEngine > engine);  Perform send operation, stored in buffer. ;  ; void RemoveEngine (std::shared_ptr< THttpWSEngine > &engine, Bool_t terminate=kFALSE);  Remove and destroy WS connection. ;  ; Int_t RunSendingThrd (std::shared_ptr< THttpWSEngine > engine);  Send data stored in the buffer. ;  . Private Attributes; Bool_t fDisabled {kFALSE};",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpWSHandler.html:14207,inherit,inherited,14207,doc/master/classTHttpWSHandler.html,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html,1,['inherit'],['inherited']
Modifiability,"g. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooAbsProxy; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; const char * desc;  ; const char RooAbsArg Bool bool bool desc;  ; const char RooAbsArg * owner;  ; const char RooAbsArg Bool bool bool owner;  ; const char RooAbsArg Bool bool bool proxyOwnsArg: RooArgProxy(theName;  ; const char RooAbsArg Bool bool shapeServer;  ; const char RooAbsArg Bool bool bool shapeServer;  ; const char RooAbsArg Bool valueServer;  ; const char RooAbsArg Bool bool bool valueServer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooArgProxy; virtual void changeDataSet (const RooArgSet *newNormSet);  Change the normalization set that should be offered to the content objects getVal() when evaluated. ;  ; bool changePointer (const RooAbsCollection &newServerSet, bool nameChange=false, bool factoryInitMode=false) override;  Change prox",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:18896,inherit,inherited,18896,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['inherit'],['inherited']
Modifiability,"g. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t fAngle;  Arrow opening angle (degrees) ;  ; Float_t fArrowSize;  Arrow Size. ;  ; TString fOption;  Arrow shapes. ;  ;  Protected Attributes inherited from TLine; Double_t fX1 {0};  X of 1st point. ;  ; Double_t fX2 {0};  X of 2nd point. ;  ; Double_t fY1 {0};  Y of 1st point. ;  ; Double_t fY2 {0};  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Static Protected Attributes; static Float_t fgDefaultAngle = 60;  Default Arrow opening angle (degrees) ;  ; static Float_t fgDefaultArrowSize = 0.05;  Default Arrow Size. ;  ; static TString fgDefaultOption = "">"";  Default Arrow shapes. ;  . Additional Inherited Members;  Public Types inherited from TLine; enum  { kLineNDC = (1ULL << ( 14 )); , kVertical = (1ULL << ( 15 )); , kHorizontal = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x0400",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrow.html:18380,inherit,inherited,18380,doc/master/classTArrow.html,https://root.cern,https://root.cern/doc/master/classTArrow.html,1,['inherit'],['inherited']
Modifiability,"g. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; std::map< TString, ExpensiveObject * > _map;  ; Int_t _nextUID = 0;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <RooExpensiveObjectCache.h>. Inheritance diagram for RooExpensiveObjectCache:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooExpensiveObjectCache() [1/2]. RooExpensiveObjectCache::RooExpensiveObjectCache ; (; ). inline . Definition at line 27 of file RooExpensiveObjectCache.h. ◆ RooExpensiveObjectCache() [2/2]. RooExpensiveObjectCache::RooExpensiveObjectCache ; (; const RooExpensiveObjectCache & ; other). inline . Definition at line 28 of file RooExpensiveObjectCache.h. ◆ ~RooExpensiveObjectCache(). RooExpensiveObjectCache::~RooExpensiveObjectCache ; (; ). override . Destructor. ; Definition at line 45 of file RooExpensiveObjectCache.cxx. Member Function Documentation. ◆ Class(). static TClass * RooExpensiveObjectCache:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExpensiveObjectCache.html:11293,inherit,inherited,11293,doc/master/classRooExpensiveObjectCache.html,https://root.cern,https://root.cern/doc/master/classRooExpensiveObjectCache.html,2,['inherit'],['inherited']
Modifiability,"g. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool canBeAdded (const RooAbsArg &arg, bool silent) const override;  Determine whether it's possible to add a given RooAbsArg to the collection or not. ;  ; bool checkForDup (const RooAbsArg &arg, bool silent) const;  Check if element with var's name is already in set. ;  ;  Protected Member Functions inherited from RooAbsCollection; void clearStructureTags ();  ; void deleteList ();  Delete contents of the list. ;  ; void makeStructureTag ();  ; void makeTypedStructureTag ();  ; TNamed * structureTag ();  ; TNamed * typedStructureTag ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; template<class Arg_t > ; void processArg (Arg_t &&arg);  ; void processArg (const char *name);  ; void processArg (const RooAbsArg &arg);  ; void processArg (const RooAbsArg *arg);  ; void processArg (const RooAbsCollection &coll);  ; void processArg (const RooArgList &list);  ; void processArg (double value);  ; void processArg (RooAbsArg *var);  ; void processArg (RooAbsCollection &&coll);  ; template<typename... Args_t> ; void processArgs (Args_t &&... args);  . Additional Inherited Members;  Public Types inherited from RooAbsCollection; using const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgSet.html:27332,inherit,inherited,27332,doc/master/classRooArgSet.html,https://root.cern,https://root.cern/doc/master/classRooArgSet.html,1,['inherit'],['inherited']
Modifiability,"g. ;  ; void ImportClusterRanges (TTree *fromtree);  Appends the cluster range information stored in 'fromtree' to this tree, including the value of fAutoFlush. ;  ; virtual void KeepCircular ();  Keep a maximum of fMaxEntries in memory. ;  ; void MoveReadCache (TFile *src, TDirectory *dir);  Move a cache from a file to the current file in dir. ;  ; Int_t SetBranchAddressImp (TBranch *branch, void *addr, TBranch **ptr);  Change branch address, dealing with clone trees properly. ;  ; Int_t SetCacheSizeAux (bool autocache=true, Long64_t cacheSize=0);  Set the size of the file cache and create it if possible. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t * fArgs;  ! [fNvar] Array of variables ;  ; Int_t fNvar;  Number of columns. ;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of aliases for expressions based on the tree branches. ;  ; std::atomic< UInt_t > fAllocationCount {0};  indicates basket should be resized to exact memory usage, but causes significant ;  ; Long64_t fAutoFlush;  Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ;  ; Long64_t fAutoSave;  Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ;  ; TObjArray fBranches;  List of Branches. ;  ; TBranchRef * fBranchRef;  Branch supporting the TRefTable (if any) ;  ; bool fCacheDoAutoInit;  ! true if cache auto creation or resize check is needed ;  ; bool fCacheDoClusterPrefetch;  ! true if cache is prefetching whole clusters ;  ; Long64_t fCacheSize;  ! Maximum size of file buffers ;  ; bool fCacheUserSet;  ! true if the cache setting was explicitly given by user ;  ; Long64_t fChainOffset;  ! Offset of 1st entry of this Tree in a TChain ;  ; TList * fClones;  ! List of cloned trees which share our addresse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:41855,inherit,inherited,41855,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,1,['inherit'],['inherited']
Modifiability,"g. RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor with function binding, definition of integration range and configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of integrator with given function and configuration. Needed by RooNumIntFactory. void initialize(const RooAbsFunc* function = 0); Initialize the integrator, construct and initialize subintegrators. ~RooImproperIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check if the limits are valid. For this integrator all limit configurations; are valid, but if the limits change between two calculate() calls it; may be necessary to reconfigure (e.g. if an open ended range becomes; a closed range. Double_t integral(const Double_t* yvec = 0); Calculate the integral at the given parameter values of the function binding. RooImproperIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kTRUE ; }. LimitsCase limitsCase() const. » Last changed: Tue Jun 2 15:31:33 2015 » Last generated: 2015-06-02 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooImproperIntegrator1D.html:9776,config,configurations,9776,root/html604/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html604/RooImproperIntegrator1D.html,1,['config'],['configurations']
Modifiability,"g...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction2PdfBinding< VO, VI1, VI2 > Class Template Reference. ; template<class VO, class VI1, class VI2>; class RooCFunction2PdfBinding< VO, VI1, VI2 >; Definition at line 295 of file RooCFunction2Binding.h. Public Member Functions;  RooCFunction2PdfBinding ();  ;  RooCFunction2PdfBinding (const char *name, const char *title, VO(*_func)(VI1, VI2), RooAbsReal &_x, RooAbsReal &_y);  ;  RooCFunction2PdfBinding (const RooCFunction2PdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extend",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2PdfBinding.html:1154,inherit,inherited,1154,doc/master/classRooCFunction2PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2PdfBinding.html,1,['inherit'],['inherited']
Modifiability,"g...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMatrixTSym< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TMatrixTSym< Element >TMatrixTSym. ; Template class of a symmetric matrix in the linear algebra package.; See the Matrix Linear Algebra page for the documentation of the linear algebra package; Note that in this implementation both matrix element m[i][j] and m[j][i] are updated and stored in memory. However, when making the object persistent only the upper right triangle is stored. ; Definition at line 36 of file TMatrixTSym.h. Public Types; enum  { kWorkMax = 100; };  ; enum  EMatrixCreatorsOp1 { ;   kZero; , kUnit; , kTransposed; , kInverted; , ;   kAtA. };  ; enum  EMatrixCreatorsOp2 { kPlus; , kMinus; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMatrixTSym ();  ;  TMatrixTSym (const TMatrixTSym< Element > &a, EMatrixCreatorsOp2 op, const TMatrixTSym< Element > &b);  ;  TMatrixTSym (const TMatrixTSym< Element > &another);  ; template<class Element2 > ;  TMatrixTSym (const TMatrixTSym< Element2 > &another);  ;  TMatrixTSym (const TMatrixTSymLazy< Element > &lazy_constructor);  ;  TMatrixTSym (EMatrixCreatorsOp1 op, const TMatrixT< Element ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSym.html:1057,inherit,inherited,1057,doc/master/classTMatrixTSym.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html,1,['inherit'],['inherited']
Modifiability,"g.NPar();; 83 for (unsigned int i = 0; i < npar; ++i ) {; 84 const ParameterSettings & par = fconfig.ParSettings(i);; 85 fParams[i] = par.Value();; 86 fErrors[i] = par.StepSize();; 87 fParNames[i] = par.Name();; 88 if (par.IsFixed() ) fFixedParams[i] = true;; 89 else fNFree++;; 90 if (par.IsBound() ) {; 91 double lower = (par.HasLowerLimit()) ? par.LowerLimit() : - std::numeric_limits<double>::infinity() ;; 92 double upper = (par.HasUpperLimit()) ? par.UpperLimit() : std::numeric_limits<double>::infinity() ;; 93 fBoundParams[i] = fParamBounds.size();; 94 fParamBounds.push_back(std::make_pair(lower,upper));; 95 }; 96 }; 97 std::cout << ""create fit result from config - nfree "" << fNFree << std::endl;; 98}; 99 ; 100void FitResult::FillResult(const std::shared_ptr<ROOT::Math::Minimizer> & min, const FitConfig & fconfig, const std::shared_ptr<IModelFunction> & func,; 101 bool isValid, unsigned int sizeOfData, int fitType, const ROOT::Math::IMultiGenFunction * chi2func, unsigned int ncalls ); 102{; 103 // Fill the FitResult after minimization using result from Minimizers; 104 ; 105 // minimizer must exist; 106 assert(min);; 107 ; 108 fValid = isValid;; 109 fNFree= min->NFree();; 110 fNCalls = min->NCalls();; 111 fStatus = min->Status();; 112 fCovStatus= min->CovMatrixStatus();; 113 fVal = min->MinValue();; 114 fEdm = min->Edm();; 115 ; 116 fMinimizer= min;; 117 fFitFunc = func;; 118 ; 119 fMinimType = fconfig.MinimizerName();; 120 ; 121 // replace ncalls if minimizer does not support it (they are taken then from the FitMethodFunction); 122 if (fNCalls == 0) fNCalls = ncalls;; 123 ; 124 const unsigned int npar = min->NDim();; 125 if (npar == 0) return;; 126 ; 127 if (min->X() ); 128 fParams = std::vector<double>(min->X(), min->X() + npar);; 129 else {; 130 // case minimizer does not provide minimum values (it failed) take from configuration; 131 fParams.resize(npar);; 132 for (unsigned int i = 0; i < npar; ++i ) {; 133 fParams[i] = ( fconfig.ParSettings(i).Value() );; 134 }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:3186,config,config,3186,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,1,['config'],['config']
Modifiability,"g.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Data and categories: tools for manipulation of (un)binned datasets . ; from __future__ import print_function; import ROOT; import math; ; # WVE Add reduction by range; ; # Binned (RooDataHist) and unbinned datasets (RooDataSet) share; # many properties and inherit from a common abstract base class; # (RooAbsData), provides an interface for all operations; # that can be performed regardless of the data format; ; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); y = ROOT.RooRealVar(""y"", ""y"", 0, 40); c = ROOT.RooCategory(""c"", ""c""); c.defineType(""Plus"", +1); c.defineType(""Minus"", -1); ; # Basic operations on unbinned datasetss; # --------------------------------------------------------------; ; # ROOT.RooDataSet is an unbinned dataset (a collection of points in; # N-dimensional space); d = ROOT.RooDataSet(""d"", ""d"", {x, y, c}); ; # Unlike ROOT.RooAbsArgs (ROOT.RooAbsPdf, ROOT.RooFormulaVar,....) datasets are not attached to; # the variables they are constructed from. Instead they are attached to an internal; # clone of the supplied set of arguments; ; # Fill d with dummy values; for i in range(1000):; x.setVal(i / 50 - 10); y.setVal(math.sqrt(1.0 * i)); if i % 2:; c.setLabel(""Plus""); else:; c.setLabel(""Minus""); ; # We must explicitly refer to x,y, here to pass the values because; # d is not linked to them (as explained above); if i < 3:; print(x, y, c); print(type(x)); d.add({x, y, c}); ; d.Print(""v""); print(""""); ; # The get() function returns a pointer to the internal copy of the RooArgSet(x,y,c); # supplied in the constructor; row = d.get(); row.Print(""v""); print(""""); ; # Get with an argument loads a specific data point in row and returns; # a pointer to row argset. get() always returns the same pointer, unless; # an invalid row number is specified. In that case a null ptr is returned; d.get(900).Print(""v""); print(""""); ; # Reducing, appending and merging; # ----------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf402__datahandling_8py.html:1175,variab,variables,1175,doc/master/rf402__datahandling_8py.html,https://root.cern,https://root.cern/doc/master/rf402__datahandling_8py.html,1,['variab'],['variables']
Modifiability,"g3path) overrideTGeoPaintervirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBombFactors(Double_t bombx=1.3, Double_t bomby=1.3, Double_t bombz=1.3, Double_t bombr=1.3) overrideTGeoPaintervirtual; SetCheckedNode(TGeoNode *node) overrideTGeoPaintervirtual; SetClippingShape(TGeoShape *shape) overrideTGeoPainterinlinevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetExplodedView(Int_t iopt=0) overrideTGeoPaintervirtual; SetGeoManager(TGeoManager *geom) overrideTGeoPainterinlinevirtual; SetIteratorPlugin(TGeoIteratorPlugin *plugin) overrideTGeoPainterinlinevirtual; SetNmeshPoints(Int_t npoints) overrideTGeoPaintervirtual; SetNsegments(Int_t nseg=20) overrideTGeoPaintervirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetPainter(const TVirtualGeoPainter *painter)TVirtualGeoPainterstatic; SetRaytracing(Bool_t flag=kTRUE) overrideTGeoPainterinlinevirtual; SetTopVisible(Bool_t vis=kTRUE) overrideTGeoPaintervirtual; SetTopVolume(TGeoVolume *vol) overrideTGeoPainterinlinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVisLevel(Int_t level=3) overrideTGeoPaintervirtual; SetVisOption(Int_t option=0) overrideTGeoPaintervirtual; ShapeDistancetoPrimitive(const TGeoShape *shape, Int_t numpoints, Int_t px, Int_t py) const overrideTGeoPaintervirtual; Streamer(TBuffer &) overrideTVirtualGeoPaintervirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TVirtualGeoPainterinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; Test(Int_t npoints, Option_t *option) overrideTGeoPaintervirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TestOverlaps(const char *path) overrideTGeoPaintervirtual; TestVoxels(TGeoVolume *vol) overrideTGeoPaintervirtual; TGeoPainter(TGeoManager *manager)TGeoPainter; TObject()T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter-members.html:11710,plugin,plugin,11710,doc/master/classTGeoPainter-members.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter-members.html,1,['plugin'],['plugin']
Modifiability,"g64_t jFirst=0);  ; void SetNWorkers (unsigned n);  . Private Types; enum class  ETask : unsigned char { kNoTask; , kProcByRange; , kProcByFile; };  A collection of the types of tasks that TTreeProcessorMP can execute. More...;  ; template<typename F , typename... Args> ; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; void FixLists (std::vector< TObject * > &lists);  Fix list of lists before merging (to avoid errors about duplicated objects) ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:9213,inherit,inherited,9213,doc/v632/classROOT_1_1TTreeProcessorMP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html,2,['inherit'],['inherited']
Modifiability,"g64_t pos);  Read Zip64 end of central directory record. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fComment;  Archive comment. ;  ; Long64_t fDirOffset;  Central directory offset (from the beginning of the archive) ;  ; Long64_t fDirPos;  Central directory position. ;  ; Long64_t fDirSize;  Central directory size. ;  ;  Protected Attributes inherited from TArchiveFile; TString fArchiveName;  Archive file name. ;  ; TArchiveMember * fCurMember;  Current archive member. ;  ; TFile * fFile;  File stream used to access the archive. ;  ; Int_t fMemberIndex;  Index of sub-file in archive. ;  ; TString fMemberName;  Sub-file name. ;  ; TObjArray * fMembers;  Members in this archive. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Protected Member Functions inherited from TArchiveFile; static Bool_t ParseUrl (const char *url, TString &archive, TString &member, TString &type);  Try to determine if url contains an anchor specifying an archive member. ;  . #include <TZIPFile.h>. Inheritance diagram for TZIPFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EZIPConstants.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPFile.html:18089,inherit,inherited,18089,doc/master/classTZIPFile.html,https://root.cern,https://root.cern/doc/master/classTZIPFile.html,1,['inherit'],['inherited']
Modifiability,"g64_tfTotBytesTotal number of bytes in all leaves before compression; TTree*fTree! Pointer to Tree header; Int_tfWriteBasketLast basket number written; Long64_tfZipBytesTotal number of bytes in all leaves after compression; static Int_tfgCount! branch counter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranch(); Default constructor. Used for I/O by default. TBranch(TTree* tree, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1); Create a Branch*-*-; *-* =====================. * address is the address of the first item of a structure.; * leaflist is the concatenation of all the variable names and types; separated by a colon character :; The variable name and the variable type are separated by a slash (/).; The variable type may be 0,1 or 2 characters. If no type is given,; the type of the variable is assumed to be the same as the previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t). By default, a variable will be copied to the buffer with the number of; bytes specified in the type descriptor character. However, if the type; consists of 2 characters, the second character is an integer that; specifies the number of bytes to be used when copying the variable; to the output buffer. Example:; X ; variable X, type Float_t; Y/I : variable Y, type Int_t; Y/I2 ; variable Y, type Int_t converted to a 16 bits integ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranch.html:12232,variab,variable,12232,root/html528/TBranch.html,https://root.cern,https://root.cern/root/html528/TBranch.html,2,['variab'],['variable']
Modifiability,"g8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; virtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:5105,extend,extendedTerm,5105,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,2,['extend'],['extendedTerm']
Modifiability,"g::SetDefaultMinimizerstatic void SetDefaultMinimizer(const char *type, const char *algo=nullptr)static function to control default minimizer type and algorithmDefinition FitConfig.cxx:252; ROOT::Fit::FitConfig::SetFromFitResultvoid SetFromFitResult(const FitResult &rhs)Definition FitConfig.cxx:80; ROOT::Fit::FitConfig::CreateParamsSettingsvoid CreateParamsSettings(const ROOT::Math::IParamMultiFunctionTempl< T > &func)set the parameter settings from a model function.Definition FitConfig.h:109; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::fWeightCorrbool fWeightCorrapply correction to errors for weights fitsDefinition FitConfig.h:263; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::fUpdateAfterFitbool fUpdateAfterFitupdate the configuration after a fit using the resultDefinition FitConfig.h:262; ROOT::Fit::FitConfig::operator=FitConfig & operator=(const FitConfig &rhs)Definition FitConfig.cxx:62; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitConfig::MinosErrorsbool MinosErrors() constdo minos errors analysis on the parametersDefinition FitConfig.h:208; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Math::IBaseParam::Parametersvirtual const double * Parameters() const =0Access the parameter values.; ROOT::Math::IBaseParam::ParameterNamevirtual std::string ParameterName(unsigned int i) constReturn ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitConfig_8h_source.html:15447,config,configuration,15447,doc/master/FitConfig_8h_source.html,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html,1,['config'],['configuration']
Modifiability,"g::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,unsigned int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html:35813,config,configuration,35813,root/html534/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html,https://root.cern,https://root.cern/root/html534/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html,1,['config'],['configuration']
Modifiability,"g::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,unsigned int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html:35813,config,configuration,35813,root/html534/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html,1,['config'],['configuration']
Modifiability,"g::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const. RooDataHist* GetAsDataHist(RooArgSet* whichVars = NULL) const. RooDataHist* GetAsDataHist(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const. THnSparse* GetAsSparseHist(RooAbsCollection* whichVars = NULL) const. Double_t NLL(Int_t i) const; kbelasco: how to do this?; fChain->get(i);; return fNLL->getVal();. Double_t NLL() const; kbelasco: how to do this?; fChain->get();; return fNLL->getVal();. Double_t Weight() const. Double_t Weight(Int_t i) const. MarkovChain(). Int_t Size() const; get the number of steps in the chain. { return fChain ? fChain->numEntries() : 0; }. const RooArgSet* Get(Int_t i) const; get the entry at position i. { return fChain->get(i); }. const RooArgSet* Get() const; get the entry at the current position. { return fChain->get(); }. const RooDataSet* GetAsConstDataSet() const; { return fChain; }. THnSparse* GetAsSparseHist(RooAbsCollection* whichVars = NULL) const; Get a clone of the markov chain on which this interval is based; as a sparse histogram. You own the returned THnSparse*. RooRealVar* GetNLLVar() const; get a clone of the NLL variable. { return (RooRealVar*)fNLL->Clone(); }. RooRealVar* GetWeightVar() const; get a clone of the weight variable. { return (RooRealVar*)fWeight->Clone(); }. virtual ~MarkovChain(). » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__MarkovChain.html:10251,variab,variable,10251,root/html534/RooStats__MarkovChain.html,https://root.cern,https://root.cern/root/html534/RooStats__MarkovChain.html,2,['variab'],['variable']
Modifiability,"g; Int_tTStreamerElement::fOffset!element offset in class; Int_tfSTLtypetype of STL vector; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerSTL(); Default ctor. TStreamerSTL(const char* name, const char* title, Int_t offset, const char* typeName, const char* trueType, Bool_t dmPointer); Create a TStreamerSTL object. ~TStreamerSTL(); TStreamerSTL dtor. Bool_t CannotSplit() const; We can not split STL's which are inside a variable size array.; At least for now. Bool_t IsaPointer() const; Return true if the data member is a pointer. Bool_t IsBase() const; Return kTRUE if the element represent a base class. Int_t GetSize() const; Returns size of STL container in bytes. void ls(Option_t* option = """") const; Print the content of the element. const char * GetInclude() const; Return the proper include for this element. void SetStreamer(TMemberStreamer* streamer); Set pointer to Streamer function for this element; NOTE: we do not take ownership. void Streamer(TBuffer& b); Stream an object of class TStreamerSTL. TStreamerElement& operator=(const TStreamerSTL& ). TStreamerSTL(const TStreamerSTL& ). Int_t GetSTLtype() const; {return fSTLtype;}. Int_t GetCtype() const; {return fCtype;}. void SetSTLtype(Int_t t); {fSTLtype = t;}. void SetCtype(Int_t t); {fCtype = t;}. » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStreamerSTL.html:9339,variab,variable,9339,root/html528/TStreamerSTL.html,https://root.cern,https://root.cern/root/html528/TStreamerSTL.html,3,['variab'],['variable']
Modifiability,"g; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are the two TEventLists defining events; to be used during the neural net training.; Both the TTree and the TEventLists can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are two cuts (see TTreeFormula) defining events; to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just desc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:20986,layers,layers,20986,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['layers'],['layers']
Modifiability,"gClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* sockpath). TSSLSocket(Int_t desc). TSSLSocket(Int_t desc, const char* sockpath). TSSLSocket(const TSSLSocket& s). ~TSSLSocket(); Close gracefully the connection, and free SSL structures. void Close(Option_t* option = """"); Close the SSL connection. void SetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); Set up the static configuration variables. Int_t Recv(TMessage*& mess). Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t Send(const TMessage& mess). Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. TSSLSocket(); {}. Int_t Recv(TMessage*& mess); The rest of the Send and Recv calls rely ultimately on these,; so it is enough to overload them. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); Issue with hidden method :(. { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. » Author: Alejandro Alvarez 16/09/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSSLSocket.html:11210,config,configuration,11210,root/html532/TSSLSocket.html,https://root.cern,https://root.cern/root/html532/TSSLSocket.html,4,"['config', 'variab']","['configuration', 'variables']"
Modifiability,"gDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TGCompositeFrame (const TGCompositeFrame &)=delete;  ; TGCompositeFrame & operator= (const TGCompositeFrame &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCompositeFrame.html:26879,inherit,inherited,26879,doc/master/classTGCompositeFrame.html,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html,1,['inherit'],['inherited']
Modifiability,"gDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Maline 19/07/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGInputDialog.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGInputDialog.html:22332,variab,variable,22332,root/html528/TGInputDialog.html,https://root.cern,https://root.cern/root/html528/TGInputDialog.html,1,['variab'],['variable']
Modifiability,"gDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Maline 19/07/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGInputDialog.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGInputDialog.html:22485,variab,variable,22485,root/html530/TGInputDialog.html,https://root.cern,https://root.cern/root/html530/TGInputDialog.html,1,['variab'],['variable']
Modifiability,"gDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Maline 19/07/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGInputDialog.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGInputDialog.html:22485,variab,variable,22485,root/html532/TGInputDialog.html,https://root.cern,https://root.cern/root/html532/TGInputDialog.html,1,['variab'],['variable']
Modifiability,"gDefaultWaveLength = 0.02;  default wavelength ;  . Additional Inherited Members;  Public Types inherited from TPolyLine; enum  { kPolyLineNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TPolyLine; TPolyLine & operator= (const TPolyLine &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TCurlyLine.h>. Inheritance diagram for TCurlyLine:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TCurlyLine() [1/2]. TCurlyLine::TCurlyLine ; (; ). Default constructor. ; Definition at line 46 of file TCurlyLine.cxx. ◆ TCurlyLine() [2/2]. TCurlyLine::TCurlyLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . Double_t ; wl = .02, . Double_t ; amp = .01 . ). Create a new TCurlyLine with starting point (x1, y1), end point (x2,y2). ; The wavelength and amplitude are given in percent of the pad height. ; Definition at line 62 of file TCurlyLine.cxx. ◆ ~TCurlyLine(). TCurlyLine::~TCurlyLine ; (; ). inlineoverride . Definition at line 40 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyLine.html:22774,inherit,inherited,22774,doc/master/classTCurlyLine.html,https://root.cern,https://root.cern/doc/master/classTCurlyLine.html,3,['inherit'],['inherited']
Modifiability,"gDefaultWaveLength = 0.02;  default wavelength ;  . Additional Inherited Members;  Public Types inherited from TPolyLine; enum  { kPolyLineNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TPolyLine; TPolyLine & operator= (const TPolyLine &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TCurlyLine; Double_t fAmplitude;  amplitude of sinusoid in percent of pad height ;  ; Bool_t fIsCurly;  true: Gluon, false: Gamma ;  ; Int_t fNsteps;  used internally (controls precision) ;  ; Double_t fWaveLength;  wavelength of sinusoid in percent of pad height ;  ; Double_t fX1;  start x, center for arc ;  ; Double_t fX2;  end x ;  ; Double_t fY1;  start y, center for arc ;  ; Double_t fY2;  end y ;  ;  Protected Attributes inherited from TPolyLine; Int_t fLastPoint {-1};  The index of the last filled point. ;  ; Int_t fN {0};  Number of points. ;  ; TString fOption;  options ;  ; Double_t * fX {nullptr};  [fN] Array of X coordinates ;  ; Double_t * fY {nullptr};  [fN] Array of Y coordinates ;  ;  Protected Attributes inh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyArc.html:24859,inherit,inherited,24859,doc/master/classTCurlyArc.html,https://root.cern,https://root.cern/doc/master/classTCurlyArc.html,3,['inherit'],['inherited']
Modifiability,"gFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 87 of file SimulatedAnnealingFitter.h. ◆ IsA(). virtual TClass * TMVA::SimulatedAnnealingFitter::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::FitterBase.; Definition at line 87 of file SimulatedAnnealingFitter.h. ◆ Run(). Double_t TMVA::SimulatedAnnealingFitter::Run ; (; std::vector< Double_t > & ; pars). virtual . Execute fitting. ; Implements TMVA::FitterBase.; Definition at line 136 of file SimulatedAnnealingFitter.cxx. ◆ SetParameters(). void TMVA::SimulatedAnnealingFitter::SetParameters ; (; Int_t ; fMaxCalls, . Double_t ; fInitialTemperature, . Double_t ; fMinTemperature, . Double_t ; fEps, . TString ; fKernelTemperatureS, . Double_t ; fTemperatureScale, . Double_t ; fTemperatureAdaptiveStep, . Bool_t ; fUseDefaultScale, . Bool_t ; fUseDefaultTemperature . ). set SA configuration parameters ; Definition at line 112 of file SimulatedAnnealingFitter.cxx. ◆ Streamer(). virtual void TMVA::SimulatedAnnealingFitter::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::FitterBase. ◆ StreamerNVirtual(). void TMVA::SimulatedAnnealingFitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 87 of file SimulatedAnnealingFitter.h. Member Data Documentation. ◆ fAdaptiveSpeed. Double_t TMVA::SimulatedAnnealingFitter::fAdaptiveSpeed. private . how fast temperature change in adaptive (in adaptive two variables describe the change of temperature, but fAdaptiveSpeed should be 1.0 and its not recommended to change it) ; Definition at line 80 of file SimulatedAnnealingFitter.h. ◆ fEps. Double_t TMVA::SimulatedAnnealingFitter::fEps. private . relative required FCN accuracy at minimum ; Definition at line 77 of file SimulatedAnnealingFitter.h. ◆ fInitialTemperature. Double_t TMVA::SimulatedAnnealingFitter::fInitia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html:19468,config,configuration,19468,doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,1,['config'],['configuration']
Modifiability,"gPoor; kImgFast; kImgGood; kImgBest; };. protected:. Bool_tTAttImage::fConstRatiokeep aspect ratio of image on the screen; Bool_tfEditable! kTRUE image can be resized, moved by resizing/moving gPad; ASImage*fGrayImage! gray image; ASImage*fImage! pointer to image structure of original image; UInt_tTAttImage::fImageCompressioncompression [0 .. 100] 0: no compression; TAttImage::EImageQualityTAttImage::fImageQuality*OPTION={GetMethod=""GetImageQuality"";SetMethod=""SetImageQuality"";Items=(kImgDefault=""Default"",kImgPoor=""Poor"",kImgFast=""Fast"",kImgGood=""Good"",kImgBest=""Best"")}*; Bool_tfIsGray! kTRUE if image is gray; Double_tfMaxValue! max value in image; Double_tfMinValue! min value in image; TStringTNamed::fNameobject identifier; Int_tfPaintMode! 1 - fast mode, 0 - low memory slow mode; TImagePaletteTAttImage::fPalettecolor palette for value -> color conversion; TPaletteEditor*TAttImage::fPaletteEditor! GUI to edit the color palette; Bool_tTAttImage::fPaletteEnabled! kTRUE - palette is drawn on the image; TASImage*fScaledImage! temporary scaled and zoomed image produced from original image; TStringTNamed::fTitleobject title; UInt_tfZoomHeight! hight of zoomed image in image pixels; UInt_tfZoomOffX! X - offset for zooming in image pixels; UInt_tfZoomOffY! Y - offset for zooming im image pixels; Int_tfZoomUpdate! kZoom - new zooming required, kZoomOps - other ops in action, kNoZoom - no zooming or ops; UInt_tfZoomWidth! width of zoomed image in image pixels; static Bool_tfgInitglobal flag to init afterimage only once; static THashTable*fgPlugList! hash table containing loaded plugins; static ASVisual*fgVisualpointer to visual structure. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DestroyImage(); Destroy image. void SetDefaults(); Set default parameters. TASImage(); Default image constructor. TASImage(UInt_t w, UInt_t h); Create an empty image. TASImage(const char *file, EImageFileTypes); Create an image object and read fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASImage.html:18663,plugin,plugins,18663,root/html526/TASImage.html,https://root.cern,https://root.cern/root/html526/TASImage.html,1,['plugin'],['plugins']
Modifiability,"gPoor; kImgFast; kImgGood; kImgBest; };. protected:. Bool_tTAttImage::fConstRatiokeep aspect ratio of image on the screen; Bool_tfEditable! kTRUE image can be resized, moved by resizing/moving gPad; ASImage*fGrayImage! gray image; ASImage*fImage! pointer to image structure of original image; UInt_tTAttImage::fImageCompressioncompression [0 .. 100] 0: no compression; TAttImage::EImageQualityTAttImage::fImageQuality*OPTION={GetMethod=""GetImageQuality"";SetMethod=""SetImageQuality"";Items=(kImgDefault=""Default"",kImgPoor=""Poor"",kImgFast=""Fast"",kImgGood=""Good"",kImgBest=""Best"")}*; Bool_tfIsGray! kTRUE if image is gray; Double_tfMaxValue! max value in image; Double_tfMinValue! min value in image; TStringTNamed::fNameobject identifier; Int_tfPaintMode! 1 - fast mode, 0 - low memory slow mode; TImagePaletteTAttImage::fPalettecolor palette for value -> color conversion; TPaletteEditor*TAttImage::fPaletteEditor! GUI to edit the color palette; Bool_tTAttImage::fPaletteEnabled! kTRUE - palette is drawn on the image; TASImage*fScaledImage! temporary scaled and zoomed image produced from original image; TStringTNamed::fTitleobject title; UInt_tfZoomHeight! hight of zoomed image in image pixels; UInt_tfZoomOffX! X - offset for zooming in image pixels; UInt_tfZoomOffY! Y - offset for zooming im image pixels; Int_tfZoomUpdate! kZoom - new zooming required, kZoomOps - other ops in action, kNoZoom - no zooming or ops; UInt_tfZoomWidth! width of zoomed image in image pixels; static Bool_tfgInitglobal flag to init afterimage only once; static THashTable*fgPlugList! hash table containing loaded plugins; static ASVisual*fgVisualpointer to visual structure. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DestroyImage(); Destroy image. void SetDefaults(); Set default parameters. TASImage(); Default image constructor. TASImage(UInt_t w, UInt_t h); Create an empty image. TASImage(const char* file, TImage::EImageFileTypes type = kUnknown); Create an i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TASImage.html:18649,plugin,plugins,18649,root/html528/TASImage.html,https://root.cern,https://root.cern/root/html528/TASImage.html,4,['plugin'],['plugins']
Modifiability,"gRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyrho1; RooRealProxyrho2; RooRealProxysigp; RooRealProxyx; RooRealProxyxi.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBukinPdf.html:38919,config,configuration,38919,root/html528/RooBukinPdf.html,https://root.cern,https://root.cern/root/html528/RooBukinPdf.html,1,['config'],['configuration']
Modifiability,"gRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction2PdfBinding_double_double_int_.html:42396,config,configuration,42396,root/html534/RooCFunction2PdfBinding_double_double_int_.html,https://root.cern,https://root.cern/root/html534/RooCFunction2PdfBinding_double_double_int_.html,2,['config'],['configuration']
Modifiability,"gRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction2PdfBinding_double_int_double_.html:42396,config,configuration,42396,root/html534/RooCFunction2PdfBinding_double_int_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction2PdfBinding_double_int_double_.html,2,['config'],['configuration']
Modifiability,"gRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyk; RooRealProxym0; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooLognormal.html:39978,config,configuration,39978,root/html532/RooLognormal.html,https://root.cern,https://root.cern/root/html532/RooLognormal.html,2,['config'],['configuration']
Modifiability,"gSet &x1, RooArgSet &x2);  whether we own the proposal density function ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::unique_ptr< RooDataSet > fCache;  our position in the cached proposal data set ;  ; Int_t fCachePosition = 0;  how many points to generate each time ;  ; Int_t fCacheSize = 1;  the last point we were at ;  ; std::map< RooRealVar *, RooAbsReal * >::iterator fIt;  map of values in pdf to update ;  ; RooArgSet fLastX;  pdf iterator ;  ; std::map< RooRealVar *, RooAbsReal * > fMap;  the proposal density function ;  ; RooArgSet fMaster;  the cached proposal data set ;  ; bool fOwnsPdf = false;  pointers to master variables needed for updates ;  ; RooAbsPdf * fPdf = nullptr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooStats/PdfProposal.h>. Inheritance diagram for RooStats::PdfProposal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ PdfProposal() [1/2]. PdfProposal::PdfProposal ; (; ). default . By default, PdfProposal does NOT own the PDF that serves as the pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html:13829,inherit,inherited,13829,doc/master/classRooStats_1_1PdfProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html,1,['inherit'],['inherited']
Modifiability,"gSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Calculate the current value. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:4215,extend,extendMode,4215,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,4,['extend'],"['extendMode', 'extended']"
Modifiability,"gSet const &histObsList, int intOrder, RooAbsRealLValue &obs, double xlo, double xhi);  ; static std::string rooHistIntegralTranslateImpl (int code, RooAbsArg const *klass, RooDataHist const *dataHist, const RooArgSet &obs, bool histFuncMode);  ; static void rooHistTranslateImpl (RooAbsArg const *klass, RooFit::Detail::CodeSquashContext &ctx, int intOrder, RooDataHist const *dataHist, const RooArgSet &obs, bool correctForBinSize, bool cdfBoundaries);  . Friends; class RooAbsCachedPdf;  ; class RooHistFunc;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:73545,inherit,inherited,73545,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,4,['inherit'],['inherited']
Modifiability,"gSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:15228,variab,variable,15228,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['variab'],['variable']
Modifiability,"gSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:13199,variab,variable,13199,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,2,['variab'],['variable']
Modifiability,"gSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t orde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:26299,variab,variable,26299,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['variab'],['variable']
Modifiability,"gSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:24473,variab,variable,24473,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,3,['variab'],['variable']
Modifiability,"gSet()) constReturn a RooFunctor object bound to this RooAbsReal with given definition of observables and paramete...Definition RooAbsReal.cxx:3887; RooAbsReal::setCachedValuevoid setCachedValue(double value, bool notifyClients=true) finalOverwrite the value stored in this object's cache.Definition RooAbsReal.h:558; RooAbsReal::_plotBinsInt_t _plotBinsNumber of plot bins.Definition RooAbsReal.h:535; RooAbsReal::createPlotProjectionconst RooAbsReal * createPlotProjection(const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) constUtility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a Roo...Definition RooAbsReal.cxx:787; RooAbsReal::plotSamplingHintvirtual std::list< double > * plotSamplingHint(RooAbsRealLValue &obs, double xlo, double xhi) constInterface for returning an optional hint for initial sampling points when constructing a curve projec...Definition RooAbsReal.cxx:3571; RooAbsReal::setPlotLabelvoid setPlotLabel(const char *label)Set the label associated with this variable.Definition RooAbsReal.cxx:416; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooAbsReal::doEvalvirtual void doEval(RooFit::EvalContext &) constBase function for computing multiple values of a RooAbsReal.Definition RooAbsReal.cxx:4343; RooAbsReal::makeProjectionSetvoid makeProjectionSet(const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) constUtility function for plotOn() that constructs the set of observables to project when plotting ourselv...Definition RooAbsReal.cxx:2903; RooAbsReal::getMaxValvirtual Int_t getMaxVal(const RooArgSet &vars) constAd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:53161,variab,variable,53161,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['variab'],['variable']
Modifiability,"gSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction3PdfBinding_double_double_int_int_.html:42562,config,configuration,42562,root/html534/RooCFunction3PdfBinding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html534/RooCFunction3PdfBinding_double_double_int_int_.html,1,['config'],['configuration']
Modifiability,"gSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html:44864,config,configuration,44864,root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,2,['config'],['configuration']
Modifiability,"gTNamed::fTitleobject title; DrawableTGX11::fVisRootWinRoot window with fVisual to be used to create GC's and XImages; RVisual*TGX11::fVisualPointer to visual used by all windows; ULong_tTGX11::fWhitePixelValue of white pixel in colormap. private:. FT_VectorfAlignalignment vector; TXftFontHash*fXftFontHashhash table for Xft fonts; static TGX11TTF::EAlignkBCenter; static TGX11TTF::EAlignkBLeft; static TGX11TTF::EAlignkBRight; static TGX11TTF::EAlignkMCenter; static TGX11TTF::EAlignkMLeft; static TGX11TTF::EAlignkMRight; static TGX11TTF::EAlignkNone; static TGX11TTF::EAlignkTCenter; static TGX11TTF::EAlignkTLeft; static TGX11TTF::EAlignkTRight. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGX11TTF(const TGX11& org); Create copy of TGX11 but now use TrueType fonts. void Activate(); Static method setting TGX11TTF as the acting gVirtualX. Bool_t Init(void* display); Initialize X11 system. Returns kFALSE in case of failure. void Align(void); Compute alignment variables. The alignment is done on the horizontal string; then the rotation is applied on the alignment variables.; SetRotation and LayoutGlyphs should have been called before. void DrawImage(FT_Bitmap* source, ULong_t fore, ULong_t back, RXImage* xim, Int_t bx, Int_t by); Draw FT_Bitmap bitmap to xim image at position bx,by using specified; foreground color. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); Draw text using TrueType fonts. If TrueType fonts are not available the; text is drawn with TGX11::DrawText. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t* text, TVirtualX::ETextMode mode); Draw text using TrueType fonts. If TrueType fonts are not available the; text is drawn with TGX11::DrawText. RXImage * GetBackground(Int_t x, Int_t y, UInt_t w, UInt_t h); Get the background of the current window in an XImage. Bool_t IsVisible(Int_t x, Int_t y, UInt_t w, UInt_t h); Test if there is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11TTF.html:27235,variab,variables,27235,root/html602/TGX11TTF.html,https://root.cern,https://root.cern/root/html602/TGX11TTF.html,2,['variab'],['variables']
Modifiability,"gTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. private:. TStringfCacheDirDirectory containing cache of user files; TProofLockPath*fCacheLockCache dir locker; TStringfDataSetDirDirectory containing info about known data sets; TDataSetManager*fDataSetManagerDataset manager; TDataSetManagerFile*fDataSetStgRepoDataset manager for staging requests; Int_tfDynamicStartupNMaxDyn Startup simulation: max number of workers; Int_tfDynamicStartupStepDyn Startup simulation: increment at each call; Bool_tfForkStartupStartup N-1 workers forking the first worker; Int_tfNWorkersNumber of workers; TQueryResultManager*fQMgrQuery-result manager; TStringfQueryDirDirectory containing query results and status; TProofLockPath*fQueryLockQuery dir locker; TPMERegexp*fReInvalidRegular expression matching invalid dataset URIs; TStringfSandboxPROOF sandbox root dir; TStringfSelectionInternal variable to pass drawing options; TServerSocket*fServSockServer socket to accept call backs; TStringfSockPathUNIX socket path for communication with workers; TStringfVarExpInternal variable to pass drawing options; static Int_tfgWrksMaxMax number of workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Create a PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofLite.html:28795,sandbox,sandbox,28795,root/html604/TProofLite.html,https://root.cern,https://root.cern/root/html604/TProofLite.html,3,"['sandbox', 'variab']","['sandbox', 'variable']"
Modifiability,"g[MAX_REQUEST_SIZE]);; 19775 if (itmp < 1024) {; 19776 mg_cry_ctx_internal(ctx,; 19777 ""%s too small"",; 19778 config_options[MAX_REQUEST_SIZE].name);; 19779 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19780 mg_snprintf(NULL,; 19781 NULL, /* No truncation check for error buffers */; 19782 error->text,; 19783 error->text_buffer_size,; 19784 ""Invalid configuration option value: %s"",; 19785 config_options[MAX_REQUEST_SIZE].name);; 19786 }; 19787 free_context(ctx);; 19788 pthread_setspecific(sTlsKey, NULL);; 19789 return NULL;; 19790 }; 19791 ctx->max_request_size = (unsigned)itmp;; 19792 ; 19793 /* Queue length */; 19794#if !defined(ALTERNATIVE_QUEUE); 19795 itmp = atoi(ctx->dd.config[CONNECTION_QUEUE_SIZE]);; 19796 if (itmp < 1) {; 19797 mg_cry_ctx_internal(ctx,; 19798 ""%s too small"",; 19799 config_options[CONNECTION_QUEUE_SIZE].name);; 19800 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19801 mg_snprintf(NULL,; 19802 NULL, /* No truncation check for error buffers */; 19803 error->text,; 19804 error->text_buffer_size,; 19805 ""Invalid configuration option value: %s"",; 19806 config_options[CONNECTION_QUEUE_SIZE].name);; 19807 }; 19808 free_context(ctx);; 19809 pthread_setspecific(sTlsKey, NULL);; 19810 return NULL;; 19811 }; 19812 ctx->squeue =; 19813 (struct socket *)mg_calloc((unsigned int)itmp, sizeof(struct socket));; 19814 if (ctx->squeue == NULL) {; 19815 mg_cry_ctx_internal(ctx,; 19816 ""Out of memory: Cannot allocate %s"",; 19817 config_options[CONNECTION_QUEUE_SIZE].name);; 19818 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19819 mg_snprintf(NULL,; 19820 NULL, /* No truncation check for error buffers */; 19821 error->text,; 19822 error->text_buffer_size,; 19823 ""Out of memory: Cannot allocate %s"",; 19824 config_options[CONNECTION_QUEUE_SIZE].name);; 19825 }; 19826 free_context(ctx);; 19827 pthread_setspecific(sTlsKey, NULL);; 19828 return NULL;; 19829 }; 19830 ctx->sq_size = itmp;; 19831#endif; 19832 ; 19833 /* Worker thread cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:591354,config,configuration,591354,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['config'],['configuration']
Modifiability,"g[MAX_REQUEST_SIZE]);; 19776 if (itmp < 1024) {; 19777 mg_cry_ctx_internal(ctx,; 19778 ""%s too small"",; 19779 config_options[MAX_REQUEST_SIZE].name);; 19780 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19781 mg_snprintf(NULL,; 19782 NULL, /* No truncation check for error buffers */; 19783 error->text,; 19784 error->text_buffer_size,; 19785 ""Invalid configuration option value: %s"",; 19786 config_options[MAX_REQUEST_SIZE].name);; 19787 }; 19788 free_context(ctx);; 19789 pthread_setspecific(sTlsKey, NULL);; 19790 return NULL;; 19791 }; 19792 ctx->max_request_size = (unsigned)itmp;; 19793 ; 19794 /* Queue length */; 19795#if !defined(ALTERNATIVE_QUEUE); 19796 itmp = atoi(ctx->dd.config[CONNECTION_QUEUE_SIZE]);; 19797 if (itmp < 1) {; 19798 mg_cry_ctx_internal(ctx,; 19799 ""%s too small"",; 19800 config_options[CONNECTION_QUEUE_SIZE].name);; 19801 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19802 mg_snprintf(NULL,; 19803 NULL, /* No truncation check for error buffers */; 19804 error->text,; 19805 error->text_buffer_size,; 19806 ""Invalid configuration option value: %s"",; 19807 config_options[CONNECTION_QUEUE_SIZE].name);; 19808 }; 19809 free_context(ctx);; 19810 pthread_setspecific(sTlsKey, NULL);; 19811 return NULL;; 19812 }; 19813 ctx->squeue =; 19814 (struct socket *)mg_calloc((unsigned int)itmp, sizeof(struct socket));; 19815 if (ctx->squeue == NULL) {; 19816 mg_cry_ctx_internal(ctx,; 19817 ""Out of memory: Cannot allocate %s"",; 19818 config_options[CONNECTION_QUEUE_SIZE].name);; 19819 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19820 mg_snprintf(NULL,; 19821 NULL, /* No truncation check for error buffers */; 19822 error->text,; 19823 error->text_buffer_size,; 19824 ""Out of memory: Cannot allocate %s"",; 19825 config_options[CONNECTION_QUEUE_SIZE].name);; 19826 }; 19827 free_context(ctx);; 19828 pthread_setspecific(sTlsKey, NULL);; 19829 return NULL;; 19830 }; 19831 ctx->sq_size = itmp;; 19832#endif; 19833 ; 19834 /* Worker thread cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:591387,config,configuration,591387,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['config'],['configuration']
Modifiability,"gainst possible overflows. ; Definition at line 535 of file TMath.cxx. ◆ Normalize() [2/2]. Float_t TMath::Normalize ; (; Float_t ; v[3]). Normalize a vector v in place. ; Returns the norm of the original vector. ; Definition at line 518 of file TMath.cxx. ◆ NormCross(). template<typename T > . T TMath::NormCross ; (; const T ; v1[3], . const T ; v2[3], . T ; out[3] . ). inline . Calculates the Normalized Cross Product of two vectors. ; Definition at line 951 of file TMath.h. ◆ NormQuantile(). Double_t TMath::NormQuantile ; (; Double_t ; p). Computes quantiles for standard normal distribution N(0, 1) at probability p. ; ALGORITHM AS241 APPL. STATIST. (1988) VOL. 37, NO. 3, 477-484. ; Definition at line 2456 of file TMath.cxx. ◆ Odd(). Bool_t TMath::Odd ; (; Long_t ; a). inline . Returns true if a is odd. ; Definition at line 117 of file TMathBase.h. ◆ Permute(). Bool_t TMath::Permute ; (; Int_t ; n, . Int_t * ; a . ). Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ; The input array has to be initialised with a non descending sequence. The method returns kFALSE when all combinations are exhausted. ; Definition at line 2557 of file TMath.cxx. ◆ Pi(). constexpr Double_t TMath::Pi ; (; ). constexpr . \( \pi\) ; Definition at line 37 of file TMath.h. ◆ PiOver2(). constexpr Double_t TMath::PiOver2 ; (; ). constexpr . \( \frac{\pi}{2} \) ; Definition at line 51 of file TMath.h. ◆ PiOver4(). constexpr Double_t TMath::PiOver4 ; (; ). constexpr . \( \frac{\pi}{4} \) ; Definition at line 58 of file TMath.h. ◆ Poisson(). Double_t TMath::Poisson ; (; Double_t ; x, . Double_t ; par . ). Computes the Poisson distribution function for (x,par). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:70497,adapt,adapted,70497,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['adapt'],['adapted']
Modifiability,"garithmic scale). Example:. The following commands load a mono-target regression foam from; file 'foam.root' and create a ROOT macro 'output.C', which; draws all PDEFoam cells with little boxes. The latter are; filled with colors according to the target value stored in the; cell. Also the cell number is drawn. TFile file(""foam.root"");; TMVA::PDEFoam *foam = (TMVA::PDEFoam*) gDirectory->Get(""MonoTargetRegressionFoam"");; foam->RootPlot2dim(""output.C"",""cell_value,cellnumber"");; gROOT->Macro(""output.C"");. void FillBinarySearchTree(const TMVA::Event* ev, Bool_t NoNegWeights = kFALSE); Insert event to internal foam density PDEFoamDistr. void DeleteBinarySearchTree(); Delete the fDistr object, which contains the binary search tree. void Init(); Initialize binary search tree, stored in object of type; PDEFoamDistr. void SetFoamType(TMVA::EFoamType ft); Set the foam type. This determinates the method of the; calculation of the density during the foam build-up. void ReadStream(istream& ); Read PDEFoam variables from stream 'istr'. void PrintStream(ostream& ) const; Write PDEFoam variables to stream 'os'. void AddXMLTo(void* parent); write foam variables to xml. void ReadXML(void* parent). Float_t VarTransform(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransform(vector<Float_t>& invec) const. Float_t VarTransformInvers(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransformInvers(vector<Float_t>& invec) const. PDEFoamDistr* GetDistr() const; { assert(fDistr); return fDistr; }. void SetnCells(Long_t nCells); {fNCells =nCells;}. void SetnSampl(Long_t nSampl); {fNSampl =nSampl;}. void SetnBin(Int_t nBin); {fNBin = nBin;}. void SetEvPerBin(Int_t EvPerBin); {fEvPerBin =EvPerBin;}. void SetNElements(UInt_t numb); {fNElements = numb;}. void SetVolumeFraction(Float_t vfr); {fVolFrac = vfr;}. void SetFillFoamWithOrigWeights(Bool_t new_val); {fFillFoamWithOrigWeights=new_val;}. void SetDTSeparation(TMVA::EDTSeparation new_val); {fDTSeparation=new_val;}. void SetPeekMax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:28388,variab,variables,28388,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['variab'],['variables']
Modifiability,"gative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double Edm () const;  Expected distance from minimum. ;  ; double Error (unsigned int i) const;  parameter error by index ;  ; const std::vector< double > & Errors () const;  parameter errors (return st::vector) ;  ; void FillResult (const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0);  Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ;  ; const BinData * FittedBinData () const;  return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ;  ; const IModelFunction * FittedFunction () const;  fitting quantities ;  ; void GetConfidenceIntervals (const BinData &data, double *ci, double cl=0.95, bool norm=false) const;  evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in the array ci cl is the desired confidence interval value. ;  ; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:2583,config,configuration,2583,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,2,['config'],['configuration']
Modifiability,"ge collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObjArray; typedef TObjArrayIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObjArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Int_t GetAbsLast",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRefArray.html:16775,inherit,inherited,16775,doc/master/classRooRefArray.html,https://root.cern,https://root.cern/doc/master/classRooRefArray.html,3,['inherit'],['inherited']
Modifiability,"ge in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _high;  ; double _interpBoundary = 1.0;  ; std::vector< int > _interpCode;  ; std::vector< double > _low;  ; double _nominal = 0.0;  ; RooListProxy _paramList;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html:56020,inherit,inherited,56020,doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,1,['inherit'],['inherited']
Modifiability,"ge is not empty; Int_tfPageOrientationPage orientation (Portrait, Landscape); Bool_tTVirtualPS::fPrintedTrue when a page must be printed; Bool_tfRangeTrue when a range has been defined; Float_tfRedPer cent of red; Int_tTVirtualPS::fSizBufferBuffer size; Int_tfStartStream; ofstream*TVirtualPS::fStreamFile stream identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Int_tfTypeWorkstation type used to know if the PDF is open; Float_tfXsizePage size along X; Float_tfYsizePage size along Y. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPDF(); Default PDF constructor. TPDF(const char* filename, Int_t type = -111); Initialize the PDF interface. fname : PDF file name; wtype : PDF workstation type. Not used in the PDF driver. But as TPDF; inherits from TVirtualPS it should be kept. Anyway it is not; necessary to specify this parameter at creation time because it; has a default value (which is ignore in the PDF case). ~TPDF(); Default PDF destructor. void CellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); Begin the Cell Array painting. void CellArrayFill(Int_t r, Int_t g, Int_t b); Paint the Cell Array. void CellArrayEnd(); End the Cell Array painting. void Close(Option_t* opt = """"); Close a PDF file. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw a Box. void DrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); Draw a Frame around a box. mode = -1 box looks as it is behind the screen; mode = 1 box looks as it is in front of the screen; border is the border size in already precomputed PDF units; dark is the color for the dark part of the frame; light is the color for the light part of the frame. void DrawHatch(Float_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPDF.html:12909,inherit,inherits,12909,root/html528/TPDF.html,https://root.cern,https://root.cern/root/html528/TPDF.html,6,['inherit'],['inherits']
Modifiability,"ge supported). */; 7357 (void)filename;; 7358 (void)conn;; 7359 ; 7360 return 0;; 7361}; 7362 ; 7363 ; 7364static int; 7365extention_matches_template_text(; 7366 struct mg_connection *conn, /* in: request (must be valid) */; 7367 const char *filename /* in: filename (must be valid) */; 7368); 7369{; 7370#if defined(USE_LUA); 7371 if (match_prefix_strlen(conn->dom_ctx->config[LUA_SERVER_PAGE_EXTENSIONS],; 7372 filename); 7373 > 0) {; 7374 return 1;; 7375 }; 7376#endif; 7377 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], filename); 7378 > 0) {; 7379 return 1;; 7380 }; 7381 return 0;; 7382}; 7383 ; 7384 ; 7385/* For given directory path, substitute it to valid index file.; 7386 * Return 1 if index file has been found, 0 if not found.; 7387 * If the file is found, it's stats is returned in stp. */; 7388static int; 7389substitute_index_file(struct mg_connection *conn,; 7390 char *path,; 7391 size_t path_len,; 7392 struct mg_file_stat *filestat); 7393{; 7394 const char *list = conn->dom_ctx->config[INDEX_FILES];; 7395 struct vec filename_vec;; 7396 size_t n = strlen(path);; 7397 int found = 0;; 7398 ; 7399 /* The 'path' given to us points to the directory. Remove all trailing; 7400 * directory separator characters from the end of the path, and; 7401 * then append single directory separator character. */; 7402 while ((n > 0) && (path[n - 1] == '/')) {; 7403 n--;; 7404 }; 7405 path[n] = '/';; 7406 ; 7407 /* Traverse index files list. For each entry, append it to the given; 7408 * path and see if the file exists. If it exists, break the loop */; 7409 while ((list = next_option(list, &filename_vec, NULL)) != NULL) {; 7410 /* Ignore too long entries that may overflow path buffer */; 7411 if ((filename_vec.len + 1) > (path_len - (n + 1))) {; 7412 continue;; 7413 }; 7414 ; 7415 /* Prepare full path to the index file */; 7416 mg_strlcpy(path + n + 1, filename_vec.ptr, filename_vec.len + 1);; 7417 ; 7418 /* Does it exist? */; 7419 if (mg_stat(conn, path, filestat)) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:211971,config,config,211971,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['config'],['config']
Modifiability,"ge supported). */; 7358 (void)filename;; 7359 (void)conn;; 7360 ; 7361 return 0;; 7362}; 7363 ; 7364 ; 7365static int; 7366extention_matches_template_text(; 7367 struct mg_connection *conn, /* in: request (must be valid) */; 7368 const char *filename /* in: filename (must be valid) */; 7369); 7370{; 7371#if defined(USE_LUA); 7372 if (match_prefix_strlen(conn->dom_ctx->config[LUA_SERVER_PAGE_EXTENSIONS],; 7373 filename); 7374 > 0) {; 7375 return 1;; 7376 }; 7377#endif; 7378 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], filename); 7379 > 0) {; 7380 return 1;; 7381 }; 7382 return 0;; 7383}; 7384 ; 7385 ; 7386/* For given directory path, substitute it to valid index file.; 7387 * Return 1 if index file has been found, 0 if not found.; 7388 * If the file is found, it's stats is returned in stp. */; 7389static int; 7390substitute_index_file(struct mg_connection *conn,; 7391 char *path,; 7392 size_t path_len,; 7393 struct mg_file_stat *filestat); 7394{; 7395 const char *list = conn->dom_ctx->config[INDEX_FILES];; 7396 struct vec filename_vec;; 7397 size_t n = strlen(path);; 7398 int found = 0;; 7399 ; 7400 /* The 'path' given to us points to the directory. Remove all trailing; 7401 * directory separator characters from the end of the path, and; 7402 * then append single directory separator character. */; 7403 while ((n > 0) && (path[n - 1] == '/')) {; 7404 n--;; 7405 }; 7406 path[n] = '/';; 7407 ; 7408 /* Traverse index files list. For each entry, append it to the given; 7409 * path and see if the file exists. If it exists, break the loop */; 7410 while ((list = next_option(list, &filename_vec, NULL)) != NULL) {; 7411 /* Ignore too long entries that may overflow path buffer */; 7412 if ((filename_vec.len + 1) > (path_len - (n + 1))) {; 7413 continue;; 7414 }; 7415 ; 7416 /* Prepare full path to the index file */; 7417 mg_strlcpy(path + n + 1, filename_vec.ptr, filename_vec.len + 1);; 7418 ; 7419 /* Does it exist? */; 7420 if (mg_stat(conn, path, filestat)) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:212003,config,config,212003,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['config'],['config']
Modifiability,"ge the NLL creation logic for custom PDFs.; NoteNever call this function directly. Instead, call RooAbsPdf::createNLL(). ; Definition at line 941 of file RooAbsPdf.cxx. ◆ createProjection(). RooAbsPdf * RooAbsPdf::createProjection ; (; const RooArgSet & ; iset). virtual . Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ; Reimplemented in RooProjectedPdf.; Definition at line 2446 of file RooAbsPdf.cxx. ◆ createScanCdf(). RooFit::OwningPtr< RooAbsReal > RooAbsPdf::createScanCdf ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Definition at line 2545 of file RooAbsPdf.cxx. ◆ DeclFileName(). static const char * RooAbsPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 351 of file RooAbsPdf.h. ◆ defaultGeneratorConfig(). RooNumGenConfig * RooAbsPdf::defaultGeneratorConfig ; (; ). static . Returns the default numeric MC generator configuration for all RooAbsReals. ; Definition at line 2613 of file RooAbsPdf.cxx. ◆ expectedEvents() [1/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet & ; nset); const. inline . Return expected number of events to be used in calculation of extended likelihood. ; This function should not be overridden, as it just redirects to the actual virtual function but takes a RooArgSet reference instead of pointer. See alsoexpectedEvents(const RooArgSet*) const ; Definition at line 232 of file RooAbsPdf.h. ◆ expectedEvents() [2/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:97685,config,configuration,97685,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['config'],['configuration']
Modifiability,"ge the histograms in a consistent way. Therefore one can force the replacement by passing the ""f"" option. Then the user has to ensure that the other internal histogram is replaced as well and that the TEfficiency object is in a valid state. VI.2 Fitting; The efficiency can be fitted using the TEfficiency::Fit function which internally uses the TBinomialEfficiencyFitter::Fit method. As this method is using a maximum-likelihood-fit, it is necessary to initialise the given fit function with reasonable start values. The resulting fit function is attached to the list of associated functions and will be drawn automatically during the next TEfficiency::Draw command. The list of associated function can be modified by using the pointer returned by TEfficiency::GetListOfFunctions.; {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; ; //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;; ; bool bPassed;; double x;; for (int i=0; i<10000; ++i) {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; ; //create a function for fitting and do the fit; TF1* f1 = new TF1(""f1"",""gaus"",0,10);; f1->SetParameters(1,5,2);; pEff->Fit(f1);; ; //create a threshold function; TF1* f2 = new TF1(""thres"",""0.8"",0,10);; f2->SetLineColor(kRed);; //add it to the list of functions; //use add first because the parameters of the last function will be displayed; pEff->GetListOfFunctions()->AddFirst(f2);; ; pEff->Draw(""AP"");; }; TEfficiency::GetListOfFunctionsTList * GetListOfFunctions()Definition TEfficiency.cxx:2897; TEfficiency::FitTFitResultPtr Fit(TF1 *f1, Option_t *opt="""")Fits the efficiency using the TBinomialEfficiencyFitter class.Definition TEf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:26829,variab,variable,26829,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['variab'],['variable']
Modifiability,"ge() [1/2]. void TParallelCoordVar::AddRange ; (; ). inline . Definition at line 60 of file TParallelCoordVar.h. ◆ AddRange() [2/2]. void TParallelCoordVar::AddRange ; (; TParallelCoordRange * ; range). Add a range to the current selection on the axis. ; Definition at line 102 of file TParallelCoordVar.cxx. ◆ Class(). static TClass * TParallelCoordVar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TParallelCoordVar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TParallelCoordVar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 117 of file TParallelCoordVar.h. ◆ DeclFileName(). static const char * TParallelCoordVar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 117 of file TParallelCoordVar.h. ◆ DeleteVariable(). void TParallelCoordVar::DeleteVariable ; (; ). Delete variables. ; Definition at line 122 of file TParallelCoordVar.cxx. ◆ DistancetoPrimitive(). Int_t TParallelCoordVar::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Computes the distance from the axis. ; Reimplemented from TObject.; Definition at line 131 of file TParallelCoordVar.cxx. ◆ Draw(). void TParallelCoordVar::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw the axis. ; Reimplemented from TObject.; Definition at line 150 of file TParallelCoordVar.cxx. ◆ Eval(). bool TParallelCoordVar::Eval ; (; Long64_t ; evtidx, . TParallelCoordSelect * ; select . ). Check if the entry is within the range(s) of ""select"". ; Two ranges on a single axis are conjugated as a ""or"": to be selected, the entry must be in one of the ranges. ; Definition at line 160 of file TParallelCoordVar.cxx. ◆ ExecuteEvent(). void TParallelCoordVar::ExecuteEvent ; (; Int_t ; entry, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute the corresponding entry. ; Reimplemented f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordVar.html:21428,variab,variables,21428,doc/master/classTParallelCoordVar.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordVar.html,1,['variab'],['variables']
Modifiability,"ge(). void ROOT::RWebWindow::SetDefaultPage ; (; const std::string & ; page). inline . Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ; Definition at line 257 of file RWebWindow.hxx. ◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1753 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 262 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 300 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 308 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 269 of file RWebWindow.hx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:46464,config,configures,46464,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['config'],['configures']
Modifiability,"ge(). void ROOT::RWebWindow::SetDefaultPage ; (; const std::string & ; page). inline . Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ; Definition at line 260 of file RWebWindow.hxx. ◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1795 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 265 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 303 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 311 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 357 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 272 of file RWebWindow.hx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:45348,config,configures,45348,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['config'],['configures']
Modifiability,"ge. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TColorGradient; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TColor; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void CreateColorsCircle (Int_t offset, const char *name, UChar_t *rgb);  Create the ""circle"" colors in the color wheel. ;  ; static void CreateColorsGray ();  Create the Gray scale colors in the Color Wheel. ;  ; static void CreateColorsRectangle (Int_t offset, const char *name, UChar_t *rgb);  Create the ""rectangular"" colors in the color wheel. ;  ; static Int_t CreateColorTableFromFile (TString fileName, Float_t alpha=1.);  Static function creating a color palette based on an input text file. ;  ; static void CreateColorWheel ();  Static function steering the creation of all colors in the color wheel. ;  ; static Int_t CreateGradientColorTable (UInt_t Number, Double_t *Stops, Double_t *Red, Double_t *Green, Double_t *Blue, UInt_t NColors, Float_t alpha=1.,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearGradient.html:12911,inherit,inherited,12911,doc/master/classTLinearGradient.html,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html,4,['inherit'],['inherited']
Modifiability,"ge. One may try to leave out `""FULL""` in the constructor, or the; # interpretation of `N` changes.; extmodel.fitTo(data, Range=""LEFT"", PrintLevel=-1); N.Print(); ; ; # If we now do a simultaneous fit to the extended model, instead of the; # original model, the LEFT and RIGHT range will each correct their local `N`; # such that it refers to the `FULL` range.; #; # This joint fit of the extmodel will include (w.r.t. the plain model fit) a product of extended terms; # \f[; # L_\mathrm{ext} = L; # \cdot \mathrm{Poisson} \left( N_\mathrm{obs}^\mathrm{LEFT} | N_\mathrm{exp} / \mathrm{frac LEFT} \right); # \cdot \mathrm{Poisson} \left( N_\mathrm{obs}^\mathrm{RIGHT} | N_\mathrm{exp} / \mathrm{frac RIGHT} \right); # \f]; ; ; c = ROOT.TCanvas(""c"", ""c"", 2100, 700); c.Divide(3); c.cd(1); ; r = model.fitTo(data, Range=""LEFT,RIGHT"", PrintLevel=-1, Save=True); r.Print(); ; frame = x.frame(); data.plotOn(frame); model.plotOn(frame, VisualizeError=r); model.plotOn(frame); model.paramOn(frame, Label=""Non-extended fit""); frame.Draw(); ; c.cd(2); ; r2 = extmodel.fitTo(data, Range=""LEFT,RIGHT"", PrintLevel=-1, Save=True); r2.Print(); frame2 = x.frame(); data.plotOn(frame2); extmodel.plotOn(frame2); extmodel.plotOn(frame2, VisualizeError=r2); extmodel.paramOn(frame2, Label=""Extended fit"", Layout=(0.4, 0.95)); frame2.Draw(); ; # PART 2: Extending with RooAddPdf; # --------------------------------; #; # Now we repeat the above exercise, but instead of explicitly adding an extended term to a single shape pdf (RooExponential),; # we assume that we already have an extended likelihood model in the form of a RooAddPdf constructed in the form `Nsig * sigPdf + Nbkg * bkgPdf`.; #; # We add a Gaussian to the previously defined exponential background.; # The signal shape parameters are chosen constant, since the signal region is entirely in the blinded region, i.e., the fit has no sensitivity.; ; c.cd(3); ; Nsig = ROOT.RooRealVar(""Nsig"", ""Number of signal events"", 1000, 0, 2000); Nbkg = ROOT.RooRealV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8py.html:4898,extend,extended,4898,doc/master/rf204b__extendedLikelihood__rangedFit_8py.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8py.html,1,['extend'],['extended']
Modifiability,"ge: [-1, 1] ;  ; std::vector< Int_t > * ParseANNOptionString (TString theOptions, Int_t nvar, std::vector< Int_t > *nodes);  parse option string for ANN methods default settings (should be defined in theOption string) ;  ; TList * ParseFormatLine (TString theString, const char *sep="":"");  Parse the string and cut into labels separated by "":"". ;  ; TH1 * projNormTH1F (TTree *theTree, const TString &theVarName, const TString &name, Int_t nbins, Double_t xmin, Double_t xmax, const TString &cut);  projects variable from tree into normalised histogram ;  ; void ReadAttr (void *node, const char *, float &value);  ; void ReadAttr (void *node, const char *, int &value);  ; void ReadAttr (void *node, const char *, short &value);  ; template<typename T > ; void ReadAttr (void *node, const char *, T &value);  read attribute from xml ;  ; void ReadAttr (void *node, const char *attrname, TString &value);  add attribute from xml ;  ; void ReadFloatArbitraryPrecision (Float_t &val, std::istream &is);  reads a float value with the available precision from a stream ;  ; void ReadTMatrixDFromXML (void *node, const char *name, TMatrixD *mat);  ; void ReadTVectorDFromXML (void *node, const char *name, TVectorD *vec);  ; TString ReplaceRegularExpressions (const TString &s, const TString &replace=""+"");  replace regular expressions helper function to remove all occurrences ""$!%^&()'<>?= "" from a string and replace all ::,$,*,/,+,- with M,S,T,D,P,M respectively ;  ; template<typename Iterator , typename WeightIterator > ; Double_t RMS (Iterator first, Iterator last, WeightIterator w);  Return the Standard Deviation of an array defined by the iterators. ;  ; template<typename T > ; Double_t RMS (Long64_t n, const T *a, const Double_t *w=0);  Return the Standard Deviation of an array a with length n. ;  ; void ROOTVersionMessage (MsgLogger &logger);  prints the ROOT release number and date ;  ; void Scale (std::vector< Double_t > &, Double_t);  scales double vector ;  ; void Scale (std::vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Tools.html:6109,variab,variable,6109,doc/master/classTMVA_1_1Tools.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Tools.html,1,['variab'],['variable']
Modifiability,"ge; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxydm; RooRealProxydm0; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDstD0BG.html:39372,config,configuration,39372,root/html530/RooDstD0BG.html,https://root.cern,https://root.cern/root/html530/RooDstD0BG.html,2,['config'],['configuration']
Modifiability,"geBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:20432,inherit,inherited,20432,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,2,['inherit'],['inherited']
Modifiability,"geList;  list of TObjString containing the name of the files need to be merged ;  ; TString fMergeOptions;  Options (in string format) to be passed down to the Merge functions. ;  ; TString fMsgPrefix {""TFileMerger""};  Prefix to be used when printing informational message (default TFileMerger) ;  ; Bool_t fNoTrees {kFALSE};  True if Trees should not be merged (default is kFALSE) ;  ; TString fObjectNames;  List of object names to be either merged exclusively or skipped. ;  ; TFile * fOutputFile {nullptr};  The outputfile for merging. ;  ; TString fOutputFilename;  The name of the outputfile for merging. ;  ; Int_t fPrintLevel {0};  How much information to print out at run time. ;  ; TStopwatch fWatch;  Stop watch to measure file copy speed. ;  . Private Types; using TIOFeatures = ROOT::TIOFeatures;  . Private Member Functions;  TFileMerger (const TFileMerger &)=delete;  ; TFileMerger & operator= (const TFileMerger &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TFileMerger.h>. Inheritance diagram for TFileMerger:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ TIOFeatures. using TFileMerger::TIOFeatures = ROOT::TIOFeatures. private . Definition at line 32 of file TFileMerger.h. Member Enumeration Documentation. ◆ EPartialMergeType. enum TFileMerger::EPartialMergeType. Type of the partial merge. . EnumeratorkRegular Normal merge, overwriting the output file. . kIncremental Merge the input file with the content of the output file (if already existing). . kResetable Only the objects with a MergeAfterReset member function. . kNonResetable Only the objects without a MergeAfterReset member function. . kDelayWrite Delay the TFile write (to reduce the number of write when reusing the file) . kAll Merge all type of objects (default) . kAllIncremental Merge incrementally all type of objects. . kOnlyListe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMerger.html:15661,inherit,inherited,15661,doc/master/classTFileMerger.html,https://root.cern,https://root.cern/doc/master/classTFileMerger.html,1,['inherit'],['inherited']
Modifiability,"geName) ;; 2326 if (!posProj || !negProj) {; 2327 coutE(Plotting) << ""RooAbsReal::plotAsymOn("" << GetName() << "") Unable to create projections, abort"" << std::endl ;; 2328 return frame ;; 2329 }; 2330 ; 2331 // Create a RooFormulaVar representing the asymmetry; 2332 TString asymName(GetName()) ;; 2333 asymName.Append(""_Asym["") ;; 2334 asymName.Append(asymCat.GetName()) ;; 2335 asymName.Append(""]"") ;; 2336 TString asymTitle(asymCat.GetName()) ;; 2337 asymTitle.Append("" Asymmetry of "") ;; 2338 asymTitle.Append(GetTitle()) ;; 2339 RooFormulaVar funcAsym{asymName,asymTitle,""(@0-@1)/(@0+@1)"",RooArgSet(*posProj,*negProj)};; 2340 ; 2341 if (o.projData) {; 2342 ; 2343 // If data set contains more rows than needed, make reduced copy first; 2344 RooAbsData* projDataSel = const_cast<RooAbsData*>(o.projData);; 2345 std::unique_ptr<RooAbsData> projDataSelOwned;; 2346 if (projDataNeededVars && projDataNeededVars->size() < o.projData->get()->size()) {; 2347 ; 2348 // Determine if there are any slice variables in the projection set; 2349 RooArgSet sliceDataSet;; 2350 sliceSet.selectCommon(*o.projData->get(), sliceDataSet);; 2351 TString cutString ;; 2352 if (!sliceDataSet.empty()) {; 2353 bool first(true) ;; 2354 for(RooAbsArg * sliceVar : sliceDataSet) {; 2355 if (!first) {; 2356 cutString.Append(""&&"") ;; 2357 } else {; 2358 first=false ;; 2359 }; 2360 ; 2361 RooAbsRealLValue* real ;; 2362 RooAbsCategoryLValue* cat ;; 2363 if ((real = dynamic_cast<RooAbsRealLValue*>(sliceVar))) {; 2364 cutString.Append(Form(""%s==%f"",real->GetName(),real->getVal())) ;; 2365 } else if ((cat = dynamic_cast<RooAbsCategoryLValue*>(sliceVar))) {; 2366 cutString.Append(Form(""%s==%d"",cat->GetName(),cat->getCurrentIndex())) ;; 2367 }; 2368 }; 2369 }; 2370 ; 2371 if (!cutString.IsNull()) {; 2372 coutI(Plotting) << ""RooAbsReal::plotAsymOn("" << GetName(); 2373 << "") reducing given projection dataset to entries with "" << cutString << std::endl ;; 2374 }; 2375 projDataSelOwned = std::unique_ptr<RooAbsData>{const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:103187,variab,variables,103187,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['variab'],['variables']
Modifiability,"geName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; RooAbsReal const & getMedian () const;  Get the median parameter. ;  ; RooAbsReal const & getShapeK () const;  Get the shape parameter. ;  ; RooAbsReal const & getX () const;  Get the x variable. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; bool useStandardParametrization () const;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:2369,variab,variable,2369,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,1,['variab'],['variable']
Modifiability,"geName=nullptr) override;  Set value to center of bin 'ibin' of binning 'rangeName' (or of default binning if no range is specified) ;  ; virtual void setBin (Int_t ibin, const RooAbsBinning &binning);  Set value to center of bin 'ibin' of binning 'binning'. ;  ; void setConstant (bool value=true);  ; virtual void setVal (double value)=0;  Set the current value of the object. Needs to be overridden by implementations. ;  ; virtual void setVal (double value, const char *);  Set the current value of the object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double volume (const char *rangeName) const override;  ; virtual double volume (const RooAbsBinning &binning) const;  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to given stream. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:9343,inherit,inherited,9343,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,1,['inherit'],['inherited']
Modifiability,"geName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:33218,variab,variable,33218,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['variab'],['variable']
Modifiability,"geOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypeak; RooRealProxytail; RooRealProxywidth; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNovosibirsk.html:39325,config,configuration,39325,root/html530/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html530/RooNovosibirsk.html,2,['config'],['configuration']
Modifiability,"geOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; TString_sigCatNameName of accept state of accept/reject category; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooEfficiency.html:40225,config,configuration,40225,root/html532/RooEfficiency.html,https://root.cern,https://root.cern/root/html532/RooEfficiency.html,2,['config'],['configuration']
Modifiability,"ged ;  ; TGFrame * fTarget;  drop target ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fgDbw = 0;  ; static Int_t fgDbx = 0;  ; static Int_t fgDby = 0;  ; static Pixel_t fgDefaultFrameBackground = 0;  ; static Pixel_t fgDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldDragManager.html:38164,inherit,inherited,38164,doc/master/classTGuiBldDragManager.html,https://root.cern,https://root.cern/doc/master/classTGuiBldDragManager.html,1,['inherit'],['inherited']
Modifiability,"ged. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:54563,inherit,inherited,54563,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,9,['inherit'],['inherited']
Modifiability,"genceSteps=5,BatchSize=100,TestRepetitions=1,""; ""MaxEpochs=10,WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0."");; ; TString trainingStrategyString(""TrainingStrategy="");; trainingStrategyString += trainingString1; // + ""|"" + trainingString2 + ....; ; // Build now the full DNN Option string; ; TString dnnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:""; ""WeightInitialization=XAVIER"");; dnnOptions.Append("":"");; dnnOptions.Append(layoutString);; dnnOptions.Append("":"");; dnnOptions.Append(trainingStrategyString);; ; TString dnnMethodName = ""TMVA_DNN_CPU"";; // use GPU if available; #ifdef R__HAS_TMVAGPU; dnnOptions += "":Architecture=GPU"";; dnnMethodName = ""TMVA_DNN_GPU"";; #elif defined(R__HAS_TMVACPU); dnnOptions += "":Architecture=CPU"";; #endif; ; factory.BookMethod(&loader, TMVA::Types::kDL, dnnMethodName, dnnOptions);; }; ; /***; ### Book Convolutional Neural Network in TMVA; ; For building a CNN one needs to define; ; - Input Layout : number of channels (in this case = 1) | image height | image width; - Batch Layout : batch size | number of channels | image size = (height*width); ; Then one add Convolutional layers and MaxPool layers.; ; - For Convolutional layer the option string has to be:; - CONV | number of units | filter height | filter width | stride height | stride width | padding height | paddig; width | activation function; ; - note in this case we are using a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; conv layer equal to the input; ; - note we use after the first convolutional layer a batch normalization layer. This seems to help significantly the; convergence; ; - For the MaxPool layer:; - MAXPOOL | pool height | pool width | stride height | stride width; ; The RESHAPE layer is needed to flatten the output before the Dense layer; ; ; Note that to run the CNN is required to have CPU or GPU support; ; ***/; ; if (useTMVACNN) {; ; TString inputLayoutString(""InputLayout=1|16|16"");; ; /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:55754,layers,layers,55754,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,2,['layers'],['layers']
Modifiability,"gend; If x1 is equal to x2 and y1 is equal to y2 the legend will be automatically placed to avoid overlapping with the existing primitives already displayed. x1 is considered as the width of the legend and y1 the height. By default the legend is automatically placed with width = x1= x2 = 0.3 and height = y1= y2 = 0.21. ; Implements TVirtualPad.; Definition at line 555 of file TPad.cxx. ◆ cd(). TVirtualPad * TPad::cd ; (; Int_t ; subpadnumber = 0). overridevirtual . Set Current pad. ; When a canvas/pad is divided via TPad::Divide, one can directly set the current path to one of the subdivisions. See TPad::Divide for the convention to number sub-pads.; Returns the new current pad, or 0 in case of failure.; For example: c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad points to the current pad. One can use gPad to set attributes of the current pad.; Note3: One can get a pointer to one of the sub-pads of pad with: TPad subpad = (TPad)pad->GetPad(subpadnumber); ; Implements TVirtualPad.; Definition at line 693 of file TPad.cxx. ◆ Class(). static TClass * TPad::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPad::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPad::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 419 of file TPad.h. ◆ Clear(). void TPad::Clear ; (; Option_t * ; option = """"). overridevirtual . Delete all pad primitives. ; If the bit kClearAfterCR has been set for this pad, the Clear function will execute only after having pressed a CarriageReturn Set the bit with mypad->SetBit(TPad::kClearAfterCR) ; Implements TVirtualPad.; Definition at line 722 of file TPad.cxx. ◆ Clip() [1/2]. Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:60243,variab,variable,60243,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['variab'],['variable']
Modifiability,"general QP problem formulation; this is the largest value of alpha such that; (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,b->v,b->w,b->lambda,b->pi,; b->phi,b->gamma) >= 0. Double_t StepBound(TVectorD& v, TVectorD& dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restricting alpha.; In terms of the abstract formulation, the components have the following meanings :. primalValue : the value of the blocking component of the primal variables (u,t,v,w).; primalStep : the corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlocking function. void InteriorPoint(Double_t alpha, Double_t beta); Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQpVar.html:9405,variab,variables,9405,root/html528/TQpVar.html,https://root.cern,https://root.cern/root/html528/TQpVar.html,12,['variab'],['variables']
Modifiability,"generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function depen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:44568,config,configuration,44568,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,7,['config'],['configuration']
Modifiability,generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects w,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:14112,config,configuration,14112,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['config'],['configuration']
Modifiability,"generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::uni",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLandau.html:2238,inherit,inherited,2238,doc/master/classRooLandau.html,https://root.cern,https://root.cern/doc/master/classRooLandau.html,1,['inherit'],['inherited']
Modifiability,"generator contexts of RooAbsPdf objects. ; A generator context is an object that controls the generation of events from a given p.d.f in one or more sessions. This class defines the common interface for all such contexts and organizes storage of common components, such as the observables definition, the prototype data etc.. ; Definition at line 26 of file RooAbsGenContext.h. Public Member Functions;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; virtual void attach (const RooArgSet &params);  Interface to attach given parameters to object in this context. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; virtual void generateEvent (RooArgSet &theEvent, Int_t remaining)=0;  ; virtual void initGenerator (const RooArgSet &theEvent);  Interface function to initialize context for generation for given set of observables. ;  ; TClass * IsA () const override;  ; bool isValid () const;  ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, i.e. the observables being generated in this context. ;  ; void printClassName (std::ostream &os) const override;  Print class name of context. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Interface for multi-line printing. ;  ; void printName (std::ostream &os) const override;  Print name of contex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsGenContext.html:1345,extend,extendedMode,1345,doc/master/classRooAbsGenContext.html,https://root.cern,https://root.cern/doc/master/classRooAbsGenContext.html,1,['extend'],['extendedMode']
Modifiability,"geometry of ALICE TPC ;  geom_atlas.CShows ATLAS geometry ;  geom_atlas_playback.CPlays back event-recording of a root session running geom_atlas.C tutorial ;  geom_cms.CShows CMS geometry ;  geom_cms_playback.CPlays back event-recording of a root session running geom_cms.C tutorial ;  geom_cms_stereo.CShows CMS geometry in stereo mode ;  geom_default.CDemonstrates usage of ""Default"" geometry alias ;  geom_lhcb.CShows LHCB geometry ;  glplot.CPreliminary demo for showing Timur's GL plots in EVE ;  glplot_geom.CDemonstrates how to combine Timur's GL plots with other scene elements ;  hierarchical_scene.C;  histobrowser.CDemonstates how to use EVE as a histogram browser ;  jetcone.CDemonstrates usage of TEveJetCone class ;  lineset.CDemonstrates usage of class TEveStraightLineSet ;  lineset.py;  MultiView.CMulti-view (3d, rphi, rhoz) service class using EVE Window Manager ;  overlay_palette.C;  pack.CDemonstrates usage of class TGPack ;  paramlist.CDemonstrates usage of simple configuration via TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstrates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstrates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► eve7;  collection.CThis example display collection of ??? in web browser ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:104976,config,configuration,104976,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['config'],['configuration']
Modifiability,"ger & GetMarkerPlex ();  ; virtual Bool_t GetRnrLines ();  ; virtual Bool_t GetRnrMarkers ();  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint the line-set. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Return class of projected object. ;  ; virtual void SetDepthTest (Bool_t x);  ; void SetLine (int idx, const TEveVector &p1, const TEveVector &p2);  Set line vertices with given index. ;  ; void SetLine (int idx, Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Set line vertices with given index. ;  ; void SetLineColor (Color_t col) override;  Set the line color. ;  ; virtual void SetRnrLines (Bool_t x);  ; virtual void SetRnrMarkers (Bool_t x);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteVizParams (std::ostream &out, const TString &var) override;  Write visualization parameters. ;  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (TEveElement *el);  Check if el can be added to this element. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:3058,inherit,inherited,3058,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,2,['inherit'],['inherited']
Modifiability,"ger values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> Streamer(TBuffer& b); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction4Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Mon Jul 4 15:22:18 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_double_.html:41901,variab,variable,41901,root/html530/RooCFunction4PdfBinding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_double_.html,1,['variab'],['variable']
Modifiability,"ger values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> Streamer(TBuffer& b); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction4Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Sat Oct 9 06:58:19 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCFunction4PdfBinding_double_double_double_double_double_.html:41339,variab,variable,41339,root/html528/RooCFunction4PdfBinding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html528/RooCFunction4PdfBinding_double_double_double_double_double_.html,1,['variab'],['variable']
Modifiability,"ger values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> Streamer(TBuffer& b); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction4Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Thu Nov 3 20:07:37 2011 » Last generated: 2011-11-03 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction4PdfBinding_double_double_double_double_double_.html:42308,variab,variable,42308,root/html532/RooCFunction4PdfBinding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html532/RooCFunction4PdfBinding_double_double_double_double_double_.html,1,['variab'],['variable']
Modifiability,"ger values from tree branches ; TString_unitUnit for objects value; Double_t_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. static Bool_t_doLogEvalError; static map<const RooAbsArg*,std::pair<std::string,std::list<EvalError> > >_evalErrorList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsReal(); Destructor. Bool_t operator==(Double_t value); Equality operator comparing to a Double_t. Bool_t operator==(const RooAbsArg& other); Equality operator when comparing to another RooAbsArg.; Only functional when the other arg is a RooAbsReal. TString getTitle(Bool_t appendUnit = kFALSE) const; Return this variable's title string. If appendUnit is true and; this variable has units, also append a string "" (<unit>)"". Double_t getVal(const RooArgSet* nset); Return value of object. If the cache is clean, return the; cached value, otherwise recalculate on the fly and refill; the cache. Double_t traceEval(const RooArgSet* set) const; Calculate current value of object, with error tracing wrapper. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Variant of getAnalyticalIntegral that is also passed the normalization set; that should be applied to the integrand of which the integral is request.; For certain operator p.d.f it is useful to overload this function rather; than analyticalIntegralWN() as the additional normalization information; may be useful in determining a more efficient decomposition of the; requested integral. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Interface function getAnalyticalIntergral advertises the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:31504,variab,variable,31504,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['variab'],['variable']
Modifiability,"ger; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; TString_sigCatNameName of accept state of accept/reject category; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooEfficiency.html:42665,config,configuration,42665,root/html534/RooEfficiency.html,https://root.cern,https://root.cern/root/html534/RooEfficiency.html,2,['config'],['configuration']
Modifiability,"gerFile::ParseInitOpts ; (; const char * ; ins). overridevirtual . Parse the input string and set the init bits accordingly Format is dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>] The <datasetdir> is mandatory. ; See TDataSetManager::ParseInitOpts for the available base options. The base options are already initialized by the base constructor ; Reimplemented from TDataSetManager.; Definition at line 317 of file TDataSetManagerFile.cxx. ◆ RegisterDataSet(). Int_t TDataSetManagerFile::RegisterDataSet ; (; const char * ; uri, . TFileCollection * ; newDataSet, . const char * ; opts . ). overridevirtual . Register a dataset, perfoming quota checkings and verification, if required. ; If a dataset with the same name already exists the action fails unless 'opts' contains 'O', in which case the old dataset is overwritten, or contains 'U', in which case 'newDataSet' is added to the existing dataset (duplications are ignored, if any). If 'opts' contains 'V' the dataset files are also verified (if the dataset manager is configured to allow so). By default the dataset is not verified. If 'opts' contains 'T' the in the dataset object (status bits, meta,...) is trusted, i.e. not reset (if the dataset manager is configured to allow so). Returns 0 on success, -1 on failure ; Reimplemented from TDataSetManager.; Definition at line 1598 of file TDataSetManagerFile.cxx. ◆ RemoveDataSet() [1/2]. Bool_t TDataSetManagerFile::RemoveDataSet ; (; const char * ; group, . const char * ; user, . const char * ; dsName . ). protected . Removes the indicated dataset. ; Definition at line 1544 of file TDataSetManagerFile.cxx. ◆ RemoveDataSet() [2/2]. Bool_t TDataSetManagerFile::RemoveDataSet ; (; const char * ; uri). overridevirtual . Removes the indicated dataset. ; Reimplemented from TDataSetManager.; Definition at line 1930 of file TDataSetManagerFile.cxx. ◆ ScanDataSet() [1/2]. Int_t TDataSetManagerFile::ScanDataSet ; (; const char * ; group, . const char * ; user, . const char * ; dsNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:31835,config,configured,31835,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,1,['config'],['configured']
Modifiability,"gerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooCategoryProxy_rhoQ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooNonCPEigenDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxy_wQ; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNonCPEigenDecay.html:41583,config,configuration,41583,root/html526/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html526/RooNonCPEigenDecay.html,1,['config'],['configuration']
Modifiability,"gerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyc; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooExponential.html:42072,config,configuration,42072,root/html534/RooExponential.html,https://root.cern,https://root.cern/root/html534/RooExponential.html,2,['config'],['configuration']
Modifiability,"ges conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTHtml.html:1759,variab,variables,1759,doc/v632/classTHtml.html,https://root.cern,https://root.cern/doc/v632/classTHtml.html,2,['variab'],['variables']
Modifiability,"ges, turn off printing by setting verbose and debug flag appropriately. void WaitForKeyboard(); wait for keyboard input, for debugging. void PrintNetwork() const; print network representation, for debugging. void PrintLayer(TObjArray* layer) const; print a single layer, for debugging. void PrintNeuron(TMVA::TNeuron* neuron) const; print a neuron, for debugging. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); get the mva value generated by the NN. const std::vector<Float_t> & GetRegressionValues(); get the regression value generated by the NN. const std::vector<Float_t> & GetMulticlassValues(); get the multiclass classification values generated by the NN. void AddWeightsXMLTo(void* parent) const; create XML description of ANN classifier. void ReadWeightsFromXML(void* wghtnode); read MLP from xml weight file. void ReadWeightsFromStream(istream& istr); destroy/clear the network then read it back in from the weights file. const TMVA::Ranking* CreateRanking(); compute ranking of input variables by summing function of weights. void CreateWeightMonitoringHists(const TString& bulkname, vector<TH1*>* hv = 0) const. void WriteMonitoringHistosToFile() const; write histograms to file. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. Bool_t Debug() const; who the hell makes such strange Debug flags that even use ""global pointers"".. MethodANNBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir); constructors dictated by subclassing off of MethodBase. void SetActivation(TMVA::TActivation* activation); setters for subclasses. void SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator). void Train(); this will have to be overridden by every subclass. Double_t GetNetworkOutput(); { return GetOutputNeuron()->GetActivationValue(); }. Int_t NumCycles(); accessors. { return fNcycles; }. TNeuron* GetInputNeuron",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodANNBase.html:23775,variab,variables,23775,root/html602/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodANNBase.html,2,['variab'],['variables']
Modifiability,"ges, turn off printing by setting verbose and debug flag appropriately. void WaitForKeyboard(); wait for keyboard input, for debugging. void PrintNetwork() const; print network representation, for debugging. void PrintLayer(TObjArray* layer) const; print a single layer, for debugging. void PrintNeuron(TMVA::TNeuron* neuron) const; print a neuron, for debugging. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); get the mva value generated by the NN. const std::vector<Float_t> & GetRegressionValues(); get the regression value generated by the NN. const std::vector<Float_t> & GetMulticlassValues(); get the multiclass classification values generated by the NN. void AddWeightsXMLTo(void* parent) const; create XML description of ANN classifier. void ReadWeightsFromXML(void* wghtnode); read MLP from xml weight file. void ReadWeightsFromStream(istream& istr); destroy/clear the network then read it back in from the weights file. const TMVA::Ranking* CreateRanking(); compute ranking of input variables by summing function of weights. void CreateWeightMonitoringHists(const TString& bulkname, vector<TH1*>* hv = 0) const. void WriteMonitoringHistosToFile() const; write histograms to file. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. Bool_t Debug() const; who the hell makes such strange Debug flags that even use ""global pointers"".. void SetActivation(TMVA::TActivation* activation); setters for subclasses. void SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator). void Train(); this will have to be overridden by every subclass. Double_t GetNetworkOutput(); { return GetOutputNeuron()->GetActivationValue(); }. Int_t NumCycles(); accessors. { return fNcycles; }. TNeuron* GetInputNeuron(Int_t index); { return (TNeuron*)fInputLayer->At(index); }. TNeuron* GetOutputNeuron(Int_t index = 0); { return fOutputNeurons.at(index); }. » Author: Andreas Hoecker, Peter Speckmayer, Matt Jachowski » Copyright (c) 2005: *; » Last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodANNBase.html:21024,variab,variables,21024,root/html528/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodANNBase.html,1,['variab'],['variables']
Modifiability,"ges, turn off printing by setting verbose and debug flag appropriately. void WaitForKeyboard(); wait for keyboard input, for debugging. void PrintNetwork() const; print network representation, for debugging. void PrintLayer(TObjArray* layer) const; print a single layer, for debugging. void PrintNeuron(TMVA::TNeuron* neuron) const; print a neuron, for debugging. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); get the mva value generated by the NN. const std::vector<Float_t> & GetRegressionValues(); get the regression value generated by the NN. const std::vector<Float_t> & GetMulticlassValues(); get the multiclass classification values generated by the NN. void AddWeightsXMLTo(void* parent) const; create XML description of ANN classifier. void ReadWeightsFromXML(void* wghtnode); read MLP from xml weight file. void ReadWeightsFromStream(istream& istr); destroy/clear the network then read it back in from the weights file. const TMVA::Ranking* CreateRanking(); compute ranking of input variables by summing function of weights. void CreateWeightMonitoringHists(const TString& bulkname, vector<TH1*>* hv = 0) const. void WriteMonitoringHistosToFile() const; write histograms to file. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. Bool_t Debug() const; who the hell makes such strange Debug flags that even use ""global pointers"".. void SetActivation(TMVA::TActivation* activation); setters for subclasses. void SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator). void Train(); this will have to be overridden by every subclass. Double_t GetNetworkOutput(); { return GetOutputNeuron()->GetActivationValue(); }. Int_t NumCycles(); accessors. { return fNcycles; }. TNeuron* GetInputNeuron(Int_t index); { return (TNeuron*)fInputLayer->At(index); }. TNeuron* GetOutputNeuron(Int_t index = 0); { return fOutputNeurons.at(index); }. » Author: Andreas Hoecker, Peter Speckmayer, Matt Jachowski, Jan Therhaag » Copyright (c) 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodANNBase.html:21644,variab,variables,21644,root/html530/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodANNBase.html,3,['variab'],['variables']
Modifiability,"get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  temperature.CThis tutorial illustrates how to use the highlight mode with trees ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unfold;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:169866,variab,variable,169866,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['variab'],['variable']
Modifiability,"getSamples () const;  return the vector of sample names, used to build the morph func ;  ; RooAbsReal * getSampleWeight (const char *name);  retrieve the weight (prefactor) of a sample with the given name ;  ; double getScale ();  get energy scale of the EFT expansion ;  ; RooProduct * getSumElement (const char *name) const;  return the RooProduct that is the element of the RooRealSumPdfi corresponding to the given sample name ;  ; bool hasParameter (const char *paramname) const;  check if a parameter of the given name is contained in the list of known parameters ;  ; void insert (RooWorkspace *ws);  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  check if this PDF is a binned distribution in the given observable ;  ; bool isCouplingUsed (const char *couplname);  check if there is any morphing power provided for the given coupling morphing power is provided as soon as any two samples provide different, non-zero values for this coupling ;  ; bool isParameterConstant (const char *paramname) const;  return true if the parameter with the given name is set constant, false otherwise ;  ; bool isParameterUsed (const char *paramname) const;  check if there is any morphing power provided for the given parameter morphing power is provided as soon as any two samples provide different, non-zero values for this parameter ;  ; int nParameters () const;  return the number of parameters in this morphing function ;  ; int nPolynomials () const;  return the number of samples in this morphing function ;  ; int nSamples () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  retrieve the sample Hint ;  ; void printCouplings () const;  print a set of couplings ;  ; void printEvaluation () const;  print the contributing samples and their respective weights ;  ; void printFlags () const;  print the flags and their current values ;  ; void printMetaArgs (std::ostream &os) const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:9411,coupling,coupling,9411,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['coupling'],['coupling']
Modifiability,"gets. ; The TGPicture class implements pictures and icons used in the different GUI elements and widgets. ; The TGPicturePool class implements a TGPicture cache. TGPictures are created, managed and destroyed by the TGPicturePool. ; Definition at line 25 of file TGPicture.h. Public Member Functions;  ~TGPicture () override;  Delete picture object. ;  ; virtual void Draw (Handle_t id, GContext_t gc, Int_t x, Int_t y) const;  Draw a picture. ;  ; UInt_t GetHeight () const;  ; Pixmap_t GetMask () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Pixmap_t GetPicture () const;  ; UInt_t GetWidth () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsScaled () const;  ; void Print (Option_t *option="""") const override;  Print picture info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicture.html:1354,inherit,inherited,1354,doc/master/classTGPicture.html,https://root.cern,https://root.cern/doc/master/classTGPicture.html,1,['inherit'],['inherited']
Modifiability,"gets. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' (one unifiend PDEFoam was; trained) the function returns the content of the cell, which; corresponds to the current TMVA::Event, i.e. D =; N_sig/(N_bg+N_sig). In case of 'fSigBgSeparated==true' (two separate PDEFoams were; trained) the function returns. D = Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'. const std::vector<Float_t>& GetMulticlassValues(); Get the multiclass MVA response for the PDEFoam classifier. The; returned MVA values are normalized, i.e. their sum equals 1. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables from the number of cuts made; in each PDEFoam dimension. The PDEFoam dimension (the variable); for which the most cuts were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell to start the counting from. - nCuts - the number of cuts are saved in this vector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. TMVA::PDEFoam* InitFoam(TString , TMVA::EFoamType , UInt_t cls = 0); Create a new PDEFoam, set the PDEFoam options (nCells, nBin,; Xmin, Xmax, etc.) and initialize the PDEFoam by calling; pdefoam->Initialize(). Parameters:. - foamcaption - name of PDEFoam object. - ft - type of PDEFoam; Candidates are:; - kSeparate - creates TMVA::PDEFoamEvent; - kDiscr - creates TMVA::PDEFoamDiscriminant; - kMonoTarget - creates TMVA::PDEFoamTarget; - kMultiTarget - creates TMVA::MultiTarget; - kMultiClass - creates TMVA::PDEFoamDiscriminant. If 'fDTSeparation != kFoam' then a TMVA::PDE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDEFoam.html:22318,variab,variable,22318,root/html530/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDEFoam.html,2,['variab'],['variable']
Modifiability,"gfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TMapFile * Create (const char *name, Option_t *option=""READ"", Int_t size=kDefaultMapSize, const char *title="""");  Create a memory mapped file. ;  ; static const char * DeclFileName ();  ; static void SetMapAddress (Longptr_t addr);  Set preferred map address. ;  ; static TMapFile * WhichMapFile (void *addr);  ;  Static Public Member Functions inherited from TVirtualMapFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMapFile ();  Default ctor. Does not much except setting some basic values. ;  ;  TMapFile (const char *name, const char *title, Option_t *option, Int_t size, TMapFile *&newMapFile);  Create a memory mapped file. ;  ;  TMapFile (const TMapFile &f, Longptr_t offset=0);  Private copy ctor. ;  ; Int_t AcquireSemaphore ();  Acquire semaphore. Returns 0 if OK, -1 on error. ;  ; void CreateSemaphore (Int_t pid=0);  Create semaphore used for synchronizing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMapFile.html:13046,inherit,inherited,13046,doc/master/classTMapFile.html,https://root.cern,https://root.cern/doc/master/classTMapFile.html,2,['inherit'],['inherited']
Modifiability,"gger << ""-"";; 920 logger << Endl;; 921 ; 922 // the numbers; 923 for (UInt_t irow=0; irow<nvar; irow++) {; 924 logger << setw(maxL) << V[irow] << "":"";; 925 logger << setw(maxV+1) << Form( format.Data(), values[irow] );; 926 logger << Endl;; 927 }; 928 ; 929 // bar line; 930 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 931 logger << Endl;; 932}; 933 ; 934////////////////////////////////////////////////////////////////////////////////; 935/// formatted output of matrix (with labels); 936 ; 937void TMVA::Tools::FormattedOutput( const TMatrixD& M, const std::vector<TString>& V, MsgLogger& logger ); 938{; 939 // sanity check: matrix must be quadratic; 940 UInt_t nvar = V.size();; 941 if ((UInt_t)M.GetNcols() != nvar || (UInt_t)M.GetNrows() != nvar) {; 942 logger << kFATAL << ""<FormattedOutput> fatal error with dimensions: ""; 943 << M.GetNcols() << "" OR "" << M.GetNrows() << "" != "" << nvar << "" ==> abort"" << Endl;; 944 }; 945 ; 946 // get length of each variable, and maximum length; 947 UInt_t minL = 7;; 948 UInt_t maxL = minL;; 949 std::vector<UInt_t> vLengths;; 950 for (UInt_t ivar=0; ivar<nvar; ivar++) {; 951 vLengths.push_back(TMath::Max( (UInt_t)V[ivar].Length(), minL ));; 952 maxL = TMath::Max( vLengths.back(), maxL );; 953 }; 954 ; 955 // count column length; 956 UInt_t clen = maxL+1;; 957 for (UInt_t icol=0; icol<nvar; icol++) clen += vLengths[icol]+1;; 958 ; 959 // bar line; 960 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 961 logger << Endl;; 962 ; 963 // title bar; 964 logger << setw(maxL+1) << "" "";; 965 for (UInt_t icol=0; icol<nvar; icol++) logger << setw(vLengths[icol]+1) << V[icol];; 966 logger << Endl;; 967 ; 968 // the numbers; 969 for (UInt_t irow=0; irow<nvar; irow++) {; 970 logger << setw(maxL) << V[irow] << "":"";; 971 for (UInt_t icol=0; icol<nvar; icol++) {; 972 logger << setw(vLengths[icol]+1) << TString::Format( ""%+1.3f"", M(irow,icol) );; 973 }; 974 logger << Endl;; 975 }; 976 ; 977 // bar line; 978 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 979 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:32781,variab,variable,32781,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['variab'],['variable']
Modifiability,"ggered, so that the interpreter is invoked only once for all computation graphs:; 1012 ; 1013~~~{.cpp}; 1014// assuming df1 and df2 are separate computation graphs, do:; 1015auto h1 = df1.Histo1D(""x"");; 1016auto h2 = df2.Histo1D(""y"");; 1017h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; 1018h2->Draw(""SAME"");; 1019 ; 1020// do not:; 1021auto h1 = df1.Histo1D(""x"");; 1022h1->Draw(); // we just-in-time compile here; 1023auto h2 = df2.Histo1D(""y"");; 1024h2->Draw(""SAME""); // we just-in-time compile again here, as the second Histo1D call is new; 1025~~~; 1026 ; 1027\anchor more-features; 1028## More features; 1029Here is a list of the most important features that have been omitted in the ""Crash course"" for brevity.; 1030You don't need to read all these to start using RDataFrame, but they are useful to save typing time and runtime.; 1031 ; 1032\anchor systematics; 1033### Systematic variations; 1034 ; 1035Starting from ROOT v6.26, RDataFrame provides a flexible syntax to define systematic variations.; 1036This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations; 1037of normal RDataFrame results using \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"". In between these steps, no other change; 1038to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated; 1039through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied; 1040results. \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" is included in header `ROOT/RDFHelpers.hxx`. The compiled C++ programs must include this header; 1041explicitly, this is not required for ROOT macros. ; 1042 ; 1043An example usage of Vary() and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in C++:; 1044 ; 1045~~~{.cpp}; 1046auto nominal_hx =; 1047 df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:59996,flexible,flexible,59996,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['flexible'],['flexible']
Modifiability,"ggle batch mode.Definition TCanvas.cxx:1957; TCanvas::Deletevoid Delete(Option_t *="""") overrideDelete this object.Definition TCanvas.h:120; TCanvas::UseGLBool_t UseGL() constDefinition TCanvas.h:228; TCanvas::ResizeOpaquevoid ResizeOpaque(Int_t set=1)Set option to resize objects/pads in a canvas.Definition TCanvas.cxx:1759; TCanvas::ToggleToolBarvirtual void ToggleToolBar()Toggle toolbar.Definition TCanvas.cxx:2442; TCanvas::SetRetainedvoid SetRetained(Bool_t retained=kTRUE)Definition TCanvas.h:218; TCanvas::OpaqueResizingBool_t OpaqueResizing() const overrideDefinition TCanvas.h:181; TCanvas::DrawClonePadvirtual TObject * DrawClonePad()Draw a clone of this canvas into the current pad In an interactive session, select the destination/cu...Definition TCanvas.cxx:924; TCanvas::ResetDrawnvoid ResetDrawn()Definition TCanvas.h:192; TContextMenuThis class provides an interface to context sensitive popup menus.Definition TContextMenu.h:44; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TInterpreterThis class defines an abstract interface to a generic command line interpreter.Definition TInterpreter.h:60; TObjLinkWrapper around a TObject so it can be stored in a TList.Definition TList.h:123; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::MayNotUsevoid MayNotUse(const char *method) constUse this method to signal that a method (defined in a base class) may not be called in a derived clas...Definition TObject.cxx:1046; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::Pickvirtual TPad * Pick(Int_t px, Int_t py, TObjLink *&pickobj)Search for an object at pixel position px,py.Definition TPad.cxx:4657; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TThread<div class=""legacybo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:31470,config,configurable,31470,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,1,['config'],['configurable']
Modifiability,"gh = 0;; 859 return -1;; 860 }; 861 strcpy(cname,fANames[ipar].Data());; 862 value = fA[ipar];; 863 verr = fParamError[ipar];; 864 vlow = fAMN[ipar];; 865 vhigh = fAMX[ipar];; 866 return 0;; 867}; 868 ; 869////////////////////////////////////////////////////////////////////////////////; 870/// Return name of parameter ipar; 871 ; 872const char *TFumili::GetParName(Int_t ipar) const; 873{; 874 if (ipar < 0 || ipar > fNpar) return """";; 875 return fANames[ipar].Data();; 876}; 877 ; 878////////////////////////////////////////////////////////////////////////////////; 879/// Return errors after MINOs; 880/// not implemented; 881 ; 882Int_t TFumili::GetErrors(Int_t ipar,Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const; 883{; 884 eparab = 0;; 885 globcc = 0;; 886 if (ipar<0 || ipar>=fNpar) {; 887 eplus = 0;; 888 eminus = 0;; 889 return -1;; 890 }; 891 eplus=fParamError[ipar];; 892 eminus=-eplus;; 893 return 0;; 894}; 895 ; 896////////////////////////////////////////////////////////////////////////////////; 897/// Return global fit parameters; 898/// - amin : chisquare; 899/// - edm : estimated distance to minimum; 900/// - errdef; 901/// - nvpar : number of variable parameters; 902/// - nparx : total number of parameters; 903 ; 904Int_t TFumili::GetStats(Double_t &amin, Double_t &edm, Double_t &errdef, Int_t &nvpar, Int_t &nparx) const; 905{; 906 amin = 2*fS;; 907 edm = fGT; //; 908 errdef = 0; // ??; 909 nparx = fNpar;; 910 nvpar = 0;; 911 for(Int_t ii=0; ii<fNpar; ii++) {; 912 if(fPL0[ii]>0.) nvpar++;; 913 }; 914 return 0;; 915}; 916 ; 917////////////////////////////////////////////////////////////////////////////////; 918/// Return Sum(log(i) i=0,n; 919/// used by log-likelihood fits; 920 ; 921Double_t TFumili::GetSumLog(Int_t n); 922{; 923 if (n < 0) return 0;; 924 if (n > fNlog) {; 925 if (fSumLog) delete [] fSumLog;; 926 fNlog = 2*n+1000;; 927 fSumLog = new Double_t[fNlog+1];; 928 Double_t fobs = 0;; 929 for (Int_t j=0;j<=fNlog;j++) {; 930 i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:26831,variab,variable,26831,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['variab'],['variable']
Modifiability,"ght (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDataSet (TEventList *train);  Sets the Training dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (Int_t nEpoch, Option_t *option=""text"", Double_t minE=0);  Train the network. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:14977,inherit,inherited,14977,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['inherit'],['inherited']
Modifiability,"ght (see TParallelCoordVar::GetEvtWeight(Long64_t)). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TParallelCoord(); Default constructor. TParallelCoord(Long64_t nentries); Constructor without a reference to a tree,; the datas must be added afterwards with; TParallelCoord::AddVariable(Double_t*,const char*). TParallelCoord(TTree* tree, Long64_t nentries); Normal constructor, the datas must be added afterwards; with TParallelCoord::AddVariable(Double_t*,const char*). ~TParallelCoord(); Destructor. void AddVariable(Double_t* val, const char* title = """"); Add a variable. void AddVariable(const char* varexp); Add a variable from an expression. void AddSelection(const char* title); Add a selection. void ApplySelectionToTree(); Apply the current selection to the tree. void BuildParallelCoord(TSelectorDraw* selector, Bool_t candle); Call constructor and add the variables. void CleanUpSelections(TParallelCoordRange* range); Clean up the selections from the ranges which could have been deleted; when a variable has been deleted. void DeleteSelection(TParallelCoordSelect* sel); Delete a selection. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute the distance from the TParallelCoord. void Draw(Option_t* options = """"); Draw the parallel coordinates graph. void ExecuteEvent(Int_t entry, Int_t px, Int_t py); Execute the corresponding entry. TParallelCoordSelect* GetCurrentSelection(); Return the selection currently being edited. TEntryList* GetEntryList(Bool_t sel = kTRUE); Get the whole entry list or one for a selection. Double_t GetGlobalMax(); return the global maximum. Double_t GetGlobalMin(); return the global minimum. Int_t GetNbins(); get the binning of the histograms. TParallelCoordSelect* GetSelection(const char* title); Get a selection from its title. TTree* GetTree(); return the tree if fTree is defined. If not, the method try to load the tree; from fTreeFileName. Double_t* GetVariable(const char* var); Get the variables",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParallelCoord.html:13936,variab,variable,13936,root/html530/TParallelCoord.html,https://root.cern,https://root.cern/root/html530/TParallelCoord.html,5,['variab'],['variable']
Modifiability,"ght take short cuts; 5901 ; 5902TClass::ENewType TClass::IsCallingNew(); 5903{; 5904 return TClass__GetCallingNew();; 5905}; 5906 ; 5907////////////////////////////////////////////////////////////////////////////////; 5908/// Return true if the shared library of this class is currently in the a; 5909/// process's memory. Return false, after the shared library has been; 5910/// unloaded or if this is an 'emulated' class created from a file's StreamerInfo.; 5911 ; 5912Bool_t TClass::IsLoaded() const; 5913{; 5914 return fState == kHasTClassInit;; 5915}; 5916 ; 5917////////////////////////////////////////////////////////////////////////////////; 5918/// Returns true if this class inherits from TObject and if the start of; 5919/// the TObject parts is at the very beginning of the objects.; 5920/// Concretely this means that the following code is proper for this class:; 5921/// ~~~ {.cpp}; 5922/// ThisClass *ptr;; 5923/// void *void_ptr = (void)ptr;; 5924/// TObject *obj = (TObject*)void_ptr;; 5925/// ~~~; 5926/// This code would be wrong if 'ThisClass' did not inherit 'first' from; 5927/// TObject.; 5928 ; 5929Bool_t TClass::IsStartingWithTObject() const; 5930{; 5931 if (fProperty==(-1)) Property();; 5932 return TestBit(kStartWithTObject);; 5933}; 5934 ; 5935////////////////////////////////////////////////////////////////////////////////; 5936/// Return kTRUE is the class inherits from TObject.; 5937 ; 5938Bool_t TClass::IsTObject() const; 5939{; 5940 if (fProperty==(-1)) Property();; 5941 return TestBit(kIsTObject);; 5942}; 5943 ; 5944////////////////////////////////////////////////////////////////////////////////; 5945/// Return kTRUE is the class is Foreign (the class does not have a Streamer method).; 5946 ; 5947Bool_t TClass::IsForeign() const; 5948{; 5949 if (fProperty==(-1)) Property();; 5950 // If the property are not set and the class is a pair, hard code that; 5951 // it is a unversioned/Foreign class.; 5952 return TestBit(kIsForeign);; 5953}; 5954 ; 5955///////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:227192,inherit,inherit,227192,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['inherit'],['inherit']
Modifiability,"ght take short cuts; 5968 ; 5969TClass::ENewType TClass::IsCallingNew(); 5970{; 5971 return TClass__GetCallingNew();; 5972}; 5973 ; 5974////////////////////////////////////////////////////////////////////////////////; 5975/// Return true if the shared library of this class is currently in the a; 5976/// process's memory. Return false, after the shared library has been; 5977/// unloaded or if this is an 'emulated' class created from a file's StreamerInfo.; 5978 ; 5979Bool_t TClass::IsLoaded() const; 5980{; 5981 return fState == kHasTClassInit;; 5982}; 5983 ; 5984////////////////////////////////////////////////////////////////////////////////; 5985/// Returns true if this class inherits from TObject and if the start of; 5986/// the TObject parts is at the very beginning of the objects.; 5987/// Concretely this means that the following code is proper for this class:; 5988/// ~~~ {.cpp}; 5989/// ThisClass *ptr;; 5990/// void *void_ptr = (void)ptr;; 5991/// TObject *obj = (TObject*)void_ptr;; 5992/// ~~~; 5993/// This code would be wrong if 'ThisClass' did not inherit 'first' from; 5994/// TObject.; 5995 ; 5996Bool_t TClass::IsStartingWithTObject() const; 5997{; 5998 if (fProperty==(-1)) Property();; 5999 return TestBit(kStartWithTObject);; 6000}; 6001 ; 6002////////////////////////////////////////////////////////////////////////////////; 6003/// Return kTRUE is the class inherits from TObject.; 6004 ; 6005Bool_t TClass::IsTObject() const; 6006{; 6007 if (fProperty==(-1)) Property();; 6008 return TestBit(kIsTObject);; 6009}; 6010 ; 6011////////////////////////////////////////////////////////////////////////////////; 6012/// Return kTRUE is the class is Foreign (the class does not have a Streamer method).; 6013 ; 6014Bool_t TClass::IsForeign() const; 6015{; 6016 if (fProperty==(-1)) Property();; 6017 // If the property are not set and the class is a pair, hard code that; 6018 // it is a unversioned/Foreign class.; 6019 return TestBit(kIsForeign);; 6020}; 6021 ; 6022///////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:229943,inherit,inherit,229943,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['inherit'],['inherit']
Modifiability,"ghtGeneral = std::begin (weights);; 1646// std::vector<Pattern> prePatternTrain (trainPattern.size ());; 1647// std::vector<Pattern> prePatternTest (testPattern.size ());; 1648 ; 1649// size_t _inputSize = inputSize ();; 1650 ; 1651// // transform pattern using the created preNet; 1652// auto initializePrePattern = [&](const std::vector<Pattern>& pttrnInput, std::vector<Pattern>& pttrnOutput); 1653// {; 1654// pttrnOutput.clear ();; 1655// std::transform (std::begin (pttrnInput), std::end (pttrnInput),; 1656// std::back_inserter (pttrnOutput),; 1657// [](const Pattern& p); 1658// {; 1659// Pattern pat (p.input (), p.input (), p.weight ());; 1660// return pat;; 1661// });; 1662// };; 1663 ; 1664// initializePrePattern (trainPattern, prePatternTrain);; 1665// initializePrePattern (testPattern, prePatternTest);; 1666 ; 1667// std::vector<double> originalDropFractions = settings.dropFractions ();; 1668 ; 1669// for (auto& _layer : layers ()); 1670// {; 1671// // compute number of weights (as a function of the number of incoming nodes); 1672// // fetch number of nodes; 1673// size_t numNodes = _layer.numNodes ();; 1674// size_t _numWeights = _layer.numWeights (_inputSize);; 1675 ; 1676// // ------------------; 1677// DNN::Net preNet;; 1678// if (!originalDropFractions.empty ()); 1679// {; 1680// originalDropFractions.erase (originalDropFractions.begin ());; 1681// settings.setDropOut (originalDropFractions.begin (), originalDropFractions.end (), settings.dropRepetitions ());; 1682// }; 1683// std::vector<double> preWeights;; 1684 ; 1685// // define the preNet (pretraining-net) for this layer; 1686// // outputSize == inputSize, because this is an autoencoder;; 1687// preNet.setInputSize (_inputSize);; 1688// preNet.addLayer (DNN::Layer (numNodes, _layer.activationFunctionType ()));; 1689// preNet.addLayer (DNN::Layer (_inputSize, DNN::EnumFunction::LINEAR, DNN::ModeOutputValues::DIRECT));; 1690// preNet.setErrorFunction (DNN::ModeErrorFunction::SUMOFSQUARES);; 1691// preNe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:55441,layers,layers,55441,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['layers'],['layers']
Modifiability,"ghts is automatically triggered and the sum of the squares of weights is incremented; 500/// by w^2 in the bin corresponding to namex,namey; 501///; 502/// The function returns the corresponding global bin number which has its content; 503/// incremented by w; 504 ; 505Int_t TH2::Fill(const char *namex, const char *namey, Double_t w); 506{; 507 Int_t binx, biny, bin;; 508 fEntries++;; 509 binx = fXaxis.FindBin(namex);; 510 biny = fYaxis.FindBin(namey);; 511 if (binx <0 || biny <0) return -1;; 512 bin = biny*(fXaxis.GetNbins()+2) + binx;; 513 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 514 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 515 AddBinContent(bin,w);; 516 if (binx == 0 || binx > fXaxis.GetNbins()) return -1;; 517 if (biny == 0 || biny > fYaxis.GetNbins()) return -1;; 518 ; 519 Double_t z= w;; 520 fTsumw += z;; 521 fTsumw2 += z*z;; 522 // skip computation of the statistics along axis that have labels (can be extended and are alphanumeric); 523 UInt_t labelBitMask = GetAxisLabelStatus();; 524 if (labelBitMask != (TH1::kXaxis | TH1::kYaxis)) {; 525 Double_t x = (labelBitMask & TH1::kXaxis) ? 0 : fXaxis.GetBinCenter(binx);; 526 Double_t y = (labelBitMask & TH1::kYaxis) ? 0 : fYaxis.GetBinCenter(biny);; 527 fTsumwx += z * x;; 528 fTsumwx2 += z * x * x;; 529 fTsumwy += z * y;; 530 fTsumwy2 += z * y * y;; 531 fTsumwxy += z * x * y;; 532 }; 533 return bin;; 534}; 535 ; 536 ; 537////////////////////////////////////////////////////////////////////////////////; 538/// Increment cell defined by namex,y by a weight w; 539///; 540/// - if x or/and y is less than the low-edge of the corresponding axis first bin,; 541/// the Underflow cell is incremented.; 542/// - if x or/and y is equal to or greater than the upper edge of corresponding axis last bin,; 543/// the Overflow cell is incremented.; 544///; 545/// - If the weight is not equal to 1, the storage of the sum of squares of; 546/// weights is automatically trigge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:20380,extend,extended,20380,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['extend'],['extended']
Modifiability,"ghtsFromStream(istream& istr); read the weights (BDT coefficients). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). Double_t GetMvaValue(Double_t* err, Double_t* errUpper, UInt_t useNTrees); Return the MVA value (range [-1;1]) that classifies the; event according to the majority vote from the total number of; decision trees. Double_t PrivateGetMvaValue(TMVA::Event& ev, Double_t* err = 0, Double_t* errUpper = 0, UInt_t useNTrees = 0); Return the MVA value (range [-1;1]) that classifies the; event according to the majority vote from the total number of; decision trees. const std::vector<Float_t>& GetMulticlassValues(); get the multiclass MVA response for the BDT classifier. const std::vector<Float_t> & GetRegressionValues(); get the regression value generated by the BDTs. void WriteMonitoringHistosToFile( void ); Here we could write some histograms created during the processing; to the output file. vector< Double_t > GetVariableImportance(); Return the relative variable importance, normalized to all; variables together having the importance 1. The importance in; evaluated as the total separation-gain that this variable had in; the decision trees (weighted by the number of events). Double_t GetVariableImportance(UInt_t ivar); Returns the measure for the variable importance of variable ""ivar""; which is later used in GetVariableImportance() to calculate the; relative variable importances. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables. void GetHelpMessage() const; Get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". void MakeClassSpecific(ostream& , const TString& ) const; make ROOT-independent C++ class for classifier response (classifier-specific implementation). void MakeClassSpecificHeader(ostream& , const TString& ) const; specific class header. void MakeClassInstantiateNode(TMVA::DecisionTreeNode* n, ostream& fout, const TString& className) const; recursiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBDT.html:33355,variab,variable,33355,root/html530/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBDT.html,4,['variab'],"['variable', 'variables']"
Modifiability,"ghtsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [dataset] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'm_jj' <---> Output : variable 'm_jj'; : Input : variable 'm_jjj' <---> Output : variable 'm_jjj'; : Input : variable 'm_lv' <---> Output : variable 'm_lv'; : Input : variable 'm_jlv' <---> Output : variable 'm_jlv'; : Input : variable 'm_bb' <---> Output : variable 'm_bb'; : Input : variable 'm_wbb' <---> Output : variable 'm_wbb'; : Input : variable 'm_wwbb' <---> Output : variable 'm_wwbb'; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (Dense) (None, 64) 4160 ; ; dense_4 (Dense) (None, 2) 130 ; ; =================================================================; Total params: 13122 (51.26 KB); Trainable params: 13122 (51.26 KB); Non-trainable params: 0 (0.00 Byte); _________________________________________________________________; (TString) ""python3""[7]; Factory : Booking method: ␛[1mPyKeras␛[0m; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Loading Keras Model ; : Loaded model from file: Higgs_model.h5; Factory : ␛[1mTrain all methods␛[0m; Factory : [dataset] : Create Tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:13342,variab,variable,13342,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,14,['variab'],['variable']
Modifiability,"ghtsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [dataset] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'm_jj' <---> Output : variable 'm_jj'; : Input : variable 'm_jjj' <---> Output : variable 'm_jjj'; : Input : variable 'm_lv' <---> Output : variable 'm_lv'; : Input : variable 'm_jlv' <---> Output : variable 'm_jlv'; : Input : variable 'm_bb' <---> Output : variable 'm_bb'; : Input : variable 'm_wbb' <---> Output : variable 'm_wbb'; : Input : variable 'm_wwbb' <---> Output : variable 'm_wwbb'; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (Dense) (None, 64) 4160 ; ; dense_4 (Dense) (None, 2) 130 ; ; =================================================================; Total params: 13122 (51.26 KB); Trainable params: 13122 (51.26 KB); Non-trainable params: 0 (0.00 Byte); _________________________________________________________________; Factory : Booking method: ␛[1mPyKeras␛[0m; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Loading Keras Model ; : Loaded model from file: model_higgs.h5; Factory : ␛[1mTrain all methods␛[0m; Factory : [dataset] : Create Transformation ""I"" with events from all classes.; : ; : Transformation, Variable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:13355,variab,variable,13355,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,14,['variab'],['variable']
Modifiability,"gilRaii;; 389 ; 390 // verify arguments; 391 if (!name) {; 392 std::cerr << ""Error: no file name specified."" << std::endl;; 393 return;; 394 }; 395 ; 396 std::vector<std::string> args(argc);; 397 for (int i = 0; i < argc; ++i) {; 398 args[i] = argv[i];; 399 }; 400 CPyCppyy::ExecScript(name, args);; 401}; 402 ; 403////////////////////////////////////////////////////////////////////////////////; 404/// Executes a Python command within the current Python environment.; 405///; 406/// This function initializes the Python environment if it is not already; 407/// initialized. It then executes the specified Python command string using the; 408/// Python C API.; 409///; 410/// In the Python command, you can change the value of a special TPyResult; 411/// object returned by TPyBuffer(). If the optional result parameter is; 412/// non-zero, the result parameter will be swapped with a std::any variable on; 413/// the Python side. You need to define this variable yourself, and it needs to; 414/// be of type std::any and its name needs to be `""_anyresult""` by default.; 415/// Like this, you can pass information from Python back to C++.; 416///; 417/// \param cmd The Python command to be executed as a string.; 418/// \param result Optional pointer to a std::any object that can be used to; 419/// transfer results from Python to C++.; 420/// \param resultName Name of the Python variable that is swapped over to the std::any result.; 421/// The default value is `""_anyresult""`.; 422/// \return bool Returns `true` if the command was successfully executed,; 423/// otherwise returns `false`.; 424 ; 425Bool_t TPython::Exec(const char *cmd, std::any *result, std::string const &resultName); 426{; 427 // setup; 428 if (!Initialize()); 429 return kFALSE;; 430 ; 431 PyGILRAII gilRaii;; 432 ; 433 std::stringstream command;; 434 // Add the actual command; 435 command << cmd;; 436 // Swap the std::any with the one in the C++ world if required; 437 if (result) {; 438 command << ""; ROOT.Internal.Swap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPython_8cxx_source.html:13729,variab,variable,13729,doc/master/TPython_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPython_8cxx_source.html,1,['variab'],['variable']
Modifiability,"ging for dirty state changes; Bool_t_weightSqApply weights squared?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); Construct likelihood from given p.d.f and (binned or unbinned dataset). Extended() -- Include extended term in calculation; NumCPU() -- Activate parallel processing feature; Range() -- Fit only selected region; SumCoefRange() -- Set the range in which to interpret the coefficients of RooAddPdf components; SplitRange() -- Fit range is split by index catory of simultaneous PDF; ConditionalObservables() -- Define conditional observables; Verbose() -- Verbose output of GOF framework classes; CloneData() -- Clone input dataset for internal use (default is kTRUE). RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE); Construct likelihood from given p.d.f and (binned or unbinned dataset); For internal use. RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooArgSet& projDeps, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE); Construct likelihood from given p.d.f and (binned or u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNLLVar.html:37424,extend,extended,37424,root/html528/RooNLLVar.html,https://root.cern,https://root.cern/root/html528/RooNLLVar.html,3,['extend'],['extended']
Modifiability,"gisterProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCFunction2Ref< VO, VI1, VI2 > func;  ; RooRealProxy x;  ; RooRealProxy y;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotComp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2PdfBinding.html:67382,inherit,inherited,67382,doc/master/classRooCFunction2PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2PdfBinding.html,1,['inherit'],['inherited']
Modifiability,"gisterProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; const ROOT::Math::IBaseFunctionOneDim * func;  ; RooRealProxy var;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DBinding.html:55117,inherit,inherited,55117,doc/master/classRooFunctor1DBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DBinding.html,1,['inherit'],['inherited']
Modifiability,gistered PDFs. ;  ; RooObjCacheManager _partIntMgr;  ! Component normalization manager ;  ; TList _pdfProxyList;  List of PDF proxies (named after applicable category state) ;  ; const TNamed * _plotCoefNormRange = nullptr;  ; RooSetProxy _plotCoefNormSet;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:72603,inherit,inherited,72603,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['inherit'],['inherited']
Modifiability,"gisters the window. ;  ; virtual void DestroySubwindows ();  destroy sub windows ;  ; virtual void DestroyWindow ();  destroy window ;  ; virtual UInt_t GetEditDisabled () const;  ; const char * GetName () const override;  Return unique name, used in SavePrimitive methods. ;  ; const TGWindow * GetParent () const;  ; virtual Bool_t HandleExpose (Event_t *event);  ; virtual Bool_t HandleIdleEvent (TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBrowser.html:19802,inherit,inherited,19802,doc/master/classTEveBrowser.html,https://root.cern,https://root.cern/doc/master/classTEveBrowser.html,3,['inherit'],['inherited']
Modifiability,"given configuration for any numeric integration, if necessary; Range(const char* name) -- Integrate only over given range. Multiple ranges may be specified; by passing multiple Range() arguments. RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet* nset, 				 const RooNumIntConfig* cfg, const char* rangeName); Create an object that represents the integral of the function over one or more observables listed in iset; The actual integration calculation is only performed when the return object is evaluated. The name; of the integral object is automatically constructed from the name of the input function, the variables; it integrates and the range integrates over. If nset is specified the integrand is request; to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; the integral is performed over the named range, otherwise it is performed over the domain of each; integrated observable. If cfg is specified it will be used to configure any numeric integration; aspect of the integral. It will not force the integral to be performed numerically, which is; decided automatically by RooRealIntegral. RooAbsReal* createIntObj(const RooArgSet& iset, const RooArgSet* nset, const RooNumIntConfig* cfg, const char* rangeName) const; Utility function for createIntegral that creates the actual integreal object. void findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; Utility function for createIntObj() that aids in the construct of recursive integrals; over functions with multiple observables with parameterized ranges. This function; finds in a given set allObs over which integration is requested the largeset subset; of observables that can be integrated simultaneously. This subset consists of; observables with fixed ranges and observables with parameterized ranges whose; parameterization does not depend on any observable that is also integrated. TString integralNameSuffix(const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:36404,config,configure,36404,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['config'],['configure']
Modifiability,"given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void CopyIds (const TPointSet3D &t);  Copy id objects from point-set 't'. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  . Protected Attributes; TRefArray fIds;  ; Bool_t fOwnIds;  ;  Protected Attributes inherited from TPolyMarker3D; Int_t fLastPoint {-1};  ; Int_t fN {0};  ; TString fName;  ; TString fOption;  ; Float_t * fP {nullptr};  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  . Ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPointSet3D.html:16321,inherit,inherited,16321,doc/master/classTPointSet3D.html,https://root.cern,https://root.cern/doc/master/classTPointSet3D.html,1,['inherit'],['inherited']
Modifiability,"giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are the two TEventLists defining events; to be used during the neural net training.; Both the TTree and the TEventLists can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are the two TEventLists defining events; to be used during the neural net training.; Both the TTree and the TEventLists can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:20055,layers,layers,20055,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['layers'],['layers']
Modifiability,"gle-event inference: "" << prediction[0] << ""\n\n"";; ; // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only a small subset of the dataset; auto x = AsTensor<float>(df2, variables);; auto y = model.Compute(x);; ; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";; std::cout << ""Prediction performed on multiple events: "" << y << ""\n\n"";; ; // 3) Perform inference as part of an RDataFrame graph; // We write a small lambda function that performs for us the inference on; // a dataframe to omit code duplication.; auto make_histo = [&](const std::string &treename) {; ROOT::RDataFrame df(treename, filename);; auto df2 = df.Define(""y"", Compute<4, float>(model), variables);; return df2.Histo1D({treename.c_str(), "";BDT score;N_{Events}"", 30, -0.5, 0.5}, ""y"");; };; ; auto sig = make_histo(""TreeS"");; auto bkg = make_histo(""TreeB"");; ; // Make plot; gStyle->SetOptStat(0);; auto c = new TCanvas("""", """", 800, 800);; ; sig->SetLineColor(kRed);; bkg->SetLineColor(kBlue);; sig->SetLineWidth(2);; bkg->SetLineWidth(2);; bkg->Draw(""HIST"");; sig->Draw(""HIST SAME"");; ; TLegend legend(0.7, 0.7, 0.89, 0.89);; legend.SetBorderSize(0);; legend.AddEntry(""TreeS"", ""Signal"", ""l"");; legend.AddEntry(""TreeB"", ""Background"", ""l"");; legend.Draw();; ; c->DrawClone();; }; c#define c(i)Definition RSha256.hxx:101; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva003__RReader_8C.html:3314,variab,variables,3314,doc/master/tmva003__RReader_8C.html,https://root.cern,https://root.cern/doc/master/tmva003__RReader_8C.html,1,['variab'],['variables']
Modifiability,"globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsAnaConvPdf.h>. Inheritance diagram for RooAbsAnaConvPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsAnaConvPdf() [1/3]. RooAbsAnaConvPdf::RooAbsAnaConvPdf ; (; ). Default constructor, required for persistence. ; Definition at line 85 of file RooAbsAnaConvPdf.cxx. ◆ RooAbsAnaConvPdf() [2/3]. RooAbsAnaConvPdf::RooAbsAnaConvPdf ; (; const char * ; name, . const char * ; title, . const RooResolutionModel & ; model, . RooRealVar & ; cVar . ). Constructor. ; The supplied resolution model must be constructed with the same convoluted variable as this physics model ('convVar') ; Definition at line 97 of file RooAbsAnaConvPdf.cxx. ◆ RooAbsAnaConvPdf() [3/3]. RooAbsAnaConvPdf::RooAbsAnaConvPdf ; (; const RooAbsAnaConvPdf & ; other, . const char * ; name = nullptr . ). Definition at line 113 of file RooAbsAnaConvPdf.cxx. ◆ ~RooAbsAnaConvPdf(). RooAbsAnaConvPdf::~RooAbsAnaConvPdf ; (; ). override . Destructor. ; Definition at line 133 of file RooAbsAnaConvPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN(). double RooAbsAnaConvPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Return analytical integral defined by given code, which is returned by getAnalyticalIntegralWN() ; For unnormalized integrals the returned value is ; \[; \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; \]. where \( \bar{x} \) is the set of coefficient dependents ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:79407,variab,variable,79407,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['variab'],['variable']
Modifiability,"globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3Binding_double_double_double_double_.html:33157,config,configuration,33157,root/html530/RooCFunction3Binding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3Binding_double_double_double_double_.html,1,['config'],['configuration']
Modifiability,"globcc : global correlation coefficient. Int_t GetNumberTotalParameters() const; return the total number of parameters (free + fixed). Int_t GetNumberFreeParameters() const; return the number of free parameters. Double_t GetParError(Int_t ipar) const; return error of parameter ipar. Double_t GetParameter(Int_t ipar) const; return current value of parameter ipar. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const; return current values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter; WARNING! parname must be suitably dimensionned in the calling function. const char * GetParName(Int_t ipar) const; return name of parameter ipar. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Double_t GetSumLog(Int_t i); return Sum(log(i) i=0,n; used by log likelihood fits. Bool_t IsFixed(Int_t ipar) const; return kTRUE if parameter ipar is fixed, kFALSE othersise). void PrintResults(Int_t level, Double_t amin) const; Print fit results. void ReleaseParameter(Int_t ipar); Release parameter ipar. void SetFCN(void* fcn); Specify the address of the fitting algorithm (from the interpreter). void SetFCN(void (*)(Int_t&, Double_t*, Double_t&f, Double_t*, Int_t) fcn); Specify the address of the fitting algorithm. void SetFitMethod(const char* name); ret fit method (chisquare or loglikelihood). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:14159,variab,variable,14159,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,4,['variab'],['variable']
Modifiability,"globcc : global correlation coefficient. Int_t GetNumberTotalParameters() const; return the total number of parameters (free + fixed). Int_t GetNumberFreeParameters() const; return the number of free parameters. Double_t GetParError(Int_t ipar) const; return error of parameter ipar. Double_t GetParameter(Int_t ipar) const; return current value of parameter ipar. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const; return current values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter; WARNING! parname must be suitably dimensionned in the calling function. const char * GetParName(Int_t ipar) const; return name of parameter ipar. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Double_t GetSumLog(Int_t i); return Sum(log(i) i=0,n; used by log likelihood fits. Bool_t IsFixed(Int_t ipar) const; return kTRUE if parameter ipar is fixed, kFALSE othersise). void PrintResults(Int_t level, Double_t amin) const; Print fit results. void ReleaseParameter(Int_t ipar); Release parameter ipar. void SetFCN(void* fcn); Specify the address of the fitting algorithm (from the interpreter). void SetFCN(void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t) fcn); Specify the address of the fitting algorithm. void SetFitMethod(const char* name); ret fit method (chisquare or loglikelihood). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitter.html:14826,variab,variable,14826,root/html602/TFitter.html,https://root.cern,https://root.cern/root/html602/TFitter.html,2,['variab'],['variable']
Modifiability,"gn GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; UnBinData.h; ROOT::Fit::BasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the dat...Definition BasicFCN.h:40; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::FcnAdapterDefinition FcnAdapter.h:27; ROOT::Fit::FitConfig::MinosParamsconst std::vector< unsigned int > & MinosParams() constreturn vector of parameter indices for which the Minos Error will be computedDefinition FitConfig.h:218; ROOT::Fit::FitConfig::UpdateAfterFitbool UpdateAfterFit() constUpdate configuration after a fit using the FitResult.Definition FitConfig.h:211; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetMinosErrorsvoid SetMinosErrors(bool on=true)set Minos errors computation to be performed after fittingDefinition FitConfig.h:229; ROOT::Fit::FitConfig::NormalizeErrorsbool NormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::ParabErrorsbool ParabErrors() constdo analysis for parabolic errorsDefinition FitConfig.h:205; ROOT::Fit::FitConfig::NParunsigned int NPar() constnumber of parameters settingsDefinition FitConfig.h:96; ROOT::Fit::FitConfig::SetParamsSettingsvoid SetParamsSettings(unsigned int npar, const double *params, const double *vstep=nullptr)set the parameter settings from number of parameters and a vector of values and optionally ste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:41289,config,configuration,41289,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['config'],['configuration']
Modifiability,"gn, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1);  Save text attributes as C++ statement(s) on output stream out. ;  ; virtual void SetTextAttributes ();  Invoke the DialogCanvas Text attributes. ;  ; virtual void SetTextColorAlpha (Color_t tcolor, Float_t talpha);  Set a transparent text color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:7591,inherit,inherited,7591,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,1,['inherit'],['inherited']
Modifiability,"gn_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REveLine.hxx>. Inheritance diagram for ROOT::Experimental::REveLine:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveLine() [1/2]. REveLine::REveLine ; (; const std::string & ; name = """", . const std::string & ; title = """", . Int_t ; n_points = 0 . ). Constructor. ; Definition at line 33 of file REveLine.cxx. ◆ REveLine() [2/2]. REveLine::REveLine ; (; const REveLine & ; l). Copy constructor. ; Definition at line 46 of file REveLine.cxx. ◆ ~REveLine(). ROOT::Experimental::REveLine::~REveLine ; (; ). inlineoverride . Definition at line 44 of file REveLine.hxx. Member Function Documentation. ◆ BuildRenderData(). void REveLine::BuildRenderData ; (; ). overridevirtual . Virtual from REveElement. Prepares render data for binary streaming to client. ; Reimplemented from ROOT::Experimental:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:25971,inherit,inherited,25971,doc/master/classROOT_1_1Experimental_1_1REveLine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html,1,['inherit'],['inherited']
Modifiability,"gn_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REvePointSet.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSet() [1/2]. REvePointSet::REvePointSet ; (; const std::string & ; name = """", . const std::string & ; title = """", . Int_t ; n_points = 0 . ). Constructor. ; Definition at line 46 of file REvePointSet.cxx. ◆ REvePointSet() [2/2]. REvePointSet::REvePointSet ; (; const REvePointSet & ; e). Copy constructor. ; Definition at line 66 of file REvePointSet.cxx. ◆ ~REvePointSet(). REvePointSet::~REvePointSet ; (; ). override . Destructor. ; Definition at line 80 of file REvePointSet.cxx. Member Function Documentation. ◆ BuildRenderData(). void REvePointSet::BuildRenderData ; (; ). overridevirtual . Crates 3D point array for rendering. ; Reimplemented from ROOT::Exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:21893,inherit,inherited,21893,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,1,['inherit'],['inherited']
Modifiability,"gn_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REveStraightLineSet.hxx>. Inheritance diagram for ROOT::Experimental::REveStraightLineSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveStraightLineSet() [1/2]. ROOT::Experimental::REveStraightLineSet::REveStraightLineSet ; (; const REveStraightLineSet & ; ). privatedelete . ◆ REveStraightLineSet() [2/2]. REveStraightLineSet::REveStraightLineSet ; (; const std::string & ; n = ""StraightLineSet"", . const std::string & ; t = """" . ). Constructor. ; Definition at line 26 of file REveStraightLineSet.cxx. ◆ ~REveStraightLineSet(). ROOT::Experimental::REveStraightLineSet::~REveStraightLineSet ; (; ). inlineoverride . Definition at line 89 of file REveStraightLineSet.hxx. Member Function Documentation. ◆ AddLine() [1/2]. REveStraightLineSet::Line_t * REveStraightLineSet::AddLine ; (; const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:24449,inherit,inherited,24449,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,1,['inherit'],['inherited']
Modifiability,"gnal efficiency at background efficiency; indicated in theString. ""theString"" must have two entries:; [0]: ""Efficiency""; [1]: the value of background efficiency at which the signal efficiency; is to be returned. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodCuts(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""MC:150:10000:"", TDirectory* theTargetFile = 0). MethodCuts* DynamicCast(TMVA::IMethod* method); this is a workaround which is necessary since CINT is not capable of handling dynamic casts. { return dynamic_cast<MethodCuts*>(method); }. Double_t GetSeparation(TH1* , TH1* ) const; also overwrite --> not computed for cuts. { return -1; }. Double_t GetSeparation(TMVA::PDF* = 0, TMVA::PDF* = 0) const; { return -1; }. Double_t GetSignificance( void ); { return -1; }. Double_t GetmuTransform(TTree* ); { return -1; }. Double_t GetRarity(Double_t , TMVA::Types::ESBType ) const; rarity distributions (signal or background (default) is uniform in [0,1]). { return 0; }. void SetTestSignalEfficiency(Double_t effS); { fTestSignalEff = effS; }. const Ranking* CreateRanking(); ranking of input variables (not available for cuts). { return 0; }. void CheckSetup(); no check of options at this place. {}. void MatchParsToCuts( const std::vector<Double_t>&, Double_t*, Double_t* ); the definition of fit parameters can be different from the actual; cut requirements; these functions provide the matching. » Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodCuts.html:28531,variab,variables,28531,root/html604/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodCuts.html,1,['variab'],['variables']
Modifiability,"gnal efficiency at background efficiency; indicated in theString. ""theString"" must have two entries:; [0]: ""Efficiency""; [1]: the value of background efficiency at which the signal efficiency; is to be returned. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodCuts(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""MC:150:10000:"", TDirectory* theTargetFile = 0). MethodCuts* DynamicCast(TMVA::IMethod* method); this is a workaround which is necessary since CINT is not capable of handling dynamic casts. { return dynamic_cast<MethodCuts*>(method); }. Double_t GetSeparation(TH1* , TH1* ) const; also overwrite --> not computed for cuts. { return -1; }. Double_t GetSeparation(TMVA::PDF* = 0, TMVA::PDF* = 0) const; { return -1; }. Double_t GetSignificance( void ); { return -1; }. Double_t GetmuTransform(TTree* ); { return -1; }. Double_t GetRarity(Double_t , TMVA::Types::ESBType ) const; rarity distributions (signal or background (default) is uniform in [0,1]). { return 0; }. void SetTestSignalEfficiency(Double_t effS); { fTestSignalEff = effS; }. const Ranking* CreateRanking(); ranking of input variables (not available for cuts). { return 0; }. void CheckSetup(); no check of options at this place. {}. void MatchParsToCuts( const std::vector<Double_t>&, Double_t*, Double_t* ); the definition of fit parameters can be different from the actual; cut requirements; these functions provide the matching. » Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodCuts.html:28523,variab,variables,28523,root/html602/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodCuts.html,1,['variab'],['variables']
Modifiability,"gnal emitted when Return/Enter key pressed. ;  ; void SaveChildren (std::ostream &out, TGListTreeItem *item, Int_t &n);  Save child items as a C++ statements on output stream out. ;  ; Int_t SearchChildren (TGListTreeItem *item, Int_t y, Int_t findy, TGListTreeItem **finditem);  Search child item. ;  ; virtual void UpdateChecked (TGListTreeItem *item, Bool_t redraw=kFALSE);  Update the state of the node 'item' according to the children states. ;  ;  Protected Member Functions inherited from TGContainer; virtual void ActivateItem (TGFrameElement *el);  Activate item. ;  ; virtual void DeActivateItem (TGFrameElement *el);  DeActivate item. ;  ; void DoRedraw () override;  Redraw content of container in the viewport region. ;  ; virtual void OnAutoScroll ();  Autoscroll while close to & beyond The Wall. ;  ; virtual void RepeatSearch ();  Repeats search. ;  ; virtual void SearchPattern ();  Search for entry which name begins with pattern. ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:39937,inherit,inherited,39937,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['inherit'],['inherited']
Modifiability,"gnal test eventDefinition DataLoader.cxx:268; TMVA::DataLoader::SetSignalTreevoid SetSignalTree(TTree *signal, Double_t weight=1.0)Definition DataLoader.cxx:432; TMVA::DataLoader::SetInputTreesvoid SetInputTrees(const TString &signalFileName, const TString &backgroundFileName, Double_t signalWeight=1.0, Double_t backgroundWeight=1.0)Definition DataLoader.cxx:464; TMVA::DataLoader::~DataLoadervirtual ~DataLoader()Definition DataLoader.cxx:96; TMVA::DataLoader::AddTreevoid AddTree(TTree *tree, const TString &className, Double_t weight=1.0, const TCut &cut="""", Types::ETreeType tt=Types::kMaxTreeType)Definition DataLoader.cxx:351; TMVA::DataLoader::SetInputVariablesvoid SetInputVariables(std::vector< TString > *theVariables)deprecatedDefinition DataLoader.cxx:541; TMVA::DataLoader::SetCutvoid SetCut(const TString &cut, const TString &className="""")Definition DataLoader.cxx:575; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::DataLoader::PrepareFoldDataSetvoid PrepareFoldDataSet(CvSplit &s, UInt_t foldNumber, Types::ETreeType tt=Types::kTraining)Function for assigning the correct folds to the testing or training set.Definition DataLoader.cxx:670; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMVA::DataSetManagerClass that contains all the data information.Definition DataSetManager.h:51; TMVA::MsgLogger::SetSourcevoid SetSource(const std::string &source)Definition MsgLogger.h:68; TMVA::Types::kMulticlass@ kMulticlassDefinition Types.h:129; TMVA::Types::kNoAnalysisType@ kNoAnalysisTypeDefinition Types.h:130; TMVA::Types::kRegression@ kRegressionDefinition Types.h:128; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TMVA::Types::kMaxTreeType@ kMaxTreeTypealso used as temporary storage for trees not yet assigned for testing;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8cxx_source.html:37911,variab,variable,37911,doc/master/DataLoader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html,1,['variab'],['variable']
Modifiability,"gnal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TGTextView; static const TGFont * fgDefaultFont = nullptr;  ; static TGGC * fgDefaultGC = nullptr;  ; static const TGGC * fgDefaultSelectedBackgroundGC = nullptr;  ; static TGGC * fgDefaultSelectedGC = nullptr;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fgDbw = 0;  ; static Int_t fgDbx = 0;  ; static Int_t fgDby = 0;  ; static Pixel_t fgDefaultFrameBackground = 0;  ; static Pixel_t fgDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGTextViewStream.h>. Inheritance diagram for TGTextViewostream:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGTextViewostream() [1/3]. TGTextViewostream::TGTextViewostream ; (; const TGWindow * ; parent = nullptr, . UInt_t ; w = 1, . U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextViewostream.html:39888,inherit,inherited,39888,doc/master/classTGTextViewostream.html,https://root.cern,https://root.cern/doc/master/classTGTextViewostream.html,5,['inherit'],['inherited']
Modifiability,"gnal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGLVEntry; static FontStruct_t GetDefaultFontStruct ();  Return the default font structure in use. ;  ; static const TGGC & GetDefaultGC ();  Return the default graphics context in use. ;  ;  Static Protected Member Functions inherited from TGFrame; static Time_t GetLastClick ();  Get time of last mouse click. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TGLVEntry; static const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVEntry.html:29628,inherit,inherited,29628,doc/master/classTTVLVEntry.html,https://root.cern,https://root.cern/doc/master/classTTVLVEntry.html,1,['inherit'],['inherited']
Modifiability,"gnal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void AssertIntIdsSize ();  Assert that size of IntId array is compatible with the size of the point array. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TPointSet3D; void CopyIds (const TPointSet3D &t);  Copy id objects from point-set 't'. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; TArrayI * fIntIds;  ; Int_t fIntIdsPerPoint;  ; TString fTitle;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSet.html:40041,inherit,inherited,40041,doc/master/classTEvePointSet.html,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html,1,['inherit'],['inherited']
Modifiability,"gnal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGVSplitter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGSplitter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shadow color graphics context. ;  ; static const TGGC & GetWhiteGC ();  Get white graphics context. ;  ; static Pixe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVFileSplitter.html:20378,inherit,inherited,20378,doc/master/classTGVFileSplitter.html,https://root.cern,https://root.cern/doc/master/classTGVFileSplitter.html,3,['inherit'],['inherited']
Modifiability,"gnal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TStdExceptionHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveManager_1_1TExceptionHandler.html:11570,inherit,inherited,11570,doc/master/classTEveManager_1_1TExceptionHandler.html,https://root.cern,https://root.cern/doc/master/classTEveManager_1_1TExceptionHandler.html,3,['inherit'],['inherited']
Modifiability,"gnals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Attributes; TGuiBldDragManager * fManager;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldDragManagerRepeatTimer.html:13145,inherit,inherited,13145,doc/master/classTGuiBldDragManagerRepeatTimer.html,https://root.cern,https://root.cern/doc/master/classTGuiBldDragManagerRepeatTimer.html,1,['inherit'],['inherited']
Modifiability,"gnature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; Bool_t fMarkEnds;  lines marking where stretch zones begin ;  ; Int_t fMove;  1: move min value 2: move max value 3: move min and max value 0: don't move any value ;  ; Double_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fPressPoint;  mouse position at button press event ;  ; Double_t fPressSmax;  logical max position at button press event ;  ; Double_t fPressSmin;  logical min position at button press event ;  ; Int_t fRelPos;  slider position in pixel coordinates ;  ; Bool_t fReversedScale;  reverse which end is min and max ;  ; Int_t fScale;  tick mark scale ;  ; Int_t fScaleType;  tick mark scale type (no, downright, both) ;  ; const TGPicture * fSliderPic;  picture to draw slider ends ;  ; Double_t fSmax;  logical position of max value of Slider ;  ; Double_t fSmin;  logical position of min value of Slider ;  ; Double_t fVmax;  logical upper limit of slider ;  ; Double_t fVmin;  logical lower limit of slider ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:27619,inherit,inherited,27619,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,1,['inherit'],['inherited']
Modifiability,"gned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fValues.size(); }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total number of free parameters. { return fObjFunc->NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. const ROOT::Math::IMultiGradFunction * ObjFunction() const; method of only GSL minimizer (not inherited from interface); return pointer to used objective gradient function. { return fObjFunc; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer.h 37448 2010-12-09 20:20:56Z moneta $ » Last generated: 2010-12-09 22:21; This page has been automatically generated. For comments or suggestions regarding the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMinimizer.html:7891,variab,variables,7891,root/html528/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMinimizer.html,1,['variab'],['variables']
Modifiability,"gned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fValues.size(); }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total number of free parameters. { return fObjFunc->NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. const ROOT::Math::IMultiGradFunction * ObjFunction() const; method of only GSL minimizer (not inherited from interface); return pointer to used objective gradient function. { return fObjFunc; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer.h 37448 2010-12-09 20:20:56Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMinimizer.html:8025,variab,variables,8025,root/html530/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMinimizer.html,1,['variab'],['variables']
Modifiability,"gned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fValues.size(); }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total number of free parameters. { return fObjFunc->NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. const ROOT::Math::IMultiGradFunction * ObjFunction() const; method of only GSL minimizer (not inherited from interface); return pointer to used objective gradient function. { return fObjFunc; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer.h 37448 2010-12-09 20:20:56Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLMinimizer.html:8025,variab,variables,8025,root/html532/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLMinimizer.html,1,['variab'],['variables']
Modifiability,"gned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction() const. MinimTransformFunction * CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0). void SetFinalValues(const double* x). void SetMinValue(double val); { fMinVal = val; }. » Author: L. Moneta Oct 2012 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__BasicMinimizer.html:9318,variab,variables,9318,root/html602/ROOT__Math__BasicMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__BasicMinimizer.html,1,['variab'],['variables']
Modifiability,"gned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction() const. MinimTransformFunction * CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0). void SetFinalValues(const double* x). void SetMinValue(double val); { fMinVal = val; }. » Author: L. Moneta Oct 2012 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BasicMinimizer.html:9272,variab,variables,9272,root/html534/ROOT__Math__BasicMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BasicMinimizer.html,1,['variab'],['variables']
Modifiability,"gned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction() const. MinimTransformFunction * CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0). void SetFinalValues(const double* x). void SetMinValue(double val); { fMinVal = val; }. » Author: L. Moneta Oct 2012 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:9318,variab,variables,9318,root/html604/ROOT__Math__BasicMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html,1,['variab'],['variables']
Modifiability,"gnment operator. ; Definition at line 254 of file TCutG.cxx. ◆ SavePrimitive(). void TCutG::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 356 of file TCutG.cxx. ◆ SetObjectX(). void TCutG::SetObjectX ; (; TObject * ; obj). virtual . Set the X object (and delete the previous one if any). ; Definition at line 384 of file TCutG.cxx. ◆ SetObjectY(). void TCutG::SetObjectY ; (; TObject * ; obj). virtual . Set the Y object (and delete the previous one if any). ; Definition at line 393 of file TCutG.cxx. ◆ SetVarX(). void TCutG::SetVarX ; (; const char * ; varx). virtual . Set X variable. ; Definition at line 402 of file TCutG.cxx. ◆ SetVarY(). void TCutG::SetVarY ; (; const char * ; vary). virtual . Set Y variable. ; Definition at line 412 of file TCutG.cxx. ◆ Streamer(). void TCutG::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TCutG. ; Reimplemented from TObject.; Definition at line 422 of file TCutG.cxx. ◆ StreamerNVirtual(). void TCutG::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file TCutG.h. Member Data Documentation. ◆ fObjectX. TObject* TCutG::fObjectX. protected . ! pointer to an object corresponding to X ; Definition at line 25 of file TCutG.h. ◆ fObjectY. TObject* TCutG::fObjectY. protected . ! pointer to an object corresponding to Y ; Definition at line 26 of file TCutG.h. ◆ fVarX. TString TCutG::fVarX. protected . X variable. ; Definition at line 23 of file TCutG.h. ◆ fVarY. TString TCutG::fVarY. protected . Y variable. ; Definition at line 24 of file TCutG.h. Libraries for TCutG:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TCutG.h; graf2d/graf/src/TCutG.cxx. TCutG. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCutG.html:40380,variab,variable,40380,doc/master/classTCutG.html,https://root.cern,https://root.cern/doc/master/classTCutG.html,2,['variab'],['variable']
Modifiability,"gnment operator. void Add(TLinearFitter* tlf); Add another linear fitter to this linear fitter. Points and Design matrices; are added, but the previos fitting results (if any) are deleted.; Fitters must have same formulas (this is not checked). Fixed parameters are not changed. void AddPoint(Double_t* x, Double_t y, Double_t e = 1); Adds 1 point to the fitter.; First parameter stands for the coordinates of the point, where the function is measured; Second parameter - the value being fitted; Third parameter - weight(measurement error) of this point (=1 by default). void AssignData(Int_t npoints, Int_t xncols, Double_t* x, Double_t* y, Double_t* e = 0); This function is to use when you already have all the data in arrays; and don't want to copy them into the fitter. In this function, the Use() method; of TVectorD and TMatrixD is used, so no bytes are physically moved around.; First parameter - number of points to fit; Second parameter - number of variables in the model; Third parameter - the variables of the model, stored in the following way:; (x0(0), x1(0), x2(0), x3(0), x0(1), x1(1), x2(1), x3(1),... void AddToDesign(Double_t* x, Double_t y, Double_t e); Add a point to the AtA matrix and to the Atb vector. void AddTempMatrices(). void Clear(Option_t* option = """"); Clears everything. Used in TH1::Fit and TGraph::Fit(). void ClearPoints(); To be used when different sets of points are fitted with the same formula. void Chisquare(); Calculates the chisquare. void ComputeTValues(); Computes parameters' t-values and significance. Int_t Eval(); Perform the fit and evaluate the parameters; Returns 0 if the fit is ok, 1 if there are errors. void FixParameter(Int_t ipar); Fixes paramter #ipar at its current value. void FixParameter(Int_t ipar, Double_t parvalue); Fixes parameter #ipar at value parvalue. void ReleaseParameter(Int_t ipar); Releases parameter #ipar. void GetAtbVector(TVectorD& v); Get the Atb vector - a vector, used for internal computations. Double_t GetChisqua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearFitter.html:22145,variab,variables,22145,root/html528/TLinearFitter.html,https://root.cern,https://root.cern/root/html528/TLinearFitter.html,12,['variab'],['variables']
Modifiability,"gon. ;  ; void MarchingCubeSurfacePenetration (Double_t a00, Double_t a10, Double_t a11, Double_t a01, Double_t b00, Double_t b10, Double_t b11, Double_t b01, Int_t &irep);  Check for surface penetration (""bottle neck"") ;  ; void MarchingCubeFindNodes (Int_t nnod, Int_t *ie, Double_t xyz[52][3], Double_t grad[52][3]);  Find nodes and normales. ;  . Z-depth; Sorting algorithm for set of triangles . void ZDepth (Double_t xyz[52][3], Int_t &nface, Int_t iface[48][3], Double_t dface[48][6], Double_t abcd[48][4], Int_t *iorder);  Z-depth algorithm for set of triangles. ;  ; void TestEdge (Double_t del, Double_t xyz[52][3], Int_t i1, Int_t i2, Int_t iface[3], Double_t abcd[4], Int_t &irep);  Test edge against face (triangle) ;  . Additional Inherited Members;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/hist/histpainter/src/TPainter3dAlgorithms.h>. Inheritance diagram for TPainter3dAlgorithms:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ DrawFaceFunc_t. typedef void(TPainter3dAlgorithms::* TPainter3dAlgorithms::DrawFaceFunc_t) (Int_t *, Double_t *, Int_t, Int_t *, Double_t *). Definition at line 54 of file TPainter3dAlgorithms.h. ◆ LegoFunc_t. ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPainter3dAlgorithms.html:16209,inherit,inherited,16209,doc/master/classTPainter3dAlgorithms.html,https://root.cern,https://root.cern/doc/master/classTPainter3dAlgorithms.html,3,['inherit'],['inherited']
Modifiability,"gorithm to perform a; : quick search for the k events with shortest distance to the test event. The method; : returns a fraction of signal events among the k neighbors. It is recommended; : that a histogram which stores the k-NN decision variable is binned with k+1 bins; : between 0 and 1.; : ; : ␛[1m--- Performance tuning via configuration options: ␛[0m; : ; : The k-NN method estimates a density of signal and background events in a ; : neighborhood around the test event. The method assumes that the density of the ; : signal and background events is uniform and constant within the neighborhood. ; : k is an adjustable parameter and it determines an average size of the ; : neighborhood. Small k values (less than 10) are sensitive to statistical ; : fluctuations and large (greater than 100) values might not sufficiently capture ; : local differences between events in the training set. The speed of the k-NN; : method also increases with larger values of k. ; : ; : The k-NN method assigns equal weight to all input variables. Different scales ; : among the input variables is compensated using ScaleFrac parameter: the input ; : variables are scaled so that the widths for central ScaleFrac*100% events are ; : equal among all the input variables.; : ; : ␛[1m--- Additional configuration options: ␛[0m; : ; : The method inclues an option to use a Gaussian kernel to smooth out the k-NN; : response. The kernel re-weights events using a distance to the test event.; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; KNN : <Train> start...; : Reading 2000 events; : Number of signal events 1000; : Number of background events 1000; : Creating kd-tree with 2000 events; : Computing scale factor for 1d distributions: (ifrac, bottom, top) = (80%, 10%, 90%); ModulekNN : Optimizing tree for 4 variables with 2000 values; : <Fill> Class 1 has 1000 events; : <Fill> Class 2 has 1000 events; : Ela",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:33808,variab,variables,33808,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['variab'],['variables']
Modifiability,"grThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooSetProxydepsdependents of this p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProjectedPdf.html:41356,config,configuration,41356,root/html532/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html532/RooProjectedPdf.html,2,['config'],['configuration']
Modifiability,"gral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ; This functions will only be called with codes returned by getAnalyticalIntegral, except code zero. ; Reimplemented from RooAbsReal.; Definition at line 1118 of file RooNDKeysPdf.cxx. ◆ boxInfoInit(). void RooNDKeysPdf::boxInfoInit ; (; BoxInfo * ; bi, . const char * ; rangeName, . Int_t ; code . ); const. protected . Definition at line 1043 of file RooNDKeysPdf.cxx. ◆ calculateBandWidth(). void RooNDKeysPdf::calculateBandWidth ; (; ). protected . Definition at line 845 of file RooNDKeysPdf.cxx. ◆ calculatePreNorm(). void RooNDKeysPdf::calculatePreNorm ; (; BoxInfo * ; bi); const. protected . bi->nEventsBMSW=0.; bi->nEventsBW=0.; ; Definition at line 787 of file RooNDKeysPdf.cxx. ◆ calculateShell(). void RooNDKeysPdf::calculateShell ; (; BoxInfo * ; bi); const. protected . determine points in +/- nSigma shell around the box determined by the variable ranges. ; These points are needed in the normalization, to determine probability leakage in and out of the box. ; Definition at line 716 of file RooNDKeysPdf.cxx. ◆ checkInitWeights(). void RooNDKeysPdf::checkInitWeights ; (; ); const. inlineprotected . Definition at line 126 of file RooNDKeysPdf.h. ◆ Class(). static TClass * RooNDKeysPdf::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNDKeysPdf::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNDKeysPdf::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 198 of file RooNDKeysPdf.h. ◆ clone(). TObject * RooNDKeysPdf::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 84 of file RooNDKeysPdf.h. ◆ createDatasetFromHist(). RooDataSet * RooNDKeysPdf::createDatasetFromHist ; (; const RooArgList & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:84834,variab,variable,84834,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['variab'],['variable']
Modifiability,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:111061,config,configuration,111061,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['config'],['configuration']
Modifiability,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:109802,config,configuration,109802,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['config'],['configuration']
Modifiability,"gral.h. ◆ clone(). TObject * RooRealIntegral::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 37 of file RooRealIntegral.h. ◆ compileForNormSet(). std::unique_ptr< RooAbsArg > RooRealIntegral::compileForNormSet ; (; RooArgSet const & ; normSet, . RooFit::Detail::CompileContext & ; ctx . ); const. overridevirtual . Reimplemented from RooAbsArg.; Definition at line 1179 of file RooRealIntegral.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooRealIntegral::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 746 of file RooRealIntegral.cxx. ◆ DeclFileName(). static const char * RooRealIntegral::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 150 of file RooRealIntegral.h. ◆ evaluate(). double RooRealIntegral::evaluate ; (; ); const. overrideprotectedvirtual . Perform the integration and return the result. ; Implements RooAbsReal.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:67764,variab,variables,67764,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['variab'],['variables']
Modifiability,"gral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfItr!; RooListProxy_pdfList; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooMomentMorph::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMomentMorph.html:40484,config,configuration,40484,root/html532/RooMomentMorph.html,https://root.cern,https://root.cern/root/html532/RooMomentMorph.html,2,['config'],['configuration']
Modifiability,"gram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""_qx"") const;  Compute the X distribution of quantiles in the other variable Y name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH1D * QuantilesY (Double_t prob=0.5, const char *name=""_qy"") const;  Compute the Y distribution of quantiles in the other variable X name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH2 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr) override;  Override TH1::Rebin as TH2::RebinX Rebinning in variable binning as for TH1 is not allowed If a non-null pointer is given an error is flagged see RebinX and Rebin2D. ;  ; virtual TH2 * Rebin2D (Int_t nxgroup=2, Int_t nygroup=2, const char *newname="""");  Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together. ;  ; TH2 * RebinX (Int_t ngroup=2, const char *newname="""") override;  Rebin only the X axis see Rebin2D. ;  ; virtual TH2 * RebinY (Int_t ngroup=2, const char *newname="""");  Rebin only the Y axis see Rebin2D. ;  ; virtual void SetShowProjectionX (Int_t nbins=1);  When the mouse is moved in a pad containing a 2-d view of this histogram a second canvas shows the projection along X corresponding to the mouse position along Y. ;  ; virtual void SetShowProjectionXY (Int_t nbinsY=1, Int_t n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:17523,variab,variable,17523,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,2,['variab'],['variable']
Modifiability,"gram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""_qx"") const;  Compute the X distribution of quantiles in the other variable Y name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH1D * QuantilesY (Double_t prob=0.5, const char *name=""_qy"") const;  Compute the Y distribution of quantiles in the other variable X name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH2 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr) override;  Override TH1::Rebin as TH2::RebinX Rebinning in variable binning as for TH1 is not allowed If a non-null pointer is given an error is flagged see RebinX and Rebin2D. ;  ; virtual TH2 * Rebin2D (Int_t nxgroup=2, Int_t nygroup=2, const char *newname="""");  Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together. ;  ; TH2 * RebinX (Int_t ngroup=2, const char *newname="""") override;  Rebin only the X axis see Rebin2D. ;  ; virtual TH2 * RebinY (Int_t ngroup=2, const char *newname="""");  Rebin only the Y axis see Rebin2D. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinContent (Int_t bin, Double_t content) override;  Set bin content. ;  ; void SetBinContent (Int_t binx, Int_t biny, Double_t content) override;  ; void SetBinContent (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:8608,variab,variable,8608,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['variab'],['variable']
Modifiability,"gram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""_qx"") const;  Compute the X distribution of quantiles in the other variable Y name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH1D * QuantilesY (Double_t prob=0.5, const char *name=""_qy"") const;  Compute the Y distribution of quantiles in the other variable X name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH2 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr) override;  Override TH1::Rebin as TH2::RebinX Rebinning in variable binning as for TH1 is not allowed If a non-null pointer is given an error is flagged see RebinX and Rebin2D. ;  ; virtual TH2 * Rebin2D (Int_t nxgroup=2, Int_t nygroup=2, const char *newname="""");  Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together. ;  ; TH2 * RebinX (Int_t ngroup=2, const char *newname="""") override;  Rebin only the X axis see Rebin2D. ;  ; virtual TH2 * RebinY (Int_t ngroup=2, const char *newname="""");  Rebin only the Y axis see Rebin2D. ;  ; void SetBinContent (Int_t bin, Double_t content) override;  Set bin content. ;  ; void SetBinContent (Int_t binx, Int_t biny, Double_t content) override;  ; void SetBinContent (Int_t binx, Int_t biny, Int_t, Double_t content) override;  ; virtual void SetShowProjectionX (Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2C.html:9077,variab,variable,9077,doc/master/classTH2C.html,https://root.cern,https://root.cern/doc/master/classTH2C.html,6,['variab'],['variable']
Modifiability,"gram! Therefore, the user has to be very careful. Often a container only contains one class of objects, but if it really contains a mixture, it is possible to ask each object about its class using the InheritsFrom method.; For example if myObject is a TObject pointer:; if (myObject->InheritsFrom(""TParticle"") {; printf(""myObject is a TParticlen"");; }; As the name suggests, this test works even if the object is a subclass of TParticle. The member function IsA() can be used instead of InheritsFrom to make the test exact. The InheritsFrom and IsA methods use the extensive Run Time Type Information (RTTI) available via the ROOT meta-classes.; 16.1.3 Types of Collections; The ROOT system implements the following basic types of collections: unordered collections, ordered collections and sorted collections. Next figure shows the inheritance hierarchy for the primary collection classes. All primary collection classes derive from the abstract base class TCollection. The inheritance hierarchy of the primary collection classes. 16.1.4 Ordered Collections (Sequences); Sequences are collections that are externally ordered because they maintain internal elements according to the order in which they were added. The following sequences are available:. TList; THashList; TOrdCollection; TObjArray; TClonesArray. The TOrdCollection, TObjArray as well as the TClonesArray can be sorted using their Sort() member function (for this, the stored objects must provide a comparison function by overriding TObject::Compare() and also must enable sorting by overriding TObject::IsSortable() to return true). Ordered collections all derive from the abstract base class TSeqCollection. Sorted collections are ordered by an internal (automatic) sorting mechanism. The following sorted collections are available (the stored items must be sortable):. TSortedList; TBtree. Unordered collections don’t maintain the order in which the elements were added, i.e. when you iterate over an unordered collection, you are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:842719,inherit,inheritance,842719,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['inherit'],['inheritance']
Modifiability,"gram(RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) constCreate and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables w...Definition RooAbsReal.cxx:1183; RooAbsReal::fixAddCoefRangevirtual void fixAddCoefRange(const char *rangeName=nullptr, bool force=true)Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by...Definition RooAbsReal.cxx:3675; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::attachToTreevoid attachToTree(TTree &t, Int_t bufSize=32000) overrideAttach object to a branch of given TTree.Definition RooAbsReal.cxx:3028; RooAbsReal::specialIntegratorConfigRooNumIntConfig * specialIntegratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsReal.cxx:3282; RooAbsReal::writeToStreamvoid writeToStream(std::ostream &os, bool compact) const overrideWrite object contents to stream (dummy for now)Definition RooAbsReal.cxx:436; RooAbsReal::traceEvaldouble traceEval(const RooArgSet *set) constCalculate current value of object, with error tracing wrapper.Definition RooAbsReal.cxx:319; RooAbsReal::getPropagatedErrordouble getPropagatedError(const RooFitResult &fr, const RooArgSet &nset={}) constPropagates parameter uncertainties to an uncertainty estimate for this RooAbsReal.Definition RooAbsReal.cxx:2472; RooAbsReal::setHideOffsetstatic void setHideOffset(bool flag)Definition RooAbsReal.cxx:191; RooAbsReal::ErrorLoggingModeErrorLoggingModeDefinition RooAbsReal.h:317; RooAbsReal::CountErrors@ CountErrorsDefinition RooAbsReal.h:317; RooAbsReal::CollectErrors@ CollectErrorsDefinition RooAbsReal.h:317; RooAbsReal::PrintErrors@ PrintErrorsD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:226204,config,configuration,226204,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['config'],['configuration']
Modifiability,"gram. ;  ; Bool_t fRange;  True if the fit range must be taken from the function range. ;  . Private Member Functions; void ComputeFCN (Double_t &f, const Double_t *par);  Compute the likelihood. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TBinomialEfficiencyFitter.h>. Inheritance diagram for TBinomialEfficiencyFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBinomialEfficiencyFitter() [1/2]. TBinomialEfficiencyFitter::TBinomialEfficiencyFitter ; (; ). default constructor ; Definition at line 101 of file TBinomialEfficiencyFitter.cxx. ◆ TBinomialEfficiencyFitter() [2/2]. TBinomialEfficiencyFitter::TBinomialEfficiencyFitter ; (; const TH1 * ; numerator, . const TH1 * ; denominator . ). Constructor. ; Note that no objects are copied, so it is up to the user to ensure that the histogram pointers remain valid.; Both histograms need to be ""consistent"". This is not checked here, but in TBinomialEfficiencyFitter::Fit(). ; Definition at line 121 of file TBin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html:14564,inherit,inherited,14564,doc/master/classTBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html,2,['inherit'],['inherited']
Modifiability,"gram.; 6257/// The array xbins must contain ngroup+1 elements that represent the low-edges; 6258/// of the bins.; 6259/// If the original histogram has errors stored (via Sumw2), the resulting; 6260/// histograms has new errors correctly calculated.; 6261///; 6262/// NOTE: The bin edges specified in xbins should correspond to bin edges; 6263/// in the original histogram. If a bin edge in the new histogram is; 6264/// in the middle of a bin in the original histogram, all entries in; 6265/// the split bin in the original histogram will be transfered to the; 6266/// lower of the two possible bins in the new histogram. This is; 6267/// probably not what you want. A warning message is emitted in this; 6268/// case; 6269///; 6270/// examples: if h1 is an existing TH1F histogram with 100 bins; 6271///; 6272/// ~~~ {.cpp}; 6273/// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; 6274/// h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew; 6275/// ~~~; 6276 ; 6277TH1 *TH1::Rebin(Int_t ngroup, const char*newname, const Double_t *xbins); 6278{; 6279 Int_t nbins = fXaxis.GetNbins();; 6280 Double_t xmin = fXaxis.GetXmin();; 6281 Double_t xmax = fXaxis.GetXmax();; 6282 if ((ngroup <= 0) || (ngroup > nbins)) {; 6283 Error(""Rebin"", ""Illegal value of ngroup=%d"",ngroup);; 6284 return nullptr;; 6285 }; 6286 ; 6287 if (fDimension > 1 || InheritsFrom(TProfile::Class())) {; 6288 Error(""Rebin"", ""Operation valid on 1-D histograms only"");; 6289 return nullptr;; 6290 }; 6291 if (!newname && xbins) {; 6292 Error(""Rebin"",""if xbins is specified, newname must be given"");; 6293 return nullptr;; 6294 }; 6295 ; 6296 Int_t newbins = nbins/ngroup;; 6297 if (!xbins) {; 6298 Int_t nbg = nbins/ngroup;; 6299 if (nbg*ngroup != nbins) {; 6300 Warning(""Rebin"", ""ngroup=%d is not an exact divider of nbins=%d."",ngroup,nbins);; 6301 }; 6302 }; 6303 else {; 6304 // in the case that xbins is given (rebinning in variable bins), ngroup is; 6305 // the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:247746,variab,variable,247746,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['variab'],['variable']
Modifiability,"gram/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TS3WebFile.html:29416,variab,variables,29416,root/html534/TS3WebFile.html,https://root.cern,https://root.cern/root/html534/TS3WebFile.html,3,['variab'],['variables']
Modifiability,"grams (because the likelihood computation will be incorrect). ; Definition at line 42 of file TBinomialEfficiencyFitter.h. Public Member Functions;  TBinomialEfficiencyFitter ();  default constructor ;  ;  TBinomialEfficiencyFitter (const TH1 *numerator, const TH1 *denominator);  Constructor. ;  ;  ~TBinomialEfficiencyFitter () override;  destructor ;  ; Double_t EvaluateFCN (const Double_t *par);  ; TFitResultPtr Fit (TF1 *f1, Option_t *option="""");  Carry out the fit of the given function to the given histograms. ;  ; ROOT::Fit::Fitter * GetFitter ();  Provide access to the underlying fitter object. ;  ; TClass * IsA () const override;  ; void Set (const TH1 *numerator, const TH1 *denominator);  Initialize with a new set of inputs. ;  ; void SetPrecision (Double_t epsilon);  Set the required integration precision, see TF1::Integral() ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html:5014,inherit,inherited,5014,doc/master/classTBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html,1,['inherit'],['inherited']
Modifiability,"grams ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . Private Member Functions; Double_t * GetB ();  ; Double_t * GetB2 ();  ; Double_t * GetW ();  ; Double_t * GetW2 ();  ; void SetBins (Int_t, const Double_t *) override;  Redefine x axis parameters with variable bin sizes. ;  ; void SetBins (Int_t, const Double_t *, Int_t, const Double_t *, Int_t, const Double_t *) override;  Redefine x, y and z axis parameters with variable bin sizes. ;  ; void SetBins (Int_t, Double_t, Double_t) override;  Redefine x axis parameters. ;  ; void SetBins (Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, Int_t, Double_t, Double_t) override;  Redefine x, y and z axis parameters. ;  . Friends; class TH1Merger;  ; class TProfileHelper;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDelet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:64043,inherit,inherited,64043,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['inherit'],['inherited']
Modifiability,"graph. Any volume in the logical graph; 63can become the actual top volume at run time (see TGeoManager::SetTopVolume()).; 64All functionalities of the modeler will behave in this case as if only the; 65corresponding branch starting from this volume is the registered geometry.; 66 ; 67\image html geom_graf.jpg; 68 ; 69 A given volume can be positioned several times in the geometry. A volume; 70can be divided according default or user-defined patterns, creating automatically; 71the list of division nodes inside. The elementary volumes created during the; 72dividing process follow the same scheme as usual volumes, therefore it is possible; 73to position further geometrical structures inside or to divide them further more; 74(see TGeoVolume::Divide()).; 75 ; 76 The primitive shapes supported by the package are basically the GEANT3; 77shapes (see class TGeoShape), arbitrary wedges with eight vertices on two parallel; 78planes. All basic primitives inherits from class TGeoBBox since the bounding box; 79of a solid is essential for the tracking algorithms. They also implement the; 80virtual methods defined in the virtual class TGeoShape (point and segment; 81classification). User-defined primitives can be directly plugged into the modeler; 82provided that they override these methods. Composite shapes will be soon supported; 83by the modeler. In order to build a TGeoCompositeShape, one will have to define; 84first the primitive components. The object that handle boolean; 85operations among components is called TGeoBoolCombinator and it has to be; 86constructed providing a string boolean expression between the components names.; 87 ; 88 ; 89## Example for building a simple geometry; 90 ; 91Begin_Macro(source); 92../../../tutorials/geom/rootgeom.C; 93End_Macro; 94 ; 95## TGeoManager - the manager class for the geometry package.; 96 ; 97 TGeoManager class is embedding all the API needed for building and tracking; 98a geometry. It defines a global pointer (gGeoManager) in order ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:4745,inherit,inherits,4745,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['inherit'],['inherits']
Modifiability,"gration cache manager; RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealSumPdf.html:39685,config,configuration,39685,root/html528/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html528/RooRealSumPdf.html,2,['config'],['configuration']
Modifiability,"gration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooNumRunningInt::funcProxy to functions whose running integral is calculated; RooRealProxyRooNumRunningInt::xIntergrated observable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumCdf.html:33147,config,configuration,33147,root/html526/RooNumCdf.html,https://root.cern,https://root.cern/root/html526/RooNumCdf.html,2,['config'],['configuration']
Modifiability,"gration in one step ; Reimplemented from RooAbsPdf.; Definition at line 145 of file RooProjectedPdf.cxx. ◆ DeclFileName(). static const char * RooProjectedPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 73 of file RooProjectedPdf.h. ◆ evaluate(). double RooProjectedPdf::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate projected p.d.f. ; Implements RooAbsReal.; Reimplemented in xRooProjectedPdf.; Definition at line 94 of file RooProjectedPdf.cxx. ◆ expectedEvents(). double RooProjectedPdf::expectedEvents ; (; const RooArgSet * ; nset); const. inlineoverridevirtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented from RooAbsPdf.; Reimplemented in xRooProjectedPdf.; Definition at line 46 of file RooProjectedPdf.h. ◆ extendMode(). ExtendMode RooProjectedPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Reimplemented in xRooProjectedPdf.; Definition at line 47 of file RooProjectedPdf.h. ◆ forceAnalyticalInt(). bool RooProjectedPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. overridevirtual . Force RooRealIntegral to relegate integration of all observables to internal logic. ; Reimplemented from RooAbsReal.; Definition at line 157 of file RooProjectedPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooProjectedPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Mark all requested variables as internally integrated. ; Reimplemented from RooAbsReal.; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:77846,extend,extendMode,77846,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['extend'],['extendMode']
Modifiability,"gration::ModefMode; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::IntegrationMultiDim::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 1.E-6, double relTol = 1E-4, unsigned int calls = 500000); constructors; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. GSLMCIntegrator(const char * type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html:3505,plug-in,plug-in,3505,root/html526/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html,1,['plug-in'],['plug-in']
Modifiability,"gratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html:2740,adapt,adaptive,2740,root/html602/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html,2,['adapt'],['adaptive']
Modifiability,"gratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:8567,variab,variables,8567,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['variab'],['variables']
Modifiability,"gregateCacheUniqueSuffix(). const char * RooAbsArg::aggregateCacheUniqueSuffix ; (; ); const. Definition at line 2336 of file RooAbsArg.cxx. ◆ applyWeightSquared(). void RooAbsArg::applyWeightSquared ; (; bool ; flag). virtual . Disables or enables the usage of squared weights. ; Needs to be overloaded in the likelihood classes for which this is relevant. ; Reimplemented in RooNLLVar, and ProgressMonitor.; Definition at line 2521 of file RooAbsArg.cxx. ◆ attachArgs(). void RooAbsArg::attachArgs ; (; const RooAbsCollection & ; set). Bind this node to objects in set. ; Search the set for objects that have the same name as our servers, and attach ourselves to those. After this operation, this node is computing its values based on the new servers. This can be used to e.g. read values from ; Definition at line 1705 of file RooAbsArg.cxx. ◆ attachDataSet(). void RooAbsArg::attachDataSet ; (; const RooAbsData & ; set). Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ; Definition at line 1720 of file RooAbsArg.cxx. ◆ attachDataStore(). void RooAbsArg::attachDataStore ; (; const RooAbsDataStore & ; set). Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ; Definition at line 1730 of file RooAbsArg.cxx. ◆ attachToStore(). void RooAbsArg::attachToStore ; (; RooAbsDataStore & ; store). protected . Attach this argument to the data store such that it reads data from there. ; Definition at line 2311 of file RooAbsArg.cxx. ◆ attachToTree(). void RooAbsArg::attachToTree ; (; TTree & ; t, . Int_t ; bufSize = 32000 . ). protectedpure virtual . Overloadable function for derived classes to implement attachment as branch to a TTree. ; Implemented in RooAbsCategory, RooAbsReal, RooRealVar, and RooStringVar.; Definition at line 1497 of file RooAbsArg.cxx. ◆ attachToVStore(). virtual void RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:46581,variab,variable,46581,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,2,['variab'],"['variable', 'variables']"
Modifiability,"gress ;  ; Long_t fFeedbackPeriod;  timer for sending intermediate results ;  ; TTimer * fFeedbackTimer;  class of the latest selector ;  ; TList * fInput;  ; Int_t fMaxDrawQueries;  ; THashList * fOutput;  ; TFile * fOutputFile;  ; TString fOutputFilePath;  ; TQueryResult * fPreviousQuery;  ; Long64_t fProcessedRun;  Read calls in this run. ;  ; TStopwatch * fProcTime;  ; TTimer * fProcTimeTimer;  ; TProofProgressStatus * fProgressStatus;  ; TQueryResult * fQuery;  ; TList * fQueryResults;  Events processed in this run. ;  ; Long64_t fReadBytesRun;  ; Long64_t fReadCallsRun;  Bytes read in this run. ;  ; Long_t fSaveMemThreshold;  ; Bool_t fSavePartialResults;  ; Bool_t fSaveResultsPerPacket;  ; TSelector * fSelector;  ; TClass * fSelectorClass;  kTRUE when fSelector has been created locally ;  ; TStatus * fSelStatus;  iterator on events or objects ;  ; TTimer * fStopTimer;  ; std::mutex fStopTimerMtx;  ; Long64_t fTotalEvents;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TProofPlayer; static THashList * fgDrawInputPars = 0;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TProofPlayer.h>. Inheritance diagram for TProofPlayerLocal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofPlayerLocal(). TProofPlayerLocal::TProofPlayerLocal ; (; Bool_t ; client = kTRUE). inline . Definition at line 244 of file TProofPlayer.h. ◆ ~TProofPlayerLocal(). TProofPlayerLocal::~TProofPlayerLocal ; (; ). inlineoverride . Definition at line 245 of file TProofPlayer.h. Member Function Documentation. ◆ Class(). static TClass * TProofPlayerLocal::Class ; (; ). static . ReturnsTClass desc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLocal.html:23641,inherit,inherited,23641,doc/master/classTProofPlayerLocal.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLocal.html,3,['inherit'],['inherited']
Modifiability,"gress ;  ; Long_t fFeedbackPeriod;  timer for sending intermediate results ;  ; TTimer * fFeedbackTimer;  class of the latest selector ;  ; TList * fInput;  ; Int_t fMaxDrawQueries;  ; THashList * fOutput;  ; TFile * fOutputFile;  ; TString fOutputFilePath;  ; TQueryResult * fPreviousQuery;  ; Long64_t fProcessedRun;  Read calls in this run. ;  ; TStopwatch * fProcTime;  ; TTimer * fProcTimeTimer;  ; TProofProgressStatus * fProgressStatus;  ; TQueryResult * fQuery;  ; TList * fQueryResults;  Events processed in this run. ;  ; Long64_t fReadBytesRun;  ; Long64_t fReadCallsRun;  Bytes read in this run. ;  ; Long_t fSaveMemThreshold;  ; Bool_t fSavePartialResults;  ; Bool_t fSaveResultsPerPacket;  ; TSelector * fSelector;  ; TClass * fSelectorClass;  kTRUE when fSelector has been created locally ;  ; TStatus * fSelStatus;  iterator on events or objects ;  ; TTimer * fStopTimer;  ; std::mutex fStopTimerMtx;  ; Long64_t fTotalEvents;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TProofPlayer; static THashList * fgDrawInputPars = 0;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TProofPlayer.h>. Inheritance diagram for TProofPlayerSlave:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofPlayerSlave(). TProofPlayerSlave::TProofPlayerSlave ; (; TSocket * ; socket = 0). inline . Definition at line 385 of file TProofPlayer.h. Member Function Documentation. ◆ Class(). static TClass * TProofPlayerSlave::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofPlayerSlave::Class_Name ; (; ). static . ReturnsName of this class . ◆ Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSlave.html:23295,inherit,inherited,23295,doc/master/classTProofPlayerSlave.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSlave.html,3,['inherit'],['inherited']
Modifiability,"gress ;  ; Long_t fFeedbackPeriod;  timer for sending intermediate results ;  ; TTimer * fFeedbackTimer;  class of the latest selector ;  ; TList * fInput;  ; Int_t fMaxDrawQueries;  ; THashList * fOutput;  ; TFile * fOutputFile;  ; TString fOutputFilePath;  ; TQueryResult * fPreviousQuery;  ; Long64_t fProcessedRun;  Read calls in this run. ;  ; TStopwatch * fProcTime;  ; TTimer * fProcTimeTimer;  ; TProofProgressStatus * fProgressStatus;  ; TQueryResult * fQuery;  ; TList * fQueryResults;  Events processed in this run. ;  ; Long64_t fReadBytesRun;  ; Long64_t fReadCallsRun;  Bytes read in this run. ;  ; Long_t fSaveMemThreshold;  ; Bool_t fSavePartialResults;  ; Bool_t fSaveResultsPerPacket;  ; TSelector * fSelector;  ; TClass * fSelectorClass;  kTRUE when fSelector has been created locally ;  ; TStatus * fSelStatus;  iterator on events or objects ;  ; TTimer * fStopTimer;  ; std::mutex fStopTimerMtx;  ; Long64_t fTotalEvents;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TProofPlayer; static THashList * fgDrawInputPars = 0;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TProofPlayer.h>. Inheritance diagram for TProofPlayerSuperMaster:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofPlayerSuperMaster(). TProofPlayerSuperMaster::TProofPlayerSuperMaster ; (; TProof * ; proof = 0). inline . Definition at line 416 of file TProofPlayer.h. ◆ ~TProofPlayerSuperMaster(). TProofPlayerSuperMaster::~TProofPlayerSuperMaster ; (; ). inlineoverride . Definition at line 418 of file TProofPlayer.h. Member Function Documentation. ◆ Class(). static TClass * TProofPlayerSuperMast",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:25943,inherit,inherited,25943,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,3,['inherit'],['inherited']
Modifiability,"gress ;  ; Long_t fFeedbackPeriod;  timer for sending intermediate results ;  ; TTimer * fFeedbackTimer;  class of the latest selector ;  ; TList * fInput;  ; Int_t fMaxDrawQueries;  ; THashList * fOutput;  ; TFile * fOutputFile;  ; TString fOutputFilePath;  ; TQueryResult * fPreviousQuery;  ; Long64_t fProcessedRun;  Read calls in this run. ;  ; TStopwatch * fProcTime;  ; TTimer * fProcTimeTimer;  ; TProofProgressStatus * fProgressStatus;  ; TQueryResult * fQuery;  ; TList * fQueryResults;  Events processed in this run. ;  ; Long64_t fReadBytesRun;  ; Long64_t fReadCallsRun;  Bytes read in this run. ;  ; Long_t fSaveMemThreshold;  ; Bool_t fSavePartialResults;  ; Bool_t fSaveResultsPerPacket;  ; TSelector * fSelector;  ; TClass * fSelectorClass;  kTRUE when fSelector has been created locally ;  ; TStatus * fSelStatus;  iterator on events or objects ;  ; TTimer * fStopTimer;  ; std::mutex fStopTimerMtx;  ; Long64_t fTotalEvents;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TProofPlayer; static THashList * fgDrawInputPars = 0;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TProofPlayerLite.h>. Inheritance diagram for TProofPlayerLite:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofPlayerLite(). TProofPlayerLite::TProofPlayerLite ; (; TProof * ; proof = 0). inline . Definition at line 37 of file TProofPlayerLite.h. ◆ ~TProofPlayerLite(). TProofPlayerLite::~TProofPlayerLite ; (; ). inlineoverride . Definition at line 39 of file TProofPlayerLite.h. Member Function Documentation. ◆ Class(). static TClass * TProofPlayerLite::Class ; (; ). static . ReturnsTClass descr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:26727,inherit,inherited,26727,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,3,['inherit'],['inherited']
Modifiability,"ground efficiency (rejection) versus; signal efficiency plot (first call of this function); - the function returns the signal efficiency at background efficiency; indicated in theString. ""theString"" must have two entries:; [0]: ""Efficiency""; [1]: the value of background efficiency at which the signal efficiency; is to be returned. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodCuts* DynamicCast(TMVA::IMethod* method); this is a workaround which is necessary since CINT is not capable of handling dynamic casts. { return dynamic_cast<MethodCuts*>(method); }. Double_t GetSeparation(TH1* , TH1* ) const; also overwrite --> not computed for cuts. { return -1; }. Double_t GetSeparation(TMVA::PDF* = 0, TMVA::PDF* = 0) const; { return -1; }. Double_t GetSignificance( void ); { return -1; }. Double_t GetmuTransform(TTree* ); { return -1; }. Double_t GetRarity(Double_t , TMVA::Types::ESBType ) const; rarity distributions (signal or background (default) is uniform in [0,1]). { return 0; }. void SetTestSignalEfficiency(Double_t effS); { fTestSignalEff = effS; }. const Ranking* CreateRanking(); ranking of input variables (not available for cuts). { return 0; }. void CheckSetup(); no check of options at this place. {}. void MatchParsToCuts( const std::vector<Double_t>&, Double_t*, Double_t* ); the definition of fit parameters can be different from the actual; cut requirements; these functions provide the matching. » Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodCuts.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 2010-12-01 01:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:25940,variab,variables,25940,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,1,['variab'],['variables']
Modifiability,gs (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ; Definition at line 873 of file TMinuitMinimizer.cxx. ◆ UseStaticMinuit(). bool TMinuitMinimizer::UseStaticMinuit ; (; bool ; on = true). static . static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ; is on). Method returns the previous state ; Definition at line 110 of file TMinuitMinimizer.cxx. ◆ VariableIndex(). int TMinuitMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return always -1 . ; (It is Not implemented) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 434 of file TMinuitMinimizer.cxx. ◆ VariableName(). std::string TMinuitMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ; get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 427 of file TMinuitMinimizer.cxx. ◆ X(). const double * TMinuitMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 120 of file TMinuitMinimizer.h. Member Data Documentation. ◆ fCovar. std::vector<double> TMinuitMinimizer::fCovar. private . Definition at line 262 of file TMinuitMinimizer.h. ◆ fDim. unsigned int TMinuitMinimizer::fDim. private . Definition at line 258 of file TMinuitMinimizer.h. ◆ fErrors. std::vector<double> TMinuitMinimizer::fErrors. private . Definition at line 261 of file TMinuitMinimizer.h. ◆ fgMinuit. TMinuit * TMinuitMinimizer::fgMinuit = nullptr. staticprivate . Definition at line 267 of file TMinuitMinimizer.h. ◆ fgUsed. bool TMinuitMinimizer::fgUsed = false. staticprivate . Definition at line 269 of file TMinuitMinimizer.h. ◆ fgUseS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:27415,variab,variables,27415,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,2,['variab'],"['variable', 'variables']"
Modifiability,"gs in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Event_t * CreateEvent (TRecGuiEvent *ge);  Converts TRecGuiEvent type to Event_t type. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TRecEvent; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; UInt_t fCode;  ; Int_t fCount;  ; Int_t fFormat;  ; Handle_t fHandle;  ; UInt_t fHeight;  ; Window_t fMasked;  ; Bool_t fSendEvent;  ; UInt_t fState;  ; Time_t fTime;  ; EGEventType fType;  ; Long_t fUser [5];  ; UInt_t fWidth;  ; Window_t fWindow;  ; Int_t fX;  ; Int_t fXRoot;  ; Int_t fY;  ; Int_t fYRoot;  . Friends; class TRecorderInactive;  ; class TRecorderPaused;  ; class TRecorderRecording;  ; class TRecorderReplaying;  . Additional Inherited Members;  Pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecGuiEvent.html:9838,inherit,inherited,9838,doc/master/classTRecGuiEvent.html,https://root.cern,https://root.cern/doc/master/classTRecGuiEvent.html,2,['inherit'],['inherited']
Modifiability,"gs&ParSettings(unsigned int i); static voidSetDefaultMinimizer(const char* type, const char* algo = 0); voidSetFromFitResult(const ROOT::Fit::FitResult& rhs); voidSetMinimizer(const char* type, const char* algo = 0); voidSetMinosErrors(bool on = true); voidSetMinosErrors(const vector<unsigned int>& paramInd); voidSetNormErrors(bool on = true); voidSetParabErrors(bool on = true); voidSetParamsSettings(const vector<ROOT::Fit::ParameterSettings>& pars); voidSetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0); voidSetUpdateAfterFit(bool on = true); voidSetWeightCorrection(bool on = true); boolUpdateAfterFit() const; boolUseWeightCorrection() const. Data Members; private:. ROOT::Math::MinimizerOptionsfMinimizerOptsminimizer control parameters including name and algo type; boolfMinosErrorsdo full error analysis using Minos; vector<unsigned int>fMinosParamsvector with the parameter indeces for running Minos; boolfNormErrorsflag for error normalization; boolfParabErrorsget correct parabolic errors estimate (call Hesse after minimizing) ; vector<ROOT::Fit::ParameterSettings>fSettingsvector with the parameter settings; boolfUpdateAfterFitupdate the configuration after a fit using the result; boolfWeightCorrapply correction to errors for weights fits . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitConfig(unsigned int npar = 0). Default constructor. FitConfig(const ROOT::Fit::FitConfig& rhs). Copy constructor. ~FitConfig(). Destructor. FitConfig & operator=(const ROOT::Fit::FitConfig& rhs). Assignment operator. const ParameterSettings & ParSettings(unsigned int i) const. get the parameter settings for the i-th parameter (const method). { return fSettings.at(i); }. ParameterSettings & ParSettings(unsigned int i). get the parameter settings for the i-th parameter (non-const method). { return fSettings.at(i); }. const std::vector<ROOT::Fit::ParameterSettings> & ParamsSettings() const. get the vector of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__FitConfig.html:2459,config,configuration,2459,root/html532/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__FitConfig.html,2,['config'],['configuration']
Modifiability,"gs, const TList& nameList) const; Check if allArgs contains matching elements for each name in nameList. If it does,; add the corresponding args from allArgs to matchedArgs and return kTRUE. Otherwise; return kFALSE and do not change matchedArgs. RooNumIntConfig* defaultIntegratorConfig(); Returns the default numeric integration configuration for all RooAbsReals. RooNumIntConfig* specialIntegratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumIntConfig* specialIntegratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumIntConfig* getIntegratorConfig() const; Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. RooNumIntConfig* getIntegratorConfig(); Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setIntegratorConfig(const RooNumIntConfig& config); Set the given integrator configuration as default numeric integration; configuration for this object. void setIntegratorConfig(); Remove the specialized numeric integration configuration associated; with this object. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function to force use of a given set of observables; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:60099,config,configuration,60099,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,6,['config'],['configuration']
Modifiability,"gth; Int_t_negCountNumber of negative probablities remaining to print; RooAbsReal*_norm! Normalization integral (owned by _normMgr); RooObjCacheManager_normMgrThe cache manager; TString_normRangeNormalization range; static TString_normRangeOverride; RooArgSet*_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_t_rawValue; Bool_t_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_t_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_t_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_t_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:41880,config,configuration,41880,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['config'],['configuration']
Modifiability,"gument of SetMakeSharedLib but is used to create an executable. ;  ; virtual void SetMakeSharedLib (const char *directives);  Directives should contain the description on how to compile and link a shared lib. ;  ; virtual void SetObjExt (const char *objExt);  Set object files extension, should be either .o, .obj, etc. ;  ; virtual void SetSoExt (const char *soExt);  Set shared library extension, should be either .so, .sl, .a, .dll, etc. ;  ; virtual void ShowOutput (RedirectHandle_t *h);  Display the content associated with the redirection described by the opaque handle 'h'. ;  ; virtual TString SplitAclicMode (const char *filename, TString &mode, TString &args, TString &io) const;  This method split a filename of the form: ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Syslog (ELogLevel level, const char *mess);  Send mess to syslog daemon. ;  ; virtual void Unload (const char *module);  Unload a shared library. ;  ; virtual void Unsetenv (const char *name);  Unset environment variable. ;  ; virtual char * Which (const char *search, const char *file, EAccessMode mode=kFileExists);  Find location of file in a search path. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:21668,variab,variable,21668,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['variab'],['variable']
Modifiability,"guments, which then used in different process methods For instance, if user authorized with some user name, depending from restrictions some objects will be invisible or user get full access to the element Returns previous argument which was set before ;  ; Bool_t SetItemField (const char *fullname, const char *name, const char *value);  Set field for specified item. ;  ; void SetReadOnly (Bool_t on=kTRUE);  When readonly on (default), sniffer is not allowed to change ROOT structures For instance, it is not allowed to read new objects from files. ;  ; void SetScanGlobalDir (Bool_t on=kTRUE);  When enabled (default), sniffer scans gROOT for files, canvases, histograms. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UnregisterObject (TObject *obj);  Unregister (remove) object from folders structures. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSniffer.html:4802,inherit,inherited,4802,doc/master/classTRootSniffer.html,https://root.cern,https://root.cern/doc/master/classTRootSniffer.html,1,['inherit'],['inherited']
Modifiability,gurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TMVA::IFitterTarget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; MinuitWrapper * fMinWrap;  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  declare SA options ;  . Private Attributes; Bool_t fBatch;  batch mode ;  ; Int_t fErrorLevel;  minuit error level ;  ; Int_t fFitStrategy;  minuit strategy level ;  ; Int_t fMaxCalls;  (approximate) maximum number of function calls ;  ; Int_t fPrintLevel;  minuit printout level ;  ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitFitter.html:13627,inherit,inherited,13627,doc/master/classTMVA_1_1MinuitFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitFitter.html,1,['inherit'],['inherited']
Modifiability,"gurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TMVA::IFitterTarget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void GetHelpMessage () const;  get help message text ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  write FDA-specific classifier response ;  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t Ignore",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html:24086,inherit,inherited,24086,doc/master/classTMVA_1_1MethodFDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html,1,['inherit'],['inherited']
Modifiability,"gurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TMVA::IFitterTarget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void GetHelpMessage () const;  get help message text ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  write specific classifier response ;  ;  Protected Member Functions inherited from TMVA::MethodANNBase; virtual void BuildNetwork (std::vector< Int_t > *layout, std::vector< Double_t > *weights=nullptr, Bool_t fromFile=kFALSE);  build network given a layout (number of neurons in each layer) and optional weights array ;  ; void CreateWeightMonitoringHists (const TString &bulkname, std::vector< TH1 * > *hv=nullptr) const;  ; void ForceNetworkCalculations ();  calculate input values to each neuron ;  ; void ForceNetworkInputs (const Event *ev, Int_t ignoreIndex=-1);  force the input values of the input neurons force the value for each input neuron ;  ; TNeuron * GetInputNeuron (Int_t index);  ; Double_t GetNetworkOutput ();  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:26974,inherit,inherited,26974,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['inherit'],['inherited']
Modifiability,"gurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TMVA::IFitterTarget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Static Public Attributes; static const Double_t fgMaxAbsCutVal = 1.0e30;  . Protected Member Functions; void GetHelpMessage () const;  get help message text ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  write specific classifier response ;  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html:26615,inherit,inherited,26615,doc/master/classTMVA_1_1MethodCuts.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html,1,['inherit'],['inherited']
Modifiability,"guration *config);  ; bool IsDefaultVector (TVirtualCollectionProxy &proxy);  ; Int_t PopDataCache (TBuffer &b, void *, const TConfiguration *);  ; Int_t PopDataCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *, const TConfiguration *);  ; Int_t PopDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *);  ; Int_t PushDataCache (TBuffer &b, void *, const TConfiguration *conf);  ; Int_t PushDataCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t PushDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *conf);  ; void ReadArraySTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadArraySTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; template<typename T > ; Int_t ReadBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<> ; Int_t ReadBasicType< BitsMarker > (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_NoFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_WithFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> ; Int_t ReadSTL (TBuffer &buf, void *addr, const TConfiguration *conf);  ; void ReadSTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLObjectWiseFastArray (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTStreamerInfoActions.html:3159,config,config,3159,doc/master/namespaceTStreamerInfoActions.html,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html,1,['config'],['config']
Modifiability,guration ; : 127 | 10828 9825.55 0.020018 0.00180003 43912.6 0; : 128 Minimum Test error found - save the configuration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error found - save the configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test error found - save the configuration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:26307,config,configuration,26307,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum Test error found - save the configuration ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:26983,config,configuration,26983,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum Test error found - save the configuration ; : 193 | 6289.73 5330.56 0.0202017 0.00183095 43547.4 0; : 194 Minimum Test error found - save the configuration ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Minimum Test error found - save the configuration ; : 197 | 6087.3 5129.97 0.0200908 0.00180793 43756.8 0; : 198 Minimum Test error found - save the configuration ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum Test error found - save the configuration ; : 202 | 5842.14 4889.6 0.0203335 0.00187992 43352.1 0; : 203 Minimum Test error found - save the configuration ; : 203 | 5794.67 4843.13 0.0203128 0.00181164 43240.6 0; : 204 Minimum Test error found - save the configuration ; : 204 | 5748.17 4795.8 0.0204843 0.00186518 42966.5 0; : 205 Minimum Test error found - save the configuration ; : 205 | 5701.17 4749.25 0.0206407 0.00185898 42594.5 0; : 206 Minimum Test error found - save the configuration ; : 206 | 5653.72 4704.65 0.0205823 0.00187697 42768.5 0; : 207 Minimum Test error found - save the configuration ; : 207 | 5608.52 4659.29 0.0205316 0.00181286 42737.8 0; : 208 Minimum Test error found - save the configuration ; : 208 | 5563.22 4613.51 0.0205774 0.00187424 42773.5 0; : 209 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:33546,config,configuration,33546,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 207 | 5608.52 4659.29 0.0205316 0.00181286 42737.8 0; : 208 Minimum Test error found - save the configuration ; : 208 | 5563.22 4613.51 0.0205774 0.00187424 42773.5 0; : 209 Minimum Test error found - save the configuration ; : 209 | 5517.39 4568.89 0.0206693 0.00189663 42615.1 0; : 210 Minimum Test error found - save the configuration ; : 210 | 5472.46 4524.65 0.0206417 0.0018492 42570.3 0; : 211 Minimum Test error found - save the configuration ; : 211 | 5426.81 4482.4 0.0206443 0.00186291 42595.5 0; : 212 Minimum Test error found - save the configuration ; : 212 | 5384.28 4437.99 0.020536 0.00181976 42743.7 0; : 213 Minimum Test error found - save the configuration ; : 213 | 5339.22 4395.34 0.0201574 0.00182356 43635.1 0; : 214 Minimum Test error found - save the configuration ; : 214 | 5296.23 4352.84 0.0204206 0.00182076 43011.2 0; : 215 Minimum Test error found - save the configuration ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimum Test error found - save the configuration ; : 216 | 5210.68 4267.22 0.0201957 0.00182236 43541.2 0; : 217 Minimum Test error found - save the configuration ; : 217 | 5167.13 4226.2 0.0205987 0.00192627 42843.8 0; : 218 Minimum Test error found - save the configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:35361,config,configuration,35361,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 250 | 3939.05 3041.72 0.0204513 0.00185682 43023.5 0; : 251 Minimum Test error found - save the configuration ; : 251 | 3905.19 3012.24 0.0207706 0.0018857 42361.9 0; : 252 Minimum Test error found - save the configuration ; : 252 | 3873.64 2981.7 0.0208833 0.0019031 42149.1 0; : 253 Minimum Test error found - save the configuration ; : 253 | 3841.98 2951.54 0.0208487 0.0019305 42287.4 0; : 254 Minimum Test error found - save the configuration ; : 254 | 3809.95 2921.87 0.0208755 0.00187363 42101.1 0; : 255 Minimum Test error found - save the configuration ; : 255 | 3779.13 2892.2 0.020905 0.00188208 42054.6 0; : 256 Minimum Test error found - save the configuration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:40232,config,configuration,40232,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 254 | 3809.95 2921.87 0.0208755 0.00187363 42101.1 0; : 255 Minimum Test error found - save the configuration ; : 255 | 3779.13 2892.2 0.020905 0.00188208 42054.6 0; : 256 Minimum Test error found - save the configuration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum Test error found - save the configuration ; : 268 | 3391.52 2531.71 0.0201083 0.00181098 43722.2 0; : 269 Minimum Test error found - save the configuration ; : 269 | 3363.52 2505.37 0.0201147 0.00180493 43692.5 0; : 270 Minimum Test error found - save the configuration ; : 270 | 3335.06 2479.9 0.0201599 0.00183615 43659.2 0; : 271 Minimum Test error found - save the configuration ; : 271 | 3308.12 2454.26 0.0202082 0.00181348 43490.8 0; : 272 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:40684,config,configuration,40684,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 255 | 3779.13 2892.2 0.020905 0.00188208 42054.6 0; : 256 Minimum Test error found - save the configuration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum Test error found - save the configuration ; : 268 | 3391.52 2531.71 0.0201083 0.00181098 43722.2 0; : 269 Minimum Test error found - save the configuration ; : 269 | 3363.52 2505.37 0.0201147 0.00180493 43692.5 0; : 270 Minimum Test error found - save the configuration ; : 270 | 3335.06 2479.9 0.0201599 0.00183615 43659.2 0; : 271 Minimum Test error found - save the configuration ; : 271 | 3308.12 2454.26 0.0202082 0.00181348 43490.8 0; : 272 Minimum Test error found - save the configuration ; : 272 | 3280.89 2427.73 0.020272 0.0018293 43377.6 0; : 273 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:40798,config,configuration,40798,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 Minimum Test error found - save the configuration ; : 408 | 964.601 533.917 0.0201423 0.00181632 43653.8 0; : 409 Minimum Test error found - save the configuration ; : 409 | 955.421 527.595 0.0204236 0.00190128 43191.2 0; : 410 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56320,config,configuration,56320,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 Minimum Test error found - save the configuration ; : 408 | 964.601 533.917 0.0201423 0.00181632 43653.8 0; : 409 Minimum Test error found - save the configuration ; : 409 | 955.421 527.595 0.0204236 0.00190128 43191.2 0; : 410 Minimum Test error found - save the configuration ; : 410 | 945.766 522.368 0.0209062 0.00188448 42057.3 0; : 411 Minimum Test error found - save the configuration ; : 411 | 936.425 516.53 0.0207319 0.00188678 42451.3 0; : 412 Minimum Test error found - save the configuration ; : 412 | 928.172 509.995 0.0202986 0.00182294 43300.2 0; : 413 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56659,config,configuration,56659,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 Minimum Test error found - save the configuration ; : 408 | 964.601 533.917 0.0201423 0.00181632 43653.8 0; : 409 Minimum Test error found - save the configuration ; : 409 | 955.421 527.595 0.0204236 0.00190128 43191.2 0; : 410 Minimum Test error found - save the configuration ; : 410 | 945.766 522.368 0.0209062 0.00188448 42057.3 0; : 411 Minimum Test error found - save the configuration ; : 411 | 936.425 516.53 0.0207319 0.00188678 42451.3 0; : 412 Minimum Test error found - save the configuration ; : 412 | 928.172 509.995 0.0202986 0.00182294 43300.2 0; : 413 Minimum Test error found - save the configuration ; : 413 | 918.166 504.988 0.0203305 0.00183515 43254.1 0; : 414 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56772,config,configuration,56772,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 445 | 667.37 358.699 0.0201197 0.00181899 43714.1 0; : 446 Minimum Test error found - save the configuration ; : 446 | 660.646 354.833 0.0201137 0.00181978 43730.3 0; : 447 Minimum Test error found - save the configuration ; : 447 | 654.211 352.003 0.0201333 0.00184653 43747.4 0; : 448 Minimum Test error found - save the configuration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; : 459 Minimum Test error found - save the configuration ; : 459 | 578.684 310.243 0.020117 0.00181196 43703.7 0; : 460 Minimum Test error found - save the configuration ; : 460 | 572.668 306.849 0.0201178 0.00181375 43706.2 0; : 461 Minimum Test error found - save the configuration ; : 461 | 566.644 303.945 0.0201078 0.00181369 43730 0; : 462 Minimum Test error found - save the configuration ; : 462 | 560.843 301.023 0.0201248 0.00180535 43669.5 0; : 463 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:62328,config,configuration,62328,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Minimum Test error found - save the configuration ; : 482 | 455.372 247.229 0.0201175 0.00180448 43684.8 0; : 483 Minimum Test error found - save the configuration ; : 483 | 451.061 243.731 0.0201278 0.0018159 43687.5 0; : 484 Minimum Test error found - save the configuration ; : 484 | 445.909 241.583 0.0201078 0.00181153 43724.8 0; : 485 Minimum Test error found - save the configuration ; : 485 | 441.645 238.817 0.0201252 0.00182817 43723 0; : 486 Minimum Test error found - save the configuration ; : 486 | 436.721 236.872 0.0201168 0.00181086 43701.6 0; : 487 Minimum Test error found - save the configuration ; : 487 | 432.036 234.838 0.0201083 0.00181291 43726.9 0; : 488 Minimum Test error found - save the configuration ; : 488 | 427.772 232.082 0.0201422 0.00181171 43643.2 0; : 489 Minimum Test error found - save the configuration ; : 489 | 423.017 229.997 0.0203149 0.00183693 43294.7 0; : 490 Minimum Test error found - save the configuration ; : 490 | 419.119 227.561 0.0201444 0.00181942 43656.3 0; : 491 Minimum Test error found - save the configuration ; : 491 | 414.431 225.611 0.0201416 0.00181918 43662.3 0; : 492 Minimum Test error found - save the configuration ; : 492 | 409.916 223.444 0.0201215 0.00181755 43706.4 0; : 493 Minimum Test error found - save the configuration ; : 493 | 405.856 221.079 0.0201212 0.00183714 43754 0; : 494 Minimum Test error found - save the configuration ; : 494 | 401.45 219.099 0.0201193 0.00182499 43729.5 0; : 4,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:65957,config,configuration,65957,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 506 | 353.597 195.555 0.0201061 0.00181022 43725.7 0; : 507 Minimum Test error found - save the configuration ; : 507 | 349.908 193.134 0.0201154 0.00180497 43690.9 0; : 508 Minimum Test error found - save the configuration ; : 508 | 346.368 191.635 0.0201239 0.00180513 43671.2 0; : 509 Minimum Test error found - save the configuration ; : 509 | 342.684 189.987 0.020479 0.00183624 42912.1 0; : 510 Minimum Test error found - save the configuration ; : 510 | 338.936 187.68 0.0201257 0.00181109 43680.9 0; : 511 Minimum Test error found - save the configuration ; : 511 | 335.178 185.581 0.0201106 0.0018111 43716.9 0; : 512 Minimum Test error found - save the configuration ; : 512 | 331.755 184.666 0.0201452 0.00182488 43667.3 0; : 513 Minimum Test error found - save the configuration ; : 513 | 328.659 182.798 0.0201844 0.00187405 43691.2 0; : 514 Minimum Test error found - save the configuration ; : 514 | 324.836 180.622 0.0201448 0.00183693 43697 0; : 515 Minimum Test error found - save the configuration ; : 515 | 321.45 179.12 0.020437 0.00183763 43012.3 0; : 516 Minimum Test error found - save the configuration ; : 516 | 317.804 177.214 0.0201516 0.00181548 43629.8 0; : 517 Minimum Test error found - save the configuration ; : 517 | 314.454 175.878 0.0201248 0.00181905 43702.1 0; : 518 Minimum Test error found - save the configuration ; : 518 | 311.376 174.038 0.0209489 0.00256909 43525.9 0; : 519 Minimum Test error found - save the configuration ; : 519 | 308.194 172.777 0.0312717 0.00294953 28246.5 0; : 520 Minimum Test error found - save the configuration ; : 520 | 304.608 170.454 0.0241719 0.00185008 35839.4 0; : 521 Minimum Test error found - save the configuration ; : 521 | 301.091 169.057 0.0201646 0.00182965 43632.5 0; : 522 Minimum Test error found - save the configuration ; : 522 | 297.757 167.472 0.0204481 0.00183794 42987.2 0; : 523 Minimum Test error found - save the configuration ; : 523 | 294.843 165.895 0.0201197 0.00181783 43711.4 0; : 5,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:69249,config,configuration,69249,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.85,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:79276,config,configuration,79276,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,guration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.3,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:79502,config,configuration,79502,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,"guration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsSelfCachedPdf(const char* name, const char* title, Int_t ipOrder = 0); Constructor. RooAbsSelfCachedPdf(const RooAbsSelfCachedPdf& other, const char* name = 0); Copy constructor. ~RooAbsSelfCachedPdf(); Destructor. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Fill cache with sampling of p.d.f as defined by the evaluate() implementation. RooArgSet* actualObservables(const RooArgSet& nset) const; Defines observables to be cached, given a set of user defined observables; Returns the subset of nset that are observables this p.d.f. RooArgSet* actualParameters(const RooArgSet& nset) const; Defines parameters on which cache contents depends. Returns; subset of variables of self that is not contained in the; supplied nset. RooAbsSelfCachedPdf(); {}. const char* inputBaseName() const; Use own name as base name for caches. » Last changed: Tue Jun 2 15:27:30 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsSelfCachedPdf.html:47849,variab,variables,47849,root/html604/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html604/RooAbsSelfCachedPdf.html,1,['variab'],['variables']
Modifiability,"gy ) to RooAcceptReject,; // a plain accept/reject sampling algorithm [ RooFit default before ROOT 5.23/04 ]; RooAbsPdf::defaultGeneratorConfig()->method1D(false, false).setLabel(""RooAcceptReject"");; ; // Generate 10Kevt using RooAcceptReject; std::unique_ptr<RooDataSet> data_ar{model.generate(x, 10000, Verbose(true))};; data_ar->Print();; ; // A d j u s t i n g d e f a u l t c o n f i g f o r a s p e c i f i c p d f; // -------------------------------------------------------------------------------------; ; // Another possibility: associate custom MC sampling configuration as default for object 'model'; // The true argument will install a clone of the default configuration as specialized configuration; // for this model if none existed so far; model.specialGeneratorConfig(true)->method1D(false, false).setLabel(""RooFoamGenerator"");; ; // A d j u s t i n g p a r a m e t e r s o f a s p e c i f i c t e c h n i q u e; // ---------------------------------------------------------------------------------------; ; // Adjust maximum number of steps of RooIntegrator1D in the global default configuration; RooAbsPdf::defaultGeneratorConfig()->getConfigSection(""RooAcceptReject"").setRealValue(""nTrial1D"", 2000);; ; // Example of how to change the parameters of a numeric integrator; // (Each config section is a RooArgSet with RooRealVars holding real-valued parameters; // and RooCategories holding parameters with a finite set of options); model.specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""chatLevel"", 1);; ; // Generate 10Kevt using RooFoamGenerator (FOAM verbosity increased with above chatLevel adjustment for illustration; // purposes); std::unique_ptr<RooDataSet> data_foam{model.generate(x, 10000, Verbose())};; data_foam->Print();; }; RooArgSet.h; RooChebychev.h; RooDataSet.h; RooNumGenConfig.h; RooPlot.h; RooRealVar.h; TAxis.h; TCanvas.h; RooAbsCollection::setRealValuebool setRealValue(const char *name, double newVal=0.0, bool verbose=false)Set va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf902__numgenconfig_8C.html:2237,config,configuration,2237,doc/master/rf902__numgenconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf902__numgenconfig_8C.html,1,['config'],['configuration']
Modifiability,"gy( y[-10,10], x, 1.0 )"");; w->factory(""PROD::gxycond( gy|x, gx )"");; ; // Convolution (numeric/ fft) is done with NCONV/FCONV (obs,pdf1,pdf2); w->factory(""FCONV::lxg( x, Gaussian::g(x,mg[0],1), Landau::lc(x,0,1) )"");; ; // Simultaneous pdfs are constructed with SIMUL( index, state1=pdf1, state2=pdf2,...); w->factory(""SIMUL::smodel( c[A=0,B=1], A=Gaussian::gs(x,m,s[1.0, 0.01, 10.0]), B=Landau::ls(x,0,1) )"");; ; // O p e r a t o r f u n c t i o n e x a m p l e s; // ---------------------------------------------------; ; // Function multiplication is done with prod (func1, func2,...); w->factory(""prod::uv(u[10],v[10])"");; ; // Function addition is done with sum(func1,func2); w->factory(""sum::uv2(u,v)"");; ; // Lagrangian morphing function for the example shown in rf711_lagrangianmorph; std::string infilename = std::string(gROOT->GetTutorialDir()) + ""/roofit/input_histos_rf_lagrangianmorph.root"";; w->factory((""lagrangianmorph::morph($fileName('""+infilename+""'),$observableName('pTV'),$couplings({cHq3[0,1],SM[1]}),$NewPhysics(cHq3=1,SM=0),$folders({'SM_NPsq0','cHq3_NPsq1','cHq3_NPsq2'}))"").c_str());; ; ; // Taylor expansion is done with taylorexpand(func,{var1,var2,...},val,order); w->factory(""taylorexpand::te(expr::poly('x^4+5*x^3+2*x^2+x+1',x),{x},0.0,2)"");; ; ; // I n t e r p r e t e d a n d c o m p i l e d e x p r e s s i o n b a s e d p . d . f . s .; // ---------------------------------------------------------------------------------------------------; ; // Create a RooGenericPdf interpreted pdf You can use single quotes to pass the expression string argument; w->factory(""EXPR::G('x*x+1',x)"");; ; // Create a custom compiled pdf similar to the above interpreted pdf; // The code required to make this pdf is automatically embedded in the workspace; w->factory(""CEXPR::GC('x*x+a',{x,a[1]})"");; ; // Compiled and interpreted functions (rather than pdfs) can be made with the lower case; // 'expr' and 'cexpr' types; ; // Print workspace contents; w->Print();; ; // Make works",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf512__wsfactory__oper_8C.html:2443,coupling,couplings,2443,doc/master/rf512__wsfactory__oper_8C.html,https://root.cern,https://root.cern/doc/master/rf512__wsfactory__oper_8C.html,1,['coupling'],['couplings']
Modifiability,"g CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TGScrollBar; Bool_t fAccelerated;  kFALSE - normal, kTRUE - accelerated ;  ; Pixel_t fBgndColor;  background color ;  ; Bool_t fDragging;  in dragging mode? ;  ; Bool_t fGrabPointer;  grab pointer when dragging ;  ; TGScrollBarElement * fHead;  head button of scrollbar ;  ; const TGPicture * fHeadPic;  picture in head (up or left arrow) ;  ; Pixel_t fHighColor;  highlight color ;  ; Int_t fPos;  logical current position ;  ; Int_t fPsize;  logical page size of scrollbar ;  ; Int_t fRange;  logical upper range of scrollbar ;  ; TTimer * fRepeat;  repeat rate timer (when mouse stays pressed) ;  ; TGScrollBarElement * fSlider;  slider ;  ; Int_t fSliderRange;  logical slider range ;  ; Int_t fSliderSize;  logical slider size ;  ; Int_t fSmallInc;  Small Increment in the sliding algorithm. ;  ; Window_t fSubw;  sub window in which mouse is pressed ;  ; TGScrollBarElement * fTail;  tail button of scrollbar ;  ; const TGPicture * fTailPic;  picture in tail (down or right arrow) ;  ; Int_t fX0;  ; Int_t fXp;  ; Int_t fY0;  current slider position in pixels ;  ; Int_t fYp;  previous slider position in pixels ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHScrollBar.html:27685,inherit,inherited,27685,doc/master/classTGHScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGHScrollBar.html,2,['inherit'],['inherited']
Modifiability,"g SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Update the fX and fY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TCutG.h>. Inheritance diagram for TCutG:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TCutG() [1/5]. TCutG::TCutG ; (; ). TCutG default constructor. ; Definition at line 99 of file TCutG.cxx. ◆ TCutG() [2/5]. TCutG::TCutG ; (; const TCutG & ; cutg). TCutG copy constructor. ; Definition at line 108 of file TCutG.cxx. ◆ TCutG() [3/5]. TCutG::TCutG ; (; const char * ; name, . Int_t ; n = 0 . ). TCutG normal constructor. ; Definition at line 120 of file TCutG.cxx. ◆ TCutG() [4/5]. TCutG::TCutG ; (; const char * ; name, . Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). TCutG normal constructor. ; Definition at line 161 of file TCutG.cxx. ◆ TCutG() [5/5]. TCutG::TCutG ; (; const char * ; name, . Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). TCutG normal constructor. ; Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCutG.html:35340,inherit,inherited,35340,doc/master/classTCutG.html,https://root.cern,https://root.cern/doc/master/classTCutG.html,1,['inherit'],['inherited']
Modifiability,"g SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Update the fX and fY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEllipse.html:32997,inherit,inherited,32997,doc/master/classRooEllipse.html,https://root.cern,https://root.cern/doc/master/classRooEllipse.html,1,['inherit'],['inherited']
Modifiability,"g fPDFName;  for output ;  ; UInt_t fReadingVersion;  the TMVA version of the weight file ;  ; TSpline * fSpline;  ! the used spline type ;  ; TString fSuffix;  ! the suffix for options ;  ; Bool_t fUseHistogram;  . Static Private Attributes; static const Double_t fgEpsilon = 1.0e-12;  minimum PDF return ;  ; static const Bool_t fgManualIntegration = kTRUE;  manual integration (sum over bins) or DGAUSS ;  ; static const Int_t fgNbin_PdfHist = 10000;  number of bins in high-binned reference histogram ;  . Friends; std::ostream & operator<< (std::ostream &os, const PDF &tree);  ; std::istream & operator>> (std::istream &istr, PDF &tree);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/PDF.h>. Inheritance diagram for TMVA::PDF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterpolateMethod. enum TMVA::PDF::EInterpolateMethod. EnumeratorkSpline0 ; kSpline1 ; kSpline2 ; kSpline3 ; kSpline5 ; kKDE . Definition at line 70 of file PDF.h. Constructor & Destructor Documentation. ◆ PDF() [1/4]. TMVA::PDF::PDF ; (; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDF.html:17898,inherit,inherited,17898,doc/master/classTMVA_1_1PDF.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDF.html,3,['inherit'],['inherited']
Modifiability,"g fSeparator;  ; Bool_t fSepIsRegexp;  ;  Protected Attributes inherited from TDocDirective; Int_t fCounter;  ; TDocOutput * fDocOutput;  ; TDocParser * fDocParser;  ; THtml * fHtml;  ; TString fParameters;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TDocDirective.h>. Inheritance diagram for TDocLatexDirective:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDocLatexDirective(). TDocLatexDirective::TDocLatexDirective ; (; ). inline . Definition at line 136 of file TDocDirective.h. ◆ ~TDocLatexDirective(). TDocLatexDirective::~TDocLatexDirective ; (; ). override . Destructor. ; Definition at line 611 of file TDocDirective.cxx. Member Function Documentation. ◆ AddLine(). void TDocLatexDirective::AddLine ; (; const TSubString & ; line). overridevirtual . Add a latex line. ; Implements TDocDirective.; Definition at line 622 of file TDocDirective.cxx. ◆ AddParameter(). void TDocLatexDirective::AddParameter ; (; const TString & ; name, . const char * ; value = 0 . ). overrideprotectedvirtual . Parse fParameters, setting fFontSize, fAlignment, and fSeparator. ; Reimplemented from TDocDirecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocLatexDirective.html:13702,inherit,inherited,13702,doc/master/classTDocLatexDirective.html,https://root.cern,https://root.cern/doc/master/classTDocLatexDirective.html,1,['inherit'],['inherited']
Modifiability,"g fTitle;  . Friends; class BuildConfig;  ; class MultiBuildConfig;  ; class RooSimWSTool;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooSimWSTool.h>. Inheritance diagram for RooSimWSTool::SplitRule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SplitRule(). RooSimWSTool::SplitRule::SplitRule ; (; const char * ; pdfName = """"). inline . Definition at line 77 of file RooSimWSTool.h. Member Function Documentation. ◆ configure(). void RooSimWSTool::Spli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimWSTool_1_1SplitRule.html:11088,inherit,inherited,11088,doc/master/classRooSimWSTool_1_1SplitRule.html,https://root.cern,https://root.cern/doc/master/classRooSimWSTool_1_1SplitRule.html,2,['inherit'],['inherited']
Modifiability,"h ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual Long64_t Scan (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over tree entries and print entries passing selection. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:19730,variab,variable,19730,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,2,['variab'],['variable']
Modifiability,"h (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Private Member Functions; bool canComputeBatchWithCuda () const override;  ; void doEval (RooFit::EvalContext &) const override;  Compute multiple values of ChiSquare distribution. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  . Private Attributes; RooRealProxy _ndof;  ; RooRealProxy _x;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChiSquarePdf.html:59176,inherit,inherited,59176,doc/master/classRooChiSquarePdf.html,https://root.cern,https://root.cern/doc/master/classRooChiSquarePdf.html,4,['inherit'],['inherited']
Modifiability,"h (same for all bins) ;  ; RooAbsBinning * clone (const char *name=nullptr) const override;  ; double highBound () const override;  ; TClass * IsA () const override;  ; bool isUniform () const override;  ; double lowBound () const override;  ; Int_t numBoundaries () const override;  ; void setRange (double xlo, double xhi) override;  Change range to [xlo,xhi]. ;  ; void Streamer (TBuffer &) override;  Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsBinning;  RooAbsBinning (const char *name=nullptr);  ;  RooAbsBinning (const RooAbsBinning &other, const char *name=nullptr);  ; int binNumber (double x) const;  Returns the bin number corresponding to the value x. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsReal * highBoundFunc () const;  Return pointer to RooAbsReal parameterized upper bound, if any. ;  ; virtual void insertHook (RooAbsRealLValue &) const;  Hook interface function to execute code upon insertion into a RooAbsRealLValue. ;  ; virtual bool isParameterized () const;  Interface function. ;  ; virtual bool isShareable () const;  If true (default), the range definition can be shared across clones of a RooRealVar. ;  ; virtual RooAbsReal * lowBoundFunc () const;  Return pointer to RooAbsReal parameterized lower bound, if any. ;  ; Int_t numBins () const;  Return number of bins. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print binning arguments (the RooAbsReal objects represening the variable bin boundaries for parameterized binning implementations. ;  ; void printClassName (std::ostream &os) const override;  Print binning class name. ;  ; void printName (std::ostream &os) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniformBinning.html:2569,parameteriz,parameterized,2569,doc/master/classRooUniformBinning.html,https://root.cern,https://root.cern/doc/master/classRooUniformBinning.html,1,['parameteriz'],['parameterized']
Modifiability,"h * Branch(const char *name, int address, const char *leaflist, Int_t bufsize=32000)Definition TTree.h:389; TTree::MoveReadCachevoid MoveReadCache(TFile *src, TDirectory *dir)Move a cache from a file to the current file in dir.Definition TTree.cxx:6983; TTree::operator=TTree & operator=(const TTree &tt)=delete; TTree::fAutoFlushLong64_t fAutoFlushAuto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced.Definition TTree.h:101; TTree::fUpdateInt_t fUpdateUpdate frequency for EntryLoop.Definition TTree.h:93; TTree::ResetAfterMergevirtual void ResetAfterMerge(TFileMergeInfo *)Resets the state of this TTree after a merge (keep the customization but forget the data).Definition TTree.cxx:8034; TTree::BranchTBranch * Branch(const char *name, std::array< T, N > *obj, Int_t bufsize=32000, Int_t splitlevel=99)Definition TTree.h:405; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::SetEstimatevirtual void SetEstimate(Long64_t nentries=1000000)Set number of entries to estimate variable limits.Definition TTree.cxx:9110; TTree::fTimerIntervalInt_t fTimerIntervalTimer interval in milliseconds.Definition TTree.h:91; TTree::fDebugInt_t fDebug! Debug levelDefinition TTree.h:111; TTree::SetCacheSizeAuxInt_t SetCacheSizeAux(bool autocache=true, Long64_t cacheSize=0)Set the size of the file cache and create it if possible.Definition TTree.cxx:8711; TTree::AutoSavevirtual Long64_t AutoSave(Option_t *option="""")AutoSave tree header every fAutoSave bytes.Definition TTree.cxx:1500; TTree::GetEntryNumbervirtual Long64_t GetEntryNumber(Long64_t entry) constReturn entry number corresponding to entry.Definition TTree.cxx:5865; TTree::CloneTreevirtual TTree * CloneTree(Long64_t nentries=-1, Option_t *option="""")Create a clone of this tree and copy nentries.Definition TTree.cxx:3139; TTree::GetImplicitMTvirtual bool GetImplicitMT()Definition TTree.h:520; TTree::fFileNumberInt_t fFileNumber! current file number (if file extensions)De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:71048,variab,variable,71048,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['variab'],['variable']
Modifiability,"h . Error bars per bin are given by Eq. (6). The ; reproduce the true distributions of the species in the control variable , within the above defined statistical uncertainties. Illustrations. To illustrate the technique, one considers an example derived from the analysis where . have been first used (charmless B decays). One is dealing with a data; sample in which two species are present: the first is termed signal and; the second background. A maximum Likelihood fit is performed to obtain; the two yields and . The fit relies on two discriminating variables collectively denoted  which are chosen within three possible variables denoted , and .; The variable which is not incorporated in  is used as the control variable . The six distributions of the three variables are assumed to be the ones depicted in Fig. 1. Figure 1:; Distributions of the three discriminating variables available to perform the Likelihood fit:; , , .; Among the three variables, two are used to perform the fit while one is; kept out of the fit to serve the purpose of a control variable. The; three distributions on the top (resp. bottom) of the figure correspond; to the signal (resp. background). The unit of the vertical axis is; chosen such that it indicates the number of entries per bin, if one; slices the histograms in 25 bins. A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of  clearly indicates the presence of the signal, the distribution of and are less obviously populated by signal. Figure 2:; Distributions of the three discriminating variables for signal plus; background. The three distributions are the ones obtained from a data; sample obtained through a Monte Carlo simulation based on the; distributions shown in Fig. 1. The data sample consists of 500 signal events and 5000 background events. Chosing and as discriminating variables to determine and through a maximum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSPlot.html:5698,variab,variables,5698,root/html602/TSPlot.html,https://root.cern,https://root.cern/root/html602/TSPlot.html,4,['variab'],"['variable', 'variables']"
Modifiability,"h 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void FindMomentumLimits (TEveElement *el, Bool_t recurse=kTRUE);  Loop over track elements of argument el and find highest pT and p. ;  ; Double_t RoundMomentumLimit (Double_t x);  Round the momentum limit up to a nice value. ;  ; void SanitizeMinMaxCuts ();  Set Min/Max cuts so that they are within detected limits. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fLimP;  ; Double_t fLimPt;  ; Double_t fMaxP;  ; Double_t fMaxPt;  ; Double_t fMinP;  ; Double_t fMinPt;  ; TEveTrackPropagator * fPropagator;  ; Bool_t fRecurse;  ; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackList.html:35610,inherit,inherited,35610,doc/master/classTEveTrackList.html,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html,1,['inherit'],['inherited']
Modifiability,"h GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Evalvirtual Double_t Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constEvaluate this function.Definition TF1.cxx:1439; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TGraphPolar::Drawvoid Draw(Option_t *options="""") overrideDraw TGraphPolar.Definition TGraphPolar.cxx:100; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; double; int; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37. Definition at line 20 of file TGraphPolargram.h. Public Types; enum  { kLabelOrtho = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGraphPolargram (const char *name, Double_t rmin, Double_t rmax, Double_t tmin, Double_t tmax);  TGraphPolargram Constructor. ;  ;  TGraphPolargram (const char *name="""");  Short constructor used in the case of a spider plot. ;  ;  ~TGraphPolargram () override;  TGraphPolargram destructor. ;  ; void ChangeRangePolar (Double_t tmin, Double_t tmax);  Set the Polar range. ;  ; Int_t DistancetoPrimit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolargram.html:1961,inherit,inherited,1961,doc/master/classTGraphPolargram.html,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html,1,['inherit'],['inherited']
Modifiability,"h GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; TH1.h; gPad#define gPadDefinition TVirtualPad.h:308; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooBMixDecayClass RooBMixDecay is a RooAbsAnaConvPdf implementation that describes the decay of B mesons with the...Definition RooBMixDecay.h:23; RooBMixDecay::DoubleSided@ DoubleSidedDefinition RooBMixDecay.h:26; RooBinningImplements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choi...Definition RooBinning.h:27; RooCategoryObject to represent discrete states.Definition RooCategory.h:28; RooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution.Definition RooGaussModel.h:25; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooPlot::SetMaximumSetMaximum(ymax); RooPlot::SetMinimumSetMinimum(ymin); RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf108_plotbinningDefinition rf108_plotbinning.py:1; RangeTa Range(0, 0, 1, 1); ; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (mixState,tagFlav); [#1] INFO:Plott",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf108__plotbinning_8C.html:5524,variab,variable,5524,doc/master/rf108__plotbinning_8C.html,https://root.cern,https://root.cern/doc/master/rf108__plotbinning_8C.html,1,['variab'],['variable']
Modifiability,"h RooSimultaneous in 6.24.00 ?; [#8295] - TChain::AddClone failing for sub-branches of branch of type with ClassDef; [#7727] - TChain::CopyAddresses:0 warning in RDataFrame Snapshot of TChain with multiple files with objects; [#6520] - Integer types not available for Bulk API; [#8317] - [DF] Compilation failure when a mutable lambda is passed to Foreach; [#8155] - Error opening remote root file LCG_100; [#8280] - ROOT CMake fails if an external package sets a higher minimum CMake version; [#8281] - ROOT 6.24 fails to compile with GCC 11.1 in C++11 mode; [#8180] - ROOT 6.24 breaks Alice O2 due to symbol confusion with system llvm 11; [#8033] - StreamerElement retrieved from file has incorrect element name for (some) arrays.; [#8022] - TBB exposed in public includes of Thread library; [#7905] - sqrt without std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:49098,extend,extendedTerm,49098,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['extend'],['extendedTerm']
Modifiability,"h a given division number as illustrated above; with TPad::cd(subpad_number).; For example, to set the current pad to c1_4, one can do:; c1->cd(4). Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; points to the current pad. One can use gPad to set attributes; of the current pad.; Note3: in case xmargin <=0 and ymargin <= 0, there is no space; between pads. The current pad margins are recomputed to; optimize the layout. void Draw(Option_t* option = """"); Draw Pad in Current pad (re-parent pad if necessary). void DrawClassObject(const TObject* obj, Option_t* option = """"); Draw class inheritance tree of the class to which obj belongs.; If a class B inherits from a class A, description of B is drawn; on the right side of description of A.; Member functions overridden by B are shown in class A with a blue line; crossing-out the corresponding member function.; The following picture is the class inheritance tree of class TPaveLabel:. /*; ; */. void DrawCrosshair(); Function called to draw a crosshair in the canvas. Example:; Root > TFile f(""hsimple.root"");; Root > hpxpy.Draw();; Root > c1.SetCrosshair();; When moving the mouse in the canvas, a crosshair is drawn. if the canvas fCrosshair = 1 , the crosshair spans the full canvas; if the canvas fCrosshair > 1 , the crosshair spans only the pad. TH1F * DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char* title = """"); Draw a pad frame. Compute real pad range taking into account all margins; Use services of TH1F class. void DrawColorTable(); Static function to Display Color Table in a pad. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TPad object is clicked. If the mouse is clicked in one of the 4 corners of the pad (pA,pB,pC,pD); the pad is resized with the rubber rectangle. If the mouse is clicked inside the pad, th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:37720,inherit,inheritance,37720,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,3,['inherit'],['inheritance']
Modifiability,"h array.; 591 Int_t vlen = *((Int_t*) ((char *) addr /*entry pointer*/ + eoffset /*entry offset*/ + config->fCompInfo->fMethod /*counter offset*/));; 592 //b << vlen;; 593 if (vlen) {; 594 // Get a pointer to the array of pointers.; 595 char** pp = (char**) ((char *) addr /*entry pointer*/ + ioffset /*object offset*/);; 596 // -- Older versions do *not* allow polymorphic pointers to objects.; 597 // Loop over each element of the array of pointers to varying-length arrays.; 598 for (Int_t ndx = 0; ndx < config->fCompInfo->fLength; ++ndx) {; 599 if (!pp[ndx]) {; 600 // -- We do not have a pointer to a varying-length array.; 601 //Error(""WriteBufferAux"", ""The pointer to element %s::%s type %d (%s) is null\n"", GetName(), aElement->GetFullName(), compinfo[i]->fType, aElement->GetTypeName());; 602 // ::ErrorHandler(kError, ""::WriteTextStreamerLoop"", Form(""The pointer to element %s::%s type %d (%s) is null\n"", config->fInfo->GetName(), config->fCompInfo->fElem->GetFullName(), config->fCompInfo->fType, config->fCompInfo->fElem->GetTypeName()));; 603 printf(""WriteStreamerLoop - The pointer to element %s::%s type %d (%s) is null\n"", config->fInfo->GetName(), config->fCompInfo->fElem->GetFullName(), config->fCompInfo->fType, config->fCompInfo->fElem->GetTypeName());; 604 continue;; 605 }; 606 if (!isPtrPtr) {; 607 // -- We are a varying-length array of objects.; 608 // Loop over the elements of the varying length array.; 609 for (Int_t v = 0; v < vlen; ++v) {; 610 // Write the object to the buffer.; 611 cl->Streamer(pp[ndx] + (v * cl->Size()), buf);; 612 } // v; 613 }; 614 else {; 615 // -- We are a varying-length array of pointers to objects.; 616 // Loop over the elements of the varying length array.; 617 for (Int_t v = 0; v < vlen; ++v) {; 618 // Get a pointer to the object pointer.; 619 char** r = (char**) pp[ndx];; 620 // Write the object to the buffer.; 621 cl->Streamer(r[v], buf);; 622 } // v; 623 } // isPtrPtr; 624 } // ndx; 625 } // vlen; 626 //} // k; 627 } // fileVe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:24849,config,config,24849,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,8,['config'],['config']
Modifiability,"h as the coordinates of a point, it is most efficient to create one branch with both coordinates on it. A variable on a TBranch is called a leaf (yes - TLeaf). Another point to keep in mind when designing trees is that branches of the same TTree can be written to separate files. To add a TBranch to a TTree we call the method TTree::Branch(). Note that we DO NOT use the TBranch constructor.; The TTree::Branch method has several signatures. The branch type differs by what is stored in it. A branch can hold an entire object, a list of simple variables, contents of a folder, contents of a TList, or an array of objects. Let’s see some examples. To follow along you will need the shared library libEvent.so. First, check if it is in $ROOTSYS/test. If it is, copy it to your own area. If it is not there, you have to build it by typing make in $ROOTSYS/test.; 12.9 Adding a Branch to Hold a List of Variables; As in the very first example (cernstaff.root.root) the data we want to save is a list of simple variables, such as integers or floats. In this case, we use the following TTree::Branch signature:; tree->Branch(""Ev_Branch"",&event,; ""temp/F:ntrack/I:nseg:nvtex:flag/i"");; The first parameter is the branch name.; The second parameter is the address from which the first variable is to be read. In the code above, “event” is a structure with one float and three integers and one unsigned integer. You should not assume that the compiler aligns the elements of a structure without gaps. To avoid alignment problems, you need to use structures with same length members. If your structure does not qualify, you need to create one branch for each element of the structure.; The leaf name is NOT used to pick the variable out of the structure, but is only used as the name for the leaf. This means that the list of variables needs to be in a structure in the order described in the third parameter.; This third parameter is a string describing the leaf list. Each leaf has a name and a type separate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:537709,variab,variables,537709,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['variab'],['variables']
Modifiability,"h bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fNpy;  Number of points along y used for the graphical representation. ;  ; Double_t fYmax;  Upper bound for the range in y. ;  ; Double_t fYmin;  Lower bound for the range in y. ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:42443,inherit,inherited,42443,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,1,['inherit'],['inherited']
Modifiability,"h dimension (an array at least ndim long) ; [in]optionconsists of 3 parts - flag option and an option to create a new TVirtualFFT; transform type option: Available transform types are: C2CForward, C2CBackward, C2R, R2C, R2HC, HC2R, DHT see class description for details; flag option: choosing how much time should be spent in planning the transform: Possible options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. option allowing to choose between the global fgFFT and a new TVirtualFFT object """" - default, changes and returns the global fgFFT variable ""K"" (from ""keep"")- without touching the global fgFFT, creates and returns a new TVirtualFFT*. User is then responsible for deleting it. Examples of valid options: ""R2C ES K"", ""C2CF M"", ""DHT P K"", etc. ; Definition at line 131 of file TVirtualFFT.cxx. ◆ GetCurrentTransform(). TVirtualFFT * TVirtualFFT::GetCurrentTransform ; (; ). static . static: return current fgFFT ; Definition at line 348 of file TVirtualFFT.cxx. ◆ GetDefaultFFT(). const char * TVirtualFFT::GetDefaultFFT ; (; ). static . static: return the name of the default fft ; Definition at line 369 of file TVirtualFFT.cxx. ◆ GetN(). virtual Int_t * TVirtualFFT::GetN ; (; ); const. pure virtual . Implemented in TFFTComplex, TFFTComplexReal, TFFTReal, and TFFTRealComplex. ◆ GetNdim(). virtual Int_t TVirtualFFT::GetNdim ; (; ); const. pure virtual . Implemented in TFFTComplex, TFFTComplexReal, TFFTReal, and TFFTRealComplex. ◆ GetPointComplex() [1/2]. virtual void TVirtualFFT::GetPointComplex ; (; const Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFFT.html:17544,variab,variable,17544,doc/master/classTVirtualFFT.html,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html,1,['variab'],['variable']
Modifiability,"h for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction2PdfBinding_double_int_int_.html:40034,config,configuration,40034,root/html532/RooCFunction2PdfBinding_double_int_int_.html,https://root.cern,https://root.cern/root/html532/RooCFunction2PdfBinding_double_int_int_.html,1,['config'],['configuration']
Modifiability,"h for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TMatrixD_mref; static Int_tRooPrintable::_nameLength; Int_t_npoints; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo2DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; int_squareIdx[4]; TMatrixD_squareVec; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verbose; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym1; RooRealProxym2.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo2DMomentMorphFunction.html:34320,config,configuration,34320,root/html532/Roo2DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html532/Roo2DMomentMorphFunction.html,1,['config'],['configuration']
Modifiability,"h given name. A null pointer is returned if not found. ; Definition at line 1318 of file RooWorkspace.cxx. ◆ expensiveObjectCache(). RooExpensiveObjectCache & RooWorkspace::expensiveObjectCache ; (; ). inline . Definition at line 166 of file RooWorkspace.h. ◆ extendSet(). bool RooWorkspace::extendSet ; (; const char * ; name, . const char * ; newContents . ). Define a named set in the workspace through a comma separated list of names of objects already in the workspace. ; Definition at line 937 of file RooWorkspace.cxx. ◆ factory() [1/2]. RooFactoryWSTool & RooWorkspace::factory ; (; ). Return instance to factory tool. ; Definition at line 2067 of file RooWorkspace.cxx. ◆ factory() [2/2]. RooAbsArg * RooWorkspace::factory ; (; RooStringView ; expr). Short-hand function for factory()->process(expr); ; Create a RooFit object from the given expression. . Creating variables . x[-10,10] Create variable x with given range and put it in workspace . x[3,-10,10] Create variable x with given range and initial value and put it in workspace . x[3] Create variable x with given constant value . <numeric literal> Numeric literal expressions (0.5, -3 etc..) are converted to a RooConst(<numeric literal>) wherever a RooAbsReal or RooAbsArg argument is expected . Creating categories . c[lep,kao,nt1,nt2] Create category c with given state names . tag[B0=1,B0bar=-1] Create category tag with given state names and index assignments . Creating functions and pdfs . MyPdf::g(x,m,s) Create pdf or function of type MyPdf with name g with argument x,m,s Interpretation and number of arguments are mapped to the constructor arguments of the class (after the name and title). . MyPdf(x,m,s) As above, but with an implicitly defined (unique) object name . Creating sets and lists (to be used as inputs above) . {a,b,c} Create RooArgSet or RooArgList (as determined by context) from given contents . Objects that are not created, are assumed to exist in the workspace Object creation expressions as shown abov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:31066,variab,variable,31066,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['variab'],['variable']
Modifiability,"h gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::LogLikelihoodFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IMultiGenFunction>. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:1409,extend,extended,1409,root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['extend'],['extended']
Modifiability,"h has its content; 522/// incremented by w; 523 ; 524Int_t TH3::Fill(const char *namex, Double_t y, const char *namez, Double_t w); 525{; 526 Int_t binx, biny, binz, bin;; 527 fEntries++;; 528 binx = fXaxis.FindBin(namex);; 529 biny = fYaxis.FindBin(y);; 530 binz = fZaxis.FindBin(namez);; 531 if (binx <0 || biny <0 || binz<0) return -1;; 532 bin = binx + (fXaxis.GetNbins()+2)*(biny + (fYaxis.GetNbins()+2)*binz);; 533 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 534 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 535 AddBinContent(bin,w);; 536 if (binx == 0 || binx > fXaxis.GetNbins()) return -1;; 537 if (biny == 0 || biny > fYaxis.GetNbins()) {; 538 if (!GetStatOverflowsBehaviour()) return -1;; 539 }; 540 if (binz == 0 || binz > fZaxis.GetNbins()) return -1;; 541 Double_t v = w;; 542 fTsumw += v;; 543 fTsumw2 += v*v;; 544 fTsumwy += v*y;; 545 fTsumwy2 += v*y*y;; 546 // skip computation of the statistics along axis that have labels (can be extended and are aphanumeric); 547 UInt_t labelBitMask = GetAxisLabelStatus();; 548 if (labelBitMask != (TH1::kXaxis | TH1::kZaxis) ) {; 549 Double_t x = (labelBitMask & TH1::kXaxis) ? 0 : fXaxis.GetBinCenter(binx);; 550 Double_t z = (labelBitMask & TH1::kZaxis) ? 0 : fZaxis.GetBinCenter(binz);; 551 fTsumwx += v * x;; 552 fTsumwx2 += v * x * x;; 553 fTsumwxy += v * x * y;; 554 fTsumwz += v * z;; 555 fTsumwz2 += v * z * z;; 556 fTsumwxz += v * x * z;; 557 fTsumwyz += v * y * z;; 558 }; 559 return bin;; 560}; 561 ; 562 ; 563////////////////////////////////////////////////////////////////////////////////; 564/// Increment cell defined by namex,namey,z by a weight w; 565///; 566/// If the weight is not equal to 1, the storage of the sum of squares of; 567/// weights is automatically triggered and the sum of the squares of weights is incremented; 568/// by w^2 in the corresponding cell.; 569/// The function returns the corresponding global bin number which has its content; 570/// incre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:20947,extend,extended,20947,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['extend'],['extended']
Modifiability,"h input variables; ; Define the input variables that shall be used for the MVA training; note that you may also use variable expressions, which can be parsed by TTree::Draw( ""expression"" )]; ; ***/; ; TMVA::DataLoader * loader = new TMVA::DataLoader(""dataset"");; ; loader->AddVariable(""m_jj"");; loader->AddVariable(""m_jjj"");; loader->AddVariable(""m_lv"");; loader->AddVariable(""m_jlv"");; loader->AddVariable(""m_bb"");; loader->AddVariable(""m_wbb"");; loader->AddVariable(""m_wwbb"");; ; /// We set now the input data trees in the TMVA DataLoader class; ; // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;; ; // You can add an arbitrary number of signal or background trees; loader->AddSignalTree ( signalTree, signalWeight );; loader->AddBackgroundTree( backgroundTree, backgroundWeight );; ; ; // Set individual event weights (the variables must exist in the original TTree); // for signal : factory->SetSignalWeightExpression (""weight1*weight2"");; // for background: factory->SetBackgroundWeightExpression(""weight1*weight2"");; //loader->SetBackgroundWeightExpression( ""weight"" );; ; // Apply additional cuts on the signal and background samples (can be different); TCut mycuts = """"; // for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; TCut mycutb = """"; // for example: TCut mycutb = ""abs(var1)<0.5"";; ; // Tell the factory how to use the training and testing events; //; // If no numbers of events are given, half of the events in the tree are used; // for training, and the other half for testing:; // loader->PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; // To also specify the number of testing events, use:; ; loader->PrepareTrainingAndTestTree( mycuts, mycutb,; ""nTrain_Signal=7000:nTrain_Background=7000:SplitMode=Random:NormMode=NumEvents:!V"" );; ; /***; ## Booking Methods; ; Here we book the TMVA methods. We book first a Likelihood based on KDE (Kernel Density Estimation),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:60584,variab,variables,60584,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['variab'],['variables']
Modifiability,"h its attributes. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetBorderSize (Int_t bordersize=4);  Sets the border size of the TPave box and shadow. ;  ; virtual void SetCornerRadius (Double_t rad=0.2);  ; virtual void SetName (const char *name="""");  ; virtual void SetOption (Option_t *option=""br"");  ; virtual void SetShadowColor (Int_t color);  ; void SetX1 (Double_t x1) override;  Set the X1 value. ;  ; virtual void SetX1NDC (Double_t x1);  ; void SetX2 (Double_t x2) override;  Set the X2 value. ;  ; virtual void SetX2NDC (Double_t x2);  ; void SetY1 (Double_t y1) override;  Set the Y1 value. ;  ; virtual void SetY1NDC (Double_t y1);  ; void SetY2 (Double_t y2) override;  Set the Y2 value. ;  ; virtual void SetY2NDC (Double_t y2);  ; void Streamer (TBuffer &) override;  Stream an object of class TPave. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBox;  TBox ();  Box default constructor. ;  ;  TBox (const TBox &box);  Box copy constructor. ;  ;  TBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Box standard constructor. ;  ;  ~TBox () override;  Box destructor. ;  ; virtual TBox * DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this box with new coordinates. ;  ; Rectangle_t GetBBox () override;  Return the ""bounding Box"" of the Box. ;  ; TPoint GetBBoxCenter () override;  Return the center of the Box as TPoint in pixels. ;  ; Double_t GetX1 () const;  ; Double_t GetX2 () const;  ; Double_t GetY1 () const;  ; Double_t GetY2 () const;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; Bool_t IsBeingResized () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Function which returns 1 if point x,y lies inside the box, 0 otherwise. ;  ; TBox & operator= (const TBox &);  Assignment operator. ;  ; virtual void Pai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:15681,inherit,inherited,15681,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,3,['inherit'],['inherited']
Modifiability,"h labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing values; = ""h"" draw labels horizonthal; = ""v"" draw labels vertical; = ""u"" draw labels up (end of label right adjusted); = ""d"" draw labels down (start of label left adjusted). Bool_t GetRotateTitle() const; Return kTRUE if kRotateTitle bit is set, kFALSE otherwise. void ImportAttributes(const TAxis* axis); Copy axis attributes to this. void RotateTitle(Bool_t rotate = kTRUE); rotate title by 180 degrees; by default the title is drawn right adjusted.; if rotate is TRUE, the title is left adjusted at the end of the axis; and rotated by 180 degrees. void SaveAttributes(ostream& out, const char* name, const char* subname); Save axis attributes as C++ statement(s) on output stream out. void Set(Int_t nbins, Double_t xmin, Double_t xmax); Initialize axis with fix bins. void Set(Int_t nbins, const Float_t *xbins); Initialize axis with variable bins. void Set(Int_t nbins, const Double_t *xbins); Initialize axis with variable bins. void SetDefaults(); Set axis default values (from TStyle). Bool_t GetDecimals() const; Returns kTRUE if kDecimals bit is set, kFALSE otherwise.; see TAxis::SetDecimals. void SetDecimals(Bool_t dot = kTRUE); Set the Decimals flag; By default, blank characters are stripped, and then the; label is correctly aligned. The dot, if last character of the string,; is also stripped, unless this option is specified.; One can disable the option by calling axis.SetDecimals(kTRUE).; The flag (in fBits2) is passed to the drawing function TGaxis::PaintAxis. void SetBinLabel(Int_t bin, const char* label); Set label for bin. void SetLimits(Double_t xmin, Double_t xmax); Set the axis limits. Bool_t GetMoreLogLabels() const; Return kTRUE if kMoreLogLabels bit is set, kFALSE otherwise. void SetMoreLogLabels(Bool_t more = kTRUE); Set the kMoreLogLabels bit flag; When this option is selected more labels are drawn when in log scale; and there is a small number of deca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAxis.html:15514,variab,variable,15514,root/html526/TAxis.html,https://root.cern,https://root.cern/root/html526/TAxis.html,1,['variab'],['variable']
Modifiability,"h labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing values; = ""h"" draw labels horizonthal; = ""v"" draw labels vertical; = ""u"" draw labels up (end of label right adjusted); = ""d"" draw labels down (start of label left adjusted). Bool_t GetRotateTitle() const; Return kTRUE if kRotateTitle bit is set, kFALSE otherwise. void ImportAttributes(const TAxis* axis); Copy axis attributes to this. void RotateTitle(Bool_t rotate = kTRUE); rotate title by 180 degrees; by default the title is drawn right adjusted.; if rotate is TRUE, the title is left adjusted at the end of the axis; and rotated by 180 degrees. void SaveAttributes(ostream& out, const char* name, const char* subname); Save axis attributes as C++ statement(s) on output stream out. void Set(Int_t nbins, Double_t xmin, Double_t xmax); Initialize axis with fix bins. void Set(Int_t nbins, const Float_t* xbins); Initialize axis with variable bins. void Set(Int_t nbins, const Double_t* xbins); Initialize axis with variable bins. void SetDefaults(); Set axis default values (from TStyle). Bool_t GetDecimals() const; Returns kTRUE if kDecimals bit is set, kFALSE otherwise.; see TAxis::SetDecimals. void SetDecimals(Bool_t dot = kTRUE); Set the Decimals flag; By default, blank characters are stripped, and then the; label is correctly aligned. The dot, if last character of the string,; is also stripped, unless this option is specified.; One can disable the option by calling axis.SetDecimals(kTRUE).; The flag (in fBits2) is passed to the drawing function TGaxis::PaintAxis. void SetBinLabel(Int_t bin, const char* label); Set label for bin. void SetLimits(Double_t xmin, Double_t xmax); Set the axis limits. Bool_t GetMoreLogLabels() const; Return kTRUE if kMoreLogLabels bit is set, kFALSE otherwise. void SetMoreLogLabels(Bool_t more = kTRUE); Set the kMoreLogLabels bit flag; When this option is selected more labels are drawn when in log scale; and there is a small number of deca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAxis.html:15568,variab,variable,15568,root/html528/TAxis.html,https://root.cern,https://root.cern/root/html528/TAxis.html,1,['variab'],['variable']
Modifiability,"h labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing values; = ""h"" draw labels horizonthal; = ""v"" draw labels vertical; = ""u"" draw labels up (end of label right adjusted); = ""d"" draw labels down (start of label left adjusted). Bool_t GetRotateTitle() const; Return kTRUE if kRotateTitle bit is set, kFALSE otherwise. void ImportAttributes(const TAxis* axis); Copy axis attributes to this. void RotateTitle(Bool_t rotate = kTRUE); rotate title by 180 degrees; by default the title is drawn right adjusted.; if rotate is TRUE, the title is left adjusted at the end of the axis; and rotated by 180 degrees. void SaveAttributes(ostream& out, const char* name, const char* subname); Save axis attributes as C++ statement(s) on output stream out. void Set(Int_t nbins, Double_t xmin, Double_t xmax); Initialize axis with fix bins. void Set(Int_t nbins, const Float_t* xbins); Initialize axis with variable bins. void Set(Int_t nbins, const Double_t* xbins); Initialize axis with variable bins. void SetDefaults(); Set axis default values (from TStyle). Bool_t GetDecimals() const; Returns kTRUE if kDecimals bit is set, kFALSE otherwise.; see TAxis::SetDecimals. void SetDecimals(Bool_t dot = kTRUE); Set the Decimals flag; By default, blank characters are stripped, and then the; label is correctly aligned. The dot, if last character of the string,; is also stripped, unless this option is specified.; One can disable the option by calling axis.SetDecimals(kTRUE).; The flag (in fBits2) is passed to the drawing function TGaxis::PaintAxis. void SetBinLabel(Int_t bin, const char* label); Set label for bin; In this case we create a label list in the axis but we do not; set the kCanRebin bit.; New labels will not be added with the Fill method but will end-up in the; underflow bin. See documentation of TAxis::FindBin(const char*). void SetLimits(Double_t xmin, Double_t xmax); Set the axis limits. Bool_t GetMoreLogLabels() const; Return kTRUE if k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TAxis.html:15936,variab,variable,15936,root/html530/TAxis.html,https://root.cern,https://root.cern/root/html530/TAxis.html,3,['variab'],['variable']
Modifiability,h of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; Int_t _basisCos;  ; Int_t _basisExp;  ; RooRealProxy _delMistag;  ; RooRealProxy _dm;  ; double _genFlavFrac;  do not persist ;  ; double _genFlavFracMix;  ; double _genFlavFracUnmix;  ; double _genMixFrac;  ; RooRealProxy _mistag;  ; RooCategoryProxy _mixState;  ; RooRealProxy _t;  ; RooCategoryProxy _tagFlav;  ; RooRealProxy _tau;  ; DecayType _type;  ;  Protected Attributes inherited from RooAbsAnaConvPdf; RooArgList _basisList;  ! List of created basis functions ;  ; RooAICRegistry _codeReg;  ! Registry of analytical integration codes ;  ; RooObjCacheManager _coefNormMgr;  ! Coefficient normalization manager ;  ; RooListProxy _convSet;  Set of (resModel (x) basisFunc) convolution objects. ;  ; RooRealProxy _convVar;  Convolution variable. ;  ; bool _isCopy;  ; RooRealProxy _model;  Original model. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:64432,inherit,inherited,64432,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,1,['inherit'],['inherited']
Modifiability,"h of these subsequent calls. ;  ; Float_t EvaluateMulticlass (UInt_t clsNumber, const TString &methodTag, Double_t aux=0);  evaluates the multiclass MVA ;  ; Double_t EvaluateMVA (const std::vector< Double_t > &, const TString &methodTag, Double_t aux=0);  Evaluate a std::vector<double> of input data for a given method The parameter aux is obligatory for the cuts method where it represents the efficiency cutoff. ;  ; Double_t EvaluateMVA (const std::vector< Float_t > &, const TString &methodTag, Double_t aux=0);  Evaluate a std::vector<float> of input data for a given method The parameter aux is obligatory for the cuts method where it represents the efficiency cutoff. ;  ; Double_t EvaluateMVA (const TString &methodTag, Double_t aux=0);  evaluates MVA for given set of input variables ;  ; Double_t EvaluateMVA (MethodBase *method, Double_t aux=0);  evaluates the MVA ;  ; const std::vector< Float_t > & EvaluateRegression (const TString &methodTag, Double_t aux=0);  evaluates MVA for given set of input variables ;  ; const std::vector< Float_t > & EvaluateRegression (MethodBase *method, Double_t aux=0);  evaluates the regression MVA check for NaN in event data: (note: in the factory, this check was done already at the creation of the datasets, hence it is not again checked in each of these subsequent calls. ;  ; Float_t EvaluateRegression (UInt_t tgtNumber, const TString &methodTag, Double_t aux=0);  evaluates the regression MVA ;  ; IMethod * FindMVA (const TString &methodTag);  return pointer to method with tag ""methodTag"" ;  ; Double_t GetMVAError () const;  ; Double_t GetMVAErrorLower () const;  ; Double_t GetMVAErrorUpper () const;  ; virtual const char * GetName () const;  Returns name of object. ;  ; Double_t GetProba (const TString &methodTag, Double_t ap_sig=0.5, Double_t mvaVal=-9999999);  evaluates probability of MVA for given set of input variables ;  ; Double_t GetRarity (const TString &methodTag, Double_t mvaVal=-9999999);  evaluates the MVA's rarity ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Reader.html:5236,variab,variables,5236,doc/master/classTMVA_1_1Reader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Reader.html,2,['variab'],['variables']
Modifiability,"h owner and proxied variable. ;  ;  RooArgProxy (const char *name, RooAbsArg *owner, const RooArgProxy &other);  Copy constructor. ;  ;  RooArgProxy (RooArgProxy &&other)=delete;  ;  RooArgProxy (RooArgProxy const &other)=delete;  ;  ~RooArgProxy () override;  Destructor. ;  ; RooAbsArg * absArg () const;  Return pointer to contained argument. ;  ; bool isShapeServer () const;  Returns true if contents is shape server of owner. ;  ; bool isValueServer () const;  Returns true of contents is value server of owner. ;  ; const char * name () const override;  Return name of proxy. ;  ; RooArgProxy & operator= (RooArgProxy &&other)=delete;  ; RooArgProxy & operator= (RooArgProxy const &other)=delete;  ; RooAbsArg * owner () const;  Returns the owner of this proxy. ;  ; void print (std::ostream &os, bool addContents=false) const override;  Print the name of the proxy on ostream. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:8307,inherit,inherited,8307,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['inherit'],['inherited']
Modifiability,"h such name and filename exists, sets it as the current sublist If not, creates this list and sets it as the current sublist The name of the file, where the tree is, is taken as tree->GetTree()->GetCurrentFile()->GetName(), and then expanded either to the absolute path, or to full url. ;  ; void SetTreeNumber (Int_t index) override;  ; void Streamer (TBuffer &) override;  Custom streamer for class TEntryList to handle the different interpretation of fFileName between version 1 and >1 . ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Subtract (const TEntryList *) override;  Remove all the entries of this entry list, that are contained in elist. ;  ;  Public Member Functions inherited from TEntryList;  TEntryList ();  default c-tor ;  ;  TEntryList (const char *name, const char *title);  c-tor with name and title ;  ;  TEntryList (const char *name, const char *title, const char *treename, const char *filename);  c-tor with name and title, which also sets the treename and the filename ;  ;  TEntryList (const char *name, const char *title, const TTree *tree);  constructor with name and title, which also sets the tree ;  ;  TEntryList (const TEntryList &elist);  copy c-tor ;  ;  TEntryList (const TTree *tree);  c-tor, which sets the tree ;  ;  ~TEntryList () override;  Destructor. ;  ; void AddSubList (TEntryList *elist);  Add a sub entry list to the current list. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Called by TKey and others to automatically add us to a directory when we are read from a file. ;  ; void EnterRange (Long64_t start, Long64_t end, TTree *tree=nullptr, UInt_t step=1U);  Enter all entries in a range in the TEntryList. ;  ; virtual TDirectory * GetDirectory () const;  ; virtual Long64_t GetEntriesToProcess () const;  ; virtual TList * GetLists () const;  ; virtual bool GetReapplyCut () const;  ; bool IsValid () const;  ; void Print (const Option_t *option="""") const override;  Print this list. ;  ; virtual Int_t Relocate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListFromFile.html:4369,inherit,inherited,4369,doc/master/classTEntryListFromFile.html,https://root.cern,https://root.cern/doc/master/classTEntryListFromFile.html,1,['inherit'],['inherited']
Modifiability,"h the MINUIT; 4062/// commands MIGRAD, HESSE in succession; 4063///; 4064/// The following named arguments are supported; 4065///; 4066/// <table>; 4067/// <tr><th> <th> Options to control construction of chi2; 4068/// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; 4069/// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; 4070/// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; 4071/// (in RooFit jargon, ""if the pdf can be extended"").; 4072/// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; 4073/// and the chi2 will fall back to the total data weight to scale the normalized pdf.; 4074/// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; 4075/// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; 4076/// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; 4077/// printed and you'll most likely get garbage results.; 4078/// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; 4079/// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; 4080/// Multiple comma separated range names can be specified.; 4081/// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; 4082/// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); 4083/// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; 4084///; 408",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:176661,extend,extended,176661,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['extend'],['extended']
Modifiability,"h the one of the version. The usage is different in the sense that the re–write from to was done by its signification and not literally (with minor exceptions). Applications such as \(\mbox{MIGRAD}\) have a corresponding class MnMigrad, M “commands” became classes or methods of classes according to their purpose. Users familiar with the version of M , who have not yet used releases from the version, should however read this manual, in order to adapt to the changes as well as to discover the new features and easier ways of using old features.; 3.2 Install M using autoconf/make; For each release of M a tar.gz file is provided for downloading from the M homepage @bib-C++MINUIT. For non-UNIX platforms please refer to the M homepage.; The necessary steps to follow are:. download the tar.gz by clicking on it from the release page; unzip it:; $ unzip Minuit-x.x.x.tar.gz; untar it:; $ tar xvf Minuit-x.x.x.tar; step down to the created Minuit-x.x.x directory:; $ cd Minuit-x.x.x/; run the “configure” script:; $ ./configure; run “make” to compile the source code:; $ make; run “make check” to create the executable example:; $ make check; run the executable example:; $ tests/MnTutorial/Quad4FMain.C. The output should look like that:; Minuit did successfully converge. # of function calls: 74; minimum function value: 1.12392e-09; minimum edm: 1.12392e-09; minimum internal state vector: LAVector parameters:. -1.82079e-05; -1.20794e-05; 6.22382e-06; -3.0465e-05. minimum internal covariance matrix: LASymMatrix parameters:. 4 1 2 2.70022e-18; 1 5 3 1.87754e-17; 2 3 6 2.29467e-17; 2.70022e-18 1.87754e-17 2.29467e-17 1. # ext. || name || type || value || error +/-. 0 || x || free ||-1.821e-05 || 2; 1 || y || free ||-1.208e-05 || 2.236; 2 || z || free || 6.224e-06 || 2.449; 3 || w || free ||-3.047e-05 || 1. MnUserCovariance:. 4 1 2 2.70022e-18; 1 5 3 1.87754e-17; 2 3 6 2.29467e-17; 2.70022e-18 1.87754e-17 2.29467e-17 1. MnUserCovariance parameter correlations:. 1 0.223607 0.408248 1.3501",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:27972,config,configure,27972,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['config'],['configure']
Modifiability,"h the popular ZLIB compression algorithm; this class records the information about a single archive member. ; Definition at line 156 of file TZIPFile.h. Public Member Functions;  TZIPMember ();  Default ctor. ;  ;  TZIPMember (const char *name);  Create ZIP member file. ;  ;  TZIPMember (const TZIPMember &member);  Copy ctor. ;  ;  ~TZIPMember () override;  Cleanup. ;  ; UInt_t GetAttrExt () const;  ; UInt_t GetAttrInt () const;  ; UInt_t GetCRC32 () const;  ; void * GetGlobal () const;  ; UInt_t GetGlobalLen () const;  ; UInt_t GetLevel () const;  ; void * GetLocal () const;  ; UInt_t GetLocalLen () const;  ; UInt_t GetMethod () const;  ; TClass * IsA () const override;  ; TZIPMember & operator= (const TZIPMember &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Pretty print basic ZIP member info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArchiveMember;  TArchiveMember ();  Default ctor. ;  ;  TArchiveMember (const char *name);  Create an archive member file. ;  ;  TArchiveMember (const TArchiveMember &member);  Copy ctor. ;  ;  ~TArchiveMember () override;  ; const char * GetComment () const;  ; Long64_t GetCompressedSize () const;  ; Long64_t GetDecompressedSize () const;  ; Long64_t GetFilePosition () const;  ; TDatime GetModTime () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Long64_t GetPosition () const;  ; Bool_t IsDirectory () const;  ; TArchiveMember & operator= (const TArchiveMember &rhs);  Assignment operator. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to impleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPMember.html:1368,inherit,inherited,1368,doc/master/classTZIPMember.html,https://root.cern,https://root.cern/doc/master/classTZIPMember.html,1,['inherit'],['inherited']
Modifiability,"h their glowing color A peak mark can be enabled, allowing to keep track of the highest value displayed. The mark can be reset by right-clicking on the widget.; Two signals are available:; OdoClicked(): when user click on the small odometer window; LedClicked(): when user click on the small led near the counter . Definition at line 22 of file TGSpeedo.h. Public Types; enum  EGlowColor { kNoglow; , kGreen; , kOrange; , kRed; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGSpeedo (const TGWindow *p, Float_t smin, Float_t smax, const char *lbl1="""", const char *lbl2="""", const char *dsp1="""", const char *dsp2="""", int id=-1);  TGSpeedo widget constructor. ;  ;  TGSpeedo (const TGWindow *p=nullptr, int id=-1);  TGSpeedo widget constructor. ;  ;  ~TGSpeedo () override;  TGSpeedo widget Destructor. ;  ; void Build ();  Build TGSpeedo widget. ;  ; void DisableMeanMark ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSpeedo.html:1444,inherit,inherited,1444,doc/master/classTGSpeedo.html,https://root.cern,https://root.cern/doc/master/classTGSpeedo.html,1,['inherit'],['inherited']
Modifiability,"h this constructor.; The result is the projected distribution onto varName marginalizing the other variables.; If varName is not given, the first variable will be used. This is useful mostly for RooDataSets with only one observable. ; Definition at line 85 of file SamplingDistribution.cxx. ◆ SamplingDistribution() [5/5]. SamplingDistribution::SamplingDistribution ; (; ). Default constructor for SamplingDistribution. ; SamplingDistribution default constructor. ; Definition at line 126 of file SamplingDistribution.cxx. ◆ ~SamplingDistribution(). SamplingDistribution::~SamplingDistribution ; (; ). override . Destructor of SamplingDistribution. ; SamplingDistribution destructor. ; Definition at line 131 of file SamplingDistribution.cxx. Member Function Documentation. ◆ Add(). void SamplingDistribution::Add ; (; const SamplingDistribution * ; other). merge two sampling distributions ; Merge SamplingDistributions (does nothing if nullptr is given).; If variable name was not set before, it is copied from the added SamplingDistribution. ; Definition at line 142 of file SamplingDistribution.cxx. ◆ CDF(). double SamplingDistribution::CDF ; (; double ; x); const. calculate CDF as a special case of Integral(...) with lower limit equal to -inf ; returns the closed integral [-inf,x] ; Definition at line 299 of file SamplingDistribution.cxx. ◆ Class(). static TClass * RooStats::SamplingDistribution::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::SamplingDistribution::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::SamplingDistribution::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 96 of file SamplingDistribution.h. ◆ DeclFileName(). static const char * RooStats::SamplingDistribution::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 96 of file Sam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html:16579,variab,variable,16579,doc/master/classRooStats_1_1SamplingDistribution.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html,1,['variab'],['variable']
Modifiability,"h this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,max]. If name is null; range of default range is adjusted. If no range with; 'name' exists it is created on the fly. void setRange(const char* name, RooAbsReal& min, RooAbsReal& max); Create or modify a parameterized range named 'name' that has external functions; min and max parameterizing its boundaries. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. void printValue(ostream& os) const; Print value of variable. void printExtras(ostream& os) const; Print extras of variable: (asymmetric) error, constant flag, limits and binning. Int_t defaultPrintContents(Option_t* opt) const; Mapping of Print() option string to RooPrintable contents specifications. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. TString* format(const RooCmdArg& formatArg) const; Format contents of RooRealVar for pretty printing on RooPlot; parameter boxes. This function processes the named arguments; taken by paramOn() and translates them to an option string; parsed by RooRealVar::format(Int_t sigDigits, const char *options). TString * format(Int_t sigDigits, const char* options) const; Format numeric value of RooRealVar and its error in a variety of ways. To control what is shown use the following options; N = show name; H = hide value; E = show error; A = show asymmetric error instead of parabolic error (if avail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealVar.html:41729,variab,variable,41729,root/html526/RooRealVar.html,https://root.cern,https://root.cern/root/html526/RooRealVar.html,7,['variab'],['variable']
Modifiability,"h x,y have values within their allowed ranges as defined in; # ROOT.RooRealVar x and y are imported. Since the y values in the import tree are in the range [-15,15]; # and RRV y defines a range [-10,10] this means that the ROOT.RooDataSet; # below will have less entries than the ROOT.TTree 'tree'; ; ds = ROOT.RooDataSet(""ds"", ""ds"", {x, y}, Import=tree); ; # Use ascii import/export for datasets; # ------------------------------------------------------------------------------------; ; ; def write_dataset(ds, filename):; # Write data to output stream; outstream = ROOT.std.ofstream(filename); # Optionally, adjust the stream here (e.g. std::setprecision); ds.write(outstream); outstream.close(); ; ; write_dataset(ds, ""rf102_testData.txt""); ; # Read data from input stream. The variables of the dataset need to be supplied; # to the RooDataSet::read() function.; print(""\n-----------------------\nReading data from ASCII""); dataReadBack = ROOT.RooDataSet.read(; ""rf102_testData.txt"",; [x, y], # variables to be read. If the file has more fields, these are ignored.; ""D"", # Prints if a RooFit message stream listens for debug messages. Use Q for quiet.; ); ; dataReadBack.Print(""V""); ; print(""\nOriginal data, line 20:""); ds.get(20).Print(""V""); ; print(""\nRead-back data, line 20:""); dataReadBack.get(20).Print(""V""); ; ; # Plot data set with multiple binning choices; # ------------------------------------------------------------------------------------; # Print number of events in dataset; ds.Print(); ; # Print unbinned dataset with default frame binning (100 bins); frame3 = y.frame(Title=""Unbinned data shown in default frame binning""); ds.plotOn(frame3); ; # Print unbinned dataset with custom binning choice (20 bins); frame4 = y.frame(Title=""Unbinned data shown with custom binning""); ds.plotOn(frame4, Binning=20); ; frame5 = y.frame(Title=""Unbinned data read back from ASCII file""); ds.plotOn(frame5, Binning=20); dataReadBack.plotOn(frame5, Binning=20, MarkerColor=""r"", MarkerStyle=5); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf102__dataimport_8py.html:4264,variab,variables,4264,doc/master/rf102__dataimport_8py.html,https://root.cern,https://root.cern/doc/master/rf102__dataimport_8py.html,1,['variab'],['variables']
Modifiability,"h""; 16 ; 17#include <memory>; 18 ; 19namespace ROOT {; 20 ; 21 namespace Math {; 22 ; 23 /**; 24 Enumeration describing the status of the variable; 25 The enumeration are used in the minimizer classes to categorize the variables; 26 */; 27 enum EMinimVariableType {; 28 kDefault, ///< free variable (unlimited); 29 kFix, ///< fixed variable; 30 kBounds, ///< variable has two bounds; 31 kLowBound, ///< variable has a lower bound; 32 kUpBound ///< variable has an upper bounds; 33 };; 34 ; 35 ; 36 ; 37/**; 38 MinimTransformVariable class; 39 Contains meta information of the variables such as bounds, fix flags and; 40 deals with transformation of the variable; 41 The class does not contain the values and the step size (error) of the variable; 42 This is an internal class used by the MinimTransformFunction class; 43 ; 44 @ingroup MultiMin; 45*/; 46 ; 47 ; 48class MinimTransformVariable {; 49 ; 50public:; 51 ; 52 /**; 53 Default Constructor for an unlimited variable; 54 */; 55 MinimTransformVariable () :; 56 fFix(false), fLowBound(false), fUpBound(false), fBounds(false),; 57 fLower(1), fUpper(0); 58 {}; 59 ; 60 // constructor for fixed variable; 61 MinimTransformVariable (double value) :; 62 fFix(true), fLowBound(false), fUpBound(false), fBounds(false),; 63 fLower(value), fUpper(value); 64 {}; 65 ; 66 // con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimTransformVariable_8h_source.html:818,variab,variable,818,doc/master/MinimTransformVariable_8h_source.html,https://root.cern,https://root.cern/doc/master/MinimTransformVariable_8h_source.html,11,['variab'],"['variable', 'variables']"
Modifiability,"h""; 16 ; 17namespace ROOT; 18{; 19 //---------------------------------------------------------------------------; 20 // Global variables; 21 //---------------------------------------------------------------------------; 22 typedef std::map<std::string, std::string> SchemaRuleMap_t;; 23 typedef std::map<std::string, std::list<SchemaRuleMap_t> > SchemaRuleClassMap_t;; 24 R__EXTERN SchemaRuleClassMap_t gReadRules;; 25 R__EXTERN SchemaRuleClassMap_t gReadRawRules;; 26 ; 27 typedef std::map<std::string, ROOT::Internal::TSchemaType> MembersTypeMap_t;; 28 ; 29 //---------------------------------------------------------------------------; 30 // Create the data member name-type map; 31 //---------------------------------------------------------------------------; 32 // void CreateNameTypeMap( const clang::CXXRecordDecl &cl, MembersTypeMap_t& members );; 33 ; 34 //---------------------------------------------------------------------------; 35 // Check if given rule contains references to valid data members; 36 //---------------------------------------------------------------------------; 37 bool HasValidDataMembers( SchemaRuleMap_t& rule, MembersTypeMap_t& members,; 38 std::string& error_string);; 39 ; 40 //---------------------------------------------------------------------------; 41 // Write the conversion function for Read rule; 42 //---------------------------------------------------------------------------; 43 void WriteReadRuleFunc( SchemaRuleMap_t& rule",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConversionRuleParser_8h_source.html:653,variab,variables,653,doc/master/RConversionRuleParser_8h_source.html,https://root.cern,https://root.cern/doc/master/RConversionRuleParser_8h_source.html,1,['variab'],['variables']
Modifiability,"h""; 16 ; 17namespace ROOT; 18{; 19 //---------------------------------------------------------------------------; 20 // Global variables; 21 //---------------------------------------------------------------------------; 22 typedef std::map<std::string, std::string> SchemaRuleMap_t;; 23 typedef std::map<std::string, std::list<SchemaRuleMap_t> > SchemaRuleClassMap_t;; 24 R__EXTERN SchemaRuleClassMap_t gReadRules;; 25 R__EXTERN SchemaRuleClassMap_t gReadRawRules;; 26 ; 27 typedef std::map<std::string, ROOT::Internal::TSchemaType> MembersTypeMap_t;; 28 ; 29 //---------------------------------------------------------------------------; 30 // Create the data member name-type map; 31 //---------------------------------------------------------------------------; 32 // void CreateNameTypeMap( const clang::CXXRecordDecl &cl, MembersTypeMap_t& members );; 33 ; 34 //---------------------------------------------------------------------------; 35 // Check if given rule contains references to valid data members; 36 //---------------------------------------------------------------------------; 37 bool HasValidDataMembers( SchemaRuleMap_t& rule, MembersTypeMap_t& members,; 38 std::string& error_string);; 39 ; 40 //---------------------------------------------------------------------------; 41 // Write the conversion function for Read rule; 42 //---------------------------------------------------------------------------; 43 void WriteReadRuleFunc( SchemaRuleMap_t& rule,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RConversionRuleParser_8h_source.html:652,variab,variables,652,doc/v632/RConversionRuleParser_8h_source.html,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8h_source.html,1,['variab'],['variables']
Modifiability,"h""; 30 ; 31using namespace TMVA;; 32 ; 33void TMVAClassificationApplication( TString myMethodList = """" ); 34{; 35 ; 36 //---------------------------------------------------------------; 37 // This loads the library; 38 TMVA::Tools::Instance();; 39 ; 40 // Default MVA methods to be trained + tested; 41 std::map<std::string,int> Use;; 42 ; 43 // Cut optimisation; 44 Use[""Cuts""] = 1;; 45 Use[""CutsD""] = 1;; 46 Use[""CutsPCA""] = 0;; 47 Use[""CutsGA""] = 0;; 48 Use[""CutsSA""] = 0;; 49 //; 50 // 1-dimensional likelihood (""naive Bayes estimator""); 51 Use[""Likelihood""] = 1;; 52 Use[""LikelihoodD""] = 0; // the ""D"" extension indicates decorrelated input variables (see option strings); 53 Use[""LikelihoodPCA""] = 1; // the ""PCA"" extension indicates PCA-transformed input variables (see option strings); 54 Use[""LikelihoodKDE""] = 0;; 55 Use[""LikelihoodMIX""] = 0;; 56 //; 57 // Mutidimensional likelihood and Nearest-Neighbour methods; 58 Use[""PDERS""] = 1;; 59 Use[""PDERSD""] = 0;; 60 Use[""PDERSPCA""] = 0;; 61 Use[""PDEFoam""] = 1;; 62 Use[""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html:1620,variab,variables,1620,doc/master/TMVAClassificationApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html,2,['variab'],['variables']
Modifiability,"h' if such a path is; provided. The arglist specifies the dimensions of the dataset to be built; and describes the order in which these dimensions appear in the; ascii files to be read. Each line in the ascii file should contain N white space separated; tokens, with N the number of args in 'variables'. Any text beyond; N tokens will be ignored with a warning message.; [ NB: This format is written by RooArgList::writeToStream() ]. If the value of any of the variables on a given line exceeds the; fit range associated with that dimension, the entire line will be; ignored. A warning message is printed in each case, unless the; 'Q' verbose option is given. (Option 'D' will provide additional; debugging information) The number of events read and skipped; is always summarized at the end. When multiple files are read, a RooCategory arg in 'variables' can; optionally be designated to hold information about the source file; of each data point. This feature is enabled by giving the name; of the (already existing) category variable in 'indexCatName'. If no further information is given a label name 'fileNNN' will; be assigned to each event, where NNN is the sequential number of; the source file in 'fileList'. Alternatively it is possible to override the default label names; of the index category by specifying them in the fileList string:; When instead of ""file1.txt,file2.txt"" the string; ""file1.txt:FOO,file2.txt:BAR"" is specified, a state named ""FOO""; is assigned to the index category for each event originating from; file1.txt. The labels FOO,BAR may be predefined in the index; category via defineType(), but don't have to be. Finally, one can also assign the same label to multiple files,; either by specifying ""file1.txt:FOO,file2,txt:FOO,file3.txt:BAR""; or ""file1.txt,file2.txt:FOO,file3.txt:BAR"". Make working copy of variables list. Bool_t write(const char* filename); Write the contents of this dataset to an ASCII file with the specified name; Each event will be written as a sing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataSet.html:31496,variab,variable,31496,root/html526/RooDataSet.html,https://root.cern,https://root.cern/root/html526/RooDataSet.html,7,['variab'],['variable']
Modifiability,"h(list,16000,2);; T.Print();; }. Int_t Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); Create one branch for each element in the folder.; Returns the total number of branches created. TBranch* Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); Create a new TTree Branch. This Branch constructor is provided to support non-objects in; a Tree. The variables described in leaflist may be simple; variables or structures. // See the two following; constructors for writing objects in a Tree. By default the branch buffers are stored in the same file as the Tree.; use TBranch::SetFile to specify a different file. * address is the address of the first item of a structure.; * leaflist is the concatenation of all the variable names and types; separated by a colon character :; The variable name and the variable type are separated by a slash (/).; The variable type may be 0,1 or 2 characters. If no type is given,; the type of the variable is assumed to be the same as the previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t); - O : [the letter 'o', not a zero] a boolean (Bool_t). Arrays of values are supported with the following syntax:; If leaf name has the form var[nelem], where nelem is alphanumeric, then; if nelem is a leaf name, it is used as the variable size of the array,; otherwise return 0.; If leaf name has the form var[nelem], where nelem is a non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:46744,variab,variable,46744,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,8,['variab'],['variable']
Modifiability,"h*fParent! Pointer to parent branch.; Int_tfReadBasket! Current basket number when reading; Long64_tfReadEntry! Current entry number when reading; Bool_tfSkipZip!After being read, the buffer will not be unziped.; Int_tfSplitLevelBranch split level; TStringTNamed::fTitleobject title; Long64_tfTotBytesTotal number of bytes in all leaves before compression; TTree*fTree! Pointer to Tree header; Int_tfWriteBasketLast basket number written; Long64_tfZipBytesTotal number of bytes in all leaves after compression; static Int_tfgCount! branch counter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranch(); Default constructor. Used for I/O by default. TBranch(TTree *tree, const char* name, void* address, const char* leaflist, Int_t basketsize, Int_t compress); Create a Branch*-*-; *-* =====================. * address is the address of the first item of a structure.; * leaflist is the concatenation of all the variable names and types; separated by a colon character :; The variable name and the variable type are separated by a slash (/).; The variable type may be 0,1 or 2 characters. If no type is given,; the type of the variable is assumed to be the same as the previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t). By default, a variable will be copied to the buffer with the number of; bytes specified in the type descriptor character. However, if the type; consists o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranch.html:11608,variab,variable,11608,root/html526/TBranch.html,https://root.cern,https://root.cern/root/html526/TBranch.html,3,['variab'],['variable']
Modifiability,"h, Bool_t make_copy=kFALSE);  Set data, posted with the request. ;  ; void SetPostponed ();  mark as postponed - reply will not be send to client immediately ;  ; void SetQuery (const char *q);  set request query ;  ; void SetRequestHeader (const char *h);  set full set of request header ;  ; void SetText ();  Set content type as ""text/plain"". ;  ; void SetTextContent (std::string &&txt);  Set content type as ""text/plain"" and also assigns content. ;  ; void SetTopName (const char *topname);  set engine-specific top-name ;  ; void SetUserName (const char *n);  set name of authenticated user ;  ; void SetWSId (UInt_t id);  set web-socket id ;  ; void SetXml ();  Set content type as ""text/xml"". ;  ; void SetXmlContent (std::string &&xml);  Set content type as ""text/xml"" and also assigns content. ;  ; void SetZipping (Int_t mode=kZipLarge);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpCallArg.html:6768,inherit,inherited,6768,doc/master/classTHttpCallArg.html,https://root.cern,https://root.cern/doc/master/classTHttpCallArg.html,1,['inherit'],['inherited']
Modifiability,"h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Horizontal progress bar constructor. ;  ;  ~TGHProgressBar () override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a horizontal progress bar as a C++ statement(s) on output stream out. ;  ; void ShowPosition (Bool_t set=kTRUE, Bool_t percent=kTRUE, const char *format=""%.2f"");  Show postion text, either in percent or formatted according format. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGProgressBar;  TGProgressBar (const TGWindow *p, UInt_t w, UInt_t h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *format=""%.2f"");  Set format for displaying a value. ;  ; Pixel_t GetBarColor () const;  ; EBarType GetBarType () const;  ; EFillType GetFillType () const;  ; FontStruct_t GetFontStruct () const;  ; TString GetFormat () const;  ; Float_t GetMax () const;  ; Float_t GetMin () const;  ; GContext_t GetNormGC () const;  ; Float_t GetPosition () const;  ; Bool_t GetShowPos () const;  ; const char * GetValueFormat () const;  ; void Increment (Float_t inc);  Increment progress position. ;  ; TClass * IsA () const override;  ; virtual void Percent (Bool_t on);  ; virtual void Reset ();  Reset progress bar (i.e. set pos to 0). ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save progress bar parameters",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:1624,inherit,inherited,1624,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,1,['inherit'],['inherited']
Modifiability,"h. Constructor & Destructor Documentation. ◆ TFile() [1/3]. TFile::TFile ; (; const TFile & ; ). privatedelete . ◆ TFile() [2/3]. TFile::TFile ; (; ). File default Constructor. ; Definition at line 201 of file TFile.cxx. ◆ TFile() [3/3]. TFile::TFile ; (; const char * ; fname1, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault . ). Opens or creates a local ROOT file. ; Parameters. [in]fname1The name of the file ; [in]optionSpecifies the mode in which the file is opened ; [in]ftitleThe title of the file ; [in]compressSpecifies the compression algorithm and level. It is recommended to specify fname1 as ""<file>.root"". The suffix "".root"" will be used by object browsers to automatically identify the file as a ROOT file. If the constructor fails in any way IsZombie() will return true. Use IsOpen() to check if the file is (still) open. To open non-local files use the static TFile::Open() method, that will take care of opening the files using the correct remote file access plugin. Option Description . NEW or CREATE Create a new file and open it for writing, if the file already exists the file is not opened. . RECREATE Create a new file, if the file already exists it will be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or membe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:48061,plugin,plugin,48061,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['plugin'],['plugin']
Modifiability,"h. Public Member Functions;  GSLMultiRootDerivSolver (const gsl_multiroot_fdfsolver_type *type, int n);  Constructor. ;  ;  GSLMultiRootDerivSolver (const GSLMultiRootDerivSolver &)=delete;  ;  GSLMultiRootDerivSolver (GSLMultiRootDerivSolver &&)=delete;  ;  ~GSLMultiRootDerivSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fdfsolver_type *type, unsigned int n);  create the solver from the type and size of number of fitting points and number of parameters ;  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootDerivSolver & operator= (const GSLMultiRootDerivSolver &rhs)=delete;  ; GSLMultiRootDerivSolver & operator= (GSLMultiRootDerivSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters for the case of derivative ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootDerivFunctionWrapper fDerivFunctions;  ; gsl_multiroot_fdfsolver * fDerivSolver;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:1723,inherit,inherited,1723,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,1,['inherit'],['inherited']
Modifiability,"h. Public Member Functions;  RMinimizer (Option_t *method);  Default constructor. ;  ;  ~RMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int ivar, unsigned int jvar) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool GetCovMatrix (double *covMat) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; double HessMatrix (unsigned int i, unsigned int j) const;  Returns the ith jth component of the Hessian matrix. ;  ; bool Minimize () override;  Function to find the minimum. ;  ; unsigned int NCalls () const override;  Returns the number of function calls. ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html:1803,inherit,inherited,1803,doc/master/classROOT_1_1Math_1_1RMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html,1,['inherit'],['inherited']
Modifiability,"h. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::DecisionTree. class TMVA::DecisionTree: public TMVA::BinaryTree. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. Function Members (Methods); public:. virtual~DecisionTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; voidApplyValidationSample(const TMVA::DecisionTree::EventConstList* validationSample) const; TMVA::BinaryTreeTMVA::BinaryTree::BinaryTree(); TMVA::BinaryTreeTMVA::BinaryTree::BinaryTree(const TMVA::BinaryTree&); UInt_tBuildTree(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTree.html:1062,variab,variable,1062,root/html602/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTree.html,1,['variab'],['variable']
Modifiability,"h. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::DecisionTree. class TMVA::DecisionTree: public TMVA::BinaryTree. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. Function Members (Methods); public:. virtual~DecisionTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; voidApplyValidationSample(const TMVA::DecisionTree::EventConstList* validationSample) const; UInt_tBuildTree(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node = NULL); Double_tCheckEvent(const TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:1062,variab,variable,1062,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,1,['variab'],['variable']
Modifiability,"h. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::DecisionTree. class TMVA::DecisionTree: public TMVA::BinaryTree. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. Function Members (Methods); public:. virtual~DecisionTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; voidApplyValidationSample(const TMVA::DecisionTree::EventList* validationSample) const; UInt_tBuildTree(const TMVA::DecisionTree::EventList& eventSample, TMVA::DecisionTreeNode* node = NULL); Double_tCheckEvent(const TMVA::Event&, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__DecisionTree.html:1062,variab,variable,1062,root/html528/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html528/TMVA__DecisionTree.html,3,['variab'],['variable']
Modifiability,"h. ◆ DoAddParameter(). void TFormula::DoAddParameter ; (; const TString & ; name, . Double_t ; value, . bool ; processFormula . ). protected . Adds parameter to known parameters. ; User should use SetParameter, because parameters are added during initialization part, and after that adding new will be pointless. ; Definition at line 2743 of file TFormula.cxx. ◆ DoEval(). Double_t TFormula::DoEval ; (; const Double_t * ; x, . const Double_t * ; p = nullptr . ); const. protected . Evaluate formula. ; If formula is not ready to execute(missing parameters/variables), print these which are not known. If parameter has default value, and has not been set, appropriate warning is shown. ; Definition at line 3359 of file TFormula.cxx. ◆ DoSetParameters(). void TFormula::DoSetParameters ; (; const Double_t * ; p, . Int_t ; size . ). protected . Definition at line 2949 of file TFormula.cxx. ◆ Eval(). template<typename... Args> . Double_t TFormula::Eval ; (; Args... ; args); const. Set first 1, 2, 3 or 4 variables (e.g. ; x, y, z and t) and evaluate formula. ; Definition at line 324 of file TFormula.h. ◆ EvalPar() [1/2]. Double_t TFormula::EvalPar ; (; const Double_t * ; x, . const Double_t * ; params = nullptr . ); const. Definition at line 3078 of file TFormula.cxx. ◆ EvalPar() [2/2]. template<class T > . T TFormula::EvalPar ; (; const T * ; x, . const Double_t * ; params = nullptr . ); const. inline . Definition at line 244 of file TFormula.h. ◆ ExtractFunctors(). void TFormula::ExtractFunctors ; (; TString & ; formula). protected . Extracts functors from formula, and put them in fFuncs. ; Simple grammar:; <function> := name(arg1,arg2...); <variable> := name; <parameter> := [number]; <name> := String containing lower and upper letters, numbers, underscores; <number> := Integer number Operators are omitted. . Definition at line 1832 of file TFormula.cxx. ◆ FillDefaults(). void TFormula::FillDefaults ; (; ). private . Fill structures with default variables, constants and function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula.html:33752,variab,variables,33752,doc/master/classTFormula.html,https://root.cern,https://root.cern/doc/master/classTFormula.html,1,['variab'],['variables']
Modifiability,"h:273; TIter::NextTObject * Next()Definition TCollection.h:251; TIter::Resetvoid Reset()Definition TCollection.h:254; TIter::operator++TIter & operator++()Definition TCollection.h:255; TIter::TIterTIter(TIterator *it)Definition TCollection.h:246; TIter::operator=TIter & operator=(const TIter &rhs)Assigning an TIter to another.Definition TCollection.cxx:789; TIter::TIterTIter(const TCollection *col, Bool_t dir=kIterForward)Definition TCollection.h:244; TIter::fIteratorTIterator * fIteratorDefinition TCollection.h:238; TIteratorIterator abstract base class.Definition TIterator.h:30; TIterator::Resetvirtual void Reset()=0; TIterator::Nextvirtual TObject * Next()=0; TIterator::GetOptionvirtual Option_t * GetOption() constDefinition TIterator.h:40; TIterator::GetCollectionvirtual const TCollection * GetCollection() const =0; TObjectTableThis class registers all instances of TObject and its derived classes in a hash table.Definition TObjectTable.h:35; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TPRegexpDefinition TPRegexp.h:36; TStringBasic string class.Definition TString.h:139; TString::HashUInt_t Hash(ECaseCompare cmp=kExact) constReturn hash value.Definition TString.cxx:677; TVirtualMutexThis class implements a mutex interface.Definition TVirtualMutex.h:32; bool; int; ROOT::Internal::ContaineeInheritsFrombool ContaineeInheritsFrom(TClass *cl, TClass *base)Return true if 'cl' inherits from 'base'.Definition TCollection.cxx:831; ROOT::Internal::EmptyCollectionconst TCollection & EmptyCollection()Return an empty collection for use with nullptr TRangeCast.Definition TCollection.cxx:822; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; Drawth1 Draw(). corecontincTCollection.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:26978,inherit,inherits,26978,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,1,['inherit'],['inherits']
Modifiability,"h:36; ROOT::TModuleGenerator::WriteUmbrellaHeadervoid WriteUmbrellaHeader(std::ostream &out) constWrite a header file pulling in the content of this module through a series of #defined,...Definition TModuleGenerator.cxx:603; ROOT::TModuleGenerator::GetUmbrellaNameconst std::string & GetUmbrellaName() constDefinition TModuleGenerator.h:76; ROOT::TModuleGenerator::GetIncludePathsconst std::vector< std::string > & GetIncludePaths() constDefinition TModuleGenerator.h:87; ROOT::TModuleGenerator::WriteRegistrationSourcevoid WriteRegistrationSource(std::ostream &out, const std::string &fwdDeclnArgsToKeepString, const std::string &headersClassesMapString, const std::string &fwdDeclsString, const std::string &extraIncludes, bool hasCxxModule) constDefinition TModuleGenerator.cxx:399; ROOT::TModuleGenerator::GetHeadersconst std::vector< std::string > & GetHeaders() constDefinition TModuleGenerator.h:83; ROOT::TModuleGenerator::WriteContentHeadervoid WriteContentHeader(std::ostream &out) constWrite a header file describing the content of this module through a series of variables inside the na...Definition TModuleGenerator.cxx:543; ROOT::TModuleGenerator::GetErrorCountint GetErrorCount() constDefinition TModuleGenerator.h:72; ROOT::TModuleGenerator::GetModuleFileNameconst std::string & GetModuleFileName() constDefinition TModuleGenerator.h:65; ROOT::TModuleGenerator::WritePPUndefinesstd::ostream & WritePPUndefines(std::ostream &out) constWrite #ifdef FOO # undef FOO #endifDefinition TModuleGenerator.cxx:238; ROOT::TModuleGenerator::IsPCHbool IsPCH() constDefinition TModuleGenerator.h:52; ROOT::TModuleGenerator::ParseArgsvoid ParseArgs(const std::vector< std::string > &args)Parse -I -D -U headers.h SomethingLinkdef.h.Definition TModuleGenerator.cxx:180; ROOT::TModuleGenerator::GetContentNameconst std::string & GetContentName() constDefinition TModuleGenerator.h:79; ROOT::TModuleGenerator::WritePPDefinesstd::ostream & WritePPDefines(std::ostream &out) constWrite #ifndef FOO # def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:256113,variab,variables,256113,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['variab'],['variables']
Modifiability,"h::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7116,extend,extended,7116,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['extend'],['extended']
Modifiability,"h::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeights(); voidUseSumOfWeightSquare(bool on = true). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::BinData&fData; const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3531,extend,extended,3531,root/html534/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['extend'],['extended']
Modifiability,"h::BasicMinimizer::BasicMinimizer ; (; ). Default constructor. ; Definition at line 43 of file BasicMinimizer.cxx. ◆ ~BasicMinimizer(). ROOT::Math::BasicMinimizer::~BasicMinimizer ; (; ). override . Destructor. ; Definition at line 59 of file BasicMinimizer.cxx. Member Function Documentation. ◆ CheckDimension(). bool ROOT::Math::BasicMinimizer::CheckDimension ; (; ); const. protected . Definition at line 247 of file BasicMinimizer.cxx. ◆ CheckObjFunction(). bool ROOT::Math::BasicMinimizer::CheckObjFunction ; (; ); const. protected . Definition at line 256 of file BasicMinimizer.cxx. ◆ CreateTransformation(). MinimTransformFunction * ROOT::Math::BasicMinimizer::CreateTransformation ; (; std::vector< double > & ; startValues, . const ROOT::Math::IMultiGradFunction * ; func = nullptr . ). protected . Definition at line 265 of file BasicMinimizer.cxx. ◆ FixVariable(). bool ROOT::Math::BasicMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file BasicMinimizer.cxx. ◆ GetVariableSettings(). bool ROOT::Math::BasicMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; varObj . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 211 of file BasicMinimizer.cxx. ◆ GradObjFunction(). const ROOT::Math::IMultiGradFunction * ROOT::Math::BasicMinimizer::GradObjFunction ; (; ); const. return pointer to used gradient object function (NULL if gradient is not supported) ; Definition at line 325 of file BasicMinimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Math::BasicMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:12800,variab,variable,12800,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,1,['variab'],['variable']
Modifiability,"h::Derivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Derivator.html:3446,adapt,adaptive,3446,root/html526/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Derivator.html,5,['adapt'],['adaptive']
Modifiability,"h::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& rhs); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::BinData>& data, const shared_ptr<ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = true); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = true); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeights(); voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4573,extend,extended,4573,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,2,['extend'],['extended']
Modifiability,"h::IParametricGradFunctionMultiDimTempl< T >;  ~IParametricGradFunctionMultiDimTempl () override;  Virtual Destructor (no operations) ;  ; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  ; T ParameterDerivative (const T *x, const double *p, unsigned int ipar=0) const;  Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. ;  ; T ParameterDerivative (const T *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const T *x, T *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  . interface inherited from IParamFunction; bool fLinear;  ; bool fPolynomial;  ; bool fOwnFunc;  ; TF1 * fFunc;  ; unsigned int fDim;  ; IMultiGenFunctionTempl< T > * Clone () const override;  Clone the wrapper but not the original function. ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; const double * Parameters () const override;  get the parameter values (return values from TF1) ;  ; void SetParameters (const double *p) override;  set parameter values (only the cached one in this class,leave unchanges those of TF1) ;  ; unsigned int NPar () const override;  return number of parameters ;  ; std::string ParameterName (unsigned int i) const override;  return parameter name (from TF1) ;  ; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html:3045,inherit,inherited,3045,doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html,1,['inherit'],['inherited']
Modifiability,"h::MinimTransformVariableMinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); ROOT::Math::MinimTransformVariable&operator=(const ROOT::Math::MinimTransformVariable& rhs); doubleUpperBound() const. Data Members; private:. boolfBoundshas double bound; boolfFixfix variable; boolfLowBoundhas lower bound ; doublefLowerlower parameter limit; auto_ptr<ROOT::Math::MinimizerVariableTransformation>fTransformpointer to the minimizer transformation ; boolfUpBoundhas uppper bound param ; doublefUpperupper parameter limit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformVariable(). Default Constructor for an unlimited variable. {}. MinimTransformVariable(double value); constructor for fixed variable. {}. MinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); constructor for double bound variable. { }. MinimTransformVariable(double lower, SqrtLowVariableTransformation * trafo); constructor for lower bound variable. {}. MinimTransformVariable(double upper, SqrtUpVariableTransformation * trafo); constructor for upper bound variable. {}. MinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); copy constructor. MinimTransformVariable & operator=(const ROOT::Math::MinimTransformVariable& rhs); assignment. bool IsFixed() const; { return fFix; }. bool IsLimited() const; { return fBounds || fLowBound || fUpBound; }. bool HasLowerBound() const; { return fLowBound || fBounds; }. bool HasUpperBound() const; { return fUpBound || fBounds; }. double LowerBound() const; { return fLower; }. double UpperBound() const; { return fUpper; }. double FixValue() const; { return fLower; }. double InternalToExternal(double x) const; internal to external transformation. double DerivativeIntToExt(double x) const; derivative of the internal to external transformation ( d Int2Ext / d int ). double ExternalToInternal(double x) const; etxernal to internal ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__MinimTransformVariable.html:2203,variab,variable,2203,root/html534/ROOT__Math__MinimTransformVariable.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__MinimTransformVariable.html,1,['variab'],['variable']
Modifiability,"h; 93become more important as the external value gets closer to one of the limits; 94(expressed as the distance to nearest limit divided by distance between limits).; 95The user must therefore be aware of the fact that, for example,; 96if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; 97and \f$1.0\f$ will be indistinguishable to the accuracy of most machines.; 98 ; 99The transformation also affects the parameter error matrix, of course,; 100so Minuit does a transformation of the error matrix (and the; 101``parabolic'' parameter errors) when there are parameter limits.; 102Users should however realize that the transformation is only a linear; 103approximation, and that it cannot give a meaningful result if one or more; 104parameters is very close to a limit, where; 105\f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; 106Therefore, it is recommended that:; 107 ; 108 1. Limits on variable parameters should be used only when needed in order; 109to prevent the parameter from taking on unphysical values.; 110 ; 111 2. When a satisfactory minimum has been found using limits, the limits; 112should then be removed if possible, in order to perform or re-perform the; 113error analysis without limits.; 114 ; 115 ; 116### How to get the right answer from MINUIT.; 117 ; 118MINUIT offers the user a choice of several minimization algorithms. The; 119MIGRAD algorithm is in general the best minimizer for; 120nearly all functions. It is a variable-metric method with inexact line; 121search, a stable metric updating scheme, and checks for; 122positive-definiteness. Its main weakness is that it depends heavily on; 123knowledge of the first derivatives, and fails miserably if they are very; 124inaccurate.; 125 ; 126If parameter limits are needed, in spite of the side effects, then the; 127user should be aware of the following techniques to alleviate problems; 128caused by limits:; 129 ; 130#### Getting the right minimum with limits.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:5264,variab,variable,5264,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['variab'],['variable']
Modifiability,"h; PDF supplied to the RooSimPdfBuilders constructor (with the same name); . In macro code, the easiest way to assign new values to these RooStringVars; is to use RooArgSets array operator and the RooStringVars assignment operator, e.g.; . (*config)[""physModels""] = ""Blah"" ;; . To enter multiple splitting rules simply separate consecutive rules by whitespace; (not newlines), e.g. ; . (*config)[""physModels""] = ""Blah "" // << note trailing space here; ""Blah 2"" ;; . In this example, the C++ compiler will concatenate the two string literals (without inserting; any whitespace), so the extra space after 'Blah' is important here.; ; ; Alternatively, you can read the configuration from an ASCII file, as you can; for any RooArgSet using RooArgSet::readFromFile(). In that case the ASCII file; can follow the syntax of the examples above and the '\\' line continuation ; sequence can be used to fold a long splitting rule over multiple lines.; . RooArgSet* config = builder.createProtoBuildConfig() ;; config->readFromFile(""config.txt"") ;; --- config.txt ---------------- ; physModels = pdf; splitCats = tagCat; pdf = tagCat : bogusPar; -------------------------------; ; Working with multiple prototype PDFs. It is also possible to build a RooSimultaneous PDF from multiple PDF prototypes.; This is appropriate for cases where the input prototype PDF would otherwise be ; a RooSimultaneous PDF by itself. In such cases we don't feed a single; RooSimultaneous PDF into RooSimPdfBuilder, instead we feed it its ingredients and; add a prescription to the builder configuration that corresponds to the ; PDF-category state mapping of the prototype RooSimultaneous.; . The constructor of the RooSimPdfBuilder will look as follows:; . RooSimPdfBuilder builder(RooArgSet(pdfA,pdfB,...)) ;; . The physModels line is now expanded to carry the pdf->state mapping information; that the prototype RooSimultaneous would have. I.e.; . physModels = mode : pdfA=modeA pdfB=modeB; . is equivalent to a prototype RooSimu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimPdfBuilder.html:7151,config,config,7151,root/html526/RooSimPdfBuilder.html,https://root.cern,https://root.cern/root/html526/RooSimPdfBuilder.html,14,['config'],['config']
Modifiability,"h; TPaveText.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom3.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TSystem.h; TView.h; TVirtualGeoPainter.h; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TGeoArb8Definition TGeoArb8.h:17; TGeoArb8::GetDzDouble_t GetDz() constDefinition TGeoArb8.h:66; TGeoArb8::SetVertexvirtual void SetVertex(Int_t vnum, Double_t x, Double_t y); TGeoArb8::GetVerticesDouble_t * GetVertices()Definition TGeoArb8.h:71; TGeoAtt::SetVisRaytracevoid SetVisRaytrace(Bool_t flag=kTRUE)Definition TGeoAtt.h:66; TGeoBBoxDefinition TGeoBBox.h:17; TGeoBBox::GetDZvirtual Double_t GetDZ() constDefinition TGeoBBox.h:81; TGeoCompositeShapeComposite shapes are Boolean combinations of two or more shape components.Definition TGeoCompositeShape.h:27; TGeoConeSegDefinition TGeoCone.h:99; TGeoConeSeg::GetPhi1Double_t GetPhi1() constDefinition TGeoCone.h:166; TGeoConeSeg::GetPhi2Double_t GetPhi2() constDefinitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geodemo_8C.html:65737,config,configurable,65737,doc/master/geodemo_8C.html,https://root.cern,https://root.cern/doc/master/geodemo_8C.html,1,['config'],['configurable']
Modifiability,"h; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (eg 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. See an example of a Branch definition in the TTree constructor. Note that in case the data type is an object, this branch can contain; only this object. Note that this function is invoked by TTree::Branch. *. TBranch(TBranch* parent, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1); Create a Branch*-*-; *-* =====================. * address is the address of the first item of a structure; or the address of a pointer to an object (see example).; * leaflist is the concatenation of all the variable names and types; separated by a colon character :; The variable name and the variable type are separated by a slash (/).; The variable type may be 0,1 or 2 characters. If no type is given,; the type of the variable is assumed to be the same as the previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t). By default, a variable will be copied to the buffer with the number of; bytes specified in the type descriptor character. However, if the type; consists of 2 characters, the second character is an integer that; specifies the number of bytes to be used when copying ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranch.html:14593,variab,variable,14593,root/html528/TBranch.html,https://root.cern,https://root.cern/root/html528/TBranch.html,2,['variab'],['variable']
Modifiability,"h>. Inheritance diagram for RooNumGenConfig:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooNumGenConfig() [1/2]. RooNumGenConfig::RooNumGenConfig ; (; ). Constructor. ; Definition at line 55 of file RooNumGenConfig.cxx. ◆ RooNumGenConfig() [2/2]. RooNumGenConfig::RooNumGenConfig ; (; const RooNumGenConfig & ; other). Copy constructor. ; Definition at line 102 of file RooNumGenConfig.cxx. ◆ ~RooNumGenConfig(). RooNumGenConfig::~RooNumGenConfig ; (; ). override . Destructor. ; Definition at line 92 of file RooNumGenConfig.cxx. Member Function Documentation. ◆ addConfigSection(). bool RooNumGenConfig::addConfigSection ; (; const RooAbsNumGenerator * ; proto, . const RooArgSet & ; inDefaultConfig . ). Add a configuration section for a particular integrator. ; Integrator name and capabilities are automatically determined from instance passed as 'proto'. The defaultConfig object is associated as the default configuration for the integrator. ; Definition at line 238 of file RooNumGenConfig.cxx. ◆ Class(). static TClass * RooNumGenConfig::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNumGenConfig::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumGenConfig::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 75 of file RooNumGenConfig.h. ◆ DeclFileName(). static const char * RooNumGenConfig::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 75 of file RooNumGenConfig.h. ◆ defaultConfig(). RooNumGenConfig & RooNumGenConfig::defaultConfig ; (; ). static . Return reference to instance of default numeric integrator configuration object. ; Definition at line 44 of file RooNumGenConfig.cxx. ◆ defaultPrintStyle(). RooPrintable::StyleOption RooNumGenConfig::defaultPrintSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:15851,config,configuration,15851,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['config'],['configuration']
Modifiability,"h>; 22 ; 23namespace ROOT {; 24 ; 25namespace Details {; 26 class RWebWindowPlugin;; 27}; 28 ; 29/** \class ROOT::RFileDialog; 30\ingroup rbrowser; 31Initial message send to client to configure layout; 32*/; 33 ; 34/// function signature for file dialog call-backs; 35/// argument is selected file name; 36using RFileDialogCallback_t = std::function<void(const std::string &)>;; 37 ; 38 ; 39/** Web-based FileDialog */; 40 ; 41class RFileDialog {; 42 friend class Details::RWebWindowPlugin;; 43public:; 44 ; 45 enum EDialogTypes {; 46 kOpenFile,; 47 kSaveAs,; 48 kNewFile; 49 };; 50 ; 51protected:; 52 ; 53 EDialogTypes fKind{kOpenFile}; ///<! dialog kind OpenFile, SaveAs, NewFile; 54 std::string fTitle; ///<! title, when not specified default will be used; 55 RBrowserData fBrowsable; ///<! central browsing element; 56 bool fCanChangePath{true}; ///<! if working path can be changed via gui elements; 57 ; 58 std::shared_ptr<RWebWindow> fWebWindow; ///<! web window for file dialog; 59 ; 60 bool fDidSelect{false}; ///<! ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RFileDialog_8hxx_source.html:1160,config,configure,1160,doc/master/RFileDialog_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RFileDialog_8hxx_source.html,1,['config'],['configure']
Modifiability,"h>; 22 ; 23namespace ROOT {; 24 ; 25namespace Details {; 26 class RWebWindowPlugin;; 27}; 28 ; 29/** \class ROOT::RFileDialog; 30\ingroup rbrowser; 31Initial message send to client to configure layout; 32*/; 33 ; 34/// function signature for file dialog call-backs; 35/// argument is selected file name; 36using RFileDialogCallback_t = std::function<void(const std::string &)>;; 37 ; 38 ; 39/** Web-based FileDialog */; 40 ; 41class RFileDialog {; 42 friend class Details::RWebWindowPlugin;; 43public:; 44 ; 45 enum EDialogTypes {; 46 kOpenFile,; 47 kSaveAs,; 48 kNewFile; 49 };; 50 ; 51protected:; 52 ; 53 EDialogTypes fKind{kOpenFile}; ///<! dialog kind OpenFile, SaveAs, NewFile; 54 std::string fTitle; ///<! title, when not specified default will be used; 55 RBrowserData fBrowsable; ///<! central browsing element; 56 bool fCanChangePath{true}; ///<! if working path can be changed via gui elements; 57 ; 58 std::shared_ptr<RWebWindow> fWebWindow; ///<! web window for file dialog; 59 ; 60 bool fDidSelect{false}; ///<! t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RFileDialog_8hxx_source.html:1159,config,configure,1159,doc/v632/RFileDialog_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RFileDialog_8hxx_source.html,1,['config'],['configure']
Modifiability,"h>; 9 ; 10namespace ROOT {; 11namespace Math {; 12 ; 13/** set initial second derivatives; 14 */; 15bool Minimizer::SetCovarianceDiag(std::span<const double> g2, unsigned int n); 16{; 17 MATH_UNUSED(g2);; 18 MATH_UNUSED(n);; 19 return false;; 20}; 21 ; 22/** set initial values for covariance/error matrix; 23 The covariance matrix must be provided in compressed form (row-major ordered upper traingular part); 24*/; 25bool Minimizer::SetCovariance(std::span<const double> cov, unsigned int nrow); 26{; 27 MATH_UNUSED(cov);; 28 MATH_UNUSED(nrow);; 29 return false;; 30}; 31 ; 32/// set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited; 33/// variable; 34bool Minimizer::SetLimitedVariable(unsigned int ivar, const std::string &name, double val, double step, double lower,; 35 double upper); 36{; 37 MATH_WARN_MSG(""Minimizer::SetLimitedVariable"", ""Setting of limited variable not implemented - set as unlimited"");; 38 MATH_UNUSED(lower);; 39 MATH_UNUSED(upper);; 40 return SetVariable(ivar, name, val, step);; 41}; 42 ; 43/// set a new fixed variable (override if minimizer supports them ); 44bool Minimizer::SetFixedVariable(unsigned int ivar, const std::string &name, double val); 45{; 46 MATH_ERROR_MSG(""Minimizer::SetFixedVariable"", ""Setting of fixed variable not implemented"");; 47 MATH_UNUSED(ivar);; 48 MATH_UNUSED(name);; 49 MATH_UNUSED(val);; 50 return false;; 51}; 52/// set the value of an already existing variable; 53bool Minimizer::SetVariableValue(unsigned int ivar, double value); 54{; 55 MATH_ERROR_MSG(""Minimizer::SetVariableValue"", ""Set of a variable value not implemented"");; 56 MATH_UNUSED(ivar);; 57 MATH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8cxx_source.html:925,variab,variable,925,doc/master/Minimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html,3,['variab'],['variable']
Modifiability,"hFactorMarker< From >, To >::Actionstatic Int_t Action(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2118; TStreamerInfoActions::VectorPtrLooper::ConvertBasicTypeDefinition TStreamerInfoActions.cxx:2080; TStreamerInfoActions::VectorPtrLooper::ConvertBasicType::Actionstatic Int_t Action(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2081; TStreamerInfoActions::VectorPtrLooperDefinition TStreamerInfoActions.cxx:2065; TStreamerInfoActions::VectorPtrLooper::ReadActionstatic Int_t ReadAction(TBuffer &buf, void *start, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2163; TStreamerInfoActions::VectorPtrLooper::ReadBasestatic Int_t ReadBase(TBuffer &buf, void *start, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2171; TStreamerInfoActions::VectorPtrLooper::ReadBasicTypestatic Int_t ReadBasicType(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2068; TStreamerInfoActions::VectorPtrLooper::GenericReadstatic Int_t GenericRead(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2179; TStreamerInfoActions::VectorPtrLooper::WriteBasicTypestatic Int_t WriteBasicType(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2151; TStreamerInfoActions::VectorPtrLooper::GenericWritestatic Int_t GenericWrite(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2186; TStreamerInfoActions::WithFactorMarkerDefinition TStreamerInfoActions.cxx:58; TStreamerInfoActions::WithFactorMarker::Value_tFrom Value_tDefinition TStreamerInfoActions.cxx:59; vecDefinition civetweb.c:1855. ioiosrcTStreamerInfoActions.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:38 (GVA Time) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:276933,config,config,276933,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['config'],['config']
Modifiability,"hIMTHelper *) override;  Fill an STL branch. ;  ; void FillLeavesImpl (TBuffer &b);  Fill leaves. ;  ; void ReadLeavesImpl (TBuffer &b);  Read leaves. ;  . Private Attributes; BranchMap_t fBranchMap;  ! Branch map ;  ; std::vector< ElementBranchHelper_t > fBranchVector;  ! Branch vector ;  ; TString fClassName;  Name of the parent class, if we're the data member. ;  ; Int_t fClassVersion;  Version number of the class. ;  ; UInt_t fClCheckSum;  Class checksum. ;  ; TVirtualCollectionProxy * fCollProxy;  ! Collection proxy ;  ; TString fContName;  Class name of referenced object. ;  ; Int_t fID;  Element serial number in the streamer info. ;  ; TIndArray fInd;  ! Indices ;  ; TClass * fIndArrayCl;  ! Class of the ind array ;  ; TStreamerInfo * fInfo;  ! The streamer info ;  ; char * fObject;  ! Pointer to object at address or the ;  ; TBranch * fParent;  ! Parent of this branch ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TBranch; using BulkObj = ROOT::Experimental::Internal::TBulkBranchRead;  ; using CacheInfo_t = ROOT::Internal::TBranchCacheInfo;  ; enum  EStatusBits { ;   kDoNotProcess = ::kDoNotProcess; , kIsClone = ::kIsClone; , kBranchObject = ::kBranchObject; , kBranchAny = ::kBranchAny; , ;   kAutoDelete = (1ULL << ( 15 )); , kDoNotUseBufferMap = (1ULL << ( 22 )). };  TBranch status bits. More...;  ; typedef void(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchSTL.html:22009,inherit,inherited,22009,doc/master/classTBranchSTL.html,https://root.cern,https://root.cern/doc/master/classTBranchSTL.html,1,['inherit'],['inherited']
Modifiability,"hMode mode=ROOT::kConversionMatch, EInheritanceMode imode=kWithInheritance) const;  ; TClingMethodInfo GetMethodWithArgs (const char *fname, const char *arglist, Longptr_t *poffset, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch, EInheritanceMode imode=kWithInheritance) const;  ; Longptr_t GetOffset (const clang::CXXMethodDecl *md) const;  ; const clang::Type * GetType () const;  ; EDataType GetUnderlyingType () const;  ; std::vector< std::string > GetUsingNamespaces ();  ; ROOT::TMetaUtils::EIOCtorCategory HasDefaultConstructor (bool checkio=false, std::string *type_name=nullptr) const;  ; bool HasMethod (const char *name) const;  ; void Init (const char *name);  ; void Init (const clang::Decl *decl);  ; void Init (const clang::Type &tag);  ; void Init (int tagnum);  ; int InternalNext ();  ; bool IsBase (const char *name) const;  ; bool IsLoaded () const;  ; bool IsScopedEnum () const;  ; bool IsValidMethod (const char *method, const char *proto, Bool_t objectIsConst, Longptr_t *offset, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch) const;  ; void * New (const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; void * New (int n, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; void * New (int n, void *arena, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; void * New (void *arena, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; int Next ();  ; TClingClassInfo & operator= (const TClingClassInfo &rhs);  ; long Property () const;  ; int RootFlag () const;  ; void SetDecl (const clang::Decl *D);  ; int Size () const;  ; Longptr_t Tagnum () const;  ; const char * Title ();  ; const char * TmpltName () const;  ;  Public Member Functions inherited from TClingDeclInfo;  TClingDeclInfo ()=default;  ;  TClingDeclInfo (const clang::Decl *D);  ; virtual ~TClingDeclInfo ();  ; clang::Decl * GetDecl ();  ; virtual const clang::Decl * GetDecl () const;  ; virtual bool IsValid () const;  ; virtual const char * Name () const;  .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClingClassInfo.html:4966,inherit,inherited,4966,doc/master/classTClingClassInfo.html,https://root.cern,https://root.cern/doc/master/classTClingClassInfo.html,1,['inherit'],['inherited']
Modifiability,"hPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Decl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelection.html:32468,inherit,inherited,32468,doc/master/classTEveSelection.html,https://root.cern,https://root.cern/doc/master/classTEveSelection.html,8,['inherit'],['inherited']
Modifiability,"hTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the list AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorList.html:3329,inherit,inherited,3329,doc/master/classTSelectorList.html,https://root.cern,https://root.cern/doc/master/classTSelectorList.html,1,['inherit'],['inherited']
Modifiability,"hTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashList.html:3659,inherit,inherited,3659,doc/master/classTHashList.html,https://root.cern,https://root.cern/doc/master/classTHashList.html,1,['inherit'],['inherited']
Modifiability,"hWest = 101; kStarryNight = 102; kSunset = 103; kTemperatureMap = 104; kThermometer = 105; kValentine = 106; kVisibleSpectrum = 107; kWaterMelon = 108; kCool = 109; kCopper = 110; kGistEarth = 111. ; Interpreter Library; Many, many bugs have been fixed; thanks to everyone who has reported them!; Cling; Cling is now using a new just-in-time compilation engine called OrcJIT, a development based on MCJIT. It enables interpretation of inline assembly and exceptions; it will hopefully in the near future also support interpreting thread local storage (but doesn’t at the moment).; Thanks to the new JIT, cling also comes with debug symbols for interpreted code; you can enable them with “.debug”.; Function evaluation; Function calls through TMethodCall etc have been accelerated.; llvm / clang; llvm / clang were updated to r227800. This includes everything from the clang 3.6 release.; Dictionary Generation; Detect usage of #pragma once for inlined headers.; Turn on verbosity of genreflex if the VERBOSE environment variable is defined.; Optimise forward declarations in rootmap files in order to make their interpretation faster.; Propagate attributes specified in xml selection files to selected classes even when selected through typedefs.; Optimise selection procedure caching selected declarations in the selection rules, therewith avoiding to query the AST twice.; Include in the PCH all the STL and C headers to guarantee portability of binaries from SLC6 to CC7.; I/O Libraries; I/O New functionalities. Support for forward_list and I/O of unordered stl containers.; Support for std::complex. I/O Behavior change. The I/O now properly skip the content of base class onfile that have been removed from the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo is now as soon as possible, i.e. after all sources have been read. One significant consequence is that now when an object is stored in a split branch the rule is associtated with the branch of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:7380,variab,variable,7380,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['variab'],['variable']
Modifiability,"h_back(rmstrainT[0]);; 1587 vtmp.push_back(minftestT[0]);; 1588 vtmp.push_back(minftrainT[0]);; 1589 gTools().UsefulSortAscending(vtmp, &vtemps);; 1590 mname[0] = vtemps;; 1591 devtest[0] = vtmp[0];; 1592 devtrain[0] = vtmp[1];; 1593 biastest[0] = vtmp[2];; 1594 biastrain[0] = vtmp[3];; 1595 rmstest[0] = vtmp[4];; 1596 rmstrain[0] = vtmp[5];; 1597 minftest[0] = vtmp[6];; 1598 minftrain[0] = vtmp[7];; 1599 rhotest[0] = vtmp[8];; 1600 rhotrain[0] = vtmp[9];; 1601 devtestT[0] = vtmp[10];; 1602 devtrainT[0] = vtmp[11];; 1603 biastestT[0] = vtmp[12];; 1604 biastrainT[0] = vtmp[13];; 1605 rmstestT[0] = vtmp[14];; 1606 rmstrainT[0] = vtmp[15];; 1607 minftestT[0] = vtmp[16];; 1608 minftrainT[0] = vtmp[17];; 1609 } else if (doMulticlass) {; 1610 // TODO: fill in something meaningful; 1611 // If there is some ranking of methods to be done it should be done here.; 1612 // However, this is not so easy to define for multiclass so it is left out for now.; 1613 ; 1614 } else {; 1615 // now sort the variables according to the best 'eff at Beff=0.10'; 1616 for (Int_t k = 0; k < 2; k++) {; 1617 std::vector<std::vector<Double_t>> vtemp;; 1618 vtemp.push_back(effArea[k]); // this is the vector that is ranked; 1619 vtemp.push_back(eff10[k]);; 1620 vtemp.push_back(eff01[k]);; 1621 vtemp.push_back(eff30[k]);; 1622 vtemp.push_back(eff10err[k]);; 1623 vtemp.push_back(eff01err[k]);; 1624 vtemp.push_back(eff30err[k]);; 1625 vtemp.push_back(trainEff10[k]);; 1626 vtemp.push_back(trainEff01[k]);; 1627 vtemp.push_back(trainEff30[k]);; 1628 vtemp.push_back(sig[k]);; 1629 vtemp.push_back(sep[k]);; 1630 vtemp.push_back(roc[k]);; 1631 std::vector<TString> vtemps = mname[k];; 1632 gTools().UsefulSortDescending(vtemp, &vtemps);; 1633 effArea[k] = vtemp[0];; 1634 eff10[k] = vtemp[1];; 1635 eff01[k] = vtemp[2];; 1636 eff30[k] = vtemp[3];; 1637 eff10err[k] = vtemp[4];; 1638 eff01err[k] = vtemp[5];; 1639 eff30err[k] = vtemp[6];; 1640 trainEff10[k] = vtemp[7];; 1641 trainEff01[k] = vtemp[8];; 1642 trainEff3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:67378,variab,variables,67378,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['variab'],['variables']
Modifiability,"ha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t GetDefaultSmooth ();  Get default value for smooth-line drawing flag. ;  ; static void SetDefaultSmooth (Bool_t r);  Set default value for smooth-line drawing flag (default kFALSE). ;  ;  Static Public Member Functions inherited from TEvePointSet; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TPointSet3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TPolyMarker3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void PaintH3 (TH1 *h, Option_t *option);  Paint 3-d histogram h with 3-d polymarkers. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:38235,inherit,inherited,38235,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,4,['inherit'],['inherited']
Modifiability,"ha, Double_t beta);  Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. ;  ; virtual Bool_t IsInteriorPoint ();  Is the current position an interior point ? ;  ; virtual Double_t MuStep (TQpVar *step, Double_t alpha);  Compute the complementarity gap resulting from a step of length ""alpha"" along direction ""step"". ;  ; virtual void Negate ();  Perform a ""negate"" operation on all data vectors : x = -x. ;  ; virtual Double_t Norm1 ();  Return the sum of the vector-norm1's. ;  ; virtual Double_t NormInf ();  Return the sum of the vector-normInf's. ;  ; TQpVar & operator= (const TQpVar &source);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print class members. ;  ; virtual void Saxpy (TQpVar *b, Double_t alpha);  Perform a ""saxpy"" operation on all data vectors : x += alpha*y. ;  ; virtual void ShiftBoundVariables (Double_t alpha, Double_t beta);  Add alpha to components of (u,t,v,w) and beta to components of (lambda,pi,phi,gamma) ;  ; virtual Double_t StepBound (TQpVar *b);  calculate the largest alpha in (0,1] such that the/ nonnegative variables stay nonnegative in the given search direction. ;  ; virtual Bool_t ValidNonZeroPattern ();  Check that the variables conform to the non-zero indices. ;  ; virtual Double_t Violation ();  The amount by which the current variables violate the non-negativity constraints. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpVar.html:3627,variab,variables,3627,doc/master/classTQpVar.html,https://root.cern,https://root.cern/doc/master/classTQpVar.html,1,['variab'],['variables']
Modifiability,"ha=1.);  Static function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Point fEnd;  ; Point fStart;  . Additional Inherited Members;  Public Types inherited from TColorGradient; enum  ECoordinateMode { kPadMode; , kObjectBoundingMode; };  ; typedef std::vector< Color_t >::size_type SizeType_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TColor; Int_t fNumbe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearGradient.html:20330,inherit,inherited,20330,doc/master/classTLinearGradient.html,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html,2,['inherit'],['inherited']
Modifiability,"han 8 bytes (we use this number; 7160 // so that the calculation of the number of basket is consistent; 7161 // but in fact SetBasketSize will not let the size go below; 7162 // TBranch::fEntryOffsetLen + (100 + strlen(branch->GetName()); 7163 // (The 2nd part being a slight over estimate of the key length.; 7164 static const UInt_t hardmin = 8;; 7165 bmin = (bmin_new > hardmax) ? hardmax : ( bmin_new < hardmin ? hardmin : (UInt_t)bmin_new );; 7166 bmax = (bmax_new > hardmax) ? bmin : (UInt_t)bmax_new;; 7167 }; 7168 if (pDebug) {; 7169 Info(""OptimizeBaskets"", ""oldMemsize = %d, newMemsize = %d\n"",oldMemsize, newMemsize);; 7170 Info(""OptimizeBaskets"", ""oldBaskets = %d, newBaskets = %d\n"",oldBaskets, newBaskets);; 7171 }; 7172}; 7173 ; 7174////////////////////////////////////////////////////////////////////////////////; 7175/// Interface to the Principal Components Analysis class.; 7176///; 7177/// Create an instance of TPrincipal; 7178///; 7179/// Fill it with the selected variables; 7180///; 7181/// - if option ""n"" is specified, the TPrincipal object is filled with; 7182/// normalized variables.; 7183/// - If option ""p"" is specified, compute the principal components; 7184/// - If option ""p"" and ""d"" print results of analysis; 7185/// - If option ""p"" and ""h"" generate standard histograms; 7186/// - If option ""p"" and ""c"" generate code of conversion functions; 7187/// - return a pointer to the TPrincipal object. It is the user responsibility; 7188/// - to delete this object.; 7189/// - The option default value is ""np""; 7190///; 7191/// see TTree::Draw for explanation of the other parameters.; 7192///; 7193/// The created object is named ""principal"" and a reference to it; 7194/// is added to the list of specials Root objects.; 7195/// you can retrieve a pointer to the created object via:; 7196/// ~~~ {.cpp}; 7197/// TPrincipal *principal =; 7198/// (TPrincipal*)gROOT->GetListOfSpecials()->FindObject(""principal"");; 7199/// ~~~; 7200 ; 7201TPrincipal* TTree::Principal(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:282392,variab,variables,282392,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['variab'],['variables']
Modifiability,"han going into a loop. Interpreter. Cache ROOT specials (ROOT-7830 and friends).; Accelerated calls as seen e.g. in PyROOT [ROOT-7840]. This fixes a PyROOT performance regression between 6.02 and 6.04, seen by ATLAS. Documentation. Apply THtml->doxygen transformation for func doc. Eases cherry picking. Bugs and Improvements. [ROOT-7789] - ROOTConfig.cmake should not set CMAKE_MODULE_PATH nor install FindX modules; [ROOT-7809] - TWebFile infinite loop for 301 redirects without Location; [ROOT-7817] - Avoid a crash under some circumstances when trying to open an invalid path.; [ROOT-7787] - CMake: allow disabling ncurses. Release 6.04/14; Build system. Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the lastest Mac OSX (El Capitan); Fix configuration of threading in LLVM.; Fix issue with inconsistent visibility ROOT-7896. GL. Mattias Ellert fixed a memory leak [PR114]. Interpreter. Update automatic variables if gDirectory changes ROOT-7830; Fix issue with initialization of statics in interpreter ROOT-7901. PyROOT. Fix handling of vector<enums> ROOT-7916. Release 6.04/16; Published on 2016-03-17.; Core. Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes [ROOT-8019].; Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Meta Library. Added a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split.; This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit.; This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:36821,variab,variables,36821,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['variab'],['variables']
Modifiability,"han inheritance or composition) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClasses;  List of classes to be drawn. ;  ; TString ** fCnames {nullptr};  ![fNclasses] class names ;  ; Int_t * fCparent {nullptr};  !parent number of classes (temporary) ;  ; TClass ** fCpointer {nullptr};  ![fNclasses] pointers to the TClass objects ;  ; Int_t * fCstatus {nullptr};  [fNclasses] classes status ;  ; TString ** fCtitles {nullptr};  ![fNclasses] class titles ;  ; char ** fDerived {nullptr};  ![fNclasses] table to indicate if i derives from j ;  ; Float_t fLabelDx {0};  width along x of TPaveLabels in per cent of pad ;  ; TList ** fLinks {nullptr};  ![fNclasses] for each class, the list of referenced(ing) classes ;  ; Int_t fNclasses {0};  current number of classes ;  ; Int_t * fNdata {nullptr};  [fNclasses] Number of data members per class ;  ; std::vector< Int_t > fNsons;  ! internal variable, used during painting ;  ; std::vector< Int_t > fNtsons;  ! internal variable, used during painting ;  ; TString ** fOptions {nullptr};  ![fNclasses] List of options per class ;  ; Int_t * fParents {nullptr};  [fNclasses] parent number of classes (permanent) ;  ; Int_t fShowCod {0};  if 1 show classes referenced by implementation ;  ; Int_t fShowHas {0};  if 1 show ""has a"" relationship ;  ; Int_t fShowMul {0};  if 1 show multiple inheritance ;  ; Int_t fShowRef {0};  if 1 show classes relationship other than inheritance ;  ; TString fSourceDir;  Concatenated source directories. ;  ; Float_t fYoffset {0};  offset at top of picture in per cent of pad ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; ,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTree.html:18614,variab,variable,18614,doc/master/classTClassTree.html,https://root.cern,https://root.cern/doc/master/classTClassTree.html,4,"['inherit', 'variab']","['inheritance', 'variable']"
Modifiability,"handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30691,extend,extendedTerm,30691,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['extend'],['extendedTerm']
Modifiability,"handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:57803,inherit,inherited,57803,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,10,['inherit'],['inherited']
Modifiability,"handler is only used for real files.; 14516 * Scripts should support the OPTIONS method themselves, to allow a; 14517 * maximum flexibility.; 14518 * Lua and CGI scripts may fully support CORS this way (including; 14519 * preflights). */; 14520 send_options(conn);; 14521 return;; 14522 }; 14523 /* 13.3. everything but GET and HEAD (e.g. POST) */; 14524 if ((0 != strcmp(ri->request_method, ""GET"")); 14525 && (0 != strcmp(ri->request_method, ""HEAD""))) {; 14526 mg_send_http_error(conn,; 14527 405,; 14528 ""%s method not allowed"",; 14529 conn->request_info.request_method);; 14530 return;; 14531 }; 14532 ; 14533 /* 14. directories */; 14534 if (file.stat.is_directory) {; 14535 /* Substitute files have already been handled above. */; 14536 /* Here we can either generate and send a directory listing,; 14537 * or send an ""access denied"" error. */; 14538 if (!mg_strcasecmp(conn->dom_ctx->config[ENABLE_DIRECTORY_LISTING],; 14539 ""yes"")) {; 14540 handle_directory_request(conn, path);; 14541 } else {; 14542 mg_send_http_error(conn,; 14543 403,; 14544 ""%s"",; 14545 ""Error: Directory listing denied"");; 14546 }; 14547 return;; 14548 }; 14549 ; 14550 /* 15. Files with search/replace patterns: LSP and SSI */; 14551 if (is_template_text_file) {; 14552 HTTP1_only;; 14553 handle_file_based_request(conn, path, &file);; 14554 return;; 14555 }; 14556 ; 14557 /* 16. Static file - maybe cached */; 14558#if !defined(NO_CACHING); 14559 if ((!conn->in_error_handler) && is_not_modified(conn, &file.stat)) {; 14560 /* Send 304 ""Not Modified"" - this must not send any body data */; 14561 handle_not_modified_static_file_request(conn, &file);; 14562 return;; 14563 }; 14564#endif /* !NO_CACHING */; 14565 ; 14566 /* 17. Static file - not cached */; 14567 handle_static_file_request(conn, path, &file, NULL, NULL);; 14568 ; 14569#endif /* !defined(NO_FILES) */; 14570}; 14571 ; 14572 ; 14573#if !defined(NO_FILESYSTEMS); 14574static void; 14575handle_file_based_request(struct mg_connection *conn,; 14576 const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:428396,config,config,428396,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['config'],['config']
Modifiability,"handler is only used for real files.; 14517 * Scripts should support the OPTIONS method themselves, to allow a; 14518 * maximum flexibility.; 14519 * Lua and CGI scripts may fully support CORS this way (including; 14520 * preflights). */; 14521 send_options(conn);; 14522 return;; 14523 }; 14524 /* 13.3. everything but GET and HEAD (e.g. POST) */; 14525 if ((0 != strcmp(ri->request_method, ""GET"")); 14526 && (0 != strcmp(ri->request_method, ""HEAD""))) {; 14527 mg_send_http_error(conn,; 14528 405,; 14529 ""%s method not allowed"",; 14530 conn->request_info.request_method);; 14531 return;; 14532 }; 14533 ; 14534 /* 14. directories */; 14535 if (file.stat.is_directory) {; 14536 /* Substitute files have already been handled above. */; 14537 /* Here we can either generate and send a directory listing,; 14538 * or send an ""access denied"" error. */; 14539 if (!mg_strcasecmp(conn->dom_ctx->config[ENABLE_DIRECTORY_LISTING],; 14540 ""yes"")) {; 14541 handle_directory_request(conn, path);; 14542 } else {; 14543 mg_send_http_error(conn,; 14544 403,; 14545 ""%s"",; 14546 ""Error: Directory listing denied"");; 14547 }; 14548 return;; 14549 }; 14550 ; 14551 /* 15. Files with search/replace patterns: LSP and SSI */; 14552 if (is_template_text_file) {; 14553 HTTP1_only;; 14554 handle_file_based_request(conn, path, &file);; 14555 return;; 14556 }; 14557 ; 14558 /* 16. Static file - maybe cached */; 14559#if !defined(NO_CACHING); 14560 if ((!conn->in_error_handler) && is_not_modified(conn, &file.stat)) {; 14561 /* Send 304 ""Not Modified"" - this must not send any body data */; 14562 handle_not_modified_static_file_request(conn, &file);; 14563 return;; 14564 }; 14565#endif /* !NO_CACHING */; 14566 ; 14567 /* 17. Static file - not cached */; 14568 handle_static_file_request(conn, path, &file, NULL, NULL);; 14569 ; 14570#endif /* !defined(NO_FILES) */; 14571}; 14572 ; 14573 ; 14574#if !defined(NO_FILESYSTEMS); 14575static void; 14576handle_file_based_request(struct mg_connection *conn,; 14577 const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:428429,config,config,428429,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['config'],['config']
Modifiability,"handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Skeleton code for internal event generation is added; if hasIntGen is true. Bool_t makeFunction(const char* name, const char* realArgNames = 0, const char* catArgNames = 0, const char* expression = ""1.0"", Bool_t hasAnaInt = kFALSE, const char* intExpression = 0); Write code for a RooAbsReal implementation with class name 'name',; taking RooAbsReal arguments with names listed in argNames and; RooAbsCategory arguments with names listed in catArgNames as; constructor arguments (use a comma separated list for multiple; arguments). The initial value expression is taken to be; 'expression' which can be any one-line C++ expression in terms of; variables that occur in 'vars'. Skeleton code for handling of; analytical integrals is added if hasAnaInt is true. You can add; optional expressions for analytical integrals to be advertised by; your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. Bool_t makeClass(const char* className, const char* name, const char* realArgNames = 0, const char* catArgNames = 0, const char* expression = ""1.0"", Bool_t hasAnaInt = kFALSE, Bool_t hasIntGen = kFALSE, const char* intExpression = 0); Write code for a 'baseName' implementation with class name 'className',; taking RooAbsReal arguments with names listed in argNames and; RooAbsCategory arguments with names listed in catArgNames as; constructor arguments (use a comma separated list for multiple; arguments). The ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooClassFactory.html:15348,variab,variables,15348,root/html534/RooClassFactory.html,https://root.cern,https://root.cern/root/html534/RooClassFactory.html,3,['variab'],['variables']
Modifiability,"hannel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TLegend::TLegendTLegend()Default constructor.Definition TLegend.cxx:200; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; exDouble_t ex[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11. TLegend inherits from TAttText therefore changing any text attributes (text alignment, font, color...) on a legend will changed the text attributes on each line.; In particular it can be interesting to change the text alignement that way. In order to have a base-line vertical alignment instead of a centered one simply do: legend->SetTextAlign(13);; or legend->SetTextAlign(11);; The default value of some TLegend attributes can be changed using gStyle. The default settings are: SetLegendBorderSize(1);; SetLegendFillColor(0);; SetLegendFont(42);; SetLegendTextSize(0.);; The global attributes change the default values for the next created legends.; Text attributes can be also changed individually on each legend entry: TLegendEntry *le = leg->AddEntry(h1,""Histogram filled with random numbers"",""f"");; le->SetTextColor(kBlue);; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TLegendEntryStorage class for one entry of a TLegend.Definition TLegendEntry.h:25; leglegDefinition legend1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:4809,inherit,inherits,4809,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['inherit'],['inherits']
Modifiability,"hape) (None, 16, 16, 1) 0 ; ; conv2d (Conv2D) (None, 16, 16, 10) 100 ; ; batch_normalization (Batch (None, 16, 16, 10) 40 ; Normalization) ; ; conv2d_1 (Conv2D) (None, 16, 16, 10) 910 ; ; max_pooling2d (MaxPooling2 (None, 15, 15, 10) 0 ; D) ; ; flatten (Flatten) (None, 2250) 0 ; ; dense (Dense) (None, 256) 576256 ; ; dense_1 (Dense) (None, 2) 514 ; ; =================================================================; Total params: 577820 (2.20 MB); Trainable params: 577800 (2.20 MB); Non-trainable params: 20 (80.00 Byte); _________________________________________________________________; Factory : Booking method: ␛[1mPyKeras␛[0m; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Loading Keras Model ; : Loaded model from file: model_cnn.h5; Factory : Booking method: ␛[1mPyTorch␛[0m; : ; : Using PyTorch - setting special configuration options ; : Using PyTorch version 2; : Setup PyTorch Model for training; : Executing user initialization code from /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials/tmva/PyTorch_Generate_CNN_Model.py; running Torch code defining the model....; The PyTorch CNN model is created and saved as PyTorchModelCNN.pt; : Loaded pytorch train function: ; : Loaded pytorch optimizer: ; : Loaded pytorch loss function: ; : Loaded pytorch predict function: ; : Loaded model from file: PyTorchModelCNN.pt; Factory : ␛[1mTrain all methods␛[0m; Factory : Train method: BDT for Classification; : ; BDT : #events: (reweighted) sig: 800 bkg: 800; : #events: (unweighted) sig: 800 bkg: 800; : Training 200 Decision Trees ... patience please; : Elapsed time for training with 1600 events: 0.877 sec ; BDT : [dataset] : Evaluation of BDT on training sample (1600 events); : Elapsed time for evaluation of 1600 events: 0.0172 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_BDT.weights.xml␛[0m; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:8781,config,configuration,8781,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['config'],['configuration']
Modifiability,"hape, RooChebychev, RooChiSquarePdf, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooJohnson, RooLandau, RooLegacyExpPoly, RooLognormal, RooNovosibirsk, RooPoisson, RooPolynomial, RooPowerSum, RooVoigtian, RooAddModel, RooAddPdf, RooPolyVar, RooRatio, RooTruthModel, RooNormalizedPdf, and RooFixedProdPdf.; Definition at line 548 of file RooAbsArg.h. ◆ canNodeBeCached(). virtual CacheMode RooAbsArg::canNodeBeCached ; (; ); const. inlinevirtual . Reimplemented in RooLagrangianMorphFunc, RooAddPdf, RooProdPdf, RooProduct, RooRealSumFunc, and RooRealSumPdf.; Definition at line 384 of file RooAbsArg.h. ◆ changeServer(). void RooAbsArg::changeServer ; (; RooAbsArg & ; server, . bool ; valueProp, . bool ; shapeProp . ). Change dirty flag propagation mask for specified server. ; Definition at line 438 of file RooAbsArg.cxx. ◆ checkObservables(). bool RooAbsArg::checkObservables ; (; const RooArgSet * ; nset); const. virtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented in RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooRealSumFunc, and RooRealSumPdf.; Definition at line 817 of file RooAbsArg.cxx. ◆ cleanBranchName(). TString RooAbsArg::cleanBranchName ; (; ); const. protected . Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ; Definition at line 2075 of file RooAbsArg.cxx. ◆ clearShapeDirty(). void RooAbsArg::clearShapeDirty ; (; ); const. inlineprotected . Definition at line 579 of file RooAbsArg.h. ◆ clearValueAndShapeDirty(). void RooAbsArg::clearValueAndShapeDirty ; (; ); const. inlineprotected . Definition at line 571 of file RooAbsArg.h. ◆ clearValueDirty(). void RooAbsArg::clearValueDirty ; (; ); const. inlineprotected . Definition at line 576 of file RooAbsArg.h. ◆ clients(). const RefCountList_t & RooAbsArg::clients ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:50024,variab,variables,50024,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['variab'],['variables']
Modifiability,"hape. ;  ; static Double_t Tolerance ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void InitTrigonometry ();  ;  Protected Member Functions inherited from TGeoCone;  TGeoCone (const TGeoCone &)=delete;  ; TGeoCone & operator= (const TGeoCone &)=delete;  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fC1;  ; Double_t fC2;  ; Double_t fCdfi;  ; Double_t fCm;  ; Double_t fPhi1;  ; Double_t fPhi2;  ; Double_t fS1;  ; Double_t fS2;  ; Double_t fSm;  ;  Protected Attributes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoConeSeg.html:21842,inherit,inherited,21842,doc/master/classTGeoConeSeg.html,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html,2,['inherit'],['inherited']
Modifiability,"hape. ;  ; static Double_t Tolerance ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void InitTrigonometry ();  ;  Protected Member Functions inherited from TGeoTube;  TGeoTube (const TGeoTube &)=delete;  ; TGeoTube & operator= (const TGeoTube &)=delete;  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fC1;  ; Double_t fC2;  ; Double_t fCdfi;  ; Double_t fCm;  ; Double_t fPhi1;  ; Double_t fPhi2;  ; Double_t fS1;  ; Double_t fS2;  ; Double_t fSm;  ;  Protected Attributes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTubeSeg.html:20952,inherit,inherited,20952,doc/master/classTGeoTubeSeg.html,https://root.cern,https://root.cern/doc/master/classTGeoTubeSeg.html,2,['inherit'],['inherited']
Modifiability,"har * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::UseCurrentStylevirtual void UseCurrentStyle()Set current style settings in this object This function is called when either TCanvas::UseCurrentStyl...Definition TObject.cxx:807; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::Deletevirtual void Delete(Option_t *option="""")Delete this object.Definition TObject.cxx:254; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kCannotPick@ kCannotPickif object in a pad cannot be pickedDefinition TObject.h:67; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:286396,inherit,inherits,286396,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['inherit'],['inherits']
Modifiability,"har * TSystem::UnixPathName ; (; const char * ; name). virtual . Convert from a local pathname to a Unix pathname. ; E.g. from \user\root to /user/root. ; Reimplemented in TWinNTSystem.; Definition at line 1063 of file TSystem.cxx. ◆ Unlink(). int TSystem::Unlink ; (; const char * ; name). virtual . Unlink, i.e. ; remove, a file.; If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, while Windows does not allow the file to be deleted and the operation is a no-op). ; Reimplemented in TUnixSystem, TWinNTSystem, TDavixSystem, TNetSystem, TWebSystem, and TNetXNGSystem.; Definition at line 1381 of file TSystem.cxx. ◆ Unload(). void TSystem::Unload ; (; const char * ; module). virtual . Unload a shared library. ; Reimplemented in TUnixSystem.; Definition at line 2052 of file TSystem.cxx. ◆ Unsetenv(). void TSystem::Unsetenv ; (; const char * ; name). virtual . Unset environment variable. ; Reimplemented in TUnixSystem.; Definition at line 1657 of file TSystem.cxx. ◆ Utime(). int TSystem::Utime ; (; const char * ; file, . Long_t ; modtime, . Long_t ; actime . ). virtual . Set the a files modification and access times. ; If actime = 0 it will be set to the modtime. Returns 0 on success and -1 in case of error. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1527 of file TSystem.cxx. ◆ Which(). char * TSystem::Which ; (; const char * ; search, . const char * ; wfil, . EAccessMode ; mode = kFileExists . ). virtual . Find location of file in a search path. ; User must delete returned string. Returns 0 in case file is not found. ; Definition at line 1548 of file TSystem.cxx. ◆ WorkingDirectory(). const char * TSystem::WorkingDirectory ; (; ). virtual . Return working directory. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 871 of file TSystem.cxx. Member Data Documentation. ◆ fAclicMode. EAclicMode TSystem::fAclicM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:96642,variab,variable,96642,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['variab'],['variable']
Modifiability,"har *&) final;  Decode input buffer. ;  ; Bool_t ReadFile () final;  Read the key structure from the file. ;  ; TObject * ReadObj () final;  read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ;  ; void * ReadObjectAny (const TClass *expectedClass) final;  read object of any type ;  ; TObject * ReadObjWithBuffer (char *bufferRead) final;  read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ;  ; void SetBuffer () final;  ; void SetSubir ();  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateAttributes ();  update key attributes in key node ;  ; void UpdateObject (TObject *obj);  updates object, stored in the node Used for TDirectory data update ;  ; Int_t WriteFile (Int_t=1, TFile *=nullptr) final;  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TKey;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for a TObject* and fill output buffer. ;  ;  TKey (const TString &name, const TString &title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const void *obj, const TClass *cl, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for any object obj of class cl d and fill output buffer. ;  ;  TKey (Long64_t pointer, Int_t nbytes, TDirectory *motherDir=nullptr);  Create a TKey object to read keys. ;  ;  TKey (TDirectory *motherDir);  TKey default constructor. ;  ;  TKey (TDirectory *motherDir, const TKey &orig, UShort_t pidOffset);  Copy a T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeyXML.html:2617,inherit,inherited,2617,doc/master/classTKeyXML.html,https://root.cern,https://root.cern/doc/master/classTKeyXML.html,1,['inherit'],['inherited']
Modifiability,"har *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TGWidget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void DoRedraw () override;  Redraw vertical slider widget. ;  ; virtual void SetPointerPos (Int_t z, Int_t opt=0);  Set slider pointer position in pixel value. ;  ;  Protected Member Functions inherited from TGDoubleSlider; void ChangeCursor (Event_t *event);  Change the cursor shape depending on the slider area. ;  ; TString GetSString () const;  returns scaling type as string ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTripleVSlider.html:26895,inherit,inherited,26895,doc/master/classTGTripleVSlider.html,https://root.cern,https://root.cern/doc/master/classTGTripleVSlider.html,1,['inherit'],['inherited']
Modifiability,har *command);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t WantFocus () const;  ; Int_t WidgetId () const;  ;  Public Member Functions inherited from TGNumberFormat; virtual ~TGNumberFormat ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGTextEntry; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static FontStruct_t GetDefaultFontStruct ();  Return default font structure in use. ;  ; static const TGGC & GetDefaultGC ();  Return default graphics context. ;  ;  Static Public Member Functions inherited from TGFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shadow color graphics context. ;  ; static const TGGC & GetWhiteGC ();  Get white graphics context. ;  ; static Pixel_t GetWhitePixel ();  Get white pixel value. ;  ;  Static Public Member Functions inherited from TGWindow; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetCounter ();  Return global,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:28302,inherit,inherited,28302,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,1,['inherit'],['inherited']
Modifiability,"har *confDir, const char *fileName);  Read the PROOF config file and fill the master and worker list. ;  . Static Private Member Functions; static TProofNodeInfo * CreateNodeInfo (const TString &name);  Fill out the preliminary TProofNodeInfo structure. ;  ; static EInfoType GetInfoType (const TString &word);  Static method to determine the info type. ;  ; static void SetOption (TProofNodeInfo *nodeinfo, const TString &option, const TString &value);  Static method to set the node info options. ;  . Private Attributes; TString fFileName;  ; Bool_t fFoundMaster;  ; TProofNodeInfo * fMaster;  ; TList * fSubmasterList;  ; TList * fWorkerList;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TProofResources; Bool_t fValid;  . #include <TProofResourcesStatic.h>. Inheritance diagram for TProofResourcesStatic:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInfoType. enum TProofResourcesStatic::EInfoType. EnumeratorkNodeType ; kOption ; kHost . Definition at line 40 of file TProofResourcesStatic.h. Constructor & Destructor Documentation. ◆ TProofResourcesStatic() [1/2]. TProofResourcesStatic::TProofResourcesStatic ; (; ). This ctor is used in TProofServ::Setup() in combination with GetWorkDir() for a quick scan of the config file to retrieve the work directory. ; Definition at line 44 of file TProofResourcesStatic.cxx. ◆ TProofResourcesStatic() [2/2]. TProofResourcesStatic::TProofResourcesStatic ; (; const char * ; confDir, . const char * ; fileName . ). Using this ctor will retrieve all information in the config file and store it in fMaster, fSubmasterList and fWorkerList, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofResourcesStatic.html:12375,inherit,inherited,12375,doc/master/classTProofResourcesStatic.html,https://root.cern,https://root.cern/doc/master/classTProofResourcesStatic.html,1,['inherit'],['inherited']
Modifiability,"har *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TMatrixD fCovarianceMatrix;  Covariance matrix. ;  ; TVectorD fEigenValues;  Eigenvalue vector of trans. ;  ; TMatrixD fEigenVectors;  Eigenvector matrix of trans. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsNormalised;  Normalize matrix? ;  ; TVectorD fMeanValues;  Mean value over all data points. ;  ; Int_t fNumberOfDataPoints;  Number of data points. ;  ; Int_t fNumberOfVariables;  Number of variables. ;  ; TVectorD fOffDiagonal;  Elements of the tridiagonal. ;  ; TVectorD fSigmas;  vector of sigmas ;  ; Bool_t fStoreData;  Should we store input data? ;  ; Double_t fTrace;  Trace of covarience matrix. ;  ; TVectorD fUserData;  Vector of original data points. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TPrincipal.h>. Inheritance diagram for TPrincipal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TPrincipal() [1/3]. TPrincipal::TPrincipal ; (; const TPrincipal & ; pr). protected . Copy constructor. ; Definition at line 316 of file TPrincipal.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrincipal.html:20849,inherit,inherited,20849,doc/master/classTPrincipal.html,https://root.cern,https://root.cern/doc/master/classTPrincipal.html,1,['inherit'],['inherited']
Modifiability,"har *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fPath;  Path to file holding the lock. ;  . Private Member Functions;  TLockFile (const TLockFile &)=delete;  ; TLockFile & operator= (const TLockFile &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TLockFile.h>. Inheritance diagram for TLockFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TLockFile() [1/2]. TLockFile::TLockFile ; (; const TLockFile & ; ). privatedelete . ◆ TLockFile() [2/2]. TLockFile::TLockFile ; (; const char * ; path, . Int_t ; timeLimit = 0 . ). Default constructor. ; Blocks until lock is obtained. If a lock exists that is older than the given time limit, the file is removed. If timeLimit <= 0, wait for ever. ; Definition at line 43 of file TLockFile.cxx. ◆ ~TLockFile(). TLockFile::~TLockFile ; (; ). override . Destructor. Releases the lock. ; Definition at line 58 of file TLockFile.cxx. Member Function Documentation. ◆ Class(). static TClass * TLockFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLockFile::Class_Name ; (; ). static . ReturnsName of this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLockFile.html:10568,inherit,inherited,10568,doc/master/classTLockFile.html,https://root.cern,https://root.cern/doc/master/classTLockFile.html,1,['inherit'],['inherited']
Modifiability,"har *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch) finalReturn the cling mangled name for a method of a class with a certain prototype, i....Definition TCling.cxx:4989; TCling::UpdateAllCanvasesstatic void UpdateAllCanvases()Update all canvases at end the terminal input command.Definition TCling.cxx:6754; TCling::LoadLibraryMapInt_t LoadLibraryMap(const char *rootmapfile=nullptr) finalLoad map between class and library.Definition TCling.cxx:5741; TCling::BaseClassInfo_TagnumLongptr_t BaseClassInfo_Tagnum(BaseClassInfo_t *bcinfo) const finalDefinition TCling.cxx:8545; TCling::LibraryUnloadedvoid LibraryUnloaded(const void *dyLibHandle, const char *canonicalName)Definition TCling.cxx:6981; TDictionaryThis class defines an abstract interface that must be implemented by all classes that contain diction...Definition TDictionary.h:168; TEnumThe TEnum class implements the enum type.Definition TEnum.h:33; TEnvThe TEnv class reads config files, by default named .rootrc.Definition TEnv.h:124; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFunctionGlobal functions class (global functions are obtained from CINT).Definition TFunction.h:30; THashTableTHashTable implements a hash table to store TObject's.Definition THashTable.h:35; TInterpreterValueDefinition TInterpreterValue.h:32; TInterpreterThis class defines an abstract interface to a generic command line interpreter.Definition TInterpreter.h:60; TInterpreter::EReturnTypeEReturnTypeDefinition TInterpreter.h:80; TInterpreter::ECheckClassInfoECheckClassInfoDefinition TInterpreter.h:213; TInterpreter::FwdDeclArgsToKeepCollection_tstd::vector< std::pair< std::string, int > > FwdDeclArgsToKeepCollection_tDefinition TInterpreter.h:133; TInterpreter::DeclId_tTDictionary::DeclId_t DeclId_tDefinition TInterpreter.h:288; TInterpreter::EErrorCodeEErrorCodeDefinition TInterpreter.h:72; TList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:92121,config,config,92121,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['config'],['config']
Modifiability,"har *name, Int_t n, const Double_t *x, const Double_t *y); TCutG normal constructor. ~TCutG(); TCutG destructor. Double_t IntegralHist(TH2* h, Option_t* option = """") const; Compute the integral of 2-d histogram h for all bins inside the cut; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x and in y. Int_t IsInside(Double_t x, Double_t y) const; Function which returns 1 if point x,y lies inside the polygon defined by; the graph points 0 otherwise. This function assumes that the first and; the last point of the TCutG are the same (closed polygon). Algorithm:; The loop is executed with the end-point coordinates of a line segment; (X1,Y1)-(X2,Y2) and the Y-coordinate of a horizontal line.; The counter inter is incremented if the line (X1,Y1)-(X2,Y2) intersects; the horizontal line. In this case XINT is set to the X-coordinate of the; intersection point. If inter is an odd number, then the point x,y is within; the polygon. This function is based on an original algorithm developed by R.Nierhaus. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetVarX(const char* varx); Set X variable. void SetVarY(const char* vary); Set Y variable. void Streamer(TBuffer& b); Stream an object of class TCutG. TObject * GetObjectX() const; {return fObjectX;}. TObject * GetObjectY() const; {return fObjectY;}. const char * GetVarX() const; {return fVarX.Data();}. const char * GetVarY() const; {return fVarY.Data();}. void SetObjectX(TObject* obj); {fObjectX = obj;}. void SetObjectY(TObject* obj); {fObjectY = obj;}. » Author: Rene Brun 16/05/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/graf:$Id: TCutG.h 29443 2009-07-11 10:49:10Z brun $ » Last generated: 2009-12-07 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCutG.html:16999,variab,variable,16999,root/html526/TCutG.html,https://root.cern,https://root.cern/root/html526/TCutG.html,2,['variab'],['variable']
Modifiability,"har *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoArb8; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void GetPlaneNormal (Double_t *p1, Double_t *p2, Double_t *p3, Double_t *norm);  ; static Bool_t InsidePolygon (Double_t x, Double_t y, Double_t *pts);  ; static Bool_t IsSamePoint (const Double_t *p1, const Double_t *p2);  ;  Static Public Member Functions inherited from TGeoBBox; static Bool_t AreOverlapping (const TGeoBBox *box1, const TGeoMatrix *mat1, const TGeoBBox *box2, const TGeoMatrix *mat2) R__DEPRECATED(6;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Contains (const Double_t *point, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin);  ; static const char * DeclFileName ();  ; static Double_t DistFromInside (const Double_t *point, const Double_t *dir, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin, Double_t stepmax=TGeoShape::Big());  ; static Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin, Double_t stepmax=TGeoShape::Big());  ;  Static Public Member Functions inherited from TGeoShape; static Double_t Big ();  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Double_t ComputeEpsMch ();  Compute machine round-off double precision error as the smallest number that if added to 1.0 is different than 1.0. ;  ; static const char * DeclFileName ();  ; static Double_t DistToPhiMin (const Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrap.html:16591,inherit,inherited,16591,doc/master/classTGeoTrap.html,https://root.cern,https://root.cern/doc/master/classTGeoTrap.html,3,['inherit'],['inherited']
Modifiability,"har *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void GetTableSeeds (UInt_t *seeds, Int_t index);  Returns an array of seed values stored in the table, given the index. ;  ;  Static Public Member Functions inherited from TRandom; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Float_t fCarry;  ; Int_t fCount24;  ; Float_t fFloatSeedTable [24];  ; Int_t fIlag;  ; const Int_t fIntModulus;  ; Int_t fJlag;  ; Int_t fLuxury;  ; const Double_t fMantissaBit12;  ; const Double_t fMantissaBit24;  Temporary array of seed values (transient) ;  ; Int_t fNskip;  ; const UInt_t * fTheSeeds;  ;  Protected Attributes inherited from TRandom; UInt_t fSeed;  ;  Protected ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom1.html:13603,inherit,inherited,13603,doc/master/classTRandom1.html,https://root.cern,https://root.cern/doc/master/classTRandom1.html,3,['inherit'],['inherited']
Modifiability,"har *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Static Protected Member Functions; static FontStruct_t GetDefaultFontStruct ();  Return the default font structure in use. ;  ; static const TGGC & GetDefaultGC ();  Return the default graphics context in use. ;  ;  Static Protected Member Functions inherited from TGFrame; static Time_t GetLastClick ();  Get time of last mouse click. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; TGTextButton ** fColHeader;  column headers for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListView.html:25465,inherit,inherited,25465,doc/master/classTGListView.html,https://root.cern,https://root.cern/doc/master/classTGListView.html,1,['inherit'],['inherited']
Modifiability,"har *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void SetupFeedback () override;  Setup feedback. ;  ; void StopFeedback () override;  Stop feedback. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMembers () const;  ; void MergeOutput (Bool_t savememvalues=kFALSE) override;  Merge output (may not be used in this class). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Private Member Functions; Bool_t HandleTimer (TTimer *timer) override;  Handle timer event. ;  . Private Attributes; TList * fFeedback;  ; TSocket * fSocket;  . Additional Inherited M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSlave.html:18998,inherit,inherited,18998,doc/master/classTProofPlayerSlave.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSlave.html,1,['inherit'],['inherited']
Modifiability,"har *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TEveLine; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ; Bool_t fSmooth;  ;  Protected Attributes inherited from TEvePointSet; TArrayI * fIntIds;  ; Int_t fIntIdsPerPoint;  ; TString fTitle;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TPointSet3D; TRefArray f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLineProjected.html:49325,inherit,inherited,49325,doc/master/classTEveLineProjected.html,https://root.cern,https://root.cern/doc/master/classTEveLineProjected.html,3,['inherit'],['inherited']
Modifiability,"har *signal, const T &arg);  Activate signal with single parameter. ;  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveProjected;  TEveProjected ();  Constructor. ;  ; virtual ~TEveProjected ();  Destructor. ;  ; Float_t GetDepth () const;  ; TEveProjectionManager * GetManager () const;  ; TEveProjectable * GetProjectable () const;  ; virtual void SetDepth (Float_t d);  Set depth coordinate for the element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnRefProjectable (TEveProjectable *assumed_parent, bool notifyParent=true);  Remove reference to projectable. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEvePointSet; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSetProjected.html:35165,inherit,inherited,35165,doc/master/classTEvePointSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html,1,['inherit'],['inherited']
Modifiability,"har *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Attributes; std::shared_ptr< xRooNode > fNode;  ; std::shared_ptr< xRooNode > fTopNode;  . Additional Inherited Members;  Public Types inherited from TBrowser; enum  EStatusBits { kNoHidden = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBrowser; Bool_t InitGraphics ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:19935,inherit,inherited,19935,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,2,['inherit'],['inherited']
Modifiability,"har *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void ActivateItem (TGFrameElement *el) override;  Select/activate item. ;  ; void DeActivateItem (TGFrameElement *el) override;  Unselect/deactivate item. ;  ;  Protected Member Functions inherited from TGContainer; void DoRedraw () override;  Redraw content of container in the viewport region. ;  ; virtual void OnAutoScroll ();  Autoscroll while close to & beyond The Wall. ;  ; virtual void RepeatSearch ();  Repeats search. ;  ; virtual void SearchPattern ();  Search for entry which name begins with pattern. ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLVContainer.html:31122,inherit,inherited,31122,doc/master/classTGLVContainer.html,https://root.cern,https://root.cern/doc/master/classTGLVContainer.html,1,['inherit'],['inherited']
Modifiability,"har *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TObject * fRefObject {nullptr};  Pointer to object to set attributes. ;  ; TPad * fRefPad {nullptr};  Pad containing object. ;  ;  Protected Attributes inherited from TCanvas; Bool_t fBatch;  ! True when in batchmode ;  ; Int_t fCanvasID;  ! Canvas identifier ;  ; TCanvasImp * fCanvasImp;  ! Window system specific canvas implementation ;  ; TAttCanvas fCatt;  Canvas attributes. ;  ; UInt_t fCh;  Height of the canvas along Y (pixels) ;  ; TObject * fClickSelected;  ! Currently click-selected object ;  ; TPad * fClickSelectedPad;  ! Pad containing currently click-selected object ;  ; TContextMenu * fContextMenu;  ! Context menu pointer ;  ; UInt_t fCw;  Width of the canvas along X (pixels) ;  ; TString fDISPLAY;  Name of destination screen. ;  ; Int_t fDoubleBuffer;  Double buffer flag (0=off, 1=on) ;  ; Bool_t fDrawn;  ! Set to True when the Draw method is called ;  ; Int_t fEvent;  ! Type of current or last handled event ;  ; Int_t fEventX;  ! Last X mouse position in canvas ;  ; Int_t fEventY;  ! Last Y mouse position in canvas ;  ; Color_t fHighLightColor;  Highlight color of active pad. ;  ; TPad * fPadSave;  ! Pointer to saved pad in HandleInput ;  ; TVirtualPadPainter * fPainter;  ! Canvas (pad) painter. ;  ; Bool_t fRetained; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDialogCanvas.html:51488,inherit,inherited,51488,doc/master/classTDialogCanvas.html,https://root.cern,https://root.cern/doc/master/classTDialogCanvas.html,1,['inherit'],['inherited']
Modifiability,"har *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Types; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Static Protected Member Functions; static Time_t GetLastClick ();  Get time of last mouse click. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrame.html:21762,inherit,inherited,21762,doc/master/classTGFrame.html,https://root.cern,https://root.cern/doc/master/classTGFrame.html,3,['inherit'],['inherited']
Modifiability,"har *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetMenuHidingTimeout (Long_t timeout);  Set global timeout for menu-hiding in mili-seconds. ;  ;  Static Public Member Functions inherited from TGLViewer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGLColorSet & GetDefaultColorSet ();  Returns reference to the default color-set. ;  ; static Bool_t IsUsingDefaultColorSetForNewViewers ();  Returns the value of the static flag that determines if new viewers should use the default color-set. ;  ; static void SetAxisLabelScale (Float_t als);  Sets static scaling facor that allows simple guide axies to have label values scaled relative to actual scene dimensions. ;  ; static void UseDefaultColorSetForNewViewers (Bool_t x);  Sets static flag that determines if new viewers should use the default color-set. ;  ;  Static Public Member Functions inherited from TVirtualViewer3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualViewer3D * Viewer3D (TVirtualPad *pad=nullptr, Option_t *type="""");  Create a Viewer 3D of specified type. ;  ;  Static Public M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAViewer.html:28894,inherit,inherited,28894,doc/master/classTGLSAViewer.html,https://root.cern,https://root.cern/doc/master/classTGLSAViewer.html,1,['inherit'],['inherited']
Modifiability,"har *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static FontStruct_t GetDefaultFontStruct ();  Return default font structure in use for a text listbox entry. ;  ; static const TGGC & GetDefaultGC ();  Return default graphics context in use for a text listbox entry. ;  ;  Static Public Member Functions inherited from TGLBEntry; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shadow color graphics context. ;  ; static const TGGC & GetWhiteGC ();  Get white graphics context. ;  ; static Pixel_t GetWhitePixel ();  Get white pixel value. ;  ;  Static Public Member Functions inherited from TGWindow; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextLBEntry.html:19434,inherit,inherited,19434,doc/master/classTGTextLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextLBEntry.html,2,['inherit'],['inherited']
Modifiability,"har *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DoRedraw () override;  Redraw the group frame. ;  ; void Init ();  Default init. ;  ;  Protected Member Functions inherited from TGGroupFrame; void DoRedraw () override;  Redraw the group frame. ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Bool_t fDrawBorder;  kTRUE if border a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGButtonGroup.html:31649,inherit,inherited,31649,doc/master/classTGButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html,1,['inherit'],['inherited']
Modifiability,"har *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DoRedraw () override=0;  Redraw the frame. ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGGC fBarColorGC;  progress bar drawing context ;  ; EBarType fBarType;  OPTION={GetMethod=""GetBarType"";SetMethod=""SetBarType"";Items=(kStandard=""Standard"",kFancy=""Fancy"")} ;  ; Int_t fBarWidth;  progress bar width ;  ; Bool_t fDrawBar;  if true draw only bar in DoRedraw() ;  ; EFillType fFillType;  OPTION={GetMethod=""GetFillType"";SetMethod=""SetFillType"";Items=(kSolidFill=Solid"",kBlockFill=""Block"")} ;  ; FontStruct_t fFontStruct;  font used to draw position text ;  ; TString fFormat;  format used to show position not in percent ;  ; Float_t fMax;  logical maximum value (default 100) ;  ; Float_t fMin;  logical ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:25039,inherit,inherited,25039,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,3,['inherit'],['inherited']
Modifiability,"har *typeName, RooFactoryWSTool::IFace *iface);  Register foreign special objects in factory. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool checkSyntax (const char *arg);  Perform basic syntax on given factory expression. ;  ; void clearError ();  Associated workspace. ;  ; Int_t errorCount ();  ; std::string processAliasExpression (const char *arg);  Parse token. ;  ; std::string processCompositeExpression (const char *arg);  Process a single composite expression. ;  ; std::string processCreateArg (std::string &func, std::vector< std::string > &args);  Glue function between high-level syntax and low-level factory call to createArg: Process a parsed call to create a pdf named func ;  ; std::string processCreateVar (std::string &func, std::vector< st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:17202,inherit,inherited,17202,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['inherit'],['inherited']
Modifiability,"har * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup, . Int_t ; nbinsy, . const Double_t * ; ybins . ). protected . Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsxnumber of bins along the X axis ; [in]xlowlow edge of the X axis first bin ; [in]xupupper edge of the X axis last bin (not included in last bin) ; [in]nbinsynumber of bins ; [in]ybinsarray of low-edges for each bin. This is an array of type double and size nbinsy+1 . Definition at line 154 of file TH2.cxx. ◆ TH2() [5/7]. TH2::TH2 ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Double_t * ; xbins, . Int_t ; nbinsy, . const Double_t * ; ybins . ). protected . Constructor for Double_t variable bin size 2-D histograms. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsxnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type double and size nbinsx+1 ; [in]nbinsynumber of bins ; [in]ybinsarray of low-edges for each bin. This is an array of type double and size nbinsy+1 . Definition at line 183 of file TH2.cxx. ◆ TH2() [6/7]. TH2::TH2 ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins, . Int_t ; nbinsy, . const Float_t * ; ybins . ). protected . Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:59896,variab,variable,59896,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['variab'],['variable']
Modifiability,"har * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList . ). Generic constructor from list of extended PDFs. ; There are no coefficients as the expected number of events from each components determine the relative weight of the PDFs.; All PDFs must inherit from RooAbsPdf. ; Definition at line 257 of file RooAddPdf.cxx. ◆ RooAddPdf() [5/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList, . const RooArgList & ; inCoefList, . bool ; recursiveFractions = false . ). Generic constructor from list of PDFs and list of coefficients. ; Each pdf list element (i) is paired with coefficient list element (i). The number of coefficients must be either equal to the number of PDFs, in which case extended MLL fitting is enabled, or be one less.; All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal; If the recursiveFraction flag is true, the coefficients are interpreted as recursive coefficients as explained in the class description. ; Definition at line 159 of file RooAddPdf.cxx. ◆ RooAddPdf() [6/6]. RooAddPdf::RooAddPdf ; (; const RooAddPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 290 of file RooAddPdf.cxx. ◆ ~RooAddPdf(). RooAddPdf::~RooAddPdf ; (; ). inlineoverride . Definition at line 45 of file RooAddPdf.h. Member Function Documentation. ◆ analyticalIntegralWN(). double RooAddPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Return analytical integral defined by given scenario code. ; Reimplemented from RooAbsPdf.; Definition at line 698 of file RooAddPdf.cxx. ◆ binBoundaries(). std::lis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:80801,extend,extended,80801,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,['extend'],['extended']
Modifiability,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Bool_t fBoundingBox;  True when the SVG header is printed. ;  ; Bool_t fRange;  True when a range has been defined. ;  ; Int_t fType;  Workstation type used to know if the SVG is open. ;  ; Float_t fXsize;  Page size along X. ;  ; Float_t fYsize;  Page size along Y. ;  ; Double_t fYsizeSVG;  Page's Y size in SVG units. ;  ;  Protected Attributes inherited from TVirtualPS; char * fBuffer {nullptr};  ; const char * fImplicitCREsc {nullptr};  ; Int_t fLenBuffer {0};  ; Int_t fNByte {0};  ; Bool_t fPrinted {kFALSE};  ; Int_t fSizBuffer {0};  ; std::ofstream * fStream {nullptr};  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Static Protected Attributes; static Int_t fgLineCap = 0;  Appearance of line caps. ;  ; static Int_t fgLineJoin = 0;  Appearance of joining lines. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVG.html:23894,inherit,inherited,23894,doc/master/classTSVG.html,https://root.cern,https://root.cern/doc/master/classTSVG.html,1,['inherit'],['inherited']
Modifiability,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TGraph * fGin;  Input graph. ;  ; TGraph * fGout;  Output graph. ;  ; Double_t fMaxX;  Maximum value of array X. ;  ; Double_t fMinX;  Minimum value of array X. ;  ; Int_t fNin;  Number of input points. ;  ; Int_t fNout;  Number of output points. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphSmooth (const TGraphSmooth &);  ; TGraphSmooth & operator= (const TGraphSmooth &);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphSmooth.h>. Inheritance diagram for TGraphSmooth:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Oper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphSmooth.html:13275,inherit,inherited,13275,doc/master/classTGraphSmooth.html,https://root.cern,https://root.cern/doc/master/classTGraphSmooth.html,1,['inherit'],['inherited']
Modifiability,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fIm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:32027,inherit,inherited,32027,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['inherit'],['inherited']
Modifiability,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ULong_t fBlackPixel;  Value of black pixel in colormap. ;  ; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; Colormap fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; void * fDisplay;  Pointer to display. ;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:46516,inherit,inherited,46516,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['inherit'],['inherited']
Modifiability,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoPatternFinder; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Double_t fTxy = 0.;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGeoPatternFinder; enum  EGeoPatternFlags { kPatternReflected = (1ULL << ( 14 )); , kPatternSpacedOut = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder (const TGeoPatternFinder &);  Mutex for thread data. ;  ; TGeoPatternFinder & operator= (const TGeoPatternFind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternParaY.html:11771,inherit,inherited,11771,doc/master/classTGeoPatternParaY.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaY.html,1,['inherit'],['inherited']
Modifiability,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Int_t fDelta;  Increment size. ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this tree ;  ; Long64_t * fList;  [fN]Array of elements ;  ; Int_t fN;  Number of elements in the list. ;  ; bool fReapply;  If true, TTree::Draw will 'reapply' the original cut. ;  ; Int_t fSize;  Size of array. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; TEventList operator* (const TEventList &list1, const TEventList &list2);  Intersection. ;  ; TEventList operator+ (const TEventList &list1, const TEventList &list2);  Addition. ;  ; TEventList operator- (const TEventList &list1, const TEventList &list2);  Subtraction. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Prot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList.html:14236,inherit,inherited,14236,doc/master/classTEventList.html,https://root.cern,https://root.cern/doc/master/classTEventList.html,1,['inherit'],['inherited']
Modifiability,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ SendFileCloseEvent(). bool ROOT::RTreeDrawMonitoring::SendFileCloseEvent ; (; TFile * ; ). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 49 of file RTreeViewer.cxx. ◆ SendFileOpenProgress().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:12156,inherit,inherited,12156,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html,4,['inherit'],['inherited']
Modifiability,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TParameter< Long64_t >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TParameter< Long64_t >; enum  EStatusBits ;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSelectorScalar.h>. Inheritance diagram for TSelectorScalar:. This browser is not able to sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorScalar.html:9997,inherit,inherited,9997,doc/master/classTSelectorScalar.html,https://root.cern,https://root.cern/doc/master/classTSelectorScalar.html,2,['inherit'],['inherited']
Modifiability,"har * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TGWidget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void DoRedraw () override;  Redraw speedo widget. ;  ; void DrawNeedle ();  Draw needle in speedo widget. ;  ; void DrawText ();  Draw text in speedo widget. ;  ; void Translate (Float_t val, Float_t angle, Int_t *x, Int_t *y);  Translate distance from center and angle to xy coordinates. ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSpeedo.html:25704,inherit,inherited,25704,doc/master/classTGSpeedo.html,https://root.cern,https://root.cern/doc/master/classTGSpeedo.html,1,['inherit'],['inherited']
Modifiability,har * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TEvePointSelectorConsumer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TEvePointSet ** fBins;  ; Double_t fBinWidth;  ; Double_t fCurMax;  ; Double_t fCurMin;  ; Int_t fDefPointSetCapacity;  ; Int_t fLastBin;  ; Double_t fMax;  ; Double_t fMin;  Index of the last filled TEvePointSet. ;  ; Int_t fNBins;  ; TString fQuantName;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSetArray.html:31006,inherit,inherited,31006,doc/master/classTEvePointSetArray.html,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html,1,['inherit'],['inherited']
Modifiability,"har * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; double _value;  Value payload. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <RooDouble.h>. Inheritance diagram for RooDouble:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera inst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDouble.html:10724,inherit,inherited,10724,doc/master/classRooDouble.html,https://root.cern,https://root.cern/doc/master/classRooDouble.html,1,['inherit'],['inherited']
Modifiability,"har * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TBenchmark (const TBenchmark &);  Copy constructor. ;  ; TBenchmark & operator= (const TBenchmark &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t * fCpuTime;  ; TString * fNames;  ; Int_t fNbench;  ; Int_t fNmax;  ; Float_t * fRealTime;  ; TStopwatch * fTimer;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:11113,inherit,inherited,11113,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['inherit'],['inherited']
Modifiability,har * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TString fBlockName;  ;  Protected Attributes inherited from TBranch; char * fAddress;  ! Address of 1st leaf (variable or object) ;  ; Int_t * fBasketBytes;  [fMaxBaskets] Length of baskets on file ;  ; Long64_t * fBasketEntry;  [fMaxBaskets] Table of first entry in each basket ;  ; TObjArray fBaskets;  -> List of baskets of this branch ;  ; Long64_t * fBasketSeek;  [fMaxBaskets] Addresses of baskets on file ;  ; Int_t fBasketSize;  Initial Size of Basket Buffer. ;  ; TObjArray fBranches;  -> List of Branches of this branch ;  ; TList * fBrowsables;  ! List of TVirtualBranchBrowsables used for Browse() ;  ; BulkObj fBulk;  ! Helper for performing bulk IO ;  ; CacheInfo_t fCacheInfo;  ! Hold info about which basket are in the cache and if they have been retrieved from the cache. ;  ; Int_t fCompress;  Compression level and algorithm. ;  ; TBasket * fCurrentBasket;  ! Pointer to the current basket. ;  ; TDirectory * fDirectory;  ! Pointer to directory where this branch buffers are stored ;  ; Long64_t fEntries;  Number of entries. ;  ; TBuffer * fEntryBuffer;  ! Buffer used to directly pass the content without streaming ;  ; Long64_t fEntryNumber;  Current entry number (last one filled in this branch) ;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookBranch.html:20987,inherit,inherited,20987,doc/master/classTHbookBranch.html,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html,2,"['inherit', 'variab']","['inherited', 'variable']"
Modifiability,"har * GetName () const override;  Return unique name, used in SavePrimitive methods. ;  ; const TGWindow * GetParent () const;  ; virtual Bool_t HandleExpose (Event_t *event);  ; virtual Bool_t HandleIdleEvent (TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionFrame.html:13908,inherit,inherited,13908,doc/master/classTSessionFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionFrame.html,4,['inherit'],['inherited']
Modifiability,"har * GetSourceDir () const;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  list classes names and titles ;  ; void Paint (Option_t *option="""") override;  Draw the current class setting in fClasses and fStatus. ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  save current configuration in a Root file if filename is blank, the name of the file will be the current objectname.root all the current settings are preserved the Root file produced can be looked at by a another Root session with no access to the original classes. ;  ; virtual void SetClasses (const char *classes, Option_t *option=""ID"");  Set the list of classes for which the hierarchy is to be drawn See Paint for the syntax. ;  ; virtual void SetLabelDx (Float_t labeldx=0.15);  Set the size along x of the TPaveLabel showing the class name. ;  ; virtual void SetSourceDir (const char *dir=""src"");  ; virtual void SetYoffset (Float_t offset=0);  Set the offset at the top of the picture The default offset is computed automatically taking into account classes not inheriting from TObject. ;  ; virtual void ShowClassesUsedBy (const char *classes);  mark classes used by the list of classes in classes ;  ; virtual void ShowClassesUsing (const char *classes);  mark classes using any class in the list of classes in classes ;  ; virtual void ShowLinks (Option_t *option=""HMR"");  Set link options in the ClassTree object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TClassTree. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newnam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTree.html:6754,inherit,inheriting,6754,doc/master/classTClassTree.html,https://root.cern,https://root.cern/doc/master/classTClassTree.html,1,['inherit'],['inheriting']
Modifiability,"har * fZFragment;  ; char * fZPath;  ; char * fZQuery;  ; char * fZScheme;  . Private Member Functions;  TGHtmlUri (const TGHtmlUri &)=delete;  ; TGHtmlUri & operator= (const TGHtmlUri &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGHtmlUri.h>. Inheritance diagram for TGHtmlUri:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHtmlUri() [1/3]. TGHtmlUri::TGHtmlUri ; (; const TGHtmlUri & ; ). privatedelete . ◆ TGHtmlUri() [2/3]. TGHtmlUri::TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlUri.html:9537,inherit,inherited,9537,doc/master/classTGHtmlUri.html,https://root.cern,https://root.cern/doc/master/classTGHtmlUri.html,1,['inherit'],['inherited']
Modifiability,"har)*buf));; 10779 ; 10780 ; 10781 /* Parse all HTTP headers */; 10782 ri->num_headers = parse_http_headers(&buf, ri->http_headers);; 10783 if (ri->num_headers < 0) {; 10784 /* Error while parsing headers */; 10785 return -1;; 10786 }; 10787 ; 10788 return response_length + init_skip;; 10789}; 10790 ; 10791 ; 10792/* Keep reading the input (either opened file descriptor fd, or socket sock,; 10793 * or SSL descriptor ssl) into buffer buf, until \r\n\r\n appears in the; 10794 * buffer (which marks the end of HTTP request). Buffer buf may already; 10795 * have some data. The length of the data is stored in nread.; 10796 * Upon every read operation, increase nread by the number of bytes read. */; 10797static int; 10798read_message(FILE *fp,; 10799 struct mg_connection *conn,; 10800 char *buf,; 10801 int bufsiz,; 10802 int *nread); 10803{; 10804 int request_len, n = 0;; 10805 struct timespec last_action_time;; 10806 double request_timeout;; 10807 ; 10808 if (!conn) {; 10809 return 0;; 10810 }; 10811 ; 10812 memset(&last_action_time, 0, sizeof(last_action_time));; 10813 ; 10814 if (conn->dom_ctx->config[REQUEST_TIMEOUT]) {; 10815 /* value of request_timeout is in seconds, config in milliseconds */; 10816 request_timeout =; 10817 strtod(conn->dom_ctx->config[REQUEST_TIMEOUT], NULL) / 1000.0;; 10818 } else {; 10819 request_timeout =; 10820 strtod(config_options[REQUEST_TIMEOUT].default_value, NULL); 10821 / 1000.0;; 10822 }; 10823 if (conn->handled_requests > 0) {; 10824 if (conn->dom_ctx->config[KEEP_ALIVE_TIMEOUT]) {; 10825 request_timeout =; 10826 strtod(conn->dom_ctx->config[KEEP_ALIVE_TIMEOUT], NULL); 10827 / 1000.0;; 10828 }; 10829 }; 10830 ; 10831 request_len = get_http_header_len(buf, *nread);; 10832 ; 10833 while (request_len == 0) {; 10834 /* Full request not yet received */; 10835 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 10836 /* Server is to be stopped. */; 10837 return -1;; 10838 }; 10839 ; 10840 if (*nread >= bufsiz) {; 10841 /* Request too long ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:311125,config,config,311125,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,3,['config'],['config']
Modifiability,"har)*buf));; 10780 ; 10781 ; 10782 /* Parse all HTTP headers */; 10783 ri->num_headers = parse_http_headers(&buf, ri->http_headers);; 10784 if (ri->num_headers < 0) {; 10785 /* Error while parsing headers */; 10786 return -1;; 10787 }; 10788 ; 10789 return response_length + init_skip;; 10790}; 10791 ; 10792 ; 10793/* Keep reading the input (either opened file descriptor fd, or socket sock,; 10794 * or SSL descriptor ssl) into buffer buf, until \r\n\r\n appears in the; 10795 * buffer (which marks the end of HTTP request). Buffer buf may already; 10796 * have some data. The length of the data is stored in nread.; 10797 * Upon every read operation, increase nread by the number of bytes read. */; 10798static int; 10799read_message(FILE *fp,; 10800 struct mg_connection *conn,; 10801 char *buf,; 10802 int bufsiz,; 10803 int *nread); 10804{; 10805 int request_len, n = 0;; 10806 struct timespec last_action_time;; 10807 double request_timeout;; 10808 ; 10809 if (!conn) {; 10810 return 0;; 10811 }; 10812 ; 10813 memset(&last_action_time, 0, sizeof(last_action_time));; 10814 ; 10815 if (conn->dom_ctx->config[REQUEST_TIMEOUT]) {; 10816 /* value of request_timeout is in seconds, config in milliseconds */; 10817 request_timeout =; 10818 strtod(conn->dom_ctx->config[REQUEST_TIMEOUT], NULL) / 1000.0;; 10819 } else {; 10820 request_timeout =; 10821 strtod(config_options[REQUEST_TIMEOUT].default_value, NULL); 10822 / 1000.0;; 10823 }; 10824 if (conn->handled_requests > 0) {; 10825 if (conn->dom_ctx->config[KEEP_ALIVE_TIMEOUT]) {; 10826 request_timeout =; 10827 strtod(conn->dom_ctx->config[KEEP_ALIVE_TIMEOUT], NULL); 10828 / 1000.0;; 10829 }; 10830 }; 10831 ; 10832 request_len = get_http_header_len(buf, *nread);; 10833 ; 10834 while (request_len == 0) {; 10835 /* Full request not yet received */; 10836 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 10837 /* Server is to be stopped. */; 10838 return -1;; 10839 }; 10840 ; 10841 if (*nread >= bufsiz) {; 10842 /* Request too long ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:311158,config,config,311158,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,3,['config'],['config']
Modifiability,"har* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. boolfAdaptiveSamplingcontrols use of adaptive sampling algorithm; RooStats::ConfidenceBelt*fConfBelt; boolfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData*fDatadata set ; Double_tfLeftSideFraction; RooArgSetfNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetfPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*fPdfcommon PDF; RooAbsData*fPointsToTest; boolfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NeymanConstruction(); default constructor; fWS = new RooWorkspace();; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. void SetModel(const RooStats::ModelConfig& ); set the model. ~NeymanConstruction(); default constructor; if(fOwnsWorkspace && fWS) delete fWS;; if(fConfBelt) delete fConfBelt;. ConfInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::SetInterval. TList* GenSamplingDistribution(const char* asciiFilePat = 0) const; This method generates the sampling distribution for each point of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:8700,adapt,adaptive,8700,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['adapt'],['adaptive']
Modifiability,"har* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTryWait(); virtual voidTObject::UseCurrentStyle(); Int_tWait(Int_t millisec = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSemaphore(const TSemaphore& s); TSemaphore&operator=(const TSemaphore& s). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-03-14 16:49; This page ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSemaphore.html:5308,variab,variable,5308,root/html534/TSemaphore.html,https://root.cern,https://root.cern/root/html534/TSemaphore.html,1,['variab'],['variable']
Modifiability,"har* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTryWait(); virtual voidTObject::UseCurrentStyle(); Int_tWait(Int_t millisec = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSemaphore(const TSemaphore& s); TSemaphore&operator=(const TSemaphore& s). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TSemaphore.h 20882 2007-11-19 11:31:26Z rdm $ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSemaphore.html:5220,variab,variable,5220,root/html528/TSemaphore.html,https://root.cern,https://root.cern/root/html528/TSemaphore.html,3,['variab'],['variable']
Modifiability,"har* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidgenerateEvent(RooArgSet& theEvent, Int_t remaining); virtual voidinitGenerator(const RooArgSet& theEvent); voidTObject::MakeZombie(); voidRooAbsGenContext::resampleData(Double_t& ratio). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. UInt_tRooAbsGenContext::_expectedEventsNumber of expected events from extended p.d.f; RooAbsPdf::ExtendModeRooAbsGenContext::_extendModeExtended mode capabilities of p.d.f.; RooDataSet*RooAbsGenContext::_genData! Data being generated; Bool_tRooAbsGenContext::_isValidIs context in valid state?; static Int_tRooPrintable::_nameLength; Int_tRooAbsGenContext::_nextProtoIndexNext prototype event to load according to LUT; Int_t*RooAbsGenContext::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooArgSet*_cloneSetInternal clone of p.d.f.; RooAbsReal*_effPointer to efficiency function; RooAbsGenContext*_generatorGenerator context for p.d.f. Class Charts. Inheritance; Inherited Memb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEffGenContext.html:7751,extend,extended,7751,root/html526/RooEffGenContext.html,https://root.cern,https://root.cern/root/html526/RooEffGenContext.html,1,['extend'],['extended']
Modifiability,"har* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidgenerateEvent(RooArgSet& theEvent, Int_t remaining); virtual voidinitGenerator(const RooArgSet& theEvent); voidTObject::MakeZombie(); voidRooAbsGenContext::resampleData(Double_t& ratio). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. UInt_tRooAbsGenContext::_expectedEventsNumber of expected events from extended p.d.f; RooAbsPdf::ExtendModeRooAbsGenContext::_extendModeExtended mode capabilities of p.d.f.; RooDataSet*RooAbsGenContext::_genData! Data being generated; Bool_tRooAbsGenContext::_isValidIs context in valid state?; static Int_tRooPrintable::_nameLength; Int_tRooAbsGenContext::_nextProtoIndexNext prototype event to load according to LUT; TStringRooAbsGenContext::_normRangeNormalization range of pdf; Int_t*RooAbsGenContext::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooArgSet*_cloneSetInternal clone of p.d.f.; RooAbsReal*_effPointer to efficiency function; RooAbsGenContext*_generatorGenerat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEffGenContext.html:7737,extend,extended,7737,root/html528/RooEffGenContext.html,https://root.cern,https://root.cern/root/html528/RooEffGenContext.html,1,['extend'],['extended']
Modifiability,"har* name9 = ""p9"", const char* name10 = ""p10""); Set up to 11 parameter names. void Streamer(TBuffer& b, const TClass* onfile_class); Stream a class object. void Streamer(TBuffer& ); Stream a class object. void Streamer(TBuffer& b, Int_t version, UInt_t start, UInt_t count, const TClass* onfile_class = 0); specialized streamer function being able to read old TF1 versions as TF1Old in memory. void Convert(UInt_t fromVersion); Convert the fOper of a TFormula version fromVersion to the current in memory version. void MakePrimitive(const char* expr, Int_t pos); MakePrimitive; find TFormulaPrimitive replacement for some operands. void Optimize(); MI include. Optimize formula; 1.) Minimize the number of operands; a.) several operanands are glued togther; b.) some primitive functions glued together - exemp. (x+y) => PlusXY(x,y); c.) maximize number of standard calls minimizing number of jumps in Eval cases; d.) variables, parameters and constants are mapped - using fOperOfssets0; Eval procedure use direct acces to data (only one corresponding case statement in eval procedure). pdata[operand={Var,Par,Const}][offset]; pdata[fOperOffsets0[i]][fOperOffset1[i+1]]; 2.) The fastest evaluation function is chosen at the end; a.) fOptimal := pointer to the fastest function for given evaluation string; switch(GetActionOptimized(0)){; case kData : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive0; break;}; case kUnary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive1; break;}; case kBinary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive2; break;}; case kThree : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive3; break;}; case kFDM : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive4; break;}; }; b.) ex. fOptimal = ::EvalPrimitive0 - if it return only variable, constant or parameter; = ::EvalParameter1 - if only one unary operation; = ::EvalPrimitive2 - if only one binary operation. Double_t EvalPrimitive(const Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__v5__TFormula.html:32147,variab,variables,32147,root/html604/ROOT__v5__TFormula.html,https://root.cern,https://root.cern/root/html604/ROOT__v5__TFormula.html,1,['variab'],['variables']
Modifiability,"har* opname, Long64_t current, Long64_t size, TStopwatch* watch = 0, Bool_t last = kFALSE, Bool_t refresh = kFALSE, const char* msg = """"). void Paint(Option_t* option = """"). void PaintNode(TGeoNode* node, Option_t* option = """", TGeoMatrix* global = 0). void PaintShape(TGeoShape* shape, Option_t* option = """"). void PaintOverlap(void* ovlp, Option_t* option = """"). void PrintOverlaps() const. void PaintVolume(TGeoVolume* vol, Option_t* option = """", TGeoMatrix* global = 0). void RandomPoints(const TGeoVolume* vol, Int_t npoints, Option_t* option = """"). void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char* target_vol, Bool_t check_norm). void Raytrace(Option_t* option = """"). TGeoNode * SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil, const char* g3path). void SetBombFactors(Double_t bombx = 1.3, Double_t bomby = 1.3, Double_t bombz = 1.3, Double_t bombr = 1.3). void SetExplodedView(Int_t iopt = 0). void SetGeoManager(TGeoManager* geom). void SetIteratorPlugin(TGeoIteratorPlugin* plugin). void SetCheckedNode(TGeoNode* node). void SetNsegments(Int_t nseg = 20). void SetNmeshPoints(Int_t npoints). void SetRaytracing(Bool_t flag = kTRUE). void SetTopVisible(Bool_t vis = kTRUE). void SetTopVolume(TGeoVolume* vol). void SetVisLevel(Int_t level = 3). void SetVisOption(Int_t option = 0). Int_t ShapeDistancetoPrimitive(const TGeoShape* shape, Int_t numpoints, Int_t px, Int_t py) const. void Test(Int_t npoints, Option_t* option). void TestOverlaps(const char* path). Bool_t TestVoxels(TGeoVolume* vol). void UnbombTranslation(const Double_t* tr, Double_t* bombtr). Double_t Weight(Double_t precision, Option_t* option = ""v""). » Author: Andrei Gheata 11/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualGeoPainter.html:14948,plugin,plugin,14948,root/html534/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html534/TVirtualGeoPainter.html,1,['plugin'],['plugin']
Modifiability,"har* opname, Long64_t current, Long64_t size, TStopwatch* watch = 0, Bool_t last = kFALSE, Bool_t refresh = kFALSE, const char* msg = """"). void Paint(Option_t* option = """"). void PaintNode(TGeoNode* node, Option_t* option = """", TGeoMatrix* global = 0). void PaintShape(TGeoShape* shape, Option_t* option = """"). void PaintOverlap(void* ovlp, Option_t* option = """"). void PrintOverlaps() const. void PaintVolume(TGeoVolume* vol, Option_t* option = """", TGeoMatrix* global = 0). void RandomPoints(const TGeoVolume* vol, Int_t npoints, Option_t* option = """"). void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char* target_vol, Bool_t check_norm). void Raytrace(Option_t* option = """"). TGeoNode * SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil, const char* g3path). void SetBombFactors(Double_t bombx = 1.3, Double_t bomby = 1.3, Double_t bombz = 1.3, Double_t bombr = 1.3). void SetExplodedView(Int_t iopt = 0). void SetGeoManager(TGeoManager* geom). void SetIteratorPlugin(TGeoIteratorPlugin* plugin). void SetCheckedNode(TGeoNode* node). void SetNsegments(Int_t nseg = 20). void SetNmeshPoints(Int_t npoints). void SetRaytracing(Bool_t flag = kTRUE). void SetTopVisible(Bool_t vis = kTRUE). void SetTopVolume(TGeoVolume* vol). void SetVisLevel(Int_t level = 3). void SetVisOption(Int_t option = 0). Int_t ShapeDistancetoPrimitive(const TGeoShape* shape, Int_t numpoints, Int_t px, Int_t py) const. void Test(Int_t npoints, Option_t* option). void TestOverlaps(const char* path). Bool_t TestVoxels(TGeoVolume* vol). void UnbombTranslation(const Double_t* tr, Double_t* bombtr). Double_t Weight(Double_t precision, Option_t* option = ""v""). » Author: Andrei Gheata 11/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVirtualGeoPainter.html:16069,plugin,plugin,16069,root/html604/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html604/TVirtualGeoPainter.html,1,['plugin'],['plugin']
Modifiability,"har* opname, Long64_t current, Long64_t size, TStopwatch* watch = 0, Bool_t last = kFALSE, Bool_t refresh = kFALSE, const char* msg = """"). void Paint(Option_t* option = """"). void PaintNode(TGeoNode* node, Option_t* option = """", TGeoMatrix* global = 0). void PaintShape(TGeoShape* shape, Option_t* option = """"). void PaintOverlap(void* ovlp, Option_t* option = """"). void PrintOverlaps() const. void PaintVolume(TGeoVolume* vol, Option_t* option = """", TGeoMatrix* global = 0). void RandomPoints(const TGeoVolume* vol, Int_t npoints, Option_t* option = """"). void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char* target_vol, Bool_t check_norm). void Raytrace(Option_t* option = """"). TGeoNode * SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil, const char* g3path). void SetBombFactors(Double_t bombx = 1.3, Double_t bomby = 1.3, Double_t bombz = 1.3, Double_t bombr = 1.3). void SetExplodedView(Int_t iopt = 0). void SetGeoManager(TGeoManager* geom). void SetIteratorPlugin(TGeoIteratorPlugin* plugin). void SetCheckedNode(TGeoNode* node). void SetNsegments(Int_t nseg = 20). void SetNmeshPoints(Int_t npoints). void SetRaytracing(Bool_t flag = kTRUE). void SetTopVisible(Bool_t vis = kTRUE). void SetTopVolume(TGeoVolume* vol). void SetVisLevel(Int_t level = 3). void SetVisOption(Int_t option = 0). Int_t ShapeDistancetoPrimitive(const TGeoShape* shape, Int_t numpoints, Int_t px, Int_t py) const. void Test(Int_t npoints, Option_t* option). void TestOverlaps(const char* path). Bool_t TestVoxels(TGeoVolume* vol). void UnbombTranslation(const Double_t* tr, Double_t* bombtr). Double_t Weight(Double_t precision, Option_t* option = ""v""). » Author: Andrei Gheata 11/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualGeoPainter.html:16069,plugin,plugin,16069,root/html602/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html602/TVirtualGeoPainter.html,1,['plugin'],['plugin']
Modifiability,"har* path); static intUnixUnixService(int port, int backlog); static intUnixUnixService(const char* sockpath, int backlog); static intUnixWaitchild(). Data Members; public:. enum TSystem::EAclicMode { kDefault; kDebug; kOpt; };; enum TSystem::EAclicProperties { kFlatBuildDir; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSystem::EAclicModeTSystem::fAclicModeWhether the compilation should be done debug or opt; Int_tTSystem::fAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tTSystem::fBeepDurationUsed by Beep(); Int_tTSystem::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:17375,config,configure,17375,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,1,['config'],['configure']
Modifiability,"har* path); static intUnixUnixService(int port, int backlog); static intUnixUnixService(const char* sockpath, int backlog); static intUnixWaitchild(). Data Members; public:. enum TSystem::EAclicMode { kDefault; kDebug; kOpt; };; enum TSystem::EAclicProperties { kFlatBuildDir; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSystem::EAclicModeTSystem::fAclicModeWhether the compilation should be done debug or opt; Int_tTSystem::fAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tTSystem::fBeepDurationUsed by Beep(); Int_tTSystem::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); TStringTSystem::fLastErrorStringLast system error message; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:17043,config,configure,17043,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,3,['config'],['configure']
Modifiability,"har* regexp, const char* className, const char* pluginName, const char* ctor = 0, const char* origin = 0); Add plugin handler to the list of handlers. If there is already a; handler defined for the same base and regexp it will be replaced. void RemoveHandler(const char* base, const char* regexp = 0); Remove handler for the specified base class and the specified; regexp. If regexp=0 remove all handlers for the specified base. TPluginHandler * FindHandler(const char* base, const char* uri = 0); Returns the handler if there exists a handler for the specified URI.; The uri can be 0 in which case the first matching plugin handler; will be returned. Returns 0 in case handler is not found. void Print(Option_t* opt = """") const; Print list of registered plugin handlers. If option is ""a"" print; also the ctor's that will be used. Int_t WritePluginMacros(const char* dir, const char* plugin = 0) const; Write in the specified directory the plugin macros. If plugin is specified; and if it is a base class all macros for that base will be written. If it; is a plugin class name, only that one macro will be written. If plugin; is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise. Int_t WritePluginRecords(const char* envFile, const char* plugin = 0) const; Write in the specified environment config file the plugin records. If; plugin is specified and if it is a base class all records for that; base will be written. If it is a plugin class name, only that one; record will be written. If plugin is 0 all macros are written.; If envFile is 0 or """" the records are written to stdout.; Returns -1 if envFile cannot be created or opened, 0 otherwise. TPluginHandler& operator=(const TPluginManager& pm). TPluginManager(const TPluginManager& pm). TPluginManager(); { }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPluginManager.html:11802,plugin,plugin,11802,root/html534/TPluginManager.html,https://root.cern,https://root.cern/root/html534/TPluginManager.html,1,['plugin'],['plugin']
Modifiability,"har* regexp, const char* className, const char* pluginName, const char* ctor = 0, const char* origin = 0); Add plugin handler to the list of handlers. If there is already a; handler defined for the same base and regexp it will be replaced. void RemoveHandler(const char* base, const char* regexp = 0); Remove handler for the specified base class and the specified; regexp. If regexp=0 remove all handlers for the specified base. TPluginHandler * FindHandler(const char* base, const char* uri = 0); Returns the handler if there exists a handler for the specified URI.; The uri can be 0 in which case the first matching plugin handler; will be returned. Returns 0 in case handler is not found. void Print(Option_t* opt = """") const; Print list of registered plugin handlers. If option is ""a"" print; also the ctor's that will be used. Int_t WritePluginMacros(const char* dir, const char* plugin = 0) const; Write in the specified directory the plugin macros. If plugin is specified; and if it is a base class all macros for that base will be written. If it; is a plugin class name, only that one macro will be written. If plugin; is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise. Int_t WritePluginRecords(const char* envFile, const char* plugin = 0) const; Write in the specified environment config file the plugin records. If; plugin is specified and if it is a base class all records for that; base will be written. If it is a plugin class name, only that one; record will be written. If plugin is 0 all macros are written.; If envFile is 0 or """" the records are written to stdout.; Returns -1 if envFile cannot be created or opened, 0 otherwise. TPluginHandler& operator=(const TPluginManager& pm). TPluginManager(const TPluginManager& pm). TPluginManager(); { }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:27; This page has been automatically generated. For",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPluginManager.html:12263,plugin,plugin,12263,root/html604/TPluginManager.html,https://root.cern,https://root.cern/root/html604/TPluginManager.html,1,['plugin'],['plugin']
Modifiability,"har* regexp, const char* className, const char* pluginName, const char* ctor = 0, const char* origin = 0); Add plugin handler to the list of handlers. If there is already a; handler defined for the same base and regexp it will be replaced. void RemoveHandler(const char* base, const char* regexp = 0); Remove handler for the specified base class and the specified; regexp. If regexp=0 remove all handlers for the specified base. TPluginHandler * FindHandler(const char* base, const char* uri = 0); Returns the handler if there exists a handler for the specified URI.; The uri can be 0 in which case the first matching plugin handler; will be returned. Returns 0 in case handler is not found. void Print(Option_t* opt = """") const; Print list of registered plugin handlers. If option is ""a"" print; also the ctor's that will be used. Int_t WritePluginMacros(const char* dir, const char* plugin = 0) const; Write in the specified directory the plugin macros. If plugin is specified; and if it is a base class all macros for that base will be written. If it; is a plugin class name, only that one macro will be written. If plugin; is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise. Int_t WritePluginRecords(const char* envFile, const char* plugin = 0) const; Write in the specified environment config file the plugin records. If; plugin is specified and if it is a base class all records for that; base will be written. If it is a plugin class name, only that one; record will be written. If plugin is 0 all macros are written.; If envFile is 0 or """" the records are written to stdout.; Returns -1 if envFile cannot be created or opened, 0 otherwise. TPluginHandler& operator=(const TPluginManager& pm). TPluginManager(const TPluginManager& pm). TPluginManager(); { }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:25; This page has been automatically generated. For",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPluginManager.html:12263,plugin,plugin,12263,root/html602/TPluginManager.html,https://root.cern,https://root.cern/root/html602/TPluginManager.html,1,['plugin'],['plugin']
Modifiability,"har* regexp, const char* className, const char* pluginName, const char* ctor = 0, const char* origin = 0); Add plugin handler to the list of handlers. If there is already a; handler defined for the same base and regexp it will be replaced. void RemoveHandler(const char* base, const char* regexp = 0); Remove handler for the specified base class and the specified; regexp. If regexp=0 remove all handlers for the specified base. TPluginHandler * FindHandler(const char* base, const char* uri = 0); Returns the handler if there exists a handler for the specified URI.; The uri can be 0 in which case the first matching plugin handler; will be returned. Returns 0 in case handler is not found. void Print(Option_t* opt = """") const; Print list of registered plugin handlers. If option is ""a"" print; also the ctor's that will be used. Int_t WritePluginMacros(const char* dir, const char* plugin = 0) const; Write in the specified directory the plugin macros. If plugin is specified; and if it is a base class all macros for that base will be written. If it; is a plugin class name, only that one macro will be written. If plugin; is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise. Int_t WritePluginRecords(const char* envFile, const char* plugin = 0) const; Write in the specified environment config file the plugin records. If; plugin is specified and if it is a base class all records for that; base will be written. If it is a plugin class name, only that one; record will be written. If plugin is 0 all macros are written.; If envFile is 0 or """" the records are written to stdout.; Returns -1 if envFile cannot be created or opened, 0 otherwise. TPluginHandler& operator=(const TPluginManager& pm). TPluginManager(const TPluginManager& pm). TPluginManager(); { }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TPluginManager.h 37497 2010-12-10 12:22:54Z rdm $ » Last generated: 2010-12-10 14:3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPluginManager.html:11714,plugin,plugin,11714,root/html528/TPluginManager.html,https://root.cern,https://root.cern/root/html528/TPluginManager.html,1,['plugin'],['plugin']
Modifiability,"har* regexp, const char* className, const char* pluginName, const char* ctor = 0, const char* origin = 0); Add plugin handler to the list of handlers. If there is already a; handler defined for the same base and regexp it will be replaced. void RemoveHandler(const char* base, const char* regexp = 0); Remove handler for the specified base class and the specified; regexp. If regexp=0 remove all handlers for the specified base. TPluginHandler * FindHandler(const char* base, const char* uri = 0); Returns the handler if there exists a handler for the specified URI.; The uri can be 0 in which case the first matching plugin handler; will be returned. Returns 0 in case handler is not found. void Print(Option_t* opt = """") const; Print list of registered plugin handlers. If option is ""a"" print; also the ctor's that will be used. Int_t WritePluginMacros(const char* dir, const char* plugin = 0) const; Write in the specified directory the plugin macros. If plugin is specified; and if it is a base class all macros for that base will be written. If it; is a plugin class name, only that one macro will be written. If plugin; is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise. Int_t WritePluginRecords(const char* envFile, const char* plugin = 0) const; Write in the specified environment config file the plugin records. If; plugin is specified and if it is a base class all records for that; base will be written. If it is a plugin class name, only that one; record will be written. If plugin is 0 all macros are written.; If envFile is 0 or """" the records are written to stdout.; Returns -1 if envFile cannot be created or opened, 0 otherwise. TPluginHandler& operator=(const TPluginManager& pm). TPluginManager(const TPluginManager& pm). TPluginManager(); { }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TPluginManager.h 37497 2010-12-10 12:22:54Z rdm $ » Last generated: 2011-07-04 15:3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPluginManager.html:11783,plugin,plugin,11783,root/html530/TPluginManager.html,https://root.cern,https://root.cern/root/html530/TPluginManager.html,1,['plugin'],['plugin']
Modifiability,"har* regexp, const char* className, const char* pluginName, const char* ctor = 0, const char* origin = 0); Add plugin handler to the list of handlers. If there is already a; handler defined for the same base and regexp it will be replaced. void RemoveHandler(const char* base, const char* regexp = 0); Remove handler for the specified base class and the specified; regexp. If regexp=0 remove all handlers for the specified base. TPluginHandler * FindHandler(const char* base, const char* uri = 0); Returns the handler if there exists a handler for the specified URI.; The uri can be 0 in which case the first matching plugin handler; will be returned. Returns 0 in case handler is not found. void Print(Option_t* opt = """") const; Print list of registered plugin handlers. If option is ""a"" print; also the ctor's that will be used. Int_t WritePluginMacros(const char* dir, const char* plugin = 0) const; Write in the specified directory the plugin macros. If plugin is specified; and if it is a base class all macros for that base will be written. If it; is a plugin class name, only that one macro will be written. If plugin; is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise. Int_t WritePluginRecords(const char* envFile, const char* plugin = 0) const; Write in the specified environment config file the plugin records. If; plugin is specified and if it is a base class all records for that; base will be written. If it is a plugin class name, only that one; record will be written. If plugin is 0 all macros are written.; If envFile is 0 or """" the records are written to stdout.; Returns -1 if envFile cannot be created or opened, 0 otherwise. TPluginHandler& operator=(const TPluginManager& pm). TPluginManager(const TPluginManager& pm). TPluginManager(); { }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TPluginManager.h 37497 2010-12-10 12:22:54Z rdm $ » Last generated: 2011-11-03 20:2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPluginManager.html:11783,plugin,plugin,11783,root/html532/TPluginManager.html,https://root.cern,https://root.cern/root/html532/TPluginManager.html,1,['plugin'],['plugin']
Modifiability,"har* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofMgr.h 30171 2009-09-15 13:43:12Z ganis $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofMgr.html:15848,sandbox,sandbox,15848,root/html528/TXProofMgr.html,https://root.cern,https://root.cern/root/html528/TXProofMgr.html,2,['sandbox'],['sandbox']
Modifiability,"har* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofMgr.h 38580 2011-03-23 15:24:54Z ganis $ » Last generated: 2011-07-04 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofMgr.html:16182,sandbox,sandbox,16182,root/html530/TXProofMgr.html,https://root.cern,https://root.cern/root/html530/TXProofMgr.html,2,['sandbox'],['sandbox']
Modifiability,"har* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofMgr.h 38580 2011-03-23 15:24:54Z ganis $ » Last generated: 2011-12-02 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXProofMgr.html:16254,sandbox,sandbox,16254,root/html532/TXProofMgr.html,https://root.cern,https://root.cern/root/html532/TXProofMgr.html,2,['sandbox'],['sandbox']
Modifiability,"har> >& out, Option_t* option = """"); virtual Bool_tselfNormalized() const; TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCdfBoundaries(Bool_t flag); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidsetInterpolationOrder(Int_t order); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); voidRooAbsPdf::setNormValueCaching(Int_t minNumIntDim, Int_t ipOrder = 2); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsPdf::setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooHistPdf.html:27647,config,config,27647,root/html528/RooHistPdf.html,https://root.cern,https://root.cern/root/html528/RooHistPdf.html,1,['config'],['config']
Modifiability,"har_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsSelfCachedReal(); Destructor. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Fill cache with sampling of function as defined by the evaluate() implementation. RooArgSet* actualObservables(const RooArgSet& nset) const; Defines observables to be cached, given a set of user defined observables; Returns the subset of nset that are observables this p.d.f. RooArgSet* actualParameters(const RooArgSet& nset) const; Defines parameters on which cache contents depends. Returns; subset of variables of self that is not contained in the; supplied nset. const char* inputBaseName() const; Use own name as base name for caches. » Last changed: Mon Jul 4 15:21:31 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsSelfCachedReal.html:35219,variab,variables,35219,root/html530/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html530/RooAbsSelfCachedReal.html,1,['variab'],['variables']
Modifiability,"har_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsSelfCachedReal(); Destructor. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Fill cache with sampling of function as defined by the evaluate() implementation. RooArgSet* actualObservables(const RooArgSet& nset) const; Defines observables to be cached, given a set of user defined observables; Returns the subset of nset that are observables this p.d.f. RooArgSet* actualParameters(const RooArgSet& nset) const; Defines parameters on which cache contents depends. Returns; subset of variables of self that is not contained in the; supplied nset. const char* inputBaseName() const; Use own name as base name for caches. » Last changed: Thu Nov 3 20:06:50 2011 » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedReal.html:35598,variab,variables,35598,root/html532/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedReal.html,1,['variab'],['variables']
Modifiability,"har_tTEveElement::fChangeBits!; TClass*TEveElementList::fChildClassClass of acceptable children, others are rejected.; list<TEveElement*>TEveElement::fChildrenList of children.; Color_tTEveElementList::fColorColor of the object.; TEveCompound*TEveElement::fCompoundCompound this object belongs to.; Int_tTEveElement::fDenyDestroy! Deny-destroy count.; Float_tTEveProjected::fDepthz coordinate; Bool_tTEveElement::fDestroyOnZeroRefCntAuto-destruct when ref-count reaches zero.; Bool_tTEveElement::fDestructing!; Bool_tTEveElement::fHighlighted!; Short_tTEveElement::fImpliedHighlighted!; Short_tTEveElement::fImpliedSelected!; set<TEveElement::TEveListTreeInfo,less<TEveElement::TEveListTreeInfo>,allocator<TEveElement::TEveListTreeInfo> >TEveElement::fItems! Set of list-tree-items.; Float_tTEveTrackList::fLimPHighest track p in the container.; Float_tTEveTrackList::fLimPtHighest track pT in the container.; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; TEveProjectionManager*TEveProjected::fManagermanager; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Float_tTEveTrackList::fMaxPMaximum track p for display selection.; Float_tTEveTrackList::fMaxPtMaximum track pT for display selection.; Float_tTEveTrackList::fMinPMinimum track p for display selection.; Float_tTEveTrackList::fMinPtMinimum track pT for display selection.; TStringTNamed::fNameobject identifier; Int_tTEveElement::fNumChildren!; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; TEveProjectable*TEveProjected::fProjectablelink to ori",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackListProjected.html:22063,variab,variable,22063,root/html528/TEveTrackListProjected.html,https://root.cern,https://root.cern/root/html528/TEveTrackListProjected.html,1,['variab'],['variable']
Modifiability,"har_traits<char> >& out, Option_t* option = """"); virtual voidselectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); virtual Bool_tselfNormalized() const; TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetDefNormSet(const RooArgSet& nset); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); voidRooAbsPdf::setNormValueCaching(Int_t minNumIntDim, Int_t ipOrder = 2); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidsetSelfNormalized(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsPdf::setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:28981,config,config,28981,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,1,['config'],['config']
Modifiability,"haracter string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure:; make pseudoexperiments based on random values from the parent; distribution and compare the KS distance of the pseudoexperiment; to the parent distribution. Bin the KS distances in a histogram,; and then take the integral of all the KS values above the value; obtained from the original data to Monte Carlo distribution.; The number of pseudo-experiments nEXPT is currently fixed at 1000.; The function returns the integral.; (thanks to Ben Kilminster to submit this procedure). Note that; this option ""X"" is much slower. The returned function value is the probability of test; (much less than one means NOT compatible). Code adapted by Rene Brun from original HBOOK routine HDIFF. NOTE1; A good description of the Kolmogorov test can be seen at:; http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm. NOTE2; see also alternative function TH1::Chi2Test; The Kolmogorov test is assumed to give better results than Chi2Test; in case of histograms with low statistics. NOTE3 (Jan Conrad, Fred James); ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; depending on ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:108418,adapt,adapted,108418,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['adapt'],['adapted']
Modifiability,"hared_ptr< const RooFitResult > fLbound_cfit;  ; std::shared_ptr< const RooFitResult > fNull_cfit;  ; xRooFit::Asymptotics::PLLType fPllType = xRooFit::Asymptotics::Unknown;  ; std::shared_ptr< const RooFitResult > fUfit;  ; std::shared_ptr< RooStats::HypoTestResult > hypoTestResult = nullptr;  ; bool isExpected = false;  ; std::shared_ptr< xRooNLLVar > nllVar = nullptr;  ; std::vector< std::tuple< int, double, double > > nullToys;  . Static Public Attributes; static std::set< int > allowedStatusCodes = {0};  . Private Member Functions; size_t addToys (bool alt, int nToys, int initialSeed=0, double target=std::numeric_limits< double >::quiet_NaN(), double target_nSigma=std::numeric_limits< double >::quiet_NaN(), bool targetCLs=false, double relErrThreshold=2., size_t maxToys=10000);  ; xValueWithError pX_toys (bool alt, double nSigma=std::numeric_limits< double >::quiet_NaN());  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:12689,inherit,inherited,12689,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,1,['inherit'],['inherited']
Modifiability,"harge; //Charge of this track; Float_t fVertex[3]; //Track vertex position; Int_t fNpoint; //Number of points for this track; Short_t fValid; //Validity criterion. // method definitions ...; ClassDef(Track,1) //A track segment; };; 12.17.4 Writing the Tree; We create a simple tree with two branches both holding Event objects. One is split and the other is not. We also create a pointer to an Event object (event).; void tree4w() {; // check to see if the event class is in the dictionary; // if it is not load the definition in libEvent.so; if (!TClassTable::GetDict(""Event"")) {; gSystem->Load(""$ROOTSYS/test/libEvent.so"");; }; // create a Tree file tree4.root; TFile f(""tree4.root"",""RECREATE"");; // create a ROOT Tree; TTree t4(""t4"",""A Tree with Events"");; // create a pointer to an Event object; Event *event = new Event();; // create two branches, split one; t4.Branch(""event_branch"", ""Event"", &event,16000,2);; t4.Branch(""event_not_split"", ""Event"", &event,16000,0);. // a local variable for the event type; char etype[20];. // fill the tree; for (Int_t ev = 0; ev <100; ev++) {; Float_t sigmat, sigmas;; gRandom->Rannor(sigmat,sigmas);; Int_t ntrack = Int_t(600 + 600 *sigmat/120.);; Float_t random = gRandom->Rndm(1);; sprintf(etype,""type%d"",ev%5);; event->SetType(etype);; event->SetHeader(ev, 200, 960312, random);; event->SetNseg(Int_t(10*ntrack+20*sigmas));; event->SetNvertex(Int_t(1+20*gRandom->Rndm()));; event->SetFlag(UInt_t(random+0.5));; event->SetTemperature(random+20.);; for(UChar_t m = 0; m < 10; m++) {; event->SetMeasure(m, Int_t(gRandom->Gaus(m,m+1)));; }; // continued...; // fill the matrix; for(UChar_t i0 = 0; i0 < 4; i0++) {; for(UChar_t i1 = 0; i1 < 4; i1++) {; event->SetMatrix(i0,i1,gRandom->Gaus(i0*i1,1));; }; }; // create and fill the Track objects; for (Int_t t = 0; t < ntrack; t++) event->AddTrack(random);; t4.Fill(); // Fill the tree; event->Clear(); // Clear before reloading event; }; f.Write(); // Write the file header; t4.Print(); // Print the tree conten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:579293,variab,variable,579293,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['variab'],['variable']
Modifiability,"has been recognized, return the action parameter.; -; -. Double_t Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; Evaluate this formula*-*-*-*-*-*-; *-* =====================; -; *-* The current value of variables x,y,z,t is passed through x, y, z and t.; *-* The parameters used will be the ones in the array params if params is given; *-* otherwise parameters will be taken from the stored data members fParams; -; -. Double_t EvalParOld(const Double_t* x, const Double_t* params = 0); Evaluate this formula*-*-*-*-*-*-; *-* =====================; -; *-* The current value of variables x,y,z,t is passed through the pointer x.; *-* The parameters used will be the ones in the array params if params is given; *-* otherwise parameters will be taken from the stored data members fParams. /*. */. -; -; -. TString GetExpFormula(Option_t* option = """") const; Reconstruct the formula expression from*-*-; *-* the internal TFormula member variables; *-* =======================================; -; *-* This function uses the internal member variables of TFormula to; *-* construct the mathematical expression associated with the TFormula; *-* instance. This function can be used to get an expanded version of the; *-* expression originally assigned to the TFormula instance, i.e. that; *-* the string returned by GetExpFormula() doesn't depend on other; *-* TFormula object names.; -; *-* if option contains ""p"" the returned string will contain the formula; *-* expression with symbolic parameters, eg [0] replaced by the actual value; *-* of the parameter. Example:; *-* if expression in formula is: ""[0]*(x>-[1])+[2]*exp(-[3]*x)""; *-* and parameters are 3.25,-4.01,4.44,-0.04, GetExpFormula(""p"") will return:; *-* ""(3.25*(x>+4.01))+(4.44*exp(+0.04*x))"". const TObject* GetLinearPart(Int_t i); Return linear part. Double_t GetParameter(Int_t ipar) const; return value of parameter number ipar. Double_t GetParameter(const char* name) const; return value of parameter named parNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFormula.html:26679,variab,variables,26679,root/html528/TFormula.html,https://root.cern,https://root.cern/root/html528/TFormula.html,6,['variab'],['variables']
Modifiability,"has not been specified.; 922 ; 923 TConfNoFactor *conf = (TConfNoFactor *)config;; 924 Int_t nbits = conf->fNbits;; 925 ; 926 buf.ReadWithNbits( (T*)( ((char*)addr) + config->fOffset ), nbits );; 927 return 0;; 928 }; 929 ; 930 INLINE_TEMPLATE_ARGS Int_t ReadTString(TBuffer &buf, void *addr, const TConfiguration *config); 931 {; 932 // Read in a TString object.; 933 ; 934 // Idea: We could separate the TString Streamer in its two parts and; 935 // avoid the if (buf.IsReading()) and try having it inlined.; 936 ((TString*)(((char*)addr)+config->fOffset))->TString::Streamer(buf);; 937 return 0;; 938 }; 939 ; 940 INLINE_TEMPLATE_ARGS Int_t ReadTObject(TBuffer &buf, void *addr, const TConfiguration *config); 941 {; 942 // Read in a TObject object part.; 943 ; 944 // Idea: We could separate the TObject Streamer in its two parts and; 945 // avoid the if (buf.IsReading()).; 946 ((TObject*)(((char*)addr)+config->fOffset))->TObject::Streamer(buf);; 947 return 0;; 948 }; 949 ; 950 INLINE_TEMPLATE_ARGS Int_t ReadTNamed(TBuffer &buf, void *addr, const TConfiguration *config); 951 {; 952 // Read in a TNamed object part.; 953 // Since the TNamed streamer is solely delegating back to the StreamerInfo we; 954 // can skip the streamer.; 955 ; 956 // Idea: We could extract the code from ReadClassBuffer and avoid one function; 957 // code.; 958 static const TClass *TNamed_cl = TNamed::Class();; 959 return buf.ReadClassBuffer(TNamed_cl,(((char*)addr)+config->fOffset));; 960 }; 961 ; 962 class TConfigSTL : public TConfiguration {; 963 // Configuration object for the kSTL case; 964 private:; 965 void Init() {; 966 TVirtualCollectionProxy *proxy = fNewClass->GetCollectionProxy();; 967 if (proxy) {; 968 fCreateIterators = proxy->GetFunctionCreateIterators();; 969 fCreateWriteIterators = proxy->GetFunctionCreateIterators(kFALSE);; 970 fCopyIterator = proxy->GetFunctionCopyIterator();; 971 fDeleteIterator = proxy->GetFunctionDeleteIterator();; 972 fDeleteTwoIterators = proxy->GetFunctionDelet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:38448,config,config,38448,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,2,['config'],['config']
Modifiability,"has the form var[... (and does not match the previous 2 cases) return countval = -1 and null pointer;; Otherwise return countval = 1 and a null pointer. . Definition at line 249 of file TLeaf.cxx. ◆ GetLeafCountValues(). const TLeaf::Counts_t * TLeaf::GetLeafCountValues ; (; Long64_t ; start, . Long64_t ; len . ). virtual . If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ; Definition at line 364 of file TLeaf.cxx. ◆ GetLen(). Int_t TLeaf::GetLen ; (; ); const. virtual . Return the number of effective elements of this leaf, for the current entry. ; Reimplemented in TLeafElement.; Definition at line 404 of file TLeaf.cxx. ◆ GetLenStatic(). virtual Int_t TLeaf::GetLenStatic ; (; ); const. inlinevirtual . Return the fixed length of this leaf. ; If the leaf stores a fixed-length array, this is the size of the array. If the leaf stores a non-array or a variable-sized array, this method returns 1. If the leaf stores an array with 2 or more dimensions, this method returns the total number of elements in the dimensions with static length: for example for float[3][2][] it would return 6. ; Definition at line 132 of file TLeaf.h. ◆ GetLenType(). virtual Int_t TLeaf::GetLenType ; (; ); const. inlinevirtual . Definition at line 133 of file TLeaf.h. ◆ GetMaximum(). virtual Int_t TLeaf::GetMaximum ; (; ); const. inlinevirtual . Reimplemented in TLeafB, TLeafC, TLeafElement, TLeafG, TLeafI, TLeafL, TLeafO, and TLeafS.; Definition at line 134 of file TLeaf.h. ◆ GetMinimum(). virtual Int_t TLeaf::GetMinimum ; (; ); const. inlinevirtual . Reimplemented in TLeafB, TLeafC, TLeafG, TLeafI, TLeafL, TLeafO, and TLeafS.; Definition at line 135 of file TLeaf.h. ◆ GetNdata(). virtual Int_t TLeaf::GetNdata ; (; ); const. inlinevirtual . Reimplemented in TLeafElement.; Definition at line 136 of file TLeaf.h. ◆ GetOffset(). virtual Int_t TLeaf::GetOffset ; (; )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeaf.html:22353,variab,variable-sized,22353,doc/master/classTLeaf.html,https://root.cern,https://root.cern/doc/master/classTLeaf.html,1,['variab'],['variable-sized']
Modifiability,"hase in which we need fTrainInfo. protected:. Bool_tfCutTypetrue: if event variable > cutValue ==> signal , false otherwise; Float_tfCutValuecut value appplied on this node to discriminate bkg against sig; UInt_tTMVA::Node::fDepthdepth of the node within the tree (seen from root node); vector<Double_t>fFisherCoeffthe fisher coeff (offset at the last element); Bool_tfIsTerminalNode! flag to set node as terminal (i.e., without deleting its descendants); TMVA::Node*TMVA::Node::fLeftpointers to the two ""daughter"" nodes; Int_tfNodeTypeType of node: -1 == Bkg-leaf, 1 == Signal-leaf, 0 = internal; TMVA::Node*TMVA::Node::fParentthe previous (parent) node; TMVA::BinaryTree*TMVA::Node::fParentTreepointer to the parent tree to which the Node belongs ; charTMVA::Node::fPosposition, i.e. it is a left (l) or right (r) daughter ; Float_tfPuritythe node purity; Float_tfRMSresponse RMS of the regression node; Float_tfResponseresponse value in case of regression; TMVA::Node*TMVA::Node::fRightpointers to the two ""daughter"" nodes; Short_tfSelectorindex of variable used in node selection (decision tree); TMVA::DTNodeTrainingInfo*fTrainInfo; static TMVA::MsgLogger*fgLoggerstatic because there is a huge number of nodes... Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DecisionTreeNode(); constructor of an essentially ""empty"" node floating in space. DecisionTreeNode(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. DecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = NULL); copy constructor of a node. It will result in an explicit copy of; the node and recursively all it's daughters. ~DecisionTreeNode(); destructor. Bool_t GoesRight(const TMVA::Event& ) const; test event if it decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. void SetPurity( void ); return the S/(S+B) (purity) for the node; RE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__DecisionTreeNode.html:5791,variab,variable,5791,root/html530/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html530/TMVA__DecisionTreeNode.html,2,['variab'],['variable']
Modifiability,"hat are valid but not in; the current computing group. Int_t GetNumberOfUniqueSlaves() const; Return number of unique slaves, i.e. active slaves that have each a; unique different user files system. Int_t GetNumberOfBadSlaves() const; Return number of bad slaves. This are slaves that we in the config; file, but refused to startup or that died during the PROOF session. void AskStatistics(); Ask the for the statistics of the slaves. void GetStatistics(Bool_t verbose = kFALSE); Get statistics about CPU time, real time and bytes read.; If verbose, print the resuls (always available via GetCpuTime(), GetRealTime(); and GetBytesRead(). void AskParallel(); Ask the for the number of parallel slaves. TList * GetListOfQueries(Option_t* opt = """"); Ask the master for the list of queries. Int_t GetNumberOfQueries(); Number of queries processed by this session. void SetMaxDrawQueries(Int_t max); Set max number of draw queries whose results are saved. void GetMaxQueries(); Get max number of queries whose full results are kept in the; remote sandbox. TList * GetQueryResults(); Return pointer to the list of query results in the player. TQueryResult * GetQueryResult(const char* ref = 0); Return pointer to the full TQueryResult instance owned by the player; and referenced by 'ref'. If ref = 0 or """", return the last query result. void ShowQueries(Option_t* opt = """"); Ask the master for the list of queries.; Options:; ""A"" show information about all the queries known to the; server, i.e. even those processed by other sessions; ""L"" show only information about queries locally available; i.e. already retrieved. If ""L"" is specified, ""A"" is; ignored.; ""F"" show all details available about queries; ""H"" print help menu; Default """". Bool_t IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); See if the data is ready to be analyzed. void Interrupt(TProof::EUrgent type, TProof::ESlaves list = kActive); Send interrupt to master or slave servers. Int_t GetParallel() const; Returns number of slave",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:36978,sandbox,sandbox,36978,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['sandbox'],['sandbox']
Modifiability,"hat don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (const Text_t *key) const;  Get string attribute mapped under key 'key'. ;  ; bool getTransientAttribute (const Text_t *name) const;  Check if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html:24341,variab,variables,24341,doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,1,['variab'],['variables']
Modifiability,"hat matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet_ownedClonedModelSetOwning set of cloned model components; RooArgSet_ownedClonedPdfSetOwning set of cloned PDF components; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Bool_t_useWindowSwitch to activate window convolution; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; Int_t_verboseThreshCall count threshold for verbose printing; RooListProxy_windowParamHolder for optional convolution integration window scaling parameter; Double_t_windowScaleScale factor for window parameter; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvolution.html:39917,config,configuration,39917,root/html602/RooNumConvolution.html,https://root.cern,https://root.cern/root/html602/RooNumConvolution.html,2,['config'],['configuration']
Modifiability,"hat point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; TArrayD fBinEntries;  Number of entries per bin. ;  ; TArrayD fBinSumw2;  Array of sum of squares of weights per bin. ;  ; EErrorType fErrorMode;  Option to compute errors. ;  ; Bool_t fScaling;  ! True when TProfile2D::Scale is called ;  ; Double_t fTsumwz;  Total Sum of weight*Z. ;  ; Double_t fTsumwz2;  Total Sum of weight*Z*Z. ;  ; Double_t fZmax;  Upper limit in Z (if set) ;  ; Double_t fZmin;  Lower limit in Z (if set) ;  ;  Protected Attributes inherited from TH2; Double_t fScalefactor;  Scale factor. ;  ; Double_t fTsumwxy;  Total Sum of weight*X*Y. ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:59849,inherit,inherited,59849,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['inherit'],['inherited']
Modifiability,"hat point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; TArrayD fBinEntries;  Number of entries per bin. ;  ; TArrayD fBinSumw2;  Array of sum of squares of weights per bin. ;  ; EErrorType fErrorMode;  Option to compute errors. ;  ; Bool_t fScaling;  ! True when TProfile3D::Scale is called ;  ; Double_t fTmax;  Upper limit in T (if set) ;  ; Double_t fTmin;  Lower limit in T (if set) ;  ; Double_t fTsumwt;  Total Sum of weight*T. ;  ; Double_t fTsumwt2;  Total Sum of weight*T*T. ;  ;  Protected Attributes inherited from TH3; Double_t fTsumwxy;  Total Sum of weight*X*Y. ;  ; Double_t fTsumwxz;  Total Sum of weight*X*Z. ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ; Double_t fTsumwyz;  Total Sum of weight*Y*Z. ;  ; Double_t fTsumwz;  Total Sum of weight*Z. ;  ; Double_t fTsumwz2;  Total Sum of weight*Z*Z. ;  ;  Protected Attri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:58856,inherit,inherited,58856,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['inherit'],['inherited']
Modifiability,"hat point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; TArrayD fBinEntries;  number of entries per bin ;  ; TArrayD fBinSumw2;  Array of sum of squares of weights per bin. ;  ; EErrorType fErrorMode;  Option to compute errors. ;  ; Bool_t fScaling;  ! True when TProfile::Scale is called ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ; Double_t fYmax;  Upper limit in Y (if set) ;  ; Double_t fYmin;  Lower limit in Y (if set) ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:50282,inherit,inherited,50282,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['inherit'],['inherited']
Modifiability,"hat represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ; This is used to build the computation graph for the final likelihood. ; Reimplemented from RooAbsPdf.; Definition at line 140 of file RooExtendPdf.cxx. ◆ DeclFileName(). static const char * RooExtendPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file RooExtendPdf.h. ◆ evaluate(). double RooExtendPdf::evaluate ; (; ); const. inlineoverridevirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 34 of file RooExtendPdf.h. ◆ expectedEvents(). double RooExtendPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return the number of expected events over the full range of all variables. ; norm, the variable set as normalisation constant in the constructor, will yield the number of events in the range set in the constructor. That is, the function returns ; \[; N = \mathrm{norm} \; \cdot \; \frac{\int_{(x_F,y_F)} \mathrm{pdf}(x,y) }{\int_{(x_C,y_F)} \mathrm{pdf}(x,y)}; \]. Where \( x \) is the set of dependents with a restricted range (defined by rangeName in the constructor), and \( y \) are the other dependents. \( x_C \) is the integration of \( x \) over the restricted range, and \( x_F \) is the integration of \( x \) over the full range. norm is the number of events given as parameter to the constructor.; If the nested PDF can be extended, \( N \) is further scaled by its expected number of events. ; Reimplemented from RooAbsPdf.; Definition at line 108 of file RooExtendPdf.cxx. ◆ extendMode(). ExtendMode RooExtendPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendPdf.html:77579,variab,variable,77579,doc/master/classRooExtendPdf.html,https://root.cern,https://root.cern/doc/master/classRooExtendPdf.html,1,['variab'],['variable']
Modifiability,"hat returns the integral. ; This is used to build the computation graph for the final likelihood. ; Reimplemented from RooAbsPdf.; Definition at line 63 of file RooExtendedTerm.cxx. ◆ DeclFileName(). static const char * RooExtendedTerm::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 42 of file RooExtendedTerm.h. ◆ evaluate(). double RooExtendedTerm::evaluate ; (; ); const. inlineoverridevirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 30 of file RooExtendedTerm.h. ◆ expectedEvents(). double RooExtendedTerm::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return number of expected events, in other words the value of the associated n parameter. ; Return number of expected events from associated event count variable. ; Reimplemented from RooAbsPdf.; Definition at line 58 of file RooExtendedTerm.cxx. ◆ extendMode(). ExtendMode RooExtendedTerm::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 32 of file RooExtendedTerm.h. ◆ IsA(). TClass * RooExtendedTerm::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 42 of file RooExtendedTerm.h. ◆ Streamer(). void RooExtendedTerm::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooExtendedTerm::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file RooExtendedTerm.h. Member Data Documentation. ◆ _n. RooRealProxy RooExtendedTerm::_n. protected . Number of expected events. ; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendedTerm.html:76012,extend,extendMode,76012,doc/master/classRooExtendedTerm.html,https://root.cern,https://root.cern/doc/master/classRooExtendedTerm.html,1,['extend'],['extendMode']
Modifiability,"hat; 2 scripts with the same name in different source directory will over-write each; other's library.; See also TSystem::SetBuildDir. If dirmode is not zero and we need to create the target directory, the; file mode bit will be change to 'dirmode' using chmod. If library_specified is not specified, CompileMacro generate a default name; for library by taking the name of the file ""filename"" but replacing the; dot before the extension by an underscore and by adding the shared; library extension for the current platform.; For example on most platform, hsimple.cxx will generate hsimple_cxx.so. It uses the directive fMakeSharedLibs to create a shared library.; If loading the shared library fails, it tries to output a list of missing; symbols by creating an executable (on some platforms like OSF, this does; not HAVE to be an executable) containing the script. It uses the; directive fMakeExe to do so.; For both directives, before passing them to TSystem::Exec, it expands the; variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; information on those variables. This method is used to implement the following feature:. Synopsis:. The purpose of this addition is to allow the user to use an external; compiler to create a shared library from its C++ macro (scripts).; Currently in order to execute a script, a user has to type at the root; prompt. .X myfunc.C(arg1,arg2). We allow him to type:. .X myfunc.C++(arg1,arg2); or; .X myfunc.C+(arg1,arg2). In which case an external compiler will be called to create a shared; library. This shared library will then be loaded and the function; myfunc will be called with the two arguments. With '++' the shared library; is always recompiled. With '+' the shared library is recompiled only; if it does not exist yet or the macro file is newer than the shared; library. Of course the + and ++ notation is supported in similar way for .x and .L. Through the functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:39421,variab,variables,39421,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,4,['variab'],['variables']
Modifiability,"hat; 2 scripts with the same name in different source directory will over-write each; other's library.; See also TSystem::SetBuildDir. If dirmode is not zero and we need to create the target directory, the; file mode bit will be change to 'dirmode' using chmod. If library_specified is not specified, CompileMacro generate a default name; for library by taking the name of the file ""filename"" but replacing the; dot before the extension by an underscore and by adding the shared; library extension for the current platform.; For example on most platform, hsimple.cxx will generate hsimple_cxx.so. It uses the directive fMakeSharedLibs to create a shared library.; If loading the shared library fails, it tries to output a list of missing; symbols by creating an executable (on some platforms like OSF, this does; not HAVE to be an executable) containing the script. It uses the; directive fMakeExe to do so.; For both directives, before passing them to TSystem::Exec, it expands the; variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; information on those variables. This method is used to implement the following feature:. Synopsis:. The purpose of this addition is to allow the user to use an external; compiler to create a shared library from its C++ macro (scripts).; Currently in order to execute a script, a user has to type at the root; prompt. .X myfunc.C(arg1,arg2). We allow them to type:. .X myfunc.C++(arg1,arg2); or; .X myfunc.C+(arg1,arg2). In which case an external compiler will be called to create a shared; library. This shared library will then be loaded and the function; myfunc will be called with the two arguments. With '++' the shared library; is always recompiled. With '+' the shared library is recompiled only; if it does not exist yet or the macro file is newer than the shared; library. Of course the + and ++ notation is supported in similar way for .x and .L. Through the funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:41271,variab,variables,41271,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,2,['variab'],['variables']
Modifiability,"have a TVirtualCollectionProxy associated with them, a leaf is created that allows access to the number of elements in the collection. For TClonesArrays and types with an associated TVirtualCollectionProxy, this forwards to TTreeFormula's ""@branch.size()"" functionality. For all other collections, a method call to the appropriate collection's member function is executed when drawing.; These objects are of course only created for elements containing a collection; the generator has no effect on any other elements. ; Definition at line 150 of file TBranchBrowsable.h. Public Member Functions;  ~TCollectionPropertyBrowsable () override;  ; void Browse (TBrowser *b) override;  Browses a TCollectionPropertyBrowsable. ;  ; const char * GetDraw () const;  return the string passed to TTree::Draw ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ;  ; TClass * GetClassType () const;  return the type of this browsable object ;  ; const char * GetIconName () const override;  return icon shown when browsing a TVirtualBranchBrowsable ;  ; TList * GetLeaves () const;  Return list of leaves. If not set up yet we'll create them. ;  ; const TVirtualBranchBrowsable * GetParent () const;  return the parent TVirtualBranchBrowsable ;  ; void GetScope (TString &scope) const;  Returns the full name for TTree::Draw to draw *this. ;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  check whether we have sub-elements ;  ; void Streamer (TBuffer &) override;  Stream an obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollectionPropertyBrowsable.html:1576,inherit,inherited,1576,doc/master/classTCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/doc/master/classTCollectionPropertyBrowsable.html,1,['inherit'],['inherited']
Modifiability,"have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:3329,config,configure,3329,doc/v632/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html,2,['config'],['configure']
Modifiability,"he 3-D histogram classes derived from the 1-D histogram classes.; 50All operations are supported (fill, fit).; 51Drawing is currently restricted to one single option.; 52A cloud of points is drawn. The number of points is proportional to; 53cell content.; 54 ; 55- TH3C a 3-D histogram with one byte per cell (char). Maximum bin content = 127; 56- TH3S a 3-D histogram with two bytes per cell (short integer). Maximum bin content = 32767; 57- TH3I a 3-D histogram with four bytes per cell (32 bit integer). Maximum bin content = INT_MAX (\ref intmax3 ""*""); 58- TH3L a 3-D histogram with eight bytes per cell (64 bit integer). Maximum bin content = LLONG_MAX (\ref llongmax3 ""**""); 59- TH3F a 3-D histogram with four bytes per cell (float). Maximum precision 7 digits, maximum integer bin content = +/-16777216 (\ref floatmax3 ""***""); 60- TH3D a 3-D histogram with eight bytes per cell (double). Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (\ref doublemax3 ""****""); 61 ; 62<sup>; 63\anchor intmax3 (*) INT_MAX = 2147483647 is the [maximum value for a variable of type int.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; 64\anchor llongmax3 (**) LLONG_MAX = 9223372036854775807 is the [maximum value for a variable of type long64.](https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits)<br>; 65\anchor floatmax3 (***) 2^24 = 16777216 is the [maximum integer that can be properly represented by a float32 with 23-bit mantissa.](https://stackoverflow.com/a/3793950/7471760)<br>; 66\anchor doublemax3 (****) 2^53 = 9007199254740992 is the [maximum integer that can be properly represented by a double64 with 52-bit mantissa.](https://stackoverflow.com/a/3793950/7471760); 67</sup>; 68*/; 69 ; 70 ; 71////////////////////////////////////////////////////////////////////////////////; 72/// Default constructor.; 73 ; 74TH3::TH3(); 75{; 76 fDimension = 3;; 77 fTsumwy = fTsumwy2 = fTsumwxy = 0;; 78 fTsumwz = fTsumwz2 = fTsumwxz = fT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:2720,variab,variable,2720,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['variab'],['variable']
Modifiability,"he Box. ;  ; void SetBBoxCenterY (const Int_t y) override;  Set Y coordinate of the center of the Box. ;  ; void SetBBoxX1 (const Int_t x) override;  Set left hand side of BoundingBox to a value (resize in x direction on left) ;  ; void SetBBoxX2 (const Int_t x) override;  Set right hand side of BoundingBox to a value (resize in x direction on right) ;  ; void SetBBoxY1 (const Int_t y) override;  Set top of BoundingBox to a value (resize in y direction on top) ;  ; void SetBBoxY2 (const Int_t y) override;  Set bottom of BoundingBox to a value (resize in y direction on bottom) ;  ; virtual void SetToolTipText (const char *text, Long_t delayms=1000);  Set tool tip text associated with this box. ;  ; virtual void SetX1 (Double_t x1);  ; virtual void SetX2 (Double_t x2);  ; virtual void SetY1 (Double_t y1);  ; virtual void SetY2 (Double_t y2);  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBox.html:4361,inherit,inherited,4361,doc/master/classTBox.html,https://root.cern,https://root.cern/doc/master/classTBox.html,1,['inherit'],['inherited']
Modifiability,"he Minuit2 interface for TMinuit2-like objective functions; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMerger File copying and merging services; TFileSet TDataSet class to read the native file system directory structure in; TFileStager ABC defining interface to a stager; TFitEditor Fit Panel interface; TFitParametersDialog Fit function parameters dialog; TFitter The ROOT standard fitter based on TMinuit; TFitterFumili Fitter based on new Fumili method (Fumili2); TFitterMinuit The ROOT fitter based on new Minuit (Minuit2); TFoam General purpose self-adapting Monte Carlo event generator; TFoamCell Single cell of FOAM; TFoamIntegrand n-dimensional real positive integrand of FOAM; TFoamMaxwt Controlling of the MC weight (maximum weight); TFoamVect n-dimensional vector with dynamical allocation; TFolder Describe a folder: a list of objects and folders; TFormula The formula base class f(x,y,z,par); TFormulaPrimitive The primitive formula ; TFractionFitter Fits MC fractions to data histogram; TFrame Pad graphics frame; TFrameEditor editor of TFrame objects; TFree Description of free segments on a file; TFriendElement A friend element of another TTree; TFumili The FUMILI Minimization package; TFumiliMinimizer Implementation of Minimizer interface using TFumili ; TFunction Dictionary for global function; TFunctionParametersDialog Function parameters dialog; TG16ColorSelector 16 color cells; TG4RootNavMgr Class crreating a G4Navigator based on ROOT geometry; TGApplication GUI application singleton; TGButton Button widget abstract base class; TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:66697,adapt,adapting,66697,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['adapt'],['adapting']
Modifiability,"he TMlpANN performs an explicit separation of the; : full training sample into independent training and validation samples.; : We have found that in most high-energy physics applications the ; : available degrees of freedom (training events) are sufficient to ; : constrain the weights of the relatively simple architectures required; : to achieve good performance. Hence no overtraining should occur, and ; : the use of validation samples would only reduce the available training; : information. However, if the performance on the training sample is ; : found to be significantly better than the one found with the inde-; : pendent test sample, caution is needed. The results for these samples ; : are printed to standard output at the end of each training job.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : The hidden layer architecture for all ANNs is defined by the option; : ""HiddenLayers=N+1,N,..."", where here the first hidden layer has N+1; : neurons and the second N neurons (and so on), and where N is the number ; : of input variables. Excessive numbers of hidden layers should be avoided,; : in favour of more neurons in the first hidden layer.; : ; : The number of cycles should be above 500. As said, if the number of; : adjustable weights is small compared to the training sample size,; : using a large number of training samples should not lead to overtraining.; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; TFHandler_MLPBNN : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.089214 0.20183 [ -1.0000 1.0000 ]; : myvar2: -0.090751 0.29609 [ -1.0000 1.0000 ]; : var3: 0.059878 0.21436 [ -1.0000 1.0000 ]; : var4: 0.11587 0.24261 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : Training Network; : ; : Finalizing handling of Regulator terms, trainE=0.713219 te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:43969,variab,variables,43969,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['variab'],['variables']
Modifiability,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:14517,inherit,inheritance,14517,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,2,['inherit'],['inheritance']
Modifiability,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:20398,inherit,inheritance,20398,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,38,['inherit'],['inheritance']
Modifiability,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:17455,inherit,inheritance,17455,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,14,['inherit'],['inheritance']
Modifiability,"he TObjectTable. ;  . Protected Member Functions; void Transform (bool dir, UShort_t *indexnew);  Transform the existing fIndices. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UShort_t fCurrent;  ! to fasten Contains() in list mode ;  ; UShort_t * fIndices;  [fN] ;  ; Int_t fLastIndexQueried;  ! to optimize GetEntry() in a loop ;  ; Int_t fLastIndexReturned;  ! to optimize GetEntry() in a loop ;  ; Int_t fN;  size of fIndices for I/O =fNPassed for list, fBlockSize for bits ;  ; Int_t fNPassed;  number of entries in the entry list (if fPassing=0 - number of entries not in the entry list ;  ; bool fPassing;  1 - stores entries that belong to the list 0 - stores entries that don't belong to the list ;  ; Int_t fType;  0 - bits, 1 - list ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TEntryListBlock.h>. Inheritance diagram for TEntryListBlock:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBlockSize . Definition at line 61 of file TEntryListBlock.h. Constructor & Destructor Documentation. ◆ TEntryListBlock() [1/2]. TEntryListBlock::TEntryListBlock ; (; ). Default c-tor. ; Definition at line 53 of file TEntryListBlock.cxx. ◆ TEntryListBlock() [2/2]. TEntryListBlock::TEntryListBlock ; (; const TEntryListBlock & ; eblock). Copy c-tor. ; Definition at line 68 of file TEntryListBlock.cxx. ◆ ~TEntryListBlock(). TEntryListBlock::~TEntryListBlock ; (; ). override . Destructor. ; Definition at line 89 of file TEntryListBlock.cxx. Member Function Documentation. ◆ Class(). static TClass * TEntryListBlock::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListBlock.html:13180,inherit,inherited,13180,doc/master/classTEntryListBlock.html,https://root.cern,https://root.cern/doc/master/classTEntryListBlock.html,1,['inherit'],['inherited']
Modifiability,"he TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void changeBasis (RooFormulaVar *basis) override;  Changes associated bases function to 'inBasis'. ;  ; double evaluate () const override;  Evaluate the truth model: a delta function when used as PDF, the basis function itself, when convoluted with a basis function. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTruthModel.html:60912,inherit,inherited,60912,doc/master/classRooTruthModel.html,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html,1,['inherit'],['inherited']
Modifiability,"he Y axis first bin; 96/// \param[in] yup upper edge of the Y axis last bin (not included in last bin); 97/// \param[in] nbinsz number of bins along the Z axis; 98/// \param[in] zlow low edge of the Z axis first bin; 99/// \param[in] zup upper edge of the Z axis last bin (not included in last bin); 100 ; 101TH3::TH3(const char *name,const char *title,Int_t nbinsx,Double_t xlow,Double_t xup; 102 ,Int_t nbinsy,Double_t ylow,Double_t yup; 103 ,Int_t nbinsz,Double_t zlow,Double_t zup); 104 :TH1(name,title,nbinsx,xlow,xup); 105{; 106 fDimension = 3;; 107 if (nbinsy <= 0) {; 108 Warning(""TH3"",""nbinsy is <=0 - set to nbinsy = 1"");; 109 nbinsy = 1;; 110 }; 111 if (nbinsz <= 0) {; 112 Warning(""TH3"",""nbinsz is <=0 - set to nbinsz = 1"");; 113 nbinsz = 1;; 114 }; 115 fYaxis.Set(nbinsy,ylow,yup);; 116 fZaxis.Set(nbinsz,zlow,zup);; 117 fNcells = (nbinsx+2)*(nbinsy+2)*(nbinsz+2);; 118 fTsumwy = fTsumwy2 = fTsumwxy = 0;; 119 fTsumwz = fTsumwz2 = fTsumwxz = fTsumwyz = 0;; 120}; 121 ; 122 ; 123////////////////////////////////////////////////////////////////////////////////; 124/// Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input; 125/// arrays of type float.; 126///; 127/// \param[in] name name of histogram (avoid blanks); 128/// \param[in] title histogram title.; 129/// If title is of the form `stringt;stringx;stringy;stringz`; 130/// the histogram title is set to `stringt`,; 131/// the x axis title to `stringx`, the y axis title to `stringy`, etc.; 132/// \param[in] nbinsx number of bins; 133/// \param[in] xbins array of low-edges for each bin.; 134/// This is an array of type float and size nbinsx+1; 135/// \param[in] nbinsy number of bins; 136/// \param[in] ybins array of low-edges for each bin.; 137/// This is an array of type float and size nbinsy+1; 138/// \param[in] nbinsz number of bins; 139/// \param[in] zbins array of low-edges for each bin.; 140/// This is an array of type float and size nbinsz+1; 141 ; 142TH3::TH3(const char *name,const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:5520,variab,variable,5520,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['variab'],['variable']
Modifiability,"he bin centers. ;  ; double findRoot (RooRealVar &x, double xmin, double xmax, double yval);  Return value of x (in range xmin,xmax) at which function equals yval. ;  ; virtual void fixAddCoefNormalization (const RooArgSet &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:24845,config,configuration,24845,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,2,['config'],['configuration']
Modifiability,"he bin centers. ;  ; double findRoot (RooRealVar &x, double xmin, double xmax, double yval);  Return value of x (in range xmin,xmax) at which function equals yval. ;  ; virtual void fixAddCoefNormalization (const RooArgSet &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:23906,config,configuration,23906,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,1,['config'],['configuration']
Modifiability,"he buffer, the object, and the counter.; 521 (*pstreamer)(buf, (char *) addr /*entry pointer*/ + ioffset /*object offset*/, *counter);; 522 //} for k; 523 buf.SetByteCount(pos, kTRUE);; 524 // We are done, next streamer element.; 525 return 0;; 526 }; 527 ; 528 // Get the class of the data member.; 529 TClass* cl = config->fCompInfo->fClass;; 530 // Which are we, an array of objects or an array of pointers to objects?; 531 Bool_t isPtrPtr = (strstr(config->fCompInfo->fElem->GetTypeName(), ""**"") != 0);; 532 ; 533 // By default assume the file version is the newest.; 534 Int_t fileVersion = kMaxInt;; 535 ; 536 if (!kIsTextT) {; 537 // At this point we do *not* have a private streamer.; 538 // Get the version of the file we are writing to.; 539 TFile* file = (TFile*) buf.GetParent();; 540 if (file) {; 541 fileVersion = file->GetVersion();; 542 }; 543 }; 544 // Write the class version to the buffer.; 545 UInt_t pos = buf.WriteVersion(config->fInfo->IsA(), kTRUE);; 546 if (fileVersion > 51508) {; 547 // -- Newer versions allow polymorphic pointers to objects.; 548 // Loop over the entries in the clones array or the STL container.; 549 //for (int k = 0; k < narr; ++k) {; 550 // Get the counter for the varying length array.; 551 Int_t vlen = *((Int_t*) ((char *) addr /*entry pointer*/ + eoffset /*entry offset*/ + config->fCompInfo->fMethod /*counter offset*/));; 552 ; 553 //b << vlen;; 554 if (vlen) {; 555 // Get a pointer to the array of pointers.; 556 char** pp = (char**) ((char *) addr /*entry pointer*/ + ioffset /*object offset*/);; 557 // Loop over each element of the array of pointers to varying-length arrays.; 558 for (Int_t ndx = 0; ndx < config->fCompInfo->fLength; ++ndx) {; 559 if (!pp[ndx]) {; 560 // -- We do not have a pointer to a varying-length array.; 561 // Error(""WriteBufferAux"", ""The pointer to element %s::%s type %d (%s) is null\n"", GetName(), aElement->GetFullName(), compinfo[i]->fType, aElement->GetTypeName());; 562 // ::ErrorHandler(kError, ""::WriteStr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:21385,config,config,21385,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,2,"['config', 'polymorphi']","['config', 'polymorphic']"
Modifiability,"he cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyc; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym; RooRealProxym0; RooRealProxyp.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgusBG.html:38825,config,configuration,38825,root/html528/RooArgusBG.html,https://root.cern,https://root.cern/root/html528/RooArgusBG.html,2,['config'],['configuration']
Modifiability,"he cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBDecay.html:40901,config,configuration,40901,root/html528/RooBDecay.html,https://root.cern,https://root.cern/root/html528/RooBDecay.html,2,['config'],['configuration']
Modifiability,"he call graph. ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; Refer to the first overload of this method for the full documentation. ; Definition at line 242 of file RInterface.hxx. ◆ Filter() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RJittedFilter, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Filter ; (; std::string_view ; expression, . std::string_view ; name = """" . ). inline . Append a filter to the call graph. ; Parameters. [in]expressionThe filter expression in C++ ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; The expression is just-in-time compiled and used to filter entries. It must be valid C++ syntax in which variable names are substituted with the names of branches/columns. Example usage:; auto filtered_df = df.Filter(""myCollection.size() > 3"");; auto filtered_name_df = df.Filter(""myCollection.size() > 3"", ""Minumum collection size"");; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); but instead this will: df.Filter(""return Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); ; Definition at line 288 of file RInterface.hxx. ◆ FilterAvailable(). template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RFilterWithMissingValues< Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::FilterAvailable ; (; std::string_view ; column). inline . Discard entries with missing values. ; Parameters. [in]columnColumn name whose entries with missing values should be discarded ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:71893,variab,variable,71893,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['variab'],['variable']
Modifiability,"he centre of the side at -H2 in y to the centre of the side at +H2 in y of the face at +DZ in z . Definition at line 33 of file TTRAP.h. Public Member Functions;  TTRAP ();  TRAP shape default constructor. ;  ;  TTRAP (const char *name, const char *title, const char *material, Float_t dz, Float_t theta, Float_t phi, Float_t h1, Float_t bl1, Float_t tl1, Float_t alpha1, Float_t h2, Float_t bl2, Float_t tl2, Float_t alpha2);  TRAP shape normal constructor. ;  ;  ~TTRAP () override;  TRAP shape default destructor. ;  ; virtual Float_t GetAlpha1 () const;  ; virtual Float_t GetAlpha2 () const;  ; virtual Float_t GetBl1 () const;  ; virtual Float_t GetBl2 () const;  ; virtual Float_t GetH1 () const;  ; virtual Float_t GetH2 () const;  ; virtual Float_t GetTl1 () const;  ; virtual Float_t GetTl2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBRIK;  TBRIK ();  BRIK shape default constructor. ;  ;  TBRIK (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz);  BRIK shape normal constructor. ;  ;  ~TBRIK () override;  BRIK shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a BRIK. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3D. ;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTRAP.html:2411,inherit,inherited,2411,doc/master/classTTRAP.html,https://root.cern,https://root.cern/doc/master/classTTRAP.html,1,['inherit'],['inherited']
Modifiability,"he collection or object names. It is important to give names to collections to avoid misleading branch names or identical branch names. By default collections have a name equal to the corresponding class name, e.g. the default name of TList is “TList”.; 12.13 Examples for Writing and Reading Trees; The following sections are examples of writing and reading trees increasing in complexity from a simple tree with a few variables to a tree containing folders and complex Event objects. Each example has a named script in the $ROOTSYS/tutorials/tree directory. They are called tree1.C to tree4.C. The examples are:. tree1.C: a tree with several simple (integers and floating point) variables.; tree2.C: a tree built from a C structure (struct). This example uses the Geant3 C wrapper as an example of a FORTRAN common block ported to C with a C structure.; tree3.C: in this example, we will show how to extend a tree with a branch from another tree with the Friends feature. These trees have branches with variable length arrays. Each entry has a variable number of tracks, and each track has several variables.; tree4.C: a tree with a class (Event). The class Event is defined in $ROOTSYS/test. In this example we first encounter the impact of splitting a branch. Each script contains the main function, with the same name as the file (i.e. tree1), the function to write - tree1w, and the function to read - tree1r. If the script is not run in batch mode, it displays the tree in the browser and tree viewer. To study the example scripts, you can either execute the main script, or load the script and execute a specific function. For example:; // execute the function that writes, reads, shows the tree; root[] x tree1.C; // use ACLiC to build shared library, check syntax, execute; root[] x tree1.C++; // Load the script and select a function to execute; root[] L tree1.C; root[] tree1w(); root[] tree1r(); 12.14 Example 1: A Tree with Simple Variables; This example shows how to write, view, and re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:551466,variab,variable,551466,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['variab'],['variable']
Modifiability,"he command "".x macro.C"" in the root prompt; command line. Compiling Macros. The currently loaded macro can be compiled with ACLiC if you select; Tools menu / Compile Macro; by clicking on the corresponding; toolbar button, or by using Ctrl+F7 accelerator keys.; This is identical to the command "".L macro.C++"" in the root prompt; command line. Interrupting a Running Macro. You can interrupt a running macro by selecting the Tools menu /; Interrupt; by clicking on the corresponding toolbar button, or by; using Shift+F5 accelerator keys. Interface to CINT Interpreter. Any command entered in the Command combo box will be passed to; the CINT interpreter. This combo box will keep the commands history; and will allow you to re-execute the same commands during an editor; session. Keyboard Bindings. The following table lists the keyboard shortcuts and accelerator; keys. Key: Action:. Up Move cursor up.; Shift+Up Move cursor up and extend selection.; Down Move cursor down.; Shift+Down Move cursor down and extend selection.; Left Move cursor left.; Shift+Left Move cursor left and extend selection.; Right Move cursor right.; Shift+Right Move cursor right and extend selection.; Home Move cursor to begin of line.; Shift+Home Move cursor to begin of line and extend selection.; Ctrl+Home Move cursor to top of page.; End Move cursor to end of line.; Shift+End Move cursor to end of line and extend selection.; Ctrl+End Move cursor to end of page.; PgUp Move cursor up one page.; Shift+PgUp Move cursor up one page and extend selection.; PgDn Move cursor down one page.; Shift+PgDn Move cursor down one page and extend selection.; Delete Delete character after cursor, or text selection.; BackSpace Delete character before cursor, or text selection.; Ctrl+B Move cursor left.; Ctrl+D Delete character after cursor, or text selection.; Ctrl+E Move cursor to end of line.; Ctrl+H Delete character before cursor, or text selection.; Ctrl+K Delete characters from current position to the; end of line.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEditor.html:3648,extend,extend,3648,root/html528/TGTextEditor.html,https://root.cern,https://root.cern/root/html528/TGTextEditor.html,6,['extend'],['extend']
Modifiability,he configuration ; : 10 | 29182.7 27696.8 0.0202998 0.00181461 43277.8 0; : 11 Minimum Test error found - save the configuration ; : 11 | 28878.3 27413.2 0.0196838 0.00176755 44652.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 28593.7 27134.7 0.0196593 0.00176089 44696.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13224,config,configuration,13224,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,he configuration ; : 11 | 28878.3 27413.2 0.0196838 0.00176755 44652.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 28593.7 27134.7 0.0196593 0.00176089 44696.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13336,config,configuration,13336,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,he configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14561,config,configuration,14561,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,he configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - sa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14673,config,configuration,14673,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,he configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:18455,config,configuration,18455,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,he configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test err,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22015,config,configuration,22015,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,he configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.21813 0.0200213 0.00174992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.78644 0.0202162 0.00175457 43333 4; : 907 Minimum Test error found - save the configuration ; : 907 | 4.76534 7.04169 0.0202678 0.00183052 43390.4 0; : 908 | 4.77659 7.36078 0.0201903 0.00174867 43380.2 1; : 909 | 5.40526 9.09975 0.0204121 0.00175613 42881.7 2; : 910 | 5.23108 7.3695 0.0200572 0.0017555 43711.7 3; : 911 | 4.9718 7.21676 0.0200739 0.00175828 43678.5 4; : 912 Minimum Test error found - save the configuration ; : 912 | 4.64478 6.77041 0.0201181 0.00182552 43733.5 0; : 913 | 4.96617 7.29752 0.0200675 0.00175608 43688.5 1; : 914 | 4.79524 7.25946 0.0200357 0.00175682 43766.4 2; : 915 Minimum Test error found - save the configuration ; : 915 | 4.5624 6.6787 0.0201058 0.0018145 43736.7 0; : 916 Minimum Test error found - save the configuration ; : 916 | 4.49553 6.65717 0.0201015 0.00180949 43734.9 0; : 917 Minimum Test error found - save the configuration ; : 917 | 4.36563 6.60613 0.0201007 0.00181415 43748 0; : 918 Minimum Test error found - save the configuration ; : 918 | 4.47049 6.3479 0.0200865 0.00182018 43796.4 0; : 919 | 4.35846 6.60136 0.0200632 0.00176343 43716.3 1; : 920 | 4.30933 6.53557 0.0200239 0.00175965 43801.4 2; : 921 Minimum Test error found - save the configuration ; : 921 | 4.32266 6.29119 0.0200952 0.00182605 43789.5 0; : 922 | 4.32742 6.39561 0.0200257 0.00176292 43804.9 1; : 923 | 4.33774 6.46608 0.0200201 0.00176071 43813 2; : 924 | 4.36503 6.3111 0.0200702 0.00177545 43728.3 3; : 925 | 4.7314 7.24632 0.0202093 0.00176259 43368.2 4; : 926 | 4.61316 6.64099 0.020249 0.00181216 43391.3 5; : 927 Minimum Test error found - save the configuration ; : 927 | 4.41727 6.09792 0.0203192 0.00184107 43294.4 0; : 928 | 4.15393 6.23618 0.0200677 0.00177036 43722.3 1; : 929 | 4.2848 6.29195,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:107239,config,configuration,107239,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,he configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum Test error found - save the configuration ; : 111 | 12365.7 11337.8 0.0200081 0.00179319 43920.1 0; : 112 Minimum Test error found - save the configuration ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22688,config,configuration,22688,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['config'],['configuration']
Modifiability,"he contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:6898,variab,variable,6898,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,2,['variab'],"['variable', 'variables']"
Modifiability,"he correct remote file; access plugin. If option = NEW or CREATE create a new file and open it for writing,; if the file already exists the file is; not opened.; = RECREATE create a new file, if the file already; exists it will be overwritten.; = UPDATE open an existing file for writing.; if no file exists, it is created.; = READ open an existing file for reading (default).; = NET used by derived remote file access; classes, not a user callable option; = WEB used by derived remote http access; class, not a user callable option; If option = """" (default), READ is assumed. The file can be specified as a URL of the form:; file:///user/rdm/bla.root or file:/user/rdm/bla.root. The file can also be a member of an archive, in which case it is; specified as:; multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip; archive or member 1 from the archive. For more on archive file; support see the TArchiveFile class. TFile and its remote access plugins can also be used to open any; file, i.e. also non ROOT files, using:; file.tar?filetype=raw; This is convenient because the many remote file access plugins allow; easy access to/from the many different mass storage systems. The title of the file (ftitle) will be shown by the ROOT browsers. A ROOT file (like a Unix file system) may contain objects and; directories. There are no restrictions for the number of levels; of directories. A ROOT file is designed such that one can write in the file in pure; sequential mode (case of BATCH jobs). In this case, the file may be; read sequentially again without using the file index written; at the end of the file. In case of a job crash, all the information; on the file is therefore protected. A ROOT file can be used interactively. In this case, one has the; possibility to delete existing objects and add new ones.; When an object is deleted from the file, the freed space is added; into the FREE linked list (fFree). The FREE list consists of a chain; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:24019,plugin,plugins,24019,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,6,['plugin'],['plugins']
Modifiability,"he corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlocking function. void InteriorPoint(Double_t alpha, Double_t beta); Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. Double_t Violation(); The amount by which the current variables violate the non-negativity constraints. void ShiftBoundVariables(Double_t alpha, Double_t beta); Add alpha to components of (u,t,v,w) and beta to components of (lambda,pi,phi,gamma). void Print(Option_t* option = """") const; Print class members. Double_t Norm1(); Return the sum of the vector-norm1's. Double_t NormInf(); Return the sum of the vector-normInf's. Bool_t ValidNonZeroPattern(); Check that the variables conform to the non-zero indices. TQpVar & operator=(const TQpVar& source); Assignment operator. virtual ~TQpVar(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQpVar.html:10561,variab,variables,10561,root/html534/TQpVar.html,https://root.cern,https://root.cern/root/html534/TQpVar.html,2,['variab'],['variables']
Modifiability,"he corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlocking function. void InteriorPoint(Double_t alpha, Double_t beta); Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. Double_t Violation(); The amount by which the current variables violate the non-negativity constraints. void ShiftBoundVariables(Double_t alpha, Double_t beta); Add alpha to components of (u,t,v,w) and beta to components of (lambda,pi,phi,gamma). void Print(Option_t* option = """") const; Print class members. Double_t Norm1(); Return the sum of the vector-norm1's. Double_t NormInf(); Return the sum of the vector-normInf's. Bool_t ValidNonZeroPattern(); Check that the variables conform to the non-zero indices. TQpVar & operator=(const TQpVar& source); Assignment operator. virtual ~TQpVar(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQpVar.html:11219,variab,variables,11219,root/html604/TQpVar.html,https://root.cern,https://root.cern/root/html604/TQpVar.html,2,['variab'],['variables']
Modifiability,"he corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlocking function. void InteriorPoint(Double_t alpha, Double_t beta); Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. Double_t Violation(); The amount by which the current variables violate the non-negativity constraints. void ShiftBoundVariables(Double_t alpha, Double_t beta); Add alpha to components of (u,t,v,w) and beta to components of (lambda,pi,phi,gamma). void Print(Option_t* option = """") const; Print class members. Double_t Norm1(); Return the sum of the vector-norm1's. Double_t NormInf(); Return the sum of the vector-normInf's. Bool_t ValidNonZeroPattern(); Check that the variables conform to the non-zero indices. TQpVar & operator=(const TQpVar& source); Assignment operator. virtual ~TQpVar(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQpVar.html:11219,variab,variables,11219,root/html602/TQpVar.html,https://root.cern,https://root.cern/root/html602/TQpVar.html,2,['variab'],['variables']
Modifiability,"he crossed shape surface, given a starting local point and an ongoing direction. All the features above are globally managed by the modeller in order to provide navigation functionality. In addition to those, shapes have also to implement additional specific abstract methods:. Computation of the minimal box bounding the shape, given that this box have to be aligned with the local coordinates;; Algorithms for dividing the shape along a given axis. The modeller currently provides a set of 20 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes as a result of Boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (combined composites). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: geodemo.C. Primitive Shapes - the general inheritance scheme; Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1,<type> param2, ...);; TGeoXXX(<type> param1,<type> param2, ...);; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Shapes__classes.html:1874,inherit,inheritance,1874,doc/master/group__Shapes__classes.html,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html,1,['inherit'],['inheritance']
Modifiability,"he current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; char fChar;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGTextEditCommand; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Inheritance diagram for TDelCharCom:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDelCharCom(). TDelCharCom::TDelCharC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelCharCom.html:8883,inherit,inherited,8883,doc/master/classTDelCharCom.html,https://root.cern,https://root.cern/doc/master/classTDelCharCom.html,1,['inherit'],['inherited']
Modifiability,"he current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  This methods fills list with TMethodBrowsables for the branch's or parent's collection class and its base classes, and returns the number of added elements. ;  ; static void Register ();  Wrapper for the registration method. ;  ; static void Unregister ();  Wrapper for the registration method. ;  ;  Static Public Member Functions inherited from TMethodBrowsable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  This methods fills list with TMethodBrowsables for the branch's or parent's class and its base classes, and returns the number of added elements. ;  ; static bool IsMethodBrowsable (const TMethod *m);  A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ;  ; static void Register ();  Wrapper for the registration method. ;  ; static void Unregister ();  Wrapper for the registration method. ;  ;  Static Public Member Functions inherited from TVirtualBranchBrowsable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FillListOfBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  Askes all registered generators to fill their br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollectionMethodBrowsable.html:11624,inherit,inherited,11624,doc/master/classTCollectionMethodBrowsable.html,https://root.cern,https://root.cern/doc/master/classTCollectionMethodBrowsable.html,1,['inherit'],['inherited']
Modifiability,"he current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGeoExtension ();  ;  ~TGeoExtension () override;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGeoExtension.h>. Inheritance diagram for TGeoExtension:. This browser is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoExtension.html:9407,inherit,inherited,9407,doc/master/classTGeoExtension.html,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html,1,['inherit'],['inherited']
Modifiability,"he current point when it proposes a new point. The proposal function is symmetric, though it may not cause a MetropolisHastings run to converge as quickly as other proposal functions. ; Definition at line 25 of file UniformProposal.h. Public Member Functions;  UniformProposal ()=default;  ; double GetProposalDensity (RooArgSet &x1, RooArgSet &x2) override;  Return the probability of proposing the point x1 given the starting point x2. ;  ; TClass * IsA () const override;  ; bool IsSymmetric (RooArgSet &x1, RooArgSet &x2) override;  Determine whether or not the proposal density is symmetric for points x1 and x2 - that is, whether the probability of reaching x2 from x1 is equal to the probability of reaching x1 from x2. ;  ; void Propose (RooArgSet &xPrime, RooArgSet &x) override;  Populate xPrime with a new proposed point. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::ProposalFunction;  ProposalFunction ();  Default constructor. ;  ; virtual bool CheckParameters (RooArgSet &params);  Check the parameters for which the ProposalFunction will propose values to make sure they are all RooRealVars Return true if all objects are RooRealVars, false otherwise. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UniformProposal.html:1543,inherit,inherited,1543,doc/master/classRooStats_1_1UniformProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UniformProposal.html,1,['inherit'],['inherited']
Modifiability,"he declared basis function, code -1 is; returned. Bool_t changeModel(const RooResolutionModel& newModel); Change the current resolution model to newModel. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Create a generator context for this p.d.f. If both the p.d.f and the resolution model; support internal generation of the convolution observable on an infinite domain,; deploy a specialized convolution generator context, which generates the physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:43728,variab,variable,43728,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,7,['variab'],['variable']
Modifiability,"he default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configuration as default numeric MC generator; configuration for this object. void setGeneratorConfig(); Remove the specialized numeric MC generator configuration associated; with this object. GenSpec* prepareMultiGen(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none(), const RooCmdArg& arg10 = RooCmdArg::none()) const. RooArgSet* getConstraints(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:77324,config,config,77324,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,3,['config'],"['config', 'configuration']"
Modifiability,"he default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configuration as default numeric MC generator; configuration for this object. void setGeneratorConfig(); Remove the specialized numeric MC generator configuration associated; with this object. void setNormRange(const char* rangeName). void setNormRangeOverride(const char* rangeName). GenSpec* prepareMultiGen(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:78544,config,config,78544,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,18,['config'],"['config', 'configuration']"
Modifiability,"he default prompt is ""root [%d] "". The maximum length of the prompt is 55 characters. To set the prompt in an interactive session do: root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> "") aap> ; Definition at line 595 of file TRint.cxx. ◆ Streamer(). void TRint::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TApplication. ◆ StreamerNVirtual(). void TRint::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file TRint.h. ◆ TabCompletionHook(). Int_t TRint::TabCompletionHook ; (; char * ; buf, . int * ; pLoc, . std::ostream & ; out . ). overridevirtual . Forward tab completion request to our TTabCom::Hook(). ; Reimplemented from TApplication.; Definition at line 827 of file TRint.cxx. ◆ Terminate(). void TRint::Terminate ; (; int ; status). overridevirtual . Terminate the application. ; Reset the terminal to sane mode and call the logoff macro defined via Rint.Logoff environment variable. NoteThe function does not return, unless the class has been told to return from Run(), by a call to SetReturnFromRun(). ; Reimplemented from TApplication.; Definition at line 722 of file TRint.cxx. Member Data Documentation. ◆ fBackslashContinue. Bool_t TRint::fBackslashContinue {}. private . Definition at line 41 of file TRint.h. ◆ fCaughtSignal. Int_t TRint::fCaughtSignal. private . Definition at line 39 of file TRint.h. ◆ fDefaultPrompt. TString TRint::fDefaultPrompt. private . Definition at line 35 of file TRint.h. ◆ fInputHandler. TFileHandler* TRint::fInputHandler. private . Definition at line 40 of file TRint.h. ◆ fInterrupt. Bool_t TRint::fInterrupt. private . Definition at line 38 of file TRint.h. ◆ fNcmd. Int_t TRint::fNcmd. private . Definition at line 34 of file TRint.h. ◆ fNonContinuePrompt. TString TRint::fNonContinuePrompt. private . Definition at line 36 of file TRint.h. ◆ fPrompt. char TRint::fPrompt[64]. private . Definition at line 37 of file TRint.h. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:28371,variab,variable,28371,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['variab'],['variable']
Modifiability,he details of this generator context. ; Reimplemented from RooAbsGenContext.; Definition at line 316 of file RooConvGenContext.cxx. ◆ setProtoDataOrder(). void RooConvGenContext::setProtoDataOrder ; (; Int_t * ; lut). overridevirtual . Set the traversal order for events in the prototype dataset The argument is a array of integers with a size identical to the number of events in the prototype dataset. ; Each element should contain an integer in the range 1-N. ; Reimplemented from RooAbsGenContext.; Definition at line 305 of file RooConvGenContext.cxx. ◆ Streamer(). void RooConvGenContext::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooConvGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file RooConvGenContext.h. Member Data Documentation. ◆ _convVarName. TString RooConvGenContext::_convVarName. protected . Name of convolution variable. ; Definition at line 55 of file RooConvGenContext.h. ◆ _cvModel. RooRealVar* RooConvGenContext::_cvModel {nullptr}. protected . Convolution variable in resModel event. ; Definition at line 62 of file RooConvGenContext.h. ◆ _cvOut. RooRealVar* RooConvGenContext::_cvOut {nullptr}. protected . Convolution variable in output event. ; Definition at line 64 of file RooConvGenContext.h. ◆ _cvPdf. RooRealVar* RooConvGenContext::_cvPdf {nullptr}. protected . Convolution variable in PDFxTruth event. ; Definition at line 63 of file RooConvGenContext.h. ◆ _modelCloneSet. std::unique_ptr<RooArgSet> RooConvGenContext::_modelCloneSet. protected . Owner of resModel clone. ; Definition at line 61 of file RooConvGenContext.h. ◆ _modelGen. std::unique_ptr<RooAbsGenContext> RooConvGenContext::_modelGen. protected . Resolution model generator context. ; Definition at line 54 of file RooConvGenContext.h. ◆ _modelVars. std::unique_ptr<RooArgSet> RooConvGenContext::_modelVars. protected . Hold,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvGenContext.html:24118,variab,variable,24118,doc/master/classRooConvGenContext.html,https://root.cern,https://root.cern/doc/master/classRooConvGenContext.html,1,['variab'],['variable']
Modifiability,"he dictionary loading function generated by rootcint. ;  ; static Bool_t HasDictionarySelection (const char *clname);  Check whether a class has a dictionary or ROOT can load one. ;  ; static ENewType IsCallingNew ();  Static method returning the defConstructor flag passed to TClass::New(). ;  ; static TClass * Load (TBuffer &b);  Load class description from I/O buffer and return class object. ;  ; static TClass * LoadClass (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static Int_t ReadRules ();  Read the class.rules files from the default location:. ;  ; static Int_t ReadRules (const char *filename);  Read a class.rules file which contains one rule per line with comment starting with a #. ;  ; static void RemoveClass (TClass *cl);  static: Remove a class from the list and map of classes ;  ; static void RemoveClassDeclId (TDictionary::DeclId_t id);  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:36088,inherit,inherited,36088,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['inherit'],['inherited']
Modifiability,"he distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples.; ; The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; . Function Members (Methods); public:. virtual~MethodLikelihood(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodLikelihood.html:2105,variab,variables,2105,root/html528/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodLikelihood.html,10,['variab'],"['variable', 'variables']"
Modifiability,"he distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples.; ; The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; ; . Function Members (Methods); public:. virtual~MethodLikelihood(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodLikelihood.html:2105,variab,variables,2105,root/html534/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodLikelihood.html,2,['variab'],"['variable', 'variables']"
Modifiability,"he drawing attributes for this chain to the input list so that the draw selectors can use them, in case of need. ;  . Additional Inherited Members;  Static Public Attributes inherited from TChain; static constexpr auto kBigNumber = TTree::kMaxEntries;  ;  Static Public Attributes inherited from TTree; static constexpr Long64_t kMaxEntries = TVirtualTreePlayer::kMaxEntries;  ;  Protected Types inherited from TTree; enum  ELockStatusBits { ;   kFindBranch = (1ULL << ( 0 )); , kFindLeaf = (1ULL << ( 1 )); , kGetAlias = (1ULL << ( 2 )); , kGetBranch = (1ULL << ( 3 )); , ;   kGetEntry = (1ULL << ( 4 )); , kGetEntryWithIndex = (1ULL << ( 5 )); , kGetFriend = (1ULL << ( 6 )); , kGetFriendAlias = (1ULL << ( 7 )); , ;   kGetLeaf = (1ULL << ( 8 )); , kLoadTree = (1ULL << ( 9 )); , kPrint = (1ULL << ( 10 )); , kRemoveFriend = (1ULL << ( 11 )); , ;   kSetBranchStatus = (1ULL << ( 12 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TChain; void InvalidateCurrentTree ();  Set the TTree to be reloaded as soon as possible. ;  ; void ReleaseChainProof ();  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch() with added check that addobj matches className. ;  ; virtual TBranch * BranchImp (const char *branchname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpArr (const char *branchname, EDataType datatype, std::size_t N, void *addobj, Int_t bufsize, Int_t splitlevel);  ; virtual TBranch * BranchImpRef (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpRef (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:50837,inherit,inherited,50837,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,2,['inherit'],['inherited']
Modifiability,"he equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points.; The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. RooAbsData* reduce(const RooArgSet& varSubset, const char* cut = 0); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. Double_t weightError(RooAbsData::ErrorType etype = Poisson) const; Return error on current weight (dummy implementation returning zero). void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return asymmetric error on weight. (Dummy implementation returning zero). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Plot dataset on specified frame. By default an unbinned dataset will use the default binning of; the target frame. A binned dataset will by default retain its intrinsic binning. The following optional named arguments can be used to modify the default be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsData.html:16982,variab,variable,16982,root/html528/RooAbsData.html,https://root.cern,https://root.cern/root/html528/RooAbsData.html,6,['variab'],['variable']
Modifiability,"he extra padding added on the left; padright - determines the extra padding added on the right; padtop - determines the extra padding added on the top; padbottom - determines the extra padding added on the bottom . Definition at line 26 of file TGTableLayout.h. Public Member Functions;  TGTableLayoutHints (UInt_t attach_left, UInt_t attach_right, UInt_t attach_top, UInt_t attach_bottom, ULong_t hints=kLHintsNormal, UInt_t padleft=0, UInt_t padright=0, UInt_t padtop=0, UInt_t padbottom=0);  ;  ~TGTableLayoutHints () override;  ; UInt_t GetAttachBottom () const;  ; UInt_t GetAttachLeft () const;  ; UInt_t GetAttachRight () const;  ; UInt_t GetAttachTop () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save layout hints as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutHints;  TGLayoutHints (const TGLayoutHints &lh);  Constructor. ;  ;  TGLayoutHints (ULong_t hints=kLHintsNormal, Int_t padleft=0, Int_t padright=0, Int_t padtop=0, Int_t padbottom=0);  ;  ~TGLayoutHints () override;  Destructor. ;  ; ULong_t GetLayoutHints () const;  ; Int_t GetPadBottom () const;  ; Int_t GetPadLeft () const;  ; Int_t GetPadRight () const;  ; Int_t GetPadTop () const;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void Print (Option_t *option="""") const override;  Printing. ;  ; virtual void SetLayoutHints (ULong_t lh);  ; virtual void SetPadBottom (Int_t v);  ; virtual void SetPadLeft (Int_t v);  ; virtual void SetPadRight (Int_t v);  ; virtual void SetPadTop (Int_t v);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableLayoutHints.html:2046,inherit,inherited,2046,doc/master/classTGTableLayoutHints.html,https://root.cern,https://root.cern/doc/master/classTGTableLayoutHints.html,1,['inherit'],['inherited']
Modifiability,"he fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. Int_t Remove(const char* ref, Bool_t all); Handle remove request. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. void FindUniqueSlaves(); Add to the fUniqueSlave list the active slaves that have a unique; (user) file system image. This information is used to transfer files; only once to nodes that share a file system (an image). Submasters; which are not in fUniqueSlaves are put in the fNonUniqueMasters; list. That list is used to trigger the transferring of files to; the submaster's unique slaves without the need to transfer the file; to the submaster. void ShowData(); List contents of the data directory in the sandbox.; This is the place where files produced by the client queries are kept. void ShowDataDir(const char* dirname); List contents of the data directory 'dirname'. Int_t PollForNewWorkers(); Simulate dynamic addition, for test purposes.; Here we decide how many workers to add, we create them and set the; environment.; This call is called regularly by Collect if the opton is enabled.; Returns the number of new workers added, or <0 on errors. TProofLite(const TProofLite& ). void operator=(const TProofLite& ). TProofLite(); { }. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); Process via TSelector. { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:36603,sandbox,sandbox,36603,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,2,['sandbox'],['sandbox']
Modifiability,"he fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. Int_t Remove(const char* ref, Bool_t all); Handle remove request. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. void FindUniqueSlaves(); Add to the fUniqueSlave list the active slaves that have a unique; (user) file system image. This information is used to transfer files; only once to nodes that share a file system (an image). Submasters; which are not in fUniqueSlaves are put in the fNonUniqueMasters; list. That list is used to trigger the transferring of files to; the submaster's unique slaves without the need to transfer the file; to the submaster. void ShowData(); List contents of the data directory in the sandbox.; This is the place where files produced by the client queries are kept. void ShowDataDir(const char* dirname); List contents of the data directory 'dirname'. TProofLite(const TProofLite& ). void operator=(const TProofLite& ). TProofLite(); { }. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); Process via TSelector. { return TProof::Process(sel, nent, o); }. Long64_t Process(TDSet* dset, TSelector* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); { return TProof::Process(dset, sel, o, nent, fst); }. Long64_t Process(TFileCollection* fc, TSelector* sel, Option_t* o = """", Long64_t ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:37516,sandbox,sandbox,37516,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,1,['sandbox'],['sandbox']
Modifiability,"he file containing the class declaration ; Definition at line 117 of file RooWrapperPdf.h. ◆ evaluate(). double RooWrapperPdf::evaluate ; (; ); const. inlineoverrideprivatevirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 113 of file RooWrapperPdf.h. ◆ forceAnalyticalInt(). bool RooWrapperPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 56 of file RooWrapperPdf.h. ◆ getAnalyticalIntegral(). Int_t RooWrapperPdf::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 63 of file RooWrapperPdf.h. ◆ getAnalyticalIntegralWN(). Int_t RooWrapperPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented from RooAbsReal.; Definition at line 59 of file RooWrapperPdf.h. ◆ getMaxVal(). Int_t RooWrapperPdf::getMaxVal ; (; const RooArgSet & ; vars",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:78286,config,configuration,78286,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,1,['config'],['configuration']
Modifiability,"he file containing the class declaration ; Definition at line 134 of file RooBinSamplingPdf.h. ◆ doEval(). void RooBinSamplingPdf::doEval ; (; RooFit::EvalContext & ; ctx); const. overridevirtual . Integrate the PDF over all its bins, and return a batch with those values. ; Parameters. [in,out]evalDataStruct with evaluation data. ; [in]normSetNormalisation set that's used to evaluate the PDF. . Reimplemented from RooAbsReal.; Definition at line 163 of file RooBinSamplingPdf.cxx. ◆ epsilon(). double RooBinSamplingPdf::epsilon ; (; ); const. inline . Definition at line 109 of file RooBinSamplingPdf.h. ◆ evaluate(). double RooBinSamplingPdf::evaluate ; (; ); const. overrideprotectedvirtual . Integrate the PDF over the current bin of the observable. ; Implements RooAbsReal.; Definition at line 140 of file RooBinSamplingPdf.cxx. ◆ expectedEvents(). double RooBinSamplingPdf::expectedEvents ; (; const RooArgSet * ; nset); const. inlineoverridevirtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented from RooAbsPdf.; Definition at line 80 of file RooBinSamplingPdf.h. ◆ extendMode(). ExtendMode RooBinSamplingPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 79 of file RooBinSamplingPdf.h. ◆ forceAnalyticalInt(). bool RooBinSamplingPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 42 of file RooBinSamplingPdf.h. ◆ generateEvent(). void RooBinSamplingPdf::generateEvent ; (; Int_t ; code). inlineoverridevirtual . Forwards to the PDF's implementation. ; Reimplemented fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:83481,extend,extended,83481,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['extend'],['extended']
Modifiability,"he fill area pattern. ; Definition at line 2700 of file TH2Editor.cxx. ◆ DoHistChanges(). void TH2Editor::DoHistChanges ; (; ). virtual . Slot connected to histogram type, coordinate system, contour combo box. ; Definition at line 1154 of file TH2Editor.cxx. ◆ DoHistComplex(). void TH2Editor::DoHistComplex ; (; ). virtual . Slot connected to the 3D-Plot radio button. ; Definition at line 1111 of file TH2Editor.cxx. ◆ DoHistSimple(). void TH2Editor::DoHistSimple ; (; ). virtual . Slot connected to the 2D-Plot radio button. ; Definition at line 1073 of file TH2Editor.cxx. ◆ DoHistView(). void TH2Editor::DoHistView ; (; ). virtual . Slot connected to the 'Plot' button group. ; Definition at line 1056 of file TH2Editor.cxx. ◆ DoOffsetMoved(). void TH2Editor::DoOffsetMoved ; (; ). virtual . Slot connected to the OffSetSlider. ; It changes the origin of the histogram inbetween a binwidth; rebin the histogram with the new offset given by the slider. problem: histogram with variable binwidth?? ; Definition at line 2181 of file TH2Editor.cxx. ◆ DoOffsetPressed(). void TH2Editor::DoOffsetPressed ; (; ). virtual . Slot connected to the OffSetSlider. ; It saves the OldBinOffset (nessesary for delay draw mode). ; Definition at line 2100 of file TH2Editor.cxx. ◆ DoOffsetReleased(). void TH2Editor::DoOffsetReleased ; (; ). virtual . Slot connected to the OffSetSlider that changes the origin of the histogram inbetween a binwidth; rebin the histogram with the new Offset given by the slider. ; problem: histogram with variable binwidth?? ; Definition at line 2113 of file TH2Editor.cxx. ◆ DoSliderXMoved(). void TH2Editor::DoSliderXMoved ; (; ). virtual . Slot connected to the x-Slider that redraws the histogram with the new slider range. ; Definition at line 2311 of file TH2Editor.cxx. ◆ DoSliderXPressed(). void TH2Editor::DoSliderXPressed ; (; ). virtual . Slot connected to the x axis range slider that initialises the ""virtual"" box which is drawn in delay draw mode. ; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Editor.html:53910,variab,variable,53910,doc/master/classTH2Editor.html,https://root.cern,https://root.cern/doc/master/classTH2Editor.html,1,['variab'],['variable']
Modifiability,"he first function. ;  ; Bool_t fFlagFFT;  Choose FFT or numerical convolution. ;  ; Bool_t fFlagGraph = false;  ! Tells if the graph is already done or not ;  ; std::unique_ptr< TF1 > fFunction1;  First function to be convolved. ;  ; std::unique_ptr< TF1 > fFunction2;  Second function to be convolved. ;  ; std::unique_ptr< TGraph > fGraphConv;  ! Graph of the convolution ;  ; Int_t fNofParams1;  ; Int_t fNofParams2;  ; Int_t fNofPoints;  Number of point for FFT array. ;  ; std::vector< Double_t > fParams1;  ; std::vector< Double_t > fParams2;  ; std::vector< TString > fParNames;  Parameters' names. ;  ; Double_t fXmax;  Maximal bound of the range of the convolution. ;  ; Double_t fXmin;  Minimal bound of the range of the convolution. ;  . Static Private Attributes; static Double_t fgExtraRangeFraction = 0.1;  ! Additional default fraction of the range used for FFT convolution ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TF1Convolution.h>. Inheritance diagram for TF1Convolution:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1Convolution.html:13705,inherit,inherited,13705,doc/master/classTF1Convolution.html,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html,1,['inherit'],['inherited']
Modifiability,"he first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of this track; Double32_t fVertex[3]; //Track vertex position; Int_t fNpoint; //Number of points for this track; Short_t fValid; //Validity criterion; Int_t fNsp; //Number of points for this track with a special value; Double32_t *fPointValue; //[fNsp] a special quantity for some point.; TBits fTriggerBits; //Bits triggered by this track. An example of a batch program to use the Event/Track classes is given; in this directory: MainEvent.; Look also in the same directory at the following macros:; - eventa.C an example how to read the tree; - eventb.C how to read events conditionally. During the processing of the event (optionally) also a large number; of histograms can be filled. The creation and handling of the; histograms is taken care of by the HistogramManager class. Note: This version of the class Event (see EventMT.h and EventMT.cxx; for an alternative) uses static variables to improve performance (by; reducing the number of memory allocations). Consequently, only one; instance of the class Event should be in use at a time (a 2nd instance; would share the array of Tracks with the first instance). Function Members (Methods); public:. Event(); Event(const Event&); virtual~Event(); voidTObject::AbstractMethod(const char* method) const; Track*AddTrack(Float_t random, Float_t ptmin = 1); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuild(Int_t ev, Int_t arg5 = 600, Float_t ptmin = 1); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Event.html:2879,variab,variables,2879,root/html528/Event.html,https://root.cern,https://root.cern/root/html528/Event.html,1,['variab'],['variables']
Modifiability,"he first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of this track; Double32_t fVertex[3]; //Track vertex position; Int_t fNpoint; //Number of points for this track; Short_t fValid; //Validity criterion; Int_t fNsp; //Number of points for this track with a special value; Double32_t *fPointValue; //[fNsp] a special quantity for some point.; TBits fTriggerBits; //Bits triggered by this track. An example of a batch program to use the Event/Track classes is given; in this directory: MainEvent.; Look also in the same directory at the following macros:; - eventa.C an example how to read the tree; - eventb.C how to read events conditionally. During the processing of the event (optionally) also a large number; of histograms can be filled. The creation and handling of the; histograms is taken care of by the HistogramManager class. Note: This version of the class Event (see EventMT.h and EventMT.cxx; for an alternative) uses static variables to improve performance (by; reducing the number of memory allocations). Consequently, only one; instance of the class Event should be in use at a time (a 2nd instance; would share the array of Tracks with the first instance). Function Members (Methods); public:. EventHeader(); EventHeader(const EventHeader&); virtual~EventHeader(); static TClass*Class(); Int_tGetDate() const; Int_tGetEvtNum() const; Int_tGetRun() const; virtual TClass*IsA() const; EventHeader&operator=(const EventHeader&); voidSet(Int_t i, Int_t r, Int_t d); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. Int_tfDate; Int_tfEvtNum; Int_tfRun. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EventHeader(); { }. virtual ~EventHeader(); { }. void Set(Int_t i, Int_t r, Int_t d); { fEvtNum = i; fRun = r; fDate = d; }. Int_t GetEvtNum() const; { return fEvtNum; }. Int_t GetRun() const; { return fRun; }. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/EventHeader.html:2881,variab,variables,2881,root/html528/EventHeader.html,https://root.cern,https://root.cern/root/html528/EventHeader.html,1,['variab'],['variables']
Modifiability,"he first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of this track; Double32_t fVertex[3]; //Track vertex position; Int_t fNpoint; //Number of points for this track; Short_t fValid; //Validity criterion; Int_t fNsp; //Number of points for this track with a special value; Double32_t *fPointValue; //[fNsp] a special quantity for some point.; TBits fTriggerBits; //Bits triggered by this track. An example of a batch program to use the Event/Track classes is given; in this directory: MainEvent.; Look also in the same directory at the following macros:; - eventa.C an example how to read the tree; - eventb.C how to read events conditionally. During the processing of the event (optionally) also a large number; of histograms can be filled. The creation and handling of the; histograms is taken care of by the HistogramManager class. Note: This version of the class Event (see EventMT.h and EventMT.cxx; for an alternative) uses static variables to improve performance (by; reducing the number of memory allocations). Consequently, only one; instance of the class Event should be in use at a time (a 2nd instance; would share the array of Tracks with the first instance). Function Members (Methods); public:. HistogramManager(TDirectory* dir); HistogramManager(const HistogramManager&); virtual~HistogramManager(); static TClass*Class(); voidHfill(Event* event); virtual TClass*IsA() const; HistogramManager&operator=(const HistogramManager&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TH1F*fBx; TH1F*fBy; TH1F*fCharge; TH1F*fMass2; TH1F*fMeanCharge; TH1F*fNpoint; TH1F*fNseg; TH1F*fNtrack; TH1F*fPx; TH1F*fPy; TH1F*fPz; TH1F*fRandom; TH1F*fTemperature; TH1F*fValid; TH1F*fXfirst; TH1F*fXlast; TH1F*fYfirst; TH1F*fYlast; TH1F*fZfirst; TH1F*fZlast. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HistogramManager(TDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/HistogramManager.html:2896,variab,variables,2896,root/html528/HistogramManager.html,https://root.cern,https://root.cern/root/html528/HistogramManager.html,1,['variab'],['variables']
Modifiability,"he first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of this track; Double32_t fVertex[3]; //Track vertex position; Int_t fNpoint; //Number of points for this track; Short_t fValid; //Validity criterion; Int_t fNsp; //Number of points for this track with a special value; Double32_t *fPointValue; //[fNsp] a special quantity for some point.; TBits fTriggerBits; //Bits triggered by this track. An example of a batch program to use the Event/Track classes is given; in this directory: MainEvent.; Look also in the same directory at the following macros:; - eventa.C an example how to read the tree; - eventb.C how to read events conditionally. During the processing of the event (optionally) also a large number; of histograms can be filled. The creation and handling of the; histograms is taken care of by the HistogramManager class. Note: This version of the class Event (see EventMT.h and EventMT.cxx; for an alternative) uses static variables to improve performance (by; reducing the number of memory allocations). Consequently, only one; instance of the class Event should be in use at a time (a 2nd instance; would share the array of Tracks with the first instance). Function Members (Methods); public:. Track(); Track(const Track& orig); Track(Float_t random); virtual~Track(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Track.html:2879,variab,variables,2879,root/html528/Track.html,https://root.cern,https://root.cern/root/html528/Track.html,1,['variab'],['variables']
Modifiability,"he first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of this track; Double32_t fVertex[3]; //Track vertex position; Int_t fNpoint; //Number of points for this track; Short_t fValid; //Validity criterion; Int_t fNsp; //Number of points for this track with a special value; Double32_t *fPointValue; //[fNsp] a special quantity for some point.; TBits fTriggerBits; //Bits triggered by this track. An example of a batch program to use the Event/Track classes is given; in this directory: MainEvent.; Look also in the same directory at the following macros:; - eventa.C an example how to read the tree; - eventb.C how to read events conditionally. During the processing of the event (optionally) also a large number; of histograms can be filled. The creation and handling of the; histograms is taken care of by the HistogramManager class. Note: This version of the class Event (see EventMT.h and EventMT.cxx; for an alternative) uses static variables to improve performance (by; reducing the number of memory allocations). Consequently, only one; instance of the class Event should be in use at a time (a 2nd instance; would share the array of Tracks with the first instance). Function Members (Methods); public:. ~Event(); TMVA::kNN::EventEvent(); TMVA::kNN::EventEvent(const TMVA::kNN::Event&); TMVA::kNN::EventEvent(const TMVA::kNN::VarVec& vec, Double_t weight, Short_t type); TMVA::kNN::EventEvent(const TMVA::kNN::VarVec& vec, Double_t weight, Short_t type, const TMVA::kNN::VarVec& tvec); TMVA::kNN::VarTypeGetDist(const TMVA::kNN::Event& other) const; TMVA::kNN::VarTypeGetDist(TMVA::kNN::VarType var, UInt_t ivar) const; TMVA::kNN::VarTypeGetDist(const TMVA::kNN::VarType var1, const UInt_t ivar) const; UInt_tGetNTgt() const; UInt_tGetNVar() const; const TMVA::kNN::VarVec&GetTargets() const; TMVA::kNN::VarTypeGetTgt(UInt_t i) const; TMVA::kNN::VarTypeGetTgt(const UInt_t i) const; Short_tGetType() const; TMVA::kNN::VarTypeGetVar(UInt_t i) const; TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__kNN__Event.html:2896,variab,variables,2896,root/html528/TMVA__kNN__Event.html,https://root.cern,https://root.cern/root/html528/TMVA__kNN__Event.html,4,['variab'],['variables']
Modifiability,"he first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of this track; Double32_t fVertex[3]; //Track vertex position; Int_t fNpoint; //Number of points for this track; Short_t fValid; //Validity criterion; Int_t fNsp; //Number of points for this track with a special value; Double32_t *fPointValue; //[fNsp] a special quantity for some point.; TBits fTriggerBits; //Bits triggered by this track. An example of a batch program to use the Event/Track classes is given; in this directory: MainEvent.; Look also in the same directory at the following macros:; - eventa.C an example how to read the tree; - eventb.C how to read events conditionally. During the processing of the event (optionally) also a large number; of histograms can be filled. The creation and handling of the; histograms is taken care of by the HistogramManager class. Note: This version of the class Event (see EventMT.h and EventMT.cxx; for an alternative) uses static variables to improve performance (by; reducing the number of memory allocations). Consequently, only one; instance of the class Event should be in use at a time (a 2nd instance; would share the array of Tracks with the first instance). Function Members (Methods); public:. ~Event(); static voidClearDynamicVariables(); voidCopyVarValues(const TMVA::Event& other); TMVA::EventEvent(); TMVA::EventEvent(const TMVA::Event&); TMVA::EventEvent(const vector<Float_t*>*&, UInt_t nvar); TMVA::EventEvent(const vector<Float_t>&, UInt_t theClass, Double_t weight = 1.0, Double_t boostweight = 1.0); TMVA::EventEvent(const vector<Float_t>& values, const vector<Float_t>& targetValues, UInt_t theClass = 0, Double_t weight = 1.0, Double_t boostweight = 1.0); TMVA::EventEvent(const vector<Float_t>& values, const vector<Float_t>& targetValues, const vector<Float_t>& spectatorValues, UInt_t theClass = 0, Double_t weight = 1.0, Double_t boostweight = 1.0); Double_tGetBoostWeight() const; UInt_tGetClass() const; UInt_tGetNSpectators(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Event.html:2881,variab,variables,2881,root/html528/TMVA__Event.html,https://root.cern,https://root.cern/root/html528/TMVA__Event.html,4,['variab'],['variables']
Modifiability,"he first variable; from the parameter of interests of the null model. HypoTestInverter( HybridCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a HybridCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter( FrequentistCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a FrequentistCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter( AsymptoticCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a AsymptoticCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(RooAbsData& data, RooStats::ModelConfig& b, RooStats::ModelConfig& sb, RooRealVar* scannedVariable = 0, RooStats::HypoTestInverter::ECalculatorType type = kFrequentist, double size = 0.05); Constructor from a model for B model and a model for S+B.; An HypoTestCalculator (Hybrid of Frequentis) will be created using the; S+B model as the null and the B model as the alternate; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(const RooStats::HypoTestInverter& rhs); copy-constructor; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. HypoTestInverter & operator=(const RooStats::HypoTestInverter& rhs); a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverter.html:7239,variab,variable,7239,root/html532/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverter.html,2,['variab'],['variable']
Modifiability,"he first variable; from the parameter of interests of the null model. HypoTestInverter( HybridCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a HybridCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter( FrequentistCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a FrequentistCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter( AsymptoticCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a AsymptoticCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(RooAbsData& data, RooStats::ModelConfig& sb, RooStats::ModelConfig& b, RooRealVar* scannedVariable = 0, RooStats::HypoTestInverter::ECalculatorType type = kFrequentist, double size = 0.05); Constructor from a model for B model and a model for S+B.; An HypoTestCalculator (Hybrid of Frequentis) will be created using the; S+B model as the null and the B model as the alternate; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(const RooStats::HypoTestInverter& rhs); copy-constructor; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. HypoTestInverter & operator=(const RooStats::HypoTestInverter& rhs); a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverter.html:7359,variab,variable,7359,root/html534/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverter.html,2,['variab'],['variable']
Modifiability,"he first variable; from the parameter of interests of the null model. HypoTestInverter( HybridCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a HybridCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter( FrequentistCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a FrequentistCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter( AsymptoticCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a AsymptoticCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(RooAbsData& data, RooStats::ModelConfig& sb, RooStats::ModelConfig& b, RooRealVar* scannedVariable = 0, RooStats::HypoTestInverter::ECalculatorType type = kFrequentist, double size = 0.050000000000000003); Constructor from a model for B model and a model for S+B.; An HypoTestCalculator (Hybrid of Frequentis) will be created using the; S+B model as the null and the B model as the alternate; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(const RooStats::HypoTestInverter& rhs); copy-constructor; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. HypoTestInverter & operator=(const RooStats::HypoTestI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverter.html:7869,variab,variable,7869,root/html602/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverter.html,4,['variab'],['variable']
Modifiability,"he formula given as a parameter.; Max$(formula): return the maximum (within one TTree entry) of the value of the; elements of the formula given as a parameter.; MinIf$(formula,condition); MaxIf$(formula,condition): return the minimum (maximum) (within one TTree entry); of the value of the elements of the formula given as a parameter; if they match the condition. If no element matches the condition,; the result is zero. To avoid the resulting peak at zero, use the; pattern:; tree->Draw(""MinIf$(formula,condition)"",""condition"");; which will avoid calculation MinIf$ for the entries that have no match; for the condition. Alt$(primary,alternate) : return the value of ""primary"" if it is available; for the current iteration otherwise return the value of ""alternate"".; For example, with arr1[3] and arr2[2]; tree->Draw(""arr1+Alt$(arr2,0)"");; will draw arr1[0]+arr2[0] ; arr1[1]+arr2[1] and arr1[2]+0; Or with a variable size array arr3; tree->Draw(""Alt$(arr3[0],0)+Alt$(arr3[1],0)+Alt$(arr3[2],0)"");; will draw the sum arr3 for the index 0 to min(2,actual_size_of_arr3-1); As a comparison; tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; will draw the sum arr3 for the index 0 to 2 only if the; actual_size_of_arr3 is greater or equal to 3.; Note that the array in 'primary' is flatened/linearilized thus using; Alt$ with multi-dimensional arrays of different dimensions in unlikely; to yield the expected results. To visualize a bit more what elements; would be matched by TTree::Draw, TTree::Scan can be used:; tree->Scan(""arr1:Alt$(arr2,0)"");; will print on one line the value of arr1 and (arr2,0) that will be; matched by; tree->Draw(""arr1-Alt$(arr2,0)"");. The ternary operator is not directly support in TTree::Draw however, to plot the; equivalent of 'var2<20 ? -99 : var1', you can use:; tree->Draw(""(var2<20)*99+(var2>=20)*var1"","""");. Drawing a user function accessing the TTree data directly. If the formula contains a file name, TTree::MakeProxy will be used; to load and execute this file. In part",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:77157,variab,variable,77157,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['variab'],['variable']
Modifiability,"he formula given as a parameter.; Max$(formula): return the maximum (within one TTree entry) of the value of the; elements of the formula given as a parameter.; MinIf$(formula,condition); MaxIf$(formula,condition): return the minimum (maximum) (within one TTree entry); of the value of the elements of the formula given as a parameter; if they match the condition. If no element matches the condition,; the result is zero. To avoid the resulting peak at zero, use the; pattern:; tree->Draw(""MinIf$(formula,condition)"",""condition"");; which will avoid calculation MinIf$ for the entries that have no match; for the condition. Alt$(primary,alternate) : return the value of ""primary"" if it is available; for the current iteration otherwise return the value of ""alternate"".; For example, with arr1[3] and arr2[2]; tree->Draw(""arr1+Alt$(arr2,0)"");; will draw arr1[0]+arr2[0] ; arr1[1]+arr2[1] and arr1[2]+0; Or with a variable size array arr3; tree->Draw(""Alt$(arr3[0],0)+Alt$(arr3[1],0)+Alt$(arr3[2],0)"");; will draw the sum arr3 for the index 0 to min(2,actual_size_of_arr3-1); As a comparison; tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; will draw the sum arr3 for the index 0 to 2 only if the; actual_size_of_arr3 is greater or equal to 3.; Note that the array in 'primary' is flattened/linearized thus using; Alt$ with multi-dimensional arrays of different dimensions in unlikely; to yield the expected results. To visualize a bit more what elements; would be matched by TTree::Draw, TTree::Scan can be used:; tree->Scan(""arr1:Alt$(arr2,0)"");; will print on one line the value of arr1 and (arr2,0) that will be; matched by; tree->Draw(""arr1-Alt$(arr2,0)"");. The ternary operator is not directly supported in TTree::Draw however, to plot the; equivalent of 'var2<20 ? -99 : var1', you can use:; tree->Draw(""(var2<20)*99+(var2>=20)*var1"","""");. Drawing a user function accessing the TTree data directly. If the formula contains a file name, TTree::MakeProxy will be used; to load and execute this file. In par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:79982,variab,variable,79982,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['variab'],['variable']
Modifiability,"he function returns the number of bytes committed to the; 1223/// individual branches. If a write error occurs, the number of; 1224/// bytes returned is -1. If no data are written, because, e.g.,; 1225/// the branch is disabled, the number of bytes returned is 0.; 1226///; 1227/// Note: We not not use any member functions from TLeafElement!; 1228 ; 1229Int_t TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper *imtHelper); 1230{; 1231 Int_t nbytes = 0;; 1232 Int_t nwrite = 0;; 1233 Int_t nerror = 0;; 1234 Int_t nbranches = fBranches.GetEntriesFast();; 1235 ; 1236 ValidateAddress();; 1237 ; 1238 //; 1239 // If we are a top-level branch, update addresses.; 1240 //; 1241 ; 1242 if (fID < 0) {; 1243 if (!fObject) {; 1244 Error(""Fill"", ""attempt to fill branch %s while address is not set"", GetName());; 1245 return 0;; 1246 }; 1247 }; 1248 ; 1249 //; 1250 // If the tree has a TRefTable, set the current branch if; 1251 // branch is not a basic type.; 1252 //; 1253 ; 1254 // FIXME: This test probably needs to be extended past 10.; 1255 if ((fType >= -1) && (fType < 10)) {; 1256 TBranchRef* bref = fTree->GetBranchRef();; 1257 if (bref) {; 1258 fBranchID = bref->SetParent(this, fBranchID);; 1259 }; 1260 }; 1261 ; 1262 if (!nbranches) {; 1263 // No sub-branches.; 1264 if (!TestBit(kDoNotProcess)) {; 1265 nwrite = TBranch::FillImpl(imtHelper);; 1266 if (nwrite < 0) {; 1267 Error(""Fill"", ""Failed filling branch:%s, nbytes=%d"", GetName(), nwrite);; 1268 ++nerror;; 1269 } else {; 1270 nbytes += nwrite;; 1271 }; 1272 }; 1273 } else {; 1274 // We have sub-branches.; 1275 if (fType == 3 || fType == 4) {; 1276 // TClonesArray or STL container counter; 1277 nwrite = TBranch::FillImpl(imtHelper);; 1278 if (nwrite < 0) {; 1279 Error(""Fill"", ""Failed filling branch:%s, nbytes=%d"", GetName(), nwrite);; 1280 ++nerror;; 1281 } else {; 1282 nbytes += nwrite;; 1283 }; 1284 } else {; 1285 ++fEntries;; 1286 }; 1287 for (Int_t i = 0; i < nbranches; ++i) {; 1288 TBranchElement* branch = (TBranchE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:43781,extend,extended,43781,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['extend'],['extended']
Modifiability,"he given style. ;  . Protected Attributes; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TVirtualX.h>. Inheritance diagram for TVirtualX:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EBoxMode. enum TVirtualX::EBoxMode. EnumeratorkHollow ; kFilled . Definition at line 50 of file TVirtualX.h. ◆ EDrawMode. enum TVirtualX::EDrawMode. EnumeratorkCopy ; kXor ; kInvert . Definition at line 49 of file TVirtualX.h. ◆ ETextMode. enum Option_t Option_t TPoint TPoint const char TVirtualX::ETextMode. EnumeratorkClear ; kOpaque . Definition at line 51 of file TVirtualX.h. ◆ ETextSetMode. enum TVirtualX::ETextSetMode. EnumeratorkCheck ; kLoad . Definition at line 52 of file TVirtualX.h. Constructor & Destructor Documentation. ◆ TVirtualX() [1/2]. TVirtualX::TVirtualX ; (; ). inline . Definition at line 58 of file TV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:48107,inherit,inherited,48107,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,2,['inherit'],['inherited']
Modifiability,"he given style. ;  ;  Static Public Member Functions inherited from TArrayF; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1K.html:42684,variab,variable,42684,doc/master/classTH1K.html,https://root.cern,https://root.cern/doc/master/classTH1K.html,1,['variab'],['variable']
Modifiability,"he index category. RooSimultaneous always returns the value of the PDF that is associated with the current value of the index category.; Extended likelihood fitting is supported if all components support extended likelihood mode. The expected number of events by a RooSimultaneous is that of the component p.d.f. selected by the index category.; The index category can be accessed using indexCategory(). Generating events; When generating events from a RooSimultaneous, the index category has to be added to the dataset. Further, the PDF needs to know the relative probabilities of each category, i.e., how many events are in which category. This can be achieved in two ways:; Generating with proto data that have category entries: An event from the same category as in the proto data is created for each event in the proto data. See RooAbsPdf::generate(const RooArgSet&,const RooDataSet&,Int_t,bool,bool,bool) const.; No proto data: A category is chosen randomly. NoteThis requires that the PDFs building the simultaneous are extended. In this way, the relative probability of each category can be calculated from the number of events in each category. PyROOT; Some member functions of RooSimultaneous that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooSimultaneous::plotOn. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; pdfSim.plotOn(frame, ROOT.RooFit.Slice(sample,""control""), ROOT.RooFit.ProjWData(sampleSet, combData)); ; # With keyword arguments:; simPdf.plotOn(frame, Slice=(sample, ""control""), ProjWData=(sampleSet, combData)). Definition at line 41 of file RooSimultaneous.h. Classes; class  CacheElem;  ; struct  InitializationOutput;  Internal struct used for initialization. More...;  . Public Member Functions;  RooSimultaneous ();  ;  RooSimultaneous (const char *name, const char *title, const RooArgList &pdfList, RooAbsCategoryLValue &indexCat);  Constructor from index category and full list of P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:1680,extend,extended,1680,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['extend'],['extended']
Modifiability,"he list.Definition TList.cxx:98. VI.3 Draw a TEfficiency object; A TEfficiency object can be drawn by calling the usual TEfficiency::Draw method. At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects. In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw method. For 2-dimensional TEfficiency objects, you can pass the same options as for a TH2::Draw object. VI.4 TEfficiency object's axis customisation; The axes of a TEfficiency object can be accessed and customised by calling the GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis methods. Note that in order to access the painted graph via GetPaintedGraph(), one should either call Paint or, better, gPad->Update().; {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; c1->Divide(2,1);; ; //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;; ; bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; c1->cd(1);; pEff->Draw(""AP"");; c1->cd(2);; pEff->Draw(""AP"");; gPad->Update();; pEff->GetPaintedGraph()->GetXaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleOffset(0.85);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetYaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetRangeUser(3,7);; }; gPad#define gPadDefinition TVirtualPad.h:308; TAttAxis::SetTitleOffsetvirtual void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:29030,variab,variable,29030,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['variab'],['variable']
Modifiability,"he manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigma; RooRealProxywidth; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooVoigtian.html:44322,config,configuration,44322,root/html602/RooVoigtian.html,https://root.cern,https://root.cern/root/html602/RooVoigtian.html,4,['config'],['configuration']
Modifiability,"he maximum Likelihood method, exploiting discriminating variables to; disentangle signal from background. The crucial point for such an; analysis to be reliable is to use an exhaustive list of sources of; events combined with an accurate description of all the Probability; Density Functions (PDF).; To assess the validity of the fit, a convincing quality check; is to explore further the data sample by examining the distributions of; control variables. A control variable can be obtained for instance by; removing one of the discriminating variables before performing again; the maximum Likelihood fit: this removed variable is a control; variable. The expected distribution of this control variable, for; signal, is to be compared to the one extracted, for signal, from the; data sample. In order to be able to do so, one must be able to unfold; from the distribution of the whole data sample.; The TSPlot method allows to reconstruct the distributions for; the control variable, independently for each of the various sources of; events, without making use of any a priori knowledge on this; variable. The aim is thus to use the knowledge available for the; discriminating variables to infer the behaviour of the individual; sources of events with respect to the control variable. TSPlot is optimal if the control variable is uncorrelated with the discriminating variables. A detail description of the formalism itself, called ; , is given in [1]. The method. The ; technique is developped in the above context of a maximum Likelihood method making use of discriminating variables.; One considers a data sample in which are merged several species; of events. These species represent various signal components and; background components which all together account for the data sample.; The different terms of the log-Likelihood are:. : the total number of events in the data sample,. : the number of species of events populating the data sample,. : the number of events expected on the average for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:1338,variab,variable,1338,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,12,['variab'],['variable']
Modifiability,"he merged tree. Bool_t Notify(); Function called when loading a new class library. void OptimizeBaskets(ULong64_t maxMemory = 10000000, Float_t minComp = 1.1, Option_t* option = """"); This function may be called after having filled some entries in a Tree; Using the information in the existing branch buffers, it will reassign; new branch buffer sizes to optimize time and memory. The function computes the best values for branch buffer sizes such that; the total buffer sizes is less than maxMemory and nearby entries written; at the same time.; In case the branch compression factor for the data written so far is less; than compMin, the compression is disabled. if option =""d"" an analysis report is printed. TPrincipal* Principal(const char* varexp = """", const char* selection = """", Option_t* option = ""np"", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Interface to the Principal Components Analysis class. Create an instance of TPrincipal; Fill it with the selected variables; if option ""n"" is specified, the TPrincipal object is filled with; normalized variables.; If option ""p"" is specified, compute the principal components; If option ""p"" and ""d"" print results of analysis; If option ""p"" and ""h"" generate standard histograms; If option ""p"" and ""c"" generate code of conversion functions; return a pointer to the TPrincipal object. It is the user responsability; to delete this object.; The option default value is ""np"". see TTree::Draw for explanation of the other parameters. The created object is named ""principal"" and a reference to it; is added to the list of specials Root objects.; you can retrieve a pointer to the created object via:; TPrincipal *principal =; (TPrincipal*)gROOT->GetListOfSpecials()->FindObject(""principal"");. void Print(Option_t* option = """") const; Print a summary of the tree contents. If option contains ""all"" friend trees are also printed.; If option contains ""toponly"" only the top level branches are printed. Wildcarding can be used to print only a su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:105303,variab,variables,105303,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['variab'],['variables']
Modifiability,"he merged tree. Bool_t Notify(); Function called when loading a new class library. void OptimizeBaskets(ULong64_t maxMemory = 10000000, Float_t minComp = 1.1, Option_t* option = """"); This function may be called after having filled some entries in a Tree; Using the information in the existing branch buffers, it will reassign; new branch buffer sizes to optimize time and memory. The function computes the best values for branch buffer sizes such that; the total buffer sizes is less than maxMemory and nearby entries written; at the same time.; In case the branch compression factor for the data written so far is less; than compMin, the compression is disabled. if option =""d"" an analysis report is printed. TPrincipal* Principal(const char* varexp = """", const char* selection = """", Option_t* option = ""np"", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Interface to the Principal Components Analysis class. Create an instance of TPrincipal; Fill it with the selected variables; if option ""n"" is specified, the TPrincipal object is filled with; normalized variables.; If option ""p"" is specified, compute the principal components; If option ""p"" and ""d"" print results of analysis; If option ""p"" and ""h"" generate standard histograms; If option ""p"" and ""c"" generate code of conversion functions; return a pointer to the TPrincipal object. It is the user responsability; to delete this object.; The option default value is ""np"". see TTree::Draw for explanation of the other parameters. The created object is named ""principal"" and a reference to it; is added to the list of specials Root objects.; you can retrieve a pointer to the created object via:; TPrincipal *principal =; (TPrincipal*)gROOT->GetListOfSpecials()->FindObject(""principal"");. void Print(Option_t* option = """") const; Print a summary of the tree contents. If option contains ""all"" friend trees are also printed.; If option contains ""toponly"" only the top level branches are printed.; If option contains ""clusters"" information",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:108856,variab,variables,108856,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,4,['variab'],['variables']
Modifiability,"he misclassification rate of a pruned tree a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at any node, hence this tree quality testing will stop there, hence test the pruned tree (while the full tree is still in place for normal/later use) ; Definition at line 1043 of file DecisionTree.cxx. ◆ TrainNode(). Double_t TMVA::DecisionTree::TrainNode ; (; const EventConstList & ; eventSample, . DecisionTreeNode * ; node . ). inline . Definition at line 108 of file DecisionTree.h. ◆ TrainNodeFast(). Double_t TMVA::DecisionTree::TrainNodeFast ; (; const EventConstList & ; eventSample, . TMVA::DecisionTreeNode * ; node . ). Decide how to split a node using one of the variables that gives the best separation of signal/background. ; In order to do this, for each variable a scan of the different cut values in a grid (grid = fNCuts) is performed and the resulting separation gains are compared. in addition to the individual variables, one can also ask for a fisher discriminant being built out of (some) of the variables and used as a possible multivariate split. ; Definition at line 1374 of file DecisionTree.cxx. ◆ TrainNodeFull(). Double_t TMVA::DecisionTree::TrainNodeFull ; (; const EventConstList & ; eventSample, . TMVA::DecisionTreeNode * ; node . ). train a node by finding the single optimal cut for a single variable that best separates signal and background (maximizes the separation gain) ; Definition at line 2536 of file DecisionTree.cxx. Member Data Documentation. ◆ fAnalysisType. Types::EAnalysisType TMVA::DecisionTree::fAnalysisType. private . kClassification(=0=false) or kRegression(=1=true) ; Definition at line 239 of file DecisionTree.h. ◆ fDataSetInfo. DataSetInfo* TMVA::DecisionTree::fDataSetInfo. private . Definition at line 241 of file DecisionTree.h. ◆ fgDebugLevel. const Int_t TMVA::DecisionTree::fgDebugLevel = 0. staticprivate . debug level determining some printout/control plots etc. ; Definition at line 236 of file DecisionTree.h. ◆ fgRa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:26793,variab,variables,26793,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,2,['variab'],['variables']
Modifiability,"he missing entries are not included in the histogram.; Use TTree::GetListOfFriends to retrieve the list of friends from a tree.; When the tree is written to file (TTree::Write), the friends list is saved with it. Moreover, when the tree is retrieved, the trees on the friends list are also retrieved and the friendship restored. When a tree is deleted, the elements of the friend list are also deleted. It is possible to declare a friend tree that has the same internal structure (same branches and leaves) as the original tree, and compare the same values by specifying the tree.; tree.Draw(""var:ft1.var:ft2.var"");; The example code is in $ROOTSYS/tutorials/tree/tree3.C. Here is the script:; void tree3w() {; // Example of a Tree where branches are variable length arrays; // A second Tree is created and filled in parallel.; // Run this script with .x tree3.C; // In the function treer, the first Tree is open.; // The second Tree is declared friend of the first tree.; // TTree::Draw is called with variables from both Trees.; const Int_t kMaxTrack = 500;; Int_t ntrack;; Int_t stat[kMaxTrack];; Int_t sign[kMaxTrack];; Float_t px[kMaxTrack];; Float_t py[kMaxTrack];; Float_t pz[kMaxTrack];; Float_t pt[kMaxTrack];; Float_t zv[kMaxTrack];; Float_t chi2[kMaxTrack];; Double_t sumstat;. // create the first root file with a tree; TFile f(""tree3.root"",""recreate"");; TTree *t3 = new TTree(""t3"",""Reconst ntuple"");; t3->Branch(""ntrack"",&ntrack,""ntrack/I"");; t3->Branch(""stat"",stat,""stat[ntrack]/I"");; t3->Branch(""sign"",sign,""sign[ntrack]/I"");; t3->Branch(""px"",px,""px[ntrack]/F"");; t3->Branch(""py"",py,""py[ntrack]/F"");; t3->Branch(""pz"",pz,""pz[ntrack]/F"");; t3->Branch(""zv"",zv,""zv[ntrack]/F"");; t3->Branch(""chi2"",chi2,""chi2[ntrack]/F"");. // create the second root file with a different tree; TFile fr(""tree3f.root"",""recreate"");; TTree *t3f = new TTree(""t3f"",""a friend Tree"");; t3f->Branch(""ntrack"",&ntrack,""ntrack/I"");; t3f->Branch(""sumstat"",&sumstat,""sumstat/D"");; t3f->Branch(""pt"",pt,""pt[ntrack]/F"");. /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:572673,variab,variables,572673,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['variab'],['variables']
Modifiability,"he name signal ; Definition at line 235 of file DataSetInfo.h. ◆ fSpectators. std::vector<VariableInfo> TMVA::DataSetInfo::fSpectators. private . list of spectators expressions/internal names ; Definition at line 214 of file DataSetInfo.h. ◆ fSplitOptions. TString TMVA::DataSetInfo::fSplitOptions. private . Definition at line 223 of file DataSetInfo.h. ◆ fTargets. std::vector<VariableInfo> TMVA::DataSetInfo::fTargets. private . list of targets expressions/internal names ; Definition at line 213 of file DataSetInfo.h. ◆ fTargetsForMulticlass. std::vector<Float_t>* TMVA::DataSetInfo::fTargetsForMulticlass. private . -> all targets 0 except the one with index==classNumber ; Definition at line 237 of file DataSetInfo.h. ◆ fTestingSumBackgrWeights. Double_t TMVA::DataSetInfo::fTestingSumBackgrWeights. private . Definition at line 228 of file DataSetInfo.h. ◆ fTestingSumSignalWeights. Double_t TMVA::DataSetInfo::fTestingSumSignalWeights. private . Definition at line 227 of file DataSetInfo.h. ◆ fTrainingSumBackgrWeights. Double_t TMVA::DataSetInfo::fTrainingSumBackgrWeights. private . Definition at line 226 of file DataSetInfo.h. ◆ fTrainingSumSignalWeights. Double_t TMVA::DataSetInfo::fTrainingSumSignalWeights. private . Definition at line 225 of file DataSetInfo.h. ◆ fVarArrays. std::map<TString, int> TMVA::DataSetInfo::fVarArrays. private . Definition at line 217 of file DataSetInfo.h. ◆ fVariables. std::vector<VariableInfo> TMVA::DataSetInfo::fVariables. private . list of variable expressions/internal names ; Definition at line 212 of file DataSetInfo.h. ◆ fVerbose. Bool_t TMVA::DataSetInfo::fVerbose. private . Verbosity. ; Definition at line 233 of file DataSetInfo.h. Libraries for TMVA::DataSetInfo:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/DataSetInfo.h; tmva/tmva/src/DataSetInfo.cxx. TMVADataSetInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html:33723,variab,variable,33723,doc/master/classTMVA_1_1DataSetInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html,1,['variab'],['variable']
Modifiability,"he new bin which contains the bin center; 1400/// of the old bins. It is possible that information from the old binning are attached; 1401/// to the under-/overflow bins of the new binning.; 1402///; 1403/// examples: if hp is an existing TProfile with 100 bins; 1404///; 1405/// ~~~ {.cpp}; 1406/// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; 1407/// hp->Rebin(24,""hpnew"",xbins); //creates a new variable bin size profile hpnew; 1408/// ~~~; 1409 ; 1410TH1 *TProfile::Rebin(Int_t ngroup, const char*newname, const Double_t *xbins); 1411{; 1412 Int_t nbins = fXaxis.GetNbins();; 1413 Double_t xmin = fXaxis.GetXmin();; 1414 Double_t xmax = fXaxis.GetXmax();; 1415 if ((ngroup <= 0) || (ngroup > nbins)) {; 1416 Error(""Rebin"", ""Illegal value of ngroup=%d"",ngroup);; 1417 return nullptr;; 1418 }; 1419 if (!newname && xbins) {; 1420 Error(""Rebin"",""if xbins is specified, newname must be given"");; 1421 return nullptr;; 1422 }; 1423 ; 1424 Int_t newbins = nbins/ngroup;; 1425 if (!xbins) {; 1426 Int_t nbg = nbins/ngroup;; 1427 if (nbg*ngroup != nbins) {; 1428 Warning(""Rebin"", ""ngroup=%d must be an exact divider of nbins=%d"",ngroup,nbins);; 1429 }; 1430 }; 1431 else {; 1432 // in the case of xbins given (rebinning in variable bins) ngroup is the new number of bins.; 1433 // and number of grouped bins is not constant.; 1434 // when looping for setting the contents for the new histogram we; 1435 // need to loop on all bins of original histogram. Set then ngroup=nbins; 1436 newbins = ngroup;; 1437 ngroup = nbins;; 1438 }; 1439 ; 1440 // Save old bin contents into a new array; 1441 Double_t *oldBins = new Double_t[nbins+2];; 1442 Double_t *oldCount = new Double_t[nbins+2];; 1443 Double_t *oldErrors = new Double_t[nbins+2];; 1444 Double_t *oldBinw2 = (fBinSumw2.fN ? new Double_t[nbins+2] : nullptr );; 1445 Int_t bin, i;; 1446 Double_t *cu1 = GetW();; 1447 Double_t *er1 = GetW2();; 1448 Double_t *en1 = GetB();; 1449 Double_t *ew1 = GetB2();; 1450 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:52998,variab,variable,52998,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['variab'],['variable']
Modifiability,"he next are some rules to remember:. name = * means all, but don’t remove the subdirectories; cycle =* means all cycles (memory and file); cycle ="""" means apply to a memory object; cycle = 9999 also means apply to a memory object; namecycle = """" means the same as namecycle =“T*”; namecycle = T* delete subdirectories. For example to delete a directory from a file, you must specify the directory cycle:; root[] f->Delete(""Wed011003;1""); Some other examples of namecycle format are:. foo:delete the object named foo from memory; foo;1: delete the cycle 1 of the object named foo from the file; foo;*: delete all cycles of foo from the file and also from memory; *;2: delete all objects with cycle number 2 from the file; *;*: delete all objects from memory and from the file; T*;*: delete all objects from memory and from the file including all subdirectories. 11.3 Streamers; To follow the discussion on Streamers, you need to know what a simple data type is. A variable is of a simple data type if it cannot be decomposed into other types. Examples of simple data types are longs, shorts, floats, and chars. In contrast, a variable is of a composite data type if it can be decomposed. For example, classes, structures, and arrays are composite types. Simple types are also called primitive types, basic types, and Cling sometimes calls them fundamental types.; When we say, “writing an object to a file”, we actually mean writing the current values of the data members. The most common way to do this is to decompose (also called the serialization of) the object into its data members and write them to disk. The decomposition is the job of the Streamer. Every class with ambitions to be stored in a file has a Streamerthat decomposes it and “streams” its members into a buffer.; The methods of the class are not written to the file, it contains only the persistent data members. To decompose the parent classes, the Streamercalls the Streamerof the parent classes. It moves up the inheritance tree ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:465552,variab,variable,465552,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['variab'],['variable']
Modifiability,"he node and recursively all it's daughters. ~BinarySearchTreeNode(); node destructor. Bool_t GoesRight(const TMVA::Event& ) const; check if the event fed into the node goes/decends to the right daughter. Bool_t GoesLeft(const TMVA::Event& ) const; check if the event fed into the node goes/decends to the left daughter. Bool_t EqualsMe(const TMVA::Event& ) const; check if the event fed into the node actually equals the event; that forms the node (in case of a search tree). void Print(ostream& os) const; print the node. void PrintRec(ostream& os) const; recursively print the node and its daughters (--> print the 'tree'). Bool_t ReadDataRecord(istream& is, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); Read the data block. void ReadAttributes(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); read attributes from XML. void AddAttributesToNode(void* node) const; adding attributes to tree node. void AddContentToNode(stringstream& s) const; adding attributes to tree node. void ReadContent(stringstream& s); read events from node. Node* CreateNode() const; { return new BinarySearchTreeNode(); }. void SetSelector(Short_t i); set index of variable used for discrimination at this node. { fSelector = i; }. Short_t GetSelector() const; return index of variable used for discrimination at this node. { return fSelector; }. const std::vector<Float_t> & GetEventV() const; { return fEventV; }. Float_t GetWeight() const; { return fWeight; }. UInt_t GetClass() const; Bool_t IsSignal() const { return (fClass == fSignalClass); }. { return fClass; }. const std::vector<Float_t> & GetTargets() const; { return fTargets; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: BinarySearchTreeNode.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__BinarySearchTreeNode.html:5121,variab,variable,5121,root/html530/TMVA__BinarySearchTreeNode.html,https://root.cern,https://root.cern/root/html530/TMVA__BinarySearchTreeNode.html,2,['variab'],['variable']
Modifiability,"he number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:31642,layers,layers,31642,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['layers'],['layers']
Modifiability,"he number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMultiRootFinder.h 38726 2011-04-04 14:05:51Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMultiRootFinder.html:6968,config,configurations,6968,root/html530/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMultiRootFinder.html,1,['config'],['configurations']
Modifiability,"he number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMultiRootFinder.h 38726 2011-04-04 14:05:51Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLMultiRootFinder.html:6968,config,configurations,6968,root/html532/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLMultiRootFinder.html,1,['config'],['configurations']
Modifiability,"he numeric index value. Real dimensions; can be constructed from either 'Double_t' or 'Float_t' tree branches. In the; latter case, an automatic conversion is applied. The 'cuts' string is an optional; RooFormula expression and can be used to select the subset of the data points; in 'dset' to be copied. The cut expression can refer to any variable in the; vars argset. For cuts involving variables other than those contained in; the vars argset, such as intermediate formula objects, use the; equivalent constructor accepting RooFormulaVar reference as cut specification. RooDataSet(RooDataSet const& other, const char* newname = 0); Copy constructor. RooDataSet(const char* name, const char* title, RooDataSet* ntuple, const RooArgSet& vars, const RooFormulaVar* cutVar, const char* cutRange, int nStart, int nStop, Bool_t copyCache, const char* wgtVarName = 0); Protected constructor for internal use only. RooArgSet addWgtVar(const RooArgSet& origVars, const RooAbsArg* wgtVar); Helper function for constructor that adds optional weight variable to construct; total set of observables. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Return a clone of this dataset containing only the cached variables. RooAbsData* emptyClone(const char* newName = 0, const char* newTitle = 0, const RooArgSet* vars = 0) const; Return an empty clone of this dataset. If vars is not null, only the variables in vars; are added to the definition of the empty clone. void initialize(const char* wgtVarName); Initialize the dataset. If wgtVarName is not null, interpret the observable; with that name as event weight. RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ~RooDataSet(); Destructor. RooDataHist* binnedClone(const char* newN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataSet.html:23605,variab,variable,23605,root/html526/RooDataSet.html,https://root.cern,https://root.cern/root/html526/RooDataSet.html,4,['variab'],['variable']
Modifiability,"he numeric index value. Real dimensions; can be constructed from either 'Double_t' or 'Float_t' tree branches. In the; latter case, an automatic conversion is applied. The 'cuts' string is an optional; RooFormula expression and can be used to select the subset of the data points; in 'dset' to be copied. The cut expression can refer to any variable in the; vars argset. For cuts involving variables other than those contained in; the vars argset, such as intermediate formula objects, use the; equivalent constructor accepting RooFormulaVar reference as cut specification. RooDataSet(RooDataSet const& other, const char* newname = 0); Copy constructor. RooDataSet(const char* name, const char* title, RooDataSet* ntuple, const RooArgSet& vars, const RooFormulaVar* cutVar, const char* cutRange, int nStart, int nStop, Bool_t copyCache, const char* wgtVarName = 0); Protected constructor for internal use only. RooArgSet addWgtVar(const RooArgSet& origVars, const RooAbsArg* wgtVar); Helper function for constructor that adds optional weight variable to construct; total set of observables. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Return a clone of this dataset containing only the cached variables. RooAbsData* emptyClone(const char* newName = 0, const char* newTitle = 0, const RooArgSet* vars = 0, const char* wgtVarName = 0) const; Return an empty clone of this dataset. If vars is not null, only the variables in vars; are added to the definition of the empty clone. void initialize(const char* wgtVarName); Initialize the dataset. If wgtVarName is not null, interpret the observable; with that name as event weight. RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ~RooDataSet(); Destructor. RooDataHist* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataSet.html:25497,variab,variable,25497,root/html534/RooDataSet.html,https://root.cern,https://root.cern/root/html534/RooDataSet.html,1,['variab'],['variable']
Modifiability,"he numeric index value. Real dimensions; can be constructed from either 'Double_t' or 'Float_t' tree branches. In the; latter case, an automatic conversion is applied. The 'cuts' string is an optional; RooFormula expression and can be used to select the subset of the data points; in 'dset' to be copied. The cut expression can refer to any variable in the; vars argset. For cuts involving variables other than those contained in; the vars argset, such as intermediate formula objects, use the; equivalent constructor accepting RooFormulaVar reference as cut specification. RooDataSet(const RooDataSet& other, const char* newname = 0); Copy constructor. RooDataSet(const char* name, const char* title, RooDataSet* ntuple, const RooArgSet& vars, const RooFormulaVar* cutVar, const char* cutRange, int nStart, int nStop, Bool_t copyCache, const char* wgtVarName = 0); Protected constructor for internal use only. RooArgSet addWgtVar(const RooArgSet& origVars, const RooAbsArg* wgtVar); Helper function for constructor that adds optional weight variable to construct; total set of observables. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Return a clone of this dataset containing only the cached variables. RooAbsData* emptyClone(const char* newName = 0, const char* newTitle = 0, const RooArgSet* vars = 0, const char* wgtVarName = 0) const; Return an empty clone of this dataset. If vars is not null, only the variables in vars; are added to the definition of the empty clone. void initialize(const char* wgtVarName); Initialize the dataset. If wgtVarName is not null, interpret the observable; with that name as event weight. RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ~RooDataSet(); Destructor. RooDataHist* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataSet.html:26761,variab,variable,26761,root/html602/RooDataSet.html,https://root.cern,https://root.cern/root/html602/RooDataSet.html,2,['variab'],['variable']
Modifiability,"he object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive cen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Derivator.html:3644,adapt,adaptive,3644,root/html602/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Derivator.html,2,['adapt'],['adaptive']
Modifiability,"he of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooJohnson.h>. Inheritance diagram for RooJohnson:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ AnaInt_t. enum RooJohnson::AnaInt_t. private . EnumeratorkMass ; kMean ; kLambda ; kGamma ; kDelta . Definition at line 46 of file RooJohnson.h. Constructor & Destructor Documentation. ◆ RooJohnson() [1/3]. RooJohnson::RooJohnson ; (; ). inline . Definition at line 26 of file RooJohnson.h. ◆ RooJohnson() [2/3]. RooJohnson::RooJohnson ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; mass, . RooAbsReal & ; mu, . RooAbsReal & ; lambda, . RooAbsReal & ; gamma, . RooAbsReal & ; delta, . double ; massThreshold = -std::numeric_limits<double>::max() . ). Construct a new Johnson PDF. ; Parameters. nameName that identifies the PDF in computations ; titleTitle for plotting ; massThe variable of the PDF. Often this is a mass. ; muLocation parameter of the Gaussian component. ; lambdaWidth parameter (>0) of the Gaussian component. ; gammaShape parameter that distorts distribution to left/right. ; deltaShape parameter (>0) that determines strength of Gaussian-like component. ; massThresholdSet PDF to zero below this threshold. . Definition at line 66 of file RooJohnson.cxx. ◆ RooJohnson() [3/3]. RooJohnson::RooJohnson ; (; const RooJohnson & ; other, . const char * ; newName = nullptr . ). Copy a Johnson PDF. ; Definition at line 84 of file RooJohnson.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooJohnson::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ; This functions will only be called with codes returned by getAnalyticalIntegral, except code zero. ; Reimplemented from Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJohnson.html:75060,variab,variable,75060,doc/master/classRooJohnson.html,https://root.cern,https://root.cern/doc/master/classRooJohnson.html,1,['variab'],['variable']
Modifiability,"he only possible approach when using PyROOT.; 403 ; 404Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a; 405number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define(); 406transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action.; 407~~~{.cpp}; 408RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); 409int x = -1;; 410auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); 411 .Define(""xx"", [&x] { return x*x; });; 412d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; 413~~~; 414This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a; 415simple way to make external variables available inside the body of C++ lambdas) to act on the same variable `x` from; 416both Define() transformations. Second, we have *stored* the transformed dataframe in a variable. This is always; 417possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more; 418on this [below](#callgraphs)).; 419 ; 420You can read more about defining new columns [here](#custom-columns).; 421 ; 422\image html RDF_Graph.png ""A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action.""; 423 ; 424 ; 425### Running on a range of entries; 426It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; 429exclusively on the entries passing the filter -- it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:25405,variab,variable,25405,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['variab'],['variable']
Modifiability,"he only possible approach when using PyROOT.; 407 ; 408Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a; 409number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define(); 410transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action.; 411~~~{.cpp}; 412RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); 413int x = -1;; 414auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); 415 .Define(""xx"", [&x] { return x*x; });; 416d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; 417~~~; 418This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a; 419simple way to make external variables available inside the body of C++ lambdas) to act on the same variable `x` from; 420both Define() transformations. Second, we have *stored* the transformed dataframe in a variable. This is always; 421possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more; 422on this [below](#callgraphs)).; 423 ; 424You can read more about defining new columns [here](#custom-columns).; 425 ; 426\image html RDF_Graph.png ""A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action.""; 427 ; 428 ; 429### Running on a range of entries; 430It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; 431offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 432actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; 433exclusively on the entries passing the filter -- it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:25847,variab,variable,25847,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['variab'],['variable']
Modifiability,"he parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned, a binned likelihood is constructed. The following named arguments are supported. ConditionalObservables(const RooArgSet& set) -- Do not normalize PDF over listed observables; Extended(Bool_t fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:48393,extend,extendedTerm,48393,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,2,['extend'],"['extended', 'extendedTerm']"
Modifiability,"he previous overloads for further details. ; Definition at line 3075 of file RInterface.hxx. ◆ Fill(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename T > . RResultPtr< std::decay_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >::Fill ; (; T && ; model, . const ColumnNames_t & ; columnList . ). inline . Return an object of type T on which T::Fill will be called once per event (lazy action). ; Type T must provide at least:; a copy-constructor; a Fill method that accepts as many arguments and with same types as the column names passed as columnList (these types can also be passed as template parameters to this method); a Merge method with signature Merge(TCollection *) or Merge(const std::vector<T *>&) that merges the objects passed as argument into the object on which Merge was called (an analogous of TH1::Merge). Note that if the signature that takes a TCollection* is used, then T must inherit from TObject (to allow insertion in the TCollection*). Template Parameters. FirstColumnThe first type of the column the values of which are used to fill the object. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the other types of the columns the values of which are used to fill the object. ; TThe type of the object to fill. Automatically deduced. . Parameters. [in]modelThe model to be considered to build the new return value. ; [in]columnListA list containing the names of the columns that will be passed when calling Fill . Returnsthe filled object wrapped in a RResultPtr.; The user gives up ownership of the model object. The list of column names to be used for filling must always be specified. This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; MyClass obj;; // Deduce column types (this invocation needs jitting internally, and in this case; // MyClass needs to be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:66428,inherit,inherit,66428,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['inherit'],['inherit']
Modifiability,"he previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t). By default, a variable will be copied to the buffer with the number of; bytes specified in the type descriptor character. However, if the type; consists of 2 characters, the second character is an integer that; specifies the number of bytes to be used when copying the variable; to the output buffer. Example:; X ; variable X, type Float_t; Y/I : variable Y, type Int_t; Y/I2 ; variable Y, type Int_t converted to a 16 bits integer. Arrays of values are supported with the following syntax:; If leaf name has the form var[nelem], where nelem is alphanumeric, then; If nelem is a leaf name, it is used as the variable size of the array.; The leaf refered to by neleme **MUST** be an int (/I).; If leaf name has the form var[nelem], where nelem is a digit, then; it is used as the fixed size of the array.; If leaf name has the form of a multi dimenantion array (eg var[nelem][nelem2]); where nelem and nelem2 are digits) then; it is used as a 2 dimensional array of fixed size.; Any of other form is not supported. See an example of a Branch definition in the TTree constructor. Note that in case the data type is an object, this branch can contain; only this object. Note that this function is invoked by TTree::Branch. *. void Init(const char* name, const char* leaflist, Int_t compress); Initialization routine called from the constructor. This should NOT be made ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBranch.html:16880,variab,variable,16880,root/html530/TBranch.html,https://root.cern,https://root.cern/root/html530/TBranch.html,3,['variab'],['variable']
Modifiability,"he previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t). By default, a variable will be copied to the buffer with the number of; bytes specified in the type descriptor character. However, if the type; consists of 2 characters, the second character is an integer that; specifies the number of bytes to be used when copying the variable; to the output buffer. Example:; X ; variable X, type Float_t; Y/I : variable Y, type Int_t; Y/I2 ; variable Y, type Int_t converted to a 16 bits integer. Arrays of values are supported with the following syntax:; If leaf name has the form var[nelem], where nelem is alphanumeric, then; if nelem is a leaf name, it is used as the variable size of the array,; otherwise return 0.; The leaf refered to by neleme **MUST** be an int (/I),; If leaf name has the form var[nelem], where nelem is a digit, then; it is used as the fixed size of the array.; If leaf name has the form of a multi dimenantion array (eg var[nelem][nelem2]); where nelem and nelem2 are digits) then; it is used as a 2 dimensional array of fixed size.; Any of other form is not supported. Note that the TTree will assume that all the item are contiguous in memory.; On some platform, this is not always true of the member of a struct or a class,; due to padding and alignment. Sorting your data member in order of decreasing; sizeof usually leads to their being contiguous in memory. * bufsize is the buffer size in byte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBranch.html:13762,variab,variable,13762,root/html530/TBranch.html,https://root.cern,https://root.cern/root/html530/TBranch.html,3,['variab'],['variable']
Modifiability,"he previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t). By default, a variable will be copied to the buffer with the number of; bytes specified in the type descriptor character. However, if the type; consists of 2 characters, the second character is an integer that; specifies the number of bytes to be used when copying the variable; to the output buffer. Example:; X ; variable X, type Float_t; Y/I : variable Y, type Int_t; Y/I2 ; variable Y, type Int_t converted to a 16 bits integer. Note that the TTree will assume that all the item are contiguous in memory.; On some platform, this is not always true of the member of a struct or a class,; due to padding and alignment. Sorting your data member in order of decreasing; sizeof usually leads to their being contiguous in memory. * bufsize is the buffer size in bytes for this branch; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (eg 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. See an example of a Branch definition in the TTree constructor. Note that in case the data type is an object, this branch can contain; only this object. Note that this function is invoked by TTree::Branch. *. TBranch(TBranch *parent, const char* name, void* address, const char* lea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranch.html:12811,variab,variable,12811,root/html526/TBranch.html,https://root.cern,https://root.cern/root/html526/TBranch.html,3,['variab'],['variable']
Modifiability,"he previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t). By default, a variable will be copied to the buffer with the number of; bytes specified in the type descriptor character. However, if the type; consists of 2 characters, the second character is an integer that; specifies the number of bytes to be used when copying the variable; to the output buffer. Example:; X ; variable X, type Float_t; Y/I : variable Y, type Int_t; Y/I2 ; variable Y, type Int_t converted to a 16 bits integer. Note that the TTree will assume that all the item are contiguous in memory.; On some platform, this is not always true of the member of a struct or a class,; due to padding and alignment. Sorting your data member in order of decreasing; sizeof usually leads to their being contiguous in memory. * bufsize is the buffer size in bytes for this branch; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (eg 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. See an example of a Branch definition in the TTree constructor. Note that in case the data type is an object, this branch can contain; only this object. Note that this function is invoked by TTree::Branch. *. TBranch(TBranch* parent, const char* name, void* address, const char* lea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranch.html:13145,variab,variable,13145,root/html528/TBranch.html,https://root.cern,https://root.cern/root/html528/TBranch.html,3,['variab'],['variable']
Modifiability,"he previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t). By default, a variable will be copied to the buffer with the number of; bytes specified in the type descriptor character. However, if the type; consists of 2 characters, the second character is an integer that; specifies the number of bytes to be used when copying the variable; to the output buffer. Example:; X ; variable X, type Float_t; Y/I : variable Y, type Int_t; Y/I2 ; variable Y, type Int_t converted to a 16 bits integer. See an example of a Branch definition in the TTree constructor. Note that in case the data type is an object, this branch can contain; only this object. Note that this function is invoked by TTree::Branch. *. void Init(const char* name, const char* leaflist, Int_t compress); Initialization routine called from the constructor. This should NOT be made virtual. ~TBranch(); Destructor. void AddBasket(TBasket& b, Bool_t ondisk, Long64_t startEntry); Add the basket to this branch. void AddLastBasket(Long64_t startEntry); Add the start entry of the write basket (not yet create). void Browse(TBrowser* b); Browser interface. void DeleteBaskets(Option_t* option = """"); Loop on all branch baskets. If the file where branch buffers reside is; writable, free the disk space associated to the baskets of the branch,; then call Reset(). If the option contains ""all"", delete also the baskets; for the subbranches.; The branch is reset.; NOTE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranch.html:15314,variab,variable,15314,root/html526/TBranch.html,https://root.cern,https://root.cern/root/html526/TBranch.html,3,['variab'],['variable']
Modifiability,"he previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t). By default, a variable will be copied to the buffer with the number of; bytes specified in the type descriptor character. However, if the type; consists of 2 characters, the second character is an integer that; specifies the number of bytes to be used when copying the variable; to the output buffer. Example:; X ; variable X, type Float_t; Y/I : variable Y, type Int_t; Y/I2 ; variable Y, type Int_t converted to a 16 bits integer. See an example of a Branch definition in the TTree constructor. Note that in case the data type is an object, this branch can contain; only this object. Note that this function is invoked by TTree::Branch. *. void Init(const char* name, const char* leaflist, Int_t compress); Initialization routine called from the constructor. This should NOT be made virtual. ~TBranch(); Destructor. void AddBasket(TBasket& b, Bool_t ondisk, Long64_t startEntry); Add the basket to this branch. void AddLastBasket(Long64_t startEntry); Add the start entry of the write basket (not yet created). void Browse(TBrowser* b); Browser interface. void DeleteBaskets(Option_t* option = """"); Loop on all branch baskets. If the file where branch buffers reside is; writable, free the disk space associated to the baskets of the branch,; then call Reset(). If the option contains ""all"", delete also the baskets; for the subbranches.; The branch is reset.; NOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranch.html:15661,variab,variable,15661,root/html528/TBranch.html,https://root.cern,https://root.cern/root/html528/TBranch.html,3,['variab'],['variable']
Modifiability,"he printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The value of FCN will in general depend on one or more variable parameters.; To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D) the Fit function defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user fitting function (gaussian, polynomial, user defined,etc) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:2049,variab,variable,2049,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['variab'],['variable']
Modifiability,"he ratio of two RooAbsReal objects. ; Definition at line 21 of file RooRatio.h. Public Member Functions;  RooRatio ();  ;  RooRatio (const char *name, const char *title, const RooArgList &num, const RooArgList &denom);  ;  RooRatio (const char *name, const char *title, double numerator, double denominator);  ;  RooRatio (const char *name, const char *title, double numerator, RooAbsReal &denominator);  ;  RooRatio (const char *name, const char *title, RooAbsReal &numerator, double denominator);  ;  RooRatio (const char *name, const char *title, RooAbsReal &numerator, RooAbsReal &denominator);  ;  RooRatio (const RooRatio &other, const char *name=nullptr);  ;  ~RooRatio () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRatio.html:1287,inherit,inherited,1287,doc/master/classRooRatio.html,https://root.cern,https://root.cern/doc/master/classRooRatio.html,1,['inherit'],['inherited']
Modifiability,"he residual functions; unsigned intfSizenumber of fit points (residuals); vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). unsigned int NDim() const; { return fChi2->NDim(); }. GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limited variable. bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limited variable. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper); set upper/lower limited variable. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set fixed variable. bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLNLSMinimizer.html:6531,variab,variable,6531,root/html528/ROOT__Math__GSLNLSMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLNLSMinimizer.html,3,['variab'],['variable']
Modifiability,"he result of the classification if; the event for this decision tree. Double_t SamplePurity(TMVA::DecisionTree::EventList eventSample); calculates the purity S/(S+B) of a given event sample. vector< Double_t > GetVariableImportance(); Return the relative variable importance, normalized to all; variables together having the importance 1. The importance in; evaluated as the total separation-gain that this variable had in; the decision trees (weighted by the number of events). Double_t GetVariableImportance(UInt_t ivar); returns the relative improtance of variable ivar. DecisionTreeNode* GetRoot() const; Retrieves the address of the root node. { return dynamic_cast<TMVA::DecisionTreeNode*>(fRoot); }. DecisionTreeNode * CreateNode(UInt_t ) const; { return new DecisionTreeNode(); }. BinaryTree* CreateTree() const; { return new DecisionTree(); }. const char* ClassName() const; { return ""DecisionTree""; }. Double_t TrainNode(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node); determine the way how a node is split (which variable, which cut value). { return TrainNodeFast( eventSample, node ); }. void SetPruneMethod(TMVA::DecisionTree::EPruneMethod m = kCostComplexityPruning); { fPruneMethod = m; }. void SetPruneStrength(Double_t p); manage the pruning strength parameter (iff < 0 -> automate the pruning process). { fPruneStrength = p; }. Double_t GetPruneStrength() const; { return fPruneStrength; }. void SetNodePurityLimit(Double_t p); { fNodePurityLimit = p; }. Double_t GetNodePurityLimit() const; { return fNodePurityLimit; }. Int_t GetNNodesBeforePruning(); {return (fNNodesBeforePruning)?fNNodesBeforePruning:fNNodesBeforePruning=GetNNodes();}. void SetTreeID(Int_t treeID); {fTreeID = treeID;}. Int_t GetTreeID(); {return fTreeID;}. Bool_t DoRegression() const; { return fAnalysisType == Types::kRegression; }. void SetAnalysisType(TMVA::Types::EAnalysisType t); { fAnalysisType = t;}. Types::EAnalysisType GetAnalysisType( void ); { return fAnal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:15569,variab,variable,15569,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,3,['variab'],['variable']
Modifiability,"he returned dataset.; The following named arguments are supported . Type of CmdArg Effect on generation . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be much faster for peaked PDFs, but the number of events is not exactly what was requested. . ExpectedData() Return a binned dataset without statistical fluctuations (also aliased as Asimov()) . PyROOT; The RooAbsPdf::generateBinned() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1598 of file RooAbsPdf.cxx. ◆ generateBinned() [2/3]. RooFit::OwningPtr< RooDataHist > RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . double ; nEvents, . bool ; expectedData = false, . bool ; extended = false . ); const. virtual . Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsVariables that values should be generated for. ; [in]nEventsHow many events to generate. If nEvents <=0, use the value returned by expectedEvents() as target. ; [in]expectedDataIf set to true (false by default), the returned histogram returns the 'expected' data sample, i.e. no statistical fluctuations are present. ; [in]extendedFor each bin, generate Poisson(x, mu) events, where mu is chosen such that on average, one would obtain nEvents events. This means that the true number of events will fluctuate around the desired value, but the generation happens a lot faster. Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate exactly nEvents events can be very slow. The binning used for generation of events is the currently set binning for the variables. It can e.g. be changed using x.setBin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:122811,extend,extended,122811,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['extend'],['extended']
Modifiability,"he rows been copied. void DeleteRows(Long_t indx, UInt_t nRows = 1); Delete one or several rows from the table. Int_t indx - index of the first row to be deleted; Int_t nRows - the total number of rows to be deleted; = 1 ""by default. TH1 * Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); *-*-*-*-*-*Draw expression varexp for specified entries; *-* ===========================================. This function accepts TCut objects as arguments.; Useful to use the string operator +; example:; table.Draw(""x"",cut1+cut2+cut3);. TCutG object with ""CUTG"" name can be created via the graphics editor. TH1 * Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); *-*-*-*-*-*Draw expression varexp for specified entries; *-* ===========================================. varexp is an expression of the general form e1:e2:e3; where e1,etc is a C++ expression referencing a combination of the TTable columns; One can use two extra meta variable ""i$"" and ""n$"" along with the table; column names.; i$ is to involve the current row number; n$ refers the total num,ber of rows of this table provided by TTable::GetNRows(). Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x); = i$:sqrt(x) 2-Dim dsitribution of i versus sqrt(x[i]); = phep[0]:sqrt(phep[3]) 2-Dim dsitribution of phep[0] versus sqrt(phep[3]). Note that the variables e1, e2 or e3 may contain a boolean expression as well.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. selection is a C++ expression with a combination of the columns.; The value corresponding to the selection expression is used as a weight; to fill the histogram.; If the expression includes only boolean operations, the result; is 0 or 1. If the result is 0, the histogram is no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTable.html:20029,variab,variable,20029,root/html528/TTable.html,https://root.cern,https://root.cern/root/html528/TTable.html,6,['variab'],['variable']
Modifiability,"he same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, Double_t epsrel = 9.9999999999999998E-13); use IntegralOneDim. Double_t IntegralOneDim(Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t& err); Return Integral of function between a and b using the given parameter values and; relative and absolute tolerance.; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; If ROOT contains the MathMore library the default integrator is set to be; the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; ROOT::Math::GaussIntegrator is used; See the reference documentation of these classes for more information about the; integration algorithms; To change integration algorithm just do :; ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; Valid integrator names are:; - Gauss : for ROOT::Math::GaussIntegrator; - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. Note 2:; Instead of TF1::Integral, you may want to use the combination of; TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; See an example with the following script:. void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:53265,adapt,adaptive,53265,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,4,['adapt'],['adaptive']
Modifiability,"he same. To create a TCutG via the graphics editor, use the left button to select the; points building the contour of the cut. Click on the right button to close the; TCutG. When it is created via the graphics editor, the TCutG object is named; ""CUTG"". It is recommended to immediatly change the name by using the context; menu item ""SetName"". When the graphics editor is used, the names of the; variables X,Y are automatically taken from the current pad title. Example:. Assume a TTree object T and:. Root > T.Draw(""abs(fMomemtum)%fEtot""). the TCutG members fVarX, fVary will be set to:. fVarx = fEtot; fVary = abs(fMomemtum). A graphical cut can be used in a TTree selection expression:. Root > T.Draw(""fEtot"",""cutg1""). where ""cutg1"" is the name of an existing graphical cut. Note that, as shown in the example above, a graphical cut may be used in a; selection expression when drawing TTrees expressions of 1-d, 2-d or; 3-dimensions. The expressions used in TTree::Draw can reference the variables in; the fVarX, fVarY of the graphical cut plus other variables. When the TCutG object is created by TTree::Draw, it is added to the list of special objects in; the main TROOT object pointed by gROOT. To retrieve a pointer to this object; from the code or command line, do:. TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");. When the TCutG is not created via TTree::Draw, one must set the variable names; corresponding to x,y if one wants to use the cut as input to TTree::Draw,eg. TCutG *cutg = new TCutG(""mycut"",5);; cutg->SetVarX(""y"");; cutg->SetVarY(""x"");; cutg->SetPoint(0,-0.3586207,1.509534);; cutg->SetPoint(1,-1.894181,-0.529661);; cutg->SetPoint(2,0.07780173,-1.21822);; cutg->SetPoint(3,-1.0375,-0.07944915);; cutg->SetPoint(4,0.756681,0.1853814);; cutg->SetPoint(5,-0.3586207,1.509534);. ; Example of use of a TCutG in TTree::Draw:. tree.Draw(""x:y"",""mycutg && z>0 %% sqrt(x)>1""). A Graphical cut may be drawn via TGraph::Draw. It",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCutG.html:1517,variab,variables,1517,root/html528/TCutG.html,https://root.cern,https://root.cern/root/html528/TCutG.html,8,['variab'],['variables']
Modifiability,"he same. To create a TCutG via the graphics editor, use the left button to select the; points building the contour of the cut. Click on the right button to close the; TCutG. When it is created via the graphics editor, the TCutG object is named; ""CUTG"". It is recommended to immediatly change the name by using the context; menu item ""SetName"". When the graphics editor is used, the names of the; variables X,Y are automatically taken from the current pad title. Example:. Assume a TTree object T and:. Root > T.Draw(""abs(fMomemtum)%fEtot""). the TCutG members fVarX, fVary will be set to:. fVarx = fEtot; fVary = abs(fMomemtum). A graphical cut can be used in a TTree selection expression:. Root > T.Draw(""fEtot"",""cutg1""). where ""cutg1"" is the name of an existing graphical cut. Note that, as shown in the example above, a graphical cut may be used in a; selection expression when drawing TTrees expressions of 1-d, 2-d or; 3-dimensions. The expressions used in TTree::Draw can reference the variables in; the fVarX, fVarY of the graphical cut plus other variables. When the TCutG object is created by TTree::Draw, it is added to the list of special objects in; the main TROOT object pointed by gROOT. To retrieve a pointer to this object; from the code or command line, do:. TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");. When the TCutG is not created via TTree::Draw, one must set the variable names; corresponding to x,y if one wants to use the cut as input to TTree::Draw,eg. TCutG *cutg = new TCutG(""mycut"",5);; cutg->SetVarX(""y"");; cutg->SetVarY(""x"");; cutg->SetPoint(0,-0.3586207,1.509534);; cutg->SetPoint(1,-1.894181,-0.529661);; cutg->SetPoint(2,0.07780173,-1.21822);; cutg->SetPoint(3,-1.0375,-0.07944915);; cutg->SetPoint(4,0.756681,0.1853814);; cutg->SetPoint(5,-0.3586207,1.509534);. Example of use of a TCutG in TTree::Draw:. tree.Draw(""x:y"",""mycutg && z>0 %% sqrt(x)>1""). A Graphical cut may be drawn via TGraph::Draw. It c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCutG.html:1517,variab,variables,1517,root/html602/TCutG.html,https://root.cern,https://root.cern/root/html602/TCutG.html,4,['variab'],['variables']
Modifiability,"he same. To create a TCutG via the graphics editor, use the left button to select the; points building the contour of the cut. Click on the right button to close the; TCutG. When it is created via the graphics editor, the TCutG object is named; ""CUTG"". It is recommended to immediatly change the name by using the context; menu item ""SetName"". When the graphics editor is used, the names of the; variables X,Y are automatically taken from the current pad title. Example:. Assume a TTree object T and:. Root > T.Draw(""abs(fMomemtum)%fEtot""). the TCutG members fVarX, fVary will be set to:. fVarx = fEtot; fVary = abs(fMomemtum). A graphical cut can be used in a TTree selection expression:. Root > T.Draw(""fEtot"",""cutg1""). where ""cutg1"" is the name of an existing graphical cut. Note that, as shown in the example above, a graphical cut may be used in a; selection expression when drawing TTrees expressions of 1-d, 2-d or; 3-dimensions. The expressions used in TTree::Draw can reference the variables in; the fVarX, fVarY of the graphical cut plus other variables. When the TCutG object is created, it is added to the list of special objects in; the main TROOT object pointed by gROOT. To retrieve a pointer to this object; from the code or command line, do:. TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");. Example of use of a TCutG in TTree::Draw:. tree.Draw(""x:y"",""mycutg && z>0 %% sqrt(x)>1""). A Graphical cut may be drawn via TGraph::Draw. It can be edited like a normal; TGraph. A Graphical cut may be saved to a file via TCutG::Write.; . Function Members (Methods); public:. TCutG(); TCutG(const TCutG& cutg); TCutG(const char* name, Int_t n); TCutG(const char* name, Int_t n, const Float_t* x, const Float_t* y); TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); virtual~TCutG(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraph:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCutG.html:1517,variab,variables,1517,root/html526/TCutG.html,https://root.cern,https://root.cern/root/html526/TCutG.html,2,['variab'],['variables']
Modifiability,"he script passed as filename and; store all created canvases in PNG files that are; shown next to the converted source. Bitwise-ORing with; re-runs the script even if output PNGs exist that are newer; than the script. If kCompiledOutput is passed, the script is; run through ACLiC (.x filename+); context - line shown verbatim at the top of the page; e.g. for links.; If context is non-empty it is expected to also print the; title. NOTE: Output file name is the same as filename, but with extension .html. void GetModuleNameForClass(TString& module, TClass* cl) const; Return the module name for a given class.; Use the cached information from fDocEntityInfo.fClasses. void CreateListOfClasses(const char* filter); Create the list of all known classes. void CreateListOfTypes(); Create index of all data types and a page for each typedef-to-class. Bool_t CopyFileFromEtcDir(const char* filename) const; Copy a file from $ROOTSYS/etc/html into GetOutputDir(). void CreateHierarchy(); Create the inheritance hierarchy diagram for all classes. void CreateJavascript() const; Write the default ROOT style sheet. void CreateStyleSheet() const; Write the default ROOT style sheet. void GetDerivedClasses(TClass* cl, map<TClass*,Int_t>& derived) const; fill derived with all classes inheriting from cl and their inheritance; distance to cl. void GetHtmlFileName(TClass* classPtr, TString& filename) const; Return real HTML filename. Input: classPtr - pointer to a class; filename - string containing a full name; of the corresponding HTML file after the function returns. const char* GetHtmlFileName(const char* classname) const; Get the html file name for a class named classname.; Returns 0 if the class is not documented. TClass * GetClass(const char* name) const; Return pointer to class with name*-*-*-*-*-*-*-*-; *-* =================================. bool GetDeclFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return declaration file name; return the full path if filesys is true. bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml.html:30314,inherit,inheritance,30314,root/html528/THtml.html,https://root.cern,https://root.cern/root/html528/THtml.html,1,['inherit'],['inheritance']
Modifiability,"he selection currently being edited. TEntryList* GetEntryList(Bool_t sel = kTRUE); Get the whole entry list or one for a selection. Double_t GetGlobalMax(); return the global maximum. Double_t GetGlobalMin(); return the global minimum. Int_t GetNbins(); get the binning of the histograms. TParallelCoordSelect* GetSelection(const char* title); Get a selection from its title. TTree* GetTree(); return the tree if fTree is defined. If not, the method try to load the tree; from fTreeFileName. Double_t* GetVariable(const char* var); Get the variables values from its title. Double_t* GetVariable(Int_t i); Get the variables values from its index. void Init(); Initialise the data members of TParallelCoord. void Paint(Option_t* options = """"); Paint the parallel coordinates graph. void PaintEntries(TParallelCoordSelect* sel = __null); Loop over the entries and paint them. void RemoveVariable(TParallelCoordVar* var); Delete a variable from the graph. TParallelCoordVar* RemoveVariable(const char* var); Delete the variable ""vartitle"" from the graph. void ResetTree(); Reset the tree entry list to the initial one.. void SaveEntryLists(const char* filename = """", Bool_t overwrite = kFALSE); Save the entry lists in a root file ""filename.root"". void SavePrimitive(ostream& out, Option_t* options); Save the TParallelCoord in a macro. void SaveTree(const char* filename = """", Bool_t overwrite = kFALSE); Save the tree in a file if fTreeFileName == """". void SetAxesPosition(); Update the position of the axes. void SetAxisHistogramBinning(Int_t n = 100); Set the same histogram axis binning for all axis. void SetAxisHistogramHeight(Double_t h = 0.5); Set the same histogram axis height for all axis. void SetGlobalLogScale(Bool_t ); All axes in log scale. void SetGlobalScale(Bool_t gl); Constraint all axes to the same scale. void SetAxisHistogramLineWidth(Int_t lw = 2); Set the same histogram axis line width for all axis. void SetCandleChart(Bool_t can); Set a candle chart display. void SetCurrentF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoord.html:16035,variab,variable,16035,root/html602/TParallelCoord.html,https://root.cern,https://root.cern/root/html602/TParallelCoord.html,2,['variab'],['variable']
Modifiability,"he set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 87 of file RooPoisson.cxx. ◆ getGenerator(). Int_t RooPoisson::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Advertise internal generator in x. ; Reimplemented from RooAbsPdf.; Definition at line 124 of file RooPoisson.cxx. ◆ getMean(). RooAbsReal const & RooPoisson::getMean ; (; ); const. inline . Get the mean parameter. ; Definition at line 46 of file RooPoisson.h. ◆ getNoRounding(). bool RooPoisson::getNoRounding ; (; ); const. inline . Definition at line 37 of file RooPoisson.h. ◆ getX(). RooAbsReal const & RooPoisson::getX ; (; ); const. inline . Get the x variable. ; Definition at line 43 of file RooPoisson.h. ◆ IsA(). TClass * RooPoisson::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 63 of file RooPoisson.h. ◆ protectNegativeMean(). void RooPoisson::protectNegativeMean ; (; bool ; flag = true). inline . Switch on or off protection against negative means. ; Definition at line 40 of file RooPoisson.h. ◆ setNoRounding(). void RooPoisson::setNoRounding ; (; bool ; flag = true). inline . Switch off/on rounding of x to the nearest integer. ; Definition at line 36 of file RooPoisson.h. ◆ Streamer(). void RooPoisson::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooPoisson::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file RooPoisson.h. ◆ translate(). void RooPoisson::translate ; (; RooFit::Detail::CodeSqu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPoisson.html:78380,variab,variable,78380,doc/master/classRooPoisson.html,https://root.cern,https://root.cern/doc/master/classRooPoisson.html,1,['variab'],['variable']
Modifiability,"he six distributions of the three variables are assumed to be the ones depicted in Fig. 1. Figure 1 ; Distributions of the three discriminating variables available to perform the Likelihood fit: \({m_{\rm ES}}\) , \(\Delta E\) , \({\cal F}\) . Among the three variables, two are used to perform the fit while one is kept out of the fit to serve the purpose of a control variable. The three distributions on the top (resp. bottom) of the figure correspond to the signal (resp. background). The unit of the vertical axis is chosen such that it indicates the number of entries per bin, if one slices the histograms in 25 bins.; A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of \(\Delta E\) clearly indicates the presence of the signal, the distribution of \({m_{\rm ES}}\) and \({\cal F}\) are less obviously populated by signal. Figure 2 ; Distributions of the three discriminating variables for signal plus background. The three distributions are the ones obtained from a data sample obtained through a Monte Carlo simulation based on the distributions shown in Fig. 1. The data sample consists of 500 signal events and 5000 background events.; Choosing \(\Delta E\) and \({\cal F}\) as discriminating variables to determine \(N_1\) and \(N_2\) through a maximum Likelihood fit, one builds, for the control variable \({m_{\rm ES}}\) which is unknown to the fit, the two \(\hbox {$_s$}{\cal P}lots\) for signal and background shown in Fig. 3. One observes that the \(\hbox{$_s$}{\cal P}lot\) for signal reproduces correctly the PDF even where the latter vanishes, although the error bars remain sizeable. This results from the almost complete cancellation between positive and negative weights: the sum of weights is close to zero while the sum of weights squared is not. The occurrence of negative weights occurs through the appearance of the covariance matrix, and its neg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPlot.html:8243,variab,variables,8243,doc/master/classTSPlot.html,https://root.cern,https://root.cern/doc/master/classTSPlot.html,1,['variab'],['variables']
Modifiability,"he size of entries; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; TTreeFormula*fSelectPointer to selection formula; TStringfSelection; TStatus*fStatus; Long64_tTSelector::fStatusselector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. void FillWeight(); Get weight from input list, if any. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). int Version() const; { return 1; }. » Author: Maarten Ballint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofDraw.html:7859,variab,variable,7859,root/html530/TProofDraw.html,https://root.cern,https://root.cern/root/html530/TProofDraw.html,2,['variab'],['variable']
Modifiability,"he source file directory of the; module's classes; the (possibly relative) path set by; THtml::SetModuleDocPath() will guide THtml; to the files.; A filename starting with ""index."" will be included in the index page;; all other files will be linked.; Only files ending on .html or .txt will be taken into account;; the text files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml.html:15449,inherit,inheritance,15449,root/html528/THtml.html,https://root.cern,https://root.cern/root/html528/THtml.html,2,['inherit'],"['inheritance', 'inherited']"
Modifiability,"he specified variables with; events sampled from our distribution. Generate the specified; number of events or else try to use expectedEvents() if nEvents <= 0.; Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. RooDataSet * generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype, Int_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto) const; Internal method. RooDataSet * generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; Generate a new dataset with values of the whatVars variables; sampled from our distribution. Use the specified existing dataset; as a prototype: the new dataset will contain the same number of; events as the prototype (by default), and any prototype variables not in; whatVars will be copied into the new dataset for each generated; event and also used to set our PDF parameters. The user can specify a; number of events to generate that will override the default. The result is a; copy of the prototype dataset with only variables in whatVars; randomized. Variables in whatVars that are not in the prototype; will be added as new columns to the generated dataset. Returns; zero in case of an error. The caller takes ownership of the; returned dataset. Int_t* randomizeProtoOrder(Int_t nProto, Int_t nGen, Bool_t resample = kFALSE) const; Return lookup table with randomized access order for prototype events,; given nProto prototype data events and nGen events that will actually; be accessed. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Load generatedVars with the subset of directVars that we can generate events for,; and return a code that specifies the generator al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:61889,variab,variables,61889,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['variab'],['variables']
Modifiability,"he title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNode.html:6760,inherit,inheritance,6760,doc/master/classTNode.html,https://root.cern,https://root.cern/doc/master/classTNode.html,2,['inherit'],['inheritance']
Modifiability,"he top of the pavetext. ;  ; TList * fLines {nullptr};  List of labels. ;  ; Int_t fLongest;  Length of the longest line. ;  ; Float_t fMargin;  Text margin. ;  ;  Protected Attributes inherited from TPave; Int_t fBorderSize;  window box bordersize in pixels ;  ; Double_t fCornerRadius;  Corner radius in case of option arc. ;  ; Int_t fInit;  (=0 if transformation to NDC not yet done) ;  ; TString fName;  Pave name. ;  ; TString fOption;  Pave style. ;  ; Int_t fShadowColor;  Color of the pave's shadow. ;  ; Double_t fX1NDC;  X1 point in NDC coordinates. ;  ; Double_t fX2NDC;  X2 point in NDC coordinates. ;  ; Double_t fY1NDC;  Y1 point in NDC coordinates. ;  ; Double_t fY2NDC;  Y2 point in NDC coordinates. ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . #include <TDiamond.h>. Inheritance diagram for TDiamond:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDiamond() [1/3]. TDiamond::TDiamond ; (; ). Diamond default constructor. ; Definition at line 46 of file TDiamond.cxx. ◆ TDiamond() [2/3]. TDiamond::TDiamond ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). Diamond standard constructor. ; Definition at line 53 of file TDiamond.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDiamond.html:25215,inherit,inherited,25215,doc/master/classTDiamond.html,https://root.cern,https://root.cern/doc/master/classTDiamond.html,1,['inherit'],['inherited']
Modifiability,"he top of the pavetext. ;  ; TList * fLines {nullptr};  List of labels. ;  ; Int_t fLongest;  Length of the longest line. ;  ; Float_t fMargin;  Text margin. ;  ;  Protected Attributes inherited from TPave; Int_t fBorderSize;  window box bordersize in pixels ;  ; Double_t fCornerRadius;  Corner radius in case of option arc. ;  ; Int_t fInit;  (=0 if transformation to NDC not yet done) ;  ; TString fName;  Pave name. ;  ; TString fOption;  Pave style. ;  ; Int_t fShadowColor;  Color of the pave's shadow. ;  ; Double_t fX1NDC;  X1 point in NDC coordinates. ;  ; Double_t fX2NDC;  X2 point in NDC coordinates. ;  ; Double_t fY1NDC;  Y1 point in NDC coordinates. ;  ; Double_t fY2NDC;  Y2 point in NDC coordinates. ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Additional Inherited Members;  Public Types inherited from TPave; enum  { kNameIsAction = (1ULL << ( 11 )); };  ;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDepr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveStats.html:33618,inherit,inherited,33618,doc/master/classTPaveStats.html,https://root.cern,https://root.cern/doc/master/classTPaveStats.html,3,['inherit'],['inherited']
Modifiability,"he training and test trees kept for backward compatibility ; Definition at line 618 of file DataLoader.cxx. ◆ PrepareTrainingAndTestTree() [4/4]. void TMVA::DataLoader::PrepareTrainingAndTestTree ; (; TCut ; sigcut, . TCut ; bkgcut, . const TString & ; splitOpt . ). prepare the training and test trees ; Definition at line 644 of file DataLoader.cxx. ◆ RecombineKFoldDataSet(). void TMVA::DataLoader::RecombineKFoldDataSet ; (; CvSplit & ; s, . Types::ETreeType ; tt = Types::kTraining . ). Recombines the dataset. ; The precise semantics depend on the actual split.; Similar to the inverse operation of MakeKFoldDataSet but will differ. See documentation for each particular split for more information. ; Definition at line 683 of file DataLoader.cxx. ◆ SetBackgroundTree(). void TMVA::DataLoader::SetBackgroundTree ; (; TTree * ; background, . Double_t ; weight = 1.0 . ). Definition at line 439 of file DataLoader.cxx. ◆ SetBackgroundWeightExpression(). void TMVA::DataLoader::SetBackgroundWeightExpression ; (; const TString & ; variable). Definition at line 556 of file DataLoader.cxx. ◆ SetCut() [1/2]. void TMVA::DataLoader::SetCut ; (; const TCut & ; cut, . const TString & ; className = """" . ). Definition at line 581 of file DataLoader.cxx. ◆ SetCut() [2/2]. void TMVA::DataLoader::SetCut ; (; const TString & ; cut, . const TString & ; className = """" . ). Definition at line 575 of file DataLoader.cxx. ◆ SetInputTrees() [1/3]. void TMVA::DataLoader::SetInputTrees ; (; const TString & ; signalFileName, . const TString & ; backgroundFileName, . Double_t ; signalWeight = 1.0, . Double_t ; backgroundWeight = 1.0 . ). Definition at line 464 of file DataLoader.cxx. ◆ SetInputTrees() [2/3]. void TMVA::DataLoader::SetInputTrees ; (; TTree * ; inputTree, . const TCut & ; SigCut, . const TCut & ; BgCut . ). define the input trees for signal and background from single input tree, containing both signal and background events distinguished by the type identifiers: SigCut and BgCut ; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:32656,variab,variable,32656,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['variab'],['variable']
Modifiability,"he training events; UInt_tfMaxDepthmax depth; Int_tfMinNodeEventsmin number of events in node; Float_tfMinNodeSizemin percentage of training events in node; TStringfMinNodeSizeSstring containing min percentage of training events in node; Int_tfNCutsgrid used in cut applied in node splitting; Double_tfNodePurityLimitpurity limit for sig/bkg nodes; Bool_tfPruneBeforeBoostaincient variable, only needed for ""CompatibilityOptions"" ; TMVA::DecisionTree::EPruneMethodfPruneMethodmethod used for prunig ; TStringfPruneMethodSprune method option String; Double_tfPruneStrengtha parameter to set the ""amount"" of pruning..needs to be adjusted; Bool_tfRandomisedTreeschoose a random subset of possible cut variables at each node during training; TMVA::SeparationBase*fSepTypethe separation used in node splitting; TStringfSepTypeSthe separation (option string) used in node splitting; TMVA::DecisionTree*fTreethe decision tree; Int_tfUseNvarsthe number of variables used in the randomised tree splitting; Bool_tfUsePoissonNvarsfUseNvars is used as a poisson mean, and the actual value of useNvars is at each step drawn form that distribution; Bool_tfUseYesNoLeafuse sig or bkg classification in leave nodes or sig/bkg; vector<Double_t>fVariableImportancethe relative importance of the different variables ; static const Int_tfgDebugLeveldebug level determining some printout/control plots etc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodDT(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); the standard constructor for just an ordinar ""decision trees"". MethodDT(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = NULL); constructor from Reader. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodDT.html:20247,variab,variables,20247,root/html534/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodDT.html,3,['variab'],['variables']
Modifiability,"he tree; 3959/// |-----------------|--------------------------------------------------------|; 3960/// | `fMatrix` | the 9 elements of fMatrix |; 3961/// | `fMatrix[][]` | the 9 elements of fMatrix |; 3962/// | `fMatrix[2][2]` | only the elements fMatrix[2][2] |; 3963/// | `fMatrix[1]` | the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2] |; 3964/// | `fMatrix[1][]` | the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2] |; 3965/// | `fMatrix[][0]` | the 3 elements fMatrix[0][0], fMatrix[1][0] and fMatrix[2][0] |; 3966///; 3967/// ""fEvent.fMatrix...."" same as ""fMatrix..."" (unless there is more than one leaf named fMatrix!).; 3968///; 3969/// In summary, if a specific index is not specified for a dimension, TTree::Draw; 3970/// will loop through all the indices along this dimension. Leaving off the; 3971/// last (right most) dimension of specifying then with the two characters '[]'; 3972/// is equivalent. For variable size arrays (and TClonesArray) the range; 3973/// of the first dimension is recalculated for each entry of the tree.; 3974/// You can also specify the index as an expression of any other variables from the; 3975/// tree.; 3976///; 3977/// TTree::Draw also now properly handling operations involving 2 or more arrays.; 3978///; 3979/// Let assume a second matrix fResults[5][2], here are a sample of some; 3980/// of the possible combinations, the number of elements they produce and; 3981/// the loop used:; 3982///; 3983/// | expression | element(s) | Loop |; 3984/// |----------------------------------|------------|--------------------------|; 3985/// | `fMatrix[2][1] - fResults[5][2]` | one | no loop |; 3986/// | `fMatrix[2][] - fResults[5][2]` | three | on 2nd dim fMatrix |; 3987/// | `fMatrix[2][] - fResults[5][]` | two | on both 2nd dimensions |; 3988/// | `fMatrix[][2] - fResults[][1]` | three | on both 1st dimensions |; 3989/// | `fMatrix[][2] - fResults[][]` | six | on both 1st and 2nd dimensions of fResults |; 3990/// | `fMatrix[][2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:158031,variab,variable,158031,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['variab'],['variable']
Modifiability,"he use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an associated value, which represents a memory location storing a value of the given C++ type. These distinguished memory locations are the destinations and sources for the deserialization and serialization.; The (de-)serialization is a mapping from the C++ type to the more simple column type system. A column contains an arbitrary number of fixed-sized elements of a well-defined set of types: integers and floats of dif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html:1374,layers,layers,1374,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html,1,['layers'],['layers']
Modifiability,"he values of all existing variables (array must be dimensioned to the size of the existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. bool ProvidesError() const; minimizer provides error and error matrix. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. bool GetCovMatrix(double* ) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. { return false; }. bool GetHessianMatrix(double* ) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. { return false; }. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accura",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Minimizer.html:6707,variab,variable,6707,root/html530/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Minimizer.html,4,['variab'],"['variable', 'variables']"
Modifiability,"he values of all existing variables (array must be dimensioned to the size of the existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. bool ProvidesError() const; minimizer provides error and error matrix. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. { return 0; }. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. { return -1; }. bool GetMinosError(unsigned int , double& errLow, double& errUp, int = 0). minos error for variable i, return false if Minos fail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minimizer.html:6474,variab,variable,6474,root/html526/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minimizer.html,4,['variab'],"['variable', 'variables']"
Modifiability,"he variable which is not incorporated in  is used as the control variable . The six distributions of the three variables are assumed to be the ones depicted in Fig. 1. Figure 1:; Distributions of the three discriminating variables available to perform the Likelihood fit: ; , , .; Among the three variables, two are used to perform the fit while one is; kept out of the fit to serve the purpose of a control variable. The; three distributions on the top (resp. bottom) of the figure correspond; to the signal (resp. background). The unit of the vertical axis is; chosen such that it indicates the number of entries per bin, if one; slices the histograms in 25 bins. A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of  clearly indicates the presence of the signal, the distribution of and are less obviously populated by signal. Figure 2:; Distributions of the three discriminating variables for signal plus; background. The three distributions are the ones obtained from a data; sample obtained through a Monte Carlo simulation based on the; distributions shown in Fig. 1. The data sample consists of 500 signal events and 5000 background events. Chosing and as discriminating variables to determine and through a maximum Likelihood fit, one builds, for the control variable which is unknown to the fit, the two ; for signal and background shown in Fig. 3. One observes that the . for signal reproduces correctly the PDF even where the latter vanishes,; although the error bars remain sizeable. This results from the almost; complete cancellation between positive and negative weights: the sum of; weights is close to zero while the sum of weights squared is not. The; occurence of negative weights occurs through the appearance of the; covariance matrix, and its negative components, in the definition of; Eq. (2). A word of caution is in order with respect to the error b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:6394,variab,variables,6394,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,4,['variab'],['variables']
Modifiability,"he window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TEveCompositeFrameInMainFrame (const TEveCompositeFrameInMainFrame &);  ; TEveCompositeFrameInMainFrame & operator= (const TEveCompositeFrameInMainFrame &);  . Additional Inherited Members;  Public Types inherited from TEveCompositeFrame; typedef TGFrame *(* IconBarCreator_foo) (TEveCompositeFrame *, TGCompositeFrame *, Int_t);  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInMainFrame.html:29257,inherit,inherited,29257,doc/master/classTEveCompositeFrameInMainFrame.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInMainFrame.html,2,['inherit'],['inherited']
Modifiability,"he(const RooAbsArg* newOwner, const RooArgSet& cachedVars); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. TIterator*RooAbsDataStore::_cacheIter! Iterator over cached variables; RooArgSetRooAbsDataStore::_cachedVars; Int_t_curIndex! Index associated with current event; RooAbsDataStore*_curStore! Datastore associated with current event; map<std::string,RooAbsDataStore*>_dataMap; Bool_tRooAbsDataStore::_doDirtyPropSwitch do (de)activate dirty state propagation when loading a data point; RooCategory*_indexCat; TIterator*RooAbsDataStore::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; RooArgSetRooAbsDataStore::_vars; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooCompositeDataStore(). RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData). RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0). RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0). ~RooCompositeDataStore(); Destructor. Bool_t valid() const; Return true if currently loaded coordinate is considered valid within; the current range definitions of all observables. Int_t fill(); Forward fill request to appropriat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCompositeDataStore.html:8518,variab,variables,8518,root/html528/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html528/RooCompositeDataStore.html,4,['variab'],['variables']
Modifiability,"he(const RooAbsArg* newOwner, const RooArgSet& cachedVars); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. TIterator*RooAbsDataStore::_cacheIter! Iterator over cached variables; RooArgSetRooAbsDataStore::_cachedVars; Int_t_curIndex! Index associated with current event; RooAbsDataStore*_curStore! Datastore associated with current event; map<std::string,RooAbsDataStore*>_dataMap; Bool_tRooAbsDataStore::_doDirtyPropSwitch do (de)activate dirty state propagation when loading a data point; RooCategory*_indexCat; TIterator*RooAbsDataStore::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; RooArgSetRooAbsDataStore::_vars; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooCompositeDataStore(). RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat,map<string,RooAbsDataStore*> inputData). RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0). RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0). ~RooCompositeDataStore(); Destructor. Bool_t valid() const; Return true if currently loaded coordinate is considered valid within; the current range definitions of all observables. Int_t fill(); Forward fill request to appropriate subs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCompositeDataStore.html:8532,variab,variables,8532,root/html526/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html526/RooCompositeDataStore.html,2,['variab'],['variables']
Modifiability,"he-Control"",; 4056 ""no-cache, no-store, ""; 4057 ""must-revalidate, private, max-age=0"",; 4058 -1);; 4059 mg_response_header_add(conn, ""Expires"", ""0"", -1);; 4060 ; 4061 if (conn->protocol_type == PROTOCOL_TYPE_HTTP1) {; 4062 /* Obsolete, but still send it for HTTP/1.0 */; 4063 mg_response_header_add(conn, ""Pragma"", ""no-cache"", -1);; 4064 }; 4065}; 4066 ; 4067 ; 4068static void; 4069send_static_cache_header(struct mg_connection *conn); 4070{; 4071#if !defined(NO_CACHING); 4072 int max_age;; 4073 char val[64];; 4074 ; 4075 const char *cache_control =; 4076 conn->dom_ctx->config[STATIC_FILE_CACHE_CONTROL];; 4077 ; 4078 /* If there is a full cache-control option configured,0 use it */; 4079 if (cache_control != NULL) {; 4080 mg_response_header_add(conn, ""Cache-Control"", cache_control, -1);; 4081 return;; 4082 }; 4083 ; 4084 /* Read the server config to check how long a file may be cached.; 4085 * The configuration is in seconds. */; 4086 max_age = atoi(conn->dom_ctx->config[STATIC_FILE_MAX_AGE]);; 4087 if (max_age <= 0) {; 4088 /* 0 means ""do not cache"". All values <0 are reserved; 4089 * and may be used differently in the future. */; 4090 /* If a file should not be cached, do not only send; 4091 * max-age=0, but also pragmas and Expires headers. */; 4092 send_no_cache_header(conn);; 4093 return;; 4094 }; 4095 ; 4096 /* Use ""Cache-Control: max-age"" instead of ""Expires"" header.; 4097 * Reason: see https://www.mnot.net/blog/2007/05/15/expires_max-age */; 4098 /* See also https://www.mnot.net/cache_docs/ */; 4099 /* According to RFC 2616, Section 14.21, caching times should not exceed; 4100 * one year. A year with 365 days corresponds to 31536000 seconds, a; 4101 * leap; 4102 * year to 31622400 seconds. For the moment, we just send whatever has; 4103 * been configured, still the behavior for >1 year should be considered; 4104 * as undefined. */; 4105 mg_snprintf(; 4106 conn, NULL, val, sizeof(val), ""max-age=%lu"", (unsigned long)max_age);; 4107 mg_response_header_add(conn, ""C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:120826,config,config,120826,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['config'],['config']
Modifiability,"he-Control"",; 4057 ""no-cache, no-store, ""; 4058 ""must-revalidate, private, max-age=0"",; 4059 -1);; 4060 mg_response_header_add(conn, ""Expires"", ""0"", -1);; 4061 ; 4062 if (conn->protocol_type == PROTOCOL_TYPE_HTTP1) {; 4063 /* Obsolete, but still send it for HTTP/1.0 */; 4064 mg_response_header_add(conn, ""Pragma"", ""no-cache"", -1);; 4065 }; 4066}; 4067 ; 4068 ; 4069static void; 4070send_static_cache_header(struct mg_connection *conn); 4071{; 4072#if !defined(NO_CACHING); 4073 int max_age;; 4074 char val[64];; 4075 ; 4076 const char *cache_control =; 4077 conn->dom_ctx->config[STATIC_FILE_CACHE_CONTROL];; 4078 ; 4079 /* If there is a full cache-control option configured,0 use it */; 4080 if (cache_control != NULL) {; 4081 mg_response_header_add(conn, ""Cache-Control"", cache_control, -1);; 4082 return;; 4083 }; 4084 ; 4085 /* Read the server config to check how long a file may be cached.; 4086 * The configuration is in seconds. */; 4087 max_age = atoi(conn->dom_ctx->config[STATIC_FILE_MAX_AGE]);; 4088 if (max_age <= 0) {; 4089 /* 0 means ""do not cache"". All values <0 are reserved; 4090 * and may be used differently in the future. */; 4091 /* If a file should not be cached, do not only send; 4092 * max-age=0, but also pragmas and Expires headers. */; 4093 send_no_cache_header(conn);; 4094 return;; 4095 }; 4096 ; 4097 /* Use ""Cache-Control: max-age"" instead of ""Expires"" header.; 4098 * Reason: see https://www.mnot.net/blog/2007/05/15/expires_max-age */; 4099 /* See also https://www.mnot.net/cache_docs/ */; 4100 /* According to RFC 2616, Section 14.21, caching times should not exceed; 4101 * one year. A year with 365 days corresponds to 31536000 seconds, a; 4102 * leap; 4103 * year to 31622400 seconds. For the moment, we just send whatever has; 4104 * been configured, still the behavior for >1 year should be considered; 4105 * as undefined. */; 4106 mg_snprintf(; 4107 conn, NULL, val, sizeof(val), ""max-age=%lu"", (unsigned long)max_age);; 4108 mg_response_header_add(conn, ""C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:120858,config,config,120858,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['config'],['config']
Modifiability,"he; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.; 792 ; 793double RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset) const {; 794 double sumW = data.sumEntries();; 795 double sumW2 = 0.0;; 796 if (weightSquared) {; 797 sumW2 = data.sumEntriesW2();; 798 }; 799 return extendedTerm(sumW, data.get(), sumW2, doOffset);; 800}; 801 ; 802 ; 803/** @fn RooAbsPdf::createNLL(); 804 *; 805 * @brief Construct representation of -log(L) of PDF with given dataset.; 806 *; 807 * If dataset is unbinned, an unbinned likelihood is constructed.; 808 * If the dataset is binned, a binned likelihood is constructed.; 809 *; 810 * @param data Reference to a RooAbsData object representing the dataset.; 811 * @param cmdArgs Variadic template arguments representing optional command arguments.; 812 * You can pass either an arbitrary number of RooCmdArg instances; 813 * or a single RooLinkedList that points to the RooCmdArg objects.; 814 * @return An owning pointer to the created RooAbsReal NLL object.; 815 *; 816 * @tparam CmdArgs_t Template types for optional command arguments.; 817 * Can either",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:31790,extend,extendedTerm,31790,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['extend'],['extendedTerm']
Modifiability,"he; Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 .; Its normalization is such that TMath::Gamma(a,+infinity) = 1 . --- Nve 14-nov-1998 UU-SAP Utrecht. Double_t BreitWigner(Double_t x, Double_t mean = 0, Double_t gamma = 1); Calculate a Breit Wigner function with mean and gamma. Double_t Gaus(Double_t x, Double_t mean = 0, Double_t sigma = 1, Bool_t norm = kFALSE); Calculate a gaussian function with mean and sigma.; If norm=kTRUE (default is kFALSE) the result is divided; by sqrt(2*Pi)*sigma. Double_t Landau(Double_t x, Double_t mpv = 0, Double_t sigma = 1, Bool_t norm = kFALSE); The LANDAU function.; mu is a location parameter and correspond approximatly to the most probable value; and sigma is a scale parameter (not the sigma of the full distribution which is not defined); Note that for mu=0 and sigma=1 (default values) the exact location of the maximum of the distribution; (most proble value) is at x = -0.22278; This function has been adapted from the CERNLIB routine G110 denlan.; If norm=kTRUE (default is kFALSE) the result is divided by sigma. Double_t LnGamma(Double_t z); Computation of ln[gamma(z)] for all z. C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86. The accuracy of the result is better than 2e-10. --- Nve 14-nov-1998 UU-SAP Utrecht. Float_t Normalize(Float_t v[3]); Normalize a vector v in place.; Returns the norm of the original vector. Double_t Normalize(Double_t v[3]); Normalize a vector v in place.; Returns the norm of the original vector.; This implementation (thanks Kevin Lynch <krlynch@bu.edu>) is protected; against possible overflows. Double_t Poisson(Double_t x, Double_t par); compute the Poisson distribution function for (x,par); The Poisson PDF is implemented by means of Euler's Gamma-function; (for the factorial), so for any x integer argument it is correct.; BUT for non-integer x values, it IS NOT equal to the Poisson distribution.; see TMath::PoissonI to get a non-smooth function.; Note ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMath.html:14583,adapt,adapted,14583,root/html534/TMath.html,https://root.cern,https://root.cern/root/html534/TMath.html,3,['adapt'],['adapted']
Modifiability,"heAlpha is true, a two-dimensional cache is constructed in both alpha and x. ;  ;  RooIntegralMorph (const RooIntegralMorph &other, const char *name=nullptr);  Copy constructor. ;  ; bool cacheAlpha () const;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const override;  Indicate to the RooAbsCachedPdf base class that for the filling of the cache the traversal of the x should be in the innermost loop, to minimize recalculation of the one-dimensional internal cache for a fixed value of alpha. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAlpha (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCachedPdf;  RooAbsCachedPdf ();  ;  RooAbsCachedPdf (const char *name, const char *title, int ipOrder=0);  Constructor. ;  ;  RooAbsCachedPdf (const RooAbsCachedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements internal (analytical) integration capabilities. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to offer all our actual observable for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertises internal (analytical) integration capabilities. ;  ; RooDataHist * getCacheHist (const RooArgSet &nset) const;  ; RooDataHist * getCacheHist (const RooArgSet *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:5582,inherit,inherited,5582,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['inherit'],['inherited']
Modifiability,"heElem*createCache(const RooArgSet* nset) const; RooAbsReal*RooAbsReal::createIntObj(const RooArgSet& iset, const RooArgSet* nset, const RooNumIntConfig* cfg, const char* rangeName) const; voiddisableCache(Bool_t flag); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tRooAbsReal::evaluate() const; virtual voidfillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; virtual voidRooAbsReal::fillTreeBranch(TTree& t); voidRooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; virtual RooAbsGenContext*RooAbsPdf::genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooDataSet*RooAbsPdf::generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype, Double_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; RooAbsCachedPdf::PdfCacheElem*getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); virtual TStringhistNameSuffix() const; Bool_tRooAbsArg::inhibitDirty() const; virtual const char*inputBaseName() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedPdf.html:35278,extend,extended,35278,root/html602/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedPdf.html,2,['extend'],['extended']
Modifiability,"heElem*createCache(const RooArgSet* nset) const; RooAbsReal*RooAbsReal::createIntObj(const RooArgSet& iset, const RooArgSet* nset, const RooNumIntConfig* cfg, const char* rangeName) const; voiddisableCache(Bool_t flag); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tRooAbsReal::evaluate() const; virtual voidfillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; virtual voidRooAbsReal::fillTreeBranch(TTree& t); voidRooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; virtual RooAbsGenContext*RooAbsPdf::genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooDataSet*RooAbsPdf::generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype, Double_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; RooAbsCachedPdf::PdfCacheElem*getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<std::pair<RooAbsArg*,RooAbsArg*> >&); virtual TStringhistNameSuffix() const; Bool_tRooAbsArg::inhibitDirty() const; virtual const char*inputBaseName() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedPdf.html:35120,extend,extended,35120,root/html534/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedPdf.html,1,['extend'],['extended']
Modifiability,"heList_t fCacheStack;  Realloc function to be used when extending the buffer. ;  ; Bool_t fMode;  ; TObject * fParent;  ; ReAllocCharFun_t fReAllocFunc;  ; Int_t fVersion;  ;  Protected Attributes inherited from TXMLSetup; Int_t fRefCounter {0};  ; Bool_t fStoreStreamerInfos {kTRUE};  ; TString fStrBuf;  counter , used to build id of xml references ;  ; Bool_t fUseDtd {kFALSE};  ; Bool_t fUseNamespaces {kFALSE};  ; EXMLLayout fXmlLayout {kSpecialized};  . Friends; class TKeyXML;  . Additional Inherited Members;  Public Types inherited from TBufferIO; enum  { kMapSize = 503; };  ; enum  EStatusBits { ;   kNotDecompressed = (1ULL << ( 15 )); , kTextBasedStreaming = (1ULL << ( 18 )); , kUser1 = (1ULL << ( 21 )); , kUser2 = (1ULL << ( 22 )); , ;   kUser3 = (1ULL << ( 23 )). };  ;  Public Types inherited from TBuffer; enum  { kInitialSize = 1024; , kMinimalSize = 128; };  ; enum  EMode { kRead = 0; , kWrite = 1; };  ; enum  EStatusBits { kIsOwner = (1ULL << ( 16 )); , kCannotHandleMemberWiseStreaming = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TXMLSetup; enum  EXMLLayout { kSpecialized = 2; , kGeneralized = 3; };  ;  Protected Types inherited from TBufferIO; enum  { kNullTag = 0; };  ;  Protected Types inherited from TBuffer; typedef std::vector< TVirtualArray * > CacheList_t;  ;  Protected Types inherited from TObject; enum  { kOnlyPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferXML.html:51697,inherit,inherited,51697,doc/master/classTBufferXML.html,https://root.cern,https://root.cern/doc/master/classTBufferXML.html,2,['inherit'],['inherited']
Modifiability,"header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooCacheManager<vector<double> >. class RooCacheManager<vector<double> >: public RooAbsCache. Template class RooCacheManager manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to faciliate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). ; For efficiency reasons these normalization set pointer are; derefenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached. ; . Function Members (Methods); public:. virtual~RooCacheManager<vector<double,allocator<double> > >(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); vector<double,allocator<double> >*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); vector<double,allocator<double> >*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); vector<double,allocator<double> >*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(vector<double,allocator<double> >&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<vector<double,allocator<double> > >&operator=(const RooCacheManager<vector<double,allocator<double> > >&); virtual voidoperModeHook(); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCacheManager_vector_double___.html:1130,config,configurations,1130,root/html528/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html528/RooCacheManager_vector_double___.html,3,['config'],['configurations']
Modifiability,"header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooCacheManager<vector<double> >. class RooCacheManager<vector<double> >: public RooAbsCache. Template class RooCacheManager manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to faciliate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). ; For efficiency reasons these normalization set pointer are; derefenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached. ; . Function Members (Methods); public:. virtual~RooCacheManager<vector<double,allocator<double> > >(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); vector<double,allocator<double> >*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); vector<double,allocator<double> >*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName); vector<double,allocator<double> >*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); vector<double,allocator<double> >*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(vector<double,allocator<double> >&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCacheManager_vector_double___.html:1130,config,configurations,1130,root/html534/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html534/RooCacheManager_vector_double___.html,1,['config'],['configurations']
Modifiability,"header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooCacheManager<vector<double> >. class RooCacheManager<vector<double> >: public RooAbsCache. Template class RooCacheManager manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to faciliate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). ; For efficiency reasons these normalization set pointer are; derefenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached. ; . Function Members (Methods); public:. virtual~RooCacheManager<vector<double> >(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); vector<double>*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); vector<double>*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName); vector<double>*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); vector<double>*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(vector<double>&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<vector<double> >&operator=(const RooCacheManager<vector<double> >&); virtual voidoperModeHook(); virtual voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCacheManager_vector_double___.html:1130,config,configurations,1130,root/html602/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html602/RooCacheManager_vector_double___.html,2,['config'],['configurations']
Modifiability,"header in the given module. ;  ; const clang::TagDecl * GetAnnotatedRedeclarable (const clang::TagDecl *TND);  ; const clang::TypedefNameDecl * GetAnnotatedRedeclarable (const clang::TypedefNameDecl *TND);  ; template<typename T > ; const T * GetAnnotatedRedeclarable (const T *Redecl);  ; llvm::StringRef GetClassComment (const clang::CXXRecordDecl &decl, clang::SourceLocation *loc, const cling::Interpreter &interpreter);  Return the class comment after the ClassDef: class MyClass { ... ClassDef(MyClass, 1) // class comment. ;  ; int GetClassVersion (const clang::RecordDecl *cl, const cling::Interpreter &interp);  Return the version number of the class or -1 if the function Class_Version does not exist. ;  ; llvm::StringRef GetComment (const clang::Decl &decl, clang::SourceLocation *loc=nullptr);  Returns the comment (// striped away), annotating declaration in a meaningful for ROOT IO way. ;  ; void GetCppName (std::string &output, const char *input);  Return (in the argument 'output') a valid name of the C++ symbol/type (pass as 'input') that can be used in C++ as a variable name. ;  ; int & GetErrorIgnoreLevel ();  ; std::string GetFileName (const clang::Decl &decl, const cling::Interpreter &interp);  Return the header file to be included to declare the Decl. ;  ; void GetFullyQualifiedTypeName (std::string &name, const clang::QualType &type, const clang::ASTContext &);  ; void GetFullyQualifiedTypeName (std::string &name, const clang::QualType &type, const cling::Interpreter &interpreter);  ; const clang::FunctionDecl * GetFuncWithProto (const clang::Decl *cinfo, const char *method, const char *proto, const cling::Interpreter &gInterp, bool diagnose);  ; long GetLineNumber (clang::Decl const *);  It looks like the template specialization decl actually contains less information on the location of the code than the decl (in case where there is forward declaration, that is what the specialization points to. ;  ; std::string GetModuleFileName (const char *moduleName)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:5848,variab,variable,5848,doc/master/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html,1,['variab'],['variable']
Modifiability,"heckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TCefTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TCefTimer(). TCefTimer::TCefTimer ; (; Long_t ; milliSec, . Bool_t ; mode . ). inline . Definition at line 35 of file RCefWebDisplayHandle.cxx. Member Function Documentation. ◆ Timeout(). void TCefTimer::Timeout ; (; ). inlineoverridevirtual . Reimplemented from TTimer.; Definition at line 36 of file RCefWebDisplayHandle.cxx. gui/cefdisplay/src/RCefWebDisplayHandle.cxx. TCefTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCefTimer.html:16429,inherit,inherited,16429,doc/master/classTCefTimer.html,https://root.cern,https://root.cern/doc/master/classTCefTimer.html,3,['inherit'],['inherited']
Modifiability,"hecked checkbox is added. void BrowseObj(TObject* obj); Browse object. This, in turn, will trigger the calling of; TRootBrowser::Add() which will fill the IconBox and the tree.; Emits signal ""BrowseObj(TObject*)"". void CloneBrowser(); Clone the browser. A new Browser will be created, with the same; plugins executed in the current one. void CloseTab(Int_t id); Remove tab element id from right tab. void CloseWindow(); Called when window is closed via the window manager. void DoTab(Int_t id); Handle Tab navigation. Long_t ExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); Execute a macro and embed the created frame in the tab ""pos""; and tab element ""subpos"". Option_t * GetDrawOption() const; Returns drawing option. TGTab* GetTab(Int_t pos) const; Returns the TGTab at position pos. Bool_t HandleKey(Event_t* event); Handle keyboard events. void HandleMenu(Int_t id); Handle menu entries events. void InitPlugins(Option_t* opt = """"); Initialize default plugins. Could be also of the form:; StartEmbedding(0);; TPluginHandler *ph;; ph = gROOT->GetPluginManager()->FindHandler(""TGClassBrowser"");; if (ph && ph->LoadPlugin() != -1) {; ph->ExecPlugin(3, gClient->GetRoot(), 200, 500);; }; StopEmbedding();. void ReallyDelete(); Really delete the browser and the this GUI. void RecursiveRemove(TObject* obj); Recursively remove object from browser. void RecursiveReparent(TGPopupMenu* popup); Recursively reparent TGPopupMenu to gClient->GetDefaultRoot(). void Refresh(Bool_t force = kFALSE); Refresh the actual browser contents. void RemoveTab(Int_t pos, Int_t subpos); Remove tab element ""subpos"" from tab ""pos"". void SetTab(Int_t pos = kRight, Int_t subpos = -1); Switch to Tab ""subpos"" in TGTab ""pos"". void SetTabTitle(const char* title, Int_t pos = kRight, Int_t subpos = -1); Set text ""title"" of Tab ""subpos"" in TGTab ""pos"". void SetStatusText(const char* txt, Int_t col); Set text in culumn col in status bar. void ShowMenu(TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootBrowser.html:27201,plugin,plugins,27201,root/html528/TRootBrowser.html,https://root.cern,https://root.cern/root/html528/TRootBrowser.html,1,['plugin'],['plugins']
Modifiability,"hecked for write events. ;  ; Int_t fSigcnt {0};  ; TSeqCollection * fSignalHandler {nullptr};  ; TFdSet * fSignals {nullptr};  Files with writes waiting. ;  ; TString fSoExt;  ; TSeqCollection * fStdExceptionHandler {nullptr};  ; TList * fTimers {nullptr};  ; TString fWdpath;  ; TFdSet * fWritemask {nullptr};  Files that should be checked for read events. ;  ; TFdSet * fWriteready {nullptr};  Files with reads waiting. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TNetSystem (const TNetSystem &)=delete;  ; void * GetDirPtr () const override;  ; TNetSystem & operator= (const TNetSystem &)=delete;  . Private Attributes; Bool_t fDir;  ; void * fDirp;  ; TFTP * fFTP;  ; Bool_t fFTPOwner;  ; TString fHost;  ; Int_t fPort;  ; TString fUser;  . Additional Inherited Members;  Public Types inherited from TSystem; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TSystem; static const char * StripOffProto (const char *path, const char *proto);  Strip off protocol string from specified path. ;  . #include <TNetFile.h>. Inheritance diagram for TNetSystem:. This browser is not able to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetSystem.html:33083,inherit,inherited,33083,doc/master/classTNetSystem.html,https://root.cern,https://root.cern/doc/master/classTNetSystem.html,2,['inherit'],['inherited']
Modifiability,"hed from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:8686,variab,variables,8686,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,9,['variab'],"['variable', 'variables']"
Modifiability,"hed normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooObjCacheManager _cacheMgr;  ; RooArgSet * _curNormSet = nullptr;  The cache manager. ;  ; TMatrixD * _M = nullptr;  ; TVectorD * _mref = nullptr;  ; RooListProxy _pdfList;  ; Setting _setting;  ; bool _useHorizMorph = true;  ; RooSetProxy _varList;  ; RooRealProxy m;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFunc.html:57330,inherit,inherited,57330,doc/master/classRooMomentMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFunc.html,1,['inherit'],['inherited']
Modifiability,"heir function, and these will be used by RooRealIntegral, if it determines that this is safe (i.e., no hidden Jacobian terms, multiplication with other PDFs that have one or more dependents in common, etc).; Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; int; should return the analytical integrals that are supported. integSet is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet, and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. Second,; double analyticalIntegral(Int_t code); RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; implements the actual analytical integral(s) advertised by getAnalyticalIntegral(). This function will only be called with codes returned by getAnalyticalIntegral(), except code zero.; The integration range for each dependent to be integrated can be obtained from the dependent's proxy functions min() and max(). Never call these proxy functions for any proxy not known to be a dependent via the integration code. Doing so may be ill-defined, e.g., in case the proxy holds a function, and will trigger an assert. Integrated category dependents should always be summed over all of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:3585,config,configuration,3585,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['config'],['configuration']
Modifiability,"helix with its attributes. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetAxis (Double_t const *axis);  Set a new axis for the helix. This will make a new rotation matrix. ;  ; virtual void SetAxis (Double_t x, Double_t y, Double_t z);  Set axis. ;  ; void SetHelix (Double_t const *xyz, Double_t const *v, Double_t w, Double_t const *range=nullptr, EHelixRangeType type=kUnchanged, Double_t const *axis=nullptr);  Set all helix parameters. ;  ; void SetOption (Option_t *option="""") override;  ; virtual void SetRange (Double_t *range, EHelixRangeType rtype=kHelixZ);  Set a new range for the helix. This will remake the polyline. ;  ; virtual void SetRange (Double_t r1, Double_t r2, EHelixRangeType rtype=kHelixZ);  Set range. ;  ; void Streamer (TBuffer &) override;  Stream an object of class THelix. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TPolyLine3D;  TPolyLine3D ();  3-D polyline default constructor. ;  ;  TPolyLine3D (const TPolyLine3D &polylin);  3-D polyline copy ctor. ;  ;  TPolyLine3D (Int_t n, Double_t const *p, Option_t *option="""");  3-D polyline normal constructor. ;  ;  TPolyLine3D (Int_t n, Double_t const *x, Double_t const *y, Double_t const *z, Option_t *option="""");  3-D polyline normal constructor. ;  ;  TPolyLine3D (Int_t n, Float_t const *p, Option_t *option="""");  3-D polyline normal constructor. ;  ;  TPolyLine3D (Int_t n, Float_t const *x, Float_t const *y, Float_t const *z, Option_t *option="""");  3-D polyline normal constructor. ;  ;  TPolyLine3D (Int_t n, Option_t *option="""");  3-D polyline normal constructor with initialization to 0. ;  ;  ~TPolyLine3D () override;  3-D polyline destructor. ;  ; void Copy (TObject &polyline) const override;  Copy polyline to polyline obj. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a 3-D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHelix.html:4566,inherit,inherited,4566,doc/master/classTHelix.html,https://root.cern,https://root.cern/doc/master/classTHelix.html,1,['inherit'],['inherited']
Modifiability,"hem ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BasicMinimizer.html:8054,variab,variable,8054,root/html534/ROOT__Math__BasicMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BasicMinimizer.html,3,['variab'],['variable']
Modifiability,"hemical elements. The original spectrum before unfolding is given in Figure 4.7. The obtained coefficients after unfolding, i.e., the contents of the responses in the original spectrum, are presented in the Figure 4.8. Original spectrum before unfolding. Contents of the responses in the original spectrum. Another example where we have used the unfolding method is the decomposition of continuum of gamma-ray spectra. Using simulation and interpolation techniques, we have synthesized the response matrix (size 3400x3400 channels) of Gammasphere spectrometer (Figure 4.9). Its details are presented in Figure 4.10. The original spectrum of Co^56 before and after continuum decomposition are presented in Figures 4.11, 4.12, respectively. Response matrix (size 3400x3400 channels) of Gammasphere spectrometer. Detail of Figure 4.9. Original spectrum of Co56 before continuum decomposition. Original spectrum of Co56 after continuum decomposition. 4.3 2-DIMENSIONAL SPECTRA; We have extended the method of Gold deconvolution also for 2-dimensional data. Again, the goal of the deconvolution methods is to improve the resolution in the spectrum and to decompose multiplets. The method of optimized 2-dimensional deconvolution is described in details in [8].; Mathematical formulation of 2-dimensional convolution system is as follows:; \[ y(i_1,i_2) = \sum_{k_1=0}^{N_1-1}\sum_{k_2=0}^{N_2-1}h(i_1-k_1,i_2-k_2)x(k_1,k_2), i_1=0,1,2,...,N_1-1, i_2=0,1,2,...,N_2-1 \]; Assuming we know the output spectrum y and the response spectrum h, the task is to calculate the matrix x.; The basic function has the form of; char *Deconvolution2(float **source,; const float **resp,; int sizex,; int sizey,; int niter);; This function calculates deconvolution from the source spectrum according to the response spectrum. The result is placed in the matrix pointed by the source pointer.; Function parameters:. source: pointer to the matrix of the source spectrum; resp: pointer to the matrix of the response spectrum;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:30705,extend,extended,30705,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['extend'],['extended']
Modifiability,"hen a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3845,extend,extended,3845,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['extend'],['extended']
Modifiability,"hen drawing the profile2D. See TProfile2D::BuildOptions for more explanations on errors. void BuildOptions(Double_t zmin, Double_t zmax, Option_t* option); Set Profile2D histogram structure and options*-*-; *-* =============================================. If a cell has N data points all with the same value Z (especially; possible when dealing with integers), the spread in Z for that cell; is zero, and the uncertainty assigned is also zero, and the cell is; ignored in making subsequent fits. If SQRT(Z) was the correct error; in the case above, then SQRT(Z)/SQRT(N) would be the correct error here.; In fact, any cell with non-zero number of entries N but with zero spread; should have an uncertainty SQRT(Z)/SQRT(N). Now, is SQRT(Z)/SQRT(N) really the correct uncertainty?; that it is only in the case where the Z variable is some sort; of counting statistics, following a Poisson distribution. This should; probably be set as the default case. However, Z can be any variable; from an original NTUPLE, not necessarily distributed ""Poissonly"".; The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(Z)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(Z) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0. The third case above corresponds to Integer Z values for which the; uncertainty is +-0.5, with the assumption that the probability that Z; takes any value between Z-0.5 and Z+0.5 is uniform (the same argument; goes for Z uniformly distributed between Z and Z+1); this would be; useful if Z is an ADC measurement, for example. Other, fancier options; would be possible, at the cost of adding one more parameter to the PROFILE2D; For example, if all Z variables are distributed according to some; known Gaussian of standard deviation Sigma, th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:31173,variab,variable,31173,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,3,['variab'],['variable']
Modifiability,"hen going to be processed by PROOF; Long64_tTTree::fReadEntry! Number of the entry being processed; Long64_tTTree::fSavedBytesNumber of autosaved bytes; Int_tTTree::fScanFieldNumber of runs before prompting in Scan; TList*fStatus-> List of active/inactive branches (TChainElement, owned); Int_tTTree::fTimerIntervalTimer interval in milliseconds; TStringTNamed::fTitleobject title; Long64_tTTree::fTotBytesTotal number of bytes in all branches before compression; Long64_tTTree::fTotalBuffers! Total number of bytes in branch buffers; TBuffer*TTree::fTransientBuffer! Pointer to the current transient buffer.; TTree*fTree! Pointer to current tree (Note: We do *not* own this tree.); TVirtualIndex*TTree::fTreeIndexPointer to the tree Index (if any); Int_tfTreeNumber! Current Tree number in fTreeOffset table; Long64_t*fTreeOffset[fTreeOffsetLen] Array of variables; Int_tfTreeOffsetLenCurrent size of fTreeOffset array; Int_tTTree::fUpdateUpdate frequency for EntryLoop; TList*TTree::fUserInfopointer to a list of user objects associated to this Tree; Double_tTTree::fWeightTree weight (see TTree::SetWeight); Long64_tTTree::fZipBytesTotal number of bytes in all branches after compression; static Int_tTTree::fgBranchStyleOld/New branch style; static Long64_tTTree::fgMaxTreeSizeMaximum size of a file containg a Tree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TChain(); -- Default constructor. TChain(const char* name, const char* title = """"); -- Create a chain. A TChain is a collection of TFile objects.; the first parameter ""name"" is the name of the TTree object; in the files added with Add.; Use TChain::Add to add a new element to this chain. In case the Tree is in a subdirectory, do, eg:; TChain ch(""subdir/treename"");. Example:; Suppose we have 3 files f1.root, f2.root and f3.root. Each file; contains a TTree object named ""T"".; TChain ch(""T""); creates a chain to process a Tree called ""T""; ch.Add(""f1.root"");; ch.Add(""f2.root"");; ch.Add(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TChain.html:25714,variab,variables,25714,root/html530/TChain.html,https://root.cern,https://root.cern/root/html530/TChain.html,3,['variab'],['variables']
Modifiability,"hen it multiplies transformed coefficients in the given region by the given enhance_coeff and transforms it back; Function parameters:; fSource-pointer to the matrix of source spectrum, its size should be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be fSizeX*fSizeY. Example of enhancement; This function transforms the source spectrum (for details see Transform function). Before the Enhance function is called the class must be created by constructor and the type of the transform as well as some other parameters must be set using a set of setter functions. The Enhance function multiplies transformed coefficients in the given region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it back. Enhanced data are written into dest spectrum. Example - script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63) were multiplied by 5); Script:; Example to illustrate enhancement (class TSpectrumTransform2). To execute this example, do; root > .x Enhance2.C; void Enhance2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[i]= new Double_t[nbinsy];; for (i=0;i<nbinsx;i++); dest[i]= new Double_t[nbinsy];; TH2F *trans = new TH2F(""trans"",""Background estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; TFile *f = new TFile(""TSpectrum2.root"");; trans=(TH2F*)f->Get(""back3;1"");; TCanvas *Tr = new TCanvas(""Transform"",""Illustration of transform function"",10,10,1000,700);; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; source[i][j] = trans->GetBinContent(i + 1,j + 1);; }; }; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);; t->SetTransformType(t->kTransformCos,0);; t->SetRegion(0,63,0,63);; t->SetEn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Transform.html:19544,enhance,enhancement,19544,doc/master/classTSpectrum2Transform.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html,1,['enhance'],['enhancement']
Modifiability,"hen its containing plot object is destroyed. void addTH1(TH1* hist, Option_t* drawOptions = """", Bool_t invisible = kFALSE); Add a TH1 histogram object to this plot. The specified options; will be used to Draw() this object later. ""SAME"" will be added to; the options if they are not already present. The caller transfers; ownership of the object with this call, and the object will be; deleted when its containing plot object is destroyed. void addPlotable(RooPlotable* plotable, Option_t* drawOptions = """", Bool_t invisible = kFALSE, Bool_t refreshNorm = kFALSE); Add the specified plotable object to our plot. Increase our y-axis; limits to fit this object if necessary. The default lower-limit; is zero unless we are plotting an object that takes on negative values.; This call transfers ownership of the plotable object to this class.; The plotable object will be deleted when this plot object is deleted. void updateFitRangeNorm(const TH1* hist); Update our plot normalization over our plot variable's fit range,; which will be determined by the first suitable object added to our plot. void updateFitRangeNorm(const RooPlotable* rp, Bool_t refeshNorm = kFALSE); Update our plot normalization over our plot variable's fit range,; which will be determined by the first suitable object added to our plot. void updateYAxis(Double_t ymin, Double_t ymax, const char* label = """"); Update our y-axis limits to accomodate an object whose spread; in y is (ymin,ymax). Use the specified y-axis label if we don't; have one assigned already. void Draw(Option_t* options = 0); Draw this plot and all of the elements it contains. The specified options; only apply to the drawing of our frame. The options specified in our add...(); methods will be used to draw each object we contain. void printName(ostream& os) const; Print frame name. void printTitle(ostream& os) const; Print frame title. void printClassName(ostream& os) const; Print frame class name. void printArgs(ostream& os) const. void printValue(o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPlot.html:16310,variab,variable,16310,root/html526/RooPlot.html,https://root.cern,https://root.cern/root/html526/RooPlot.html,7,['variab'],['variable']
Modifiability,"hen object is fully supported on JSROOT side In ROOT7 Paint function will just return appropriate flag that object can be displayed on JSROOT side. ; Definition at line 302 of file TWebCanvas.cxx. ◆ IsLocked(). Bool_t TWebCanvas::IsLocked ; (; ). inlineoverrideprotectedvirtual . Reimplemented from TCanvasImp.; Definition at line 131 of file TWebCanvas.h. ◆ IsReadOnly(). virtual Bool_t TWebCanvas::IsReadOnly ; (; ); const. inlinevirtual . Definition at line 194 of file TWebCanvas.h. ◆ IsWeb(). Bool_t TWebCanvas::IsWeb ; (; ); const. inlineoverrideprotectedvirtual . Reimplemented from TCanvasImp.; Definition at line 133 of file TWebCanvas.h. ◆ Lock(). void TWebCanvas::Lock ; (; ). inlineoverrideprotectedvirtual . Reimplemented from TCanvasImp.; Definition at line 129 of file TWebCanvas.h. ◆ NewCanvas(). TCanvasImp * TWebCanvas::NewCanvas ; (; TCanvas * ; c, . const char * ; name, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height . ). static . Static method to create TWebCanvas instance Used by plugin manager. ; Definition at line 2869 of file TWebCanvas.cxx. ◆ PerformUpdate(). Bool_t TWebCanvas::PerformUpdate ; (; Bool_t ; async). overrideprotectedvirtual . if canvas or any subpad was modified, scan all primitives in the TCanvas and subpads and convert them into the structure which will be delivered to JSROOT client ; Reimplemented from TCanvasImp.; Definition at line 2319 of file TWebCanvas.cxx. ◆ ProcessCustomScripts(). std::string TWebCanvas::ProcessCustomScripts ; (; bool ; batch). staticprotected . For batch mode special handling of scripts are required Headless browser not able to load modules from the file system Therefore custom web-canvas modules and scripts has to be loaded in advance and processed. ; Definition at line 389 of file TWebCanvas.cxx. ◆ ProcessData(). Bool_t TWebCanvas::ProcessData ; (; unsigned ; connid, . const std::string & ; arg . ). protectedvirtual . Handle data from web browser Returns kFALSE if message was not processed. ; De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:30918,plugin,plugin,30918,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['plugin'],['plugin']
Modifiability,"hen one wants to histogram some attributes of an object (entry); without reading all the attributes. ==> TTree *tree = new TTree(name, title); Creates a Tree with name and title. Various kinds of branches can be added to a tree:; A - simple structures or list of variables. (may be for C or Fortran structures); B - any object (inheriting from TObject). (we expect this option be the most frequent); C - a ClonesArray. (a specialized object for collections of same class objects). ==> Case A. TBranch *branch = tree->Branch(branchname, address, leaflist, bufsize); * address is the address of the first item of a structure; * leaflist is the concatenation of all the variable names and types; separated by a colon character :; The variable name and the variable type are separated by a; slash (/). The variable type must be 1 character. (Characters; after the first are legal and will be appended to the visible; name of the leaf, but have no effect.) If no type is given, the; type of the variable is assumed to be the same as the previous; variable. If the first variable does not have a type, it is; assumed of type F by default. The list of currently supported; types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t); - O : [the letter 'o', not a zero] a boolean (Bool_t); * If the address points to a single numerical variable, the leaflist is optional:; int value;; tree->Branch(branchname, &value);; * If the address points to more than one numerical variable, we strongly recommend; that the variable be sorted in decreasing order of size. Any other o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:2267,variab,variable,2267,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,8,['variab'],['variable']
Modifiability,"hen the split-level is 1, an object data member is assigned a branch. If the split-level is 2, the data member objects will be split also, and a split level of 3 its data members objects, will be split. As the split-level increases so does the splitting depth. The ROOT default for the split-level is 99. This means the object will be split to the maximum.; 12.10.1.1 Memory Considerations when Splitting a Branch; Splitting a branch can quickly generate many branches. Each branch has its own buffer in memory. In case of many branches (say more than 100), you should adjust the buffer size accordingly. A recommended buffer size is 32000 bytes if you have less than 50 branches. Around 16000 bytes if you have less than 100 branches and 4000 bytes if you have more than 500 branches. These numbers are recommended for computers with memory size ranging from 32MB to 256MB. If you have more memory, you should specify larger buffer sizes. However, in this case, do not forget that your file might be used on another machine with a smaller memory configuration.; 12.10.1.2 Performance Considerations when Splitting a Branch; A split branch is faster to read, but slightly slower to write. The reading is quicker because variables of the same type are stored consecutively and the type does not have to be read each time. It is slower to write because of the large number of buffers as described above. See ""; Performance Benchmarks"" for performance impact of split and non-split mode.; 12.10.1.3 Rules for Splitting; When splitting a branch, variables of different types are handled differently. Here are the rules that apply when splitting a branch. If a data member is a basic type, it becomes one branch of class TBranchElement.; A data member can be an array of basic types. In this case, one single branch is created for the array.; A data member can be a pointer to an array of basic types. The length can vary, and must be specified in the comment field of the data member in the class definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:544337,config,configuration,544337,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['config'],['configuration']
Modifiability,"hen timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSingleShotCleaner.html:2515,inherit,inherited,2515,doc/master/classTSingleShotCleaner.html,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html,1,['inherit'],['inherited']
Modifiability,"her TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGraphPainter * GetPainter ();  Static function returning a pointer to the current graph painter. ;  ; static void SetPainter (TVirtualGraphPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Static Private Attributes; static TVirtualGraphPainter * fgPainter = nullptr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGraphPainter.html:9571,inherit,inherited,9571,doc/master/classTVirtualGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTVirtualGraphPainter.html,1,['inherit'],['inherited']
Modifiability,"her TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGRowLayout; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGVerticalLayout; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColumnLayout.html:10148,inherit,inherited,10148,doc/master/classTGColumnLayout.html,https://root.cern,https://root.cern/doc/master/classTGColumnLayout.html,4,['inherit'],['inherited']
Modifiability,"her function binding; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:43041,config,configuration,43041,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,2,['config'],['configuration']
Modifiability,"her function binding; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:41773,config,configuration,41773,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['config'],['configuration']
Modifiability,"her function binding; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:41252,config,configuration,41252,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['config'],['configuration']
Modifiability,"her new instances of RooPlot will add themselves to gDirectory. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void fillItemsFromTList (Items &items, TList const &tlist);  RooFit-internal function for backwards compatibility. ;  ; static RooPlot * frame (const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins);  Create a new frame for a given variable in x. ;  ; static RooPlot * frameWithLabels (const RooAbsRealLValue &var);  Create a new frame for a given variable in x, adding bin labels. ;  ; static bool setAddDirectoryStatus (bool flag);  Configure whether new instances of RooPlot will add themselves to gDirectory. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:23097,inherit,inherited,23097,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,2,['inherit'],['inherited']
Modifiability,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:104507,parameteriz,parameterized,104507,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,['parameteriz'],"['parameterization', 'parameterized']"
Modifiability,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:105766,parameteriz,parameterized,105766,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,['parameteriz'],"['parameterization', 'parameterized']"
Modifiability,"her::EFisherMethodkMahalanobis; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fBetwbetween-class matrix; TMatrixD*fCovfull covariance matrix; vector<Double_t>*fDiscrimPowdiscriminating power; Double_tfF0offset; vector<Double_t>*fFisherCoeffFisher coefficients; TMVA::MethodFisher::EFisherMethodfFisherMethodFisher or Mahalanobis; TMatrixD*fMeanMatx; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; TStringfTheMethodFisher or Mahalanobis; TMatrixD*fWithwithin-class matrix. Class Charts. Inheritance; Inherited Members; Includes; Librarie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodFisher.html:19124,variab,variables,19124,root/html602/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodFisher.html,4,['variab'],"['variable', 'variables']"
Modifiability,"herDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TXMLSetup; Int_t AtoI (const char *sbuf, Int_t def=0, const char *errinfo=nullptr);  converts string to integer. ;  ; const char * GetElItemName (TStreamerElement *el);  get item name for given element ;  ; Bool_t IsValidXmlSetup (const char *setupstr);  checks if string is valid setup ;  ; Bool_t ReadSetupFromStr (const char *setupstr);  get values from string ;  ; TClass * XmlDefineClass (const char *xmlClassName);  define class for the converted class name, where special symbols were replaced by '_' ;  . Static Protected Member Functions; static void ProduceFileNames (const char *filename, TString &fname, TString &dtdname);  function produces pair of xml and dtd file names ;  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_fla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:37130,inherit,inherited,37130,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['inherit'],['inherited']
Modifiability,"here is an unbinned equivalent, RooDataSet. Inspecting a datahist; Inspect a datahist using Print() to get the coordinates and weight() to get the bin contents: datahist->Print(""V"");; datahist->get(0)->Print(""V""); std::cout << ""w="" << datahist->weight(0) << std::endl;; datahist->get(1)->Print(""V""); std::cout << ""w="" << datahist->weight(1) << std::endl;; ... Plotting data.; See RooAbsData::plotOn(). Creating a datahist using RDataFrame; See alsoRooAbsDataHelper, rf408_RDataFrameToRooFit.C. PyROOT; Constructor of RooDataHist takes a RooCmdArg as argument also supports keyword arguments. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; dh = ROOT.RooDataHist(""dh"", ""dh"", ROOT.RooArgList(x), ROOT.RooFit.Import(""SampleA"", histo)); ; # With keyword arguments:; dh = ROOT.RooDataHist(""dh"", ""dh"", ROOT.RooArgList(x), Import=(""SampleA"", histo)). Definition at line 40 of file RooDataHist.h. Classes; struct  VarInfo;  Structure to cache information on the histogram variable that is frequently used for histogram weights retrieval. More...;  . Public Member Functions;  RooDataHist ();  Default constructor. ;  ;  RooDataHist (const RooDataHist &other, const char *newname=nullptr);  Copy constructor. ;  ;  RooDataHist (RooStringView name, RooStringView title, const RooArgList &vars, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Constructor of a binned dataset from a RooArgSet defining the dimensions of the data space. ;  ;  RooDataHist (RooStringView name, RooStringView title, const RooArgList &vars, const TH1 *hist, double initWgt=1.0);  Constructor of a data hist from an TH1,TH2 or TH3 The RooArgSet 'vars' defines the dimensions of the histogram. ;  ; template<class Val_t > ;  RooDataHist (RooStringView name, RooStringView title, const RooArgList &vars, RooCategory &indexCat, RooFit::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:1721,variab,variable,1721,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['variab'],['variable']
Modifiability,"here is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static FontStruct_t GetDefaultFontStruct ();  Return default font structure. ;  ; static const TGGC & GetDefaultGC ();  Return default graphics context. ;  ;  Static Public Member Functions inherited from TGFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shadow color graphics context. ;  ; static const TGGC & GetWhiteGC ();  Get white graphics context. ;  ; static Pixel_t GetWhitePixel ();  Get white pixel value. ;  ;  Static Public Member Functions inherited from TGWindow; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetCounter ();  Return global",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableCell.html:19787,inherit,inherited,19787,doc/master/classTGTableCell.html,https://root.cern,https://root.cern/doc/master/classTGTableCell.html,1,['inherit'],['inherited']
Modifiability,"heritance Chart:. TObject. ←; TSelector. ←; TSelectorEntries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorEntries.html:8576,extend,extended,8576,root/html602/TSelectorEntries.html,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html,1,['extend'],['extended']
Modifiability,"heritance diagram for xRooProjectedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ clone(). TObject * xRooProjectedPdf::clone ; (; const char * ; newname); const. inlineoverridevirtual . Reimplemented from RooProjectedPdf.; Definition at line 7152 of file xRooNode.cxx. ◆ evaluate(). double xRooProjectedPdf::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate projected p.d.f. ; Reimplemented from RooProjectedPdf.; Definition at line 7155 of file xRooNode.cxx. ◆ expectedEvents(). double xRooProjectedPdf::expectedEvents ; (; const RooArgSet * ; nset); const. inlineoverridevirtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented from RooProjectedPdf.; Definition at line 7147 of file xRooNode.cxx. ◆ extendMode(). ExtendMode xRooProjectedPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooProjectedPdf.; Definition at line 7151 of file xRooNode.cxx. ◆ RooProjectedPdf() [1/3]. RooProjectedPdf::RooProjectedPdf ; (; ). Default constructor. ; Definition at line 24 of file RooProjectedPdf.cxx. ◆ RooProjectedPdf() [2/3]. RooProjectedPdf::RooProjectedPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _intpdf, . const RooArgSet & ; intObs . ). Construct projection of input pdf '_intpdf' over observables 'intObs'. ; Definition at line 25 of file RooProjectedPdf.cxx. ◆ RooProjectedPdf() [3/3]. RooProjectedPdf::RooProjectedPdf ; (; const RooProjectedPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 26 of file RooProjectedPdf.cxx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:75060,extend,extendMode,75060,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['extend'],['extendMode']
Modifiability,"heritance.; 2673 ; 2674TClass *TClass::GetBaseClass(const TClass *cl); 2675{; 2676 // check if class name itself is equal to classname; 2677 if (cl == this) return this;; 2678 ; 2679 if (!HasDataMemberInfo()) return nullptr;; 2680 ; 2681 TObjLink *lnk = GetListOfBases() ? fBase.load()->FirstLink() : nullptr;; 2682 ; 2683 // otherwise look at inheritance tree; 2684 while (lnk) {; 2685 TClass *c, *c1;; 2686 TBaseClass *base = (TBaseClass*) lnk->GetObject();; 2687 c = base->GetClassPointer();; 2688 if (c) {; 2689 if (cl == c) return c;; 2690 c1 = c->GetBaseClass(cl);; 2691 if (c1) return c1;; 2692 }; 2693 lnk = lnk->Next();; 2694 }; 2695 return nullptr;; 2696}; 2697 ; 2698////////////////////////////////////////////////////////////////////////////////; 2699/// Return data member offset to the base class ""cl"".; 2700/// - Returns -1 in case ""cl"" is not a base class.; 2701/// - Returns -2 if cl is a base class, but we can't find the offset; 2702/// because it's virtual.; 2703/// Takes care of multiple inheritance.; 2704 ; 2705Int_t TClass::GetBaseClassOffsetRecurse(const TClass *cl); 2706{; 2707 // check if class name itself is equal to classname; 2708 if (cl == this) return 0;; 2709 ; 2710 if (!fBase.load()) {; 2711 if (fCanLoadClassInfo) LoadClassInfo();; 2712 // If the information was not provided by the root pcm files and; 2713 // if we can not find the ClassInfo, we have to fall back to the; 2714 // StreamerInfo; 2715 if (!fClassInfo) {; 2716 TVirtualStreamerInfo *sinfo = GetCurrentStreamerInfo();; 2717 if (!sinfo) return -1;; 2718 TStreamerElement *element;; 2719 Int_t offset = 0;; 2720 ; 2721 TObjArray &elems = *(sinfo->GetElements());; 2722 Int_t size = elems.GetLast()+1;; 2723 for(Int_t i=0; i<size; i++) {; 2724 element = (TStreamerElement*)elems[i];; 2725 if (element->IsBase()) {; 2726 if (element->IsA() == TStreamerBase::Class()) {; 2727 TStreamerBase *base = (TStreamerBase*)element;; 2728 TClass *baseclass = base->GetClassPointer();; 2729 if (!baseclass) return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:101382,inherit,inheritance,101382,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['inherit'],['inheritance']
Modifiability,"heritance.; 2740 ; 2741TClass *TClass::GetBaseClass(const TClass *cl); 2742{; 2743 // check if class name itself is equal to classname; 2744 if (cl == this) return this;; 2745 ; 2746 if (!HasDataMemberInfo()) return nullptr;; 2747 ; 2748 TObjLink *lnk = GetListOfBases() ? fBase.load()->FirstLink() : nullptr;; 2749 ; 2750 // otherwise look at inheritance tree; 2751 while (lnk) {; 2752 TClass *c, *c1;; 2753 TBaseClass *base = (TBaseClass*) lnk->GetObject();; 2754 c = base->GetClassPointer();; 2755 if (c) {; 2756 if (cl == c) return c;; 2757 c1 = c->GetBaseClass(cl);; 2758 if (c1) return c1;; 2759 }; 2760 lnk = lnk->Next();; 2761 }; 2762 return nullptr;; 2763}; 2764 ; 2765////////////////////////////////////////////////////////////////////////////////; 2766/// Return data member offset to the base class ""cl"".; 2767/// - Returns -1 in case ""cl"" is not a base class.; 2768/// - Returns -2 if cl is a base class, but we can't find the offset; 2769/// because it's virtual.; 2770/// Takes care of multiple inheritance.; 2771 ; 2772Int_t TClass::GetBaseClassOffsetRecurse(const TClass *cl); 2773{; 2774 // check if class name itself is equal to classname; 2775 if (cl == this) return 0;; 2776 ; 2777 if (!fBase.load()) {; 2778 if (fCanLoadClassInfo) LoadClassInfo();; 2779 // If the information was not provided by the root pcm files and; 2780 // if we can not find the ClassInfo, we have to fall back to the; 2781 // StreamerInfo; 2782 if (!fClassInfo) {; 2783 TVirtualStreamerInfo *sinfo = GetCurrentStreamerInfo();; 2784 if (!sinfo) return -1;; 2785 TStreamerElement *element;; 2786 Int_t offset = 0;; 2787 ; 2788 TObjArray &elems = *(sinfo->GetElements());; 2789 Int_t size = elems.GetLast()+1;; 2790 for(Int_t i=0; i<size; i++) {; 2791 element = (TStreamerElement*)elems[i];; 2792 if (element->IsBase()) {; 2793 if (element->IsA() == TStreamerBase::Class()) {; 2794 TStreamerBase *base = (TStreamerBase*)element;; 2795 TClass *baseclass = base->GetClassPointer();; 2796 if (!baseclass) return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:104133,inherit,inheritance,104133,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['inherit'],['inheritance']
Modifiability,"heritance; Inherited Members; Includes; Libraries. Function documentation; void ProjectPointfv(Float_t* v, Float_t d); Project float array. void ProjectPointdv(Double_t* v, Float_t d); Project double array.; This is a bit piggish as we convert the doubles to floats and back. void ProjectVector(TEveVector& v, Float_t d); Project TEveVector. void ProjectPointfv(const TEveTrans* t, const Float_t* p, Float_t* v, Float_t d); Project float array, converting it to global coordinate system first if; transformation matrix is set. void ProjectPointdv(const TEveTrans* t, const Double_t* p, Double_t* v, Float_t d); Project double array, converting it to global coordinate system first if; transformation matrix is set.; This is a bit piggish as we convert the doubles to floats and back. void ProjectVector(const TEveTrans* t, TEveVector& v, Float_t d); Project TEveVector, converting it to global coordinate system first if; transformation matrix is set. void PreScaleVariable(Int_t dim, Float_t& v); Pre-scale single variable with pre-scale entry dim. void PreScalePoint(Float_t& x, Float_t& y); Pre-scale point (x, y) in projected coordinates for 2D projections:; RhoZ ~ (rho, z); RPhi ~ (r, phi), scaling phi doesn't make much sense. void PreScalePoint(Float_t& x, Float_t& y, Float_t& z); Pre-scale point (x, y, z) in projected coordinates for 3D projection. void AddPreScaleEntry(Int_t coord, Float_t max_val, Float_t scale); Add new scaling range for given coordinate.; Arguments:; coord 0 ~ x, 1 ~ y, 2 ~ z; value value of input coordinate from which to apply this scale;; scale the scale to apply from value onwards. NOTE: If pre-scaling is combined with center-displaced then; the scale of the central region should be 1. This limitation; can be removed but will cost CPU. void ChangePreScaleEntry(Int_t coord, Int_t entry, Float_t new_scale); Change scale for given entry and coordinate. NOTE: If the first entry you created used other value than 0,; one entry (covering range from 0 to this v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveProjection.html:5428,variab,variable,5428,root/html528/TEveProjection.html,https://root.cern,https://root.cern/root/html528/TEveProjection.html,4,['variab'],['variable']
Modifiability,"herited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup hook for RooSentinel atexit handler. ~RooResolutionModel(); Destructor. RooFormulaVar* identity(); Return identity formula pointer. RooResolutionModel* convolution(RooFormulaVar* basis, RooAbsArg* owner) const; Instantiate a clone of this resolution model representing a convolution with given; basis function. The owners object name is incorporated in the clones name; to avoid multiple convolution objects with the same name in complex PDF structures. Note: The 'inBasis' formula expression must be a RooFormulaVar that encodes the formula; in the title of the object and this expression must be an exact match against the; implemented basis function strings (see derived class implementation of method basisCode(); for those strings. void changeBasis(RooFormulaVar* basis); Change the basis function we convolute with.; For one-time use by convolution() only. const RooRealVar& basisConvVar() const; Return the convolution variable of the selection basis function.; This is, by definition, the first parameter of the basis function. RooRealVar& convVar() const; Return the convolution variable of the resolution model. Double_t getVal(const RooArgSet* nset = 0) const; Modified version of RooAbsPdf::getVal(). If used as regular PDF,; call RooAbsPdf::getVal(), otherwise return unnormalized value; regardless of specified normalization set. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward redirectServers call to our basis function, which is not connected to either resolution; model or the physics model. Bool_t traceEvalHook(Double_t value) const; Floating point error checking and tracing for given float value. void normLeafServerList(RooArgSet& list) const; Return the list of servers used by our normalization integral. Double_t getNorm(const RooArgSet* nset = 0) const; Return the integral of this PDF over all eleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooResolutionModel.html:42593,variab,variable,42593,root/html526/RooResolutionModel.html,https://root.cern,https://root.cern/root/html526/RooResolutionModel.html,3,['variab'],['variable']
Modifiability,"herited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup hook for RooSentinel atexit handler. ~RooResolutionModel(); Destructor. RooFormulaVar* identity(); Return identity formula pointer. RooResolutionModel* convolution(RooFormulaVar* basis, RooAbsArg* owner) const; Instantiate a clone of this resolution model representing a convolution with given; basis function. The owners object name is incorporated in the clones name; to avoid multiple convolution objects with the same name in complex PDF structures. Note: The 'inBasis' formula expression must be a RooFormulaVar that encodes the formula; in the title of the object and this expression must be an exact match against the; implemented basis function strings (see derived class implementation of method basisCode(); for those strings. void changeBasis(RooFormulaVar* basis); Change the basis function we convolute with.; For one-time use by convolution() only. const RooRealVar& basisConvVar() const; Return the convolution variable of the selection basis function.; This is, by definition, the first parameter of the basis function. RooRealVar& convVar() const; Return the convolution variable of the resolution model. Double_t getValV(const RooArgSet* nset = 0) const; Modified version of RooAbsPdf::getValF(). If used as regular PDF,; call RooAbsPdf::getValF(), otherwise return unnormalized value; regardless of specified normalization set. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward redirectServers call to our basis function, which is not connected to either resolution; model or the physics model. Bool_t traceEvalHook(Double_t value) const; Floating point error checking and tracing for given float value. void normLeafServerList(RooArgSet& list) const; Return the list of servers used by our normalization integral. Double_t getNorm(const RooArgSet* nset = 0) const; Return the integral of this PDF over all el",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:44884,variab,variable,44884,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,2,['variab'],['variable']
Modifiability,"herited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Private Attributes; std::vector< std::vector< double > > fBinEdge;  ; std::vector< std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::vector< double > fData;  Stores the data values the same way as the coordinates. ;  ; std::vector< double > fDataError;  ; std::vector< double > fDataErrorHigh;  ; const double * fDataErrorHighPtr;  ; std::vector< double > fDataErrorLow;  ; const double * fDataErrorLowPtr;  ; const double * fDataErrorPtr;  ; const double * fDataPtr;  ; ErrorType fErrorType;  ; bool fIsWeighted = false;  flag to indicate weighted data ;  ; double * fpTmpBinEdgeVector;  not threadsafe stuff! ;  ; double * fpTmpCoordErrorVector;  not threadsafe stuff! ;  ; double fRefVolume;  reference bin volume - used to normalize the bins in case of variable bins data ;  ; double fSumContent = 0;  total sum of the bin data content ;  ; double fSumError2 = 0;  total sum square of the errors ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/BinData.h>. Inheritance diagram for ROOT::Fit::BinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ErrorType. enum ROOT::Fit::B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:13693,variab,variable,13693,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['variab'],['variable']
Modifiability,"herited from RooAbsRealLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:54603,config,configuration,54603,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,3,['config'],['configuration']
Modifiability,"herited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; TGCompositeFrame * fContainer;  main container ;  ; Int_t fCurrent;  index of current tab ;  ; FontStruct_t fFontStruct;  font ;  ; GContext_t fNormGC;  drawing context ;  ; TList * fRemoved;  list of removed tabs ;  ; Bool_t fScrolling;  true if tab scrolling enabled ;  ; UInt_t fTabh;  tab height ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTab.html:29522,inherit,inherited,29522,doc/master/classTGTab.html,https://root.cern,https://root.cern/doc/master/classTGTab.html,2,['inherit'],['inherited']
Modifiability,"herited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TParallelCoordVar ();  Default constructor. ;  ;  TParallelCoordVar (Double_t *val, const char *title, Int_t id, TParallelCoord *gram);  Normal constructor. ;  ;  ~TParallelCoordVar () override;  Destructor. ;  ; void AddRange ();  ; void AddRange (TParallelCoordRange *range);  Add a range to the current selection on the axis. ;  ; void DeleteVariable ();  Delete variables. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes the distance from the axis. ;  ; void Draw (Option_t *option="""") override;  Draw the axis. ;  ; bool Eval (Long64_t evtidx, TParallelCoordSelect *select);  Check if the entry is within the range(s) of ""select"". ;  ; void ExecuteEvent (Int_t entry, Int_t px, Int_t py) override;  Execute the corresponding entry. ;  ; bool GetBarHisto ();  ; bool GetBoxPlot ();  ; Double_t GetCurrentAverage () const;  ; Double_t GetCurrentMax () const;  ; Double_t GetCurrentMin () const;  ; Int_t GetEntryWeight (Long64_t evtidx);  Get the entry weight: The weight of an entry for a given variable is the bin content of the histogram bin the entry is going through. ;  ; void GetEntryXY (Long64_t n, Double_t &x, Double_t &y);  Get the position of the variable on the graph for the n'th entry. ;  ; Int_t GetHistBinning () const;  ; Double_t GetHistHeight ();  ; Int_t GetHistLineWidth ();  ; TH1F * GetHistogram ();  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordVar.html:2138,variab,variables,2138,doc/master/classTParallelCoordVar.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordVar.html,1,['variab'],['variables']
Modifiability,"herited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TClassTable ();  TClassTable singleton is deleted in Terminate(). ;  ; int Classes ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the class table. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTable.html:2088,inherit,inherited,2088,doc/master/classTClassTable.html,https://root.cern,https://root.cern/doc/master/classTClassTable.html,1,['inherit'],['inherited']
Modifiability,"herited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TIdleTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TIdleTimer(). TIdleTimer::TIdleTimer ; (; Long_t ; ms). inline . Definition at line 62 of file TApplication.cxx. Member Function Documentation. ◆ Notify(). Bool_t TIdleTimer::Notify ; (; ). overridevirtual . Notify handler. ; Implements TSysEvtHandler.; Definition at line 69 of file TApplication.cxx. core/base/src/TApplication.cxx. TIdleTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIdleTimer.html:16453,inherit,inherited,16453,doc/master/classTIdleTimer.html,https://root.cern,https://root.cern/doc/master/classTIdleTimer.html,3,['inherit'],['inherited']
Modifiability,"herited from TVirtualFitter; typedef void(* FCNFunc_t) (Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TVirtualFitter;  TVirtualFitter (const TVirtualFitter &tvf);  copy constructor ;  ; TVirtualFitter & operator= (const TVirtualFitter &tvf);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualFitter; Double_t * fCache;  [fCacheSize] Array of points data (fNpoints*fPointSize < fCacheSize words) ;  ; Int_t fCacheSize;  Size of the fCache array. ;  ; void(* fFCN )(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ; TMethodCall * fMethodCall;  Pointer to MethodCall in case of interpreted function. ;  ; Int_t fNpoints;  Number of points to fit. ;  ; TObject * fObjectFit;  Pointer to object being fitted. ;  ; Foption_t fOption;  Struct with the fit options. ;  ; Int_t fPointSize;  Number of words per point in the cache. ;  ; TObject * fUserFunc;  Pointer to user theoretical function (a TF1*) ;  ; Int_t fXfirst;  First bin on X axis. ;  ; Int_t fXlast;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitter.html:17144,inherit,inherited,17144,doc/master/classTFitter.html,https://root.cern,https://root.cern/doc/master/classTFitter.html,9,['inherit'],['inherited']
Modifiability,"herwise) ;  ; Int_t Minimize ();  Main minimization procedure. ;  ; void PrintResults (Int_t k, Double_t p) const override;  Prints fit results. ;  ; void ReleaseParameter (Int_t ipar) override;  Releases parameter number ipar. ;  ; void SetData (Double_t *, Int_t, Int_t);  Sets pointer to data array provided by user. ;  ; void SetFitMethod (const char *name) override;  ret fit method (chisquare or log-likelihood) ;  ; Int_t SetParameter (Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) override;  Sets for parameter number ipar initial parameter value, name parname, initial error verr and limits vlow and vhigh. ;  ; void SetParNumber (Int_t ParNum);  ; Int_t SGZ ();  Evaluates objective function ( chi-square ), gradients and Z-matrix using data provided by user via TFumili::SetData. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualFitter;  TVirtualFitter ();  Default constructor. ;  ;  ~TVirtualFitter () override;  Cleanup virtual fitter. ;  ; virtual void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95);  return confidence intervals in array x of dimension ndim implemented in TFitter and TLinearFitter ;  ; virtual void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95);  return confidence intervals in TObject obj implemented in TFitter and TLinearFitter ;  ; virtual FCNFunc_t GetFCN ();  ; virtual Foption_t GetFitOption () const;  ; TMethodCall * GetMethodCall () const;  ; virtual TObject * GetObjectFit () const;  ; virtual TObject * GetUserFunc () const;  ; virtual Int_t GetXfirst () const;  ; virtual Int_t GetXlast () const;  ; virtual Int_t GetYfirst () const;  ; virtual Int_t GetYlast () const;  ; virtual Int_t GetZfirst () const;  ; virtual Int_t GetZlast () const;  ; TClass * IsA () const override;  ; virtual Double_t *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:7867,inherit,inherited,7867,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['inherit'],['inherited']
Modifiability,"hes ; TString_sealNoticeUser-defined notice shown when reading a sealed likelihood ; Bool_t_sealedIs test statistic sealed -- i.e. no access to data ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Int_tRooAbsTestStatistic::_setNumPartition number of this instance in parallel calculation mode; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_tRooAbsTestStatistic::_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void initSlave(RooAbsReal& real, RooAbsData& indata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName). ~RooAbsOptTestStatistic(); Destructor. Double_t combinedValue(RooAbsReal** gofArray, Int_t nVal) const; Method to combined test statistic results calculated into partitions into; the global result. This default implementation adds the partition return; values. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:40513,config,configuration,40513,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,1,['config'],['configuration']
Modifiability,"hes. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MCFitter Class ReferenceTMVA. ; Fitter using Monte Carlo sampling of parameters. ; Definition at line 44 of file MCFitter.h. Public Member Functions;  MCFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~MCFitter ();  ; virtual TClass * IsA () const;  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles);  set MC fitter configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; templa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MCFitter.html:954,inherit,inherited,954,doc/master/classTMVA_1_1MCFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html,1,['inherit'],['inherited']
Modifiability,"hexagon vertices r, rotation angle angle (in degrees), and length along z of depth. ;  ; void ComputeBBox () override;  Fill bounding-box information of the base-class TAttBBox (virtual method). ;  ; Int_t GetBoxSkip () const;  ; Float_t GetDefDepth () const;  ; Float_t GetDefHeight () const;  ; Float_t GetDefWidth () const;  ; Bool_t GetDrawConeCap () const;  ; TClass * IsA () const override;  ; void Reset ();  Reset the data containers to zero size. ;  ; void Reset (EBoxType_e boxType, Bool_t valIsCol, Int_t chunkSize);  Reset the data containers to zero size. ;  ; void SetBoxSkip (Int_t bs);  ; void SetDefDepth (Float_t v);  ; void SetDefHeight (Float_t v);  ; void SetDefWidth (Float_t v);  ; void SetDrawConeCap (Bool_t x);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Test (Int_t nboxes);  Fill the structure with a random set of boxes. ;  ;  Public Member Functions inherited from TEveDigitSet;  TEveDigitSet (const char *n=""TEveDigitSet"", const char *t="""");  ;  ~TEveDigitSet () override;  Destructor. ;  ; TEveRGBAPalette * AssertPalette ();  Make sure the TEveRGBAPalette pointer is not null. ;  ; void DigitColor (Color_t ci);  Set color for the last digit added. ;  ; void DigitColor (Color_t ci, Char_t transparency);  Set color for the last digit added. ;  ; void DigitColor (UChar_t *rgba);  Set color for the last digit added. ;  ; void DigitColor (UChar_t r, UChar_t g, UChar_t b, UChar_t a=255);  Set color for the last digit added. ;  ; void DigitId (Int_t n, TObject *id);  Set external object reference for digit n. ;  ; void DigitId (TObject *id);  Set external object reference for the last digit added. ;  ; virtual void DigitSelected (Int_t idx);  Called from renderer when a digit with index idx is selected. ;  ; void DigitUserData (Int_t n, void *ud);  Set user-data for digit n. ;  ; void DigitUserData (void *ud);  Set user-data for the last digit added. ;  ; void DigitValue (Int_t value);  Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxSet.html:5360,inherit,inherited,5360,doc/master/classTEveBoxSet.html,https://root.cern,https://root.cern/doc/master/classTEveBoxSet.html,1,['inherit'],['inherited']
Modifiability,"hey are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is triggered and all results are produced simultaneously.; It is therefore good practice to declare all your transformations and actions before accessing their results, allowing RDataFrame to run the loop once and produce all results in one go. Going parallel; Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores. The only modification required to the snippets would be the addition of this line before constructing the main dataframe object: ROOT::EnableImplicitMT();; Simple as that. More details are given below. Working with collections and object selections; RDataFrame reads collections as the special type ROOT::RVec: for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pts"");; ROOT::VecOps::RVec< float >; ptTPaveText * ptDefinition entrylist_figure1.C:7; And in Python:; h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); Learn more at ROOT::VecOps::RVec. Transformations: manipulating data. Filters; A filter is created through a call to Filter(f, columnList) or Filter(filterString). In the first overload, f can be a function, a lambda e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:26182,variab,variable,26182,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['variab'],['variable']
Modifiability,"hey are numbers) will be respectively:; %30.3g %30.3g %20.10g %#x %5ld. TSQLResult * Query(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); Loop on Tree and return TSQLResult object containing entries passing; selection. If varexp is 0 (or """") then print only first 8 columns.; If varexp = ""*"" print all columns. Otherwise a columns selection can; be made using ""var1:var2:var3"". In case of error 0 is returned otherwise; a TSQLResult object which must be deleted by the user. void SetEstimate(Long64_t n); -*-*-*-*-*Set number of entries to estimate variable limits; *-* ================================================. void StartViewer(Int_t ww, Int_t wh); Start the TTreeViewer on this TTree*-; *-* ===================================. ww is the width of the canvas in pixels; wh is the height of the canvas in pixels. Int_t UnbinnedFit(const char* formula, const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); Unbinned fit of one or more variable(s) from a Tree; *-* ===================================================. funcname is a TF1 function. See TTree::Draw for explanations of the other parameters. Fit the variable varexp using the function funcname using the; selection cuts given by selection. The list of fit options is given in parameter option.; option = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""M"" More. Improve fit results; = ""D"" Draw the projected histogram with the fitted function; normalized to the number of selected rows; and multiplied by the bin width. You can specify boundary limits for some or all parameters via; func->SetParLimits(p_number, parmin, parmax);; if parmin>=parmax, the parameter is fixed; Note that you are not forced to fix the limits for all parameters.; For example, if you fit a function with 6 parameters, you can do:; func->SetParameters(0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:55764,variab,variable,55764,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,6,['variab'],['variable']
Modifiability,"hey happen to end up ; Definition at line 891 of file DecisionTree.cxx. ◆ FillTree(). void TMVA::DecisionTree::FillTree ; (; const EventList & ; eventSample). fill the existing the decision tree structure by filling event in from the top node and see where they happen to end up ; Definition at line 880 of file DecisionTree.cxx. ◆ GetAnalysisType(). Types::EAnalysisType TMVA::DecisionTree::GetAnalysisType ; (; void ; ). inline . Definition at line 190 of file DecisionTree.h. ◆ GetEventNode(). TMVA::DecisionTreeNode * TMVA::DecisionTree::GetEventNode ; (; const TMVA::Event & ; e); const. get the pointer to the leaf node where a particular event ends up in... (used in gradient boosting) ; Definition at line 2673 of file DecisionTree.cxx. ◆ GetFisherCoefficients(). std::vector< Double_t > TMVA::DecisionTree::GetFisherCoefficients ; (; const EventConstList & ; eventSample, . UInt_t ; nFisherVars, . UInt_t * ; mapVarInFisher . ). calculate the fisher coefficients for the event sample and the variables used ; Definition at line 2342 of file DecisionTree.cxx. ◆ GetNNodesBeforePruning(). Int_t TMVA::DecisionTree::GetNNodesBeforePruning ; (; ). inline . Definition at line 180 of file DecisionTree.h. ◆ GetNode(). TMVA::Node * TMVA::DecisionTree::GetNode ; (; ULong_t ; sequence, . UInt_t ; depth . ). retrieve node from the tree. ; Its position (up to a maximal tree depth of 64) is coded as a sequence of left-right moves starting from the root, coded as 0-1 bit patterns stored in the ""long-integer"" (i.e. 0:left ; 1:right ; Definition at line 1231 of file DecisionTree.cxx. ◆ GetNodePurityLimit(). Double_t TMVA::DecisionTree::GetNodePurityLimit ; (; ); const. inline . Definition at line 162 of file DecisionTree.h. ◆ GetPruneStrength(). Double_t TMVA::DecisionTree::GetPruneStrength ; (; ); const. inline . Definition at line 147 of file DecisionTree.h. ◆ GetRandomisedVariables(). void TMVA::DecisionTree::GetRandomisedVariables ; (; Bool_t * ; useVariable, . UInt_t * ; variableMap, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:20382,variab,variables,20382,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,1,['variab'],['variables']
Modifiability,"hey must be separated by "";"":; 186~~~ {.cpp}; 187 TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; 188~~~; 189 The histogram title and the axis titles can be any TLatex string, and; 190 are persisted if a histogram is written to a file.; 191 ; 192 Any title can be omitted:; 193~~~ {.cpp}; 194 TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; 195 TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; 196~~~; 197 The method SetTitle() has the same syntax:; 198~~~ {.cpp}; 199 h->SetTitle(""Histogram title;Another X title Axis"");; 200~~~; 201Alternatively, the title of each axis can be set directly:; 202~~~ {.cpp}; 203 h->GetXaxis()->SetTitle(""X axis title"");; 204 h->GetYaxis()->SetTitle(""Y axis title"");; 205~~~; 206For bin labels see \ref binning.; 207 ; 208\anchor binning; 209## Binning; 210 ; 211\anchor fix-var; 212### Fix or variable bin size; 213 ; 214 All histogram types support either fix or variable bin sizes.; 215 2-D histograms may have fix size bins along X and variable size bins; 216 along Y or vice-versa. The functions to fill, manipulate, draw or access; 217 histograms are identical in both cases.; 218 ; 219 Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; 220 To access the axis parameters, use:; 221~~~ {.cpp}; 222 TAxis *xaxis = h->GetXaxis(); etc.; 223 Double_t binCenter = xaxis->GetBinCenter(bin), etc.; 224~~~; 225 See class TAxis for a description of all the access functions.; 226 The axis range is always stored internally in double precision.; 227 ; 228\anchor convention; 229### Convention for numbering bins; 230 ; 231 For all histogram types: nbins, xlow, xup; 232~~~ {.cpp}; 233 bin = 0; underflow bin; 234 bin = 1; first bin with low-edge xlow INCLUDED; 235 bin = nbins; last bin with upper-edge xup EXCLUDED; 236 bin = nbins+1; overflow bin; 237~~~; 238 In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; 239 For example, assuming a 3-D histogram with (binx, biny, binz), the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:9745,variab,variable,9745,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['variab'],['variable']
Modifiability,"hi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); TStringRooAbsArg::cleanBranchName() const; virtual voidRooAbsReal::copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE); RooAbsReal*RooAbsReal::createIntObj(const RooArgSet& iset, const RooArgSet* nset, const RooNumIntConfig* cfg, const char* rangeName) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidRooAbsReal::fillTreeBranch(TTree& t); voidRooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; virtual RooAbsGenContext*genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooDataSet*RooAbsPdf::generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype, Int_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<std::pair<RooAbsArg*,RooAbsArg*> >&); static Bool_tRooAbsArg::inhibitDirty(); voidinitialize(RooAbsCategoryLValue& inIndexCat, map<std::string,RooAbsPdf*> pdfMap); TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:33659,extend,extended,33659,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,1,['extend'],['extended']
Modifiability,"hi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); TStringRooAbsArg::cleanBranchName() const; virtual voidRooAbsReal::copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE); RooAbsReal*RooAbsReal::createIntObj(const RooArgSet& iset, const RooArgSet* nset, const RooNumIntConfig* cfg, const char* rangeName) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidRooAbsReal::fillTreeBranch(TTree& t); voidRooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; virtual RooAbsGenContext*genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooDataSet*RooAbsPdf::generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype, Int_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAddPdf::CacheElem*getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<std::pair<RooAbsArg*,RooAbsArg*> >&); static Bool_tRooAbsArg::inhibitDirty(); TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddPdf.html:33987,extend,extended,33987,root/html532/RooAddPdf.html,https://root.cern,https://root.cern/root/html532/RooAddPdf.html,1,['extend'],['extended']
Modifiability,"hibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,bool>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction4Binding_double_double_double_double_bool_.html:35777,config,configuration,35777,root/html534/RooCFunction4Binding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html534/RooCFunction4Binding_double_double_double_double_bool_.html,1,['config'],['configuration']
Modifiability,"hibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; std::unique_ptr< RooDataSet > generate (RooAbsGenContext &context, const RooArgSet &whatVars, const RooDataSet *prototype, double nEvents, bool verbose, bool randProtoOrder, bool resampleProto, bool skipInit=false, bool extended=false) const;  Internal method. ;  ; void logBatchComputationErrors (std::span< const double > &outputs, std::size_t begin) const;  Scan through outputs and fix+log all nans and negative values. ;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooArgSet &params, bool showConstants=false, const char *label="""", double xmin=0.65, double xmax=0.99, double ymax=0.95, const RooCmdArg *formatCmd=nullptr);  Add a text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalizatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:78567,extend,extended,78567,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['extend'],['extended']
Modifiability,"hich function equals yval. ;  ; virtual void fixAddCoefNormalization (const RooArgSet &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:24972,config,configuration,24972,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,2,['config'],['configuration']
Modifiability,"hich function equals yval. ;  ; virtual void fixAddCoefNormalization (const RooArgSet &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:24033,config,configuration,24033,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,1,['config'],['configuration']
Modifiability,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:18235,config,configured,18235,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,2,['config'],['configured']
Modifiability,"hich is normalised to 1. Clearly \(\tau_0~ < t ~< \tau\).; The References for MIXMAX are:. G.K.Savvidy and N.G.Ter-Arutyunian, On the Monte Carlo simulation of physical systems, J.Comput.Phys. 97, 566 (1991); Preprint EPI-865-16-86, Yerevan, Jan. 1986; K.Savvidy, The MIXMAX random number generator, Computer Physics Communications 196 (2015), pp 161–165 http://dx.doi.org/10.1016/j.cpc.2015.06.003; K.Savvidy and G.Savvidy, Spectrum and Entropy of C-systems MIXMAX Random Number Generator, Chaos, Solitons & Fractals, Volume 91, (2016) pp. 33–38 http://dx.doi.org/10.1016/j.chaos.2016.05.003 . Definition at line 102 of file MixMaxEngine.h. Public Types; typedef TRandomEngine BaseType;  ; typedef uint64_t Result_t;  ; typedef uint64_t StateInt_t;  . Public Member Functions;  MixMaxEngine (uint64_t seed=1);  ;  ~MixMaxEngine () override;  ; Result_t IntRndm ();  generate a 64 bit integer number ;  ; double operator() ();  generate a double random number (faster interface) ;  ; double Rndm () override;  ; void RndmArray (int n, double *array);  generate an array of random numbers ;  ; void SetSeed (Result_t seed);  set the generator seed ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static uint64_t MaxInt ();  maximum integer that can be generated. For MIXMAX is 2^61-1 ;  ; static uint64_t MinInt ();  minimum integer that can be generated. For MIXMAX is 0 ;  ; static const char * Name ();  get name of the generator ;  ; static int Size ();  Get the size of the generator. ;  . Protected Member Functions; int Counter () const;  Get the counter (between 0 and Size-1) ;  ; void GetState (std::vector< StateInt_t > &state) const;  get the state of the generator ;  ; void SetState (const std::vector< StateInt_t > &state);  set the full initial generator state ;  . Private Member Functions; double Rndm_impl ();  implementation function to generate the random number ;  . Private Attributes; MixMax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngine.html:3933,inherit,inherited,3933,doc/master/classROOT_1_1Math_1_1MixMaxEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngine.html,1,['inherit'],['inherited']
Modifiability,"hich retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. Function Members (Methods); public:. TS3WebFile(const char* url, Option_t* options = """"); virtual~TS3WebFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TS3WebFile.html:1348,variab,variables,1348,root/html534/TS3WebFile.html,https://root.cern,https://root.cern/root/html534/TS3WebFile.html,1,['variab'],['variables']
Modifiability,"hich retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. Function Members (Methods); public:. virtual~TS3WebFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TS3WebFile.html:1372,variab,variables,1372,root/html602/TS3WebFile.html,https://root.cern,https://root.cern/root/html602/TS3WebFile.html,2,['variab'],['variables']
Modifiability,"hich serves to fill an already created RooDataHist with the p.d.fs function values. In addition the member functions actualObservables() and actualParameters() must be define which report what the actual observables to be cached are for a given set of observables passed by the user to getVal() and on which parameters need to be tracked for changes to trigger a refilling of the cache histogram. ; Definition at line 25 of file RooAbsCachedPdf.h. Classes; class  AnaIntConfig;  ; class  PdfCacheElem;  . Public Types; using CacheElem = PdfCacheElem;  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:1324,inherit,inherited,1324,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,4,['inherit'],['inherited']
Modifiability,"hich shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot6.C;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplot6.py;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplotOld.C;  Example displaying two histograms and their ratio. ;  ; file  rebin.C;   Rebin a variable bin-width histogram. ;  ; file  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ; file  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__hist.html:5161,variab,variable,5161,doc/master/group__tutorial__hist.html,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html,1,['variab'],['variable']
Modifiability,"hicsLibs(); Static method. This method should be called from static library; initializers if the library needs the low level graphics system. void InitializeGraphics(); Initialize the graphics environment. void ClearInputFiles(); Clear list containing macro files passed as program arguments.; This method is called from TRint::Run() to ensure that the macro; files are only executed the first time Run() is called. char * Argv(Int_t index) const; Return specified argument. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Arguments handled are removed; from the argument array. The following arguments are handled:; -b : run in batch mode without graphics; -x : exit on exception; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; The last three options are only relevant in conjunction with TRint.; The following help and info arguments are supported:; -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; -memstat : run with memory usage monitoring; In addition to the above options the arguments that are not options,; i.e. they don't start with - or + are treated as follows (and also removed; from the argument array):; <dir> is considered the desired working directory and available; via WorkingDirectory(), if more than one dir is specified the; first one will prevail; <file> if the file exists its added to the InputFiles() list; <file>.root are considered ROOT files and added to the InputFiles() list,; the file may be a remote file url; <macro>.C are considered ROOT macros and also added to the InputFiles() list; In TRint we set the working directory to the <dir>, the ROOT files are; connected, and the macros are executed. If your main TApplication is not; TRint you have to decide yourself what to do whith these options.; All specified arguments (also the ones removed) can always be retrieved; via the T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplication.html:14490,config,config,14490,root/html528/TApplication.html,https://root.cern,https://root.cern/root/html528/TApplication.html,4,['config'],['config']
Modifiability,"high error; Double_t*_extWgtErrLoArray! External weight array - low error; RooVectorDataStore::CatVector**_firstCat! do not persist; RooVectorDataStore::RealVector**_firstReal! do not persist; RooVectorDataStore::RealFullVector**_firstRealF! do not persist; Int_t_nCat; Int_t_nEntries; Int_t_nReal; Int_t_nRealF; vector<RealVector*>_realStoreList; vector<RealFullVector*>_realfStoreList; Double_t_sumWeight; RooArgSet_varsww; RooRealVar*_wgtVarPointer to weight variable (if set). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooVectorDataStore(). RooVectorDataStore(const char* name, const char* title, const RooArgSet& vars, const char* wgtVarName = 0). void setAllBuffersNative(). RooArgSet varsNoWeight(const RooArgSet& allVars, const char* wgtName); Utility function for constructors; Return RooArgSet that is copy of allVars minus variable matching wgtName if specified. RooRealVar* weightVar(const RooArgSet& allVars, const char* wgtName); Utility function for constructors; Return pointer to weight variable if it is defined. RooVectorDataStore(const RooVectorDataStore& other, const char* newname = 0); Regular copy ctor. RooVectorDataStore(const RooTreeDataStore& other, const RooArgSet& vars, const char* newname = 0). RooVectorDataStore(const RooVectorDataStore& other, const RooArgSet& vars, const char* newname = 0); Clone ctor, must connect internal storage to given new external set of vars. RooVectorDataStore(const char* name, const char* title, RooAbsDataStore& tds, const RooArgSet& vars, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t , const char* wgtVarName = 0). ~RooVectorDataStore(); Destructor. Bool_t valid() const; Return true if currently loaded coordinate is considered valid within; the current range definitions of all observables. Int_t fill(); Interface function to TTree::Fill. const RooArgSet* get(Int_t index) const; Load the n-th data point (n='index') in memory; and return a p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooVectorDataStore.html:11949,variab,variable,11949,root/html532/RooVectorDataStore.html,https://root.cern,https://root.cern/root/html532/RooVectorDataStore.html,1,['variab'],['variable']
Modifiability,"hin- (Wij); and a between-class (Bij) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, Fi, are then given by . where in TMVA is set NS=NB, so that the factor; in front of the sum simplifies to ½.; The Fisher discriminant then reads. The offset F0 centers the sample mean of xFi; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. with resulting xMa that are very similar to the; xFi. ; TMVA provides two outputs for the ranking of the input variables:. Fisher test: the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: Bii/Wii.; ; Discrimination power: the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar; . The corresponding numbers are printed on standard output.; ; . Function Members (Methods); public:. virtual~MethodFisher(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFisher.html:2458,variab,variable,2458,root/html528/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFisher.html,6,['variab'],['variable']
Modifiability,"hingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowFrame() [1/2]. TEveWindowFrame::TEveWindowFrame ; (; const TEveWindowFrame & ; ). private . ◆ TEveWindowFrame() [2/2]. TEveWindowFrame::TEveWindowFrame ; (; TGFrame * ; frame, . const char * ; n = ""TEveWindowFrame"", . const char * ; t = """" . ). Constructor. ; If the passed frame is 0, a default TGCompositeFrame frame is instantiated and set to local-cleanup. ; Definition at line 1305 of file TEveWindow.cxx. ◆ ~TEveWindowFrame(). TEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowFrame.html:36819,inherit,inherited,36819,doc/master/classTEveWindowFrame.html,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html,1,['inherit'],['inherited']
Modifiability,"hingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowPack:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowPack() [1/2]. TEveWindowPack::TEveWindowPack ; (; const TEveWindowPack & ; ). private . ◆ TEveWindowPack() [2/2]. TEveWindowPack::TEveWindowPack ; (; TGPack * ; p, . const char * ; n = ""TEveWindowPack"", . const char * ; t = """" . ). Constructor. ; If passed pack is 0, a default one is instantiated. ; Definition at line 1352 of file TEveWindow.cxx. ◆ ~TEveWindowPack(). TEveWindowPack::~TEveWindowPack ; (; ). override . Destructor. ; De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowPack.html:37224,inherit,inherited,37224,doc/master/classTEveWindowPack.html,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html,1,['inherit'],['inherited']
Modifiability,"hingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowTab:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowTab() [1/2]. TEveWindowTab::TEveWindowTab ; (; const TEveWindowTab & ; ). private . ◆ TEveWindowTab() [2/2]. TEveWindowTab::TEveWindowTab ; (; TGTab * ; tab, . const char * ; n = ""TEveWindowTab"", . const char * ; t = """" . ). Constructor. ; If passed tab is 0, a default one is instantiated. ; Definition at line 1437 of file TEveWindow.cxx. ◆ ~TEveWindowTab(). TEveWindowTab::~TEveWindowTab ; (; ). override . Destructor. ; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowTab.html:36767,inherit,inherited,36767,doc/master/classTEveWindowTab.html,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html,1,['inherit'],['inherited']
Modifiability,"his array to n doubles and set the contents This function should not be called if the array was declared via Adopt. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void Approximate (Bool_t approx=kTRUE);  Static function, set the fgApproximate flag. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 mus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:49370,inherit,inherited,49370,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,3,['inherit'],['inherited']
Modifiability,"his class . ◆ Class_Name(). static const char * RooParamBinning::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooParamBinning::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 72 of file RooParamBinning.h. ◆ clone(). RooAbsBinning * RooParamBinning::clone ; (; const char * ; name = nullptr); const. inlineoverridevirtual . Implements RooAbsBinning.; Definition at line 30 of file RooParamBinning.h. ◆ DeclFileName(). static const char * RooParamBinning::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 72 of file RooParamBinning.h. ◆ highBound(). double RooParamBinning::highBound ; (; ); const. inlineoverridevirtual . Implements RooAbsBinning.; Definition at line 39 of file RooParamBinning.h. ◆ highBoundFunc(). RooAbsReal * RooParamBinning::highBoundFunc ; (; ); const. inlineoverridevirtual . Return pointer to RooAbsReal parameterized upper bound, if any. ; Reimplemented from RooAbsBinning.; Definition at line 57 of file RooParamBinning.h. ◆ insertHook(). void RooParamBinning::insertHook ; (; RooAbsRealLValue & ; owner); const. overridevirtual . Hook function called by RooAbsRealLValue when this binning is inserted as binning for into given owner. ; Create list proxy registered with owner that will track and implement server directs to external RooAbsReals of this binning ; Reimplemented from RooAbsBinning.; Definition at line 109 of file RooParamBinning.cxx. ◆ IsA(). TClass * RooParamBinning::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsBinning.; Definition at line 72 of file RooParamBinning.h. ◆ isParameterized(). bool RooParamBinning::isParameterized ; (; ); const. inlineoverridevirtual . Interface function. ; If true, min/max of binning is parameterized by external RooAbsReals. Default to false, unless overridden by a sub class. ; Reimp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamBinning.html:21432,parameteriz,parameterized,21432,doc/master/classRooParamBinning.html,https://root.cern,https://root.cern/doc/master/classRooParamBinning.html,1,['parameteriz'],['parameterized']
Modifiability,"his class . ◆ Class_Version(). static constexpr Version_t TBufferText::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 139 of file TBufferText.h. ◆ CompactFloatString(). void TBufferText::CompactFloatString ; (; char * ; sbuf, . unsigned ; len . ). static . method compress float string, excluding exp and/or move float point . 1.000000e-01 -> 0.1; 3.750000e+00 -> 3.75; 3.750000e-03 -> 0.00375; 3.750000e-04 -> 3.75e-4; 1.100000e-10 -> 1.1e-10 . Definition at line 707 of file TBufferText.cxx. ◆ ConvertDouble(). const char * TBufferText::ConvertDouble ; (; Double_t ; v, . char * ; buf, . unsigned ; len, . Bool_t ; not_optimize = kFALSE . ). static . convert float to string with configured format ; Definition at line 852 of file TBufferText.cxx. ◆ ConvertFloat(). const char * TBufferText::ConvertFloat ; (; Float_t ; v, . char * ; buf, . unsigned ; len, . Bool_t ; not_optimize = kFALSE . ). static . convert float to string with configured format ; Definition at line 836 of file TBufferText.cxx. ◆ DeclFileName(). static const char * TBufferText::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 139 of file TBufferText.h. ◆ GetDoubleFormat(). const char * TBufferText::GetDoubleFormat ; (; ). static . return current printf format for double members, default ""%.14e"" ; Definition at line 828 of file TBufferText.cxx. ◆ GetFloatFormat(). const char * TBufferText::GetFloatFormat ; (; ). static . return current printf format for float members, default ""%e"" ; Definition at line 809 of file TBufferText.cxx. ◆ IsA(). TClass * TBufferText::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBufferIO.; Reimplemented in TBufferXML.; Definition at line 139 of file TBufferText.h. ◆ ReadArrayDouble32(). Int_t TBufferText::ReadArrayDouble32 ; (; Double_t *& ; d, . TStreamerElement * ; ele = nullptr . ). overridevirtual . Read arr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferText.html:36716,config,configured,36716,doc/master/classTBufferText.html,https://root.cern,https://root.cern/doc/master/classTBufferText.html,1,['config'],['configured']
Modifiability,"his class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), so that \( S\) is minimal (TMultiDimFit::FindParameterization).; Of course it's more than a little unlikely that \( S\) will ever become exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:3123,variab,variable,3123,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['variab'],['variable']
Modifiability,"his class is called by default by the histogramming system and also by TTree::Draw, TTreePlayer::DrawSelect. TGaxis use it also to optimize axis labels.; A different finder may be specified via THLimitsFinder::SetFinder. ; Definition at line 28 of file THLimitsFinder.h. Public Member Functions;  THLimitsFinder ();  ;  ~THLimitsFinder () override;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax);  Compute the best axis limits for the X axis. ;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax);  Compute the best axis limits for the X and Y axis. ;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax);  Compute the best axis limits for the X, Y and Z axis. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHLimitsFinder.html:1386,inherit,inherited,1386,doc/master/classTHLimitsFinder.html,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html,1,['inherit'],['inherited']
Modifiability,"his connection from all signal lists; - we do not delete fSlot if it has other connections,; TQSlot::fCounter > 0 . const char * GetName() const; Returns name of connection (aka name of slot). void Destroyed(); Signal Destroyed tells that connection is destroyed. void ls(Option_t* option = """") const; List TQConnection full method name and list all signals; connected to this connection. void PrintCollectionHeader(Option_t* option) const; Print TQConnection full method name and print all; signals connected to this connection. void ExecuteMethod(); Apply slot-method to the fReceiver object without arguments. void ExecuteMethod(Long_t param); Apply slot-method to the fReceiver object with; single argument value. void ExecuteMethod(Long64_t param); Apply slot-method to the fReceiver object with; single argument value. void ExecuteMethod(Double_t param); Apply slot-method to the fReceiver object with; single argument value. void ExecuteMethod(Long_t* params, Int_t nparam = -1); Apply slot-method to the fReceiver object with variable; number of argument values. void ExecuteMethod(const char* params); Apply slot-method to the fReceiver object and; with string parameter. Bool_t CheckSlot(Int_t nargs) const; Return true if the underlying method is value and the number of argument; is compatible. void * GetSlotAddress() const; Return the object address to be passed to the function. CallFunc_t * LockSlot() const; Lock the interpreter and mark the slot as executing. void UnLockSlot(TQSlot* ) const; Unlock the interpreter and mark the slot as no longer executing. TQConnection & operator=(const TQConnection& ). void * GetReceiver() const; { return fReceiver; }. const char * GetClassName() const; { return fClassName; }. void ExecuteMethod(). » Author: Valeriy Onuchin & Fons Rademakers 15/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQConnection.html:16915,variab,variable,16915,root/html604/TQConnection.html,https://root.cern,https://root.cern/root/html604/TQConnection.html,1,['variab'],['variable']
Modifiability,"his connection from all signal lists; - we do not delete fSlot if it has other connections,; TQSlot::fCounter > 0 . const char * GetName() const; Returns name of connection (aka name of slot). void Destroyed(); Signal Destroyed tells that connection is destroyed. void ls(Option_t* option = """") const; List TQConnection full method name and list all signals; connected to this connection. void PrintCollectionHeader(Option_t* option) const; Print TQConnection full method name and print all; signals connected to this connection. void ExecuteMethod(); Apply slot-method to the fReceiver object without arguments. void ExecuteMethod(Long_t param); Apply slot-method to the fReceiver object with; single argument value. void ExecuteMethod(Long64_t param); Apply slot-method to the fReceiver object with; single argument value. void ExecuteMethod(Double_t param); Apply slot-method to the fReceiver object with; single argument value. void ExecuteMethod(Long_t* params, Int_t nparam = -1); Apply slot-method to the fReceiver object with variable; number of argument values. void ExecuteMethod(const char* params); Apply slot-method to the fReceiver object and; with string parameter. Bool_t CheckSlot(Int_t nargs) const; Return true if the underlying method is value and the number of argument; is compatible. void * GetSlotAddress() const; Return the object address to be passed to the function. CallFunc_t * LockSlot() const; Lock the interpreter and mark the slot as executing. void UnLockSlot(TQSlot* ) const; Unlock the interpreter and mark the slot as no longer executing. TQConnection & operator=(const TQConnection& ). void * GetReceiver() const; { return fReceiver; }. const char * GetClassName() const; { return fClassName; }. void ExecuteMethod(). » Author: Valeriy Onuchin & Fons Rademakers 15/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQConnection.html:16915,variab,variable,16915,root/html602/TQConnection.html,https://root.cern,https://root.cern/root/html602/TQConnection.html,1,['variab'],['variable']
Modifiability,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html:16346,inherit,inherited,16346,doc/master/structROOT_1_1v5_1_1TF1Data.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html,70,['inherit'],['inherited']
Modifiability,"his function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool IsLoaded (const char *);  Return true if the class needed by the branch is loaded. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBranchProxyClassDescriptor (const TBranchProxyClassDescriptor &b);  ; void NameToSymbol ();  Make the typename a proper class name without having the really deal with namespace and templates. ;  ; TBranchProxyClassDescriptor & operator= (const TBranchProxyClassDescriptor &);  . Private Attributes; TString fBranchName;  ; TString fContainerName;  ; TVirtualStreamerInfo * fInfo;  ; ELocation fIsClones;  ; bool fIsLeafList;  ; TList fListOfBaseProxies;  ; TList fListOfSubProxies;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:11903,inherit,inherited,11903,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,2,['inherit'],['inherited']
Modifiability,"his is different than FindBin; 400 ; 401Int_t TAxis::FindFixBin(const char *label) const; 402{; 403 //create list of labels if it does not exist yet; 404 if (!fLabels) return -1;; 405 ; 406 // search for label in the existing list and return it if it exists; 407 TObjString *obj = (TObjString*)fLabels->FindObject(label);; 408 if (obj) return (Int_t)obj->GetUniqueID();; 409 return -1;; 410}; 411 ; 412 ; 413////////////////////////////////////////////////////////////////////////////////; 414/// Find bin number corresponding to abscissa x; 415///; 416/// Identical to TAxis::FindBin except that if x is an underflow/overflow; 417/// no attempt is made to extend the axis.; 418 ; 419Int_t TAxis::FindFixBin(Double_t x) const; 420{; 421 Int_t bin;; 422 if (x < fXmin) { //*-* underflow; 423 bin = 0;; 424 } else if ( !(x < fXmax)) { //*-* overflow (note the way to catch NaN; 425 bin = fNbins+1;; 426 } else {; 427 if (!fXbins.fN) { //*-* fix bins; 428 bin = 1 + int (fNbins*(x-fXmin)/(fXmax-fXmin) );; 429 } else { //*-* variable bin sizes; 430// for (bin =1; x >= fXbins.fArray[bin]; bin++);; 431 bin = 1 + TMath::BinarySearch(fXbins.fN,fXbins.fArray,x);; 432 }; 433 }; 434 return bin;; 435}; 436 ; 437////////////////////////////////////////////////////////////////////////////////; 438/// Return label for bin; 439 ; 440const char *TAxis::GetBinLabel(Int_t bin) const; 441{; 442 if (!fLabels) return """";; 443 if (bin <= 0 || bin > fNbins) return """";; 444 TIter next(fLabels);; 445 TObjString *obj;; 446 while ((obj=(TObjString*)next())) {; 447 Int_t binid = (Int_t)obj->GetUniqueID();; 448 if (binid == bin) return obj->GetName();; 449 }; 450 return """";; 451}; 452 ; 453////////////////////////////////////////////////////////////////////////////////; 454/// Return first bin on the axis; 455/// i.e. 1 if no range defined; 456/// NOTE: in some cases a zero is returned (see TAxis::SetRange); 457 ; 458Int_t TAxis::GetFirst() const; 459{; 460 if (!TestBit(kAxisRange)) return 1;; 461 return fFirs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:13967,variab,variable,13967,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['variab'],['variable']
Modifiability,"his is done in the comments so that the code still compiles with a C++ compiler.; For example, you have a class with a Draw() method, which will display itself. You would like a context menu to appear when on clicks on the image of an object of this class. The recipe is the following:. The class has to contain the ClassDef/ClassImp macros; For each method you want to appear in the context menu, put a comment after the declaration containing *MENU* or *TOGGLE* depending on the behavior you expect. One usually uses Set methods (setters). The *TOGGLE* comment is used to toggle a boolean data field. In that case, it is safe to call the data field fMyBool where MyBool is the name of the setter SetMyBool. Replace MyBool with your own boolean variable.; You can specify arguments and the data members in which to store the arguments. For example:; class MyClass : public TObject {; private:; int fV1; // first variable; double fV2; // second variable; public:; int GetV1() {return fV1;}; double GetV2() {return fV2;}; void SetV1(int x1) { fV1 = x1;} // *MENU*; void SetV2(double d2) { fV2 = d2;} // *MENU*; void SetBoth(int x1, double d2) {fV1 = x1; fV2 = d2;}. ClassDef (MyClass,1); }; To specify arguments:; void SetXXX(Int_t x1, Float_t y2); //*MENU* *ARGS={x1=>fV1}; This statement is in the comment field, after the *MENU*. If there is more than one argument, these arguments are separated by commas, where fX1 and fY2 are data fields in the same class.; void SetXXX(Int_t x1, Float_t y2); //*MENU* *ARGS={x1=>fX1,y2=>fY2}; If the arguments statement is present, the option dialog displayed when selecting SetXXX field will show the values of variables. We indicate to the system which argument corresponds to which data member of the class.; 9.2.4 Executing Events when a Cursor Passes on Top of an Object; This paragraph is for class designers. When a class is designed, it is often desirable to include drawing methods for it. We will have a more extensive discussion about this, but drawi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:297392,variab,variable,297392,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['variab'],['variable']
Modifiability,"his means that 2 scripts with the same name in different source directory will over-write each other's library. See also TSystem::SetBuildDir.; If dirmode is not zero and we need to create the target directory, the file mode bit will be change to 'dirmode' using chmod.; If library_specified is not specified, CompileMacro generate a default name for library by taking the name of the file ""filename"" but replacing the dot before the extension by an underscore and by adding the shared library extension for the current platform. For example on most platform, hsimple.cxx will generate hsimple_cxx.so; It uses the directive fMakeSharedLibs to create a shared library. If loading the shared library fails, it tries to output a list of missing symbols by creating an executable (on some platforms like OSF, this does not HAVE to be an executable) containing the script. It uses the directive fMakeExe to do so. For both directives, before passing them to TSystem::Exec, it expands the variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs, $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more information on those variables.; This method is used to implement the following feature:; Synopsis:; The purpose of this addition is to allow the user to use an external compiler to create a shared library from its C++ macro (scripts). Currently in order to execute a script, a user has to type at the root prompt .X myfunc.C(arg1,arg2); We allow them to type: .X myfunc.C++(arg1,arg2); or .X myfunc.C+(arg1,arg2); In which case an external compiler will be called to create a shared library. This shared library will then be loaded and the function myfunc will be called with the two arguments. With '++' the shared library is always recompiled. With '+' the shared library is recompiled only if it does not exist yet or the macro file is newer than the shared library.; Of course the + and ++ notation is supported in similar way for .x and .L.; Through the function TSyste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:43052,variab,variables,43052,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['variab'],['variables']
Modifiability,"his object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * FinishToString (ESurfaceFinish finish);  ; static const char * ModelToString (ESurfaceModel model);  ; static ESurfaceFinish StringToFinish (const char *finish);  ; static ESurfaceModel StringToModel (const char *model);  ; static ESurfaceType StringToType (const char *type);  ; static const char * TypeToString (ESurfaceType type);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TGeoOpticalSurface (const TGeoOpticalSurface &)=delete;  ; TGeoOpticalSurface & operator= (const TGeoOpticalSurface &)=delete;  . Private Attributes; TList fConstProperties;  ; ESurfaceFinish fFinish = kFpolished; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoOpticalSurface.html:13125,inherit,inherited,13125,doc/master/classTGeoOpticalSurface.html,https://root.cern,https://root.cern/doc/master/classTGeoOpticalSurface.html,2,['inherit'],['inherited']
Modifiability,"his object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsMoment; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:45211,inherit,inherited,45211,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,6,['inherit'],['inherited']
Modifiability,"his object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Attributes; Bool_t fAbort;  ; TProofPlayer * fPlayer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStopTimer.html:13158,inherit,inherited,13158,doc/master/classTStopTimer.html,https://root.cern,https://root.cern/doc/master/classTStopTimer.html,1,['inherit'],['inherited']
Modifiability,"his object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExtendedTerm(); Constructor. RooExtendedTerm(const char* name, const char* title, const RooAbsReal& n); Constructor. An ExtendedTerm has no observables, it only introduces an extended; ML term with the given number of expected events when an extended ML is constructed; from this p.d.f. RooExtendedTerm(const RooExtendedTerm& other, const char* name = 0); Copy constructor. ~RooExtendedTerm(); Destructor. Double_t expectedEvents(const RooArgSet* /*nset*/); Return number of expected events from associated event count variable. TObject* clone(const char* newname) const; { return new RooExtendedTerm(*this,newname) ; }. Double_t evaluate() const; { return 1. ; }. ExtendMode extendMode() const; { return CanBeExtended ; }. Double_t expectedEvents(const RooArgSet* nset). » Last changed: Mon Dec 7 13:47:35 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooExtendedTerm.html:39574,extend,extended,39574,root/html526/RooExtendedTerm.html,https://root.cern,https://root.cern/root/html526/RooExtendedTerm.html,4,"['extend', 'variab']","['extendMode', 'extended', 'variable']"
Modifiability,"his; method when the addresses were changed via calls to SetBranchAddress(). void ResetBranchAddresses(); Reset the branch addresses to the internal fArgs array. Use this; method when the addresses were changed via calls to SetBranchAddress(). void Browse(TBrowser* b); Browse content of the ntuple. Int_t Fill(); -*-*Fill a Ntuple with current values in fArgs; *-* ==========================================; Note that this function is protected.; Currently called only by TChain::Merge. Int_t Fill(const Float_t* x); Fill a Ntuple with an array of floats. Int_t Fill(Float_t x0, Float_t x1 = 0, Float_t x2 = 0, Float_t x3 = 0, Float_t x4 = 0, Float_t x5 = 0, Float_t x6 = 0, Float_t x7 = 0, Float_t x8 = 0, Float_t x9 = 0, Float_t x10 = 0, Float_t x11 = 0, Float_t x12 = 0, Float_t x13 = 0, Float_t x14 = 0); Fill a Ntuple: Each Ntuple item is an argument. Long64_t ReadStream(istream& inputStream, const char* branchDescriptor = """", char delimiter = ' '); Read from filename as many columns as variables in the ntuple; the function returns the number of rows found in the file; The second argument ""branchDescriptor"" is currently not used.; Lines in the input file starting with ""#"" are ignored. Long64_t nlines = 0;; char newline = GetNewlineValue(inputStream);; while (1) {; if ( inputStream.peek() != '#' ) {; for (Int_t i=0;i<fNvar;i++) {; inputStream >> fArgs[i];; if (inputStream.peek() == delimiter) {; inputStream.get(); // skip delimiter.; }; }; if (!inputStream.good()) break;; TTree::Fill();; ++nlines;; }; inputStream.ignore(8192,newline);; }; return nlines;. void Streamer(TBuffer& ); Stream a class object*-*-*-*-*-*-*-; *-* =========================================. Int_t Fill(). TNtuple(const TNtuple& ). TNtuple& operator=(const TNtuple& ). Int_t Fill(const Float_t* x). Int_t GetNvar() const; { return fNvar; }. Float_t * GetArgs() const; { return fArgs; }. » Author: Rene Brun 06/04/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNtuple.html:28410,variab,variables,28410,root/html534/TNtuple.html,https://root.cern,https://root.cern/root/html534/TNtuple.html,1,['variab'],['variables']
Modifiability,"histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1C() [1/5]. TH1C::TH1C ; (; ). Constructor. ; Definition at line 9473 of file TH1.cxx. ◆ TH1C() [2/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup . ). Create a 1-Dim histogram with fix bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9484 of file TH1.cxx. ◆ TH1C() [3/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9498 of file TH1.cxx. ◆ TH1C() [4/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Double_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9510 of file TH1.cxx. ◆ TH1C() [5/5]. TH1C::TH1C ; (; const TH1C & ; h1c). Copy constructor. ; The list of functions is not copied. (Use Clone() if needed) ; Definition at line 9529 of file TH1.cxx. ◆ ~TH1C(). TH1C::~TH1C ; (; ). override . Destructor. ; Definition at line 9521 of file TH1.cxx. Member Function Documentation. ◆ AddBinContent() [1/2]. void TH1C::AddBinContent ; (; Int_t ; bin). overridevirtual . Increment bin content by 1. ; Passing an out-of-range bin leads to undefined behavior ; Reimplemented from TH1.; Definition at line 9538 of file TH1.cxx. ◆ AddBinContent() [2/2]. void TH1C::AddBinContent ; (; Int_t ; bin, . Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1C.html:52144,variab,variable,52144,doc/master/classTH1C.html,https://root.cern,https://root.cern/doc/master/classTH1C.html,1,['variab'],['variable']
Modifiability,"histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<Float_t>fAverageRMSaverage RMS of signal and background; TMVA::BinarySearchTree*fBinaryTreebinary tree; vector<Float_t>*fDeltasize of volume; Float_tfDeltaFracfraction of RMS; Double_tfGaussSigmasize of Gauss in adaptive volume ; Double_tfGaussSigmaNormsize of Gauss in adaptive volume (normalised to dimensions); Float_tfInitialScaleinitial scale for adaptive volume; Bool_tfInitializedVolumeEleis volume element initialized ?; TMVA::MethodPDERS::EKernelEstimatorfKernelEstimator; TStringfKernelStringoption kernel estimator; Float_tfMaxVIterationsmaximum number of iterations to adapt volume size; Double_tfMax_distancemaximum distance; Float_tfNEventsMaxmaximum number of events in adaptive volume; Float_tfNEventsMinminimum number of events in adaptive volume; Double_tfNRegOutnumber of output dimensions for regression; Bool_tfNormTreebinary-search tree is normalised; Bool_tfPrintedprint; Float_tfScaleBweight for background events; Float_tfScaleSweight for signal events; vector<Float_t>*fShiftvolume center; TMVA::MethodPDERS::EVolumeRangeModefVRangeMode; TStringfVolumeRangeoption volume range; static TMVA::MethodPDERS*fgThisPDERSthis pointer (required by root finder); Int_tfkNNMaxmax number of events in kNN tree; Int_tfkNNMinmin number of events in kNN tree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDERS.html:19313,adapt,adaptive,19313,root/html530/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDERS.html,18,['adapt'],"['adapt', 'adaptive']"
Modifiability,"history;  ; Double_t fMutol;  ; Double_t fPhi;  ; Double_t * fPhi_history;  ; Double_t * fPhi_min_history;  ; Double_t * fRnorm_history;  ; TQpLinSolverBase * fSys;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TQpSolverBase; Int_t fIter;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGondzioSolver.h>. Inheritance diagram for TGondzioSolver:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGondzioSolver() [1/3]. TGondzioSolver::TGondzioSolver ; (; ). Default constructor. ; Definition at line 63 of file TGondzioSolver.cxx. ◆ TGondzioSolver() [2/3]. TGondzioSolver::TGondzioSolver ; (; TQpProbBase * ; of, . TQpDataBase * ; prob, . Int_t ; verbose = 0 . ). Constructor. ; Definition at line 86 of file TGondzioSolver.cxx. ◆ TGondzioSolver() [3/3]. TGondzioSolver::TGondzioSolver ; (; const TGondzioSolver & ; another). Copy constructor. ; Definition at line 118 of file TGondzioSolver.cxx. ◆ ~TGondzioSolver(). TGondzioSolver::~TGondzioSolver ; (; ). override . Deconstructor. ; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGondzioSolver.html:13566,inherit,inherited,13566,doc/master/classTGondzioSolver.html,https://root.cern,https://root.cern/doc/master/classTGondzioSolver.html,3,['inherit'],['inherited']
Modifiability,"history;  ; Double_t fMutol;  ; Double_t fPhi;  ; Double_t * fPhi_history;  ; Double_t * fPhi_min_history;  ; Double_t * fRnorm_history;  ; TQpLinSolverBase * fSys;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TQpSolverBase; Int_t fIter;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMehrotraSolver.h>. Inheritance diagram for TMehrotraSolver:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMehrotraSolver() [1/3]. TMehrotraSolver::TMehrotraSolver ; (; ). Default constructor. ; Definition at line 61 of file TMehrotraSolver.cxx. ◆ TMehrotraSolver() [2/3]. TMehrotraSolver::TMehrotraSolver ; (; TQpProbBase * ; of, . TQpDataBase * ; prob, . Int_t ; verbose = 0 . ). Constructor. ; Definition at line 73 of file TMehrotraSolver.cxx. ◆ TMehrotraSolver() [3/3]. TMehrotraSolver::TMehrotraSolver ; (; const TMehrotraSolver & ; another). Copy constructor. ; Definition at line 86 of file TMehrotraSolver.cxx. ◆ ~TMehrotraSolver(). TMehrotraSolver::~TMehrotraSolver ; (; ). override . D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMehrotraSolver.html:13259,inherit,inherited,13259,doc/master/classTMehrotraSolver.html,https://root.cern,https://root.cern/doc/master/classTMehrotraSolver.html,3,['inherit'],['inherited']
Modifiability,"hitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TGFrame (const TGFrame &)=delete;  ; TGFrame & operator= (const TGFrame &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . #include <TGFrame.h>. Inheritance diagram for TGFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. protected . EnumeratorkDeleteWindowCalled . Definition at line 83 of file TGFrame.h. Constructor & Destructor Documentation. ◆ TGFrame() [1/3]. TGFrame::TGFrame ; (; const TGFrame & ; ). privatedelete .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrame.html:26104,inherit,inherited,26104,doc/master/classTGFrame.html,https://root.cern,https://root.cern/doc/master/classTGFrame.html,1,['inherit'],['inherited']
Modifiability,"hitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TGLabel (const TGLabel &)=delete;  ; TGLabel & operator= (const TGLabel &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGFrame; static Time_t GetLastClick ();  Get time of last mouse click. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLabel.html:28371,inherit,inherited,28371,doc/master/classTGLabel.html,https://root.cern,https://root.cern/doc/master/classTGLabel.html,1,['inherit'],['inherited']
Modifiability,"hiveFile (const char *archive, const char *member, TFile *file);  Specify the archive name and member name. ;  ;  ~TArchiveFile () override;  Dtor. ;  ; const char * GetArchiveName () const;  ; TArchiveMember * GetMember () const;  ; Long64_t GetMemberFilePosition () const;  Return position in archive of current member. ;  ; Int_t GetMemberIndex () const;  ; const char * GetMemberName () const;  ; TObjArray * GetMembers () const;  ; Int_t GetNumberOfMembers () const;  Returns number of members in archive. ;  ; TClass * IsA () const override;  ; virtual Int_t OpenArchive ()=0;  ; virtual Int_t SetCurrentMember ()=0;  ; virtual Int_t SetMember (const char *member);  Explicitely make the specified member the current member. ;  ; virtual Int_t SetMember (Int_t idx);  Explicitely make the member with the specified index the current member. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArchiveFile.html:1583,inherit,inherited,1583,doc/master/classTArchiveFile.html,https://root.cern,https://root.cern/doc/master/classTArchiveFile.html,1,['inherit'],['inherited']
Modifiability,"hm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtual void FdF (const T *x, T &f, T *df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; virtual void Gradient (const T *x, T *grad) const;  Evaluate all the vector of function derivatives (gradient) at a point x. ;  ; virtual void GradientWithPrevResult (const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual unsigned int NDim () const=0;  Retrieve the dimension of the function. ;  ; virtual bool returnsInMinuit2ParameterSpace () const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoDerivative (const double *x, unsigned int icoord) const override;  ; double DoEval (const double *x) const override;  . Private Attributes; std::function< double(double const *, unsigned int)> fDerivFunc;  ; unsigned int fDim;  ; std::function< double(const double *)> fFunc;  ; std::function< void(const double *, double *)> fGradFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::GradFunctor:. This browser is not able to show SVG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html:4604,inherit,inherited,4604,doc/master/classROOT_1_1Math_1_1GradFunctor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html,1,['inherit'],['inherited']
Modifiability,"hname must match with the dimension of varexp. ; Definition at line 7498 of file TTree.cxx. ◆ Query(). TSQLResult * TTree::Query ; (; const char * ; varexp = """", . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Loop over entries and return a TSQLResult object containing entries following selection. ; Definition at line 7513 of file TTree.cxx. ◆ ReadFile(). Long64_t TTree::ReadFile ; (; const char * ; filename, . const char * ; branchDescriptor = """", . char ; delimiter = ' ' . ). virtual . Create or simply read branches from filename. ; if branchDescriptor = """" (default), it is assumed that the Tree descriptor is given in the first line of the file with a syntax like A/D:Table[2]/F:Ntracks/I:astring/C; F#define F(x, y, z); I#define I(x, y, z); otherwise branchDescriptor must be specified with the above syntax. If the type of the first variable is not specified, it is assumed to be ""/F""; If the type of any other variable is not specified, the type of the previous variable is assumed. eg; x:y:z (all variables are assumed of type ""F""); x/D:y:z (all variables are of type ""D""); x:y/D:z (x is type ""F"", y and z of type ""D""). delimiter allows for the use of another delimiter besides whitespace. This provides support for direct import of common data file formats like csv. If delimiter != ' ' and branchDescriptor == """", then the branch description is taken from the first line in the file, but delimiter is used for the branch names tokenization rather than ':'. Note however that if the values in the first line do not use the /[type] syntax, all variables are assumed to be of type ""F"". If the filename ends with extensions .csv or .CSV and a delimiter is not specified (besides ' '), the delimiter is automatically set to ','.; Lines in the input file starting with ""#"" are ignored. Leading whitespace for each column data is skipped. Empty lines are skipped.; A TBranch object is created for e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:193525,variab,variable,193525,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,6,['variab'],['variable']
Modifiability,"hnique; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf. RooAbsReal* createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder). RooArgSet* getAllConstraints(const RooArgSet& observables, const RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalError(); Clear the evaluation error flag. Bool_t evalError(); Return the evaluation error flag. void raiseEvalError(); Raise the evaluation error flag. RooNumGenConfig* defaultGeneratorConfig(); Returns the default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configuration as default numeric MC generator; configuration for this object. void setGeneratorConfig(); Remove the specialized numeric MC generator configuration associated; with this object. GenSpec* prepareMultiGen(const RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:76573,config,configuration,76573,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['config'],['configuration']
Modifiability,"hoCamera Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGLOrthoCamera Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Orthographic projection camera. ; Currently limited to three types defined at construction time - kXOY, kXOZ, kZOY - where this refers to the viewport plane axis - e.g. kXOY has X axis horizontal, Y vertical - i.e. looking down Z axis with Y vertical.; The plane types restriction could easily be removed to supported arbitrary ortho projections along any axis/orientation with free rotations about them. ; Definition at line 35 of file TGLOrthoCamera.h. Public Types; enum  EType { ;   kZOY; , kXOZ; , kXOY; , kZnOY; , ;   kXnOZ; , kXnOY; , kZOX; , kZnOX. };  ;  Public Types inherited from TGLCamera; enum  EFrustumPlane { ;   kNear = 0; , kLeft = 1; , kRight = 2; , kTop = 3; , ;   kBottom = 4; , kFar = 5; , kPlanesPerFrustum = 6. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGLOrthoCamera ();  Construct kXOY orthographic camera. ;  ;  TGLOrthoCamera (EType type, const TGLVector3 &hAxis, const TGLVector3 &vAxis);  Construct orthographic camera. ;  ;  ~TGLOrthoCamera () override;  Destroy orthographic camera. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOrthoCamera.html:946,inherit,inherited,946,doc/master/classTGLOrthoCamera.html,https://root.cern,https://root.cern/doc/master/classTGLOrthoCamera.html,1,['inherit'],['inherited']
Modifiability,"hoXOZ, kCameraOrthoZOY,; kCameraOrthoXnOY, kCameraOrthoXnOZ, kCameraOrthoZnOY. void SetOrthoCamera(TGLViewer::ECameraType camera, Double_t zoom, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); Set an orthographic camera to supplied configuration - note this; does not need to be the current camera - though you will not see; the effect if it is not. 'camera' defines the ortho camera - one of kCameraOrthoXOY / XOZ / ZOY; 'left' / 'right' / 'top' / 'bottom' define the WORLD coordinates which; corresepond with the left/right/top/bottom positions on the GL viewer viewport; E.g. for kCameraOrthoXOY camera left/right are X world coords,; top/bottom are Y world coords; As this is an orthographic camera the other axis (in eye direction) is; no relevant. The near/far clip planes are set automatically based in scene; contents. void SetPerspectiveCamera(TGLViewer::ECameraType camera, Double_t fov, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); Set a perspective camera to supplied configuration - note this; does not need to be the current camera - though you will not see; the effect if it is not. 'camera' defines the persp camera - one of kCameraPerspXOZ, kCameraPerspYOZ, kCameraPerspXOY; 'fov' - field of view (lens angle) in degrees (clamped to 0.1 - 170.0); 'dolly' - distance from 'center'; 'center' - world position from which dolly/hRotate/vRotate are measured; camera rotates round this, always facing in (in center of viewport); 'hRotate' - horizontal rotation from initial configuration in degrees; 'hRotate' - vertical rotation from initial configuration in degrees. void ReinitializeCurrentCamera(const TGLVector3& hAxis, const TGLVector3& vAxis, Bool_t redraw = kTRUE); Change base-vectors defining the camera-base transformation of current; camera. hAxis and vAxis are the default directions for forward; (inverted) and upwards. TGLAutoRotator* GetAutoRotator(); Get the auto-rotator for this viewer. void SetAutoRotator(TGLAutoRota",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLViewer.html:33845,config,configuration,33845,root/html602/TGLViewer.html,https://root.cern,https://root.cern/root/html602/TGLViewer.html,2,['config'],['configuration']
Modifiability,hod ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlcreatedb.py Create a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlfilldb.py Fill run catalog with nfiles entries ;  sqlselect.CQuery example to MySQL test database ;  sqlselect.py Query example to MySQL test database ;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVACrossValidationApplication.C This macro provides an example of how to use TMVA for k-folds cross evaluation in application ;  TMVACrossValidationRegression.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TM,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:158343,variab,variables,158343,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['variab'],['variables']
Modifiability,"hod compress float string, excluding exp and/or move float point ;  ; static const char * ConvertDouble (Double_t v, char *buf, unsigned len, Bool_t not_optimize=kFALSE);  convert float to string with configured format ;  ; static const char * ConvertFloat (Float_t v, char *buf, unsigned len, Bool_t not_optimize=kFALSE);  convert float to string with configured format ;  ; static const char * DeclFileName ();  ; static const char * GetDoubleFormat ();  return current printf format for double members, default ""%.14e"" ;  ; static const char * GetFloatFormat ();  return current printf format for float members, default ""%e"" ;  ; static void SetDoubleFormat (const char *fmt=""%.14e"");  set printf format for double members, default ""%.14e"" use it after SetFloatFormat, which also overwrites format for doubles ;  ; static void SetFloatFormat (const char *fmt=""%e"");  set printf format for float/double members, default ""%e"" to change format only for doubles, use SetDoubleFormat ;  ;  Static Public Member Functions inherited from TBufferIO; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetGlobalReadParam ();  Get default read map size. ;  ; static Int_t GetGlobalWriteParam ();  Get default write map size. ;  ; static void SetGlobalReadParam (Int_t mapsize);  Set the initial size of the map used to store object and class references during reading. ;  ; static void SetGlobalWriteParam (Int_t mapsize);  Set the initial size of the map used to store object and class references during reading. ;  ;  Static Public Member Functions inherited from TBuffer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TClass * GetClass (const char *className);  Forward to TROOT::GetClass(). ;  ; static TClass * GetClass (const std::type_info &typeinfo);  Forward to TROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:41237,inherit,inherited,41237,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,4,['inherit'],['inherited']
Modifiability,"hod in object receiver. ;  . Protected Member Functions; virtual void InitModel (TObject *obj);  Initialize widgets when a new object is selected. ;  ;  Protected Member Functions inherited from TGedFrame; virtual void MakeTitle (const char *title);  Create attribute frame title. ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; std::vector< TGCheckButton * > fBoolParameters;  ; std::vector< TGNumberEntry * > fFloatParameters;  ; std::vector< TGNumberEntry * > fIntParameters;  ; TEveParamList * fM;  ; TGVerticalFrame * fParamFrame;  ;  Protected Attributes inherited from TGedFrame; Bool_t fAvoidSignal;  flag for executing slots ;  ; TList * fExtraTabs;  addtional tabs in ged editor ;  ; TGedEditor * fGedEditor;  manager of this frame ;  ; Bool_t fInit;  init flag for setting signals/slots ;  ; TClass * fModelClass;  class corresponding to instantiated GedFrame ;  ; Int_t fPriority;  location in GedEditor ;  ;  Protected Attributes inh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveParamListEditor.html:27369,inherit,inherited,27369,doc/master/classTEveParamListEditor.html,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html,3,['inherit'],['inherited']
Modifiability,"hod to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double uppe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:2479,variab,variable,2479,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,1,['variab'],['variable']
Modifiability,"hod which adds the sWeights to the dataset. ;  ; Int_t GetNumSWeightVars () const;  Return the number of SWeights In other words, return the number of species that we are trying to extract. ;  ; RooDataSet * GetSDataSet () const;  Retrieve s-weighted data. ;  ; double GetSumOfEventSWeight (Int_t numEvent) const;  Sum the SWeights for a particular event. ;  ; double GetSWeight (Int_t numEvent, const char *sVariable) const;  Retrieve an s weight. ;  ; RooArgList GetSWeightVars () const;  Return a RooArgList containing all parameters that have s weights. ;  ; double GetYieldFromSWeight (const char *sVariable) const;  Sum the SWeights for a particular species over all events. ;  ; TClass * IsA () const override;  ; RooDataSet * SetSData (RooDataSet *data);  Set dataset (if not passed in constructor). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SPlot.html:7562,inherit,inherited,7562,doc/master/classRooStats_1_1SPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SPlot.html,1,['inherit'],['inherited']
Modifiability,"hod"" by lookin for a method with name GetXXX, IsXXX or HasXXX for given object. ; Definition at line 47 of file TToggle.h. Public Member Functions;  TToggle ();  TToggle default constructor. ;  ; TMethodCall * GetGetter () const;  ; virtual Long_t GetOffValue ();  ; virtual Long_t GetOnValue ();  ; TMethodCall * GetSetter () const;  ; virtual Bool_t GetState ();  Returns the state of Toggle according to its current value and fOnValue, returns true if they match. ;  ; virtual Int_t GetValue ();  ; TClass * IsA () const override;  ; virtual Bool_t IsInitialized ();  ; virtual void SetOffValue (Long_t lof);  ; virtual void SetOnValue (Long_t lon);  ; virtual void SetState (Bool_t state);  Sets the value of toggle to fOnValue or fOffValue according to passed argument. ;  ; virtual void SetToggledObject (TObject *obj, TMethod *anymethod);  Initializes it to toggle an object's datamember using this object's method. ;  ; virtual void SetToggledVariable (Int_t &var);  Initializes object for use with a variable - you pass it via reference so it will be modified by Toggle. ;  ; virtual void SetValue (Long_t val);  Sets the value of toggle and modifies its state according to whether the value is equal to fOnValue. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Toggle ();  Toggles the Values and State of this object and connected data! ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTToggle.html:2017,variab,variable,2017,doc/master/classTToggle.html,https://root.cern,https://root.cern/doc/master/classTToggle.html,1,['variab'],['variable']
Modifiability,"hod, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TObject * fActFileNext;  ; TList * fActFiles;  ; TList * fFiles;  ; Int_t fMySlaveCnt;  ; TString fNodeName;  ; Int_t fSlaveCnt;  ; TObject * fUnAllocFileNext;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html:8625,inherit,inherited,8625,doc/master/classTPacketizer_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html,1,['inherit'],['inherited']
Modifiability,"hodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); constructor used for Testing + Application of the MVA,; only (no training), using given WeightFiles. ~MethodBase( void ); destructor. void SetupMethod(); setup of methods. void ProcessSetup(); process all options; the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void CheckSetup(); check may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void InitBase(); default initialization called by all constructors. void DeclareBaseOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: VariableTransform=None,Decorrelated,PCA to use transformed variables; instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use; in the method. Only the Likelihood; Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility; they are hence without any effect (the reader is only reading the training; options that HAD been used at the training of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBase.html:22534,variab,variables,22534,root/html602/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBase.html,2,['variab'],['variables']
Modifiability,"hodBase::GetNvarUInt_t GetNvar() constDefinition MethodBase.h:344; TMVA::MethodBase::OptimizeTuningParametersvirtual std::map< TString, Double_t > OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"")call the Optimizer with the set of parameters and ranges that are meant to be tuned.Definition MethodBase.cxx:623; TMVA::MethodBase::SetTrainTimevoid SetTrainTime(Double_t trainTime)Definition MethodBase.h:161; TMVA::MethodBase::GetXmaxDouble_t GetXmax(Int_t ivar) constDefinition MethodBase.h:357; TMVA::MethodBase::GetMulticlassTrainingEfficiencyvirtual std::vector< Float_t > GetMulticlassTrainingEfficiency(std::vector< std::vector< Float_t > > &purity)Definition MethodBase.cxx:2715; TMVA::MethodBase::fDataSetInfoDataSetInfo & fDataSetInfoDefinition MethodBase.h:607; TMVA::MethodBase::fHasMVAPdfsBool_t fHasMVAPdfsMVA Pdfs are created for this classifier.Definition MethodBase.h:680; TMVA::MethodBase::WriteStateToStreamvoid WriteStateToStream(std::ostream &tf) constgeneral method used in writing the header of the weight files where the used variables,...Definition MethodBase.cxx:1267; TMVA::MethodBase::GetRarityvirtual Double_t GetRarity(Double_t mvaVal, Types::ESBType reftype=Types::kBackground) constcompute rarity:Definition MethodBase.cxx:2285; TMVA::MethodBase::fUseDecorrBool_t fUseDecorrDefinition MethodBase.h:723; TMVA::MethodBase::SetTuneParametersvirtual void SetTuneParameters(std::map< TString, Double_t > tuneParameters)set the tuning parameters according to the argument This is just a dummy .Definition MethodBase.cxx:644; TMVA::MethodBase::GetTrainTimeDouble_t GetTrainTime() constDefinition MethodBase.h:162; TMVA::MethodBase::SetBaseDirvoid SetBaseDir(TDirectory *methodDir)Definition MethodBase.h:373; TMVA::MethodBase::ReadStateFromStreamvoid ReadStateFromStream(std::istream &tf)read the header from the weight files of the different MVA methodsDefinition MethodBase.cxx:1590; TMVA::MethodBase::AddVarsXMLTovoid AddVarsXMLTo(void *parent)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:59273,variab,variables,59273,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['variab'],['variables']
Modifiability,"hodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodBayesClassifier(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodBayesClassifier(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Variable can handle classification with 2 classes. void Init( void ); default initialisation. void DeclareOptions(); define the options (their key words) that can be set in the option string. void ProcessOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". ~MethodBayesClassifier( void ); destructor. void Train( void ); some training. void AddWeightsXMLTo(void* parent) const. void ReadWeightsFromStream(istream& istr); read back the training results from a file (stream). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". void ReadWeightsFromXML(void* ); {}. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Abhishek Narain » Copyright (c) 2005-2006: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBayesClassifier.html:17546,variab,variables,17546,root/html534/TMVA__MethodBayesClassifier.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBayesClassifier.html,1,['variab'],['variables']
Modifiability,"hodCuts; 32\ingroup TMVA; 33 ; 34 Multivariate optimisation of signal efficiency for given background; 35 efficiency, applying rectangular minimum and maximum requirements.; 36 ; 37 Also implemented is a ""decorrelate/diagonalized cuts approach"",; 38 which improves over the uncorrelated cuts approach by; 39 transforming linearly the input variables into a diagonal space,; 40 using the square-root of the covariance matrix.; 41 ; 42 Other optimisation criteria, such as maximising the signal significance-; 43 squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; 44 correspond to a particular point in the optimised background rejection; 45 versus signal efficiency curve. This working point requires the knowledge; 46 of the expected yields, which is not the case in general. Note also that; 47 for rare signals, Poissonian statistics should be used, which modifies; 48 the significance criterion.; 49 ; 50 The rectangular cut of a volume in the variable space is performed using; 51 a binary tree to sort the training events. This provides a significant; 52 reduction in computing time (up to several orders of magnitudes, depending; 53 on the complexity of the problem at hand).; 54 ; 55 Technically, optimisation is achieved in TMVA by two methods:; 56 ; 57 1. Monte Carlo generation using uniform priors for the lower cut value,; 58 and the cut width, thrown within the variable ranges.; 59 ; 60 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; 61 The GA is configurable by many external settings through the option; 62 string. For difficult cases (such as many variables), some tuning; 63 may be necessary to achieve satisfying results; 64 ; 65 Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; 66 superior results, and often failed due to convergence at local minima.; 67 ; 68 The tests we have performed so far showed that in generic applications,; 69 the GA is superior to MC sampling, and hence GA is t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:2498,variab,variable,2498,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['variab'],['variable']
Modifiability,"hodPyKeras, TMVA::MethodPyRandomForest, and TMVA::MethodPyTorch. ◆ IsA(). virtual TClass * TMVA::PyMethodBase::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodBase.; Reimplemented in TMVA::MethodPyAdaBoost.; Definition at line 142 of file PyMethodBase.h. ◆ ProcessOptions(). virtual void TMVA::PyMethodBase::ProcessOptions ; (; ). pure virtual . Implements TMVA::MethodBase.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, and TMVA::MethodPyTorch. ◆ PyFinalize(). void PyMethodBase::PyFinalize ; (; ). static . Definition at line 236 of file PyMethodBase.cxx. ◆ PyInitialize(). void PyMethodBase::PyInitialize ; (; ). static . Initialize Python interpreter. ; NOTE: We introduce a shared global namespace fGlobalNS, but using a private local namespace fLocalNS. This prohibits the interference of instances of the same method with the same factory, e.g., by overriding variables in the same local namespace. ; Definition at line 153 of file PyMethodBase.cxx. ◆ PyIsInitialized(). int PyMethodBase::PyIsInitialized ; (; ). static . Check Python interpreter initialization status. ; ReturnsBoolean whether interpreter is initialized ; Definition at line 253 of file PyMethodBase.cxx. ◆ PyRunString() [1/2]. void PyMethodBase::PyRunString ; (; TString ; code, . PyObject * ; globalNS, . PyObject * ; localNS . ). static . Execute Python code from string. ; Parameters. [in]codePython code as string ; [in]globalNSGlobal Namespace for Python Session ; [in]localNSLocal Namespace for Python Session. Overloaded static Helper function to run python code from string and throw runtime error if the Python session is unable to execute the code ; Definition at line 347 of file PyMethodBase.cxx. ◆ PyRunString() [2/2]. void PyMethodBase::PyRunString ; (; TString ; code, . TString ; errorMessage = ""Failed to run python code"", . int ; start = 256 . ). protected . Execute Python code from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html:35084,variab,variables,35084,doc/master/classTMVA_1_1PyMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html,1,['variab'],['variables']
Modifiability,"hodTag""Definition Reader.cxx:695; TMVA::Reader::Initvoid Init(void)default initialisation (no member variables)Definition Reader.cxx:292; TMVA::Reader::GetProbaDouble_t GetProba(const TString &methodTag, Double_t ap_sig=0.5, Double_t mvaVal=-9999999)evaluates probability of MVA for given set of input variablesDefinition Reader.cxx:706; TMVA::Reader::GetMethodTypeFromFileTString GetMethodTypeFromFile(const TString &filename)read the method type from the fileDefinition Reader.cxx:337; TMVA::Reader::fDataSetManagerDataSetManager * fDataSetManagerDefinition Reader.h:128; TMVA::Reader::fDataSetInfoDataSetInfo fDataSetInfoDefinition Reader.h:136; TMVA::Reader::BookMVAIMethod * BookMVA(const TString &methodTag, const TString &weightfile)read method name from weight fileDefinition Reader.cxx:368; TMVA::Reader::ReaderReader(const TString &theOption="""", Bool_t verbose=0)constructorDefinition Reader.cxx:123; TMVA::Reader::EvaluateMulticlassconst std::vector< Float_t > & EvaluateMulticlass(const TString &methodTag, Double_t aux=0)evaluates MVA for given set of input variablesDefinition Reader.cxx:630; TMVA::Reader::fDataInputHandlerDataInputHandler fDataInputHandlerDefinition Reader.h:138; TMVA::Reader::DecodeVarNamesvoid DecodeVarNames(const std::string &varNames)decodes ""name1:name2:..."" formDefinition Reader.cxx:772; TMVA::Reader::DeclareOptionsvoid DeclareOptions()declaration of configuration optionsDefinition Reader.cxx:264; TMVA::Reader::AddSpectatorvoid AddSpectator(const TString &expression, Float_t *)Add a float spectator or expression to the reader.Definition Reader.cxx:321; TMVA::Reader::AddVariablevoid AddVariable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Reader::~Readervirtual ~Reader(void)destructorDefinition Reader.cxx:277; TMVA::Reader::fLoggerMsgLogger * fLogger! message loggerDefinition Reader.h:161; TMVA::Reader::DataInfoconst DataSetInfo & DataInfo() constDefinition Reader.h:117; TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8cxx_source.html:39614,variab,variablesDefinition,39614,doc/master/Reader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Reader_8cxx_source.html,1,['variab'],['variablesDefinition']
Modifiability,"hodTypeDefinition MethodCuts.h:146; TMVA::MethodCuts::kUseMinuit@ kUseMinuitDefinition MethodCuts.h:149; TMVA::MethodCuts::kUseEventScan@ kUseEventScanDefinition MethodCuts.h:150; TMVA::MethodCuts::kUseSimulatedAnnealing@ kUseSimulatedAnnealingDefinition MethodCuts.h:148; TMVA::MethodCuts::kUseGeneticAlgorithm@ kUseGeneticAlgorithmDefinition MethodCuts.h:147; TMVA::MethodCuts::kUseMonteCarlo@ kUseMonteCarloDefinition MethodCuts.h:146; TMVA::MethodCuts::kUseMonteCarloEvents@ kUseMonteCarloEventsDefinition MethodCuts.h:151; TMVA::MethodCuts::fCutRangeMinDouble_t * fCutRangeMinminimum of allowed cut rangeDefinition MethodCuts.h:175; TMVA::MethodCuts::fBinaryTreeBBinarySearchTree * fBinaryTreeBDefinition MethodCuts.h:181; TMVA::MethodCuts::fRmsSstd::vector< Double_t > * fRmsSRMSs of variables (signal)Definition MethodCuts.h:199; TMVA::MethodCuts::fMeanSstd::vector< Double_t > * fMeanSmeans of variables (signal)Definition MethodCuts.h:197; TMVA::MethodCuts::fMeanBstd::vector< Double_t > * fMeanBmeans of variables (background)Definition MethodCuts.h:198; TMVA::MethodCuts::fAllVarsITString * fAllVarsIwhat to do with variablesDefinition MethodCuts.h:188; TMVA::MethodCuts::fFitParamsstd::vector< EFitParameters > * fFitParamsvector for series of fit methodsDefinition MethodCuts.h:171; TMVA::MethodCuts::GetSeparationDouble_t GetSeparation(TH1 *, TH1 *) constcompute ""separation"" defined asDefinition MethodCuts.h:100; TMVA::MethodCuts::fTestSignalEffDouble_t fTestSignalEffused to test optimized signal efficiencyDefinition MethodCuts.h:172; TMVA::MethodCuts::fCutRangestd::vector< Interval * > fCutRangeallowed ranges for cut optimisationDefinition MethodCuts.h:177; TMVA::MethodCuts::fTmpCutMaxDouble_t * fTmpCutMaxtemporary maximum requirementDefinition MethodCuts.h:187; TMVA::MethodCuts::fVarHistS_smoothstd::vector< TH1 * > * fVarHistS_smoothsmoothed reference histograms (signal)Definition MethodCuts.h:207; TMVA::MethodCuts::MatchParsToCutsvoid MatchParsToCuts(Double_t *, Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8h_source.html:20289,variab,variables,20289,doc/master/MethodCuts_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html,1,['variab'],['variables']
Modifiability,"hogonal matrix fV so that A = U*S*V'.; If the row/column index of A starts at (rowLwb,colLwb) then the decomposed matrices/vectors start at : fU : (rowLwb,colLwb); fV : (colLwb,colLwb); fSig : (colLwb); TDecompSVD::fSigTVectorD fSigDefinition TDecompSVD.h:30; TDecompSVD::fVTMatrixD fVDefinition TDecompSVD.h:29; TDecompSVD::fUTMatrixD fUDefinition TDecompSVD.h:28; The diagonal matrix fS is stored in the singular values vector fSig . The singular values, fSig[k] = S[k][k], are ordered so that fSig[0] >= fSig[1] >= ... >= fSig[n-1].; The singular value decomposition always exists, so the decomposition will (as long as m >=n) never fail. If m < n, the user should add sufficient zero rows to A , so that m == n; Here fTol is used to set the threshold on the minimum allowed value of the singular values: min_singular = fTol*max(fSig[i]) ; Definition at line 23 of file TDecompSVD.h. Public Types; enum  { kWorkMax = 100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDecompSVD ();  ;  TDecompSVD (const TDecompSVD &another);  Copy constructor. ;  ;  TDecompSVD (const TMatrixD &m, Double_t tol=0.0);  Constructor for general matrix A . ;  ;  TDecompSVD (Int_t nrows, Int_t ncols);  Constructor for (nrows x ncols) matrix. ;  ;  TDecompSVD (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  Constructor for ([row_lwb..row_upb] x [col_lwb..col_upb]) matrix. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSVD.html:1524,inherit,inherited,1524,doc/master/classTDecompSVD.html,https://root.cern,https://root.cern/doc/master/classTDecompSVD.html,1,['inherit'],['inherited']
Modifiability,"hogonal transform functions ;  CTSPHEA Sphere ;  CTSpiderSpider class ;  CTSpiderEditorThe TSpider editor class ;  CTSplineBase class for spline implementation containing the Draw/Paint methods // ;  CTSpline3;  CTSpline5;  CTSplinePoly;  CTSplinePoly3;  CTSplinePoly5;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedback;  CTStatus;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTStyleTStyle objects may be created to define special styles ;  CTStyleDialog;  CTStyleManager;  CTStylePreview;  CTSubStringA zero length substring i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:156242,variab,variable,156242,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['variab'],['variable']
Modifiability,"hogonal transform functions ;  CTSPHEA Sphere ;  CTSpiderSpider class ;  CTSpiderEditorThe TSpider editor class ;  CTSplineBase class for spline implementation containing the Draw/Paint methods // ;  CTSpline3;  CTSpline5;  CTSplinePoly;  CTSplinePoly3;  CTSplinePoly5;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:187946,variab,variable,187946,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['variab'],['variable']
Modifiability,"hogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ;  ; virtual Bool_t Select (const Int_t *iv);  Selection method. ;  ; virtual Bool_t TestFunction (Double_t squareResidual, Double_t dResidur);  PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsRMS;  Vector of RMS of coefficients. ;  ; Double_t fCorrelationCoeff;  Multi Correlation coefficient. ;  ; TMatrixD fCorrelationMatrix;  Correlation matrix. ;  ; Double_t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:34852,variab,variables,34852,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['variab'],['variables']
Modifiability,"hoice of numeric integrator; intLandau = landau.createIntegral({x}); val = intLandau.getVal(); print("" [1] int_dx landau(x) = "", val) # setprecision(15); ; # Same with custom configuration; # -----------------------------------------------------------; ; # Construct a custom configuration which uses the adaptive Gauss-Kronrod technique; # for closed 1D integrals; customConfig = ROOT.RooNumIntConfig(ROOT.RooAbsReal.defaultIntegratorConfig()); integratorGKNotExisting = customConfig.method1D().setLabel(""RooAdaptiveGaussKronrodIntegrator1D""); if integratorGKNotExisting:; print(""WARNING: RooAdaptiveGaussKronrodIntegrator is not existing because ROOT is built without Mathmore support""); ; # Calculate integral over landau with custom integral specification; intLandau2 = landau.createIntegral({x}, NumIntConfig=customConfig); val2 = intLandau2.getVal(); print("" [2] int_dx landau(x) = "", val2); ; # Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; ; # Another possibility: associate custom numeric integration configuration; # as default for object 'landau'; landau.setIntegratorConfig(customConfig); ; # Calculate integral over landau custom numeric integrator specified as; # object default; intLandau3 = landau.createIntegral({x}); val3 = intLandau3.getVal(); print("" [3] int_dx landau(x) = "", val3); ; # Another possibility: Change global default for 1D numeric integration; # strategy on finite domains; if not integratorGKNotExisting:; ROOT.RooAbsReal.defaultIntegratorConfig().method1D().setLabel(""RooAdaptiveGaussKronrodIntegrator1D""); ; # Adjusting parameters of a specific technique; # ---------------------------------------------------------------------------------------; ; # Adjust maximum number of steps of ROOT.RooIntegrator1D in the global; # default configuration; ROOT.RooAbsReal.defaultIntegratorConfig().getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30); ; # Example of how to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8py.html:2925,config,config,2925,doc/master/rf901__numintconfig_8py.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8py.html,2,['config'],"['config', 'configuration']"
Modifiability,"hood models from histograms. ; It is used by RooStats::HistFactory::MakeModelAndMeasurementFast.; A tutorial showing how to create a HistFactory model is hf001_example.C ; Definition at line 44 of file HistoToWorkspaceFactoryFast.h. Classes; struct  Configuration;  . Public Member Functions;  HistoToWorkspaceFactoryFast ();  ;  HistoToWorkspaceFactoryFast (RooStats::HistFactory::Measurement &Meas);  ;  HistoToWorkspaceFactoryFast (RooStats::HistFactory::Measurement &Meas, Configuration const &cfg);  ; TClass * IsA () const override;  ; RooFit::OwningPtr< RooWorkspace > MakeCombinedModel (std::vector< std::string >, std::vector< std::unique_ptr< RooWorkspace > > &);  ; RooFit::OwningPtr< RooWorkspace > MakeSingleChannelModel (Measurement &measurement, Channel &channel);  ; void SetFunctionsToPreprocess (std::vector< std::string > lines);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1HistoToWorkspaceFactoryFast.html:1554,inherit,inherited,1554,doc/master/classRooStats_1_1HistFactory_1_1HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1HistoToWorkspaceFactoryFast.html,1,['inherit'],['inherited']
Modifiability,"hould be; 133/// created like ""http:8080"". One could specify several engines; 134/// at once, separating them with semicolon ("";""). Following engines are supported:; 135///; 136/// http - TCivetweb, civetweb-based implementation of http protocol; 137/// fastcgi - TFastCgi, special protocol for communicating with web servers; 138///; 139/// For each created engine one should provide socket port number like ""http:8080"" or ""fastcgi:9000"".; 140/// Additional engine-specific options can be supplied with URL syntax like ""http:8080?thrds=10"".; 141/// Full list of supported options should be checked in engines docu.; 142///; 143/// One also can configure following options, separated by semicolon:; 144///; 145/// readonly, ro - set read-only mode (default); 146/// readwrite, rw - allows methods execution of registered objects; 147/// global - scans global ROOT lists for existing objects (default); 148/// noglobal - disable scan of global lists; 149/// cors - enable CORS header with origin=""*""; 150/// cors=domain - enable CORS header with origin=""domain""; 151/// basic_sniffer - use basic sniffer without support of hist, gpad, graph classes; 152///; 153/// For example, create http server, which allows cors headers and disable scan of global lists,; 154/// one should provide ""http:8080;cors;noglobal"" as parameter; 155///; 156/// THttpServer uses JavaScript ROOT (https://root.cern/js) to implement web clients UI.; 157/// Normally JSROOT sources are used from $ROOTSYS/js directory,; 158/// but one could set JSROOTSYS shell variable to specify alternative location; 159 ; 160THttpServer::THttpServer(const char *engine) : TNamed(""http"", ""ROOT http server""); 161{; 162 const char *jsrootsys = gSystem->Getenv(""JSROOTSYS"");; 163 if (!jsrootsys); 164 jsrootsys = gEnv->GetValue(""HttpServ.JSRootPath"", jsrootsys);; 165 ; 166 if (jsrootsys && *jsrootsys) {; 167 if ((strncmp(jsrootsys, ""http://"", 7)==0) || (strncmp(jsrootsys, ""https://"", 8)==0)); 168 fJSROOT = jsrootsys;; 169 else; 170 fJSROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:4611,config,configure,4611,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['config'],['configure']
Modifiability,"hout std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O customization rules on “new” data members.; [#9939] - Hadd super slow since TFileMerger modification; [#1017",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:49944,extend,extendedTerm,49944,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['extend'],['extendedTerm']
Modifiability,"how = kTRUE); Show or hide menubar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void ShowEditor(Bool_t show = kTRUE); Show or hide side frame. void CreateEditor(); Create embedded editor. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowToolTips(Bool_t show = kTRUE); Enable or disable tooltip info. Bool_t HasEditor() const; Returns kTRUE if the editor is shown. Bool_t HasMenuBar() const; Returns kTRUE if the menu bar is shown. Bool_t HasStatusBar() const; Returns kTRUE if the status bar is shown. Bool_t HasToolBar() const; Returns kTRUE if the tool bar is shown. Bool_t HasToolTips() const; Returns kTRUE if the tooltips are enabled. void AdjustSize(); Keep the same canvas size while docking/undocking toolbar. Bool_t HandleContainerButton(Event_t* ev); Handle mouse button events in the canvas container. Bool_t HandleContainerDoubleClick(Event_t* ev); Handle mouse button double click events in the canvas container. Bool_t HandleContainerConfigure(Event_t* ev); Handle configure (i.e. resize) event. Bool_t HandleContainerKey(Event_t* ev); Handle keyboard events in the canvas container. Bool_t HandleContainerMotion(Event_t* ev); Handle mouse motion event in the canvas container. Bool_t HandleContainerExpose(Event_t* ev); Handle expose events. Bool_t HandleContainerCrossing(Event_t* ev); Handle enter/leave events. Only leave is activated at the moment. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. TRootCanvas(const TRootCanvas& ). TRootCanvas& operator=(const TRootCanvas& ). void ForceUpdate(); { Layout(); }. void Iconify(); { IconifyWindow(); }. void Show(); { MapRaised(); }. TGMenuBar * GetMenuBar() const; { return fMenuBar; }. TGLayoutHints * GetMenuBarItemLayout() const; { return fMenu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootCanvas.html:28012,config,configure,28012,root/html528/TRootCanvas.html,https://root.cern,https://root.cern/root/html528/TRootCanvas.html,3,['config'],['configure']
Modifiability,"how = kTRUE); Show or hide menubar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void ShowEditor(Bool_t show = kTRUE); Show or hide side frame. void CreateEditor(); Create embedded editor. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowToolTips(Bool_t show = kTRUE); Enable or disable tooltip info. Bool_t HasEditor() const; Returns kTRUE if the editor is shown. Bool_t HasMenuBar() const; Returns kTRUE if the menu bar is shown. Bool_t HasStatusBar() const; Returns kTRUE if the status bar is shown. Bool_t HasToolBar() const; Returns kTRUE if the tool bar is shown. Bool_t HasToolTips() const; Returns kTRUE if the tooltips are enabled. void AdjustSize(); Keep the same canvas size while docking/undocking toolbar. Bool_t HandleContainerButton(Event_t* ev); Handle mouse button events in the canvas container. Bool_t HandleContainerDoubleClick(Event_t* ev); Handle mouse button double click events in the canvas container. Bool_t HandleContainerConfigure(Event_t* ev); Handle configure (i.e. resize) event. Bool_t HandleContainerKey(Event_t* ev); Handle keyboard events in the canvas container. Bool_t HandleContainerMotion(Event_t* ev); Handle mouse motion event in the canvas container. Bool_t HandleContainerExpose(Event_t* ev); Handle expose events. Bool_t HandleContainerCrossing(Event_t* ev); Handle enter/leave events. Only leave is activated at the moment. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. void Activated(Int_t id); Slot handling tab switching in the browser, to properly set the canvas; and the model to the editor. TRootCanvas(const TRootCanvas& ). TRootCanvas& operator=(const TRootCanvas& ). void ForceUpdate(); { Layout(); }. void Iconify(); { IconifyWindow(); }. void Show(); { Map",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRootCanvas.html:28283,config,configure,28283,root/html534/TRootCanvas.html,https://root.cern,https://root.cern/root/html534/TRootCanvas.html,3,['config'],['configure']
Modifiability,"how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *, const char *rangeName=nullptr) const override;  Forward determination of analytical integration capabilities to input p.d.f. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:2078,inherit,inherited,2078,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['inherit'],['inherited']
Modifiability,hread_mutexpthread_mutex_t thread_mutexDefinition civetweb.c:2340; mg_context::callbacksstruct mg_callbacks callbacksDefinition civetweb.c:2395; mg_context::ddstruct mg_domain_context ddDefinition civetweb.c:2405; mg_context::listening_socket_fdsstruct pollfd * listening_socket_fdsDefinition civetweb.c:2323; mg_context::sq_fullpthread_cond_t sq_fullDefinition civetweb.c:2357; mg_context::sq_tailvolatile int sq_tailDefinition civetweb.c:2356; mg_context::num_listening_socketsunsigned int num_listening_socketsDefinition civetweb.c:2324; mg_context::sq_sizeint sq_sizeDefinition civetweb.c:2360; mg_context::max_request_sizeunsigned int max_request_sizeDefinition civetweb.c:2367; mg_context::cfg_worker_threadsunsigned int cfg_worker_threadsDefinition civetweb.c:2344; mg_context::nonce_mutexpthread_mutex_t nonce_mutexDefinition civetweb.c:2390; mg_context::sq_blockedvolatile int sq_blockedDefinition civetweb.c:2359; mg_domain_contextDefinition civetweb.c:2251; mg_domain_context::configchar * config[NUM_OPTIONS]Definition civetweb.c:2253; mg_domain_context::nonce_countunsigned long nonce_countDefinition civetweb.c:2259; mg_domain_context::ssl_cert_last_mtimeint64_t ssl_cert_last_mtimeDefinition civetweb.c:2255; mg_domain_context::auth_nonce_maskuint64_t auth_nonce_maskDefinition civetweb.c:2258; mg_domain_context::nextstruct mg_domain_context * nextDefinition civetweb.c:2267; mg_domain_context::ssl_ctxSSL_CTX * ssl_ctxDefinition civetweb.c:2252; mg_domain_context::handlersstruct mg_handler_info * handlersDefinition civetweb.c:2254; mg_error_dataDefinition civetweb.h:1671; mg_error_data::codeunsigned * codeDefinition civetweb.h:1672; mg_error_data::text_buffer_sizesize_t text_buffer_sizeDefinition civetweb.h:1674; mg_error_data::textchar * textDefinition civetweb.h:1673; mg_file_accessDefinition civetweb.c:1871; mg_file_access::fpFILE * fpDefinition civetweb.c:1873; mg_file_statDefinition civetweb.c:1860; mg_file_stat::sizeuint64_t sizeDefinition civetweb.c:1862; mg_file_sta,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:707346,config,configchar,707346,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['config'],"['config', 'configchar']"
Modifiability,hread_mutexpthread_mutex_t thread_mutexDefinition civetweb.c:2341; mg_context::callbacksstruct mg_callbacks callbacksDefinition civetweb.c:2396; mg_context::ddstruct mg_domain_context ddDefinition civetweb.c:2406; mg_context::listening_socket_fdsstruct pollfd * listening_socket_fdsDefinition civetweb.c:2324; mg_context::sq_fullpthread_cond_t sq_fullDefinition civetweb.c:2358; mg_context::sq_tailvolatile int sq_tailDefinition civetweb.c:2357; mg_context::num_listening_socketsunsigned int num_listening_socketsDefinition civetweb.c:2325; mg_context::sq_sizeint sq_sizeDefinition civetweb.c:2361; mg_context::max_request_sizeunsigned int max_request_sizeDefinition civetweb.c:2368; mg_context::cfg_worker_threadsunsigned int cfg_worker_threadsDefinition civetweb.c:2345; mg_context::nonce_mutexpthread_mutex_t nonce_mutexDefinition civetweb.c:2391; mg_context::sq_blockedvolatile int sq_blockedDefinition civetweb.c:2360; mg_domain_contextDefinition civetweb.c:2252; mg_domain_context::configchar * config[NUM_OPTIONS]Definition civetweb.c:2254; mg_domain_context::nonce_countunsigned long nonce_countDefinition civetweb.c:2260; mg_domain_context::ssl_cert_last_mtimeint64_t ssl_cert_last_mtimeDefinition civetweb.c:2256; mg_domain_context::auth_nonce_maskuint64_t auth_nonce_maskDefinition civetweb.c:2259; mg_domain_context::nextstruct mg_domain_context * nextDefinition civetweb.c:2268; mg_domain_context::ssl_ctxSSL_CTX * ssl_ctxDefinition civetweb.c:2253; mg_domain_context::handlersstruct mg_handler_info * handlersDefinition civetweb.c:2255; mg_error_dataDefinition civetweb.h:1671; mg_error_data::codeunsigned * codeDefinition civetweb.h:1672; mg_error_data::text_buffer_sizesize_t text_buffer_sizeDefinition civetweb.h:1674; mg_error_data::textchar * textDefinition civetweb.h:1673; mg_file_accessDefinition civetweb.c:1872; mg_file_access::fpFILE * fpDefinition civetweb.c:1874; mg_file_statDefinition civetweb.c:1861; mg_file_stat::sizeuint64_t sizeDefinition civetweb.c:1863; mg_file_sta,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:707379,config,configchar,707379,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['config'],"['config', 'configchar']"
Modifiability,"hreading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/namespaceROOT.html:21864,variab,variable,21864,doc/v624/namespaceROOT.html,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html,1,['variab'],['variable']
Modifiability,"hreading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v622/namespaceROOT.html:21825,variab,variable,21825,doc/v622/namespaceROOT.html,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html,1,['variab'],['variable']
Modifiability,"hreading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v618/namespaceROOT.html:21135,variab,variable,21135,doc/v618/namespaceROOT.html,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html,1,['variab'],['variable']
Modifiability,"hreading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v620/namespaceROOT.html:21227,variab,variable,21227,doc/v620/namespaceROOT.html,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html,1,['variab'],['variable']
Modifiability,"hristensen; 12##; 13## \macro_output; 14## \macro_code; 15##; 16## \authors Juan Fernando, Jaramillo Botero; 17 ; 18from ROOT import TPrincipal, gRandom, TBrowser, vector; 19 ; 20 ; 21n = 10; 22m = 10000; 23 ; 24c = int(n / 5) + 1; 25 ; 26print (""""""*************************************************; 27* Principal Component Analysis *; 28* *; 29* Number of variables: {0:4d} *; 30* Number of data points: {1:8d} *; 31* Number of dependent variables: {2:4d} *; 32* *; 33*************************************************"""""".format(n, m, c)); 34 ; 35# Initilase the TPrincipal object. Use the empty string for the; 36# final argument, if you don't wan't the covariance; 37# matrix. Normalising the covariance matrix is a good idea if your; 38# variables have different orders of magnitude.; 39principal = TPrincipal(n, ""ND""); 40 ; 41# Use a pseudo-random number generator; 42randomNum = gRandom; 43 ; 44# Make the m data-points; 45# Make a variable to hold our data; 46# Allocate memory for the data point; 47data = vector('double')(); 48for i in range(m):; 49 # First we create the un-correlated, random variables, according; 50 # to one of three distributions; 51 for j in range(n - c):; 52 if j % 3 == 0:; 53 data.push_back(randomNum.Gaus(5, 1)); 54 elif j % 3 == 1:; 55 data.push_back(randomNum.Poisson(8)); 56 else:; 57 data.push_back(randomNum.Exp(2)); 58 ; 59 # Then we create the correlated variables; 60 for j in range(c):; 61 data.push_back(0); 62 for k in range(n - c - j):; 63 data[n - c + j] += data[k]; 64 ; 65 # Finally we're ready to add this datapoint to the PCA; 66 principal.AddRow(data.data()); 67 data.clear(); 68 ; 69# Do the actual analysis; 70principal.MakePrincipals(); 71 ; 72# Print out the result on; 73principal.Print(); 74 ; 75# Test the PCA; 76principal.Test(); 77 ; 78# Make some histograms of the original, principal, residue, etc data; 79principal.MakeHistograms(); 80 ; 81# Make two functions to map between feature and pattern space; 82# Start a browser, so that we m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/principal_8py_source.html:1494,variab,variable,1494,doc/master/principal_8py_source.html,https://root.cern,https://root.cern/doc/master/principal_8py_source.html,2,['variab'],"['variable', 'variables']"
Modifiability,"hrough the daughter nodes and add up all weigths of events that; lie within the given volume. Bool_t InVolume(const vector<Float_t>& , TMVA::Volume* ) const; test if the data points are in the given volume. void CalcStatistics(TMVA::Node* n = 0); calculate basic statistics (mean, rms for each variable). Int_t SearchVolumeWithMaxLimit(TMVA::Volume* , vector<const TMVA::BinarySearchTreeNode*>* events = 0, Int_t = -1); recursively walk through the daughter nodes and add up all weigths of events that; lie within the given volume a maximum number of events can be given. Node * CreateNode(UInt_t ) const; { return new BinarySearchTreeNode(); }. BinaryTree* CreateTree() const; { return new BinarySearchTree(); }. const char* ClassName() const; { return ""BinarySearchTree""; }. void SetPeriode(Int_t p); set the periode (number of variables). { fPeriod = p; }. UInt_t GetPeriode( void ); return periode (number of variables). { return fPeriod; }. Float_t Mean(TMVA::Types::ESBType sb, UInt_t var); access to mean for signal and background for each variable. { return fMeans[sb==Types::kSignal?0:1][var]; }. Float_t RMS(TMVA::Types::ESBType sb, UInt_t var); access to RMS for signal and background for each variable. { return fRMS[sb==Types::kSignal?0:1][var]; }. Float_t Min(TMVA::Types::ESBType sb, UInt_t var); access to Minimum for signal and background for each variable. { return fMin[sb==Types::kSignal?0:1][var]; }. Float_t Max(TMVA::Types::ESBType sb, UInt_t var); access to Maximum for signal and background for each variable. { return fMax[sb==Types::kSignal?0:1][var]; }. Float_t RMS(UInt_t var); access to RMS for each variable. { return fRMS[0][var]; }. void SetNormalize(Bool_t norm); { fCanNormalize = norm; }. void DestroyNode(TMVA::BinarySearchTreeNode* ). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__BinarySearchTree.html:7908,variab,variable,7908,root/html534/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html534/TMVA__BinarySearchTree.html,1,['variab'],['variable']
Modifiability,"hrough the daughter nodes and add up all weigths of events that; lie within the given volume. Bool_t InVolume(const vector<Float_t>& , TMVA::Volume* ) const; test if the data points are in the given volume. void CalcStatistics(TMVA::Node* n = 0); calculate basic statistics (mean, rms for each variable). Int_t SearchVolumeWithMaxLimit(TMVA::Volume* , vector<const TMVA::BinarySearchTreeNode*>* events = 0, Int_t = -1); recursively walk through the daughter nodes and add up all weigths of events that; lie within the given volume a maximum number of events can be given. Node * CreateNode(UInt_t ) const; { return new BinarySearchTreeNode(); }. BinaryTree* CreateTree() const; { return new BinarySearchTree(); }. const char* ClassName() const; { return ""BinarySearchTree""; }. void SetPeriode(Int_t p); set the periode (number of variables). { fPeriod = p; }. UInt_t GetPeriode( void ); return periode (number of variables). { return fPeriod; }. Float_t Mean(TMVA::Types::ESBType sb, UInt_t var); access to mean for signal and background for each variable. { return fMeans[sb==Types::kSignal?0:1][var]; }. Float_t RMS(TMVA::Types::ESBType sb, UInt_t var); access to RMS for signal and background for each variable. { return fRMS[sb==Types::kSignal?0:1][var]; }. Float_t Min(TMVA::Types::ESBType sb, UInt_t var); access to Minimum for signal and background for each variable. { return fMin[sb==Types::kSignal?0:1][var]; }. Float_t Max(TMVA::Types::ESBType sb, UInt_t var); access to Maximum for signal and background for each variable. { return fMax[sb==Types::kSignal?0:1][var]; }. Float_t RMS(UInt_t var); access to RMS for each variable. { return fRMS[0][var]; }. void SetNormalize(Bool_t norm); { fCanNormalize = norm; }. void DestroyNode(TMVA::BinarySearchTreeNode* ). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:15; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__BinarySearchTree.html:7732,variab,variable,7732,root/html604/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html604/TMVA__BinarySearchTree.html,1,['variab'],['variable']
Modifiability,"hrough the daughter nodes and add up all weigths of events that; lie within the given volume. Bool_t InVolume(const vector<Float_t>& , TMVA::Volume* ) const; test if the data points are in the given volume. void CalcStatistics(TMVA::Node* n = 0); calculate basic statistics (mean, rms for each variable). Int_t SearchVolumeWithMaxLimit(TMVA::Volume* , vector<const TMVA::BinarySearchTreeNode*>* events = 0, Int_t = -1); recursively walk through the daughter nodes and add up all weigths of events that; lie within the given volume a maximum number of events can be given. Node * CreateNode(UInt_t ) const; { return new BinarySearchTreeNode(); }. BinaryTree* CreateTree() const; { return new BinarySearchTree(); }. const char* ClassName() const; { return ""BinarySearchTree""; }. void SetPeriode(Int_t p); set the periode (number of variables). { fPeriod = p; }. UInt_t GetPeriode( void ); return periode (number of variables). { return fPeriod; }. Float_t Mean(TMVA::Types::ESBType sb, UInt_t var); access to mean for signal and background for each variable. { return fMeans[sb==Types::kSignal?0:1][var]; }. Float_t RMS(TMVA::Types::ESBType sb, UInt_t var); access to RMS for signal and background for each variable. { return fRMS[sb==Types::kSignal?0:1][var]; }. Float_t Min(TMVA::Types::ESBType sb, UInt_t var); access to Minimum for signal and background for each variable. { return fMin[sb==Types::kSignal?0:1][var]; }. Float_t Max(TMVA::Types::ESBType sb, UInt_t var); access to Maximum for signal and background for each variable. { return fMax[sb==Types::kSignal?0:1][var]; }. Float_t RMS(UInt_t var); access to RMS for each variable. { return fRMS[0][var]; }. void SetNormalize(Bool_t norm); { fCanNormalize = norm; }. void DestroyNode(TMVA::BinarySearchTreeNode* ). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__BinarySearchTree.html:7724,variab,variable,7724,root/html602/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html602/TMVA__BinarySearchTree.html,1,['variab'],['variable']
Modifiability,"hrough the daughter nodes and add up all weigths of events that; lie within the given volume. Bool_t InVolume(const vector<Float_t>& , TMVA::Volume* ) const; test if the data points are in the given volume. void CalcStatistics(TMVA::Node* n = 0); calculate basic statistics (mean, rms for each variable). Int_t SearchVolumeWithMaxLimit(TMVA::Volume* , vector<const TMVA::BinarySearchTreeNode*>* events = 0, Int_t = -1); recursively walk through the daughter nodes and add up all weigths of events that; lie within the given volume a maximum number of events can be given. Node * CreateNode(UInt_t ) const; { return new BinarySearchTreeNode(); }. BinaryTree* CreateTree() const; { return new BinarySearchTree(); }. const char* ClassName() const; { return ""BinarySearchTree""; }. void SetPeriode(Int_t p); set the periode (number of variables). { fPeriod = p; }. UInt_t GetPeriode( void ); return periode (number of variables). { return fPeriod; }. Float_t Mean(TMVA::Types::ESBType sb, UInt_t var); access to mean for signal and background for each variable. { return fMeans[sb==Types::kSignal?0:1][var]; }. Float_t RMS(TMVA::Types::ESBType sb, UInt_t var); access to RMS for signal and background for each variable. { return fRMS[sb==Types::kSignal?0:1][var]; }. Float_t Min(TMVA::Types::ESBType sb, UInt_t var); access to Minimum for signal and background for each variable. { return fMin[sb==Types::kSignal?0:1][var]; }. Float_t Max(TMVA::Types::ESBType sb, UInt_t var); access to Maximum for signal and background for each variable. { return fMax[sb==Types::kSignal?0:1][var]; }. Float_t RMS(UInt_t var); access to RMS for each variable. { return fRMS[0][var]; }. void SetNormalize(Bool_t norm); { fCanNormalize = norm; }. void DestroyNode(TMVA::BinarySearchTreeNode* ). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: BinarySearchTree.h 37399 2010-12-08 15:22:07Z evt $ » Last generated: 2010-12-08 16:56; This page has been au",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__BinarySearchTree.html:7889,variab,variable,7889,root/html528/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html528/TMVA__BinarySearchTree.html,1,['variab'],['variable']
Modifiability,"hs);  TArrayF assignment operator. ;  ; Float_t & operator[] (Int_t i);  ; Float_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Float_t val);  ; void Set (Int_t n) override;  Set size of this array to n floats. ;  ; void Set (Int_t n, const Float_t *array);  Set size of this array to n floats and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2F.html:44026,inherit,inherited,44026,doc/master/classTH2F.html,https://root.cern,https://root.cern/doc/master/classTH2F.html,2,['inherit'],['inherited']
Modifiability,"hs);  TArrayF assignment operator. ;  ; Float_t & operator[] (Int_t i);  ; Float_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Float_t val);  ; void Set (Int_t n) override;  Set size of this array to n floats. ;  ; void Set (Int_t n, const Float_t *array);  Set size of this array to n floats and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH3; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3F.html:43766,inherit,inherited,43766,doc/master/classTH3F.html,https://root.cern,https://root.cern/doc/master/classTH3F.html,2,['inherit'],['inherited']
Modifiability,"hs);  TArrayS assignment operator. ;  ; Short_t & operator[] (Int_t i);  ; Short_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Short_t val);  ; void Set (Int_t n) override;  Set size of this array to n shorts. ;  ; void Set (Int_t n, const Short_t *array);  Set size of this array to n shorts and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2S.html:44003,inherit,inherited,44003,doc/master/classTH2S.html,https://root.cern,https://root.cern/doc/master/classTH2S.html,2,['inherit'],['inherited']
Modifiability,"hs);  TArrayS assignment operator. ;  ; Short_t & operator[] (Int_t i);  ; Short_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Short_t val);  ; void Set (Int_t n) override;  Set size of this array to n shorts. ;  ; void Set (Int_t n, const Short_t *array);  Set size of this array to n shorts and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH3; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3S.html:43625,inherit,inherited,43625,doc/master/classTH3S.html,https://root.cern,https://root.cern/doc/master/classTH3S.html,2,['inherit'],['inherited']
Modifiability,"ht info from file ;  ; void ReadWeightsFromStream (TFile &istr);  read training sample from file ;  ; void ReadWeightsFromXML (void *wghtnode);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  this is a dummy training: the preparation work to do is the construction of the binary tree as a pointer chain. ;  ; void WriteWeightsToStream (TFile &rf) const;  write training sample (TTree) to file ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DisableWriting (Bool_t setter);  ; Bool_t DoMulticlass () const;  ; Bool_t DoRegression () const;  ; void ExitFromTraining ();  ; Types::EAnalysisType GetAnalysisType () const;  ; UInt_t GetCurrentIter ();  ; virtual Double_t GetEfficiency (const TString &, Types::ETreeType, Double_t &err);  fill background efficiency (resp. ;  ; const Event * G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:3508,inherit,inherited,3508,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,1,['inherit'],['inherited']
Modifiability,"ht mode and user function</a>; 648(is fully equivalent as for histogram).; 649 ; 650NOTE all parameters of user function are taken from; 651 ; 652 void TCanvas::Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y); 653 ; 654 - `pad` is pointer to pad with highlighted graph; 655 - `obj` is pointer to highlighted graph; 656 - `x` is highlighted x-th (i-th) point for graph; 657 - `y` not in use (only for 2D histogram); 658 ; 659For more complex demo please see for example `$ROOTSYS/tutorials/math/hlquantiles.C` file.; 660 ; 661*/; 662 ; 663 ; 664////////////////////////////////////////////////////////////////////////////////; 665/// Default constructor; 666 ; 667TGraphPainter::TGraphPainter(); 668{; 669}; 670 ; 671 ; 672////////////////////////////////////////////////////////////////////////////////; 673/// Destructor.; 674 ; 675TGraphPainter::~TGraphPainter(); 676{; 677}; 678 ; 679 ; 680////////////////////////////////////////////////////////////////////////////////; 681/// Compute the logarithm of variables `gxwork` and `gywork`; 682/// according to the value of Options and put the results; 683/// in the variables `gxworkl` and `gyworkl`.; 684///; 685/// npoints : Number of points in gxwork and in gywork.; 686///; 687/// - opt = 1 ComputeLogs is called from PaintGrapHist; 688/// - opt = 0 ComputeLogs is called from PaintGraph; 689 ; 690void TGraphPainter::ComputeLogs(Int_t npoints, Int_t opt); 691{; 692 if (gPad->GetLogx()) {; 693 for (Int_t i = 0; i < npoints; i++) {; 694 gxworkl[i] = (gxwork[i] > 0.) ? TMath::Log10(gxwork[i]) : gPad->GetX1();; 695 }; 696 } else {; 697 for (Int_t i = 0; i < npoints; i++); 698 gxworkl[i] = gxwork[i];; 699 }; 700 if (!opt && gPad->GetLogy()) {; 701 for (Int_t i = 0; i < npoints; i++) {; 702 gyworkl[i] = (gywork[i] > 0.) ? TMath::Log10(gywork[i]) : gPad->GetY1();; 703 }; 704 } else {; 705 for (Int_t i = 0; i < npoints; i++); 706 gyworkl[i] = gywork[i];; 707 }; 708}; 709 ; 710 ; 711//////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:25843,variab,variables,25843,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['variab'],['variables']
Modifiability,"ht of current event; Double_t*_extSumW2Array! External sum of weights array; Double_t*_extWgtArray! External weight array; Double_t*_extWgtErrHiArray! External weight array - high error; Double_t*_extWgtErrLoArray! External weight array - low error; RooVectorDataStore::CatVector**_firstCat! do not persist; RooVectorDataStore::RealVector**_firstReal! do not persist; RooVectorDataStore::RealFullVector**_firstRealF! do not persist; Int_t_nCat; Int_t_nEntries; Int_t_nReal; Int_t_nRealF; vector<RealVector*>_realStoreList; vector<RealFullVector*>_realfStoreList; Double_t_sumWeight; RooArgSet_varsww; RooRealVar*_wgtVarPointer to weight variable (if set). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooVectorDataStore(). RooVectorDataStore(const char* name, const char* title, const RooArgSet& vars, const char* wgtVarName = 0). void setAllBuffersNative(). RooArgSet varsNoWeight(const RooArgSet& allVars, const char* wgtName); Utility function for constructors; Return RooArgSet that is copy of allVars minus variable matching wgtName if specified. RooRealVar* weightVar(const RooArgSet& allVars, const char* wgtName); Utility function for constructors; Return pointer to weight variable if it is defined. RooVectorDataStore(const RooVectorDataStore& other, const char* newname = 0); Regular copy ctor. RooVectorDataStore(const RooTreeDataStore& other, const RooArgSet& vars, const char* newname = 0). RooVectorDataStore(const RooVectorDataStore& other, const RooArgSet& vars, const char* newname = 0); Clone ctor, must connect internal storage to given new external set of vars. RooVectorDataStore(const char* name, const char* title, RooAbsDataStore& tds, const RooArgSet& vars, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t , const char* wgtVarName = 0). ~RooVectorDataStore(); Destructor. Bool_t valid() const; Return true if currently loaded coordinate is considered valid within; the current range definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooVectorDataStore.html:11779,variab,variable,11779,root/html532/RooVectorDataStore.html,https://root.cern,https://root.cern/root/html532/RooVectorDataStore.html,1,['variab'],['variable']
Modifiability,"ht parameters are similar to TH2D::TH2D.; All values of z are accepted at filling time.; To fill a profile2D histogram, one must use TProfile2D::Fill function. Note that when filling the profile histogram the function Fill; checks if the variable z is betyween fZmin and fZmax.; If a minimum or maximum value is set for the Z scale before filling,; then all values below zmin or above zmax will be discarded.; Setting the minimum or maximum value for the Z scale before filling; has the same effect as calling the special TProfile2D constructor below; where zmin and zmax are specified. H(I,J) is printed as the cell contents. The errors computed are s(I,J) if CHOPT='S'; (spread option), or e(I,J) if CHOPT=' ' (error on mean). See TProfile2D::BuildOptions for explanation of parameters. see other constructors below with all possible combinations of; fix and variable bin size like in TH2D. TProfile2D(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup, Option_t* option = """"); Create a 2-D Profile with variable bins in X and fix bins in Y. TProfile2D(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins, Option_t* option = """"); Create a 2-D Profile with fix bins in X and variable bins in Y. TProfile2D(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Option_t* option = """"); Create a 2-D Profile with variable bins in X and variable bins in Y. TProfile2D(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Double_t zlow, Double_t zup, Option_t* option = """"); Constructor for Profile2D histograms with range in z; *-* ====================================================; The first eight parameters are similar to TH2D::TH2D.; Only the values of Z between ZMIN and ZMAX will be considered at filling time.; zmin and zmax will also be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:29221,variab,variable,29221,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,6,['variab'],['variable']
Modifiability,"ht) ? DoWeightMinimization(std::move(logl)) : DoMinimization(std::move(logl));; 481 }; 482 } else {; 483 // use gradient : check if fFunc provides gradient; 484 if (fConfig.MinimizerOptions().PrintLevel() > 0); 485 MATH_INFO_MSG(""Fitter::DoUnbinnedLikelihoodFit"", ""use gradient from model function"");; 486 if (extended) {; 487 MATH_WARN_MSG(""Fitter::DoUnbinnedLikelihoodFit"",; 488 ""Extended unbinned fit with gradient not yet supported - do a not-extended fit"");; 489 extended = false;; 490 }; 491 if (fFunc_v) {; 492 std::shared_ptr<IGradModelFunction_v> gradFun = std::dynamic_pointer_cast<IGradModelFunction_v>(fFunc_v);; 493 if (!gradFun) {; 494 MATH_ERROR_MSG(""Fitter::DoUnbinnedLikelihoodFit"", ""wrong type of function - it does not provide gradient"");; 495 return false;; 496 }; 497 auto logl = std::make_unique<LogLikelihoodFCN<BaseGradFunc, IModelFunction_v>>(data, gradFun, useWeight, extended, executionPolicy);; 498 return (useWeight) ? DoWeightMinimization(std::move(logl)) : DoMinimization(std::move(logl));; 499 } else {; 500 std::shared_ptr<IGradModelFunction> gradFun = std::dynamic_pointer_cast<IGradModelFunction>(fFunc);; 501 if (!gradFun) {; 502 MATH_ERROR_MSG(""Fitter::DoUnbinnedLikelihoodFit"", ""wrong type of function - it does not provide gradient"");; 503 return false;; 504 }; 505 auto logl = std::make_unique<LogLikelihoodFCN<BaseGradFunc>>(data, gradFun, useWeight, extended, executionPolicy);; 506 return (useWeight) ? DoWeightMinimization(std::move(logl)) : DoMinimization(std::move(logl));; 507 }; 508 }; 509 return false;; 510}; 511 ; 512 ; 513bool Fitter::DoLinearFit( ) {; 514 ; 515 std::shared_ptr<BinData> data = std::dynamic_pointer_cast<BinData>(fData);; 516 assert(data);; 517 ; 518 // perform a linear fit on a set of binned data; 519 std::string prevminimizer = fConfig.MinimizerType();; 520 fConfig.SetMinimizer(""Linear"");; 521 ; 522 fBinFit = true;; 523 ; 524 bool ret = DoLeastSquareFit();; 525 fConfig.SetMinimizer(prevminimizer.c_str());; 526 return ret;; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:18628,extend,extended,18628,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,5,['extend'],['extended']
Modifiability,"ht) override;  Resize the TGTableCell. ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; UInt_t fColumn;  Column this cell belongs to. ;  ; Bool_t fEnabled;  Cell enabled state. ;  ; FontStruct_t fFontStruct;  Font of the label. ;  ; Bool_t fHasOwnFont;  Does the cell have it's own font. ;  ; TGPicture * fImage;  Image or icon. ;  ; TGString * fLabel;  Text as shown in the cell. ;  ; GContext_t fNormGC;  graphics context used to draw the cell ;  ; Bool_t fReadOnly;  Cell readonly state. ;  ; UInt_t fRow;  Row this cell belongs to. ;  ; TGTable * fTable;  TGTable that a cell belongs to. ;  ; UInt_t fTHeight;  Label height. ;  ; TGToolTip * fTip;  Possible Tooltip. ;  ; Int_t fTMode;  Text justify mode. ;  ; UInt_t fTWidth;  Label width. ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableCell.html:24406,inherit,inherited,24406,doc/master/classTGTableCell.html,https://root.cern,https://root.cern/doc/master/classTGTableCell.html,1,['inherit'],['inherited']
Modifiability,"hted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:102138,extend,extended,102138,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['extend'],['extended']
Modifiability,"hted; vector<TEveCaloData::vCellId_t*>fCellListsSelected; UChar_tTEveElement::fChangeBits!; list<TEveElement*>TEveElement::fChildrenList of children.; TEveCompound*TEveElement::fCompoundCompound this object belongs to.; TEveCaloData*TEveCaloViz::fDataevent data reference; Int_tTEveElement::fDenyDestroy! Deny-destroy count.; Float_tTEveProjected::fDepthz coordinate; Bool_tTEveElement::fDestroyOnZeroRefCntAuto-destruct when ref-count reaches zero.; Char_tTEveElement::fDestructing!; Float_tTEveCaloViz::fEndCapPosBbackward end cap z coordinate in cm (should be < 0); Float_tTEveCaloViz::fEndCapPosFforward end cap z coordinate in cm; Double_tTEveCaloViz::fEtaMax; Double_tTEveCaloViz::fEtaMin; Bool_tTEveElement::fHighlighted!; Short_tTEveElement::fImpliedHighlighted!; Short_tTEveElement::fImpliedSelected!; set<TEveElement::TEveListTreeInfo,less<TEveElement::TEveListTreeInfo>,allocator<TEveElement::TEveListTreeInfo> >TEveElement::fItems! Set of list-tree-items.; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; TEveProjectionManager*TEveProjected::fManagermanager; Float_tfMaxESumBin; Float_tfMaxEtSumBin; Float_tTEveCaloViz::fMaxTowerHbounding box z dimesion; Float_tTEveCaloViz::fMaxValAbs; TStringTNamed::fNameobject identifier; Int_tTEveElement::fNumChildren!; TEveRGBAPalette*TEveCaloViz::fPalettePointer to signal-color palette.; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; Double_tTEveCaloViz::fPhi; Double_tTEveCaloViz::fPhiOffsetphi range +/- offset; Bool_tTEveElement::fPickable; Float_tTEveCaloViz::fPlotEtplot E or Et.; TEveProjectable*TEveProjected::fProjectablelink to original object; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveCalo2D.html:22787,variab,variable,22787,root/html534/TEveCalo2D.html,https://root.cern,https://root.cern/root/html534/TEveCalo2D.html,1,['variab'],['variable']
Modifiability,"hts; Double_tTH1::fTsumw2Total Sum of squares of weights; Double_tTH1::fTsumwxTotal Sum of weight*X; Double_tTH1::fTsumwx2Total Sum of weight*X*X; TAxisTH1::fXaxisX axis descriptor; TAxisTH1::fYaxisY axis descriptor; TAxisTH1::fZaxisZ axis descriptor; static Bool_tTH1::fgAddDirectory!flag to add histograms to the directory; static Int_tTH1::fgBufferSize!default buffer size for automatic histograms; static Bool_tTH1::fgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tTH1::fgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH1C(); Constructor. TH1C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup); Create a 1-Dim histogram with fix bins of type char (one byte per channel); (see TH1::TH1 for explanation of parameters). TH1C(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins); Create a 1-Dim histogram with variable bins of type char (one byte per channel); (see TH1::TH1 for explanation of parameters). TH1C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins); Create a 1-Dim histogram with variable bins of type char (one byte per channel); (see TH1::TH1 for explanation of parameters). ~TH1C(); Destructor. TH1C(const TH1C& h1c); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w. void Copy(TObject& hnew) const; Copy this to newth1. void Reset(Option_t* option = """"); Reset. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. TH1C& operator=(const TH1C& h1); Operator =. Double_t RetrieveBinContent(Int_t bin) const. void UpdateBinContent(Int_t bin, Double_t content). » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1C.html:25701,variab,variable,25701,root/html602/TH1C.html,https://root.cern,https://root.cern/root/html602/TH1C.html,2,['variab'],['variable']
Modifiability,"htssum of all event weights; vector<const TMVA::Event*>*fTrainSamplepointer to sample actually used in training (fEventSample or fSubSample) for example; Bool_tfTrainWithNegWeightsyes there are negative event weights and we don't ignore them; Double_tfTransitionPointbreak-down point for gradient regression; Bool_tfUseExclusiveVarsindividual variables already used in fisher criterium are not anymore analysed individually for node splitting; Bool_tfUseFisherCutsuse multivariate splits using the Fisher criterium; UInt_tfUseNTrainEventsnumber of randomly picked training events used in randomised (and bagged) trees; UInt_tfUseNvarsthe number of variables used in the randomised tree splitting; Bool_tfUsePoissonNvarsuse ""fUseNvars"" not as fixed number but as mean of a possion distr. in each split; Bool_tfUseYesNoLeafuse sig or bkg classification in leave nodes or sig/bkg; vector<const TMVA::Event*>fValidationSamplethe Validation events; vector<Double_t>fVariableImportancethe relative importance of the different variables; map<const TMVA::Event*,pair<Double_t,Double_t> >fWeightedResidualsweighted regression residuals; static const Int_tfgDebugLeveldebug level determining some printout/control plots etc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodBDT(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); the standard constructor for the ""boosted decision trees"". MethodBDT(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null). Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); BDT can handle classification with multiple classes and regression with one regression-target. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; nTrees number of trees in the forest to be created; BoostType the boos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBDT.html:27031,variab,variables,27031,root/html602/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBDT.html,2,['variab'],['variables']
Modifiability,"http:8080"");; This will start a civetweb-based http server on the port 8080. Then one should be able to open the address “http://localhost:8080” in any modern browser (IE9, Firefox, Chrome, Opera) and browse objects created in application. By default, the server can access files, canvases, and histograms via the gROOT pointer. All those objects can be displayed with JSROOT graphics.; There is a snapshot (frozen copy) of such server, running in tutorials/http/httpserver.C macro from ROOT tutorial.; <iframe width=“800” height=“500” src=“https://root.cern.ch/js/3.6/httpserver.C/?layout=simple&item=Canvases/c1”> ; One could specify several options when creating http server. They could be add as additional URL parameters to the constructor arguments like:; serv = new THttpServer(""http:8080?loopback&thrds=2"");; Following parameters are supported:. thrds=N - number of threads used by the civetweb (default is 5); top=name - configure top name, visible in the web browser; auth_file=filename - authentication file name, created with htdigets utility; auth_domain=domain - authentication domain; loopback - bind specified port to loopback 127.0.0.1 address; debug - enable debug mode, server always returns html page with request info. If necessary, one could bind http server to specific IP address like:; new THttpServer(""http:192.168.1.17:8080""); 1.2 Registering objects; At any time, one could register other objects with the command:; TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; One should specify sub-folder name, where objects will be registered. If sub-folder name does not starts with slash /, than top-name folder /Objects/ will be prepended. At any time one could unregister objects:; serv->Unregister(gr);; THttpServer does not take ownership over registered objects - they should be deleted by user.; If the objects content is changing in the application, one could enable monitoring flag in the browser - then objects view will be reg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/HttpServer/HttpServer.html:2116,config,configure,2116,root/html534/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/html534/guides/HttpServer/HttpServer.html,1,['config'],['configure']
Modifiability,"hunk. Each of the chunks holds an array of THnSparseCompactBinCoord and the content (a TArray*), which is created outside (by the templated derived classes of THnSparse) and passed in at construction time. ; Definition at line 30 of file THnSparse_Internal.h. Public Member Functions;  THnSparseArrayChunk ();  ;  THnSparseArrayChunk (Int_t coordsize, bool errors, TArray *cont);  (Default) initialize a chunk. ;  ;  ~THnSparseArrayChunk () override;  Destructor. ;  ; void AddBin (Int_t idx, const Char_t *idxbuf);  Create a new bin in this chunk. ;  ; void AddBinContent (Int_t idx, Double_t v=1.);  ; Int_t GetEntries () const;  ; TClass * IsA () const override;  ; Bool_t Matches (Int_t idx, const Char_t *idxbuf) const;  Check whether bin at idx batches idxbuf. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 ();  Turn on support of errors. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseArrayChunk.html:1497,inherit,inherited,1497,doc/master/classTHnSparseArrayChunk.html,https://root.cern,https://root.cern/doc/master/classTHnSparseArrayChunk.html,1,['inherit'],['inherited']
Modifiability,"hus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:13114,variab,variable,13114,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['variab'],['variable']
Modifiability,"hus would not be refresh via UpdateClassInfo. ;  ; void RegisterTemporary (const cling::Value &value);  Register value as a temporary, extending its lifetime to that of the interpreter. ;  ; void RegisterTemporary (const TInterpreterValue &value);  ; Int_t ReloadAllSharedLibraryMaps () final;  Reload the library map entries coming from all the loaded shared libraries, after first unloading the current ones. ;  ; void ReportDiagnosticsToErrorHandler (bool enable=true) final;  Report diagnostics to the ROOT error handler (see TError.h). ;  ; Int_t RescanLibraryMap () final;  Scan again along the dynamic path for library maps. ;  ; void Reset () final;  Pressing Ctrl+C should forward here. ;  ; void ResetAll () final;  Reset the Cling state to its initial state. ;  ; void ResetGlobals () final;  Reset in Cling the list of global variables to the state saved by the last call to TCling::SaveGlobalsContext(). ;  ; void ResetGlobalVar (void *obj) final;  Reset the Cling 'user' global objects/variables state to the state saved by the last call to TCling::SaveGlobalsContext(). ;  ; void RewindDictionary () final;  Rewind Cling dictionary to the point where it was before executing the current macro. ;  ; void * RewindInterpreterMutex ();  Reset the interpreter lock to the state it had before interpreter-related calls happened. ;  ; void SaveContext () final;  Save the current Cling state. ;  ; void SaveGlobalsContext () final;  Save the current Cling state of global objects. ;  ; void SetAlloclockfunc (void(*)()) const final;  [Place holder for Mutex Lock] Provide the interpreter with a way to acquire a lock used to protect critical section of its code (non-thread safe parts). ;  ; void SetAllocunlockfunc (void(*)()) const final;  [Place holder for Mutex Unlock] Provide the interpreter with a way to release a lock used to protect critical section of its code (non-thread safe parts). ;  ; void * SetAutoLoadCallBack (void *cb) final;  ; int SetClassAutoLoading (int) const final",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:29440,variab,variables,29440,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['variab'],['variables']
Modifiability,"i : a 32 bit unsigned integer (UInt_t); F : a 32 bit floating point (Float_t); f : a 24 bit floating point with truncated mantissa (Float16_t); D : a 64 bit floating point (Double_t); d : a 24 bit truncated floating point (Double32_t); L : a 64 bit signed integer (Long64_t); l : a 64 bit unsigned integer (ULong64_t); G : a long signed integer, stored as 64 bit (Long_t); g : a long unsigned integer, stored as 64 bit (ULong_t); O : [the letter o, not a zero] a boolean (bool). Examples:; A int: ""myVar/I""; A float array with fixed size: ""myArrfloat[42]/F""; An double array with variable size, held by the myvar column: ""myArrdouble[myvar]/D""; An Double32_t array with variable size, held by the myvar column , with values between 0 and 16: ""myArr[myvar]/d[0,10]""; The myvar column, which holds the variable size, MUST be an Int_t (/I). If the address points to a single numerical variable, the leaflist is optional: int value;; tree->Branch(branchname, &value);; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142. If the address points to more than one numerical variable, we strongly recommend that the variable be sorted in decreasing order of size. Any other order will result in a non-portable TTree (i.e. you will not be able to read it back on a platform with a different padding strategy). We recommend to persistify objects rather than composite leaflists.; In case of the truncated floating point types (Float16_t and Double32_t) you can furthermore specify the range in the style [xmin,xmax] or [xmin,xmax,nbits] after the type character. For example, for storing a variable size array myArr of Double32_t with values within a range of [0, 2*pi] and the size of which is stored in an Int_t (/I) branch called myArrSize, the syntax for the leaflist string would be: myArr[myArrSize]/d[0,twopi]. Of course the number of bits could be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:4339,variab,variable,4339,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['variab'],['variable']
Modifiability,"i <= fNpar; ++i) {denom += fGrd[i-1]*(fXt[i-1] - pvec[i-1]); }; 1090 if (denom <= 0) {; 1091 fDcovar = 1;; 1092 fISW[1] = 0;; 1093 denom = 1;; 1094 }; 1095 ycalf = (f - fApsi) / denom;; 1096}; 1097 ; 1098////////////////////////////////////////////////////////////////////////////////; 1099/// Resets the parameter list to UNDEFINED; 1100///; 1101/// Called from MINUIT and by option from MNEXCM; 1102 ; 1103void TMinuit::mncler(); 1104{; 1105 Int_t i;; 1106 ; 1107 fNpfix = 0;; 1108 fNu = 0;; 1109 fNpar = 0;; 1110 fNfcn = 0;; 1111 fNwrmes[0] = 0;; 1112 fNwrmes[1] = 0;; 1113 for (i = 1; i <= fMaxext; ++i) {; 1114 fU[i-1] = 0;; 1115 fCpnam[i-1] = fCundef;; 1116 fNvarl[i-1] = -1;; 1117 fNiofex[i-1] = 0;; 1118 }; 1119 mnrset(1);; 1120 fCfrom = ""CLEAR "";; 1121 fNfcnfr = fNfcn;; 1122 fCstatu = ""UNDEFINED "";; 1123 fLnolim = kTRUE;; 1124 fLphead = kTRUE;; 1125}; 1126 ; 1127////////////////////////////////////////////////////////////////////////////////; 1128/// Print function contours in two variables, on line printer; 1129///; 1130/// input arguments: parx, pary, devs, ngrid; 1131 ; 1132void TMinuit::mncntr(Int_t ike1, Int_t ike2, Int_t &ierrf); 1133{; 1134 static const char *const clabel = ""0123456789ABCDEFGHIJ"";; 1135 ; 1136 /* Local variables */; 1137 Double_t d__1, d__2;; 1138 Double_t fcna[115], fcnb[115], contur[20];; 1139 Double_t ylabel, fmn, fmx, xlo, ylo, xup, yup;; 1140 Double_t devs, xsav, ysav, bwidx, bwidy, unext, ff, xb4;; 1141 Int_t i, ngrid, ixmid, nparx, ix, nx, ny, ki1, ki2, ixzero, iy, ics;; 1142 TString chmid, chln, chzero;; 1143 ; 1144 Int_t ke1 = ike1+1;; 1145 Int_t ke2 = ike2+1;; 1146 if (ke1 <= 0 || ke2 <= 0) goto L1350;; 1147 if (ke1 > fNu || ke2 > fNu) goto L1350;; 1148 ki1 = fNiofex[ke1-1];; 1149 ki2 = fNiofex[ke2-1];; 1150 if (ki1 <= 0 || ki2 <= 0) goto L1350;; 1151 if (ki1 == ki2) goto L1350;; 1152 ; 1153 if (fISW[1] < 1) {; 1154 mnhess();; 1155 mnwerr();; 1156 }; 1157 nparx = fNpar;; 1158 xsav = fU[ke1-1];; 1159 ysav = fU[ke2-1];; 1160 devs = fWo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:39577,variab,variables,39577,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['variab'],['variables']
Modifiability,"i) {; 8081 TBranch* branch = (TBranch*) branches->UncheckedAt(i);; 8082 branch->ResetAddress();; 8083 }; 8084}; 8085 ; 8086////////////////////////////////////////////////////////////////////////////////; 8087/// Loop over tree entries and print entries passing selection. Interactive; 8088/// pagination break is on by default.; 8089///; 8090/// - If varexp is 0 (or """") then print only first 8 columns.; 8091/// - If varexp = ""*"" print all columns.; 8092///; 8093/// Otherwise a columns selection can be made using ""var1:var2:var3"".; 8094///; 8095/// \param firstentry first entry to scan; 8096/// \param nentries total number of entries to scan (starting from firstentry). Defaults to all entries.; 8097/// \see TTree::SetScanField to control how many lines are printed between pagination breaks (Use 0 to disable pagination); 8098/// \see TTreePlayer::Scan for more information; 8099 ; 8100Long64_t TTree::Scan(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); 8101{; 8102 GetPlayer();; 8103 if (fPlayer) {; 8104 return fPlayer->Scan(varexp, selection, option, nentries, firstentry);; 8105 }; 8106 return -1;; 8107}; 8108 ; 8109////////////////////////////////////////////////////////////////////////////////; 8110/// Set a tree variable alias.; 8111///; 8112/// Set an alias for an expression/formula based on the tree 'variables'.; 8113///; 8114/// The content of 'aliasName' can be used in TTreeFormula (i.e. TTree::Draw,; 8115/// TTree::Scan, TTreeViewer) and will be evaluated as the content of; 8116/// 'aliasFormula'.; 8117///; 8118/// If the content of 'aliasFormula' only contains symbol names, periods and; 8119/// array index specification (for example event.fTracks[3]), then; 8120/// the content of 'aliasName' can be used as the start of symbol.; 8121///; 8122/// If the alias 'aliasName' already existed, it is replaced by the new; 8123/// value.; 8124///; 8125/// When being used, the alias can be preceded by an eventual 'Frien",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:315177,variab,variable,315177,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['variab'],['variable']
Modifiability,"i++) {; 76 gRandom->Rannor(px,py);; 77 pz = px*px + py*py;; 78 hprof2d->Fill(px,py,pz,1);; 79 }; 80 hprof2d->Draw();; 81 }; 82 ~~~~; 83*/; 84 ; 85////////////////////////////////////////////////////////////////////////////////; 86/// Default constructor for Profile2D histograms.; 87 ; 88TProfile2D::TProfile2D(); 89{; 90 fTsumwz = fTsumwz2 = 0;; 91 fScaling = kFALSE;; 92 BuildOptions(0,0,"""");; 93}; 94 ; 95////////////////////////////////////////////////////////////////////////////////; 96/// Default destructor for Profile2D histograms.; 97 ; 98TProfile2D::~TProfile2D(); 99{; 100}; 101 ; 102////////////////////////////////////////////////////////////////////////////////; 103/// Normal Constructor for Profile histograms.; 104///; 105/// The first eight parameters are similar to TH2D::TH2D.; 106/// All values of z are accepted at filling time.; 107/// To fill a profile2D histogram, one must use TProfile2D::Fill function.; 108///; 109/// Note that when filling the profile histogram the function Fill; 110/// checks if the variable z is between fZmin and fZmax.; 111/// If a minimum or maximum value is set for the Z scale before filling,; 112/// then all values below zmin or above zmax will be discarded.; 113/// Setting the minimum or maximum value for the Z scale before filling; 114/// has the same effect as calling the special TProfile2D constructor below; 115/// where zmin and zmax are specified.; 116///; 117/// H(I,J) is printed as the cell contents. The errors computed are s(I,J) if CHOPT='S'; 118/// (spread option), or e(I,J) if CHOPT=' ' (error on mean).; 119///; 120/// See TProfile2D::BuildOptions for explanation of parameters; 121///; 122/// see other constructors below with all possible combinations of; 123/// fix and variable bin size like in TH2D.; 124 ; 125TProfile2D::TProfile2D(const char *name,const char *title,Int_t nx,Double_t xlow,Double_t xup,Int_t ny,Double_t ylow,Double_t yup,Option_t *option); 126: TH2D(name,title,nx,xlow,xup,ny,ylow,yup); 127{; 128 Bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:4494,variab,variable,4494,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['variab'],['variable']
Modifiability,"i, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EDataSet. enum TMultiLayerPerceptron::EDataSet. EnumeratorkTraining ; kTest . Definition at line 32 of file TMultiLayerPerceptron.h. ◆ ELearningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Documentation. ◆ TMultiLayerPerceptron() [1/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:29378,layers,layers,29378,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['layers'],['layers']
Modifiability,"i.e. row=0 or column=0) the frames are arranged according to the direction of the fixed dimension. This layout manager does not make use of TGLayoutHints. ; Definition at line 269 of file TGLayout.h. Public Member Functions;  TGMatrixLayout (TGCompositeFrame *main, UInt_t r, UInt_t c, Int_t s=0, Int_t h=0);  TGMatrixLayout constructor. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the matrix layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a matrix layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save matrix layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () const;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMatrixLayout.html:1916,inherit,inherited,1916,doc/master/classTGMatrixLayout.html,https://root.cern,https://root.cern/doc/master/classTGMatrixLayout.html,2,['inherit'],['inherited']
Modifiability,"i.h. ◆ fNpar. Int_t TFumili::fNpar. private . fNpar - number of parameters ; Definition at line 19 of file TFumili.h. ◆ fNstepDec. Int_t TFumili::fNstepDec. private . fNstepDec - maximum number of step decreasing counter ; Definition at line 20 of file TFumili.h. ◆ fNumericDerivatives. Bool_t TFumili::fNumericDerivatives. private . Definition at line 32 of file TFumili.h. ◆ fParamError. Double_t* TFumili::fParamError. private . [fMaxParam] Parameter errors ; Definition at line 39 of file TFumili.h. ◆ fPL. Double_t* TFumili::fPL. private . [fMaxParam] Limits for parameters step. If <0, then parameter is fixed ; Definition at line 46 of file TFumili.h. ◆ fPL0. Double_t* TFumili::fPL0. private . [fMaxParam] Step initial bounds ; Definition at line 45 of file TFumili.h. ◆ fR. Double_t* TFumili::fR. private . [fMaxParam] Correlation factors ; Definition at line 52 of file TFumili.h. ◆ fRP. Double_t TFumili::fRP. private . Precision of fit ( machine zero on CDC 6000) quite old yeh? ; Definition at line 59 of file TFumili.h. ◆ fS. Double_t TFumili::fS. private . fS - objective function value (return) ; Definition at line 57 of file TFumili.h. ◆ fSumLog. Double_t* TFumili::fSumLog. private . [fNlog] ; Definition at line 40 of file TFumili.h. ◆ fWARN. Bool_t TFumili::fWARN. private . warnings ; Definition at line 29 of file TFumili.h. ◆ fZ. Double_t* TFumili::fZ. private . [fMaxParam2] Inverse fZ0 matrix - covariance matrix ; Definition at line 37 of file TFumili.h. ◆ fZ0. Double_t* TFumili::fZ0. private . [fMaxParam2] Matrix of approximate second derivatives of objective function This matrix is diagonal and always contain only variable parameter's derivatives ; Definition at line 34 of file TFumili.h. Libraries for TFumili:. [legend]; The documentation for this class was generated from the following files:; math/fumili/inc/TFumili.h; math/fumili/src/TFumili.cxx. TFumili. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:44193,variab,variable,44193,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['variab'],['variable']
Modifiability,i.h;  CorrGuiMultiClass.h;  deviations.h;  efficiencies.h;  likelihoodrefs.h;  MovieMaker.h;  mvaeffs.h;  mvas.h;  mvasMulticlass.h;  mvaweights.h;  network.h;  paracoor.h;  PlotFoams.h;  probas.h;  regression_averagedevs.h;  rulevis.h;  rulevisCorr.h;  rulevisHists.h;  tmvaglob.h;  TMVAGui.h;  TMVAMultiClassGui.h;  TMVARegGui.h;  variables.h;  variablesMultiClass.h;  LinkDef.h;  ► src;  annconvergencetest.cxx;  BDT.cxx;  BDT_Reg.cxx;  BDTControlPlots.cxx;  BoostControlPlots.cxx;  compareanapp.cxx;  correlations.cxx;  correlationscatters.cxx;  correlationscattersMultiClass.cxx;  correlationsMultiClass.cxx;  CorrGui.cxx;  CorrGuiMultiClass.cxx;  deviations.cxx;  efficiencies.cxx;  likelihoodrefs.cxx;  MovieMaker.cxx;  mvaeffs.cxx;  mvas.cxx;  mvasMulticlass.cxx;  mvaweights.cxx;  network.cxx;  paracoor.cxx;  PlotFoams.cxx;  probas.cxx;  regression_averagedevs.cxx;  rulevis.cxx;  rulevisCorr.cxx;  rulevisHists.cxx;  tmvaglob.cxx;  TMVAGui.cxx;  TMVAMultiClassGui.cxx;  TMVARegGui.cxx;  variables.cxx;  variablesMultiClass.cxx;  ► tree;  ► tree;  ► doc;  ► macros;  entrylist_figure1.C;  entrylist_figure2.C;  entrylistblock_figure1.C;  ► inc;  LinkDef.h;  TBasket.h;  TBasketSQL.h;  TBranch.h;  TBranchBrowsable.h;  TBranchClones.h;  TBranchElement.h;  TBranchObject.h;  TBranchRef.h;  TBranchSTL.h;  TBufferSQL.h;  TChain.h;  TChainElement.h;  TCut.h;  TEntryList.h;  TEntryListArray.h;  TEntryListBlock.h;  TEntryListFromFile.h;  TEventList.h;  TFriendElement.h;  TIndArray.h;  TLeaf.h;  TLeafB.h;  TLeafC.h;  TLeafD.h;  TLeafElement.h;  TLeafF.h;  TLeafI.h;  TLeafL.h;  TLeafO.h;  TLeafObject.h;  TLeafS.h;  TNtuple.h;  TNtupleD.h;  TQueryResult.h;  TreeUtils.h;  TSelector.h;  TSelectorCint.h;  TSelectorList.h;  TSelectorScalar.h;  TTree.h;  TTreeCache.h;  TTreeCacheUnzip.h;  TTreeCloner.h;  TTreeResult.h;  TTreeRow.h;  TTreeSQL.h;  TVirtualIndex.h;  TVirtualTreePlayer.h;  ► src;  TBasket.cxx;  TBasketSQL.cxx;  TBranch.cxx;  TBranchBrowsable.cxx;  TBranchClones.cxx;  TBranchElem,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:96193,variab,variables,96193,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['variab'],['variables']
Modifiability,"i2FitTo(RooDataHist &data, const RooLinkedList &cmdList); 4160{; 4161 return RooFit::makeOwningPtr(RooFit::FitHelpers::fitTo(*this, data, cmdList, true));; 4162}; 4163 ; 4164 ; 4165 ; 4166 ; 4167////////////////////////////////////////////////////////////////////////////////; 4168/// Create a \f$ \chi^2 \f$ variable from a histogram and this function.; 4169///; 4170/// \param arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8 ordered arguments; 4171///; 4172/// The list of supported command arguments is given in the documentation for; 4173/// RooChi2Var::RooChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&).; 4174///; 4175/// \param data Histogram with data; 4176/// \return \f$ \chi^2 \f$ variable; 4177 ; 4178RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataHist &data, const RooCmdArg &arg1, const RooCmdArg &arg2,; 4179 const RooCmdArg &arg3, const RooCmdArg &arg4,; 4180 const RooCmdArg &arg5, const RooCmdArg &arg6,; 4181 const RooCmdArg &arg7, const RooCmdArg &arg8); 4182{; 4183 RooLinkedList l;; 4184 l.Add((TObject *)&arg1);; 4185 l.Add((TObject *)&arg2);; 4186 l.Add((TObject *)&arg3);; 4187 l.Add((TObject *)&arg4);; 4188 l.Add((TObject *)&arg5);; 4189 l.Add((TObject *)&arg6);; 4190 l.Add((TObject *)&arg7);; 4191 l.Add((TObject *)&arg8);; 4192 return createChi2(data, l);; 4193}; 4194 ; 4195////////////////////////////////////////////////////////////////////////////////; 4196/// \see RooAbsReal::createChi2(RooDataHist&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4197/// \param data hist data; 4198/// \param cmdList List with RooCmdArg() from the table; 4199 ; 4200RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); 4201{; 4202 return RooFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:183348,variab,variable,183348,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['variab'],['variable']
Modifiability,"iGenFunction & func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction & func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int , double ); set the value of an existing variable. { return false; }. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. bool ProvidesError() const; minimizer provides error and error matrix. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minimizer.html:5496,variab,variables,5496,root/html526/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minimizer.html,1,['variab'],['variables']
Modifiability,"iGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(un",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html:7410,variab,variable,7410,root/html534/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html,3,['variab'],['variable']
Modifiability,"i] != 0) delete [] fCutMin[i];; 1332 if (fCutMax[i] != 0) delete [] fCutMax[i];; 1333 }; 1334 if (fCutMin != 0) delete [] fCutMin;; 1335 if (fCutMax != 0) delete [] fCutMax;; 1336 ; 1337 Int_t tmpEffMethod, tmpFitMethod;; 1338 gTools().ReadAttr( wghtnode, ""OptimisationMethod"", tmpEffMethod );; 1339 gTools().ReadAttr( wghtnode, ""FitMethod"", tmpFitMethod );; 1340 gTools().ReadAttr( wghtnode, ""nbins"", fNbins );; 1341 ; 1342 fEffMethod = (EEffMethod)tmpEffMethod;; 1343 fFitMethod = (EFitMethodType)tmpFitMethod;; 1344 ; 1345 // print some information; 1346 if (fFitMethod == kUseMonteCarlo) {; 1347 Log() << kINFO << ""Read cuts optimised using sample of MC events"" << Endl;; 1348 }; 1349 else if (fFitMethod == kUseMonteCarloEvents) {; 1350 Log() << kINFO << ""Read cuts optimised using sample of MC-Event events"" << Endl;; 1351 }; 1352 else if (fFitMethod == kUseGeneticAlgorithm) {; 1353 Log() << kINFO << ""Read cuts optimised using Genetic Algorithm"" << Endl;; 1354 }; 1355 else if (fFitMethod == kUseSimulatedAnnealing) {; 1356 Log() << kINFO << ""Read cuts optimised using Simulated Annealing algorithm"" << Endl;; 1357 }; 1358 else if (fFitMethod == kUseEventScan) {; 1359 Log() << kINFO << ""Read cuts optimised using Full Event Scan"" << Endl;; 1360 }; 1361 else {; 1362 Log() << kWARNING << ""unknown method: "" << fFitMethod << Endl;; 1363 }; 1364 Log() << kINFO << ""Reading "" << fNbins << "" signal efficiency bins for "" << GetNvar() << "" variables"" << Endl;; 1365 ; 1366 delete fEffBvsSLocal;; 1367 fEffBvsSLocal = new TH1F( GetTestvarName() + ""_effBvsSLocal"",; 1368 TString(GetName()) + "" efficiency of B vs S"", fNbins, 0.0, 1.0 );; 1369 fEffBvsSLocal->SetDirectory(nullptr); // it's local; 1370 for (Int_t ibin=1; ibin<=fNbins; ibin++) fEffBvsSLocal->SetBinContent( ibin, -0.1 ); // Init; 1371 ; 1372 fCutMin = new Double_t*[GetNvar()];; 1373 fCutMax = new Double_t*[GetNvar()];; 1374 for (UInt_t i=0;i<GetNvar();i++) {; 1375 fCutMin[i] = new Double_t[fNbins];; 1376 fCutMax[i] = new Double_t[f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:52289,variab,variables,52289,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['variab'],['variables']
Modifiability,"i] ) delete [] fCutMin[i];; 286 if (NULL != fCutMax[i] ) delete [] fCutMax[i];; 287 if (NULL != fCutRange[i]) delete fCutRange[i];; 288 }; 289 ; 290 if (NULL != fCutMin) delete [] fCutMin;; 291 if (NULL != fCutMax) delete [] fCutMax;; 292 ; 293 if (NULL != fTmpCutMin) delete [] fTmpCutMin;; 294 if (NULL != fTmpCutMax) delete [] fTmpCutMax;; 295 ; 296 if (NULL != fBinaryTreeS) delete fBinaryTreeS;; 297 if (NULL != fBinaryTreeB) delete fBinaryTreeB;; 298}; 299 ; 300////////////////////////////////////////////////////////////////////////////////; 301/// define the options (their key words) that can be set in the option string.; 302///; 303/// know options:; 304/// - Method `<string>` Minimisation method. Available values are:; 305/// - MC Monte Carlo `<default>`; 306/// - GA Genetic Algorithm; 307/// - SA Simulated annealing; 308///; 309/// - EffMethod `<string>` Efficiency selection method. Available values are:; 310/// - EffSel `<default>`; 311/// - EffPDF; 312///; 313/// - VarProp `<string>` Property of variable 1 for the MC method (taking precedence over the; 314/// globale setting. The same values as for the global option are available. Variables 1..10 can be; 315/// set this way; 316///; 317/// - CutRangeMin/Max `<float>` user-defined ranges in which cuts are varied; 318 ; 319void TMVA::MethodCuts::DeclareOptions(); 320{; 321 DeclareOptionRef(fFitMethodS = ""GA"", ""FitMethod"", ""Minimisation Method (GA, SA, and MC are the primary methods to be used; the others have been introduced for testing purposes and are depreciated)"");; 322 AddPreDefVal(TString(""GA""));; 323 AddPreDefVal(TString(""SA""));; 324 AddPreDefVal(TString(""MC""));; 325 AddPreDefVal(TString(""MCEvents""));; 326 AddPreDefVal(TString(""MINUIT""));; 327 AddPreDefVal(TString(""EventScan""));; 328 ; 329 // selection type; 330 DeclareOptionRef(fEffMethodS = ""EffSel"", ""EffMethod"", ""Selection Method"");; 331 AddPreDefVal(TString(""EffSel""));; 332 AddPreDefVal(TString(""EffPDF""));; 333 ; 334 // cut ranges; 335 fCutRange.resi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:10720,variab,variable,10720,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['variab'],['variable']
Modifiability,"i];; 1556 binError += oldErrors[i];; 1557 if (fBinSumw2.fN) binSumw2 += oldBinw2[i];; 1558 }; 1559 hnew->fArray[newbins+1] = binContent;; 1560 hnew->fBinEntries[newbins+1] = binCount;; 1561 hnew->fSumw2[newbins+1] = binError;; 1562 if ( fBinSumw2.fN ) hnew->fBinSumw2[newbins+1] = binSumw2;; 1563 ; 1564 ; 1565 delete [] oldBins;; 1566 delete [] oldCount;; 1567 delete [] oldErrors;; 1568 if (oldBinw2) delete [] oldBinw2;; 1569 return hnew;; 1570}; 1571 ; 1572////////////////////////////////////////////////////////////////////////////////; 1573/// Profile histogram is resized along x axis such that x is in the axis range.; 1574/// The new axis limits are recomputed by doubling iteratively; 1575/// the current axis range until the specified value x is within the limits.; 1576/// The algorithm makes a copy of the histogram, then loops on all bins; 1577/// of the old histogram to fill the extended histogram.; 1578/// Takes into account errors (Sumw2) if any.; 1579/// The axis must be extendable before invoking this function.; 1580///; 1581/// Ex: `h->GetXaxis()->SetCanExtend(kTRUE)`; 1582 ; 1583void TProfile::ExtendAxis(Double_t x, TAxis *axis); 1584{; 1585 TProfile* hold = TProfileHelper::ExtendAxis(this, x, axis);; 1586 if ( hold ) {; 1587 fTsumwy = hold->fTsumwy;; 1588 fTsumwy2 = hold->fTsumwy2;; 1589 ; 1590 delete hold;; 1591 }; 1592}; 1593 ; 1594////////////////////////////////////////////////////////////////////////////////; 1595/// Reset contents of a Profile histogram.; 1596 ; 1597void TProfile::Reset(Option_t *option); 1598{; 1599 TH1D::Reset(option);; 1600 fBinEntries.Reset();; 1601 fBinSumw2.Reset();; 1602 TString opt = option;; 1603 opt.ToUpper();; 1604 if (opt.Contains(""ICE"") && !opt.Contains(""S"")) return;; 1605 fTsumwy = 0;; 1606 fTsumwy2 = 0;; 1607}; 1608 ; 1609////////////////////////////////////////////////////////////////////////////////; 1610/// Save primitive as a C++ statement(s) on output stream out.; 1611 ; 1612void TProfile::SavePrimitive(std::ostr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:58169,extend,extendable,58169,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['extend'],['extendable']
Modifiability,"iable 'x' in FFT 'lxg' from 100 to 930 to improve the precision of the numerical FFT. This can be done manually by setting an additional binning named 'cache'.; [#0] PROGRESS:InputArguments -- initializing physics inputs from file /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials/roofit/input_histos_rf_lagrangianmorph.root with object name(s) 'pTV'; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing dataset dh_SM_NPsq0_morph; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing dataset dh_cHq3_NPsq1_morph; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing dataset dh_cHq3_NPsq2_morph; [#1] INFO:ObjectHandling -- RooWorkspace::autoImportClass(w) importing code of class RooCFAuto000Pdf from /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/documentation/doxygen/RooCFAuto000Pdf.cxx and RooCFAuto000Pdf.h; ; RooWorkspace(w) w contents; ; variables; ---------; (Nbkg,Nsig,SM,a,binWidth_pTV,c,cHq3,f,m,mg,nNP0,nNP1,nNP2,nNP3,nNP4,pTV,s,te_c0,te_c1,te_c2,te_x^0,te_x^1,te_x^2,u,v,x,y,z); ; p.d.f.s; -------; RooGenericPdf::G[ actualVars=(x) formula=""x[0]*x[0]+1"" ] = 1; RooCFAuto000Pdf::GC[ x=x a=a ] = 1; RooChebychev::ch[ x=x coefList=(0.1,0.2,-0.3) ] = 0.8; RooAddPdf::extsummodel[ Nsig * gx + Nbkg * ch ] = 0.9/1; RooGaussian::g[ x=x mean=mg sigma=1 ] = 1; RooGaussian::gs[ x=x mean=m sigma=s ] = 1; RooGaussian::gx[ x=x mean=m sigma=1 ] = 1; RooProdPdf::gxycond[ gx * gy|x ] = 1; RooProdPdf::gxz[ gx * gz ] = 1; RooGaussian::gy[ x=y mean=x sigma=1 ] = 1; RooGaussian::gz[ x=z mean=0 sigma=1 ] = 1; RooLandau::lc[ x=x mean=0 sigma=1 ] = 0.178854; RooLandau::ls[ x=x mean=0 sigma=1 ] = 0.178854; RooFFTConvPdf::lxg[ g(x) (*) lc(x) ] = 375639; RooSimultaneous::smodel[ indexCat=c A=gs B=ls ] = 1; RooAddPdf::summodel[ f * gx + [%] * ch ] = 0.9/1; ; functions; --------; RooLagrangianMorphFunc::morph[ physics=(phys_SM_NPsq0_morph,phys_cHq3_NPsq1_morph,phys_cHq3_NPsq2_morph) operators=(cHq3,SM) ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf512__wsfactory__oper_8C.html:5042,variab,variables,5042,doc/master/rf512__wsfactory__oper_8C.html,https://root.cern,https://root.cern/doc/master/rf512__wsfactory__oper_8C.html,2,['variab'],['variables']
Modifiability,"iable names; Float_tfVolFracvolume fraction (with respect to total phase space; Double_t*fXmax[fDim] maximum for variable transform; Double_t*fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoam(); Default constructor for streamer, user should not use it. PDEFoam(const TString& ); User constructor, to be employed by the user. ~PDEFoam(); Default destructor. PDEFoam(const TMVA::PDEFoam& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void SetDim(Int_t kDim); Sets dimension of cubical space. void SetXmin(Int_t idim, Double_t wmin); set lower foam bound in dimension idim. void SetXmax(Int_t idim, Double_t wmax); set upper foam bound in dimension idim. void Create(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. After the foam is grown, space for 2 variables is reserved in; every cell. They are used for filling the foam cells. void InitCells(); Internal subprogram used by Create.; It initializes ""root part"" of the FOAM of the tree of cells. Int_t CellFill(Int_t , TMVA::PDEFoamCell* ); Internal subprogram used by Create.; It initializes content of the newly allocated active cell. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create.; It explores newly defined cell with help of special short MC sampling.; As a result, estimates of kTRUE and drive volume is defined/determined; Average and dispersion of the weight distribution will is found along; each edge and the best edge (minimum dispersion, best maximum weight); is memorized for future use.; The optimal division point for eventual future cell division is; determined/recorded. Recorded are also minimum and maximum weight etc.; The volume estimate in all (inactive) parent cells is updated.; Note that links to parents and initial volume = 1/2 parent has to be; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:12346,variab,variables,12346,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['variab'],['variables']
Modifiability,"iable of a parallel coordinates plot.; TParameter<Long64_t> Named templated parameter type; TParameter<bool> Named templated parameter type; TParameter<double> Named templated parameter type; TParameter<float> Named templated parameter type; TParameter<int> Named templated parameter type; TParameter<long> Named templated parameter type; TParticle TParticle vertex particle information; TParticleClassPDG PDG static particle definition; TParticlePDG PDG static particle definition; TPave Pave. A box with shadowing; TPaveClass A TPaveLabel specialized for TClassTree objects; TPaveLabel PaveLabel. A Pave with a label; TPaveStats A special TPaveText to draw histogram statistics.; TPaveStatsEditor GUI for editing TPaveStats; TPaveText PaveText. A Pave with several lines of text.; TPavesText Stacked Paves with text strings; TPerfEvent Class holding TProof Event Info; TPerfStats Class for collecting PROOF statistics; TPie Pie chart graphics class; TPieEditor piechart editor; TPieSlice Slice of a pie chart graphics class; TPieSliceEditor piechart' slice editor; TPluginHandler Handler for plugin libraries; TPluginManager Manager for plugin handlers; TPoint ; TPointSet3D TPolyMarker3D with direct OpenGL rendering.; TPointSet3DGL GL renderer for TPointSet3D; TPoints 2-D graphics point; TPoints3D Defines the abstract array of 3D points; TPoints3DABC A 3-D Points; TPointsArray3D A 3-D PolyLine; TPolyLine A PolyLine; TPolyLine3D A 3-D polyline; TPolyLineShape The base class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Proce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:114397,plugin,plugin,114397,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,['plugin'],['plugin']
Modifiability,"iable parameters are free and unbound.; The user, in their \(\mbox{FCN}\), must of course be able to “see” all types of defined parameters, and they therefore have access to what we call the external parameter list, that is, the parameters as he defined them. On the other hand, the internal M minimizing routines only want to “see” variable parameters without limits, and so they have access only to the internal parameter list which is created from the external list by the following transformation:. Squeeze out all parameters that are not variable.; Transform all variable parameters with limits, so that the transformed parameter can vary without limits. (See the next section for details concerning this transformation.) Because this transformation is non-linear, it is recommended to avoid putting limits on parameters where they are not needed. As an example, suppose that the user has defined the following parameters:. Parameter 0, constant.; Parameter 1, freely variable.; Parameter 2, variable with limits.; Parameter 3, constant.; Parameter 4, freely variable. Then the internal parameter list would be as follows:. Internal parameter 0 = external parameter 1.; Internal parameter 1 = external parameter 2, transformed appropriately.; Internal parameter 2 = external parameter 4. In the above example, M considers that the number of external parameters is 5, and the number of internal parameters is 3. This is the number which determines, for example, the size of the error matrix of the parameters, since only variable parameters have errors.; An important feature of M is that parameters are allowed to change types during the M minimization and analysis of a \(\mbox{FCN}\) function. Several applications in M have methods available to make variable parameters fixed and vice-versa; to impose, change, or remove limits from variable parameters; and even to define completely new parameters at any time during a run. In addition, some M applications (notably the \(\mbox{MINOS}\) erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:8170,variab,variable,8170,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['variab'],['variable']
Modifiability,"iable. ; Definition at line 199 of file TParallelCoord.cxx. ◆ ApplySelectionToTree(). void TParallelCoord::ApplySelectionToTree ; (; ). Apply the current selection to the tree. ; Definition at line 252 of file TParallelCoord.cxx. ◆ BuildParallelCoord(). void TParallelCoord::BuildParallelCoord ; (; TSelectorDraw * ; selector, . bool ; candle . ). static . Call constructor and add the variables. ; Definition at line 288 of file TParallelCoord.cxx. ◆ Class(). static TClass * TParallelCoord::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TParallelCoord::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TParallelCoord::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 136 of file TParallelCoord.h. ◆ CleanUpSelections(). void TParallelCoord::CleanUpSelections ; (; TParallelCoordRange * ; range). Clean up the selections from the ranges which could have been deleted when a variable has been deleted. ; Definition at line 313 of file TParallelCoord.cxx. ◆ DeclFileName(). static const char * TParallelCoord::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 136 of file TParallelCoord.h. ◆ DeleteSelection(). void TParallelCoord::DeleteSelection ; (; TParallelCoordSelect * ; sel). Delete a selection. ; Definition at line 325 of file TParallelCoord.cxx. ◆ DistancetoPrimitive(). Int_t TParallelCoord::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute the distance from the TParallelCoord. ; Reimplemented from TObject.; Definition at line 336 of file TParallelCoord.cxx. ◆ Draw(). void TParallelCoord::Draw ; (; Option_t * ; options = """"). overridevirtual . Draw the parallel coordinates graph. ; Reimplemented from TObject.; Definition at line 359 of file TParallelCoord.cxx. ◆ ExecuteEvent(). void TParallelCoord::ExecuteEvent ; (; Int_t ; entry, . I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:25769,variab,variable,25769,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['variab'],['variable']
Modifiability,"iable. ;  ; bool hasBinning (const char *name) const override;  Return true if we have binning with given name. ;  ; TClass * IsA () const override;  ; bool isFundamental () const override;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual RooAbsArg & operator= (double newValue);  Assignment operator from a double. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from given stream. ;  ; void removeMax (const char *name=nullptr);  Remove upper bound from named binning, or default binning if name is null. ;  ; void removeMin (const char *name=nullptr);  Remove lower bound from named binning, or default binning if name is null. ;  ; void removeRange (const char *name=nullptr);  Remove both upper and lower bounds from named binning, or default binning if name is null. ;  ; void setBinning (const RooAbsBinning &binning, const char *name=nullptr);  Store given binning with this variable under the given name. ;  ; void setBins (Int_t nBins);  Set default binning to nBins uniform bins. ;  ; void setMax (const char *name, double value);  Set the upper bound of the range with the given name to the given value If name is a null pointer, set the upper bound of the default range. ;  ; void setMax (double value);  Set upper bound of default range to value. ;  ; void setMin (const char *name, double value);  Set the lower bound of the range with the given name to the given value If name is a null pointer, set the lower bound of the default range. ;  ; void setMin (double value);  Set lower bound of default range to value. ;  ; void setRange (const char *name, double min, double max);  Set the upper and lower lower bound of the range with the given name to the given values If name is a null pointer, set the upper and lower bounds of the default range. ;  ; void setRange (double min, double max);  Set default ranges to [min,max]. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:2704,variab,variable,2704,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,1,['variab'],['variable']
Modifiability,"iable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Tho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:22721,config,config,22721,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['config'],['config']
Modifiability,"iable. If the first variable does not have a type, it is; assumed of type F by default. The list of currently supported; types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer (Int_t); - i : a 32 bit unsigned integer (UInt_t); - F : a 32 bit floating point (Float_t); - D : a 64 bit floating point (Double_t); - L : a 64 bit signed integer (Long64_t); - l : a 64 bit unsigned integer (ULong64_t); - O : [the letter 'o', not a zero] a boolean (Bool_t); * If the address points to a single numerical variable, the leaflist is optional:; int value;; tree->Branch(branchname, &value);; * If the address points to more than one numerical variable, we strongly recommend; that the variable be sorted in decreasing order of size. Any other order will; result in a non-portable (even between CINT and compiled code on the platform); TTree (i.e. you will not be able to read it back on a platform with a different; padding strategy). ==> Case B. TBranch *branch = tree->Branch(branchname, &p_object, bufsize, splitlevel); TBranch *branch = tree->Branch(branchname, className, &p_object, bufsize, splitlevel); * p_object is a pointer to an object.; * If className is not specified, Branch uses the type of p_object to determine the; type of the object.; * If className is used to specify explicitly the object type, the className must; be of a type related to the one pointed to by the pointer. It should be either; a parent or derived class.; * if splitlevel=0, the object is serialized in the branch buffer.; * if splitlevel=1, this branch will automatically be split; into subbranches, with one subbranch for each data member or object; of the object itself. In case the object member is a TClonesArray,; the mechanism described in case C is applied to this array.; * if splitlevel=2 ,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:3305,portab,portable,3305,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,4,['portab'],['portable']
Modifiability,"iable. TH3F * createHistogram(const char* name, const RooAbsRealLValue& yvar, const RooAbsRealLValue& zvar, const char* tAxisLabel, Double_t* xlo = 0, Double_t* xhi = 0, Int_t* nBins = 0) const; Create an empty 3D-histogram with appropriate scale and labels for this variable (x); and the specified y,z variables. This method uses the default plot ranges for x,y,z which; can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which; can be changed with setPlotBins(). The caller takes ownership of the returned object; and is responsible for deleting it. TH3F * createHistogram(const char* name, const RooAbsRealLValue& yvar, const RooAbsRealLValue& zvar, const char* tAxisLabel, const RooAbsBinning** bins) const; Create an empty 3D-histogram with appropriate scale and labels for this variable (x); and the specified y,z variables. TH1 * createHistogram(const char* name, RooArgList& vars, const char* tAxisLabel, Double_t* xlo, Double_t* xhi, Int_t* nBins); Create 1-, 2- or 3-d ROOT histogram with labels taken; from the variables in 'vars' and the with range and binning; specified in xlo,xhi and nBins. The dimensions of the arrays xlo,xhi,; nBins should match the number of objects in vars. TH1 * createHistogram(const char* name, RooArgList& vars, const char* tAxisLabel, const RooAbsBinning** bins); Create a 1,2, or 3D-histogram with appropriate scale and labels.; Binning and ranges are taken from the variables themselves and can be changed by; calling their setPlotMin/Max() and setPlotBins() methods. A histogram can be filled; using RooAbsReal::fillHistogram() or RooTreeData::fillHistogram().; The caller takes ownership of the returned object and is responsible for deleting it. Bool_t isJacobianOK(const RooArgSet& depList) const; Interface function to indicate that this lvalue; has a unit or constant jacobian terms with respect to; the observable passed as argument. This default implementation; always returns true (i.e. jacobian is constant). inlin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsRealLValue.html:50993,variab,variables,50993,root/html602/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html602/RooAbsRealLValue.html,2,['variab'],['variables']
Modifiability,"iable. TH3F * createHistogram(const char* name, const RooAbsRealLValue& yvar, const RooAbsRealLValue& zvar, const char* tAxisLabel, Double_t* xlo = 0, Double_t* xhi = 0, Int_t* nBins = 0) const; Create an empty 3D-histogram with appropriate scale and labels for this variable (x); and the specified y,z variables. This method uses the default plot ranges for x,y,z which; can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which; can be changed with setPlotBins(). The caller takes ownership of the returned object; and is responsible for deleting it. TH3F * createHistogram(const char* name, const RooAbsRealLValue& yvar, const RooAbsRealLValue& zvar, const char* tAxisLabel, const RooAbsBinning** bins) const; Create an empty 3D-histogram with appropriate scale and labels for this variable (x); and the specified y,z variables. TH1 * createHistogram(const char* name, RooArgList& vars, const char* tAxisLabel, Double_t* xlo, Double_t* xhi, Int_t* nBins); Create 1-, 2- or 3-d ROOT histogram with labels taken; from the variables in 'vars' and the with range and binning; specified in xlo,xhi and nBins. The dimensions of the arrays xlo,xhi,; nBins should match the number of objects in vars. TH1 * createHistogram(const char* name, RooArgList& vars, const char* tAxisLabel, const RooAbsBinning** bins); Create a 1,2, or 3D-histogram with appropriate scale and labels.; Binning and ranges are taken from the variables themselves and can be changed by; calling their setPlotMin/Max() and setPlotBins() methods. A histogram can be filled; using RooAbsReal::fillHistogram() or RooTreeData::fillHistogram().; The caller takes ownership of the returned object and is responsible for deleting it. Bool_t isJacobianOK(const RooArgSet& depList) const; Interface function to indicate that this lvalue; has a unit or constant jacobian terms with respect to; the observable passed as argument. This default implementation; always returns true (i.e. jacobian is constant). void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsRealLValue.html:45929,variab,variables,45929,root/html528/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html528/RooAbsRealLValue.html,4,['variab'],['variables']
Modifiability,"iableTypesAreCountedtrue if variable types have been counted already; vector<TMVA::VariableInfo>fVariablesevent variables [saved to weight file]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~VariableTransformBase(). void SelectInput(const TString& inputVariables, Bool_t putIntoVariables = kFALSE); select the variables/targets/spectators which serve as input to the transformation. Bool_t GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; select the values from the event. void SetOutput(TMVA::Event* event, vector<Float_t>& output, vector<Char_t>& mask, const TMVA::Event* oldEvent = 0, Bool_t backTransform = kFALSE) const; select the values from the event. void CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; count variables, targets and spectators. void CalcNorm(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); TODO --> adapt to variable,target,spectator selection; method to calculate minimum, maximum, mean, and RMS for all; variables used in the MVA. std::vector<TString>* GetTransformationStrings(Int_t cls) const; TODO --> adapt to variable,target,spectator selection; default transformation output; --> only indicate that transformation occurred. void UpdateNorm(Int_t ivar, Double_t x); TODO --> adapt to variable,target,spectator selection; update min and max of a given variable (target) and a given transformation method. void AttachXMLTo(void* parent); create XML description the transformation (write out info of selected variables). void ReadFromXML(void* trfnode); Read the input variables from the XML node. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); getinput and setoutput equivalent. void Initialize(). Bool_t PrepareTransformation(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ). const Event* Transform(const TMVA::Event *const , Int_t cls) const. const Event* Inver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableTransformBase.html:9669,adapt,adapt,9669,root/html530/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableTransformBase.html,6,"['adapt', 'variab']","['adapt', 'variable', 'variables']"
Modifiability,"iables before performing again the maximum Likelihood fit: this removed variable is a control variable. The expected distribution of this control variable, for signal, is to be compared to the one extracted, for signal, from the data sample. In order to be able to do so, one must be able to unfold from the distribution of the whole data sample.; The TSPlot method allows to reconstruct the distributions for the control variable, independently for each of the various sources of events, without making use of any a priori knowledge on this variable. The aim is thus to use the knowledge available for the discriminating variables to infer the behaviour of the individual sources of events with respect to the control variable.; TSPlot is optimal if the control variable is uncorrelated with the discriminating variables.; A detail description of the formalism itself, called \(\hbox{$_s$}{\cal P}lot\), is given in [1]. The method; The \(\hbox{$_s$}{\cal P}lot\) technique is developed in the above context of a maximum Likelihood method making use of discriminating variables.; One considers a data sample in which are merged several species of events. These species represent various signal components and background components which all together account for the data sample. The different terms of the log-Likelihood are:. \(N\) : the total number of events in the data sample,; \({\rm N}_{\rm s}\) : the number of species of events populating the data sample,; \(N_i\) : the number of events expected on the average for the \(i^{\rm th}\) species,; \({\rm f}_i(y_e)\) : the value of the PDFs of the discriminating variables \(y\) for the \(i^{th}\) species and for event \(e\),; \(x\) : the set of control variables which, by definition, do not appear in the expression of the Likelihood function \({\cal L}\). The extended log-Likelihood reads:. \[; {\cal L}=\sum_{e=1}^{N}\ln \Big\{ \sum_{i=1}^{{\rm N}_{\rm s}}N_i{\rm f}_i(y_e) \Big\} -\sum_{i=1}^{{\rm N}_{\rm s}}N_i \tag{1}; \]. From this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPlot.html:2224,variab,variables,2224,doc/master/classTSPlot.html,https://root.cern,https://root.cern/doc/master/classTSPlot.html,1,['variab'],['variables']
Modifiability,"iables"" << Endl;; 1744 Log() << ""can be described by a single cut (e.g., because signal tends to be"" << Endl;; 1745 Log() << ""larger than background), this can be indicated to MethodCuts via"" << Endl;; 1746 Log() << ""the \""Fsmart\"" options (see option string). Choosing this option"" << Endl;; 1747 Log() << ""reduces the number of requirements for the variable from 2 (min/max)"" << Endl;; 1748 Log() << ""to a single one (TMVA finds out whether it is to be interpreted as"" << Endl;; 1749 Log() << ""min or max)."" << Endl;; 1750 Log() << Endl;; 1751 Log() << gTools().Color(""bold"") << ""--- Performance tuning via configuration options:"" << gTools().Color(""reset"") << Endl;; 1752 Log() << """" << Endl;; 1753 Log() << bold << ""Monte Carlo sampling:"" << resbold << Endl;; 1754 Log() << """" << Endl;; 1755 Log() << ""Apart form the \""Fsmart\"" option for the variables, the only way"" << Endl;; 1756 Log() << ""to improve the MC sampling is to increase the sampling rate. This"" << Endl;; 1757 Log() << ""is done via the configuration option \""MC_NRandCuts\"". The execution"" << Endl;; 1758 Log() << ""time scales linearly with the sampling rate."" << Endl;; 1759 Log() << """" << Endl;; 1760 Log() << bold << ""Genetic Algorithm:"" << resbold << Endl;; 1761 Log() << """" << Endl;; 1762 Log() << ""The algorithm terminates if no significant fitness increase has"" << Endl;; 1763 Log() << ""been achieved within the last \""nsteps\"" steps of the calculation."" << Endl;; 1764 Log() << ""Wiggles in the ROC curve or constant background rejection of 1"" << Endl;; 1765 Log() << ""indicate that the GA failed to always converge at the true maximum"" << Endl;; 1766 Log() << ""fitness. In such a case, it is recommended to broaden the search "" << Endl;; 1767 Log() << ""by increasing the population size (\""popSize\"") and to give the GA "" << Endl;; 1768 Log() << ""more time to find improvements by increasing the number of steps"" << Endl;; 1769 Log() << ""(\""nsteps\"")"" << Endl;; 1770 Log() << "" -> increase \""popSize\"" (at least >10 * numbe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:69372,config,configuration,69372,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['config'],['configuration']
Modifiability,"iables); TGlobalFunc (global functions); TClass (classes); TBaseClass (base classes); TDataMember (class datamembers); TMethod (class methods); TMethodArg (method arguments); TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TDataMemberAll ROOT classes may have RTTI (run time type identification) support added.Definition TDataMember.h:31; TDataTypeBasic data type descriptor (datatype information is obtained from CINT).Definition TDataType.h:44; TGlobalGlobal variables class (global variables are obtained from CINT).Definition TGlobal.h:28; TMethodArgEach ROOT method (see TMethod) has a linked list of its arguments.Definition TMethodArg.h:36; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; All the above classes implement the TDictionary abstract interface. Note: the indentation shows aggregation not inheritance. TMethodCall (method call environment); TMethodCallMethod or function calling interface.Definition TMethodCall.h:37; . Definition at line 168 of file TDictionary.h. Public Types; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDictionary.html:1572,inherit,inheritance,1572,doc/master/classTDictionary.html,https://root.cern,https://root.cern/doc/master/classTDictionary.html,1,['inherit'],['inheritance']
Modifiability,"iagonalOfQ (TVectorD &dQ) override;  Return in vector dq the diagonal of matrix fQ (Quadratic part of Objective function) ;  ; Double_t ObjectiveValue (TQpVar *vars) override;  Return value of the objective function. ;  ; TQpDataDens & operator= (const TQpDataDens &source);  Assignment operator. ;  ; void Print (Option_t *opt="""") const override;  Print all class members. ;  ; void PutAIntoAt (TMatrixDBase &M, Int_t row, Int_t col) override;  Insert the constraint matrix A into the matrix M at index (row,col) for the fundamental linear system. ;  ; void PutCIntoAt (TMatrixDBase &M, Int_t row, Int_t col) override;  Insert the constraint matrix C into the matrix M at index (row,col) for the fundamental linear system. ;  ; void PutQIntoAt (TMatrixDBase &M, Int_t row, Int_t col) override;  Insert the Hessian Q into the matrix M at index (row,col) for the fundamental linear system. ;  ; void Qmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x) override;  calculate y = beta*y + alpha*(fQ*x) ;  ;  Public Member Functions inherited from TQpDataBase;  TQpDataBase ();  Default constructor. ;  ;  TQpDataBase (const TQpDataBase &another);  Copy constructor. ;  ;  TQpDataBase (Int_t nx, Int_t my, Int_t mz);  Constructor. ;  ;  ~TQpDataBase () override;  ; virtual TVectorD & GetBa ();  ; virtual TVectorD & GetG ();  ; virtual TVectorD & GetiSlowerBound ();  ; virtual TVectorD & GetiSupperBound ();  ; virtual TVectorD & GetiXlowerBound ();  ; virtual TVectorD & GetiXupperBound ();  ; virtual TVectorD & GetSlowerBound ();  ; virtual TVectorD & GetSupperBound ();  ; virtual TVectorD & GetXlowerBound ();  ; virtual TVectorD & GetXupperBound ();  ; TQpDataBase & operator= (const TQpDataBase &source);  Assignment operator. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataDens.html:2564,inherit,inherited,2564,doc/master/classTQpDataDens.html,https://root.cern,https://root.cern/doc/master/classTQpDataDens.html,1,['inherit'],['inherited']
Modifiability,"ial vector A, as well as the radial and z components of the B field.; One wants to fit those distributions with a function in order to plug them into the Geant simulation code. Polynomial fits could be tried, but it seems difficult to reach the desired precision over the full range. One could also use a spline interpolation between known points. In all cases, the resulting field would not be C-infinite.; An example of output (for Br) is shown. First the initial function can be seen as the target. Then, the resulting (normalized) neural net output. In order to ease the learning, the “normalize output” was used here. The initial amplitude can be recovered by multiplying by the original RMS and then shifting by the original mean. The original and the neural net for Br. 6 A Little C++. This chapter introduces you to some useful insights into C++, to allow you to use some of the most advanced features in ROOT. It is in no case a full course in C++.; 6.1 Classes, Methods and Constructors; C++ extends C with the notion of a class. If you’re used to structures in C, a class is a struct that is a group of related variables, which is extended with functions and routines specific to this structure (class). What is the interest? Consider a struct that is defined this way:; struct Line {; float x1;; float y1;; float x2;; float y2;; }; This structure represents a line to be drawn in a graphical window. (x1,y1) are the coordinates of the first point, (x2,y2) the coordinates of the second point. In the standard C, if you want to draw effectively such a line, you first have to define a structure and initialize the points (you can try this):; Line firstline;; firstline.x1 = 0.2;; firstline.y1 = 0.2;; firstline.x2 = 0.8;; firstline.y2 = 0.9;; This defines a line going from the point (0.2,0.2) to the point (0.8,0.9). To draw this line, you will have to write a function, say LineDraw(Line l) and call it with your object as argument:; LineDraw(firstline);; In C++, we would not do that. W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:241822,extend,extends,241822,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['extend'],['extends']
Modifiability,"ial.h:159; Elements have to be further defined one by one:; void TGeoMixture::DefineElement(Int_t iel,Double_t a,Double_t z,; Double_t weigth);; void TGeoMixture::DefineElement(Int_t iel, TGeoElement *elem,; Double_t weight);; void TGeoMixture::DefineElement(Int_t iel, Int_t z, Int_t natoms);; TGeoMixture::DefineElementvoid DefineElement(Int_t iel, Double_t a, Double_t z, Double_t weight)Definition TGeoMaterial.h:226; or:; void AddElement(TGeoMaterial* mat, Double_t weight);; void AddElement(TGeoElement* elem, Double_t weight);; void AddElement(TGeoElement* elem, Int_t natoms);; void AddElement(Double_t a, Double_t z, Double_t weight). iel: index of the element[0,nel-1]; a and z: the atomic mass and charge; weight: proportion by mass of the elements; natoms: number of atoms of the element in the molecule making the mixture. The radiation length is automatically computed when all elements are defined. Since tracking MC provide several other ways to create materials/mixtures, the materials classes are likely to evolve as the interfaces to these engines are being developed. Generally in the process of tracking material properties are not enough and more specific media properties have to be defined. These highly depend on the MC performing tracking and sometimes allow the definition of different media properties (e.g. energy or range cuts) for the same material. Radionuclides; A new class TGeoElementRN was introduced in this version to provide support for radioactive nuclides and their decays. A database of 3162 radionuclides can be loaded on demand via the table of elements (TGeoElementTable class). One can make then materials/mixtures based on these radionuclides and use them in a geometry; root[] TGeoManager *geom = new TGeoManager(""geom"",""radionuclides"");; root[] TGeoElementTable *table = geom->GetElementTable();; root[] TGeoElementRN *c14 = table->GetElementRN(14,6); // A,Z; root[] c14->Print();; 6-C-014 ENDF=60140; A=14; Z=6; Iso=0; Level=0[MeV]; Dmass=3.0199[MeV]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Materials__classes.html:5811,evolve,evolve,5811,doc/master/group__Materials__classes.html,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html,1,['evolve'],['evolve']
Modifiability,"ialGradient (const Point &center, Double_t radius);  Set radial gradient. ;  ; void SetStartEndR1R2 (const Point &p1, Double_t r1, const Point &p2, Double_t r2);  Set start and end R1 and R2. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  Public Member Functions inherited from TColorGradient;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ; Double_t GetColorAlpha (UInt_t indx) const;  Return alpha parameter of selected color. ;  ; const Double_t * GetColorPositions () const;  Get color positions. ;  ; const Double_t * GetColors () const;  Get colors. ;  ; ECoordinateMode GetCoordinateMode () const;  Get coordinate mode. ;  ; SizeType_t GetNumberOfSteps () const;  Get number of steps. ;  ; void ResetColor (UInt_t nPoints, const Double_t *points, const Color_t *colorIndices);  Reset color. ;  ; void ResetColor (UInt_t nPoints, const Double_t *points, const Double_t *colorIndices);  Reset color. ;  ; void SetColorAlpha (UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRadialGradient.html:2509,inherit,inherited,2509,doc/master/classTRadialGradient.html,https://root.cern,https://root.cern/doc/master/classTRadialGradient.html,1,['inherit'],['inherited']
Modifiability,"ialisation called by all constructors. ~MethodCFMlpANN( void ); destructor. void Train( void ); training of the Clement-Ferrand NN classifier. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns CFMlpANN output (normalised within [0,1]). Double_t EvalANN(vector<Double_t>& , Bool_t& isOK); evaluates NN value as function of input variables. void NN_ava(Double_t* ); auxiliary functions. Double_t NN_fonc(Int_t , Double_t ) const; activation function. void ReadWeightsFromStream(istream& istr); read back the weight from the training from file (stream). Int_t DataInterface(Double_t* , Double_t* , Int_t* , Int_t* , Int_t* , Int_t* , Double_t* , Int_t* , Int_t* ); data interface function. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); read weights from xml file. void PrintWeights(ostream& o) const; write the weights of the neural net. TMVA::MethodCFMlpANN* This( void ); static pointer to this object (required for external functions. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void MakeClassSpecificHeader(ostream& , const TString& = """") const; write specific classifier response for header. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". Double_t GetData(Int_t isel, Int_t ivar) const; data accessors for external functions. { return (*fData)(isel, ivar); }. Int_t GetClass(Int_t ivar) const; { return (*fClass)[ivar]; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodCFMlpANN.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 2010-12-08 16:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html:23914,variab,variables,23914,root/html528/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html,1,['variab'],['variables']
Modifiability,"ialize it with values of array. ;  ; virtual ~TArrayI ();  Delete TArrayI object. ;  ; void AddAt (Int_t c, Int_t i);  Add Int_t c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Int_t *array);  Adopt array arr into TArrayI, i.e. ;  ; Int_t At (Int_t i) const;  ; void Copy (TArrayI &array) const;  ; Int_t * GetArray ();  ; const Int_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TArrayI & operator= (const TArrayI &rhs);  TArrayI assignment operator. ;  ; Int_t & operator[] (Int_t i);  ; Int_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Int_t val);  ; void Set (Int_t n) override;  Set size of this array to n ints. ;  ; void Set (Int_t n, const Int_t *array);  Set size of this array to n ints and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the defaul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1I.html:37630,inherit,inherited,37630,doc/master/classTH1I.html,https://root.cern,https://root.cern/doc/master/classTH1I.html,1,['inherit'],['inherited']
Modifiability,"ialize it with values of array. ;  ; virtual ~TArrayI ();  Delete TArrayI object. ;  ; void AddAt (Int_t c, Int_t i);  Add Int_t c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Int_t *array);  Adopt array arr into TArrayI, i.e. ;  ; Int_t At (Int_t i) const;  ; void Copy (TArrayI &array) const;  ; Int_t * GetArray ();  ; const Int_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TArrayI & operator= (const TArrayI &rhs);  TArrayI assignment operator. ;  ; Int_t & operator[] (Int_t i);  ; Int_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Int_t val);  ; void Set (Int_t n) override;  Set size of this array to n ints. ;  ; void Set (Int_t n, const Int_t *array);  Set size of this array to n ints and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2I.html:43476,inherit,inherited,43476,doc/master/classTH2I.html,https://root.cern,https://root.cern/doc/master/classTH2I.html,1,['inherit'],['inherited']
Modifiability,"ialize it with values of array. ;  ; virtual ~TArrayI ();  Delete TArrayI object. ;  ; void AddAt (Int_t c, Int_t i);  Add Int_t c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Int_t *array);  Adopt array arr into TArrayI, i.e. ;  ; Int_t At (Int_t i) const;  ; void Copy (TArrayI &array) const;  ; Int_t * GetArray ();  ; const Int_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TArrayI & operator= (const TArrayI &rhs);  TArrayI assignment operator. ;  ; Int_t & operator[] (Int_t i);  ; Int_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Int_t val);  ; void Set (Int_t n) override;  Set size of this array to n ints. ;  ; void Set (Int_t n, const Int_t *array);  Set size of this array to n ints and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH3; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3I.html:43266,inherit,inherited,43266,doc/master/classTH3I.html,https://root.cern,https://root.cern/doc/master/classTH3I.html,1,['inherit'],['inherited']
Modifiability,"ialized configuration, a null pointer is returned,; 3291/// unless createOnTheFly is true in which case a clone of the default integrator; 3292/// configuration is created, installed as specialized configuration, and returned; 3293 ; 3294RooNumIntConfig* RooAbsReal::specialIntegratorConfig(bool createOnTheFly); 3295{; 3296 if (!_specIntegratorConfig && createOnTheFly) {; 3297 _specIntegratorConfig = std::make_unique<RooNumIntConfig>(*defaultIntegratorConfig()) ;; 3298 }; 3299 return _specIntegratorConfig.get();; 3300}; 3301 ; 3302 ; 3303 ; 3304////////////////////////////////////////////////////////////////////////////////; 3305/// Return the numeric integration configuration used for this object. If; 3306/// a specialized configuration was associated with this object, that configuration; 3307/// is returned, otherwise the default configuration for all RooAbsReals is returned; 3308 ; 3309const RooNumIntConfig* RooAbsReal::getIntegratorConfig() const; 3310{; 3311 const RooNumIntConfig* config = specialIntegratorConfig() ;; 3312 if (config) return config ;; 3313 return defaultIntegratorConfig() ;; 3314}; 3315 ; 3316 ; 3317////////////////////////////////////////////////////////////////////////////////; 3318/// Return the numeric integration configuration used for this object. If; 3319/// a specialized configuration was associated with this object, that configuration; 3320/// is returned, otherwise the default configuration for all RooAbsReals is returned; 3321 ; 3322RooNumIntConfig* RooAbsReal::getIntegratorConfig(); 3323{; 3324 RooNumIntConfig* config = specialIntegratorConfig() ;; 3325 if (config) return config ;; 3326 return defaultIntegratorConfig() ;; 3327}; 3328 ; 3329 ; 3330 ; 3331////////////////////////////////////////////////////////////////////////////////; 3332/// Set the given integrator configuration as default numeric integration; 3333/// configuration for this object; 3334 ; 3335void RooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); 3336{",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:142713,config,configuration,142713,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,7,['config'],"['config', 'configuration']"
Modifiability,"ially can be used later for non-text streaming. ; Definition at line 408 of file TStreamerInfoActions.cxx. ◆ ReadStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::ReadStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 638 of file TStreamerInfoActions.cxx. ◆ ReadTextBaseClass(). Int_t TStreamerInfoActions::ReadTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 307 of file TStreamerInfoActions.cxx. ◆ ReadTextObject(). Int_t TStreamerInfoActions::ReadTextObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStreamerInfoActions::ReadTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 327 of file TStreamerInfoActions.cxx. ◆ ReadTNamed(). Int_t TStreamerInfoActions::ReadTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 950 of file TStreamerInfoActions.cxx. ◆ ReadTObject(). Int_t TStreamerInfoActions::ReadTObject ; (; TBuffer & ; buf, . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTStreamerInfoActions.html:15586,config,config,15586,doc/master/namespaceTStreamerInfoActions.html,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html,1,['config'],['config']
Modifiability,"ials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMatrixD * GetCorrelationMatrix () const;  ; Double_t GetError () const;  ; Int_t * GetFunctionCodes () const;  ; const TMatrixD * GetFunctions () const;  ; virtual TList * GetHistograms () const;  ; Double_t GetMaxAngle () const;  ; Int_t GetMaxFunctions () const;  ; Int_t * GetMaxPowers () const;  ; Double_t GetMaxQuantity () const;  ; Int_t GetMaxStudy () const;  ; Int_t GetMaxTerms () const;  ; const TVectorD * GetMaxVariables () const;  ; Double_t GetMeanQuantity",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:19805,parameteriz,parameterization,19805,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['parameteriz'],['parameterization']
Modifiability,"ials » PyRoot tutorials. Detailed Description; Tornado example. ; . ; from ROOT import TCanvas, TView, TPolyMarker3D, TPaveText; from ROOT import gROOT, gBenchmark; from math import cos, sin, pi; ; gBenchmark.Start( 'tornado' ); ; d = 16; numberOfPoints = 200; numberOfCircles = 40; ; # create and open a canvas; sky = TCanvas( 'sky', 'Tornado', 300, 10, 700, 500 ); sky.SetFillColor( 14 ); ; # creating view; view = TView.CreateView(); rng = numberOfCircles * d; view.SetRange( 0, 0, 0, 4.0*rng, 2.0*rng, rng ); ; polymarkers = []; for j in range( d, numberOfCircles * d, d ):; ; # create a PolyMarker3D; pm3d = TPolyMarker3D( numberOfPoints ); ; # set points; for i in range( 1, numberOfPoints ) :; csin = sin( 2*pi / numberOfPoints * i ) + 1; ccos = cos( 2*pi / numberOfPoints * i ) + 1; esin = sin( 2*pi / (numberOfCircles*d) * j ) + 1; x = j * ( csin + esin );; y = j * ccos;; z = j;; pm3d.SetPoint( i, x, y, z );; ; # set marker size, color & style; pm3d.SetMarkerSize( 1 ); pm3d.SetMarkerColor( 2 + ( d == ( j & d ) ) ); pm3d.SetMarkerStyle( 3 ); ; # draw; pm3d.Draw(); ; # save a reference; polymarkers.append( pm3d ); ; gBenchmark.Show( 'tornado' ); ; ct = gBenchmark.GetCpuTime( 'tornado' ); timeStr = 'Execution time: %g sec.' % ct; ; text = TPaveText( 0.1, 0.81, 0.9, 0.97 ); text.SetFillColor( 42 ); text.AddText( 'PyROOT example: tornado.py' ); text.AddText( timeStr ); text.Draw(); ; sky.Update(); TCanvasThe Canvas class.Definition TCanvas.h:23; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPolyMarker3DA 3D polymarker.Definition TPolyMarker3D.h:33; TView::CreateViewstatic TView * CreateView(Int_t system=1, const Double_t *rmin=nullptr, const Double_t *rmax=nullptr)Create a concrete default 3-d view via the plug-in manager.Definition TView.cxx:27; AuthorWim Lavrijsen ; Definition in file tornado.py. tutorialspyroottornado.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tornado_8py.html:1951,plug-in,plug-in,1951,doc/master/tornado_8py.html,https://root.cern,https://root.cern/doc/master/tornado_8py.html,1,['plug-in'],['plug-in']
Modifiability,"ianMorphFunc () override;  default destructor ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Retrieve the matrix of coefficients. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  retrieve the list of bin boundaries ;  ; RooAbsArg::CacheMode canNodeBeCached () const override;  Retrieve the matrix of coefficients. ;  ; bool checkObservables (const RooArgSet *nset) const override;  check if observable exists in the RooArgSet (-?-) ;  ; TObject * clone (const char *newname) const override;  ; void collectInputs (TDirectory *f);  retrieve the physics inputs ;  ; int countContributingFormulas () const;  count the number of formulas that correspond to the current parameter set ;  ; int countSamples (int nprod, int ndec, int nboth);  calculate the number of samples needed to morph a bivertex, 2-2 physics process ;  ; int countSamples (std::vector< RooArgList * > &vertices);  calculate the number of samples needed to morph a certain physics process ;  ; std::unique_ptr< RooWrapperPdf > createPdf () const;  (currently similar to cloning the Pdf ;  ; TH1 * createTH1 (const std::string &name);  retrieve a histogram output of the current morphing settings ;  ; TH1 * createTH1 (const std::string &name, bool correlateErrors);  retrieve a histogram output of the current morphing settings ;  ; RooArgSet createWeights (const ParamMap &inputs, const std::vector< RooArgList * > &vertices, RooArgList &couplings);  create only the weight formulas. static function for external usage. ;  ; RooArgSet createWeights (const ParamMap &inputs, const std::vector< RooArgList * > &vertices, RooArgList &couplings, const FlagMap &inputFlags, const RooArgList &flags, const std::vector< std::vector< std::string > > &nonInterfering);  create only the weight formulas. static function for external usage. ;  ; std::map< std::string, std::string > createWeightStrings (const ParamMap &inputs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:4906,coupling,couplings,4906,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['coupling'],['couplings']
Modifiability,"iate"");; 3643 Printf("" value and issue the MNContour command for each contour."");; 3644 goto L99;; 3645 }; 3646//______________________________________________________________________________; 3647//; 3648// Command PARAMETER; 3649//; 3650 if( !strncmp(comd.Data(),""PAR"",3) ) {; 3651 Printf("" ***>PARameters"");; 3652 Printf("" followed by one or more parameter definitions."");; 3653 Printf("" Parameter definitions are of the form:"");; 3654 Printf("" <number> ''name'' <value> <step> [lolim] [uplim] "");; 3655 Printf("" for example:"");; 3656 Printf("" 3 ''K width'' 1.2 0.1"");; 3657 Printf("" the last definition is followed by a blank line or a zero."");; 3658 goto L99;; 3659 }; 3660//______________________________________________________________________________; 3661//; 3662// Command RELEASE; 3663//; 3664 if( !strncmp(comd.Data(),""REL"",3) ) {; 3665 Printf("" ***>RELease <parno> [parno] ... [parno]"");; 3666 Printf("" If <parno> is the number of a previously variable parameter"");; 3667 Printf("" which has been fixed by a command: FIX <parno>, then that"");; 3668 Printf("" parameter will return to variable status. Otherwise a warning"");; 3669 Printf("" message is printed and the command is ignored."");; 3670 Printf("" Note that this command operates only on parameters which were"");; 3671 Printf("" at one time variable and have been FIXed. It cannot make"");; 3672 Printf("" constant parameters variable; that must be done by redefining"");; 3673 Printf("" the parameter with a PARameters command."");; 3674 goto L99;; 3675 }; 3676//______________________________________________________________________________; 3677//; 3678// Command RESTORE; 3679//; 3680 if( !strncmp(comd.Data(),""RES"",3) ) {; 3681 Printf("" ***>REStore [code]"");; 3682 Printf("" If no [code] is specified, this command restores all previously"");; 3683 Printf("" FIXed parameters to variable status. If [code]=1, then only"");; 3684 Printf("" the last parameter FIXed is restored to variable status."");; 3685 Printf("" If code is neither zero n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:119274,variab,variable,119274,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['variab'],['variable']
Modifiability,"iated; with this variable. The callers takes ownership of the; return object. Bool_t hasBinning(const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. void setBinning(const RooAbsBinning& binning, const char* name = 0); Add given binning under name 'name' with this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,max]. If name is null; range of default range is adjusted. If no range with; 'name' exists it is created on the fly. void setRange(const char* name, RooAbsReal& min, RooAbsReal& max); Create or modify a parameterized range named 'name' that has external functions; min and max parameterizing its boundaries. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write object contents ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealVar.html:40714,variab,variable,40714,root/html526/RooRealVar.html,https://root.cern,https://root.cern/root/html526/RooRealVar.html,1,['variab'],['variable']
Modifiability,"iations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:58198,variab,variables,58198,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['variab'],['variables']
Modifiability,"iations for a single existing column using custom variation tags.Definition RInterface.hxx:862; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:59620,variab,variables,59620,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['variab'],['variables']
Modifiability,"ibString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,bool>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> Streamer(TBuffer& b); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction4Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Thu Sep 23 19:59:04 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCFunction4Binding_double_double_double_double_bool_.html:34554,variab,variable,34554,root/html528/RooCFunction4Binding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html528/RooCFunction4Binding_double_double_double_double_bool_.html,1,['variab'],['variable']
Modifiability,"ibString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsAnaConvPdf(); Destructor. Int_t declareBasis(const char* expression, const RooArgList& params); Declare a basis function for use in this physics model. The string expression; must be a valid RooFormulVar expression representing the basis function, referring; to the convolution variable as '@0', and any additional parameters (supplied in; 'params' as '@1','@2' etc. The return value is a unique identifier code, that will be passed to coefficient(); to identify the basis function for which the coefficient is requested. If the; resolution model used does not support the declared basis function, code -1 is; returned. Bool_t changeModel(const RooResolutionModel& newModel); Change the current resolution model to newModel. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Create a generator context for this p.d.f. If both the p.d.f and the resolution model; support internal generation of the convolution observable on an infinite domain,; deploy a specialized convolution generator context, which generates the physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation contex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:46287,variab,variable,46287,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,1,['variab'],['variable']
Modifiability,"ibin = fEffBvsSLocal->FindBin( fTestSignalEff );; 449 if (ibin < 0 ) ibin = 0;; 450 else if (ibin >= fNbins) ibin = fNbins - 1;; 451 ; 452 Bool_t passed = kTRUE;; 453 for (UInt_t ivar=0; ivar<GetNvar(); ivar++); 454 passed &= ( (ev->GetValue(ivar) > fCutMin[ivar][ibin]) &&; 455 (ev->GetValue(ivar) <= fCutMax[ivar][ibin]) );; 456 ; 457 return passed ? 1. : 0. ;; 458 }; 459 else return 0;; 460}; 461 ; 462////////////////////////////////////////////////////////////////////////////////; 463/// print cuts; 464 ; 465void TMVA::MethodCuts::PrintCuts( Double_t effS ) const; 466{; 467 std::vector<Double_t> cutsMin;; 468 std::vector<Double_t> cutsMax;; 469 Int_t ibin = fEffBvsSLocal->FindBin( effS );; 470 ; 471 Double_t trueEffS = GetCuts( effS, cutsMin, cutsMax );; 472 ; 473 // retrieve variable expressions (could be transformations); 474 std::vector<TString>* varVec = 0;; 475 if (GetTransformationHandler().GetNumOfTransformations() == 0) {; 476 // no transformation applied, replace by current variables; 477 varVec = new std::vector<TString>;; 478 for (UInt_t ivar=0; ivar<cutsMin.size(); ivar++) {; 479 varVec->push_back( DataInfo().GetVariableInfo(ivar).GetLabel() );; 480 }; 481 }; 482 else if (GetTransformationHandler().GetNumOfTransformations() == 1) {; 483 // get transformation string; 484 varVec = GetTransformationHandler().GetTransformationStringsOfLastTransform();; 485 }; 486 else {; 487 // replace transformation print by current variables and indicated incompleteness; 488 varVec = new std::vector<TString>;; 489 for (UInt_t ivar=0; ivar<cutsMin.size(); ivar++) {; 490 varVec->push_back( DataInfo().GetVariableInfo(ivar).GetLabel() + "" [transformed]"" );; 491 }; 492 }; 493 ; 494 UInt_t maxL = 0;; 495 for (UInt_t ivar=0; ivar<cutsMin.size(); ivar++) {; 496 if ((UInt_t)(*varVec)[ivar].Length() > maxL) maxL = (*varVec)[ivar].Length();; 497 }; 498 UInt_t maxLine = 20+maxL+16;; 499 ; 500 for (UInt_t i=0; i<maxLine; i++) Log() << ""-"";; 501 Log() << Endl;; 502 Log() << kHEADER <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:17668,variab,variables,17668,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['variab'],['variables']
Modifiability,"ibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; class CacheElem;  Current normalization set. ;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inher",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:72918,inherit,inherited,72918,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,1,['inherit'],['inherited']
Modifiability,"ibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; class CacheElem;  Current normalization set. ;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFunc.html:59541,inherit,inherited,59541,doc/master/classRooMomentMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFunc.html,1,['inherit'],['inherited']
Modifiability,"ibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction4Binding_double_double_double_double_double_.html:35797,config,configuration,35797,root/html534/RooCFunction4Binding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction4Binding_double_double_double_double_double_.html,1,['config'],['configuration']
Modifiability,"ible additional options available.; 5.7.5 Performing the Fit; Here we have now all the required input ingredients for the fit, the data and the function to fit. Depending on these we have now several different way to perform the fit, using the corresponding methods of the ROOT::Fit::Fitter class and depending on the type of input data.; 5.7.5.1 Available fit methods. Least-square fit: Fitter::LeastSquare(const BinData & ) or Fitter::Fit(const Bindata &). It requires the user to pass a BinData object. It should be used when the data values follow a Gaussian distribution. This fit method is implemented using the class ROOT::Fit::Chi2FCN.; Binned Likelihood fit : Fitter::LikelihoodFit(const Bindata & ). The user needs to pass a BinData object. It should be used when the data values follow a Poisson or a multinomial distribution. The Poisson case (extended fit) is the default and in this case the function normalization is also fit to the data. The Multi-nominal case can be selected by passing the optional extended boolean flag as false. This method is implemented by the class ROOT::Fit:::PoissonLikelihoodFCN.; Un-Binned likelihood fit: Fitter::LikelihoodFit(const UnBindata &). The user needs to pass an UnBinData object. By default the fit is not extended (i.e. the normalization is not fitted to the data). As above the user can select an extended likelihood fit by passing the optional extended boolean flag as true. This method is implemented using the class LogLikelihoodFCN; Linear Fit: A linear fit can be selected (no iterative minimization is needed in this case, but using linear algebra algorithms from the Matrix library), if the model function is linear in the parameters. 5.7.5.2 Customised Fit methods; Above we described the pre-defined methods used for fitting. A user can also implement its own fitting methods, thus its version of the chi-square or likelihood function he wants to minimize. In this case, the user does not really need to build as input a ROOT::Fit dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:207422,extend,extended,207422,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['extend'],['extended']
Modifiability,"ibute set to true; kSM = ROOT.RooRealVar(""kSM"", ""sm modifier"", 1.0); cHq3 = ROOT.RooRealVar(""cHq3"", ""EFT modifier"", 0.0, 1.0); cHq3.setAttribute(""NewPhysics"", True); ; # Inputs to setup config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; infilename = ROOT.gROOT.GetTutorialDir().Data() + ""/roofit/input_histos_rf_lagrangianmorph.root""; par = ""cHq3""; samplelist = [""SM_NPsq0"", ""cHq3_NPsq1"", ""cHq3_NPsq2""]; ; # Set Config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; config = ROOT.RooLagrangianMorphFunc.Config(); config.fileName = infilename; config.observableName = observablename; config.folderNames = samplelist; config.couplings.add(cHq3); config.couplings.add(kSM); ; ; # Create morphing function; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; morphfunc = ROOT.RooLagrangianMorphFunc(""morphfunc"", ""morphed dist. of pTV"", config); ; # Get morphed distribution at cHq3 = 0.01, 0.5; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; morphfunc.setParameter(""cHq3"", 0.01); morph_hist_0p01 = morphfunc.createTH1(""morph_cHq3=0.01""); morphfunc.setParameter(""cHq3"", 0.25); morph_hist_0p25 = morphfunc.createTH1(""morph_cHq3=0.25""); morphfunc.setParameter(""cHq3"", 0.5); morph_hist_0p5 = morphfunc.createTH1(""morph_cHq3=0.5""); morph_datahist_0p01 = ROOT.RooDataHist(""morph_dh_cHq3=0.01"", """", [obsvar], morph_hist_0p01); morph_datahist_0p25 = ROOT.RooDataHist(""morph_dh_cHq3=0.25"", """", [obsvar], morph_hist_0p25); morph_datahist_0p5 = ROOT.RooDataHist(""morph_dh_cHq3=0.5"", """", [obsvar], morph_hist_0p5); ; # Extract input templates for plotting; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; input_hists = {sample: ROOT.TFile.Open(infilename).Get(sample).FindObject(observablename) for sample in samplelist}; input_datahists = {; sample: ROOT.RooDataHist(""dh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html:1959,config,config,1959,doc/master/rf711__lagrangianmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html,1,['config'],['config']
Modifiability,"ibutes inherited from TGLayoutManager; Bool_t fModified;  . Private Member Functions;  TGMatrixLayout (const TGMatrixLayout &)=delete;  ; TGMatrixLayout & operator= (const TGMatrixLayout &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGLayout.h>. Inheritance diagram for TGMatrixLayout:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGMatrixLayout() [1/2]. TGMatrixLayout::TGMatrixLayout ; (; const TGMatrixLayout & ; ). privatedelete . ◆ TGMatrixLayout() [2/2]. TGMatrixLayout::TGMatrixLayout ; (; TGCompositeFrame * ; main, . UInt_t ; r, . UInt_t ; c, . Int_t ; s = 0, . Int_t ; h = 0 . ). TGMatrixLayout constructor. ; Definition at line 621 of file TGLayout.cxx. Member Function Documentation. ◆ Class(). static TClass * TGMatrixLayout::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGMatrixLayout::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGMatrix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMatrixLayout.html:11757,inherit,inherited,11757,doc/master/classTGMatrixLayout.html,https://root.cern,https://root.cern/doc/master/classTGMatrixLayout.html,2,['inherit'],['inherited']
Modifiability,"ibutes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TGWidget; TString fCommand;  command to be executed ;  ; const TGWindow * fMsgWindow;  window which handles widget events ;  ; Int_t fWidgetFlags;  widget status flags (OR of EWidgetStatus) ;  ; Int_t fWidgetId;  the widget id (used for event processing) ;  . Private Member Functions;  TGComboBox (const TGComboBox &)=delete;  ; TGComboBox & operator= (const TGComboBox &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGComboBox.html:32819,inherit,inherited,32819,doc/master/classTGComboBox.html,https://root.cern,https://root.cern/doc/master/classTGComboBox.html,1,['inherit'],['inherited']
Modifiability,"ibutes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGComboBoxPopup (const TGComboBoxPopup &)=delete;  ; TGComboBoxPopup & operator= (const TGComboBoxPopup &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGComboBoxPopup.html:26959,inherit,inherited,26959,doc/master/classTGComboBoxPopup.html,https://root.cern,https://root.cern/doc/master/classTGComboBoxPopup.html,1,['inherit'],['inherited']
Modifiability,"ibutes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _printScientific;  ; static Int_t _printSigDigits;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:71053,inherit,inherited,71053,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,3,['inherit'],['inherited']
Modifiability,"ibutes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Private Member Functions;  TVirtualPS (const TVirtualPS &)=delete;  ; TVirtualPS & operator= (const TVirtualPS &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TVirtualPS.h>. Inheritance diagram for TVirtualPS:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPS.html:20267,inherit,inherited,20267,doc/master/classTVirtualPS.html,https://root.cern,https://root.cern/doc/master/classTVirtualPS.html,1,['inherit'],['inherited']
Modifiability,"ibutes; Double_t fDz;  ; Double_t fRmax1;  ; Double_t fRmax2;  ; Double_t fRmin1;  ; Double_t fRmin2;  ;  Protected Attributes inherited from TGeoBBox; Double_t fDX;  ; Double_t fDY;  ; Double_t fDZ;  ; Double_t fOrigin [3];  ;  Protected Attributes inherited from TGeoShape; UInt_t fShapeBits;  ; Int_t fShapeId;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TGeoShape; enum  EShapeType { ;   kBitMask32 = 0xffffffff; , kGeoNoShape = 0; , kGeoBad = (1ULL << ( 0 )); , kGeoRSeg = (1ULL << ( 1 )); , ;   kGeoPhiSeg = (1ULL << ( 2 )); , kGeoThetaSeg = (1ULL << ( 3 )); , kGeoVisX = (1ULL << ( 4 )); , kGeoVisY = (1ULL << ( 5 )); , ;   kGeoVisZ = (1ULL << ( 6 )); , kGeoRunTimeShape = (1ULL << ( 7 )); , kGeoInvalidShape = (1ULL << ( 8 )); , kGeoTorus = (1ULL << ( 9 )); , ;   kGeoBox = (1ULL << ( 10 )); , kGeoPara = (1ULL << ( 11 )); , kGeoSph = (1ULL << ( 12 )); , kGeoTube = (1ULL << ( 13 )); , ;   kGeoTubeSeg = (1ULL << ( 14 )); , kGeoCone = (1ULL << ( 15 )); , kGeoConeSeg = (1ULL << ( 16 )); , kGeoPcon = (1ULL << ( 17 )); , ;   kGeoPgon = (1ULL << ( 18 )); , kGeoArb8 = (1ULL << ( 19 )); , kGeoEltu = (1ULL << ( 20 )); , kGeoTrap = (1ULL << ( 21 )); , ;   kGeoCtub = (1ULL << ( 22 )); , kGeoTrd1 = (1ULL << ( 23 )); , kGeoTrd2 = (1ULL << ( 24 )); , kGeoComb = (1ULL << ( 25 )); , ;   kGeoClosedShape = (1ULL << ( 26 )); , kGeoXtru = (1ULL << ( 27 )); , kGeoParaboloid = (1ULL << ( 28 )); , kGeoHalfSpace = (1ULL << ( 29 )); , ;   kGeoHype = (1ULL << ( 30 )); , kGeoSavePrimitive = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCone.html:21072,inherit,inherited,21072,doc/master/classTGeoCone.html,https://root.cern,https://root.cern/doc/master/classTGeoCone.html,1,['inherit'],['inherited']
Modifiability,"ibutes; EEnvLevel fLevel;  ; Bool_t fModified;  ; TString fName;  ; TString fType;  ; TString fValue;  . Friends; class TEnv;  ; class TEnvParser;  ; class TReadEnvParser;  ; class TWriteEnvParser;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEnv.h>. Inheritance diagram for TEnvRec:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEnvRec() [1/2]. TEnvRec::TEnvRec ; (; const char * ; n, . const char * ; v, . const char * ; t, . EEnvLevel ; l . ). private . Ctor of a single resource. ; Definition at line 274 of file TEnv.cxx. ◆ TEnvRec() [2/2]. TEnvRec::TEnvRec ; (; ). inline . Definition at line 107 of file TEnv.h. ◆ ~TEnvRec(). TEnvRec::~TEnvRec ; (; ). TNamed destructor. ; Definition at line 284 of file TEnv.cxx. Member Function Documentation. ◆ ChangeValue(). void TEnvRec::ChangeValue ; (; const char * ; v, . const char * ; t, . EEnvLevel ; l, . Bool_t ; append = kFALSE, . Bool_t ; ignoredup = kFALSE . ). private . Change the value of a resource. ; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnvRec.html:10278,inherit,inherited,10278,doc/master/classTEnvRec.html,https://root.cern,https://root.cern/doc/master/classTEnvRec.html,2,['inherit'],['inherited']
Modifiability,"ibutes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction2Ref<VO,VI1,VI2> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction2Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Sep 8 17:02:46 2015 » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction2PdfBinding_double_double_double_.html:44394,variab,variable,44394,root/html534/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction2PdfBinding_double_double_double_.html,1,['variab'],['variable']
Modifiability,"ibutes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction2Ref<VO,VI1,VI2> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction2Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Jun 30 14:31:22 2015 » Last generated: 2015-06-30 14:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html:46554,variab,variable,46554,root/html602/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html,1,['variab'],['variable']
Modifiability,ibutes; RooArgList _basisList;  ! List of created basis functions ;  ; RooAICRegistry _codeReg;  ! Registry of analytical integration codes ;  ; RooObjCacheManager _coefNormMgr;  ! Coefficient normalization manager ;  ; RooListProxy _convSet;  Set of (resModel (x) basisFunc) convolution objects. ;  ; RooRealProxy _convVar;  Convolution variable. ;  ; bool _isCopy;  ; RooRealProxy _model;  Original model. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:73333,config,configuration,73333,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['config'],['configuration']
Modifiability,"ibutes; TGFrame * fFrame;  ; TGLayoutHints * fLayout;  ; Int_t fState;  . Private Member Functions;  TGFrameElement (const TGFrameElement &);  ; TGFrameElement & operator= (const TGFrameElement &);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGLayout.h>. Inheritance diagram for TGFrameElement:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGFrameElement() [1/3]. TGFrameElement::TGFrameElement ; (; const TGFrameElement & ; ). private . ◆ TGFrameElement() [2/3]. TGFrameElement::TGFrameElement ; (; ). inline . Definition at line 116 of file TGLayout.h. ◆ TGFrameElement() [3/3]. TGFrameElement::TGFrameElement ; (; TGFrame * ; f, . TGLayoutHints * ; l . ). Constructor. ; Definition at line 46 of file TGLayout.cxx. ◆ ~TGFrameElement(). TGFrameElement::~TGFrameElement ; (; ). override . Destructor. Decrease ref. count of fLayout. ; Definition at line 64 of file TGLayout.cxx. Member Function Documentation. ◆ Class(). static TClass * TGFrameElement::Class ; (; ). sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrameElement.html:9840,inherit,inherited,9840,doc/master/classTGFrameElement.html,https://root.cern,https://root.cern/doc/master/classTGFrameElement.html,2,['inherit'],['inherited']
Modifiability,"ibution (signal); TMVA::PDF*fSplTrainBPDFs of training MVA distribution (background); TSpline*fSplTrainEffBvsSsplines for training signal eff. versus background eff.; TMVA::TSpline1*fSplTrainRefBhelper splines for RootFinder (background); TMVA::TSpline1*fSplTrainRefShelper splines for RootFinder (signal); TMVA::PDF*fSplTrainSPDFs of training MVA distribution (signal); TSpline*fSpleffBvsSsplines for signal eff. versus background eff.; UInt_tfTMVATrainingVersionTMVA version used for training; Double_tfTestTimefor timing measurements; TStringfTestvarvariable used in evaluation, etc (mostly the MVA); Double_tfTrainTimefor timing measurements; TMVA::TransformationHandlerfTransformationthe list of transformations; TMVA::TransformationHandler*fTransformationPointerpointer to the rest of transformations; Bool_tfTxtWeightsOnlyif TRUE, write weights only to text files ; Bool_tfUseDecorrsynonymous for decorrelation; TStringfVarTransformStringlabels variable transform method; TMVA::Types::ESBTypefVariableTransformTypethis is the event type (sig or bgd) assumed for variable transform; TStringfVariableTransformTypeStringlabels variable transform type; Bool_tfVerboseverbose flag; TMVA::EMsgTypefVerbosityLevelverbosity level; TStringfVerbosityLevelStringverbosity level (user input string); TStringfWeightFileweight file name; Double_tfXmaxmaximum (signal and background); Double_tfXminminimum (signal and background); static TMVA::MethodBase*fgThisBasethis pointer; TH1F*fmvaBPDFs of MVA distribution (background); TH1F*fmvaSPDFs of MVA distribution (signal). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~MethodBase( void ); destructor. void SetupMethod(); setup of methods. void ProcessSetup(); process all options; the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void CheckSetup(); check may be overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBase.html:19594,variab,variable,19594,root/html530/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBase.html,6,['variab'],['variable']
Modifiability,"ibution,; i.e. generating random numbers according to arbitrary distributions. @ingroup Random. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DistSampler(); ROOT::Math::DistSamplerDistSampler(); ROOT::Math::DistSamplerDistSampler(const ROOT::Math::DistSampler&); virtual boolGenerate(unsigned int nevt, ROOT::Fit::UnBinData& data); virtual boolGenerate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true); boolGenerate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true); virtual TRandom*GetRandom(); virtual boolInit(const char* = """"); virtual boolInit(const ROOT::Math::DistSamplerOptions& opt); unsigned intNDim() const; ROOT::Math::DistSampler&operator=(const ROOT::Math::DistSampler&); const ROOT::Math::IMultiGenFunction&ParentPdf() const; const double*Sample(); virtual boolSample(double* x); virtual doubleSample1D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolSampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__DistSampler.html:892,extend,extend,892,root/html602/ROOT__Math__DistSampler.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__DistSampler.html,4,['extend'],['extend']
Modifiability,"ic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectator (UInt_t ivar, Float_t value);  set spectator value (dimension ivar) to value ;  ; void SetSpectatorTypes (const std::vector< char > &types);  ; void SetTarget (UInt_t itgt, Float_t value);  set the target value (dimension itgt) to value ;  ; void SetVal (UInt_t ivar, Float_t val);  set variable ivar to val ;  ; void SetVariableArrangement (std::vector< UInt_t > *const m) const;  set the variable arrangement ;  ; void SetWeight (Double_t w);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Event.html:3268,inherit,inherited,3268,doc/master/classTMVA_1_1Event.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html,1,['inherit'],['inherited']
Modifiability,"ic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketFast (TBuffer &, Long64_t);  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafC.html:4549,inherit,inherited,4549,doc/master/classTLeafC.html,https://root.cern,https://root.cern/doc/master/classTLeafC.html,1,['inherit'],['inherited']
Modifiability,"ic . Globally disable bin-width corrections by this class. ; Definition at line 47 of file RooBinWidthFunction.cxx. ◆ divideByBinWidth(). bool RooBinWidthFunction::divideByBinWidth ; (; ); const. inline . Definition at line 67 of file RooBinWidthFunction.h. ◆ doEval(). void RooBinWidthFunction::doEval ; (; RooFit::EvalContext & ; ctx); const. overridevirtual . Compute bin index for all values of the observable(s) in evalData, and return their volumes or inverse volumes, depending on the configuration chosen in the constructor. ; If a bin is not valid, return a volume of 1. ; Reimplemented from RooAbsReal.; Definition at line 100 of file RooBinWidthFunction.cxx. ◆ enableClass(). void RooBinWidthFunction::enableClass ; (; ). static . Globally enable bin-width corrections by this class. ; Definition at line 37 of file RooBinWidthFunction.cxx. ◆ evaluate(). double RooBinWidthFunction::evaluate ; (; ); const. overridevirtual . Compute current bin of observable, and return its volume or inverse volume, depending on configuration chosen in the constructor. ; If the bin is not valid, return a volume of 1. ; Implements RooAbsReal.; Definition at line 86 of file RooBinWidthFunction.cxx. ◆ histFunc(). const RooHistFunc & RooBinWidthFunction::histFunc ; (; ); const. inline . Definition at line 68 of file RooBinWidthFunction.h. ◆ IsA(). TClass * RooBinWidthFunction::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 76 of file RooBinWidthFunction.h. ◆ isBinnedDistribution(). bool RooBinWidthFunction::isBinnedDistribution ; (; const RooArgSet & ; obs); const. inlineoverridevirtual . Test if internal RooHistFunc is binned. ; Reimplemented from RooAbsReal.; Definition at line 55 of file RooBinWidthFunction.h. ◆ isClassEnabled(). bool RooBinWidthFunction::isClassEnabled ; (; ). static . Returns true if bin-width corrections by this class are globally enabled, false otherwise. ; Definition at line 42",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:64078,config,configuration,64078,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,1,['config'],['configuration']
Modifiability,"ic . ReturnsName of the file containing the class declaration ; Definition at line 591 of file RooVectorDataStore.h. ◆ dump(). void RooVectorDataStore::dump ; (; ). overridevirtual . Reimplemented from RooAbsDataStore.; Definition at line 1066 of file RooVectorDataStore.cxx. ◆ fill(). Int_t RooVectorDataStore::fill ; (; ). overridevirtual . Interface function to TTree::Fill. ; Implements RooAbsDataStore.; Definition at line 325 of file RooVectorDataStore.cxx. ◆ forceCacheUpdate(). void RooVectorDataStore::forceCacheUpdate ; (; ). overrideprotectedvirtual . Reimplemented from RooAbsDataStore.; Definition at line 915 of file RooVectorDataStore.cxx. ◆ get() [1/3]. virtual const RooArgSet * RooAbsDataStore::get ; (; ); const. inlinevirtual . Reimplemented from RooAbsDataStore.; Definition at line 60 of file RooAbsDataStore.h. ◆ get() [2/3]. const RooArgSet * RooVectorDataStore::get ; (; Int_t ; index); const. overridevirtual . Load the n-th data point (n='index') into the variables of this dataset, and return a pointer to the RooArgSet that holds them. ; Implements RooAbsDataStore.; Definition at line 352 of file RooVectorDataStore.cxx. ◆ get() [3/3]. virtual const RooArgSet * RooAbsDataStore::get ; (; Int_t ; index); const. virtual . Implements RooAbsDataStore. ◆ getArrays(). RooVectorDataStore::ArraysStruct RooVectorDataStore::getArrays ; (; ); const. Exports all arrays in this RooVectorDataStore into a simple datastructure to be used by RooFit internal export functions. ; Definition at line 1366 of file RooVectorDataStore.cxx. ◆ getBatches(). RooAbsData::RealSpans RooVectorDataStore::getBatches ; (; std::size_t ; first, . std::size_t ; len . ); const. overridevirtual . Return batches of the data columns for the requested events. ; Parameters. [in]firstFirst event in the batches. ; [in]lenNumber of events in batches. . ReturnsSpans with the associated data. ; Implements RooAbsDataStore.; Definition at line 1137 of file RooVectorDataStore.cxx. ◆ getCategoryBatches(). R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:30146,variab,variables,30146,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['variab'],['variables']
Modifiability,"ic 1D function interface ; Definition at line 86 of file Fitter.cxx. ◆ SetFunction() [4/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModelFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a parametric function interface. ; Definition at line 59 of file Fitter.cxx. ◆ SetNumberOfFitPoints(). void ROOT::Fit::Fitter::SetNumberOfFitPoints ; (; unsigned int ; npoints). inline . Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ; Definition at line 472 of file Fitter.h. Member Data Documentation. ◆ fBinFit. bool ROOT::Fit::Fitter::fBinFit = false. private . flag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used to compute chi2 for binned likelihood fit ; Definition at line 554 of file Fitter.h. ◆ fConfig. FitConfig ROOT::Fit::Fitter::fConfig. private . fitter configuration (options and parameter settings) ; Definition at line 562 of file Fitter.h. ◆ fData. std::shared_ptr<ROOT::Fit::FitData> ROOT::Fit::Fitter::fData. private . ! pointer to the fit data (binned or unbinned data) ; Definition at line 572 of file Fitter.h. ◆ fDataSize. int ROOT::Fit::Fitter::fDataSize = 0. private . size of data sets (need for Fumili or LM fitters) ; Definition at line 560 of file Fitter.h. ◆ fExtObjFunction. const ROOT::Math::IMultiGenFunction* ROOT::Fit::Fitter::fExtObjFunction = nullptr. private . ! pointer to an external FCN ; Definition at line 576 of file Fitter.h. ◆ fFitType. int ROOT::Fit::Fitter::fFitType = 0. private . type of fit (0 undefined, 1 least square, 2 likelihood, 3 binned likelihood) ; Definition at line 558 of file Fitter.h. ◆ fFunc. std::shared_ptr<IModelFunction> ROOT::Fit::Fitter::fFunc. private . ! copy of the fitted function containing on output the fit result ; Definition at line 566 of file Fitter.h. ◆ fFunc_v. std::shared_ptr<IModelFunction_v> ROOT::Fit::Fitter::fFunc_v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:36988,config,configuration,36988,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['config'],['configuration']
Modifiability,"ic Attributes; static Atom_t fgDeleteWindowAtom = 0;  . Protected Member Functions; void * GetCurrentContext ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fCocoaDraw;  ; bool fDirectDraw;  ; EDrawMode fDrawMode;  ; std::unique_ptr< ROOT::MacOSX::Details::CocoaPrivate > fPimpl;  ; Drawable_t fSelectedDrawable;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; typedef std::map< Atom_t, Window_t >::iterator selection_iterator;  . Private Member Functions;  TGCocoa (const TGCocoa &rhs);  ; Atom_t FindAtom (const std::string &atomName, bool addIfNotFound);  ; bool MakeProcessForeground ();  ; TGCocoa & operator= (const TGCocoa &rhs);  ; void SetApplicationIcon ();  . Private Attributes; std::vector< std::string > fAtomToName;  ; ROOT::MacOSX::X11::Rectangle fDisplayRect;  ; bool fDisplayShapeChanged;  ; bool fForegroundProcess;  ; ROOT::MacOSX::X11::name_to_atom_map fNameToAtom;  ; std::map< Atom_t, Window_t > fSelectionOwners;  ; bool fSetApp;  ; std::vector< GCValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:49789,inherit,inherited,49789,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['inherit'],['inherited']
Modifiability,"ic Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooSetProxy_nsetNormalization set (optional); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Int_t_orderDerivation order; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; ROOT::Math::RichardsonDerivator*_rd! Derivator ; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_xObservable; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDerivative.html:33215,config,configuration,33215,root/html532/RooDerivative.html,https://root.cern,https://root.cern/root/html532/RooDerivative.html,1,['config'],['configuration']
Modifiability,"ic Bool_tfgIsTrainingmark if we are in an actual training or ""evaluation/testing"" phase --> ignoreNegWeights only in actual training !. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Event(); copy constructor. Event(const vector<Float_t>& values, const vector<Float_t>& targetValues, UInt_t theClass = 0, Double_t weight = 1., Double_t boostweight = 1.); constructor. Event(const vector<Float_t>& values, const vector<Float_t>& targetValues, const vector<Float_t>& spectatorValues, UInt_t theClass = 0, Double_t weight = 1., Double_t boostweight = 1.); constructor. Event(const vector<Float_t>& , UInt_t theClass, Double_t weight = 1., Double_t boostweight = 1.); constructor. Event(const vector<Float_t*>*& , UInt_t nvar); constructor for single events. Event(const TMVA::Event& ); copy constructor. ~Event(); Event destructor. void SetVariableArrangement(vector<UInt_t>*const m) const; set the variable arrangement. void CopyVarValues(const TMVA::Event& other); copies only the variable values. Float_t GetValue(UInt_t ivar) const; return value of i'th variable. Float_t GetSpectator(UInt_t ivar) const; return spectator content. const std::vector<Float_t>& GetValues() const; return value vector. UInt_t GetNVariables() const; accessor to the number of variables. UInt_t GetNTargets() const; accessor to the number of targets. UInt_t GetNSpectators() const; accessor to the number of spectators. void SetVal(UInt_t ivar, Float_t val); set variable ivar to val. void Print(ostream& o) const; print method. void SetTarget(UInt_t itgt, Float_t value); set the target value (dimension itgt) to value. void SetSpectator(UInt_t ivar, Float_t value); set spectator value (dimension ivar) to value. Double_t GetWeight() const; return the event weight - depending on whether the flag; *IgnoreNegWeightsInTraining* is or not. If it is set AND it is; used for training, then negetive event weights are set to zero !; NOTE! For events used in Testing, the ORIGINAL p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Event.html:4008,variab,variable,4008,root/html602/TMVA__Event.html,https://root.cern,https://root.cern/root/html602/TMVA__Event.html,2,['variab'],['variable']
Modifiability,"ic Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void IterateOnce (void);  ; virtual void Reset (void);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; const TUnfoldBinning * f_constInputBins;  ; const TUnfoldBinning * f_constOutputBins;  ; TUnfoldBinning * f_inputBins;  ; TUnfoldBinning * f_outputBins;  ; TMatrixD * fA;  ; TVectorD * fBgr;  ; TMatrixD * fDXDY;  ; TVectorD * fEpsilon;  ; double fScaleBias;  ; Int_t fStep;  ; TVectorD * fX;  ; TVectorD * fX0;  ; TVectorD * fY;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TUnfoldIterativeEM.h>. Inheritance diagram for TUnfoldIterativeEM:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TUnfoldIterativeEM() [1/2]. TUnfoldIterativeEM::TUnfoldIterativeEM ; (; void ; ). ◆ TUnfoldIterativeEM() [2/2]. TUnfoldIterativeEM::TUn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldIterativeEM.html:10656,inherit,inherited,10656,doc/master/classTUnfoldIterativeEM.html,https://root.cern,https://root.cern/doc/master/classTUnfoldIterativeEM.html,1,['inherit'],['inherited']
Modifiability,"ic Hilbert Matrix class; THistPainter Helper class to draw histograms; THnSparse Interfaces of sparse n-dimensional histogram; THnSparseArrayChunk chunks of linearized bins; THnSparseT<TArrayC> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayD> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayF> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayI> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayL> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayS> Sparse n-dimensional histogram with templated content; THostAuth Class providing host specific authentication information; THtml Convert class(es) into HTML file(s); THtml::TFileDefinition helper class to determine a class's source files; THtml::TFileSysDB instance of file system data; THtml::TFileSysDir an directory of the local file system; THtml::TFileSysEntry an entry of the local file system; THtml::TFileSysRoot an root directory of the local file system; THtml::THelperBase a helper object's base class; THtml::TModuleDefinition helper class to determine a class's module; THtml::TPathDefinition helper class to determine directory layouts; TImage Abstract image class; TImageDump create image in batch mode; TImagePalette Color Palette for value -> color conversion; TImagePlugin base class for different image format handlers(plugins); TIndArray ; TIndexTable ""Index"" array for TTable object; TIndexTable::iterator ; TInetAddress Represents an Internet Protocol (IP) address; TInspectCanvas The canvas Inspector; TInspectorImp GUI independent inspector abc; TInterpreter ABC defining interface to generic interpreter; TIsAProxy ; TIter Iterator wrapper; TIterator Iterator abstract base class; TKDE One dimensional semi-parametric Kernel Density Estimation; TKDTree<int,double> KD tree; TKDTree<int,float> KD tree; TKDTreeBinning ; TKSocket General kerberized socket; TKey Header description of a logical record on file.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:97158,plugin,plugins,97158,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,['plugin'],['plugins']
Modifiability,"ic Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Private Attributes; TString _blindString;  Blinding string (optionally read from ASCII files) ;  ; TTree * _tree = nullptr;  TTree holding the data points. ;  ; RooArgSet _truth;  Truth variables. ;  . Additional Inherited Members;  Public Types inherited from RooAbsData; using CategorySpans = std::map< RooFit::Detail::DataKey, std::span< const RooAbsCategory::value_type > >;  ; enum  ErrorType { ;   Poisson; , SumW2; , None; , Auto; , ;   Expected. };  ; using RealSpans = std::map< RooFit::Detail::DataKey, std::span< const double > >;  ; enum  StorageType { Tree; , Vector; , Composite; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeData.html:23247,variab,variables,23247,doc/master/classRooTreeData.html,https://root.cern,https://root.cern/doc/master/classRooTreeData.html,1,['variab'],['variables']
Modifiability,"ic Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:35493,inherit,inherited,35493,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,3,['inherit'],['inherited']
Modifiability,"ic Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual TGDimension GetDefaultSize () const;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGButton.html:3570,inherit,inheritance,3570,doc/master/classTGButton.html,https://root.cern,https://root.cern/doc/master/classTGButton.html,11,['inherit'],['inheritance']
Modifiability,"ic Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCheckButton.html:8110,inherit,inheritance,8110,doc/master/classTGCheckButton.html,https://root.cern,https://root.cern/doc/master/classTGCheckButton.html,22,['inherit'],['inheritance']
Modifiability,ic Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; vCellId_t fCellsHighlighted;  ; vCellId_t fCellsSelected;  ; Float_t fEps;  ; TAxis * fEtaAxis;  ; Float_t fMaxValE;  ; Float_t fMaxValEt;  ; TAxis * fPhiAxis;  ; vSliceInfo_t fSliceInfos;  ; Bool_t fWrapTwoPi;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloData.html:30577,inherit,inherited,30577,doc/master/classTEveCaloData.html,https://root.cern,https://root.cern/doc/master/classTEveCaloData.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGeoPcon (const TGeoPcon &)=delete;  Cosine of dphi. ;  ; Bool_t HasInsideSurface () const;  ; TGeoPcon & operator= (const TGeoPcon &)=delete;  ; void SetSegsAndPolsNoInside (TBuffer3D &buff) const;  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fC1 = 0;  Full phi range flag. ;  ; Double_t fC2 = 0;  Sine of phi1. ;  ; Double_t fCdphi = 0;  Sine of (phi1+phi2)/2. ;  ; Double_t fCm = 0;  Sine of phi1+dphi. ;  ; Double_t fDphi = 0;  ; Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPcon.html:19440,inherit,inherited,19440,doc/master/classTGeoPcon.html,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGLOrthoCamera Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Orthographic projection camera. ; Currently limited to three types defined at construction time - kXOY, kXOZ, kZOY - where this refers to the viewport plane axis - e.g. kXOY has X axis horizontal, Y vertical - i.e. looking down Z axis with Y vertical.; The plane types restriction could easily be removed to supported arbitrary ortho projections along any axis/orientation with free rotations about them. ; Definition at line 35 of file TGLOrthoCamera.h. Public Types; enum  EType { ;   kZOY; , kXOZ; , kXOY; , kZnOY; , ;   kXnOZ; , kXnOY; , kZOX; , kZnOX. };  ;  Public Types inherited from TGLCamera; enum  EFrustumPlane { ;   kNear = 0; , kLeft = 1; , kRight = 2; , kTop = 3; , ;   kBottom = 4; , kFar = 5; , kPlanesPerFrustum = 6. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGLOrthoCamera ();  Construct kXOY orthographic camera. ;  ;  TGLOrthoCamera (EType type, const TGLVector3 &hAxis, const TGLVector3 &vAxis);  Construct orthographic camera. ;  ;  ~TGLOrthoCamera () override;  Destroy orthographic camera. ;  ; void Apply (const TGLBoundingBox &sceneBox, const TGLRect *pickRect=nullptr) const override;  Apply the camera to the current GL context, setting the viewport, projection and modelvi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOrthoCamera.html:1124,inherit,inherited,1124,doc/master/classTGLOrthoCamera.html,https://root.cern,https://root.cern/doc/master/classTGLOrthoCamera.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TAdvancedGraphicsDialog Class ReferenceGUI » ROOT Fit Panel. ; Allows to create advanced graphics from the last fit made in the fitpanel. ; This includes the scan graphics, the contour and the confidence levels. ; Definition at line 38 of file TAdvancedGraphicsDialog.h. Public Member Functions;  TAdvancedGraphicsDialog (const TGWindow *p, const TGWindow *main);  ;  ~TAdvancedGraphicsDialog () override;  Cleanup dialog. ;  ; void DoChangedScanPar (Int_t selected);  Changes the Min and Max default values of the scan method, depending on the selected parameter. ;  ; void DoDraw ();  Calls the corresponding method, depending on the selected tab. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html:1143,inherit,inherited,1143,doc/master/classTAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGRecorder Class ReferenceGUI » Events recorder. ; Provides GUI for TRecorder class. ; Definition at line 630 of file TRecorder.h. Public Member Functions;  TGRecorder (const TGWindow *p=nullptr, UInt_t w=230, UInt_t h=150);  The GUI for the recorder. ;  ;  ~TGRecorder () override;  Destructor. Cleanup the GUI. ;  ; TClass * IsA () const override;  ; void Replay ();  Handles push of fReplay button according to the current recorder state. ;  ; void StartStop ();  Handles push of the fStartStop button according to the current recorder state. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update ();  Called when fTimer timeouts (every 0.025 second) Updates GUI of recorder. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; virtual void CloseWindow ();  Close and delete main frame. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, UInt_t &input) const;  ; const char * GetWindowName () const;  ; void GetWMPosition (Int_t &x, Int_t &y) const;  ; void GetWMSize (UInt_t &w, UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRecorder.html:1116,inherit,inherited,1116,doc/master/classTGRecorder.html,https://root.cern,https://root.cern/doc/master/classTGRecorder.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSceneInfo Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveUtil representation of TGLSceneInfo. ; Definition at line 23 of file TEveSceneInfo.h. Public Member Functions;  TEveSceneInfo (TEveViewer *viewer, TEveScene *scene, TGLSceneInfo *sinfo);  Constructor. ;  ;  ~TEveSceneInfo () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Virtual from TEveElement. ;  ; void AddStamp (UChar_t bits) override;  Override from TEveElement. ;  ; TGLSceneBase * GetGLScene () const;  Return the TGLSceneBase represented by this SceneInfo object. ;  ; TGLSceneInfo * GetGLSceneInfo () const;  ; TEveScene * GetScene () const;  ; TEveViewer * GetViewer () const;  ; Bool_t HandleElementPaste (TEveElement *el) override;  Virtual from TEveElement. ;  ; TClass * IsA () const override;  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void Annihilate ();  Optimized destruction without check",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSceneInfo.html:1255,inherit,inherited,1255,doc/master/classTEveSceneInfo.html,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TClassTree Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Draw inheritance tree and their relations for a list of classes. ; The following options are supported; Direct inheritance (default); Multiple inheritance; Composition; References by data members and member functions; References from Code. The list of classes is specified:; either in the TClassTree constructor as a second argument; or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas pull down menu ""Classes"".; In the list of classes, class names are separated by a "":"" wildcarding is supported. The following formats are supported, eg in TClassTree::Draw; Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA. Draw(""*ClassB""); Draw inheritance tree for ClassB and all the classes deriving from ClassB. Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC. Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD. Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes. Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. Example: Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn. Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTree.html:1159,inherit,inheritance,1159,doc/master/classTClassTree.html,https://root.cern,https://root.cern/doc/master/classTClassTree.html,1,['inherit'],['inheritance']
Modifiability,"ic Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TRatioPlot Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Class for displaying ratios, differences and fit residuals. ; TRatioPlot has two constructors, one which accepts two histograms, and is responsible for setting up the calculation of ratios and differences. This calculation is in part delegated to TEfficiency. A single option can be given as a parameter, that is used to determine which procedure is chosen. The remaining option string is then passed through to the calculation, if applicable. The other constructor uses a fitted histogram to calculate the fit residual and plot it with the histogram and the fit function. Ratios and differences; The simplest case is passing two histograms without specifying any options. This defaults to using TGraphAsymmErrors::Divide. The option variable is passed through, as are the parameters c1 and c2, that you can set via TRatioPlot::SetC1 and TRatioPlot::SetC1. If you set the option to divsym the method TH1::Divide will be used instead, also receiving all the parameters.; Using the option diff or diffsig, both histograms will be subtracted, and in the case of diffsig, the difference will be divided by the uncertainty. c1 and c2 will only be used to scale the histograms using TH1::Scale prior to subtraction.; Available options are for option: . Option Description . divsym uses the histogram TH1::Divide method, yields symmetric errors . diff subtracts the histograms . diffsig subtracts the histograms and divides by the uncertainty . ; void ratioplot1() {; gStyle->SetOptStat(0);; auto C = new TCanvas(""C"", ""A ratio example"");; auto h1 = new TH1D(""h1"", ""TRatioPlot Example; x; y"", 50, 0, 10);; auto h2 = new TH1D(""h2"", ""h2"", 50, 0, 10);; auto f1 = new TF1(""f1"", ""exp(- x/[0] )"");; f1->SetParameter(0, 3);; h1->FillRandom(""f1"", 1900);; h2->FillRandom(""f1"", 2000);; h1->Sumw2();; h2->Sca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:1123,variab,variable,1123,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['variab'],['variable']
Modifiability,ic Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shadow color graphics context. ;  ; static const TGGC & GetWhiteGC ();  Get white graphics context. ;  ; static Pixel_t GetWhitePixel ();  Get white pixel value. ;  ;  Static Public Member Functions inherited from TGWindow; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetCounter ();  Return global window counter (total number of created windows). ;  ;  Static Public Member Functions inherited from TGObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrame.html:18922,inherit,inherited,18922,doc/master/classTGFrame.html,https://root.cern,https://root.cern/doc/master/classTGFrame.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TXMLDocument (const TXMLDocument &)=delete;  ; TXMLDocument & operator= (const TXMLDocument &)=delete;  . Private Attributes; TXMLNode * fRootNode;  ; _xmlDoc * fXMLDoc;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TXMLDocument.h>. Inheritance diagram for TXMLDocument:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Oper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLDocument.html:9724,inherit,inherited,9724,doc/master/classTXMLDocument.html,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TObject * fObj;  ; Bool_t fResetMustCleanupBit;  . Private Member Functions;  TObjectSpy (const TObjectSpy &s)=delete;  ; TObjectSpy & operator= (const TObjectSpy &s)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TObjectSpy.h>. Inheritance diagram for TObjectSpy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectSpy.html:9722,inherit,inherited,9722,doc/master/classTObjectSpy.html,https://root.cern,https://root.cern/doc/master/classTObjectSpy.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::unique_ptr< RooAbsPdf > create (RooAbsPdf &pdf, RooAbsData const &data, double precision);  Creates a wrapping RooBinSamplingPdf if appropriate. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:59721,inherit,inherited,59721,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['inherit'],['inherited']
Modifiability,"ic Member Functions;  TProofMgrLite (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the Lite environment. ;  ;  ~TProofMgrLite () override;  ; TProof * CreateSession (const char *=0, const char *=0, Int_t=-1) override;  Create a new session. ;  ; TProofLog * GetSessionLogs (Int_t ridx=0, const char *stag=0, const char *pattern=""-v | SvcMsg"", Bool_t rescan=kFALSE) override;  Get logs or log tails from last session associated with this manager instance. ;  ; TClass * IsA () const override;  ; TObjString * ReadBuffer (const char *file, const char *pattern) override;  Read lines containing 'pattern' in 'file'. ;  ; TObjString * ReadBuffer (const char *file, Long64_t ofs, Int_t len) override;  Read 'len' bytes from offset 'ofs' of the local file 'fin'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofMgr;  TProofMgr (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the standard (old) environment. ;  ;  ~TProofMgr () override;  Destroy a TProofMgr instance. ;  ; virtual TProof * AttachSession (Int_t, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; virtual TProof * AttachSession (TProofDesc *, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; void Close ();  ; virtual Int_t Cp (const char *, const char *=0, const char *=0);  ; virtual void DetachSession (Int_t, Option_t *="""");  Detach session with 'id' from its proofserv. ;  ; virtual void DetachSession (TProof *, Option_t *="""");  Detach session 'p' from its proofserv. ;  ; virtual void DiscardSession (TProof *p);  Discard TProofDesc of session 'p' from the internal list. ;  ; virtual void Find (const char *=""~/"", const char *=0, const char *=0);  ; virtual Int_t GetFile (const char *, const char *, const char *=0);  ; virtual const char * GetMssUrl (Bool_t=kFALSE);  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgrLite.html:1386,inherit,inherited,1386,doc/master/classTProofMgrLite.html,https://root.cern,https://root.cern/doc/master/classTProofMgrLite.html,1,['inherit'],['inherited']
Modifiability,"ic Pixel_t fgDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TGCheckButton (const TGCheckButton &)=delete;  ; TGCheckButton & operator= (const TGCheckButton &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCheckButton.html:34714,inherit,inherited,34714,doc/master/classTGCheckButton.html,https://root.cern,https://root.cern/doc/master/classTGCheckButton.html,1,['inherit'],['inherited']
Modifiability,"ic Pixel_t fgDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TGRadioButton (const TGRadioButton &)=delete;  ; TGRadioButton & operator= (const TGRadioButton &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRadioButton.html:34819,inherit,inherited,34819,doc/master/classTGRadioButton.html,https://root.cern,https://root.cern/doc/master/classTGRadioButton.html,1,['inherit'],['inherited']
Modifiability,"ic Pixel_t fgDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TGTextLBEntry (const TGTextLBEntry &)=delete;  ; TGTextLBEntry & operator= (const TGTextLBEntry &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextLBEntry.html:26830,inherit,inherited,26830,doc/master/classTGTextLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextLBEntry.html,1,['inherit'],['inherited']
Modifiability,"ic Private Attributes; static TClonesArray * fgHitsA = nullptr;  ; static TClonesArray * fgHitsB = nullptr;  ; static TClonesArray * fgJets = nullptr;  ; static TClonesArray * fgTracks = nullptr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tree/JetEvent.h>. Inheritance diagram for JetEvent:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ JetEvent(). JetEvent::JetEvent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJetEvent.html:9841,inherit,inherited,9841,doc/master/classJetEvent.html,https://root.cern,https://root.cern/doc/master/classJetEvent.html,1,['inherit'],['inherited']
Modifiability,ic Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChebychev.html:70688,config,configuration,70688,doc/master/classRooChebychev.html,https://root.cern,https://root.cern/doc/master/classRooChebychev.html,13,['config'],['configuration']
Modifiability,"ic Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphNode.html:16425,inherit,inherited,16425,doc/master/classTGraphNode.html,https://root.cern,https://root.cern/doc/master/classTGraphNode.html,1,['inherit'],['inherited']
Modifiability,"ic Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void DrawDashPolyLine (Int_t npoints, TPoint *pt, UInt_t nDash, const char *pDash, const char *col, UInt_t thick);  draw dashed polyline ;  ; Int_t XtoPixel (Double_t x);  x to pixel ;  ; Int_t YtoPixel (Double_t y);  y to pixel ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TImage * fImage {nullptr};  Image. ;  ; Int_t fType {0};  PostScript workstation type. ;  ;  Protected Attributes inherited from TVirtualPS; char * fBuffer {nullptr};  ; const char * fImplicitCREsc {nullptr};  ; Int_t fLenBuffer {0};  ; Int_t fNByte {0};  ; Bool_t fPrinted {kFALSE};  ; Int_t fSizBuffer {0};  ; std::ofstream * fStream {nullptr};  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kIncons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImageDump.html:21306,inherit,inherited,21306,doc/master/classTImageDump.html,https://root.cern,https://root.cern/doc/master/classTImageDump.html,3,['inherit'],['inherited']
Modifiability,"ic Public Member Functions inherited from TBrowser; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:18649,inherit,inherited,18649,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,1,['inherit'],['inherited']
Modifiability,"ic Public Member Functions inherited from TGWidget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void DoRedraw () override;  Redraw TGColorSelect widget. ;  ; void DrawTriangle (GContext_t gc, Int_t x, Int_t y);  Draw triangle (arrow) on which user can click to open TGColorPopup. ;  ;  Protected Member Functions inherited from TGCheckButton; void EmitSignals (Bool_t wasUp=kTRUE) override;  Emit signals. ;  ; void Init ();  Common check button initialization. ;  ; void PSetState (EButtonState state, Bool_t emit);  Set check button state. ;  ;  Protected Member Functions inherited from TGTextButton; void DoRedraw () override;  Draw the text button. ;  ; void Init ();  Common initialization used by the different ctors. ;  ;  Protected Member Functions inherited from TGButton; virtual void SetToggleButton (Bool_t);  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorSelect.html:29935,inherit,inherited,29935,doc/master/classTGColorSelect.html,https://root.cern,https://root.cern/doc/master/classTGColorSelect.html,2,['inherit'],['inherited']
Modifiability,"ic Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; double fConfidenceLevel;  confidence level ;  ; RooAbsData * fParameterPointsInInterval;  either a histogram (RooDataHist) or a tree (RooDataSet) ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/PointSetInterval.h>. Inheritance diagra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1PointSetInterval.html:12096,inherit,inherited,12096,doc/master/classRooStats_1_1PointSetInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1PointSetInterval.html,1,['inherit'],['inherited']
Modifiability,"ic Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TQClass (const TClass &)=delete;  ; TQClass & operator= (const TQClass &)=delete;  . Friends; class TQObject;  . Additional Inherited Members;  Public Types inherited from TClass; enum  ECheckSum { ;   kCurrentCheckSum = 0; , kNoEnum = 1; , kReflexNoComment = 2; , kNoRange = 3; , ;   kWithTypeDef = 4; , kReflex = 5; , kNoRangeCheck = 6; , kNoBaseCheckSum = 7; , ;   kLatestCheckSum = 8. };  ; enum  ENewType { kRealNew = 0; , kClassNew; , kDummyNew; };  ; enum  EState { ;   kNoInfo; , kForwardDeclared; , kEmulated; , kInterpreted; , ;   kHasTClassInit; , kLoaded = kHasTClassInit; , kNamespaceForMeta. };  ; enum  EStatusBits { ;   kReservedLoading = (1ULL << ( 7 )); , kHasLocalHashMember = (1ULL << ( 14 )); , kIgnoreTObjectStreamer = (1ULL << ( 15 )); , kUnloaded = (1ULL << ( 16 )); , ;   kIsTObject = (1ULL << ( 17 )); , kIsForeign = (1ULL << ( 18 )); , kStartWithTObject = (1ULL << ( 20 )); , kWarned = (1ULL << ( 21 )); , ;   kHasNameMapNode = (1ULL << ( 22 )). };  ;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQClass.html:36790,inherit,inherited,36790,doc/master/classTQClass.html,https://root.cern,https://root.cern/doc/master/classTQClass.html,1,['inherit'],['inherited']
Modifiability,ic Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; RooArgSet * allDependents ();  Return all observables. ;  ; bool binGenData ();  If true binning of data between generating and fitting is requested. ;  ; RooArgSet * dependents ();  Return fit model observables. ;  ; bool extendedGen ();  If true extended mode generation is requested. ;  ; RooArgSet * fitInitParams ();  Return initial value of parameters of fit model. ;  ; RooAbsPdf * fitModel ();  Return fit model. ;  ; RooLinkedList * fitOptList ();  Return list of fit options provided by user. ;  ; RooArgSet * fitParams ();  Return current value of parameters of fit model. ;  ; RooAbsGenContext * genContext ();  ; RooArgSet * genInitParams ();  Return initial value of generator model parameters. ;  ; RooAbsPdf * genModel ();  Return generator pdf. ;  ; RooArgSet * genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMCStudyModule.html:11906,extend,extendedGen,11906,doc/master/classRooAbsMCStudyModule.html,https://root.cern,https://root.cern/doc/master/classRooAbsMCStudyModule.html,2,['extend'],"['extended', 'extendedGen']"
Modifiability,"ic Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void SetBins (const RooAbsCollection &coll, Int_t numBins) const;  ; void SetupBasicUsage ();  Constructor for automatic configuration with basic settings. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooArgList * fAxes;  which variables to put on each axis ;  ; RooArgSet fChainParams;  parameters to store in the chain (if not specified they are all of them ) ;  ; RooArgSet fConditionalObs;  conditional observables ;  ; RooAbsData * fData;  pointer to the data (owned by the workspace) ;  ; double fDelta = -1;  acceptable error for Keys cutoffs being equal topCutoff (a) considered == bottomCutoff (b) iff (std::abs(a - b) < std::abs(fDelta * (a + b)/2)); Theoretically, the Abs is not needed here, but floating-point arithmetic does not always work perfectly, and the Abs doesn't hurt ;  ; double fEpsilon = -1;  acceptable error for Keys interval determination ;  ; RooArgSet fGlobalObs;  global observables ;  ; enum MCMCInterval::IntervalType fIntervalType = MCMCInterval::kShortest;  ; double fLeftSideTF = -1;  left side tail-fraction for interv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html:14988,inherit,inherited,14988,doc/master/classRooStats_1_1MCMCCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html,1,['inherit'],['inherited']
Modifiability,"ic Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Point fEnd;  ; Double_t fR1 = 0.;  ; Double_t fR2 = 0.;  ; Point fStart;  ; EGradientType fType = kSimple;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TColor; Int_t fNumber;  Color number identifier. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TColorGradient.h>. Inheritance diagram for TRadialGradient:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EGradientType. enum TRadialGradient::EGradientType. EnumeratorkSimple ; kExtended . Definition at line 126 of file TColorGradient.h. Constructor & Destructor Documentation. ◆ TRadialGradient(). TRadialGradient::TRadialGradient ; (; ). inline . Definition at line 134 of file TColorGradient.h. Member Function Documentation. ◆ Class(). static TClass * TRadialGradient::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRadialGradient::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRadialGradient::Class_Version ; (; ). inlinestaticconstexpr . Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRadialGradient.html:21848,inherit,inherited,21848,doc/master/classTRadialGradient.html,https://root.cern,https://root.cern/doc/master/classTRadialGradient.html,1,['inherit'],['inherited']
Modifiability,"ic Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TString fAction;  action to be executed ;  ; Int_t fType;  button type ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TControlBarButton.h>. Inheritance diagram for TControlBarButton:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkButton ; kDrawnButton ; kSeparator . Definition at line 24 of file TControlBarButton.h. Constructor & Destructor Documentation. ◆ TControlBarButton() [1/2]. TControlBarButton::TControlBarButton ; (; ). Default control bar button ctor. ; Definition at line 36 of file TControlBarButton.cxx. ◆ TControlBarButton() [2/2]. TControlBa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBarButton.html:11583,inherit,inherited,11583,doc/master/classTControlBarButton.html,https://root.cern,https://root.cern/doc/master/classTControlBarButton.html,1,['inherit'],['inherited']
Modifiability,"ic Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Private Attributes; std::vector< Double_t > fX;  ; std::vector< Double_t > fY;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TSpline1.html:16913,inherit,inherited,16913,doc/master/classTMVA_1_1TSpline1.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TSpline1.html,2,['inherit'],['inherited']
Modifiability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; const TMatrixDBase & GetDecompMatrix () const override;  ;  Protected Member Functions inherited from TDecompBase; Int_t Hager (Double_t &est, Int_t iter=5);  ; void ResetStatus ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t * fIpiv;  ; Int_t fNIpiv;  ; TMatrixD fU;  ;  Protected Attributes inherited from TDecompBase; Int_t fColLwb;  ; Double_t fCondition;  ; Double_t fDet1;  ; Double_t fDet2;  ; Int_t fRowLwb;  ; Double_t fTol;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TDecompBase; enum  { kWorkMax = 100; };  ; enum  EMatrixDecompStat { ;   kInit = (1ULL << ( 14 )); , kPatternSet = (1ULL << ( 15 )); , kValuesSet = (1ULL << ( 16 )); , kMatrixSet =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBK.html:13502,inherit,inherited,13502,doc/master/classTDecompBK.html,https://root.cern,https://root.cern/doc/master/classTDecompBK.html,1,['inherit'],['inherited']
Modifiability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; TAttText fAttDate;  Canvas date attribute. ;  ; Int_t fAxisMaxDigits;  Number of digits above which the 10^N notation is used for axis. ;  ; Float_t fBarOffset;  Offset of bar for graphs. ;  ; Float_t fBarWidth;  Width of bar for graphs. ;  ; Double_t fCandleBoxRange;  Candle plot, The fraction which is covered by the box (0 < x < 1), default 0.5. ;  ; Bool_t fCandleScaled;  Candle plot, shall the box-width be scaled to each other by the integral of a box? ;  ; Double_t fCandleWhiskerRange;  Candle plot, the fraction which is covered by the whiskers (0 < x < 1), default 1. ;  ; Int_t fCanvasBorderMode;  Canvas border mode. ;  ; Width_t fCanvasBorderSize;  Canvas border size. ;  ; Color_t fCanvasColor;  Canvas color. ;  ; Int_t fCanvasDefH;  Default canvas height. ;  ; Int_t fCanvasDefW;  Default canvas width. ;  ; Int_t fCanvasDefX;  Default canvas top X posi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:35269,inherit,inherited,35269,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['inherit'],['inherited']
Modifiability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Types; enum  EAttrKinds { attrLine = 0x1; , attrFill = 0x2; , attrMarker = 0x4; , attrText = 0x8; };  !< object to store all painting More...;  . Private Member Functions;  TWebPS (const TWebPS &rhs)=delete;  ;  TWebPS (TWebPS &&rhs)=delete;  ; TWebPS & operator= (const TWebPS &rhs)=delete;  ; TWebPS & operator= (TWebPS &&rhs)=delete;  ; Float_t * StoreOperation (const std::string &oper, unsigned attrkind, int opersize=0);  . Private Attributes; std::unique_ptr< TWebPainting > fPainting;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPS.html:19162,inherit,inherited,19162,doc/master/classTWebPS.html,https://root.cern,https://root.cern/doc/master/classTWebPS.html,1,['inherit'],['inherited']
Modifiability,ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Bool_t fBoundingBox;  True when the SVG header is printed. ;  ; Bool_t fRange;  True when a range has been defined. ;  ; Int_t fType;  Workstation type used to know if the SVG is open. ;  ; Float_t fXsize;  Page size along X. ;  ; Float_t fYsize;  Page size along Y. ;  ; Double_t fYsizeSVG;  Page's Y size in SVG units. ;  ;  Protected Attributes inherited from TVirtualPS; char * fBuffer {nullptr};  ; const char * fImplicitCREsc {nullptr};  ; Int_t fLenBuffer {0};  ; Int_t fNByte {0};  ; Bool_t fPrinted {kFALSE};  ; Int_t fSizBuffer {0};  ; std::ofstream * fStream {nullptr};  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttF,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVG.html:22843,inherit,inherited,22843,doc/master/classTSVG.html,https://root.cern,https://root.cern/doc/master/classTSVG.html,1,['inherit'],['inherited']
Modifiability,ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Bool_t fBoundingBox;  True when the TeX header is printed. ;  ; Float_t fCurrentAlpha;  Current Alpha value. ;  ; Float_t fCurrentBlue;  Current Blue component. ;  ; Float_t fCurrentGreen;  Current Green component. ;  ; Float_t fCurrentRed;  Current Red component. ;  ; Float_t fLineScale;  Line width scale factor. ;  ; Bool_t fRange;  True when a range has been defined. ;  ; Bool_t fStandalone;  True when a TeX file should be standalone. ;  ; Int_t fType;  Workstation type used to know if the Tex is open. ;  ; Float_t fXsize;  Page size along X. ;  ; Float_t fYsize;  Page size along Y. ;  ;  Protected Attributes inherited from TVirtualPS; char * fBuffer {nullptr};  ; const char * fImplicitCREsc {nullptr};  ; Int_t fLenBuffer {0};  ; Int_t fNByte {0};  ; Bool_t fPrinted {kFALSE};  ; Int_t fSizBuffer {0};  ; std::ofstream * fStream {nullptr};  ;  Protected At,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTeXDump.html:22410,inherit,inherited,22410,doc/master/classTTeXDump.html,https://root.cern,https://root.cern/doc/master/classTTeXDump.html,1,['inherit'],['inherited']
Modifiability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t fAlpha;  Per cent of transparency. ;  ; std::vector< float > fAlphas;  List of alpha values used. ;  ; Float_t fBlue;  Per cent of blue. ;  ; Bool_t fCompress;  True when fBuffer must be compressed. ;  ; Float_t fGreen;  Per cent of green. ;  ; Float_t fLineScale;  Line width scale factor. ;  ; Int_t fNbObj {0};  Number of objects. ;  ; Int_t fNbPage;  Number of pages. ;  ; Int_t * fObjPos {nullptr};  Objects position. ;  ; Int_t fObjPosSize {0};  Real size of fObjPos. ;  ; Int_t fPageFormat;  Page format (A4, Letter etc ...) ;  ; Bool_t fPageNotEmpty;  True if the current page is not empty. ;  ; Int_t fPageOrientation;  Page orientation (Portrait, Landscape) ;  ; Bool_t fRange;  True when a range has been defined. ;  ; Float_t fRed;  Per cent of red. ;  ; Int_t fStartStream;  ; Int_t fType;  Workstation type used to know if the PDF is open. ;  ; Fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPDF.html:23593,inherit,inherited,23593,doc/master/classTPDF.html,https://root.cern,https://root.cern/doc/master/classTPDF.html,1,['inherit'],['inherited']
Modifiability,ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t fBlue;  Per cent of blue. ;  ; Bool_t fBoundingBox;  True for Encapsulated PostScript. ;  ; Bool_t fClear;  True when page must be cleared. ;  ; Int_t fClip;  Clipping mode. ;  ; Bool_t fClipStatus;  Clipping Indicator. ;  ; Int_t fCurrentColor;  current Postscript color index ;  ; Float_t fDXC;  ; Float_t fDYC;  ; TString fFileName;  PS file name. ;  ; Bool_t fFontEmbed;  True is FontEmbed has been called. ;  ; Float_t fFX;  ; Float_t fFY;  ; Float_t fGreen;  Per cent of green. ;  ; Int_t fIXzone;  Current zone along X. ;  ; Int_t fIYzone;  Current zone along Y. ;  ; Int_t fLastCellBlue;  Last blue value. ;  ; Int_t fLastCellGreen;  Last green value. ;  ; Int_t fLastCellRed;  Last red value. ;  ; Float_t fLineScale;  Line width scale factor. ;  ; Float_t fMarkerSizeCur;  current transformed value of marker size ;  ; Int_t fMaxLines;  Maximum number,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPostScript.html:32019,inherit,inherited,32019,doc/master/classTPostScript.html,https://root.cern,https://root.cern/doc/master/classTPostScript.html,1,['inherit'],['inherited']
Modifiability,ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; char * fBuffer {nullptr};  ; const char * fImplicitCREsc {nullptr};  ; Int_t fLenBuffer {0};  ; Int_t fNByte {0};  ; Bool_t fPrinted {kFALSE};  ; Int_t fSizBuffer {0};  ; std::ofstream * fStream {nullptr};  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPS.html:18903,inherit,inherited,18903,doc/master/classTVirtualPS.html,https://root.cern,https://root.cern/doc/master/classTVirtualPS.html,1,['inherit'],['inherited']
Modifiability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void DrawDashPolyLine (Int_t npoints, TPoint *pt, UInt_t nDash, const char *pDash, const char *col, UInt_t thick);  draw dashed polyline ;  ; Int_t XtoPixel (Double_t x);  x to pixel ;  ; Int_t YtoPixel (Double_t y);  y to pixel ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TImage * fImage {nullptr};  Image. ;  ; Int_t fType {0};  PostScript workstation type. ;  ;  Protected Attributes inherited from TVirtualPS; char * fBuffer {nullptr};  ; const char * fImplicitCREsc {nullptr};  ; Int_t fLenBuffer {0};  ; Int_t fNByte {0};  ; Bool_t fPrinted {kFALSE};  ; Int_t fSizBuffer {0};  ; std::ofstream * fStream {nullptr};  ;  Protected Attributes inherited from TNamed; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImageDump.html:20517,inherit,inherited,20517,doc/master/classTImageDump.html,https://root.cern,https://root.cern/doc/master/classTImageDump.html,1,['inherit'],['inherited']
Modifiability,ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Bool_t fDepthTest;  ; Line_t * fLastLine;  ; TEveChunkManager fLinePlex;  ; TEveChunkManager fMarkerPlex;  ; Bool_t fOwnLinesIds;  ; Bool_t fOwnMarkersIds;  ; Bool_t fRnrLines;  ; Bool_t fRnrMarkers;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fPar,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveStraightLineSet.html:36798,inherit,inherited,36798,doc/master/classTEveStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html,1,['inherit'],['inherited']
Modifiability,ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fCurrentScale;  ; Float_t fScaleCenter [3];  ;  Protected Attributes inherited from TEveStraightLineSet; Bool_t fDepthTest;  ; Line_t * fLastLine;  ; TEveChunkManager fLinePlex;  ; TEveChunkManager fMarkerPlex;  ; Bool_t fOwnLinesIds;  ; Bool_t fOwnMarkersIds;  ; Bool_t fRnrLines;  ; Bool_t fRnrMarkers;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEv,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:37625,inherit,inherited,37625,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,1,['inherit'],['inherited']
Modifiability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; RooDataSet * fChain = nullptr;  ; RooArgSet * fDataEntry = nullptr;  ; RooRealVar * fNLL = nullptr;  ; RooArgSet * fParameters = nullptr;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MarkovChain.html:13265,inherit,inherited,13265,doc/master/classRooStats_1_1MarkovChain.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MarkovChain.html,1,['inherit'],['inherited']
Modifiability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; std::unique_ptr< Factory > fClassifier;  ! ;  ; TString fFitType;  ! ;  ; Bool_t fFoldStatus;  ! ;  ; TString fFomType;  ! ;  ; UInt_t fNumFolds;  ! ;  ; HyperParameterOptimisationResult fResults;  ! ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Envelope;  Envelope (const TString &name, DataLoader *dataloader=nullptr, TFile *file=nullptr, const TString options="""");  Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoader",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:14500,inherit,inherited,14500,doc/master/classTMVA_1_1HyperParameterOptimisation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html,1,['inherit'],['inherited']
Modifiability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Double_t fX = 0.;  Abscissa. ;  ; Double_t fY = 0.;  Constant term. ;  . Private Member Functions; void CopyPoly (TSplinePoly const &other);  Utility called by the copy constructors and = operator. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpline.h>. Inheritance diagram for TSplinePoly:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera inst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSplinePoly.html:9442,inherit,inherited,9442,doc/master/classTSplinePoly.html,https://root.cern,https://root.cern/doc/master/classTSplinePoly.html,1,['inherit'],['inherited']
Modifiability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; union { ;  ;    TStreamerInfoAction_t   fAction ;  ;    TStreamerInfoLoopAction_t   fLoopAction ;  ;    TStreamerInfoVecPtrLoopAction_t   fVecPtrLoopAction ;  ; };  ;  ; TConfiguration * fConfiguration;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TStreamerInfoActions.h>. Inheritance diagram for TStreamerInfoActions::TConfiguredAction:. This browser is not able to show SVG: t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html:9886,inherit,inherited,9886,doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,1,['inherit'],['inherited']
Modifiability,"ic TImage * Open (const char *name, const TVectorD &imageData, UInt_t width, TImagePalette *palette=nullptr);  Open an image with the specified data in a TVectorD. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttImage; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; EImageFileTypes GetFileType (const char *ext);  Return file type depending on specified extension. ;  ; void MapFileTypes (EImageFileTypes &type, UInt_t &astype, Bool_t toas=kTRUE);  Map file type to/from AfterImage types. ;  ; void MapQuality (EImageQuality &quality, UInt_t &asquality, Bool_t toas=kTRUE);  Map quality to/from AfterImage quality. ;  ;  Protected Member Functions inherited from TImage;  TImage ();  ;  TImage (const char *file);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Bool_t InitVisual ();  Static function to initialize the ASVisual. ;  . Protected Attributes; Bool_t fEditable;  ! kTRUE image can be resized, moved by resizi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:26205,inherit,inherited,26205,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['inherit'],['inherited']
Modifiability,"ic TImage * Open (const char *name, const TVectorD &imageData, UInt_t width, TImagePalette *palette=nullptr);  Open an image with the specified data in a TVectorD. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttImage; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TImage ();  ;  TImage (const char *file);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Friends; TImage operator+ (const TImage &i1, const TImage &s2);  ; TImage operator/ (const TImage &i1, const TImage &s2);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttImage; Bool_t fConstRatio {kFALSE};  keep aspect ratio of image on the screen ;  ; UInt_t fImageCompression {0};  compression [0 .. 100] 0: no compression ;  ; EImageQuality fImageQuality {kImgDefault};  OPTION={GetMethod=""GetImageQuality""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImage.html:20157,inherit,inherited,20157,doc/master/classTImage.html,https://root.cern,https://root.cern/doc/master/classTImage.html,1,['inherit'],['inherited']
Modifiability,"ic TObject::(anonymous)TObject::kZombie. protected:. Bool_tTAttImage::fConstRatiokeep aspect ratio of image on the screen; Bool_tfEditable! kTRUE image can be resized, moved by resizing/moving gPad; ASImage*fGrayImage! gray image; ASImage*fImage! pointer to image structure of original image; UInt_tTAttImage::fImageCompressioncompression [0 .. 100] 0: no compression; TAttImage::EImageQualityTAttImage::fImageQuality*OPTION={GetMethod=""GetImageQuality"";SetMethod=""SetImageQuality"";Items=(kImgDefault=""Default"",kImgPoor=""Poor"",kImgFast=""Fast"",kImgGood=""Good"",kImgBest=""Best"")}*; Bool_tfIsGray! kTRUE if image is gray; Double_tfMaxValue! max value in image; Double_tfMinValue! min value in image; TStringTNamed::fNameobject identifier; Int_tfPaintMode! 1 - fast mode, 0 - low memory slow mode; TImagePaletteTAttImage::fPalettecolor palette for value -> color conversion; TPaletteEditor*TAttImage::fPaletteEditor! GUI to edit the color palette; Bool_tTAttImage::fPaletteEnabled! kTRUE - palette is drawn on the image; TASImage*fScaledImage! temporary scaled and zoomed image produced from original image; TStringTNamed::fTitleobject title; UInt_tfZoomHeight! hight of zoomed image in image pixels; UInt_tfZoomOffX! X - offset for zooming in image pixels; UInt_tfZoomOffY! Y - offset for zooming im image pixels; Int_tfZoomUpdate! kZoom - new zooming required, kZoomOps - other ops in action, kNoZoom - no zooming or ops; UInt_tfZoomWidth! width of zoomed image in image pixels; static Bool_tfgInitglobal flag to init afterimage only once; static THashTable*fgPlugList! hash table containing loaded plugins; static ASVisual*fgVisualpointer to visual structure. private:. static TASImage::(anonymous)kNoZoom; static TASImage::(anonymous)kReadWritePNG; static TASImage::(anonymous)kReadWriteVector; static TASImage::(anonymous)kZoom; static TASImage::(anonymous)kZoomOps. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DestroyImage(); Destroy image. void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TASImage.html:20811,plugin,plugins,20811,root/html602/TASImage.html,https://root.cern,https://root.cern/root/html602/TASImage.html,2,['plugin'],['plugins']
Modifiability,"ic TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TFormula::(anonymous)kLinear; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TFormula::(anonymous)kNormalized; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. map<TString,Double_t>fConsts!; TStringfFormula; list<TFormulaFunction>fFuncs!; map<TString,TString>fFunctionsShortcuts!; vector<TObject*>fLinearPartsvector of linear functions; TStringTNamed::fNameobject identifier; Int_tfNdim!; Int_tfNpar!; Int_tfNumber!; map<TString,Int_t,TFormulaParamOrder>fParamslist of parameter names; TStringTNamed::fTitleobject title; map<TString,TFormulaVariable>fVars! list of variable names; static TFormula::(anonymous)kNotGlobal. private:. Bool_tfAllParametersSettedflag to control if all parameters are setted; Bool_tfClingInitialized! transient to force re-initialization; TStringfClingInput! input function passed to Cling; TStringfClingName! unique name passed to Cling to define the function ( double clingName(double*x, double*p) ); vector<Double_t>fClingParametersparameter values; vector<Double_t>fClingVariables! cached variables; TInterpreter::CallFuncIFacePtr_t::Generic_tfFuncPtr! function pointer; TMethodCall*fMethod! pointer to methocall; Bool_tfReadyToExecute!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t IsOperator(const char c); operator "":"" must be handled separatly. Bool_t IsBracket(const char c). Bool_t IsFunctionNameChar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFormula.html:9257,variab,variable,9257,root/html604/TFormula.html,https://root.cern,https://root.cern/root/html604/TFormula.html,1,['variab'],['variable']
Modifiability,"ic TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TProofResourcesStatic::EInfoTypekHost; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TProofResourcesStatic::EInfoTypekNodeType; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TProofResourcesStatic::EInfoTypekOption; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTProofResources::fValidkTRUE if resource information was processed correctly. private:. TStringfFileNameConfig file name; Bool_tfFoundMasterkTRUE if config file has master info; TProofNodeInfo*fMasterMaster node info; TList*fSubmasterListNode info list with all submasters; TList*fWorkerListNode info list with all workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResourcesStatic(); This ctor is used in TProofServ::Setup() in combination with GetWorkDir(); for a quick scan of the config file to retrieve the work directory. TProofResourcesStatic(const char* confDir, const char* fileName); Using this ctor will retrieve all information in the config file; and store it in fMaster, fSubmasterList and fWorkerList,; condorworkers will be stored in the fWorkerList. ~TProofResourcesStatic(); Destructor. void InitResources(); Create master node info and submaster/worker lists,; and set default values. TProofNodeInfo * GetMaster(); Get the master node. Only return the master info if it was set; in the config file. TList * GetSubmasters(); Get the list of submaster nodes. TList * GetWorkers(void); Get the list of worker nodes. Bool_t ReadConfigF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofResourcesStatic.html:7013,config,config,7013,root/html602/TProofResourcesStatic.html,https://root.cern,https://root.cern/root/html602/TProofResourcesStatic.html,2,['config'],['config']
Modifiability,"ic TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TLeaf::(anonymous)TLeaf::kNewValue; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Float_tfMaximumMaximum value if leaf range is specified; Float_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Float_t**fPointer!Addresss of pointer to data buffer!; TStringTNamed::fTitleobject title; Float_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafF(); Default constructor for LeafF*-*-*-*-*-*-*-*-; *-* ============================. TLeafF(TBranch* parent, const char* name, const char* type); Create a LeafF*-*-; *-* ==============; -. ~TLeafF(); Default destructor for a LeafF*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLeafF.html:7728,variab,variable,7728,root/html602/TLeafF.html,https://root.cern,https://root.cern/root/html602/TLeafF.html,2,['variab'],['variable']
Modifiability,"ic TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. static Int_tRooPrintable::_nameLength; Bool_tRooStats::SamplingDistPlot::fApplyStyle; Style_tRooStats::SamplingDistPlot::fFillStyle; TH1F*RooStats::SamplingDistPlot::fHist; RooListRooStats::SamplingDistPlot::fItemsholds TH1Fs only; TIterator*RooStats::SamplingDistPlot::fIteratorTODO remove class variable and instantiate locally as necessary; TLegend*RooStats::SamplingDistPlot::fLegend; Bool_tRooStats::SamplingDistPlot::fLogXaxis; Bool_tRooStats::SamplingDistPlot::fLogYaxis; TStringTNamed::fNameobject identifier; RooListRooStats::SamplingDistPlot::fOtherItemsother objects to be drawn like TLine etc.; RooPlot*RooStats::SamplingDistPlot::fRooPlot; TStringTNamed::fTitleobject title; doubleRooStats::SamplingDistPlot::fXMax; doubleRooStats::SamplingDistPlot::fXMin; doubleRooStats::SamplingDistPlot::fYMax; doubleRooStats::SamplingDistPlot::fYMin. private:. RooStats::HypoTestResult*fHypoTestResult. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestPlot(RooStats::HypoTestResult& result, Int_t bins = 100, Option_t* opt = ""NORMALIZE HIST""). HypoTestPlot(RooStats::HypoTestResult& result, Int_t bins, Double_t min, Double_t max, Option_t* opt = ""NORMALIZE HIST""). void ApplyResult(RooStats::HypoTestResult& result, Option_t* opt = ""NORMALIZE HIST"").",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestPlot.html:11243,variab,variable,11243,root/html602/RooStats__HypoTestPlot.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestPlot.html,2,['variab'],['variable']
Modifiability,"ic TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. atomic<TApplication*>fApplicationPointer to current application; Bool_tfBatchTrue if session without graphics; TList*fBrowsablesList of browsables; TSeqCollection*fBrowsersList of browsers; Int_tfBuiltDateDate of ROOT built; Int_tfBuiltTimeTime of ROOT built; TSeqCollection*fCanvasesList of canvases; TCollection*fClassGeneratorsList of user defined class generators;; TCollection*fClassesList of classes definition; TSeqCollection*fCleanupsList of recursiveRemove collections; TSeqCollection*fClipboardList of clipbard objects; TSeqCollection*fClosedObjectsList of closed objects from the list of files and sockets, so we can delete them if neededCl.; TSeqCollection*fColorsList of colors; TStringfConfigFeaturesROOT ./configure detected build features; TStringfConfigOptionsROOT ./configure set build options; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TStringfCutClassNameName of default CutG class in graphics editor; TSeqCollection*fDataSetsList of data sets (TDSet or TChain); TStringfDefCanvasNameName of default canvas; Bool_tfEditHistogramsTrue if histograms can be edited with the mouse; Int_tfEditorModeCurrent Editor mode; TROOT::AListOfEnums_tfEnumsList of enum types; Bool_tfEscapeTrue if ESC has been pressed; Bool_tfExecutingMacroTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TListOfFunctionTemplates*fFuncTemplateList of global function templates; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:18051,config,configure,18051,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['config'],['configure']
Modifiability,"ic TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html:44597,config,configuration,44597,root/html602/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html,4,['config'],['configuration']
Modifiability,"ic TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooCategoryProxy_rhoQ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooNonCPEigenDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxy_wQ; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNonCPEigenDecay.html:42251,config,configuration,42251,root/html528/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html528/RooNonCPEigenDecay.html,1,['config'],['configuration']
Modifiability,"ic Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodPDEFoam (const TString &jobName, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption=""PDEFoam"");  init PDEFoam objects ;  ;  MethodPDEFoam (DataSetInfo &dsi, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodPDEFoam (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  create XML output of PDEFoam method variables ;  ; const Ranking * CreateRanking ();  Compute ranking of input variables from the number of cuts made in each PDEFoam dimension. ;  ; EKernel GetKernel (void);  ; const std::vector< Float_t > & GetMulticlassValues ();  Get the multiclass MVA response for the PDEFoam classifier. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  Return Mva-Value. ;  ; void GetNCuts (PDEFoamCell *cell, std::vector< UInt_t > &nCuts);  Fill in 'nCuts' the number of cuts made in every foam dimension, starting at the root cell 'cell'. ;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  Return regression values for both multi- and mono-target regression. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  PDEFoam can handle classification with multiple classes and r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html:2477,variab,variables,2477,doc/master/classTMVA_1_1MethodPDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html,2,['variab'],['variables']
Modifiability,"ic Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooHypoSpace.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooHypoSpace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooHypoSpace::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Versio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:17958,inherit,inherited,17958,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,2,['inherit'],['inherited']
Modifiability,"ic bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  Same limits and bins. ;  . Protected Attributes; Double_t fTsumwxy;  Total Sum of weight*X*Y. ;  ; Double_t fTsumwxz;  Total Sum of weight*X*Z. ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ; Double_t fTsumwyz;  Total Sum of weight*Y*Z. ;  ; Double_t fTsumwz;  Total Sum of weight*Z. ;  ; Double_t fTsumwz2;  Total Sum of weight*Z*Z. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:54087,inherit,inherited,54087,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,1,['inherit'],['inherited']
Modifiability,"ic const TGGC & GetActiveGC ();  Return default graphics context in use. ;  ; static const TGGC & GetColorGC ();  Return graphics context for highlighted frame background. ;  ; static FontStruct_t GetDefaultFontStruct ();  Return default font structure in use. ;  ; static const TGGC & GetDrawGC ();  Return default graphics context in use. ;  ; static Pixel_t GetGrayPixel ();  Return gray draw color in use. ;  ; static const TGGC & GetHighlightGC ();  Return graphics context for highlighted frame background. ;  ; static const TGGC & GetLineGC ();  Return graphics context in use for line drawing. ;  ;  Static Protected Member Functions inherited from TGContainer; static const TGGC & GetLineGC ();  Get graphics context for line drawing. ;  ;  Static Protected Member Functions inherited from TGFrame; static Time_t GetLastClick ();  Get time of last mouse click. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; GContext_t fActiveGC;  activated (selected) drawing context ;  ; Bool_t fAutoCheckBoxPic;  change check box picture if parent and children have diffrent state ;  ; Bool_t fAutoTips;  assume item->fUserData is TObject and use GetTitle() for t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:41933,inherit,inherited,41933,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['inherit'],['inherited']
Modifiability,"ic const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TGeoNode ** fArray;  ; Int_t fLevel;  ; TGeoHMatrix fMatrix;  ; Int_t fMaxLevel;  ; TGeoNode * fRealArray [1];  [fMaxLevel+1] Array of nodes ;  . Private Member Functions;  TGeoBranchArray (const TGeoBranchArray &);  Copy constructor. Not callable anymore. Use TGeoBranchArray::MakeCopy instead. ;  ;  TGeoBranchArray (Int_t level);  Constructor. Allocates the array with a size given by level. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGeoBranchArray.h>. Inheritance diagram for TGeoBranchArray:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EGeoBATypes. enum TGeoBranchArray::EGeoBATypes. EnumeratorkBASelfAlloc . Definition at line 34 of file TGeoBranchArray.h. Constructor & Destructor Documentation. ◆ TGeoBranchArray() [1/3]. TGeoBranchArray::TGeoBranchArray ; (; Int_t ; level). private . Constructor. Allocates the array with a size given by level. ; Definition at line 41 of file TGeoBranchArray.cxx. ◆ TGeoBranchArray() [2/3]. TGeoBranchArray::TGeoBranchArray ; (; const TGeoBranchArray & ; other). private . Copy constructor. Not callable anymore. Use TGeoBranchArray::MakeCopy instead. ; Definition at line 156 of file TGeoBranchArray.cxx. ◆ TGeoBr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBranchArray.html:13712,inherit,inherited,13712,doc/master/classTGeoBranchArray.html,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html,2,['inherit'],['inherited']
Modifiability,"ic const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TText; void * fWcsTitle {nullptr};  !Used by TMathText ;  ; Double_t fX {0};  X position of text (left,center,etc..) ;  ; Double_t fY {0};  Y position of text (left,center,etc..) ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Inheritance diagram for TMathTextRenderer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMathTextRenderer(). TMathTextRenderer::TMathTextRenderer ; (; TMathText * ; parent). inline . Definition at line 114 of file TMathText.cxx. Member Function Documentation. ◆ bounding_box() [1/2]. mathtext::bounding_box_t TMathTextRenderer::bounding_box ; (; const std::wstring ; string, . const unsigned int ; family = FAMILY_PLAIN . ). inlineoverride . Definition at line 270 of file TMathText.cxx. ◆ bounding_box() [2/2]. mathtext::bounding_box_t TMathTextRenderer::bounding_box ; (; const wchar_t ; character, . float & ; current_x, . const unsigned int ; family . ). inline . Definition at line 226 of file TMathText.cxx. ◆ filled_rectangle(). void TMathTextRenderer::filled_rectangle ; (; const mathtext::bounding_box_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMathTextRenderer.html:21271,inherit,inherited,21271,doc/master/classTMathTextRenderer.html,https://root.cern,https://root.cern/doc/master/classTMathTextRenderer.html,1,['inherit'],['inherited']
Modifiability,"ic const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TPointSet3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TPolyMarker3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void PaintH3 (TH1 *h, Option_t *option);  Paint 3-d histogram h with 3-d polymarkers. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class (); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:39196,inherit,inherited,39196,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,6,['inherit'],['inherited']
Modifiability,"ic const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TString fDimensions;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TSchemaRule.h>. Inheritance diagram for ROOT::TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSchemaRule_1_1TSources.html:10083,inherit,inherited,10083,doc/master/classROOT_1_1TSchemaRule_1_1TSources.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule_1_1TSources.html,1,['inherit'],['inherited']
Modifiability,"ic const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TString fClassName;  ; FileStat_t fFileStat;  ; Bool_t fIsFolder;  ; TString fKeyClassName;  ; TString fKeyObjectName;  ; Long64_t fRemoteAddress;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRemoteObject.h>. Inheritance diagram for TRemoteObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRemoteObject.html:11128,inherit,inherited,11128,doc/master/classTRemoteObject.html,https://root.cern,https://root.cern/doc/master/classTRemoteObject.html,1,['inherit'],['inherited']
Modifiability,"ic const char * DeclFileName ();  . Additional Inherited Members;  Public Types inherited from TPave; enum  { kNameIsAction = (1ULL << ( 11 )); };  ;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TPaveText; TString fLabel;  Label written at the top of the pavetext. ;  ; TList * fLines {nullptr};  List of labels. ;  ; Int_t fLongest;  Length of the longest line. ;  ; Float_t fMargin;  Text margin. ;  ;  Protected Attributes inherited from TPave; Int_t fBorderSize;  window box bordersize in pixels ;  ; Double_t fCornerRadius;  Corner radius in case of option arc. ;  ; Int_t fInit;  (=0 if transformation to NDC not yet done) ;  ; TString fName;  Pave name. ;  ; TString fOption;  Pave style. ;  ; Int_t fShadowColor;  Color of the pave's shadow. ;  ; Double_t fX1NDC;  X1 point in NDC coordinates. ;  ; Double_t fX2NDC;  X2 point in NDC coordinates. ;  ; Double_t fY1NDC;  Y1 point in NDC coordinates. ;  ; Double_t fY2NDC;  Y2 point in NDC coordinates. ;  ;  Protected Attributes inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDiamond.html:23864,inherit,inherited,23864,doc/master/classTDiamond.html,https://root.cern,https://root.cern/doc/master/classTDiamond.html,2,['inherit'],['inherited']
Modifiability,"ic const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void * GetSender () override;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; const TClass * fClass;  ; Int_t * fCnts;  ; Bool_t fDerived;  ; Long_t fMessId;  ; Long_t * fMessIds;  ; const TObject * fMessObj;  ; Int_t fSize;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Prote",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessageHandler.html:15451,inherit,inherited,15451,doc/master/classTMessageHandler.html,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html,2,['inherit'],['inherited']
Modifiability,"ic const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/roofit/roofitcore/src/RooRealMPFE.h>. Inheritance diagram for RooRealMPFE:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ Message. enum RooRealMPFE::Message. protected . EnumeratorSendReal ; SendCat ; Calculate ; Retrieve ; ReturnValue ; Terminate ; ConstOpt ; Verbose ; LogEvalError ; ApplyNLLW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealMPFE.html:62411,inherit,inherited,62411,doc/master/classRooRealMPFE.html,https://root.cern,https://root.cern/doc/master/classRooRealMPFE.html,1,['inherit'],['inherited']
Modifiability,"ic const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Int_t fAxis;  ; Int_t fNdiv;  ;  Protected Attributes inherited from TNode; TRotMatrix * fMatrix;  ; TList * fNodes;  ; TString fOption;  ; TNode * fParent;  ; TShape * fShape;  ; Int_t fVisibility;  ; Double_t fX;  ; Double_t fY;  ; Double_t fZ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TNode; enum  { kSonsInvisible = (1ULL << ( 17 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TNode;  TNode (const TNode &);  copy constructor ;  ; TNode & operator= (const TNode &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNodeDiv.html:17321,inherit,inherited,17321,doc/master/classTNodeDiv.html,https://root.cern,https://root.cern/doc/master/classTNodeDiv.html,1,['inherit'],['inherited']
Modifiability,"ic constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; typedef std::unique_ptr< TGLHistPainter > Painter_t;  ; typedef std::unique_ptr< TF2 > Ptr_t;  . Private Member Functions;  TGLParametricEquation (const TGLParametricEquation &);  ; TGLParametricEquation & operator= (const TGLParametricEquation &);  . Private Attributes; Bool_t fConstrained;  ; ParametricEquation_t fEquation;  ; Bool_t fModified;  ; Painter_t fPainter;  ; Rgl::Range_t fURange;  ; Rgl::Range_t fVRange;  ; Ptr_t fXEquation;  ; Ptr_t fYEquation;  ; Ptr_t fZEquation;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGLParametric.h>. Inheritance diagram for TGLPar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLParametricEquation.html:12437,inherit,inherited,12437,doc/master/classTGLParametricEquation.html,https://root.cern,https://root.cern/doc/master/classTGLParametricEquation.html,1,['inherit'],['inherited']
Modifiability,"ic constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGXYLayout (const TGXYLayout &);  copy constructor ;  ; TGXYLayout & operator= (const TGXYLayout &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fFirst;  flag to determine the first call of Layout() ;  ; UInt_t fFirstHeight;  original height of the frame fMain ;  ; UInt_t fFirstWidth;  original width of the frame fMain ;  ; TList * fList;  list of frames to arrange ;  ; TGCompositeFrame * fMain;  container frame ;  ; Int_t fTHeight;  text height ;  ; Int_t fTWidth;  text width of a default character ""1234567890"" / 10 ;  ;  Protected Attributes inherited from TGLayoutManager; Bool_t fModified;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGXYLayout.html:11848,inherit,inherited,11848,doc/master/classTGXYLayout.html,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html,1,['inherit'],['inherited']
Modifiability,"ic constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TRFunctionImport (const Rcpp::Function &fun);  TRFunctionImport constructor for Rcpp::DataFrame. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Rcpp::Function * f;  . Friends; TRFunctionImport Rcpp::as (SEXP);  ; SEXP Rcpp::wrap (const TRFunctionImport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TRFunctionImport.h>. Inheritance diagram for ROOT::R::TRFunctionImport:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRFunctionImport() [1/6]. ROOT::R::TRFunctionImport::TRFunctionImport ; (; const Rcpp::Function & ; fun). inlineprotected . TRFunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:14394,inherit,inherited,14394,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html,1,['inherit'],['inherited']
Modifiability,"ic constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void SaveSource (FILE *fp);  Save macro source in file pointer fp. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TList * fLines;  ; TString fParams;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacro.html:12936,inherit,inherited,12936,doc/master/classTMacro.html,https://root.cern,https://root.cern/doc/master/classTMacro.html,1,['inherit'],['inherited']
Modifiability,"ic dimensions of source and dest spectra. . Transform methods;  ; Goal: to analyze experimental; data using orthogonal transforms; �        ; orthogonal transforms can be successfully used for the processing of; nuclear spectra (not only) ; �        ; they can be used to remove high frequency noise, to increase; signal-to-background ratio as well as to enhance low intensity components [1],; to carry out e.g. Fourier analysis etc. ; �        ; we have implemented the function for the calculation of the commonly; used orthogonal transforms as well as functions for the filtration and; enhancement of experimental data;  ; Function:; void TSpectrumTransform2::Transform(const; float **fSource,; float **fDest);  ; This function transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions:;  ; Member variables of; TSpectrumTransform2 class:; fSource-pointer; to the matrix of source spectrum. Its lengths should be equal to the �fSizex,; fSizey� parameters except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transforms. These need �2*fSizex*fSizey� length to supply real and imaginary; coefficients. ������������������; fDest-pointer; to the matrix of destination spectrum. Its lengths should be equal to the; �fSizex, fSizey� parameters except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transforms. These need �2*fSizex*fSizey� length to store real and imaginary; coefficients. ; ������� fSizeX,fSizeY-basic; lengths of the source and dest spectra. They should; be power �; �����; of 2.; fType-type of transform; ����������� Classic transforms:; ����������������������� kTransformHaar. ����������������������� kTransformWalsh. ����������������������� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFour",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Transform.html:14445,variab,variables,14445,root/html528/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Transform.html,4,['variab'],['variables']
Modifiability,"ic map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Bool_t_doFloorIntroduce floor at zero in pdf; static Bool_t_doFloorGlobalGlobal flag for introducing floor at zero in pdf; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_extendedAllow use as extended p.d.f.; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TIterator*_funcIter! Iterator over FU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealSumPdf.html:40845,extend,extended,40845,root/html534/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html534/RooRealSumPdf.html,1,['extend'],['extended']
Modifiability,"ic method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:42466,inherit,inherited,42466,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,8,['inherit'],['inherited']
Modifiability,"ic player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package ;  robot.CDrawing a famous Korean robot, TaekwonV, using ROOT geometry class ;  rootgeom.CDefinition of a simple geometry (the 4 ROOT characters) ;  runplugin.CCreates and runs a simple iterator plugin connected to TGeoPainter iterator ;  shapes.CThe old geometry shapes (see script geodemo.C) ;  shapesAnim.CMacro illustrating how to animate a geometry picture using a Timer ;  south_gate.CDrawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class ;  station1.CDrawing a space station, using ROOT geometry class ;  station2.CDrawing a space station (version 2), using ROOT geometry class ;  tank.CDrawing a fine tank, using ROOT geometry class ;  xtruDraw.CDraw a ""representative"" TXTRU shape ;  xtruSamples.CDraw a sample of TXTRU shapes some convex, concave (and possibly malformed) ;  ► gl;  customcolorgl.h;  glbox.CDisplay a 3D histogram using GL (box option) ;  gldemos.CMenu for running GL demos ;  glh3c.CDisplay a 3D histogram using GL (box option) ;  glparametric.CShow rendering of parametric surfaces ;  glparametrics2.CShow rendering of parametric surfaces ;  glrose.CRender a TF2 looking like a rose ;  glsurfaces.CVarious surfaces rendered with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:110279,plugin,plugin,110279,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['plugin'],['plugin']
Modifiability,"ic void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGExpModel.html:63869,inherit,inherited,63869,doc/master/classRooGExpModel.html,https://root.cern,https://root.cern/doc/master/classRooGExpModel.html,1,['inherit'],['inherited']
Modifiability,"ic void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool canComputeBatchWithCuda () const override;  ; void doEval (RooFit::EvalContext &) const override;  Compute multiple values of BifurGauss distribution. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:59067,inherit,inherited,59067,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['inherit'],['inherited']
Modifiability,"ic void SortSingular (TMatrixD &v, TMatrixD &u, TVectorD &sDiag);  Perform a permutation transformation on the diagonal matrix S', so that matrix S'' = U''^T . ;  ;  Static Protected Member Functions inherited from TDecompBase; static void DiagProd (const TVectorD &diag, Double_t tol, Double_t &d1, Double_t &d2);  . Protected Attributes; TVectorD fSig;  ; TMatrixD fU;  ; TMatrixD fV;  ;  Protected Attributes inherited from TDecompBase; Int_t fColLwb;  ; Double_t fCondition;  ; Double_t fDet1;  ; Double_t fDet2;  ; Int_t fRowLwb;  ; Double_t fTol;  . Additional Inherited Members;  Protected Types inherited from TDecompBase; enum  { kWorkMax = 100; };  ; enum  EMatrixDecompStat { ;   kInit = (1ULL << ( 14 )); , kPatternSet = (1ULL << ( 15 )); , kValuesSet = (1ULL << ( 16 )); , kMatrixSet = (1ULL << ( 17 )); , ;   kDecomposed = (1ULL << ( 18 )); , kDetermined = (1ULL << ( 19 )); , kCondition = (1ULL << ( 20 )); , kSingular = (1ULL << ( 21 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TDecompSVD.h>. Inheritance diagram for TDecompSVD:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkWorkMax . Definition at line 43 of file TDecompSVD.h. Constructor & Destructor Documentation. ◆ TDecompSVD() [1/5]. TDecompSVD::TDecompSVD ; (; ). inline . Definition at line 45 of file TDecompSVD.h. ◆ TDecompSVD() [2/5]. TDecompSVD::TDecompSVD ; (; Int_t ; nrows, . Int_t ; ncols . ). Constructor for (nrows x ncols) matrix. ; Definition at line 52 of file TDecompSVD.cxx. ◆ TDecompSVD() [3/5]. TDecompSVD::TDecompSVD ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb . ). Constructor for ([row_lwb..row_upb] x [col_lwb..col_upb]) matrix. ; Definition at line 66 of file TDecompSVD.cxx. ◆ TDecompSVD() [4/5]. TDecompSVD::TDecompSVD ; (; const TMatrixD & ; m, . Double_t ; tol = 0.0 . ).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSVD.html:15897,inherit,inherited,15897,doc/master/classTDecompSVD.html,https://root.cern,https://root.cern/doc/master/classTDecompSVD.html,1,['inherit'],['inherited']
Modifiability,"ic:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. TString_bnameName of the binning specification to be used to perform the mapping; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsCategory::_byteValue! Transient cache for byte values from tree branches; deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooRealProxy_inputVarInput variable that is mapped; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBinningCategory.html:21599,variab,variable,21599,root/html534/RooBinningCategory.html,https://root.cern,https://root.cern/root/html534/RooBinningCategory.html,1,['variab'],['variable']
Modifiability,"icLoopConfig*)loopconf;; 2489 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2490 Int_t nvalues = proxy->Size();; 2491 ; 2492 TConfSTLWithFactor *conf = (TConfSTLWithFactor *)config;; 2493 ; 2494 From *items = new From[nvalues];; 2495 buf.ReadFastArrayWithFactor(items, nvalues, conf->fFactor, conf->fXmin);; 2496 Converter<From,To>::ConvertAction(items,start,end,loopconfig,config);; 2497 delete [] items;; 2498 return 0;; 2499 }; 2500 };; 2501 ; 2502 template <typename From, typename To, template <typename F, typename T> class Converter >; 2503 struct ConvertBasicType<NoFactorMarker<From>,To,Converter > {; 2504 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config); 2505 {; 2506 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2507 ; 2508 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2509 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2510 Int_t nvalues = proxy->Size();; 2511 ; 2512 TConfSTLNoFactor *conf = (TConfSTLNoFactor *)config;; 2513 ; 2514 From *items = new From[nvalues];; 2515 buf.ReadFastArrayWithNbits(items, nvalues, conf->fNbits);; 2516 Converter<From,To>::ConvertAction(items,start,end,loopconfig,config);; 2517 delete [] items;; 2518 return 0;; 2519 }; 2520 };; 2521 ; 2522 static INLINE_TEMPLATE_ARGS Int_t ReadBase(TBuffer &buf, void *start, const void *end, const TLoopConfiguration * loopconfig, const TConfiguration *config); 2523 {; 2524 // Well the implementation is non trivial since we do not have a proxy for the container of _only_ the base class. For now; 2525 // punt.; 2526 ; 2527 return GenericRead(buf,start,end,loopconfig, config);; 2528 }; 2529 ; 2530 static INLINE_TEMPLATE_ARGS Int_t GenericRead(TBuffer &buf, void *, const void *, const TLoopConfiguration * loopconf, const TConfiguration *config); 2531 {; 2532 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2533 TVirtualCollectionProxy ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:101562,config,config,101562,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['config'],['config']
Modifiability,"icMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 62 of file Minimizer.cxx. ◆ SetVariableUpperLimit(). bool ROOT::Math::Minimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). virtual . set the upper-limit of an already existing variable ; Reimplemented in ROOT::Math::BasicMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 78 of file Minimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::Minimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; value . ). virtual . set the value of an already existing variable ; Reimplemented in TFumiliMinimizer, ROOT::Math::BasicMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 53 of file Minimizer.cxx. ◆ SetVariableValues(). virtual bool ROOT::Math::Minimizer::SetVariableValues ; (; const double * ; x). inlinevirtual . set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ; Reimplemented in ROOT::Minuit2::Minuit2Minimizer, and ROOT::Math::BasicMinimizer.; Definition at line 187 of file Minimizer.h. ◆ Status(). int ROOT::Math::Minimizer::Status ; (; ); const. inline . status code of minimizer ; Definition at line 310 of file Minimizer.h. ◆ Strategy(). int ROOT::Math::Minimizer::Strategy ; (; ); const. inline . strategy ; Definition at line 307 of file Minimizer.h. ◆ Tolerance(). double ROOT::Math::Minimizer::Tolerance ; (; ); const. inline . absolute tolerance ; Definition at line 300 of file Minimizer.h. ◆ VariableIndex(). int ROOT::Math::Minimizer::VariableIndex ; (; const std::string & ; name); const. virtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented in ROOT::Math::BasicMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 232 of file Minimizer.cxx. ◆ VariableName(). std::string ROOT::Math::Minimizer::VariableName ; (; unsigned int ; ivar); cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:34878,variab,variables,34878,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['variab'],['variables']
Modifiability,"icMinimizer, TLinearMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer. ◆ NCalls(). virtual unsigned int ROOT::Math::Minimizer::NCalls ; (; ); const. inlinevirtual . number of function calls to reach the minimum ; Reimplemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, ROOT::Math::GSLSimAnMinimizer, TLinearMinimizer, TMinuitMinimizer, ROOT::Minuit2::Minuit2Minimizer, and ROOT::Math::RMinimizer.; Definition at line 228 of file Minimizer.h. ◆ NDim(). virtual unsigned int ROOT::Math::Minimizer::NDim ; (; ); const. pure virtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::BasicMinimizer, TLinearMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer. ◆ NFree(). virtual unsigned int ROOT::Math::Minimizer::NFree ; (; ); const. inlinevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ; Reimplemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::BasicMinimizer, TLinearMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 240 of file Minimizer.h. ◆ NIterations(). virtual unsigned int ROOT::Math::Minimizer::NIterations ; (; ); const. inlinevirtual . number of iterations to reach the minimum ; Definition at line 231 of file Minimizer.h. ◆ operator=() [1/2]. Minimizer & ROOT::Math::Minimizer::operator= ; (; Minimizer && ; ). delete . ◆ operator=() [2/2]. Minimizer & ROOT::Math::Minimizer::operator= ; (; Minimizer const & ; ). delete . ◆ Options(). virtual MinimizerOptions ROOT::Math::Minimizer::Options ; (; ); const. inlinevirtual . retrieve the minimizer options (implement derived class if needed) ; Reimplemented in ROOT::Math::GeneticMinimizer.; Definition at line 323 of file Minimizer.h. ◆ Precision",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:23750,variab,variables,23750,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['variab'],['variables']
Modifiability,"ical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::IOptions::SetValuevoid SetValue(const char *name, double val)generic methods for retrieving optionsDefinition IOptions.h:42; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetExtraOptionsvoid SetExtraOptions(const IOptions &opt)set extra options (in this case pointer is cloned)Definition MinimizerOptions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimizer option parameters. ;  ; unsigned int NCalls () const override;  number of calls ;  ; void SetParameters (const GSLSimAnParams &params);  set new minimizer option parameters using directly the GSLSimAnParams structure ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:2251,inherit,inherited,2251,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,1,['inherit'],['inherited']
Modifiability,"ical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:1570,variab,variables,1570,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['variab'],['variables']
Modifiability,"ically a TLegend from the; primitives in a TPad. Only those deriving from TAttLine,; TAttMarker and TAttFill are added, excluding TPave and TFrame; derived classes. x1, y1, x2, y2 are the TLegend coordinates.; title is the legend title. By default it is "" "". The caller; program owns the returned TLegend. If the pad contains some TMultiGraph or THStack the individual; graphs or histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See TPad::Divide for the convention to number subpads.; Returns the new current pad, or 0 in case of failure.; For example:; c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do; c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; points to the current pad. One can use gPad to set attributes; of the current pad.; Note3: One can get a pointer to one of the sub-pads of pad with:; TPad *subpad = (TPad*)pad->GetPad(subpadnumber);. void Clear(Option_t* option = """"); Delete all pad primitives. If the bit kClearAfterCR has been set for this pad, the Clear function; will execute only after having pressed a CarriageReturn; Set the bit with mypad->SetBit(TPad::kClearAfterCR). Int_t Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); Clipping routine: Cohen Sutherland algorithm. If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. _Input parameters:. x[2], y[2] : Segment coordinates; xclipl, yclipb, xclipr, yclipt : Clipping boundary. _Output parameters:. x[2], y[2] : New segment coordinates. Int_t Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xcl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPad.html:33302,variab,variable,33302,root/html534/TPad.html,https://root.cern,https://root.cern/root/html534/TPad.html,3,['variab'],['variable']
Modifiability,"icance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit too strong correlations. . Definition at line 111 of file MethodBase.h. Public Types; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption=""""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:1979,variab,variables,1979,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['variab'],['variables']
Modifiability,"icated list and / or the specified file. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Private Attributes; TCondor * fCondor;  ; TTimer * fTimer;  . Friends; class TCondor;  . Additional Inherited Members;  Public Types inherited from TProof; enum  EProofClearData { kPurge = 0x1; , kUnregistered = 0x2; , kDataset = 0x4; , kForceClear = 0x8; };  ; enum  EQueryMode { kSync = 0; , kAsync = 1; };  ; enum  ERegisterOpt { kFailIfExists = 0; , kOverwriteIfExists = 1; , kMergeIfExists = 2; };  ; enum  ERunStatus { kRunning = 0; , kStopped = 1; , kAborted = 2; };  ; enum  EStatusBits { ;   kUsingSessionGui = (1ULL << ( 14 )); , kNewInputData = (1ULL << ( 15 )); , kIsClient = (1ULL << ( 16 )); , kIsMaster = (1ULL << ( 17 )); , ;   kIsTopMaster = (1ULL << ( 18 )); , kUseProgressDialog = (1ULL << ( 19 )). };  ; enum  ESubMerger { ;   kOutputSize = 1; , kSendOutput = 2; , kBeMerger = 3; , kMergerDown = 4; , ;   kStopMerging = 5; , kOutputSent = 6. };  ; enum  EUploadOpt { ;   kAppend = 0x1; , kOverwri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:38854,inherit,inherited,38854,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['inherit'],['inherited']
Modifiability,"ication and not literally (with minor exceptions). Applications such as \(\mbox{MIGRAD}\) have a corresponding class MnMigrad, M “commands” became classes or methods of classes according to their purpose. Users familiar with the version of M , who have not yet used releases from the version, should however read this manual, in order to adapt to the changes as well as to discover the new features and easier ways of using old features.; 3.2 Install M using autoconf/make; For each release of M a tar.gz file is provided for downloading from the M homepage @bib-C++MINUIT. For non-UNIX platforms please refer to the M homepage.; The necessary steps to follow are:. download the tar.gz by clicking on it from the release page; unzip it:; $ unzip Minuit-x.x.x.tar.gz; untar it:; $ tar xvf Minuit-x.x.x.tar; step down to the created Minuit-x.x.x directory:; $ cd Minuit-x.x.x/; run the “configure” script:; $ ./configure; run “make” to compile the source code:; $ make; run “make check” to create the executable example:; $ make check; run the executable example:; $ tests/MnTutorial/Quad4FMain.C. The output should look like that:; Minuit did successfully converge. # of function calls: 74; minimum function value: 1.12392e-09; minimum edm: 1.12392e-09; minimum internal state vector: LAVector parameters:. -1.82079e-05; -1.20794e-05; 6.22382e-06; -3.0465e-05. minimum internal covariance matrix: LASymMatrix parameters:. 4 1 2 2.70022e-18; 1 5 3 1.87754e-17; 2 3 6 2.29467e-17; 2.70022e-18 1.87754e-17 2.29467e-17 1. # ext. || name || type || value || error +/-. 0 || x || free ||-1.821e-05 || 2; 1 || y || free ||-1.208e-05 || 2.236; 2 || z || free || 6.224e-06 || 2.449; 3 || w || free ||-3.047e-05 || 1. MnUserCovariance:. 4 1 2 2.70022e-18; 1 5 3 1.87754e-17; 2 3 6 2.29467e-17; 2.70022e-18 1.87754e-17 2.29467e-17 1. MnUserCovariance parameter correlations:. 1 0.223607 0.408248 1.35011e-18; 0.223607 1 0.547723 8.39663e-18; 0.408248 0.547723 1 9.36796e-18; 1.35011e-18 8.39663e-18 9.36796e-18 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:27996,config,configure,27996,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['config'],['configure']
Modifiability,"ication.cxx. ◆ OpenReferenceGuideFor(). void TApplication::OpenReferenceGuideFor ; (; const TString & ; strippedClass). It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ; If the user types incorrect value, it will return an error or warning.; Parameters. [in]strippedClassthe scope or scope::member . Definition at line 1065 of file TApplication.cxx. ◆ operator=(). TApplication & TApplication::operator= ; (; const TApplication & ; ). privatedelete . ◆ ParseRemoteLine(). Int_t TApplication::ParseRemoteLine ; (; const char * ; ln, . TString & ; hostdir, . TString & ; user, . Int_t & ; dbg, . TString & ; script . ). staticprotected . Parse the content of a line starting with "".R"" (already stripped-off) The format is. ; [user@]host[:dir] [-l user] [-d dbg] [script]; d#define d(i)Definition RSha256.hxx:102; lTLine lDefinition textangle.C:4; The variable 'dir' is the remote directory to be used as working dir. The username can be specified in two ways, ""-l"" having the priority (as in ssh). A 'dbg' value > 0 gives increasing verbosity. The last argument 'script' allows to specify an alternative script to be executed remotely to startup the session. ; Definition at line 1419 of file TApplication.cxx. ◆ ProcessFile(). Longptr_t TApplication::ProcessFile ; (; const char * ; file, . Int_t * ; error = nullptr, . Bool_t ; keep = kFALSE . ). virtual . Process a file containing a C++ macro. ; Definition at line 1720 of file TApplication.cxx. ◆ ProcessLine(). Longptr_t TApplication::ProcessLine ; (; const char * ; line, . Bool_t ; sync = kFALSE, . Int_t * ; err = nullptr . ). virtual . Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ; Return the return value of the command cast to a long. ; Reimplemented in TApplicationServer, and TApplicationRemote.; Definition at line 1565 of file TApplication.cxx. ◆ ProcessRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:34497,variab,variable,34497,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['variab'],['variable']
Modifiability,"icense was not compatible with LGPL. It is now replaced by the CDT package which is properly maintained and has a license (MLP) compatible with LGPL. 3D Graphics Libraries; REve. Introduce lightweight visualization of instanced shapes on the level of 100.000 instances. This is integrated in digit visualization of the type REveBoxSet. List of typed instances are boxes, hexagons, and cones. The digit sets support different types of transformation: positioning, rotation, and scaling in different combinations. With the digit set a palette GUI interface has also been added to enable setting digits threshold and value to color mapping. REveBoxSet screenshot with cone shape type. The set is using value to color map with overflow and underflow mark. The single REveBoxet object has a secondary selection enabled, where one can set a custom tooltip on mouse hover of an individual instance. Update version of RenderCore to fix tone mapping of transparent objects. PROOF Libraries; By default, PROOF is not configured and built any more. It will be deprecated in the future given that its functionality is now provided by the superior RDataFrame and its distributed version, DistRDF.; PyROOT; PyROOT was rebased on the latest version of the cppyy library. This means PyROOT benefits from many upstream improvements and fixes, for example related to the conversion of NumPy arrays to vectors, implicit conversion from nested Python tuples to nested initializer lists, and improved overload resolution.; Related to this cppyy upgrade, there are some changes in PyROOT behavior.; Different representation of std::string; Calling repr() on a cppyy.gbl.std.string object now comes with a “b” prefix, i.e. a bytes object is returned instead of a Python string. This is an intentional change for better unicode support.; See: https://github.com/root-project/root/issues/15153#issuecomment-2040504962; No more implicit conversion of static size char buffer to Python strings; A static size character buffer of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:19214,config,configured,19214,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['config'],['configured']
Modifiability,"ich are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.empty()) ? 0 : &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Oct 25 16:28:55 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/minuit:$Id: TLinearMinimizer.h 34753 2010-08-10 10:02:27Z moneta $ » Last generated: 2010-10-04 18:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearMinimizer.html:6814,variab,variables,6814,root/html528/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html528/TLinearMinimizer.html,3,['variab'],"['variable', 'variables']"
Modifiability,"ich are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.empty()) ? 0 : &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Oct 25 16:28:55 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/minuit:$Id: TLinearMinimizer.h 34753 2010-08-10 10:02:27Z moneta $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLinearMinimizer.html:7162,variab,variables,7162,root/html530/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html530/TLinearMinimizer.html,3,['variab'],"['variable', 'variables']"
Modifiability,"ich are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.empty()) ? 0 : &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Oct 25 16:28:55 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/minuit:$Id: TLinearMinimizer.h 34753 2010-08-10 10:02:27Z moneta $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLinearMinimizer.html:7162,variab,variables,7162,root/html532/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html532/TLinearMinimizer.html,3,['variab'],"['variable', 'variables']"
Modifiability,"ich improves over the uncorrelated cuts ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix.; . Other optimisation criteria, such as maximising the signal significance-; squared, S^2/(S+B), with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion.; . The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand).; ; Technically, optimisation is achieved in TMVA by two methods:; ; Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results; . Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima.; . The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway.; Decorrelated (or ""diagonalized"") Cuts. See class description for Method Likelihood for a detailed explanation.; . Function Members (Methods); public:. virtual~MethodCuts(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:1623,variab,variable,1623,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,5,['variab'],['variable']
Modifiability,"ich improves over the uncorrelated cuts ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix.; . Other optimisation criteria, such as maximising the signal significance-; squared, S^2/(S+B), with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion.; . The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand).; ; Technically, optimisation is achieved in TMVA by two methods:; ; Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results; . Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima.; . The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway.; Decorrelated (or ""diagonalized"") Cuts. See class description for Method Likelihood for a detailed explanation.; ; . Function Members (Methods); public:. virtual~MethodCuts(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodCuts.html:1623,variab,variable,1623,root/html534/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodCuts.html,1,['variab'],['variable']
Modifiability,"ich is obtained from inverting the cumulative posterior distribution. This calculator works then only for model with a single parameter of interest. The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function. The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT. See the MCMCCalculator for model with multiple parameters of interest.; The interface allows one to construct the class by passing the data set, probability density function for the model, the prior functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..); After configuring the calculator, one only needs to ask GetInterval(), which will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by scanning the posterior function in the given number of points. The first method is in general faster but it requires an integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be less robust.; The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using the GetPosteriorPlot method.; The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of this meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:1725,config,configuring,1725,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['config'],['configuring']
Modifiability,"ich must be non-negative but does not need to be normalized over the; variables to be generated, genVars. The function and its dependents are; cloned and so will not be disturbed during the generation process. ~RooAcceptReject(); Destructor. const RooArgSet * generateEvent(UInt_t remaining, Double_t& resampleRatio); Return a pointer to a generated event. The caller does not own the event and it; will be overwritten by a subsequent call. The input parameter 'remaining' should; contain your best guess at the total number of subsequent events you will request. const RooArgSet * nextAcceptedEvent(); Scan through events in the cache which have not been used yet,; looking for the first accepted one which is added to the specified; container. Return a pointer to the accepted event, or else zero; if we use up the cache before we accept an event. The caller does; not own the event and it will be overwritten by a subsequent call. void addEventToCache(); Add a trial event to our cache and update our estimates; of the function maximum value and integral. Double_t getFuncMax(); Empirically determine maximum value of function by taking a large number; of samples. The actual number depends on the number of dimensions in which; the sampling occurs. RooAcceptReject(); {}. RooAcceptReject(const RooAbsReal& func, const RooArgSet& genVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0). RooAbsNumGenerator* clone(const RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& , const RooNumGenConfig& config, Bool_t verbose = kFALSE, const RooAbsReal* maxFuncVal = 0) const. Bool_t canSampleConditional() const; Advertisement of capabilities. { return kTRUE ; }. Bool_t canSampleCategories() const; { return kTRUE ; }. » Last changed: Mon Dec 7 13:45:52 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAcceptReject.html:11018,config,config,11018,root/html526/RooAcceptReject.html,https://root.cern,https://root.cern/root/html526/RooAcceptReject.html,2,['config'],['config']
Modifiability,"ich this interval is based; You do not own the returned MarkovChain*. { return fChain; }. RooDataSet* GetChainAsDataSet(RooArgSet* whichVars = NULL); Get a clone of the markov chain on which this interval is based; as a RooDataSet. You own the returned RooDataSet*. { return fChain->GetAsDataSet(whichVars); }. const RooDataSet* GetChainAsConstDataSet(); Get the markov chain on which this interval is based; as a RooDataSet. You do not own the returned RooDataSet*. { return fChain->GetAsConstDataSet(); }. RooDataHist* GetChainAsDataHist(RooArgSet* whichVars = NULL); Get a clone of the markov chain on which this interval is based; as a RooDataHist. You own the returned RooDataHist*. { return fChain->GetAsDataHist(whichVars); }. THnSparse* GetChainAsSparseHist(RooArgSet* whichVars = NULL); Get a clone of the markov chain on which this interval is based; as a THnSparse. You own the returned THnSparse*. { return fChain->GetAsSparseHist(whichVars); }. RooRealVar* GetNLLVar() const; Get a clone of the NLL variable from the markov chain. { return fChain->GetNLLVar(); }. RooRealVar* GetWeightVar() const; Get a clone of the weight variable from the markov chain. { return fChain->GetWeightVar(); }. void SetEpsilon(Double_t epsilon); set the acceptable level or error for Keys interval determination. void SetIntervalType(RooStats::MCMCInterval::IntervalType intervalType); Set the type of interval to find. This will only have an effect for; 1-D intervals. If is more than 1 parameter of interest, then a; ""shortest"" interval will always be used, since it generalizes directly; to N dimensions. { fIntervalType = intervalType; }. enum IntervalType GetIntervalType(); Return the type of this interval. { return fIntervalType; }. void SetLeftSideTailFraction(Double_t a); set the left-side tail fraction for a tail-fraction interval. { fLeftSideTF = a; }. void SetDelta(Double_t delta); kbelasco: The inner-workings of the class really should not be exposed; like this in a comment, but it seems",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MCMCInterval.html:17440,variab,variable,17440,root/html528/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html528/RooStats__MCMCInterval.html,4,['variab'],['variable']
Modifiability,"icitly ;  ; std::map< TString, std::vector< TreeInfo > > fInputTrees;  list of input trees per class (classname is given as first parameter in the map) ;  ; MsgLogger * fLogger;  ! message logger ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMVA/DataInputHandler.h>. Inheritance diagram for TMVA::DataInputHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ DataInputHandler(). TMVA::DataInputHandler::DataInputHandler ; (; ). constructor ; Definition at line 51 of file DataInputHandler.cxx. ◆ ~DataInputHandler(). TMVA::DataInputHandler::~DataInputHandler ; (; ). destructor ; Definition at line 60 of file DataInputHandler.cxx. Member Function Documentation. ◆ AddBackgroundTree() [1/2]. void TMVA::DataInputHandler::AddBackgroundTree ; (; const TString & ; tr, . Double_t ; weight = 1.0, . Types::ETreeType ; tt = Types::kMaxTreeType . ). add a background tree to the dataset to be used as input ; Definition at line 142 of file DataInputHandler.cxx. ◆ AddBackgrou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html:12559,inherit,inherited,12559,doc/master/classTMVA_1_1DataInputHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html,2,['inherit'],['inherited']
Modifiability,"ick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from THashTable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfTypes.html:13955,inherit,inherited,13955,doc/master/classTListOfTypes.html,https://root.cern,https://root.cern/doc/master/classTListOfTypes.html,1,['inherit'],['inherited']
Modifiability,"ick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Ranking.html:1593,variab,variable,1593,root/html604/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html604/TMVA__Ranking.html,1,['variab'],['variable']
Modifiability,"ick access to stored histograms ;  ; MsgLogger * fLogger;  ! message logger ;  ; TList * fStorage;  -> stores all the result-histograms ;  ; Types::ETreeType fTreeType;  tree type for this result ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMVA/Results.h>. Inheritance diagram for TMVA::Results:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Results() [1/2]. TMVA::Results::Results ; (; const DataSetInfo * ; dsi, . TString ; resultsName . ). constructor ; Definition at line 52 of file Results.cxx. ◆ Results() [2/2]. TMVA::Results::Results ; (; ). Definition at line 62 of file Results.cxx. ◆ ~Results(). TMVA::Results::~Results ; (; ). virtual . destructor ; Definition at line 76 of file Results.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Results::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Results::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Results.html:10886,inherit,inherited,10886,doc/master/classTMVA_1_1Results.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Results.html,2,['inherit'],['inherited']
Modifiability,"ick);  Draw wide line. ;  ; void FillRectangleInternal (UInt_t col, Int_t x, Int_t y, UInt_t width, UInt_t height);  Fill rectangle of size (width, height) at position (x,y) within the existing image with specified color. ;  ; void GetFillAreaSpans (UInt_t npt, TPoint *ppt, UInt_t *nspans, TPoint **firstPoint, UInt_t **firstWidth);  ; Bool_t GetPolygonSpans (UInt_t npt, TPoint *ppt, UInt_t *nspans, TPoint **firstPoint, UInt_t **firstWidth);  The code is based on Xserver/mi/mipolycon.c ""Copyright 1987, 1998 The Open Group"". ;  ; Int_t Idx (Int_t idx);  Return a valid index in fImage tables to avoid seg-fault by accessing out of indices out of array's ranges. ;  ; void SetDefaults ();  Set default parameters. ;  ; const char * TypeFromMagicNumber (const char *file);  Guess the file type from the first byte of file. ;  . Additional Inherited Members;  Public Types inherited from TImage; enum  ECharType { kUTF8 = 0; , kChar = 1; , kUnicode = 4; };  ; enum  EColorChan { ;   kRedChan = (1ULL << ( 0 )); , kGreenChan = (1ULL << ( 1 )); , kBlueChan = (1ULL << ( 2 )); , kAlphaChan = (1ULL << ( 3 )); , ;   kAllChan = kRedChan | kGreenChan | kBlueChan | kAlphaChan. };  ; enum  ECoordMode { kCoordModeOrigin = 0; , kCoordModePrevious; };  ; enum  EImageFileTypes { ;   kXpm = 0; , kZCompressedXpm; , kGZCompressedXpm; , kPng; , ;   kJpeg; , kXcf; , kPpm; , kPnm; , ;   kBmp; , kIco; , kCur; , kGif; , ;   kTiff; , kXbm; , kFits; , kTga; , ;   kXml; , kUnknown; , kAnimGif. };  ; enum  EText3DType { ;   kPlain = 0; , kEmbossed; , kSunken; , kShadeAbove; , ;   kShadeBelow; , kEmbossedThick; , kSunkenThick; , kOutlineAbove; , ;   kOutlineBelow; , kOutlineFull; , k3DTypes. };  ; enum  ETileType { kStretch = 0; , kTile; , kStretchY; , kStretchX; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:31498,inherit,inherited,31498,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['inherit'],['inherited']
Modifiability,"ick; static TObject::EStatusBitsTObject::kHasUUID; static TBuffer::(anonymous)kInitialSize; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TBuffer::(anonymous)kIsOwner; static TObject::EStatusBitsTObject::kIsReferenced; static TBuffer::(anonymous)kMinimalSize; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TBuffer::EModekRead; static TObject::(anonymous)TObject::kSingleKey; static TBuffer::EModekWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. char*fBufCurCurrent position in buffer; char*fBufMaxEnd of buffer; Int_tfBufSizeSize of buffer; char*fBufferBuffer used to store objects; TBuffer::CacheList_tfCacheStackStack of pointers to the cache where to temporarily store the value of 'missing' data members; Bool_tfModeRead or write mode; TObject*fParentPointer to parent object owning this buffer; ReAllocCharFun_tfReAllocFunc! Realloc function to be used when extending the buffer.; Int_tfVersionBuffer format version. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBuffer(EMode mode); Create an I/O buffer object. Mode should be either TBuffer::kRead or; TBuffer::kWrite. By default the I/O buffer has a size of; TBuffer::kInitialSize (1024) bytes. TBuffer(TBuffer::EMode mode, Int_t bufsiz); Create an I/O buffer object. Mode should be either TBuffer::kRead or; TBuffer::kWrite. TBuffer(TBuffer::EMode mode, Int_t bufsiz, void* buf, Bool_t adopt = kTRUE, ReAllocCharFun_t reallocfunc = 0); Create an I/O buffer object. Mode should be either TBuffer::kRead or; TBuffer::kWrite. By default the I/O buffer has a size of; TBuffer::kInitialSize (1024) bytes. An external buffer can be passed; to TBuffer via the buf arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBuffer.html:17599,extend,extending,17599,root/html602/TBuffer.html,https://root.cern,https://root.cern/root/html602/TBuffer.html,2,['extend'],['extending']
Modifiability,"ics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDNDManager.html:5434,inherit,inherits,5434,doc/master/classTGDNDManager.html,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html,6,['inherit'],['inherits']
Modifiability,"ics to freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; Model is self normalized when used as p.d.f. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset). const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Mon Dec 7 13:45:55 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:47930,extend,extendMode,47930,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,2,['extend'],"['extendMode', 'extended']"
Modifiability,"ictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed proper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:22667,config,configuration,22667,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['config'],['configuration']
Modifiability,"ictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins. string AddNormFactor(RooWorkspace* , string& , string& , RooStats::HistFactory::EstimateSummary& , bool ). void AddEfficiencyTerms(RooWorkspace* proto, string prefix, string interpName, map<string,pair<double,double> > systMap, vector<string>& likelihoodTermNames, vector<string>& totSystTermNames); add variables for all the relative overall uncertainties we expect; range is set using defined macro (see top of the page); string range=""[0,-1,1]"";. void MakeTotalExpected(RooWorkspace* proto, string totName, string , string , int lowBin, int highBin, vector<string>& syst_x_expectedPrefixNames, vector<string>& normByNames); for ith bin calculate totN_i = lumi * sum_j expected_j * syst_j. void AddPoissonTerms(RooWorkspace* proto, string prefix, string obsPrefix, string expPrefix, int lowBin, int highBin, vector<string>& likelihoodTermNames). Relate observables to expected for each bin; later modify variable named expPrefix_i to be product of terms. void SetObsToExpected(RooWorkspace* proto, string obsPrefix, string expPrefix, int lowBin, int highBin). set observed to expected. void Customize(RooWorkspace* proto, const char* pdfNameChar, map<string,string> renameMap). void EditSyst(RooWorkspace* proto, const char* pdfNameChar, map<string,double> gammaSyst, map<string,double> uniformSyst, map<string,double> logNormSyst); cout << ""in edit, gammamap.size = "" << gammaSyst.size() << "", unimap.size = "" << uniformSyst.size() << endl;. void PrintCovarianceMatrix(RooFitResult* result, RooArgSet* params, string filename); FILE * pFile;. RooWorkspace* MakeSingleChannelModel(vector<RooStats::HistFactory::EstimateSummary> summary, vector<string> systToFix, bool doRatio = false). RooWorkspace* MakeCombinedModel(vector<string> , vector<RooWorkspace*> ). void FitModel(RooWorkspace* , string , string , string , bool = false). void FormatFrameForLikelihood(RooPlot* frame, string XTitle = string",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html:9793,variab,variable,9793,root/html530/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/root/html530/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,1,['variab'],['variable']
Modifiability,"id ); FDA training. void PrintResults(const TString& , vector<Double_t>& , const Double_t ) const; display fit parameters; check maximum length of variable name. Double_t EstimatorFunction(vector<Double_t>& ); compute estimator for given parameter set (to be minimised); const Double_t sumOfWeights[] = { fSumOfWeightsSig, fSumOfWeightsBkg, fSumOfWeights };. Double_t InterpretFormula(const TMVA::Event* , vector<double>::iterator begin, vector<double>::iterator end); formula interpretation. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. const std::vector<Float_t>& GetRegressionValues(). const std::vector<Float_t>& GetMulticlassValues(). void CalculateMulticlassValues(const TMVA::Event*& evt, vector<Double_t>& parameters, vector<Float_t>& values); calculate the values for multiclass. void ReadWeightsFromStream(istream& i); read back the training results from a file (stream). void AddWeightsXMLTo(void* parent) const; create XML description for LD classification and regression; (for arbitrary number of output classes/targets). void ReadWeightsFromXML(void* wghtnode); read coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write FDA-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodFDA(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. void CheckSetup(); no check of options at this place. {}. » Author: Andreas Hoecker, Peter Speckmayer » Copyright (c) 2005-2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodFDA.html:21907,variab,variables,21907,root/html604/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodFDA.html,1,['variab'],['variables']
Modifiability,"id ); FDA training. void PrintResults(const TString& , vector<Double_t>& , const Double_t ) const; display fit parameters; check maximum length of variable name. Double_t EstimatorFunction(vector<Double_t>& ); compute estimator for given parameter set (to be minimised); const Double_t sumOfWeights[] = { fSumOfWeightsSig, fSumOfWeightsBkg, fSumOfWeights };. Double_t InterpretFormula(const TMVA::Event* , vector<double>::iterator begin, vector<double>::iterator end); formula interpretation. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. const std::vector<Float_t>& GetRegressionValues(). const std::vector<Float_t>& GetMulticlassValues(). void CalculateMulticlassValues(const TMVA::Event*& evt, vector<Double_t>& parameters, vector<Float_t>& values); calculate the values for multiclass. void ReadWeightsFromStream(istream& i); read back the training results from a file (stream). void AddWeightsXMLTo(void* parent) const; create XML description for LD classification and regression; (for arbitrary number of output classes/targets). void ReadWeightsFromXML(void* wghtnode); read coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write FDA-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodFDA(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. void CheckSetup(); no check of options at this place. {}. » Author: Andreas Hoecker, Peter Speckmayer » Copyright (c) 2005-2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodFDA.html:21899,variab,variables,21899,root/html602/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodFDA.html,1,['variab'],['variables']
Modifiability,"id *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:2013; TStreamerInfoActions::VectorLooper::ConvertCollectionBasicTypeDefinition TStreamerInfoActions.cxx:1985; TStreamerInfoActions::VectorLooper::ConvertCollectionBasicType::Actionstatic Int_t Action(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:1986; TStreamerInfoActions::VectorLooperDefinition TStreamerInfoActions.cxx:1719; TStreamerInfoActions::VectorLooper::ReadActionstatic Int_t ReadAction(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config)Definition TStreamerInfoActions.cxx:1823; TStreamerInfoActions::VectorLooper::WriteBasicTypestatic Int_t WriteBasicType(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config)Definition TStreamerInfoActions.cxx:1810; TStreamerInfoActions::VectorLooper::GenericWritestatic Int_t GenericWrite(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config)Definition TStreamerInfoActions.cxx:1888; TStreamerInfoActions::VectorLooper::ReadCollectionDouble32static Int_t ReadCollectionDouble32(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:1958; TStreamerInfoActions::VectorLooper::ConvertCollectionDouble32static Int_t ConvertCollectionDouble32(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:2039; TStreamerInfoActions::VectorLooper::ReadCollectionBasicTypestatic Int_t ReadCollectionBasicType(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:1905; TStreamerInfoActions::VectorLooper::ReadBasicTypestatic Int_t ReadBasicType(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config)Definition TStreamerInfoActions.cxx:1722; TStreamerInfoActions::VectorLooper::ReadBasestatic Int_t ReadBase(TBuffer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:273890,config,config,273890,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['config'],['config']
Modifiability,"id *node)XML helpers.Definition Tools.cxx:1174; TMVA::Tools::WriteTVectorDToXMLvoid WriteTVectorDToXML(void *node, const char *name, TVectorD *vec)Definition Tools.cxx:1259; TMVA::Tools::xmlengineTXMLEngine & xmlengine()Definition Tools.h:262; TMVA::Tools::Scalevoid Scale(std::vector< Double_t > &, Double_t)scales double vectorDefinition Tools.cxx:519; TMVA::Tools::CheckSplinesBool_t CheckSplines(const TH1 *, const TSpline *)check quality of splining by comparing splines and histograms in each binDefinition Tools.cxx:479; TMVA::Tools::GetNameconst char * GetName(void *node)XML helpers.Definition Tools.cxx:1182; TMVA::Tools::GetCorrelationMatrixconst TMatrixD * GetCorrelationMatrix(const TMatrixD *covMat)turns covariance into correlation matrixDefinition Tools.cxx:324; TMVA::Tools::WriteTMatrixDToXMLvoid WriteTMatrixDToXML(void *node, const char *name, TMatrixD *mat)XML helpers.Definition Tools.cxx:1243; TMVA::Tools::GetCorrelationRatioDouble_t GetCorrelationRatio(const TH2F &)Compute Correlation Ratio of 2D histogram to estimate functional dependency between two variables Aut...Definition Tools.cxx:620; TMVA::Tools::ReadAttrvoid ReadAttr(void *node, const char *, T &value)read attribute from xmlDefinition Tools.h:329; TMVA::Tools::fgToolsstatic std::atomic< Tools * > fgToolsDefinition Tools.h:229; TMVA::Tools::AddCommentBool_t AddComment(void *node, const char *comment)Definition Tools.cxx:1132; TMVA::Tools::ReadTMatrixDFromXMLvoid ReadTMatrixDFromXML(void *node, const char *name, TMatrixD *mat)Definition Tools.cxx:1276; TMVA::Tools::GetXTitleWithUnitTString GetXTitleWithUnit(const TString &title, const TString &unit)histogramming utilityDefinition Tools.cxx:1040; TMVA::Tools::GetChildvoid * GetChild(void *parent, const char *childname=nullptr)get child nodeDefinition Tools.cxx:1150; TMVA::Tools::AddAttrvoid AddAttr(void *node, const char *, const T &value, Int_t precision=16)add attribute to xmlDefinition Tools.h:347; TMVA::Tools::ECitationECitationDefinition Tools",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:78346,variab,variables,78346,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['variab'],['variables']
Modifiability,"id *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TNamed.h>; Inherits TObject.; Inherited by TProofVectorContainer< TProofDrawListOfGraphs::Point3D_t >, TProofVectorContainer< TProofDrawListOfPolyMarkers3D::Point4D_t >, MonitoredTFileSummary, ROOT::Experimental::REveGeoShapeExtract, ROOT::Experimental::XRooFit::xRooFit::StoredFitResult, ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoPoint, ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace, ROOT::Experimental::XRooFit::xRooNode, ROOT::Internal::TBranchDescriptor, ROOT::Internal::TBranchProxyClassDescriptor, ROOT::Internal::TBranchProxyDescriptor, ROOT::Internal::TFriendProxyDescriptor, ROOT::Internal::THnBaseBrowsable, ROOT::TSchemaRule::TSources, ROOT::v5::TFormula, ROOT::v5::TFormulaPrimitive, RooAbsArg, RooAbsBinning, RooAbsData, RooAbsDataStore, RooAbsGenContext, RooAbsMCStudyModule, RooAbsStudy, RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTNamed.html:10567,inherit,inherited,10567,doc/v632/classTNamed.html,https://root.cern,https://root.cern/doc/v632/classTNamed.html,2,['inherit'],['inherited']
Modifiability,"id *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TNamed.h>; Inherits TObject.; Inherited by TProofVectorContainer< TProofDrawListOfGraphs::Point3D_t >, TProofVectorContainer< TProofDrawListOfPolyMarkers3D::Point4D_t >, ROOT::Experimental::REveGeoShapeExtract, ROOT::Experimental::XRooFit::xRooFit::StoredFitResult, ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoPoint, ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace, ROOT::Experimental::XRooFit::xRooNode, ROOT::Internal::TBranchDescriptor, ROOT::Internal::TBranchProxyClassDescriptor, ROOT::Internal::TBranchProxyDescriptor, ROOT::Internal::TFriendProxyDescriptor, ROOT::Internal::THnBaseBrowsable, ROOT::TSchemaRule::TSources, ROOT::v5::TFormula, ROOT::v5::TFormulaPrimitive, RooAbsArg, RooAbsBinning, RooAbsData, RooAbsDataStore, RooAbsGenContext, RooAbsMCStudyModule, RooAbsStudy, RooArgProxy, RooCmdArg, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNamed.html:10568,inherit,inherited,10568,doc/master/classTNamed.html,https://root.cern,https://root.cern/doc/master/classTNamed.html,2,['inherit'],['inherited']
Modifiability,"id *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; CacheElem * getCache (const RooArgSet *nset) const;  ; int idxmax (const double &m) const;  ; int idxmin (const double &m) const;  ; Int_t ij (const Int_t &i, const Int_t &j) const;  ; void initialize ();  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFunc.html:50186,inherit,inherited,50186,doc/master/classRooMomentMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFunc.html,1,['inherit'],['inherited']
Modifiability,"id *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions;  TGLEmbeddedViewer (const TGLEmbeddedViewer &)=delete;  ; void CreateFrames ();  Internal frames creation. ;  ; void Init (const TGWindow *parent);  Common initialization from all constructors. ;  ; TGLEmbeddedViewer & operator= (const TGLEmbeddedViewer &)=delete;  . Private Attributes; Int_t fBorder;  ; TGCompositeFrame * fFrame;  . Additional Inherited Members;  Public Types inherited from TGLViewer; enum  ECameraType { ;   kCameraPerspXOZ; , kCameraPerspYOZ; , kCameraPerspXOY; , kCameraOrthoXOY; , ;   kCameraOrthoXOZ; , kCameraOrthoZOY; , kCameraOrthoZOX; , kCameraOrthoXnOY; , ;   kCameraOrthoXnOZ; , kCameraOrthoZnOY; , kCameraOrthoZnOX. };  ; enum  EDragAction { ;   kDragNone; , kDragCameraRotate; , kDragCameraTruck; , kDragCameraDolly; , ;   kDragOverlay. };  ; enum  EPushAction { kPushStd; , kPushCamCenter; , kPushAnnotate; };  ; enum  ESecSelType { kOnRequest; , kOnKeyMod1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:29971,inherit,inherited,29971,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,1,['inherit'],['inherited']
Modifiability,"id *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DoRedraw () override;  Redraw line style listbox entry. ;  ;  Protected Member Functions inherited from TGTextLBEntry; void DoRedraw () override;  Redraw text listbox entry. ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGGC * fLineGC;  line graphics context",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLineLBEntry.html:24213,inherit,inherited,24213,doc/master/classTGLineLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGLineLBEntry.html,1,['inherit'],['inherited']
Modifiability,"id *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; virtual void InitializeContext ();  Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void ReleaseUnderlying ();  To release any existing document. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; _xmlParserCtxt * fContext;  Parse the xml file. ;  ; Int_t fParseCode;  To keep track of the errorcodes. ;  ; Bool_t fReplaceEntities;  Replace entities. ;  ; Bool_t fStopError;  Stop when parse error occurs. ;  ; Bool_t fValidate;  To validate the parse context. ;  ; TString fValidateError;  Parse error. ;  ; TString fValidateWarning;  Parse warning. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TXMLParser (const TXMLParser &)=delete;  ; TXMLParser & operator= (const TXMLParser &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:14083,inherit,inherited,14083,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['inherit'],['inherited']
Modifiability,"id * fDirp;  directory handler ;  . Additional Inherited Members;  Public Types inherited from TSystem; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSystem; virtual Bool_t ConsistentWith (const char *path, void *dirptr=nullptr);  Check consistency of this helper with the one required by 'path' or 'dirptr'. ;  ; virtual void DoBeep (Int_t=-1, Int_t=-1) const;  ; virtual const char * ExpandFileName (const char *fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; virtual Bool_t ExpandFileName (TString &fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; TSystem * FindHelper (const char *path, void *dirptr=nullptr);  Create helper TSystem to handle file and directory operations that might be special for remote file access. ;  ; TString & GetLastErrorString ();  Return the thread local storage for the custom last error message. ;  ; const TString & GetLastErrorString () const;  Return the thread local storage for the custom last error message. ;  ; virtual const char * GetLinkedLibraries ();  Get list of shared libraries loaded at the start of the executable. ;  ; virtual void SigAlarmInterr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheSystem.html:30217,inherit,inherited,30217,doc/master/classTDCacheSystem.html,https://root.cern,https://root.cern/doc/master/classTDCacheSystem.html,2,['inherit'],['inherited']
Modifiability,"id DrawPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Draw polymarker. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function must be implemented to realize the action; corresponding to the mouse click on the object in the window. void ls(Option_t* option = """") const; ls. Int_t Merge(TCollection* list); Merge polymarkers in the collection in this polymarker. void Paint(Option_t* option = """"); Paint. void PaintPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Paint polymarker. void Print(Option_t* option = """") const; Print polymarker. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Int_t SetNextPoint(Double_t x, Double_t y); Set point following LastPoint to x, y.; Returns index of the point (new last point). void SetPoint(Int_t point, Double_t x, Double_t y); Set point number n.; if n is greater than the current size, the arrays are automatically; extended. void SetPolyMarker(Int_t n); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void Streamer(TBuffer& ); Stream a class object. Int_t GetLastPoint() const; { return fLastPoint;}. Int_t GetN() const; {return fN;}. Option_t * GetOption() const; {return fOption.Data();}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Int_t Size() const; {return fLastPoint+1;}. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPolyMarker.html:9024,extend,extended,9024,root/html534/TPolyMarker.html,https://root.cern,https://root.cern/root/html534/TPolyMarker.html,1,['extend'],['extended']
Modifiability,"id DrawPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Draw polymarker. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function must be implemented to realize the action; corresponding to the mouse click on the object in the window. void ls(Option_t* option = """") const; ls. Int_t Merge(TCollection* list); Merge polymarkers in the collection in this polymarker. void Paint(Option_t* option = """"); Paint. void PaintPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Paint polymarker. void Print(Option_t* option = """") const; Print polymarker. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Int_t SetNextPoint(Double_t x, Double_t y); Set point following LastPoint to x, y.; Returns index of the point (new last point). void SetPoint(Int_t point, Double_t x, Double_t y); Set point number n.; if n is greater than the current size, the arrays are automatically; extended. void SetPolyMarker(Int_t n); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void Streamer(TBuffer& ); Stream a class object. Int_t GetLastPoint() const; { return fLastPoint;}. Int_t GetN() const; {return fN;}. Option_t * GetOption() const; {return fOption.Data();}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Int_t Size() const; {return fLastPoint+1;}. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPolyMarker.html:9485,extend,extended,9485,root/html604/TPolyMarker.html,https://root.cern,https://root.cern/root/html604/TPolyMarker.html,1,['extend'],['extended']
Modifiability,"id DrawPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Draw polymarker. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function must be implemented to realize the action; corresponding to the mouse click on the object in the window. void ls(Option_t* option = """") const; ls. Int_t Merge(TCollection* list); Merge polymarkers in the collection in this polymarker. void Paint(Option_t* option = """"); Paint. void PaintPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Paint polymarker. void Print(Option_t* option = """") const; Print polymarker. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Int_t SetNextPoint(Double_t x, Double_t y); Set point following LastPoint to x, y.; Returns index of the point (new last point). void SetPoint(Int_t point, Double_t x, Double_t y); Set point number n.; if n is greater than the current size, the arrays are automatically; extended. void SetPolyMarker(Int_t n); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void Streamer(TBuffer& ); Stream a class object. Int_t GetLastPoint() const; { return fLastPoint;}. Int_t GetN() const; {return fN;}. Option_t * GetOption() const; {return fOption.Data();}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Int_t Size() const; {return fLastPoint+1;}. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPolyMarker.html:9485,extend,extended,9485,root/html602/TPolyMarker.html,https://root.cern,https://root.cern/root/html602/TPolyMarker.html,1,['extend'],['extended']
Modifiability,"id DrawPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Draw polymarker. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function must be implemented to realize the action; corresponding to the mouse click on the object in the window. void ls(Option_t* option = """") const; ls. Int_t Merge(TCollection* list); Merge polymarkers in the collection in this polymarker. void Paint(Option_t* option = """"); Paint. void PaintPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Paint polymarker. void Print(Option_t* option = """") const; Print polymarker. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Int_t SetNextPoint(Double_t x, Double_t y); Set point following LastPoint to x, y.; Returns index of the point (new last point). void SetPoint(Int_t point, Double_t x, Double_t y); Set point number n.; if n is greater than the current size, the arrays are automatically; extended. void SetPolyMarker(Int_t n); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void Streamer(TBuffer& b); Stream a class object. Int_t GetLastPoint() const; { return fLastPoint;}. Int_t GetN() const; {return fN;}. Option_t * GetOption() const; {return fOption.Data();}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Int_t Size() const; {return fLastPoint+1;}. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TPolyMarker.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPolyMarker.html:8828,extend,extended,8828,root/html528/TPolyMarker.html,https://root.cern,https://root.cern/root/html528/TPolyMarker.html,1,['extend'],['extended']
Modifiability,"id DrawPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Draw polymarker. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function must be implemented to realize the action; corresponding to the mouse click on the object in the window. void ls(Option_t* option = """") const; ls. Int_t Merge(TCollection* list); Merge polymarkers in the collection in this polymarker. void Paint(Option_t* option = """"); Paint. void PaintPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Paint polymarker. void Print(Option_t* option = """") const; Print polymarker. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Int_t SetNextPoint(Double_t x, Double_t y); Set point following LastPoint to x, y.; Returns index of the point (new last point). void SetPoint(Int_t point, Double_t x, Double_t y); Set point number n.; if n is greater than the current size, the arrays are automatically; extended. void SetPolyMarker(Int_t n); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void Streamer(TBuffer& b); Stream a class object. Int_t GetLastPoint() const; { return fLastPoint;}. Int_t GetN() const; {return fN;}. Option_t * GetOption() const; {return fOption.Data();}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Int_t Size() const; {return fLastPoint+1;}. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TPolyMarker.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPolyMarker.html:8928,extend,extended,8928,root/html530/TPolyMarker.html,https://root.cern,https://root.cern/root/html530/TPolyMarker.html,1,['extend'],['extended']
Modifiability,"id DrawPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Draw polymarker. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function must be implemented to realize the action; corresponding to the mouse click on the object in the window. void ls(Option_t* option = """") const; ls. Int_t Merge(TCollection* list); Merge polymarkers in the collection in this polymarker. void Paint(Option_t* option = """"); Paint. void PaintPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); Paint polymarker. void Print(Option_t* option = """") const; Print polymarker. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Int_t SetNextPoint(Double_t x, Double_t y); Set point following LastPoint to x, y.; Returns index of the point (new last point). void SetPoint(Int_t point, Double_t x, Double_t y); Set point number n.; if n is greater than the current size, the arrays are automatically; extended. void SetPolyMarker(Int_t n); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void SetPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); If n <= 0 the current arrays of points are deleted. void Streamer(TBuffer& b); Stream a class object. Int_t GetLastPoint() const; { return fLastPoint;}. Int_t GetN() const; {return fN;}. Option_t * GetOption() const; {return fOption.Data();}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Int_t Size() const; {return fLastPoint+1;}. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TPolyMarker.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPolyMarker.html:8928,extend,extended,8928,root/html532/TPolyMarker.html,https://root.cern,https://root.cern/root/html532/TPolyMarker.html,1,['extend'],['extended']
Modifiability,"id EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539. Definition at line 2879 of file RInterface.hxx. ◆ Aggregate() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename AccFun , typename MergeFun , typename R = typename TTraits::CallableTraits<AccFun>::ret_type, typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types, typename U = TTraits::TakeFirstParameter_t<ArgTypes>, typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>> . RResultPtr< U > ROOT::RDF::RInterface< Proxied, DataSource >::Aggregate ; (; AccFun ; aggregator, . MergeFun ; merger, . std::string_view ; columnName = """" . ). inline . Execute a user-defined accumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. . Returnsthe result of the aggregation wrapped in a RResultPtr.; See previous Aggregate overload for more information. ; Definition at line 2913 of file RInterface.hxx. ◆ Alias(). template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Alias ; (; std::string_view ; alias, . std::string_view ; columnName . ). inline . Allow to refer to a column with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:35518,variab,variable,35518,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['variab'],['variable']
Modifiability,"id PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* filename = """", Option_t* option = """") const; save current configuration in a Root file; if filename is blank, the name of the file will be the current objectname.root; all the current settings are preserved; the Root file produced can be looked at by a another Root session; with no access to the original classes.; By default a message is printed. Specify option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.14999999999999999); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ""C"" show References from code; ""H"" show Has a relations; ""M"" show Multiple Inheritance; ""R"" show References from data members. void ShowMul(); Draw the Multiple inheritance relationships. void ShowRef(); Draw the References relationships (other than inheritance or composition). void Streamer(TBuffer& ); Stream an object of class TClassTree.; the status of the object is saved and can be replayed in a subsequent session. TClassTree(). const char * GetClasses() const; {return fClasses.Data();}. const char * GetS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassTree.html:14503,inherit,inheriting,14503,root/html602/TClassTree.html,https://root.cern,https://root.cern/root/html602/TClassTree.html,2,['inherit'],['inheriting']
Modifiability,"id SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TStreamerInfoActions::TActionSequenceDefinition TStreamerInfoActions.h:177; TStreamerInfoActions::TActionSequence::SequenceGetter_tSequencePtr(*)(TStreamerInfo *info, TVirtualCollectionProxy *collectionProxy, TClass *originalClass) SequenceGetter_tDefinition TStreamerInfoActions.h:185; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTreeClonerClass implementing or helping the various TTree cloning method.Definition TTreeCloner.h:31; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetMakeClassInt_t GetMakeClass() constDefinition TTree.h:535; TVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a cla...Definition TVirtualArray.h:27; TVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators.Definition TVirtualCollectionIterators.h:26; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualCollectionPtrIteratorsDefinition TVirtualCollectionIterators.h:195; double; int; unsigned int; TStreamerInfoActions::TIDsstd::vector< TIDNode > TIDsDefinition TStreamerInfoActions.h:138; ROOT::RCompressionSetting::EAlgorithm::kInherit@ kInheritSome objects use this value to denote that the compression algorithm should be inherited from the par...Definition Compression.h:91. treetreeincTBranchElement.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8h_source.html:42875,inherit,inherited,42875,doc/master/TBranchElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8h_source.html,1,['inherit'],['inherited']
Modifiability,"id SetTitleSize(Float_t size=0.04)Set size of axis title.Definition TAttAxis.cxx:309; TAxis::SetRangeUservirtual void SetRangeUser(Double_t ufirst, Double_t ulast)Set the viewing range for the axis from ufirst to ulast (in user coordinates, that is,...Definition TAxis.cxx:1080; TEfficiency::GetPaintedGraphTGraphAsymmErrors * GetPaintedGraph() constDefinition TEfficiency.h:121; TGraph::GetXaxisTAxis * GetXaxis() constGet x axis of the graph.Definition TGraph.cxx:1566; TGraph::GetYaxisTAxis * GetYaxis() constGet y axis of the graph.Definition TGraph.cxx:1575. Definition at line 28 of file TEfficiency.h. Public Types; enum  EStatOption { ;   kFCP = 0; , kFNormal; , kFWilson; , kFAC; , ;   kFFC; , kBJeffrey; , kBUniform; , kBBayesian; , ;   kMidP. };  Enumeration type for different statistic options for calculating confidence intervals kF* ... frequentist methods; kB* ... bayesian methods. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEfficiency ();  Default constructor. ;  ;  TEfficiency (const char *name, const char *title, Int_t nbins, const Double_t *xbins);  Create 1-dimensional TEfficiency object with variable bin size. ;  ;  TEfficiency (const char *name, const char *title, Int_t nbins, Double_t xlow, Double_t xup);  Create 1-dimensional TEfficiency object with fixed bins size. ;  ;  TEfficiency (const char *name, const char *title, Int_t nbinsx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:31135,inherit,inherited,31135,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['inherit'],['inherited']
Modifiability,"id for ALL MVA methods are declared.; know options: NCycles=xx :the number of training cycles; Normalize=kTRUE,kFALSe :if normalised in put variables should be used; HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; NeuronType=sigmoid,tanh,radial,linar : the type of activation function; used at the neuronn. void ProcessOptions(); do nothing specific at this moment. std::vector<Int_t>* ParseLayoutString(TString layerSpec); parse layout specification string and return a vector, each entry; containing the number of neurons to go in each successive layer. void InitANNBase(); initialize ANNBase object. ~MethodANNBase(); destructor. void DeleteNetwork(); delete/clear network. void DeleteNetworkLayer(TObjArray*& layer); delete a network layer. void BuildNetwork(vector<Int_t>* layout, vector<Double_t>* weights = NULL, Bool_t fromFile = kFALSE); build network given a layout (number of neurons in each layer); and optional weights array. void BuildLayers(vector<Int_t>* layout, Bool_t from_file = false); build the network layers. void BuildLayer(Int_t numNeurons, TObjArray* curLayer, TObjArray* prevLayer, Int_t layerIndex, Int_t numLayers, Bool_t from_file = false); build a single layer with neurons and synapses connecting this; layer to the previous layer. void AddPreLinks(TMVA::TNeuron* neuron, TObjArray* prevLayer); add synapses connecting a neuron to its preceding layer. void InitWeights(); initialize the synapse weights randomly. void ForceWeights(vector<Double_t>* weights); force the synapse weights. void ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); force the input values of the input neurons; force the value for each input neuron. void ForceNetworkCalculations(); calculate input values to each neuron. void PrintMessage(TString message, Bool_t force = kFALSE) const; print messages, turn off printing by setting verbose and debug flag appropriately. void WaitForKeyboard(); wait for keyboard input, for debugging. void PrintNetwork() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodANNBase.html:19812,layers,layers,19812,root/html534/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodANNBase.html,1,['layers'],['layers']
Modifiability,"id). ;  ; Bool_t RemoveMdiFrame (TGMdiFrame *f);  Remove MDI child window. ;  ; Bool_t SetCurrent (TGMdiFrameList *newcurrent);  Set current (active) MDI child window (by frame list). ;  ; void UpdateWinListMenu ();  Update MDI menu entries with current list of MDI child windows. ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Int_t fArrangementMode;  MDI children arrangement mode. ;  ; Pixel_t fBackCurrent;  ; Pixel_t fBackNotCurrent;  ; TGGC * fBoxGC;  GC used to draw resizing box (rectangle) ;  ; TGMdiFrameList * fChildren;  list of MDI child windows ;  ; TGFrame * fContainer;  MDI container. ;  ; TGMdiFrameList * fCurrent;  current list of MDI child windows ;  ; Int_t fCurrentX;  ; Int_t fCurrentY;  ; TGFont * fFontCurrent;  ; TGFont * fFontNotCurrent;  fonts for active and inactive MDI children ;  ; Pixel_t fForeCurrent;  back and fore colors for active MDI children ;  ; Pixel_t fForeNotCurrent;  back and fore colors for inacti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiMainFrame.html:27169,inherit,inherited,27169,doc/master/classTGMdiMainFrame.html,https://root.cern,https://root.cern/doc/master/classTGMdiMainFrame.html,3,['inherit'],['inherited']
Modifiability,"id;  . Friends; class TProof;  . Additional Inherited Members;  Public Types inherited from TSlave; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSlave;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; void MakeZombie ();  ;  Protected Attributes inherited from TSlave; TString fArchComp;  ; Long64_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlaveLite.html:12075,inherit,inherited,12075,doc/master/classTSlaveLite.html,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html,2,['inherit'],['inherited']
Modifiability,"idRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidRooRealBinding::loadValues(const Double_t* xvector) const. Data Members; protected:. Roo1DTable*_catTableSupercategory table generated from _data; Bool_tRooRealBinding::_clipInvalid; const RooAbsData*_dataDataset used for projection; UInt_tRooAbsFunc::_dimensionNumber of observables; Bool_t_firstBit indicating if operator() has been called yet; const RooAbsReal*RooRealBinding::_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nsetNormalization set for real function; const RooArgSet*RooRealBinding::_nset; const TNamed*RooRealBinding::_rangeName!; const RooAbsReal*_realReal function to be projected; RooSuperCategory*_superCatSupercategory constructed from _data's category variables; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**RooRealBinding::_vars; Double_t*RooRealBinding::_xsave; Bool_tRooRealBinding::_xvecValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDataProjBinding(const RooAbsReal& real, const RooAbsData& data, const RooArgSet& vars, const RooArgSet* normSet = 0); Constructor of a data weighted average function binding with; variables 'vars' for function 'real' and dataset 'data' with; weights. ~RooDataProjBinding(); Destructor, delete owned objects. Double_t operator()(const Double_t* xvector) const; Evaluate data-projected values of the bound real function. RooDataProjBinding(const RooAbsReal& real, const RooAbsData& data, const RooArgSet& vars, const RooArgSet* normSet = 0). » Last changed: Thu Sep 23 19:59:25 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataProjBinding.html:2971,variab,variables,2971,root/html528/RooDataProjBinding.html,https://root.cern,https://root.cern/root/html528/RooDataProjBinding.html,1,['variab'],['variables']
Modifiability,"idTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voiddumpFormula(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static Bool_tRooAbsPdf::evalError(); static RooAbsReal::EvalErrorIterRooAbsReal::evalErrorIter(); static RooAbsReal::ErrorLoggingModeRooAbsReal::evalErrorLoggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet* nset) const; virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeRooAbsPdf::extendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGenericPdf.html:11034,extend,extendMode,11034,root/html532/RooGenericPdf.html,https://root.cern,https://root.cern/root/html532/RooGenericPdf.html,1,['extend'],['extendMode']
Modifiability,idTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TTree*fAnalysisTree; TTree*fIOTree; TMultiLayerPerceptron*fNetwork. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TMLPAnalyzer(); Destructor. Int_t GetLayers(); Returns the number of layers. Int_t GetNeurons(Int_t layer); Returns the number of neurons in given layer. TString GetNeuronFormula(Int_t idx); Returns the formula used as input for neuron (idx) in; the first layer. const char* GetInputNeuronTitle(Int_t in); Returns the name of any neuron from the input layer. const char* GetOutputNeuronTitle(Int_t out); Returns the name of any neuron from the output layer. void CheckNetwork(); Gives some information about the network in the terminal. void GatherInformations(); Collect information about what is usefull in the network.; This method has to be called first when analyzing a network.; Fills the two analysis trees. void DrawDInput(Int_t i); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; the ith input. void DrawDInputs(); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; each input.; DrawDInputs() draws something that approximates the,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMLPAnalyzer.html:6685,layers,layers,6685,root/html602/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html602/TMLPAnalyzer.html,2,['layers'],['layers']
Modifiability,"idTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual Bool_tselfNormalized() const; TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidsetGeneratorConfig(); voidsetGeneratorConfig(const RooNumGenConfig& config); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidsetNormRange(const char* rangeName); voidsetNormRangeOverride(const char* rangeName); voidsetNormValueCaching(Int_t minNumIntDim, Int_t ipOrder = 2); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidsetTraceCounter(Int_t value, Bool_t allNodes = kFALSE); voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:30495,config,config,30495,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,1,['config'],['config']
Modifiability,idTSelectorDraw::InitArrays(Int_t newsize); voidTObject::MakeZombie(). private:. TEvePointSelector(const TEvePointSelector&); TEvePointSelector&operator=(const TEvePointSelector&). Data Members; public:. enum TSelectorDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTSelectorDraw::fAction! Action type; Bool_tTSelectorDraw::fCleanElisttrue if original Tree elist must be saved; TEvePointSelectorConsumer*fConsumer; Int_tTSelectorDraw::fDimensionDimension of the current expression; Long64_tTSelectorDraw::fDraw! Last entry loop number when object was drawn; Int_tTSelectorDraw::fForceReadForce Read flag; TListfInput; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TSelectorDraw::fManagerPointer to the formula manager; Int_tTSelectorDraw::fMultiplicityIndicator of the variability of the size of entries; Int_t*TSelectorDraw::fNbins![fDimension] Number of bins per dimension; Int_tTSelectorDraw::fNfill! Total number of histogram fills; Bool_tTSelectorDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); Long64_tTSelectorDraw::fOldEstimatevalue of Tree fEstimate when selector is called; TH1*TSelectorDraw::fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; TTreeFormula*TSelectorDraw::fSelectPointer to selection formula; Bool_tTSelectorDraw::fSelectMultipletrue if selection has a variable index; Long64_tTSelectorDraw::fSelectedRowsNumber of selected entries; TStringf,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePointSelector.html:9176,variab,variability,9176,root/html528/TEvePointSelector.html,https://root.cern,https://root.cern/root/html528/TEvePointSelector.html,2,['variab'],['variability']
Modifiability,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:821,variab,variables,821,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,3,['variab'],"['variable', 'variables']"
Modifiability,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofProgressMemoryPlot Class ReferenceGUI » Session Viewer. ; This class implements a dialog, used to display the memory footprint on the proof workers and master. ; For the workers, memory is plotted as a function of number of events processed. For the master, it is plotted as a function of number of objects merged ; Definition at line 28 of file TProofProgressMemoryPlot.h. Public Member Functions;  TProofProgressMemoryPlot (TProofProgressDialog *d, Int_t w=700, Int_t h=300);  Main constructor. ;  ;  ~TProofProgressMemoryPlot () override;  Destructor. ;  ; void Clear (Option_t *=nullptr) override;  Clear the canvases. ;  ; void DoPlot ();  Draw the plot from the logs. ;  ; void Select (Int_t id);  actions of select all/clear all button ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:1036,inherit,inherited,1036,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,1,['inherit'],['inherited']
Modifiability,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ClassInfo Class ReferenceTMVA. ; Class that contains all the information of a class. ; Definition at line 49 of file ClassInfo.h. Public Member Functions;  ClassInfo (const TString &name=""default"");  constructor ;  ;  ~ClassInfo ();  destructor ;  ; const TMatrixD * GetCorrelationMatrix () const;  ; const TCut & GetCut () const;  ; UInt_t GetNumber () const;  ; const TString & GetWeight () const;  ; virtual TClass * IsA () const;  ; void SetCorrelationMatrix (TMatrixD *matrix);  ; void SetCut (const TCut &cut);  ; void SetNumber (const UInt_t index);  ; void SetWeight (const TString &weight);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html:1053,inherit,inherited,1053,doc/master/classTMVA_1_1ClassInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html,1,['inherit'],['inherited']
Modifiability,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TG16ColorSelector Class ReferenceGUI » Low level GUI widgets. ; A composite frame with 16 TGColorFrames. ; Definition at line 50 of file TGColorSelect.h. Public Member Functions;  TG16ColorSelector (const TGWindow *p=nullptr);  TG16ColorSelector constructor. ;  ;  ~TG16ColorSelector () override;  TG16ColorSelector destructor. ;  ; Int_t GetActive ();  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TG16ColorSelector. ;  ; void SetActive (Int_t newat);  Set active color frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTG16ColorSelector.html:1028,inherit,inherited,1028,doc/master/classTG16ColorSelector.html,https://root.cern,https://root.cern/doc/master/classTG16ColorSelector.html,1,['inherit'],['inherited']
Modifiability,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGApplication Class ReferenceGUI » Low level GUI widgets. ; This class initialize the ROOT GUI toolkit. ; This class must be instantiated exactly once in any given application. ; Definition at line 21 of file TGApplication.h. Public Member Functions;  TGApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create a GUI application environment. ;  ;  ~TGApplication () override;  TGApplication dtor. ;  ; void GetOptions (Int_t *argc, char **argv) override;  Handle command line arguments. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void Hand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGApplication.html:1032,inherit,inherited,1032,doc/master/classTGApplication.html,https://root.cern,https://root.cern/doc/master/classTGApplication.html,1,['inherit'],['inherited']
Modifiability,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPolynomial Class ReferenceRooFit » RooFit. ; RooPolynomial implements a polynomial p.d.f of the form. . \[ f(x) = \mathcal{N} \cdot \sum_{i} a_{i} * x^i \]. By default, the coefficient \( a_0 \) is chosen to be 1, as polynomial probability density functions have one degree of freedom less than polynomial functions due to the normalisation condition. \( \mathcal{N} \) is a normalisation constant that is automatically calculated when the polynomial is used in computations.; The sum can be truncated at the low end. See the main constructor RooPolynomial::RooPolynomial(const char*, const char*, RooAbsReal&, const RooArgList&, Int_t) ; Definition at line 25 of file RooPolynomial.h. Public Member Functions;  RooPolynomial ();  ;  RooPolynomial (const char *name, const char *title, RooAbsReal &_x, const RooArgList &_coefList, Int_t lowestOrder=1);  Create a polynomial in the variable x. ;  ;  RooPolynomial (const char *name, const char *title, RooAbsReal &x);  ;  RooPolynomial (const RooPolynomial &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Do the analytical integral according to the code that was returned by getAnalyticalIntegral(). ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; RooArgList const & coefList () const;  Get the coefficient list. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise to RooFit that this function can be analytically integrated. ;  ; TClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:1164,variab,variable,1164,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['variab'],['variable']
Modifiability,"ide if minimizer supports them ) otherwise as default set an unlimited; 33/// variable; 34bool Minimizer::SetLimitedVariable(unsigned int ivar, const std::string &name, double val, double step, double lower,; 35 double upper); 36{; 37 MATH_WARN_MSG(""Minimizer::SetLimitedVariable"", ""Setting of limited variable not implemented - set as unlimited"");; 38 MATH_UNUSED(lower);; 39 MATH_UNUSED(upper);; 40 return SetVariable(ivar, name, val, step);; 41}; 42 ; 43/// set a new fixed variable (override if minimizer supports them ); 44bool Minimizer::SetFixedVariable(unsigned int ivar, const std::string &name, double val); 45{; 46 MATH_ERROR_MSG(""Minimizer::SetFixedVariable"", ""Setting of fixed variable not implemented"");; 47 MATH_UNUSED(ivar);; 48 MATH_UNUSED(name);; 49 MATH_UNUSED(val);; 50 return false;; 51}; 52/// set the value of an already existing variable; 53bool Minimizer::SetVariableValue(unsigned int ivar, double value); 54{; 55 MATH_ERROR_MSG(""Minimizer::SetVariableValue"", ""Set of a variable value not implemented"");; 56 MATH_UNUSED(ivar);; 57 MATH_UNUSED(value);; 58 return false;; 59}; 60 ; 61/// set the step size of an already existing variable; 62bool Minimizer::SetVariableStepSize(unsigned int ivar, double value); 63{; 64 MATH_ERROR_MSG(""Minimizer::SetVariableStepSize"", ""Setting an existing variable step size not implemented"");; 65 MATH_UNUSED(ivar);; 66 MATH_UNUSED(value);; 67 return false;; 68}; 69/// set the lower-limit of an already existing variable; 70bool Minimizer::SetVariableLowerLimit(unsigned int ivar, double lower); 71{; 72 MATH_ERROR_MSG(""Minimizer::SetVariableLowerLimit"", ""Setting an existing variable limit not implemented"");; 73 MATH_UNUSED(ivar);; 74 MATH_UNUSED(lower);; 75 return false;; 76}; 77/// set the upper-limit of an already existing variable; 78bool Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); 79{; 80 MATH_ERROR_MSG(""Minimizer::SetVariableUpperLimit"", ""Setting an existing variable limit not implemented"");; 81 MATH_UNUSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8cxx_source.html:1936,variab,variable,1936,doc/master/Minimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html,1,['variab'],['variable']
Modifiability,"ide if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BasicMinimizer.html:8476,variab,variables,8476,root/html534/ROOT__Math__BasicMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BasicMinimizer.html,3,['variab'],['variables']
Modifiability,"ide range of object, clip value into range ; Implements RooAbsRealLValue.; Definition at line 242 of file RooRealVar.cxx. ◆ setVal() [2/2]. void RooRealVar::setVal ; (; double ; value, . const char * ; rangeName . ). overridevirtual . Set value of variable to value. ; If value is outside of the range named rangeName, clip value into that range. ; Reimplemented from RooAbsRealLValue.; Definition at line 259 of file RooRealVar.cxx. ◆ setValFast(). void RooRealVar::setValFast ; (; double ; value). inlineoverrideprotectedvirtual . Reimplemented from RooAbsRealLValue.; Definition at line 142 of file RooRealVar.h. ◆ sharedProp(). std::shared_ptr< RooRealVarSharedProperties > RooRealVar::sharedProp ; (; ); const. protected . Hand out our shared property, create on the fly and register in shared map if necessary. ; Definition at line 1280 of file RooRealVar.cxx. ◆ sharedPropList(). RooRealVar::SharedPropertiesMap * RooRealVar::sharedPropList ; (; ). staticprotected . List of properties shared among clones of a variable. ; Return a reference to a map of weak pointers to RooRealVarSharedProperties. ; Definition at line 60 of file RooRealVar.cxx. ◆ Streamer(). void RooRealVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class RooRealVar. ; Reimplemented from RooAbsRealLValue.; Definition at line 1219 of file RooRealVar.cxx. ◆ StreamerNVirtual(). void RooRealVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file RooRealVar.h. ◆ translate(). void RooRealVar::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to imp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:90781,variab,variable,90781,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['variab'],['variable']
Modifiability,"ide(TMVA::PDEFoamCell* ); Internal subrogram used by Create.; It divides cell iCell into two daughter cells.; The iCell is retained and tagged as inactive, daughter cells are appended; at the end of the buffer.; New vertex is added to list of vertices.; List of active cells is updated, iCell removed, two daughters added; and their properties set with help of MC sampling (PDEFoam_Explore); Returns Code RC=-1 of buffer limit is reached, fLastCe=fnBuf. Double_t Eval(Double_t* xRand, Double_t& event_density); Internal subprogram.; Evaluates (training) distribution. void Grow(); Internal subrogram used by Create.; It grow new cells by the binary division process.; This function is overridden by the PDEFoam class to stop the foam buildup process; if one of the cut conditions stop the cell split. void SetInhiDiv(Int_t , Int_t ); This can be called before Create, after setting kDim; It defines which variables are excluded in the process of the cell division.; For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable. void CheckAll(Int_t ); User utility, miscellaneous and debug.; Checks all pointers in the tree of cells. This is useful autodiagnostic.; level=0, no printout, failures causes STOP; level=1, printout, failures lead to WARNINGS only. void PrintCell(Long_t iCell = 0); Prints geometry of 'iCell'. void PrintCells(void); Prints geometry of ALL cells of the FOAM. void RemoveEmptyCell(Int_t iCell); This function removes a cell iCell, which has a volume equal to zero.; It works the following way:; 1) find grandparent to iCell; 2) set daughter of the grandparent cell to the sister of iCell. Result:; iCell and its parent are alone standing ==> will be removed. void CheckCells(Bool_t remove_empty_cells = false); debug function: checks all cells with respect to critical; values, f.e. cell volume, ... void PrintCellElements(); This debug function prints the cell elements of all active; cells. void ResetCellElements(Bool_t allcells = false); creates a TVectorD obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:16447,variab,variable,16447,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['variab'],['variable']
Modifiability,"ide(TMVA::PDEFoamCell* ); Internal subrogram used by Create.; It divides cell iCell into two daughter cells.; The iCell is retained and tagged as inactive, daughter cells are appended; at the end of the buffer.; New vertex is added to list of vertices.; List of active cells is updated, iCell removed, two daughters added; and their properties set with help of MC sampling (PDEFoam_Explore); Returns Code RC=-1 of buffer limit is reached, fLastCe=fnBuf. Double_t Eval(Double_t* xRand, Double_t& event_density); Internal subprogram.; Evaluates (training) distribution. void Grow(); Internal subrogram used by Create.; It grow new cells by the binary division process.; This function is overridden by the PDEFoam class to stop the foam buildup process; if one of the cut conditions stop the cell split. void SetInhiDiv(Int_t , Int_t ); This can be called before Create, after setting kDim; It defines which variables are excluded in the process of the cell division.; For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable. void CheckAll(Int_t ); User utility, miscellaneous and debug.; Checks all pointers in the tree of cells. This is useful autodiagnostic.; level=0, no printout, failures causes STOP; level=1, printout, failures lead to WARNINGS only. void PrintCell(Long_t iCell = 0); Prints geometry of and elements of 'iCell', as well as relations; to parent and daughter cells. void PrintCells(void); Prints geometry of ALL cells of the FOAM. void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills a weight 'wt' into the PDEFoam cell, which; corresponds to the given event 'ev'. Per default cell element 0; is filled with the weight 'wt', and cell element 1 is filled; with the squared weight. This function can be overridden by a; subclass in order to change the values stored in the foam cells. void ResetCellElements(); Remove the cell elements from all cells. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* ); Returns true, if the value of the given cell ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoam.html:14951,variab,variable,14951,root/html530/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoam.html,5,['variab'],['variable']
Modifiability,"ide; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigmaL; RooRealProxysigmaR; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBifurGauss.html:39740,config,configuration,39740,root/html532/RooBifurGauss.html,https://root.cern,https://root.cern/root/html532/RooBifurGauss.html,2,['config'],['configuration']
Modifiability,"ide;  ; void SetVisLevel (Int_t level=3) override;  Set default level down to which visualization is performed. ;  ; void SetVisOption (Int_t option=0) override;  Set drawing mode : ;  ; Int_t ShapeDistancetoPrimitive (const TGeoShape *shape, Int_t numpoints, Int_t px, Int_t py) const override;  Returns distance between point px,py on the pad an a shape. ;  ; void Test (Int_t npoints, Option_t *option) override;  Check time of finding ""Where am I"" for n points. ;  ; void TestOverlaps (const char *path) override;  Geometry overlap checker based on sampling. ;  ; Bool_t TestVoxels (TGeoVolume *vol) override;  Check voxels efficiency per volume. ;  ; void UnbombTranslation (const Double_t *tr, Double_t *bombtr) override;  Get the new 'unbombed' translation vector according current exploded view mode. ;  ; Double_t Weight (Double_t precision, Option_t *option=""v"") override;  Compute weight [kg] of the current volume. ;  ;  Public Member Functions inherited from TVirtualGeoPainter;  TVirtualGeoPainter (TGeoManager *manager);  Geometry painter default constructor. ;  ;  ~TVirtualGeoPainter () override;  Geometry painter default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:9752,inherit,inherited,9752,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['inherit'],['inherited']
Modifiability,"ide;  Forwards the execution to the TDSet. ;  ; Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=TTree::kMaxEntries, Long64_t firstentry=0) override;  The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ;  ; virtual void Progress (Long64_t total, Long64_t processed);  Changes the number of processed entries. ;  ; virtual void ReleaseProof ();  Releases PROOF. Disconnect the ""progress"" signal. ;  ; void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999) override;  See TTree::SetDebug. ;  ; void SetEntryList (TEntryList *enlist, const Option_t *) override;  ; void SetEventList (TEventList *evlist) override;  This function transfroms the given TEventList into a TEntryList. ;  ; void SetName (const char *name) override;  See TTree::GetName. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TChain;  TChain (const char *name, const char *title="""", Mode mode=kWithGlobalRegistration);  Create a chain. ;  ;  TChain (Mode mode=kWithGlobalRegistration);  Default constructor. ;  ;  ~TChain () override;  Destructor. ;  ; virtual Int_t Add (const char *name, Long64_t nentries=TTree::kMaxEntries);  Add a new file to this chain. ;  ; virtual Int_t Add (TChain *chain);  Add all files referenced by the passed chain to this chain. ;  ; virtual Int_t AddFile (const char *name, Long64_t nentries=TTree::kMaxEntries, const char *tname="""");  Add a new file to this chain. ;  ; virtual Int_t AddFileInfoList (TCollection *list, Long64_t nfiles=TTree::kMaxEntries);  Add all files referenced in the list to the chain. ;  ; TFriendElement * AddFriend (const char *chainname, const char *dummy="""") override;  Add a TFriendElement to the list of friends of this chain. ;  ; TFriendElement * AddFriend (const char *chainname, TFile *dummy) override;  Add the whole chain or tree as a friend of this chain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:5563,inherit,inherited,5563,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,1,['inherit'],['inherited']
Modifiability,"ide;  Get a directory entry. ;  ; Int_t GetPathInfo (const char *path, FileStat_t &buf) override;  Get info about a file (stat) ;  ; TClass * IsA () const override;  ; Bool_t IsPathLocal (const char *path) override;  Is this path a local path? ;  ; virtual Int_t Locate (const char *path, TString &endurl);  Get the endpoint URL of a file. ;  ; Int_t MakeDirectory (const char *dir) override;  Create a directory. ;  ; void * OpenDirectory (const char *dir) override;  Open a directory. ;  ; virtual Int_t Stage (const char *path, UChar_t priority);  Issue a stage request for a single file. ;  ; virtual Int_t Stage (TCollection *files, UChar_t priority);  Issue stage requests for multiple files. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Unlink (const char *path) override;  Unlink a file on the remote server. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists);  Returns FALSE if one can access a file using the specified access mode. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddSignalHandler (TSignalHandler *sh);  Add a signal handler to list of system signal handlers. ;  ; virtual void AddStdExceptionHandler (TStdEx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGSystem.html:1860,inherit,inherited,1860,doc/master/classTNetXNGSystem.html,https://root.cern,https://root.cern/doc/master/classTNetXNGSystem.html,1,['inherit'],['inherited']
Modifiability,"ide;  Paint the overlap. ;  ; void Print (Option_t *option="""") const override;  Print detailed info. ;  ; virtual void PrintInfo () const;  Print some info. ;  ; void SampleOverlap (Int_t npoints=1000000);  Draw overlap and sample with random points the overlapping region. ;  ; void SetFirstMatrix (TGeoMatrix *matrix);  ; void SetFirstVolume (TGeoVolume *vol);  ; void SetIsExtrusion (Bool_t flag=kTRUE);  ; void SetIsOverlap (Bool_t flag=kTRUE);  ; void SetNextPoint (Double_t x, Double_t y, Double_t z);  Set next overlapping point. ;  ; void SetOverlap (Double_t ovlp);  ; void SetSecondMatrix (TGeoMatrix *matrix);  ; void SetSecondVolume (TGeoVolume *vol);  ; void Sizeof3D () const override;  Get 3D size of this. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Validate () const;  Validate this overlap. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoOverlap.html:3625,inherit,inherited,3625,doc/master/classTGeoOverlap.html,https://root.cern,https://root.cern/doc/master/classTGeoOverlap.html,1,['inherit'],['inherited']
Modifiability,"ide;  Replace the TClass this streamerInfo is pointing to (belongs to) ;  ; void SetClassVersion (Int_t vers) override;  ; void SetOnFileClassVersion (Int_t vers);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerInfo. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TagFile (TFile *fFile) override;  Mark the classindex of the current file as using this TStreamerInfo. ;  ; void Update (const TClass *oldClass, TClass *newClass) override;  function called by the TClass constructor when replacing an emulated class by the real class ;  ; template<class T > ; Int_t WriteBufferAux (TBuffer &b, const T &arr, TCompInfo *const *const compinfo, Int_t first, Int_t last, Int_t narr, Int_t eoffset, Int_t mode);  The object at pointer is serialized to the buffer b if (arrayMode & 1) ptr is a pointer to array of pointers to the objects otherwise it is a pointer to a pointer to a single object. ;  ;  Public Member Functions inherited from TVirtualStreamerInfo;  TVirtualStreamerInfo ();  Default constructor. ;  ;  TVirtualStreamerInfo (TClass *);  Default constructor. ;  ; virtual ~TVirtualStreamerInfo ();  Destructor. ;  ; TClass * IsA () const override;  ; Bool_t IsBuilt () const;  ; Bool_t IsCompiled () const;  ; Bool_t IsOptimized () const;  ; Int_t IsRecovered () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TVirtualStreamerInfo. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:14227,inherit,inherited,14227,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['inherit'],['inherited']
Modifiability,"ide;  Return pseud-code that indicates if all components can do internal generation (1) or not (0) ;  ; TClass * IsA () const override;  ; bool isDirectGenSafe (const RooAbsArg &arg) const override;  Direct generation is safe if all components say so. ;  ; const RooArgList & pdfList () const;  Return list of component p.d.fs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Model is self normalized when used as p.d.f. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooResolutionModel;  RooResolutionModel ()=default;  ;  RooResolutionModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual void changeBasis (RooFormulaVar *basis);  Change the basis function we convolute with. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Modified version of RooAbsPdf::getValF(). ;  ; TClass * IsA () const override;  ; bool isBasisSupported (const char *name) const;  ; bool isConvo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:4968,inherit,inherited,4968,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,2,"['inherit', 'variab']","['inherited', 'variable']"
Modifiability,"ide;  Return size of icon. ;  ; TImage * GetImage () const;  ; const TGPicture * GetPicture () const;  ; void MoveResize (Int_t x, Int_t y, UInt_t w=0, UInt_t h=0) override;  Move icon to (x,y) and resize it to (w,h). ;  ; virtual void Reset ();  Reset icon to original image. It can be used only via context menu. ;  ; void Resize (TGDimension size) override;  Resize the frame. ;  ; void Resize (UInt_t w=0, UInt_t h=0) override;  Resize. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an icon widget as a C++ statement(s) on output stream out. ;  ; virtual void SetImage (const char *img);  Set icon image. ;  ; virtual void SetImage (TImage *img);  Change icon image. ;  ; virtual void SetImagePath (const char *path);  Set directory where image is located. ;  ; virtual void SetPicture (const TGPicture *pic);  Set icon picture. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiTitleIcon.html:2406,inherit,inherited,2406,doc/master/classTGMdiTitleIcon.html,https://root.cern,https://root.cern/doc/master/classTGMdiTitleIcon.html,1,['inherit'],['inherited']
Modifiability,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:2748,inherit,inherited,2748,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,32,['inherit'],['inherited']
Modifiability,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:27396,inherit,inherited,27396,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,4,['inherit'],['inherited']
Modifiability,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis3D.html:8661,inherit,inherited,8661,doc/master/classTAxis3D.html,https://root.cern,https://root.cern/doc/master/classTAxis3D.html,1,['inherit'],['inherited']
Modifiability,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenerator.html:7789,inherit,inherited,7789,doc/master/classTGenerator.html,https://root.cern,https://root.cern/doc/master/classTGenerator.html,10,['inherit'],['inherited']
Modifiability,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLEntity.html:2218,inherit,inherited,2218,doc/master/classTXMLEntity.html,https://root.cern,https://root.cern/doc/master/classTXMLEntity.html,278,['inherit'],['inherited']
