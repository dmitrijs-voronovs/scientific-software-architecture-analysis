quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,". ROOT: tutorials/roofit/rf608_fitresultaspdf.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf608_fitresultaspdf.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: representing the parabolic approximation of the fit as a multi-variate Gaussian on the parameters of the fitted pdf . ; import ROOT; ; ; # Create model and dataset; # -----------------------------------------------; ; # Observable; x = ROOT.RooRealVar(""x"", ""x"", -20, 20); ; # Model (intentional strong correlations); mean = ROOT.RooRealVar(""mean"", ""mean of g1 and g2"", 0, -1, 1); sigma_g1 = ROOT.RooRealVar(""sigma_g1"", ""width of g1"", 2); g1 = ROOT.RooGaussian(""g1"", ""g1"", x, mean, sigma_g1); ; sigma_g2 = ROOT.RooRealVar(""sigma_g2"", ""width of g2"", 4, 3.0, 5.0); g2 = ROOT.RooGaussian(""g2"", ""g2"", x, mean, sigma_g2); ; frac = ROOT.RooRealVar(""frac"", ""frac"", 0.5, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [g1, g2], [frac]); ; # Generate 1000 events; data = model.generate({x}, 1000); ; # Fit model to data; # ----------------------------------; ; r = model.fitTo(data, Save=True, PrintLevel=-1); ; # Create MV Gaussian pdf of fitted parameters; # ------------------------------------------------------------------------------------; ; parabPdf = r.createHessePdf({frac, mean, sigma_g2}); ; # Some exercises with the parameter pdf; # -----------------------------------------------------------------------------; ; # Generate 100K points in the parameter space, from the MVGaussian pdf; d = parabPdf.generate({mean, sigma_g2, frac}, 100000); ; # Sample a 3-D histogram of the pdf to be visualized as an error; # ellipsoid using the GLISO draw option; hh_3d = parabPdf.createHistogram(""mean,sigma_g2,frac"", 25, 25, 25); hh_3d.SetFillColor(ROOT.kBlue); ; # Project 3D parameter pdf down to 3 permutations of two-dimensional pdfs; # The integrations corresponding to these projections are performed analytically; # by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf608__fitresultaspdf_8py.html:95,Guid,Guide,95,doc/master/rf608__fitresultaspdf_8py.html,https://root.cern,https://root.cern/doc/master/rf608__fitresultaspdf_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf609_xychi2fit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf609_xychi2fit.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: setting up a chi^2 fit to an unbinned dataset with X,Y,err(Y) values (and optionally err(X) values) . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooPolyVar.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""TRandom.h""; ; using namespace RooFit;; ; void rf609_xychi2fit(); {; // C r e a t e d a t a s e t w i t h X a n d Y v a l u e s; // -------------------------------------------------------------------; ; // Make weighted XY dataset with asymmetric errors stored; // The StoreError() argument is essential as it makes; // the dataset store the error in addition to the values; // of the observables. If errors on one or more observables; // are asymmetric, one can store the asymmetric error; // using the StoreAsymError() argument; ; RooRealVar x(""x"", ""x"", -11, 11);; RooRealVar y(""y"", ""y"", -10, 200);; RooDataSet dxy(""dxy"", ""dxy"", {x, y}, StoreError({x, y}));; ; // Fill an example dataset with X,err(X),Y,err(Y) values; for (int i = 0; i <= 10; i++) {; ; // Set X value and error; x = -10 + 2 * i;; x.setError(i < 5 ? 0.5 / 1. : 1.0 / 1.);; ; // Set Y value and error; y = x.getVal() * x.getVal() + 4 * fabs(gRandom->Gaus());; y.setError(sqrt(y.getVal()));; ; dxy.add({x, y});; }; ; // P e r f o r m c h i 2 f i t t o X + / - d x a n d Y + / - d Y v a l u e s; // ---------------------------------------------------------------------------------------; ; // Make fit function; RooRealVar a(""a"", ""a"", 0.0, -10, 10);; RooRealVar b(""b"", ""b"", 0.0, -100, 100);; RooRealVar c(""c"", ""c"", 0.0, -100, 100);; RooPolyVar f(""f"", ""f"", x, RooArgList(b, a, c));; ; // Plot dataset in X-Y interpretation; RooPlot *frame = x.frame(Title(""Chi^2 fit of function set of (X#pmdX,Y#pmdY) values""));; dxy.plotOnXY(frame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf609__xychi2fit_8C.html:89,Guid,Guide,89,doc/master/rf609__xychi2fit_8C.html,https://root.cern,https://root.cern/doc/master/rf609__xychi2fit_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf609_xychi2fit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf609_xychi2fit.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: setting up a chi^2 fit to an unbinned dataset with X,Y,err(Y) values (and optionally err(X) values) . ; import ROOT; import math; ; ; # Create dataset with X and Y values; # -------------------------------------------------------------------; ; # Make weighted XY dataset with asymmetric errors stored; # The StoreError() argument is essential as it makes; # the dataset store the error in addition to the values; # of the observables. If errors on one or more observables; # are asymmetric, can store the asymmetric error; # using the StoreAsymError() argument; ; x = ROOT.RooRealVar(""x"", ""x"", -11, 11); y = ROOT.RooRealVar(""y"", ""y"", -10, 200); dxy = ROOT.RooDataSet(""dxy"", ""dxy"", {x, y}, StoreError={x, y}); ; # Fill an example dataset with X,err(X),Y,err(Y) values; for i in range(10):; x.setVal(-10 + 2 * i); x.setError((0.5 / 1.0) if (i < 5) else (1.0 / 1.0)); ; # Set Y value and error; y.setVal(x.getVal() * x.getVal() + 4 * abs(ROOT.gRandom.Gaus())); y.setError(math.sqrt(y.getVal())); ; dxy.add({x, y}); ; # Perform chi2 fit to X +/- dX and Y +/- dY values; # ---------------------------------------------------------------------------------------; ; # Make fit function; a = ROOT.RooRealVar(""a"", ""a"", 0.0, -10, 10); b = ROOT.RooRealVar(""b"", ""b"", 0.0, -100, 100); c = ROOT.RooRealVar(""c"", ""c"", 0.0, -100, 100); f = ROOT.RooPolyVar(""f"", ""f"", x, [b, a, c]); ; # Plot dataset in X-Y interpretation; frame = x.frame(Title=""Chi^2 fit of function set of (X#pmdX,Y#pmdY) values""); dxy.plotOnXY(frame, YVar=y); ; # Fit chi^2 using X and Y errors; fit1 = f.chi2FitTo(dxy, YVar=y, Save=True, PrintLevel=-1); fit1.Print(); ; # Overlay fitted function; f.plotOn(frame); ; # Alternative: fit chi^2 integrating f(x) over ranges defined by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf609__xychi2fit_8py.html:90,Guid,Guide,90,doc/master/rf609__xychi2fit_8py.html,https://root.cern,https://root.cern/doc/master/rf609__xychi2fit_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf610_visualerror.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf610_visualerror.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: visualization of errors from a covariance matrix . ; #include ""RooRealVar.h""; #include ""RooDataHist.h""; #include ""RooGaussian.h""; #include ""RooAddPdf.h""; #include ""RooPlot.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TAxis.h""; using namespace RooFit;; ; void rf610_visualerror(); {; // S e t u p e x a m p l e f i t; // ---------------------------------------; ; // Create sum of two Gaussians pdf with factory; RooRealVar x(""x"", ""x"", -10, 10);; ; RooRealVar m(""m"", ""m"", 0, -10, 10);; RooRealVar s(""s"", ""s"", 2, 1, 50);; RooGaussian sig(""sig"", ""sig"", x, m, s);; ; RooRealVar m2(""m2"", ""m2"", -1, -10, 10);; RooRealVar s2(""s2"", ""s2"", 6, 1, 50);; RooGaussian bkg(""bkg"", ""bkg"", x, m2, s2);; ; RooRealVar fsig(""fsig"", ""fsig"", 0.33, 0, 1);; RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);; ; // Create binned dataset; x.setBins(25);; std::unique_ptr<RooAbsData> d{model.generateBinned(x, 1000)};; ; // Perform fit and save fit result; std::unique_ptr<RooFitResult> r{model.fitTo(*d, Save(), PrintLevel(-1))};; ; // V i s u a l i z e f i t e r r o r; // -------------------------------------; ; // Make plot frame; RooPlot *frame = x.frame(Bins(40), Title(""P.d.f with visualized 1-sigma error band""));; d->plotOn(frame);; ; // Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; // This results in an error band that is by construction symmetric; //; // The linear error is calculated as; // error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); //; // where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; //; // with f(x) = the plotted curve; // 'da' = error taken from the fit result; // Corr(a,a') = the correlation matrix from the fit result; // Z = requested significance 'Z sigma band'; //; //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8C.html:91,Guid,Guide,91,doc/master/rf610__visualerror_8C.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf610_visualerror.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf610_visualerror.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: visualization of errors from a covariance matrix . ; import ROOT; ; ; # Setup example fit; # ---------------------------------------; ; # Create sum of two Gaussians pdf with factory; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); ; m = ROOT.RooRealVar(""m"", ""m"", 0, -10, 10); s = ROOT.RooRealVar(""s"", ""s"", 2, 1, 50); sig = ROOT.RooGaussian(""sig"", ""sig"", x, m, s); ; m2 = ROOT.RooRealVar(""m2"", ""m2"", -1, -10, 10); s2 = ROOT.RooRealVar(""s2"", ""s2"", 6, 1, 50); bkg = ROOT.RooGaussian(""bkg"", ""bkg"", x, m2, s2); ; fsig = ROOT.RooRealVar(""fsig"", ""fsig"", 0.33, 0, 1); model = ROOT.RooAddPdf(""model"", ""model"", [sig, bkg], [fsig]); ; # Create binned dataset; x.setBins(25); d = model.generateBinned({x}, 1000); ; # Perform fit and save fit result; r = model.fitTo(d, Save=True, PrintLevel=-1); ; # Visualize fit error; # -------------------------------------; ; # Make plot frame; frame = x.frame(Bins=40, Title=""P.d.f with visualized 1-sigma error band""); d.plotOn(frame); ; # Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; # ROOT.This results in an error band that is by construction symmetric; #; # The linear error is calculated as; # error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); #; # where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; #; # with f(x) = the plotted curve; # 'da' = error taken from the fit result; # Corr(a,a') = the correlation matrix from the fit result; # Z = requested significance 'Z sigma band'; #; # The linear method is fast (required 2*N evaluations of the curve, N is the number of parameters),; # but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and; # Gaussian approximations made; #; model.plotOn(frame, VisualizeError=(r,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8py.html:92,Guid,Guide,92,doc/master/rf610__visualerror_8py.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf611_weightedfits.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf611_weightedfits.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: Parameter uncertainties for weighted unbinned ML fits . Parameter uncertainties for weighted unbinned ML fits; Based on example from https://arxiv.org/abs/1911.01303; This example compares different approaches to determining parameter uncertainties in weighted unbinned maximum likelihood fits. Performing a weighted unbinned maximum likelihood fits can be useful to account for acceptance effects and to statistically subtract background events using the sPlot formalism. It is however well known that the inverse Hessian matrix does not yield parameter uncertainties with correct coverage in the presence of event weights. Three approaches to the determination of parameter uncertainties are compared in this example:. Using the inverse weighted Hessian matrix [SumW2Error(false)]; Using the expression [SumW2Error(true)] ; \[; V_{ij} = H_{ik}^{-1} C_{kl} H_{lj}^{-1}; \]. where H is the weighted Hessian matrix and C is the Hessian matrix with squared weights; The asymptotically correct approach (for details please see https://arxiv.org/abs/1911.01303) [Asymptotic(true)] ; \[; V_{ij} = H_{ik}^{-1} D_{kl} H_{lj}^{-1}; \]. where H is the weighted Hessian matrix and D is given by ; \[; D_{kl} = \sum_{e=1}^{N} w_e^2 \frac{\partial \log(P)}{\partial \lambda_k}\frac{\partial \log(P)}{\partial; \lambda_l}; \]. with the event weight \(w_e\). The example performs the fit of a second order polynomial in the angle cos(theta) [-1,1] to a weighted data set. The polynomial is given by ; \[; P = \frac{ 1 + c_0 \cdot \cos(\theta) + c_1 \cdot \cos(\theta) \cdot \cos(\theta) }{\mathrm{Norm}}; \]. The two coefficients \( c_0 \) and \( c_1 \) and their uncertainties are to be determined in the fit.; The per-event weight is used to correct for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf611__weightedfits_8C.html:92,Guid,Guide,92,doc/master/rf611__weightedfits_8C.html,https://root.cern,https://root.cern/doc/master/rf611__weightedfits_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf612_recoverFromInvalidParameters.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf612_recoverFromInvalidParameters.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: Recover from regions where the function is not defined. ; We demonstrate improved recovery from disallowed parameters. For this, we use a polynomial PDF of the form ; \[; \mathrm{Pol2} = \mathcal{N} \left( c + a_1 \cdot x + a_2 \cdot x^2 + 0.01 \cdot x^3 \right),; \]. where \( \mathcal{N} \) is a normalisation factor. Unless the parameters are chosen carefully, this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes an error to the minimiser, which might try to recover.; Before ROOT 6.24, RooFit always passed the highest function value that was encountered during the minimisation to the minimiser. If a parameter is far in a disallowed region, the minimiser has to blindly test various values of the parameters. It might find the correct values by chance, but often be unable to recover from bad starting values. Here, we use a model with such bad values.; Starting with ROOT 6.24, the minimiser receives more information. For example, when a PDF is negative, the magnitude of the ""undershoot"" is passed to the minimiser. The minimiser can use this to compute a gradient, which will eventually lead it out of the disallowed region. The steepness of this gradient can be chosen using RooFit::RecoverFromUndefinedRegions(double). A value of zero is equivalent to RooFit before ROOT 6.24. Positive values activate the recovery. Values between 1. and 10. were found to be a good default. If no argument is passed, RooFit uses 10.; ; #include <RooRealVar.h>; #include <RooPolynomial.h>; #include <RooPlot.h>; #include <RooDataSet.h>; #include <RooGlobalFunc.h>; #include <RooFitResult.h>; #include <RooMsgService.h>; ; #include <TCanvas.h>; #include <TLegend.h>; ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html:108,Guid,Guide,108,doc/master/rf612__recoverFromInvalidParameters_8C.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf612_recoverFromInvalidParameters.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf612_recoverFromInvalidParameters.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: Recover from regions where the function is not defined. ; We demonstrate improved recovery from disallowed parameters. For this, we use a polynomial PDF of the form ; \[; \mathrm{Pol2} = \mathcal{N} \left( c + a_1 \cdot x + a_2 \cdot x^2 + 0.01 \cdot x^3 \right),; \]. where \( \mathcal{N} \) is a normalisation factor. Unless the parameters are chosen carefully, this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes an error to the minimiser, which might try to recover.; ; import ROOT; ; ; # Create a fit model:; # The polynomial is notoriously unstable, because it can quickly go negative.; # Since PDFs need to be positive, one often ends up with an unstable fit model.; x = ROOT.RooRealVar(""x"", ""x"", -15, 15); a1 = ROOT.RooRealVar(""a1"", ""a1"", -0.5, -10.0, 20.0); a2 = ROOT.RooRealVar(""a2"", ""a2"", 0.2, -10.0, 20.0); a3 = ROOT.RooRealVar(""a3"", ""a3"", 0.01); pdf = ROOT.RooPolynomial(""pol3"", ""c + a1 * x + a2 * x*x + 0.01 * x*x*x"", x, [a1, a2, a3]); ; # Create toy data with all-positive coefficients:; data = pdf.generate(x, 10000); ; # For plotting.; # We create pointers to the plotted objects. We want these objects to leak out of the function,; # so we can still see them after it returns.; c = ROOT.TCanvas(); frame = x.frame(); data.plotOn(frame, Name=""data""); ; # Plotting a PDF with disallowed parameters doesn't work. We would get a lot of error messages.; # Therefore, we disable plotting messages in RooFit's message streams:; ROOT.RooMsgService.instance().getStream(0).removeTopic(ROOT.RooFit.Plotting); ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Plotting); ; ; # RooFit before ROOT 6.24; # ---------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:109,Guid,Guide,109,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf613_global_observables.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf613_global_observables.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; This tutorial explains the concept of global observables in RooFit, and showcases how their values can be stored either in the model or in the dataset. . Introduction; Note: in this tutorial, we are multiplying the likelihood with an additional likelihood to constrain the parameters with auxiliary measurements. This is different from the rf604_constraints tutorial, where the likelihood is multiplied with a Bayesian prior to constrain the parameters.; With RooFit, you usually optimize some model parameters p to maximize the likelihood L given the per-event or per-bin observations x:. \[ L( x | p ) \]. Often, the parameters are constrained with some prior likelihood C, which doesn't depend on the observables x:. \[ L'( x | p ) = L( x | p ) * C( p ) \]. Usually, these constraint terms depend on some auxiliary measurements of other observables g. The constraint term is then the likelihood of the so-called global observables:. \[ L'( x | p ) = L( x | p ) * C( g | p ) \]. For example, think of a model where the true luminosity lumi is a nuisance parameter that is constrained by an auxiliary measurement lumi_obs with uncertainty lumi_obs_sigma:. \[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi_obs | lumi, lumi_obs_sigma) \]. As a Gaussian is symmetric under exchange of the observable and the mean parameter, you can also sometimes find this equivalent but less conventional formulation for Gaussian constraints:. \[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi | lumi_obs, lumi_obs_sigma) \]. If you wanted to constrain a parameter that represents event counts, you would use a Poissonian constraint, e.g.:. \[ L'(data | mu, count) = L(data | mu, count) * \text{Poisson}(count_obs | count) \]. Unlike a Gaussian, a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf613__global__observables_8C.html:98,Guid,Guide,98,doc/master/rf613__global__observables_8C.html,https://root.cern,https://root.cern/doc/master/rf613__global__observables_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf613_global_observables.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf613_global_observables.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; This tutorial explains the concept of global observables in RooFit, and showcases how their values can be stored either in the model or in the dataset. . Introduction; Note: in this tutorial, we are multiplying the likelihood with an additional likelihood to constrain the parameters with auxiliary measurements. This is different from the rf604_constraints tutorial, where the likelihood is multiplied with a Bayesian prior to constrain the parameters.; With RooFit, you usually optimize some model parameters p to maximize the likelihood L given the per-event or per-bin observations x:. \[ L( x | p ) \]. Often, the parameters are constrained with some prior likelihood C, which doesn't depend on the observables x:. \[ L'( x | p ) = L( x | p ) * C( p ) \]. Usually, these constraint terms depend on some auxiliary measurements of other observables g. The constraint term is then the likelihood of the so-called global observables:. \[ L'( x | p ) = L( x | p ) * C( g | p ) \]. For example, think of a model where the true luminosity lumi is a nuisance parameter that is constrained by an auxiliary measurement lumi_obs with uncertainty lumi_obs_sigma:. \[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi_obs | lumi, lumi_obs_sigma) \]. As a Gaussian is symmetric under exchange of the observable and the mean parameter, you can also sometimes find this equivalent but less conventional formulation for Gaussian constraints:. \[ L'(data | mu, lumi) = L(data | mu, lumi) * \text{Gauss}(lumi | lumi_obs, lumi_obs_sigma) \]. If you wanted to constrain a parameter that represents event counts, you would use a Poissonian constraint, e.g.:. \[ L'(data | mu, count) = L(data | mu, count) * \text{Poisson}(count_obs | count) \]. Unlik",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf613__global__observables_8py.html:99,Guid,Guide,99,doc/master/rf613__global__observables_8py.html,https://root.cern,https://root.cern/doc/master/rf613__global__observables_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf614_binned_fit_problems.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf614_binned_fit_problems.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; A tutorial that explains you how to solve problems with binning effects and numerical stability in binned fits. . Introduction; In this tutorial, you will learn three new things:. How to reduce the bias in binned fits by changing the definition of the normalization integral; How to completely get rid of binning effects by integrating the pdf over each bin; How to improve the numeric stability of fits with a greatly different number of events per bin, using a constant per-bin counterterm. ; // Generate binned Asimov dataset for a continuous pdf.; // One should in principle be able to use; // pdf.generateBinned(x, nEvents, RooFit::ExpectedData()).; // Unfortunately it has a problem: it also has the bin bias that this tutorial; // demonstrates, to if we would use it, the biases would cancel out.; std::unique_ptr<RooDataHist> generateBinnedAsimov(RooAbsPdf const &pdf, RooRealVar &x, int nEvents); {; auto dataH = std::make_unique<RooDataHist>(""dataH"", ""dataH"", RooArgSet{x});; RooAbsBinning &xBinning = x.getBinning();; for (int iBin = 0; iBin < x.numBins(); ++iBin) {; x.setRange(""bin"", xBinning.binLow(iBin), xBinning.binHigh(iBin));; std::unique_ptr<RooAbsReal> integ{pdf.createIntegral(x, RooFit::NormSet(x), RooFit::Range(""bin""))};; integ->getVal();; dataH->set(iBin, nEvents * integ->getVal(), -1);; }; return dataH;; }; ; // Force numeric integration and do this numeric integration with the; // RooBinIntegrator, which sums the function values at the bin centers.; void enableBinIntegrator(RooAbsReal &func, int numBins); {; RooNumIntConfig customConfig(*func.getIntegratorConfig());; customConfig.method1D().setLabel(""RooBinIntegrator"");; customConfig.getConfigSection(""RooBinIntegrator"").setRealValue(""numBins"", numBins);; func.setIntegra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:99,Guid,Guide,99,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,2,"['Guid', 'learn']","['Guide', 'learn']"
Usability,". ROOT: tutorials/roofit/rf614_binned_fit_problems.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf614_binned_fit_problems.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; A tutorial that explains you how to solve problems with binning effects and numerical stability in binned fits. . Introduction; In this tutorial, you will learn three new things:. How to reduce the bias in binned fits by changing the definition of the normalization integral; How to completely get rid of binning effects by integrating the pdf over each bin; How to improve the numeric stability of fits with a greatly different number of events per bin, using a constant per-bin counterterm. ; import ROOT; ; ; def generateBinnedAsimov(pdf, x, n_events):; """"""; Generate binned Asimov dataset for a continuous pdf.; One should in principle be able to use; pdf.generateBinned(x, n_events, RooFit::ExpectedData()).; Unfortunately it has a problem: it also has the bin bias that this tutorial; demonstrates, to if we would use it, the biases would cancel out.; """"""; data_h = ROOT.RooDataHist(""dataH"", ""dataH"", {x}); x_binning = x.getBinning(); ; for i_bin in range(x.numBins()):; x.setRange(""bin"", x_binning.binLow(i_bin), x_binning.binHigh(i_bin)); integ = pdf.createIntegral(x, NormSet=x, Range=""bin""); ROOT.SetOwnership(integ, True); integ.getVal(); data_h.set(i_bin, n_events * integ.getVal(), -1); ; return data_h; ; ; def enableBinIntegrator(func, num_bins):; """"""; Force numeric integration and do this numeric integration with the; RooBinIntegrator, which sums the function values at the bin centers.; """"""; custom_config = ROOT.RooNumIntConfig(func.getIntegratorConfig()); custom_config.method1D().setLabel(""RooBinIntegrator""); custom_config.getConfigSection(""RooBinIntegrator"").setRealValue(""numBins"", num_bins); func.setIntegratorConfig(custom_config); func.forceNumInt(True); ; ; def disableBinIntegrator(func):; """"""; Reset the integra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html:100,Guid,Guide,100,doc/master/rf614__binned__fit__problems_8py.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html,2,"['Guid', 'learn']","['Guide', 'learn']"
Usability,". ROOT: tutorials/roofit/rf615_simulation_based_inference.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf615_simulation_based_inference.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Use Simulation Based Inference (SBI) in RooFit. ; This tutorial shows how to use SBI in ROOT. As reference distribution we choose a simple uniform distribution. The target distribution is chosen to be gaussian with different mean values. The classifier is trained to discriminate between the reference and target distribution. We see how the neural networks generalize to unknown mean values.; We compare the approach of using the likelihood ratio trick to morphing.; An introduction of SBI can be found in https://arxiv.org/pdf/2010.06439.; A short recap: The idea of SBI is to fit a surrogate model to the data, in order to really learn the likelihood function instead of calculating it. Therefore, a classifier is trained to discriminate between samples from a target distribution (here the Gaussian) $$x\sim p(x|\theta)$$ and a reference distribution (here the Uniform) $$x\sim p_{ref}(x|\theta)$$.; The output of the classifier $$\hat{s}(\theta)$$ is a monotonic function of the likelihood ration and can be turned into an estimate of the likelihood ratio via $$\hat{r}(\theta)=\frac{1-\hat{s}(\theta)}{\hat{s}(\theta)}.$$ This is called the likelihood ratio trick.; In the end we compare the negative logarithmic likelihoods of the learned, morphed and analytical likelihood with minuit and as a plot. ; import ROOT; import numpy as np; from sklearn.neural_network import MLPClassifier; ; # The samples used for training the classifier in this tutorial / rescale for more accuracy; n_samples = 10000; ; # Kills warning messages; ROOT.RooMsgService.instance().setGlobalKillBelow(ROOT.RooFit.WARNING); ; ; # Morphing as a baseline; def morphing(setting):; ; # Define binning for morphing; grid = ROOT.RooMomentMorphFuncND.Gr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html:107,Guid,Guide,107,doc/master/rf615__simulation__based__inference_8py.html,https://root.cern,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html,3,"['Guid', 'learn', 'simpl']","['Guide', 'learn', 'simple']"
Usability,". ROOT: tutorials/roofit/rf616_morphing.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf616_morphing.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Use Morphing in RooFit. ; This tutorial shows how to use template morphing inside RooFit. As input we have several Gaussian distributions. The output is one gaussian, with a specific mean value. Since likelihoods are often used within the framework of morphing, we provide a way to estimate the negative log likelihood (nll).; Based on example of Kyle Cranmer https://gist.github.com/cranmer/b67830e46d53d5f7cf2d. ; #include ""RooRealVar.h""; #include ""RooRealVar.h""; #include ""RooWorkspace.h""; #include ""RooGaussian.h""; #include ""RooUniform.h""; #include ""RooDataSet.h""; #include ""RooPlot.h""; #include ""RooMomentMorphFuncND.h""; #include ""RooAbsPdf.h""; ; using namespace RooFit;; ; // Number of samples to fill the histograms; const int n_samples = 1000;; ; // Kills warning massages; RooMsgService::instance().setGlobalKillBelow(RooFit::WARNING);; ; // Define the morphing routine; RooPlot *perform_morphing(RooWorkspace &ws, RooMomentMorphFuncND::Setting setting, double sigma); {; // Get Variables from the workspace; RooRealVar *x_var = ws.var(""x"");; RooRealVar *mu_var = ws.var(""mu"");; RooAbsPdf *gauss = ws.pdf(""gauss"");; ; // Initialize a plot; RooPlot *frame1 = x_var->frame();; ; // Define binning for morphing; RooMomentMorphFuncND::Grid grid(RooBinning(4, 0.0, 4.0));; ; // Set binning of histograms, has to be customized for optimal results; x_var->setBins(50);; ; std::vector<int> parampoints = {0, 1, 2, 3, 4};; ; for (auto i : parampoints) {; // Define the sampled gaussians; RooRealVar mu_help(Form(""mu%d"", i), Form(""mu%d"", i), i);; // Use * because RooGaussian expects objects no pointers; RooGaussian help(Form(""g%d"", i), Form(""g%d"", i), *x_var, mu_help, sigma);; ws.import(help, Silence(true));; ; // Fill the histograms use a unique pointer to prevent memory lea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf616__morphing_8C.html:88,Guid,Guide,88,doc/master/rf616__morphing_8C.html,https://root.cern,https://root.cern/doc/master/rf616__morphing_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf616_morphing.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf616_morphing.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Use Morphing in RooFit. ; This tutorial shows how to use template morphing inside RooFit. As input we have several Gaussian distributions. The output is one gaussian, with a specific mean value. Since likelihoods are often used within the framework of morphing, we provide a way to estimate the negative log likelihood (nll).; Based on example of Kyle Cranmer https://gist.github.com/cranmer/46fff8d22015e5a26619. ; ; import ROOT; ; # Number of samples to fill the histograms; n_samples = 1000; ; ; # Kills warning messages; ROOT.RooMsgService.instance().setGlobalKillBelow(ROOT.RooFit.WARNING); ; ; # morphing as a baseline; def morphing(setting):; # set up a frame for plotting; frame1 = x_var.frame(); ; # define binning for morphing; bin_mu_x = ROOT.RooBinning(4, 0.0, 4.0); grid = ROOT.RooMomentMorphFuncND.Grid(bin_mu_x); x_var.setBins(50); ; # number of 'sampled' Gaussians, if you change it, adjust the binning properly; for i in range(5):; # Create the sampled Gaussian; workspace.factory(f""Gaussian::g{i}(x, mu{i}[{i}], {sigma})"".format(i=i)); ; # Fill the histograms; hist = workspace[f""g{i}""].generateBinned([x_var], n_samples * 100); # Make sure that every bin is filled and we don't get zero probability; for i_bin in range(hist.numEntries()):; hist.add(hist.get(i_bin), 1.0); ; # Add the pdf to the workspace, the inOrder of 1 is necessary for calculation of the nll; # Adjust it to 0 to see binning; workspace.Import(ROOT.RooHistPdf(f""histpdf{i}"", f""histpdf{i}"", [x_var], hist, intOrder=1)); ; # Add the pdf to the grid and to the plot; grid.addPdf(workspace[f""histpdf{i}""], int(i)); workspace[f""histpdf{i}""].plotOn(frame1); ; # Create the morphing and add it to the workspace; morph_func = ROOT.RooMomentMorphFuncND(""morph_func"", ""morph_func"", [mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf616__morphing_8py.html:89,Guid,Guide,89,doc/master/rf616__morphing_8py.html,https://root.cern,https://root.cern/doc/master/rf616__morphing_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf617_simulation_based_inference_multidimensional.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf617_simulation_based_inference_multidimensional.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Use Simulation Based Inference (SBI) in multiple dimensions in RooFit. ; This tutorial shows how to use SBI in higher dimension in ROOT. This tutorial transfers the simple concepts of the 1D case introduced in rf615_simulation_based_inference.py onto the higher dimensional case.; Again as reference distribution we choose a simple uniform distribution. The target distribution is chosen to be Gaussian with different mean values. The classifier is trained to discriminate between the reference and target distribution. We see how the neural networks generalize to unknown mean values.; Furthermore, we compare SBI to the approach of moment morphing. In this case, we can conclude, that SBI is way more sample eficcient when it comes to estimating the negative log likelihood ratio.; For an introductory background see rf615_simulation_based_inference.py. ; import ROOT; import numpy as np; from sklearn.neural_network import MLPClassifier; import itertools; ; # Kills warning messages; ROOT.RooMsgService.instance().setGlobalKillBelow(ROOT.RooFit.WARNING); ; n_samples_morph = 10000 # Number of samples for morphing; n_bins = 4 # Number of 'sampled' Gaussians; n_samples_train = n_samples_morph * n_bins # To have a fair comparison; ; ; # Morphing as baseline; def morphing(setting, n_dimensions):; # Define binning for morphing; ; binning = [ROOT.RooBinning(n_bins, 0.0, n_bins - 1.0) for dim in range(n_dimensions)]; grid = ROOT.RooMomentMorphFuncND.Grid(*binning); ; # Set bins for each x variable; for x_var in x_vars:; x_var.setBins(50); ; # Define mu values as input for morphing for each dimension; mu_helps = [ROOT.RooRealVar(f""mu{i}"", f""mu{i}"", 0.0) for i in range(n_dimensions)]; ; #",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html:124,Guid,Guide,124,doc/master/rf617__simulation__based__inference__multidimensional_8py.html,https://root.cern,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html,3,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/roofit/rf618_mixture_models.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf618_mixture_models.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Use of mixture models in RooFit. ; This tutorial shows, how to use mixture models for Likelihood Calculation in ROOT. Instead of directly calculating the likelihood we use simulation based inference (SBI) as shown in tutorial 'rf615_simulation_based_inference.py'. We train the classifier to discriminate between samples from an background hypothesis here the zz samples and a target hypothesis, here the higgs samples. The data preparation is based on the tutorial 'df106_HiggsToFourLeptons.py'.; An introduction to mixture models can be found here https://arxiv.org/pdf/1506.02169.; A short summary: We assume the whole probability distribution can be written as a mixture of several components, i.e. $$p(x|\theta)= \sum_{c}w_{c}(\theta)p_{c}(x|\theta)$$ We can write the likelihood ratio in terms of pairwise classification problems \begin{align*} \frac{p(x|\mu)}{p(x|0)}&= \frac{\sum_{c}w_{c}(\mu)p_{c}(x|\mu)}{\sum_{c'}w_{c'}(0)p_{c'}(x|0)}\ &=\sum_{c}\Bigg[\sum_{c'}\frac{w_{c'}(0)}{w_{c}(\mu)}\frac{p_{c'}(x|0)}{p_{c}(x|\mu)}\Bigg]^{-1}, \end{align*} where mu is the signal strength, and a value of 0 corresponds to the background hypothesis. Using this decomposition, one is able to use the pairwise likelihood ratios.; Since the only free parameter in our case is mu, the distributions are independent of this parameter and the dependence on the signal strength can be encoded into the weights. Thus, the subratios simplify dramatically since they are independent of theta and these ratios can be pre-computed and the classifier does not need to be parametrized.; If you wish to see an analysis done with template histograms see 'hf001_example.py'.; ; import ROOT; import os; import numpy as np; import xgboost as xgb; ; # Get Dataframe from t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf618__mixture__models_8py.html:95,Guid,Guide,95,doc/master/rf618__mixture__models_8py.html,https://root.cern,https://root.cern/doc/master/rf618__mixture__models_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf701_efficiencyfit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf701_efficiencyfit.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: unbinned maximum likelihood fit of an efficiency eff(x) function ; to a dataset D(x,cut), where cut is a category encoding a selection, of which the efficiency as function of x should be described by eff(x). ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooFormulaVar.h""; #include ""RooProdPdf.h""; #include ""RooEfficiency.h""; #include ""RooPolynomial.h""; #include ""RooCategory.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf701_efficiencyfit(); {; // C o n s t r u c t e f f i c i e n c y f u n c t i o n e ( x ); // -------------------------------------------------------------------; ; // Declare variables x,mean,sigma with associated name, title, initial value and allowed range; RooRealVar x(""x"", ""x"", -10, 10);; ; // Efficiency function eff(x;a,b); RooRealVar a(""a"", ""a"", 0.4, 0, 1);; RooRealVar b(""b"", ""b"", 5);; RooRealVar c(""c"", ""c"", -1, -10, 10);; RooFormulaVar effFunc(""effFunc"", ""(1-a)+a*cos((x-c)/b)"", RooArgList(a, b, c, x));; ; // C o n s t r u c t c o n d i t i o n a l e f f i c i e n c y p d f E ( c u t | x ); // ------------------------------------------------------------------------------------------; ; // Acceptance state cut (1 or 0); RooCategory cut(""cut"", ""cutr"", { {""accept"", 1}, {""reject"", 0} });; ; // Construct efficiency pdf eff(cut|x); RooEfficiency effPdf(""effPdf"", ""effPdf"", effFunc, cut, ""accept"");; ; // G e n e r a t e d a t a ( x , c u t ) f r o m a t o y m o d e l; // -----------------------------------------------------------------------------; ; // Construct global shape pdf shape(x) and product model(x,cut) = eff(cut|x)*shape(x); // (These are _only_ needed to generate some toy MC here ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf701__efficiencyfit_8C.html:93,Guid,Guide,93,doc/master/rf701__efficiencyfit_8C.html,https://root.cern,https://root.cern/doc/master/rf701__efficiencyfit_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf701_efficiencyfit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf701_efficiencyfit.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: unbinned maximum likelihood fit of an efficiency eff(x) function to a dataset D(x,cut), cut is a category encoding a selection, which the efficiency as function of x should be described by eff(x) . ; import ROOT; ; ; # Construct efficiency function e(x); # -------------------------------------------------------------------; ; # Declare variables x,mean, with associated name, title, value and allowed; # range; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); ; # Efficiency function eff(x;a,b); a = ROOT.RooRealVar(""a"", ""a"", 0.4, 0, 1); b = ROOT.RooRealVar(""b"", ""b"", 5); c = ROOT.RooRealVar(""c"", ""c"", -1, -10, 10); effFunc = ROOT.RooFormulaVar(""effFunc"", ""(1-a)+a*cos((x-c)/b)"", [a, b, c, x]); ; # Construct conditional efficiency pdf E(cut|x); # ------------------------------------------------------------------------------------------; ; # Acceptance state cut (1 or 0); cut = ROOT.RooCategory(""cut"", ""cutr"", {""accept"": 1, ""reject"": 0}); ; # Construct efficiency pdf eff(cut|x); effPdf = ROOT.RooEfficiency(""effPdf"", ""effPdf"", effFunc, cut, ""accept""); ; # Generate data (x, cut) from a toy model; # -----------------------------------------------------------------------------; ; # Construct global shape pdf shape(x) and product model(x,cut) = eff(cut|x)*shape(x); # (These are _only_ needed to generate some toy MC here to be used later); shapePdf = ROOT.RooPolynomial(""shapePdf"", ""shapePdf"", x, [-0.095]); model = ROOT.RooProdPdf(""model"", ""model"", {shapePdf}, Conditional=({effPdf}, {cut})); ; # Generate some toy data from model; data = model.generate({x, cut}, 10000); ; # Fit conditional efficiency pdf to data; # --------------------------------------------------------------------------; ; # Fit conditional efficiency pdf to data; ef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf701__efficiencyfit_8py.html:94,Guid,Guide,94,doc/master/rf701__efficiencyfit_8py.html,https://root.cern,https://root.cern/doc/master/rf701__efficiencyfit_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf702_efficiencyfit_2D.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf702_efficiencyfit_2D.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: unbinned maximum likelihood fit of an efficiency eff(x) function to a dataset D(x,cut), cut is a category encoding a selection whose efficiency as function of x should be described by eff(x) . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooCategory.h""; #include ""RooEfficiency.h""; #include ""RooPolynomial.h""; #include ""RooProdPdf.h""; #include ""RooFormulaVar.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf702_efficiencyfit_2D(bool flat = false); {; // C o n s t r u c t e f f i c i e n c y f u n c t i o n e ( x , y ); // -----------------------------------------------------------------------; ; // Declare variables x,mean,sigma with associated name, title, initial value and allowed range; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar y(""y"", ""y"", -10, 10);; ; // Efficiency function eff(x;a,b); RooRealVar ax(""ax"", ""ay"", 0.6, 0, 1);; RooRealVar bx(""bx"", ""by"", 5);; RooRealVar cx(""cx"", ""cy"", -1, -10, 10);; ; RooRealVar ay(""ay"", ""ay"", 0.2, 0, 1);; RooRealVar by(""by"", ""by"", 5);; RooRealVar cy(""cy"", ""cy"", -1, -10, 10);; ; RooFormulaVar effFunc(""effFunc"", ""((1-ax)+ax*cos((x-cx)/bx))*((1-ay)+ay*cos((y-cy)/by))"",; RooArgList(ax, bx, cx, x, ay, by, cy, y));; ; // Acceptance state cut (1 or 0); RooCategory cut(""cut"", ""cutr"", { {""accept"", 1}, {""reject"", 0} });; ; // C o n s t r u c t c o n d i t i o n a l e f f i c i e n c y p d f E ( c u t | x , y ); // ---------------------------------------------------------------------------------------------; ; // Construct efficiency pdf eff(cut|x); RooEfficiency effPdf(""effPdf"", ""effPdf"", effFunc, cut, ""accept"");; ; // G e n e r a t e d a t a ( x , y , c u t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf702__efficiencyfit__2D_8C.html:96,Guid,Guide,96,doc/master/rf702__efficiencyfit__2D_8C.html,https://root.cern,https://root.cern/doc/master/rf702__efficiencyfit__2D_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf702_efficiencyfit_2D.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf702_efficiencyfit_2D.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: unbinned maximum likelihood fit of an efficiency eff(x) function to a dataset D(x,cut), cut is a category encoding a selection whose efficiency as function of x should be described by eff(x) . ; import ROOT; ; ; flat = False; # Construct efficiency function e(x,y); # -----------------------------------------------------------------------; ; # Declare variables x,mean, with associated name, title, value and allowed; # range; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); y = ROOT.RooRealVar(""y"", ""y"", -10, 10); ; # Efficiency function eff(x;a,b); ax = ROOT.RooRealVar(""ax"", ""ay"", 0.6, 0, 1); bx = ROOT.RooRealVar(""bx"", ""by"", 5); cx = ROOT.RooRealVar(""cx"", ""cy"", -1, -10, 10); ; ay = ROOT.RooRealVar(""ay"", ""ay"", 0.2, 0, 1); by = ROOT.RooRealVar(""by"", ""by"", 5); cy = ROOT.RooRealVar(""cy"", ""cy"", -1, -10, 10); ; effFunc = ROOT.RooFormulaVar(; ""effFunc"", ""((1-ax)+ax*cos((x-cx)/bx))*((1-ay)+ay*cos((y-cy)/by))"", [ax, bx, cx, x, ay, by, cy, y]; ); ; # Acceptance state cut (1 or 0); cut = ROOT.RooCategory(""cut"", ""cutr"", {""accept"": 1, ""reject"": 0}); ; # Construct conditional efficiency pdf E(cut|x,y); # ---------------------------------------------------------------------------------------------; ; # Construct efficiency pdf eff(cut|x); effPdf = ROOT.RooEfficiency(""effPdf"", ""effPdf"", effFunc, cut, ""accept""); ; # Generate data(x,y,cut) from a toy model; # -------------------------------------------------------------------------------; ; # Construct global shape pdf shape(x) and product model(x,cut) = eff(cut|x)*shape(x); # (These are _only_ needed to generate some toy MC here to be used later); shapePdfX = ROOT.RooPolynomial(""shapePdfX"", ""shapePdfX"", x, [0 if flat else -0.095]); shapePdfY = ROOT.RooPolynomial(""shapePdfY"", ""shape",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf702__efficiencyfit__2D_8py.html:97,Guid,Guide,97,doc/master/rf702__efficiencyfit__2D_8py.html,https://root.cern,https://root.cern/doc/master/rf702__efficiencyfit__2D_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf703_effpdfprod.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf703_effpdfprod.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: using a product of an (acceptance) efficiency and a pdf as pdf . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooExponential.h""; #include ""RooEffProd.h""; #include ""RooFormulaVar.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf703_effpdfprod(); {; // D e f i n e o b s e r v a b l e s a n d d e c a y p d f; // ---------------------------------------------------------------; ; // Declare observables; RooRealVar t(""t"", ""t"", 0, 5);; ; // Make pdf; RooRealVar tau(""tau"", ""tau"", -1.54, -4, -0.1);; RooExponential model(""model"", ""model"", t, tau);; ; // D e f i n e e f f i c i e n c y f u n c t i o n; // ---------------------------------------------------; ; // Use error function to simulate turn-on slope; RooFormulaVar eff(""eff"", ""0.5*(TMath::Erf((t-1)/0.5)+1)"", t);; ; // D e f i n e d e c a y p d f w i t h e f f i c i e n c y; // ---------------------------------------------------------------; ; // Multiply pdf(t) with efficiency in t; RooEffProd modelEff(""modelEff"", ""model with efficiency"", model, eff);; ; // P l o t e f f i c i e n c y , p d f; // ----------------------------------------; ; RooPlot *frame1 = t.frame(Title(""Efficiency""));; eff.plotOn(frame1, LineColor(kRed));; ; RooPlot *frame2 = t.frame(Title(""Pdf with and without efficiency""));; ; model.plotOn(frame2, LineStyle(kDashed));; modelEff.plotOn(frame2);; ; // G e n e r a t e t o y d a t a , f i t m o d e l E f f t o d a t a; // ------------------------------------------------------------------------------; ; // Generate events. If the input pdf has an internal generator, the internal generator; // is used and an accept/reject sampling on the efficiency is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf703__effpdfprod_8C.html:90,Guid,Guide,90,doc/master/rf703__effpdfprod_8C.html,https://root.cern,https://root.cern/doc/master/rf703__effpdfprod_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf703_effpdfprod.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf703_effpdfprod.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: using a product of an (acceptance) efficiency and a pdf as pdf . ; import ROOT; ; ; # Define observables and decay pdf; # ---------------------------------------------------------------; ; # Declare observables; t = ROOT.RooRealVar(""t"", ""t"", 0, 5); ; # Make pdf; tau = ROOT.RooRealVar(""tau"", ""tau"", -1.54, -4, -0.1); model = ROOT.RooExponential(""model"", ""model"", t, tau); ; # Define efficiency function; # ---------------------------------------------------; ; # Use error function to simulate turn-on slope; eff = ROOT.RooFormulaVar(""eff"", ""0.5*(TMath::Erf((t-1)/0.5)+1)"", [t]); ; # Define decay pdf with efficiency; # ---------------------------------------------------------------; ; # Multiply pdf(t) with efficiency in t; modelEff = ROOT.RooEffProd(""modelEff"", ""model with efficiency"", model, eff); ; # Plot efficiency, pdf; # ----------------------------------------; ; frame1 = t.frame(Title=""Efficiency""); eff.plotOn(frame1, LineColor=""r""); ; frame2 = t.frame(Title=""Pdf with and without efficiency""); ; model.plotOn(frame2, LineStyle=""--""); modelEff.plotOn(frame2); ; # Generate toy data, fit model eff to data; # ------------------------------------------------------------------------------; ; # Generate events. If the input pdf has an internal generator, internal generator; # is used and an accept/reject sampling on the efficiency is applied.; data = modelEff.generate({t}, 10000); ; # Fit pdf. The normalization integral is calculated numerically.; modelEff.fitTo(data, PrintLevel=-1); ; # Plot generated data and overlay fitted pdf; frame3 = t.frame(Title=""Fitted pdf with efficiency""); data.plotOn(frame3); modelEff.plotOn(frame3); ; c = ROOT.TCanvas(""rf703_effpdfprod"", ""rf703_effpdfprod"", 1200, 400); c.Divide(3); c.cd(1); RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf703__effpdfprod_8py.html:91,Guid,Guide,91,doc/master/rf703__effpdfprod_8py.html,https://root.cern,https://root.cern/doc/master/rf703__effpdfprod_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf704_amplitudefit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf704_amplitudefit.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: using a pdf defined by a sum of real-valued amplitude components . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooFormulaVar.h""; #include ""RooRealSumPdf.h""; #include ""RooPolyVar.h""; #include ""RooProduct.h""; #include ""TH1.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf704_amplitudefit(); {; // S e t u p 2 D a m p l i t u d e f u n c t i o n s; // -------------------------------------------------------; ; // Observables; RooRealVar t(""t"", ""time"", -1., 15.);; RooRealVar cosa(""cosa"", ""cos(alpha)"", -1., 1.);; ; RooRealVar tau(""tau"", ""#tau"", 1.5);; RooRealVar deltaGamma(""deltaGamma"", ""deltaGamma"", 0.3);; RooFormulaVar coshG(""coshGBasis"", ""exp(-@0/ @1)*cosh(@0*@2/2)"", {t, tau, deltaGamma});; RooFormulaVar sinhG(""sinhGBasis"", ""exp(-@0/ @1)*sinh(@0*@2/2)"", {t, tau, deltaGamma});; ; // Construct polynomial amplitudes in cos(a); RooPolyVar poly1(""poly1"", ""poly1"", cosa, RooArgList{0.5, 0.2, 0.2}, 0);; RooPolyVar poly2(""poly2"", ""poly2"", cosa, RooArgList{1.0, -0.2, 3.0}, 0);; ; // Construct 2D amplitude as uncorrelated product of amp(t)*amp(cosa); RooProduct ampl1(""ampl1"", ""amplitude 1"", {poly1, coshG});; RooProduct ampl2(""ampl2"", ""amplitude 2"", {poly2, sinhG});; ; // C o n s t r u c t a m p l i t u d e s u m p d f; // -----------------------------------------------------; ; // Amplitude strengths; RooRealVar f1(""f1"", ""f1"", 1, 0, 2);; RooRealVar f2(""f2"", ""f2"", 0.5, 0, 2);; ; // Construct pdf; RooRealSumPdf pdf(""pdf"", ""pdf"", RooArgList(ampl1, ampl2), RooArgList(f1, f2));; ; // Generate some toy data from pdf; std::unique_ptr<RooDataSet> data{pdf.generate({t, cosa}, 10000)};; ; // Fit pdf to toy data with only amplitude strength floating; pdf.fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf704__amplitudefit_8C.html:92,Guid,Guide,92,doc/master/rf704__amplitudefit_8C.html,https://root.cern,https://root.cern/doc/master/rf704__amplitudefit_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf704_amplitudefit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf704_amplitudefit.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: using a pdf defined by a sum of real-valued amplitude components . ; import ROOT; ; ; # Setup 2D amplitude functions; # -------------------------------------------------------; ; # Observables; t = ROOT.RooRealVar(""t"", ""time"", -1.0, 15.0); cosa = ROOT.RooRealVar(""cosa"", ""cos(alpha)"", -1.0, 1.0); ; tau = ROOT.RooRealVar(""tau"", ""#tau"", 1.5); deltaGamma = ROOT.RooRealVar(""deltaGamma"", ""deltaGamma"", 0.3); coshG = ROOT.RooFormulaVar(""coshGBasis"", ""exp(-@0/ @1)*cosh(@0*@2/2)"", [t, tau, deltaGamma]); sinhG = ROOT.RooFormulaVar(""sinhGBasis"", ""exp(-@0/ @1)*sinh(@0*@2/2)"", [t, tau, deltaGamma]); ; # Construct polynomial amplitudes in cos(a); poly1 = ROOT.RooPolyVar(""poly1"", ""poly1"", cosa, [0.5, 0.2, 0.2], 0); poly2 = ROOT.RooPolyVar(""poly2"", ""poly2"", cosa, [1.0, -0.2, 3.0], 0); ; # Construct 2D amplitude as uncorrelated product of amp(t)*amp(cosa); ampl1 = ROOT.RooProduct(""ampl1"", ""amplitude 1"", [poly1, coshG]); ampl2 = ROOT.RooProduct(""ampl2"", ""amplitude 2"", [poly2, sinhG]); ; # Construct amplitude sum pdf; # -----------------------------------------------------; ; # Amplitude strengths; f1 = ROOT.RooRealVar(""f1"", ""f1"", 1, 0, 2); f2 = ROOT.RooRealVar(""f2"", ""f2"", 0.5, 0, 2); ; # Construct pdf; pdf = ROOT.RooRealSumPdf(""pdf"", ""pdf"", [ampl1, ampl2], [f1, f2]); ; # Generate some toy data from pdf; data = pdf.generate({t, cosa}, 10000); ; # Fit pdf to toy data with only amplitude strength floating; pdf.fitTo(data, PrintLevel=-1); ; # Plot amplitude sum pdf; # -------------------------------------------; ; # Make 2D plots of amplitudes; hh_cos = ampl1.createHistogram(""hh_cos"", t, Binning=50, YVar=dict(var=cosa, Binning=50)); hh_sin = ampl2.createHistogram(""hh_sin"", t, Binning=50, YVar=dict(var=cosa, Binning=50)); hh_cos.SetLin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf704__amplitudefit_8py.html:93,Guid,Guide,93,doc/master/rf704__amplitudefit_8py.html,https://root.cern,https://root.cern/doc/master/rf704__amplitudefit_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf705_linearmorph.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf705_linearmorph.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: linear interpolation between pdf shapes using the 'Alex Read' algorithm . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooIntegralMorph.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""TH1.h""; using namespace RooFit;; ; void rf705_linearmorph(); {; // C r e a t e e n d p o i n t p d f s h a p e s; // ------------------------------------------------------; ; // Observable; RooRealVar x(""x"", ""x"", -20, 20);; ; // Lower end point shape: a Gaussian; RooRealVar g1mean(""g1mean"", ""g1mean"", -10);; RooGaussian g1(""g1"", ""g1"", x, g1mean, 2.0);; ; // Upper end point shape: a Polynomial; RooPolynomial g2(""g2"", ""g2"", x, RooArgSet(-0.03, -0.001));; ; // C r e a t e i n t e r p o l a t i n g p d f; // -----------------------------------------------; ; // Create interpolation variable; RooRealVar alpha(""alpha"", ""alpha"", 0, 1.0);; ; // Specify sampling density on observable and interpolation variable; x.setBins(1000, ""cache"");; alpha.setBins(50, ""cache"");; ; // Construct interpolating pdf in (x,a) represent g1(x) at a=a_min; // and g2(x) at a=a_max; RooIntegralMorph lmorph(""lmorph"", ""lmorph"", g1, g2, x, alpha);; ; // P l o t i n t e r p o l a t i n g p d f a t v a r i o u s a l p h a; // -----------------------------------------------------------------------------; ; // Show end points as blue curves; RooPlot *frame1 = x.frame();; g1.plotOn(frame1);; g2.plotOn(frame1);; ; // Show interpolated shapes in red; alpha.setVal(0.125);; lmorph.plotOn(frame1, LineColor(kRed));; alpha.setVal(0.25);; lmorph.plotOn(frame1, LineColor(kRed));; alpha.setVal(0.375);; lmorph.plotOn(frame1, LineColor(kRed));; alpha.setVal(0.50);; lmorph.plotOn(frame1, LineColor(kRed)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf705__linearmorph_8C.html:91,Guid,Guide,91,doc/master/rf705__linearmorph_8C.html,https://root.cern,https://root.cern/doc/master/rf705__linearmorph_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf705_linearmorph.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf705_linearmorph.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; 'SPECIAL PDFS' RooFit tutorial macro #705 ; Linear interpolation between p.d.f shapes using the 'Alex Read' algorithm. ; ; import ROOT; ; ; # Create end point pdf shapes; # ------------------------------------------------------; ; # Observable; x = ROOT.RooRealVar(""x"", ""x"", -20, 20); ; # Lower end point shape: a Gaussian; g1mean = ROOT.RooRealVar(""g1mean"", ""g1mean"", -10); g1 = ROOT.RooGaussian(""g1"", ""g1"", x, g1mean, 2.0); ; # Upper end point shape: a Polynomial; g2 = ROOT.RooPolynomial(""g2"", ""g2"", x, [-0.03, -0.001]); ; # Create interpolating pdf; # -----------------------------------------------; ; # Create interpolation variable; alpha = ROOT.RooRealVar(""alpha"", ""alpha"", 0, 1.0); ; # Specify sampling density on observable and interpolation variable; x.setBins(1000, ""cache""); alpha.setBins(50, ""cache""); ; # Construct interpolating pdf in (x,a) represent g1(x) at a=a_min; # and g2(x) at a=a_max; lmorph = ROOT.RooIntegralMorph(""lmorph"", ""lmorph"", g1, g2, x, alpha); ; # Plot interpolating pdf aat various alphas a l p h a; # -----------------------------------------------------------------------------; ; # Show end points as blue curves; frame1 = x.frame(); g1.plotOn(frame1); g2.plotOn(frame1); ; # Show interpolated shapes in red; alpha.setVal(0.125); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.25); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.375); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.50); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.625); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.75); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.875); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.95); lmorph.plotOn(frame1, LineColor=""r""); ; # Show 2D distribution of pdf(x,alpha); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf705__linearmorph_8py.html:92,Guid,Guide,92,doc/master/rf705__linearmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf705__linearmorph_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf706_histpdf.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf706_histpdf.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: histogram-based pdfs and functions . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooHistPdf.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf706_histpdf(); {; // C r e a t e p d f f o r s a m p l i n g; // ---------------------------------------------; ; RooRealVar x(""x"", ""x"", 0, 20);; RooPolynomial p(""p"", ""p"", x, RooArgList(0.01, -0.01, 0.0004));; ; // C r e a t e l o w s t a t s h i s t o g r a m; // ---------------------------------------------------; ; // Sample 500 events from p; x.setBins(20);; std::unique_ptr<RooDataSet> data1{p.generate(x, 500)};; ; // Create a binned dataset with 20 bins and 500 events; std::unique_ptr<RooDataHist> hist1{data1->binnedClone()};; ; // Represent data in dh as pdf in x; RooHistPdf histpdf1(""histpdf1"", ""histpdf1"", x, *hist1, 0);; ; // Plot unbinned data and histogram pdf overlaid; RooPlot *frame1 = x.frame(Title(""Low statistics histogram pdf""), Bins(100));; data1->plotOn(frame1);; histpdf1.plotOn(frame1);; ; // C r e a t e h i g h s t a t s h i s t o g r a m; // -----------------------------------------------------; ; // Sample 100000 events from p; x.setBins(10);; std::unique_ptr<RooDataSet> data2{p.generate(x, 100000)};; ; // Create a binned dataset with 10 bins and 100K events; std::unique_ptr<RooDataHist> hist2{data2->binnedClone()};; ; // Represent data in dh as pdf in x, apply 2nd order interpolation; RooHistPdf histpdf2(""histpdf2"", ""histpdf2"", x, *hist2, 2);; ; // Plot unbinned data and histogram pdf overlaid; RooPlot *frame2 = x.frame(Title(""High stats histogram pdf with interpolation""), Bins(100));; data2->plotOn(frame2);; histpdf2.plotOn(frame2);; ; TCanvas *c = new ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf706__histpdf_8C.html:87,Guid,Guide,87,doc/master/rf706__histpdf_8C.html,https://root.cern,https://root.cern/doc/master/rf706__histpdf_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf706_histpdf.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf706_histpdf.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: histogram based pdfs and functions . ; import ROOT; ; ; # Create pdf for sampling; # ---------------------------------------------; ; x = ROOT.RooRealVar(""x"", ""x"", 0, 20); p = ROOT.RooPolynomial(""p"", ""p"", x, [0.01, -0.01, 0.0004]); ; # Create low stats histogram; # ---------------------------------------------------; ; # Sample 500 events from p; x.setBins(20); data1 = p.generate({x}, 500); ; # Create a binned dataset with 20 bins and 500 events; hist1 = data1.binnedClone(); ; # Represent data in dh as pdf in x; histpdf1 = ROOT.RooHistPdf(""histpdf1"", ""histpdf1"", {x}, hist1, 0); ; # Plot unbinned data and histogram pdf overlaid; frame1 = x.frame(Title=""Low statistics histogram pdf"", Bins=100); data1.plotOn(frame1); histpdf1.plotOn(frame1); ; # Create high stats histogram; # -----------------------------------------------------; ; # Sample 100000 events from p; x.setBins(10); data2 = p.generate({x}, 100000); ; # Create a binned dataset with 10 bins and 100K events; hist2 = data2.binnedClone(); ; # Represent data in dh as pdf in x, 2nd order interpolation; histpdf2 = ROOT.RooHistPdf(""histpdf2"", ""histpdf2"", {x}, hist2, 2); ; # Plot unbinned data and histogram pdf overlaid; frame2 = x.frame(Title=""High stats histogram pdf with interpolation"", Bins=100); data2.plotOn(frame2); histpdf2.plotOn(frame2); ; c = ROOT.TCanvas(""rf706_histpdf"", ""rf706_histpdf"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.4); frame1.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.8); frame2.Draw(); ; c.SaveAs(""rf706_histpdf.png""); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf706_histpdf.py. tutorialsroofitrf706_histp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf706__histpdf_8py.html:88,Guid,Guide,88,doc/master/rf706__histpdf_8py.html,https://root.cern,https://root.cern/doc/master/rf706__histpdf_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf707_kernelestimation.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf707_kernelestimation.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: using non-parametric (multi-dimensional) kernel estimation pdfs . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooKeysPdf.h""; #include ""RooNDKeysPdf.h""; #include ""RooProdPdf.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf707_kernelestimation(); {; // C r e a t e l o w s t a t s 1 - D d a t a s e t; // -------------------------------------------------------; ; // Create a toy pdf for sampling; RooRealVar x(""x"", ""x"", 0, 20);; RooPolynomial p(""p"", ""p"", x, RooArgList(0.01, -0.01, 0.0004));; ; // Sample 500 events from p; std::unique_ptr<RooDataSet> data1{p.generate(x, 200)};; ; // C r e a t e 1 - D k e r n e l e s t i m a t i o n p d f; // ---------------------------------------------------------------; ; // Create adaptive kernel estimation pdf. In this configuration the input data; // is mirrored over the boundaries to minimize edge effects in distribution; // that do not fall to zero towards the edges; RooKeysPdf kest1(""kest1"", ""kest1"", x, *data1, RooKeysPdf::MirrorBoth);; ; // An adaptive kernel estimation pdf on the same data without mirroring option; // for comparison; RooKeysPdf kest2(""kest2"", ""kest2"", x, *data1, RooKeysPdf::NoMirror);; ; // Adaptive kernel estimation pdf with increased bandwidth scale factor; // (promotes smoothness over detail preservation); RooKeysPdf kest3(""kest1"", ""kest1"", x, *data1, RooKeysPdf::MirrorBoth, 2);; ; // Plot kernel estimation pdfs with and without mirroring over data; RooPlot *frame = x.frame(Title(""Adaptive kernel estimation pdf with and w/o mirroring""), Bins(20));; data1->plotOn(frame);; kest1.plotOn(frame);; kest2.plotOn(frame, LineStyl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf707__kernelestimation_8C.html:96,Guid,Guide,96,doc/master/rf707__kernelestimation_8C.html,https://root.cern,https://root.cern/doc/master/rf707__kernelestimation_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf707_kernelestimation.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf707_kernelestimation.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: using non-parametric (multi-dimensional) kernel estimation pdfs . ; import ROOT; ; ; # Create low stats 1D dataset; # -------------------------------------------------------; ; # Create a toy pdf for sampling; x = ROOT.RooRealVar(""x"", ""x"", 0, 20); p = ROOT.RooPolynomial(""p"", ""p"", x, [0.01, -0.01, 0.0004]); ; # Sample 500 events from p; data1 = p.generate({x}, 200); ; # Create 1D kernel estimation pdf; # ---------------------------------------------------------------; ; # Create adaptive kernel estimation pdf. In self configuration the input data; # is mirrored over the boundaries to minimize edge effects in distribution; # that do not fall to zero towards the edges; kest1 = ROOT.RooKeysPdf(""kest1"", ""kest1"", x, data1, ROOT.RooKeysPdf.MirrorBoth); ; # An adaptive kernel estimation pdf on the same data without mirroring option; # for comparison; kest2 = ROOT.RooKeysPdf(""kest2"", ""kest2"", x, data1, ROOT.RooKeysPdf.NoMirror); ; # Adaptive kernel estimation pdf with increased bandwidth scale factor; # (promotes smoothness over detail preservation); kest3 = ROOT.RooKeysPdf(""kest1"", ""kest1"", x, data1, ROOT.RooKeysPdf.MirrorBoth, 2); ; # Plot kernel estimation pdfs with and without mirroring over data; frame = x.frame(Title=""Adaptive kernel estimation pdf with and w/o mirroring"", Bins=20); data1.plotOn(frame); kest1.plotOn(frame); kest2.plotOn(frame, LineStyle=""--"", LineColor=""r""); ; # Plot kernel estimation pdfs with regular and increased bandwidth; frame2 = x.frame(Title=""Adaptive kernel estimation pdf with regular, bandwidth""); kest1.plotOn(frame2); kest3.plotOn(frame2, LineColor=""m""); ; # Create low status 2D dataset; # -------------------------------------------------------; ; # Construct a 2D toy pdf for sam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf707__kernelestimation_8py.html:97,Guid,Guide,97,doc/master/rf707__kernelestimation_8py.html,https://root.cern,https://root.cern/doc/master/rf707__kernelestimation_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf708_bphysics.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf708_bphysics.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: special decay pdf for B physics with mixing and/or CP violation . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooCategory.h""; #include ""RooBMixDecay.h""; #include ""RooBCPEffDecay.h""; #include ""RooBDecay.h""; #include ""RooFormulaVar.h""; #include ""RooTruthModel.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf708_bphysics(); {; // -------------------------------------; // B - D e c a y w i t h m i x i n g; // =====================================; ; // C o n s t r u c t p d f; // -------------------------; ; // Observable; RooRealVar dt(""dt"", ""dt"", -10, 10);; dt.setBins(40);; ; // Parameters; RooRealVar dm(""dm"", ""delta m(B0)"", 0.472);; RooRealVar tau(""tau"", ""tau (B0)"", 1.547);; RooRealVar w(""w"", ""flavour mistag rate"", 0.1);; RooRealVar dw(""dw"", ""delta mistag rate for B0/B0bar"", 0.1);; ; RooCategory mixState(""mixState"", ""B0/B0bar mixing state"");; mixState.defineType(""mixed"", -1);; mixState.defineType(""unmixed"", 1);; ; RooCategory tagFlav(""tagFlav"", ""Flavour of the tagged B0"");; tagFlav.defineType(""B0"", 1);; tagFlav.defineType(""B0bar"", -1);; ; // Use delta function resolution model; RooTruthModel truthModel(""tm"", ""truth model"", dt);; ; // Construct Bdecay with mixing; RooBMixDecay bmix(""bmix"", ""decay"", dt, mixState, tagFlav, tau, dm, w, dw, truthModel, RooBMixDecay::DoubleSided);; ; // P l o t p d f i n v a r i o u s s l i c e s; // ---------------------------------------------------; ; // Generate some data; std::unique_ptr<RooDataSet> data{bmix.generate({dt, mixState, tagFlav}, 10000)};; ; // Plot B0 and B0bar tagged data separately; // For all plots below B0 and B0 tagged data will look somewhat differently; // if th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf708__bphysics_8C.html:88,Guid,Guide,88,doc/master/rf708__bphysics_8C.html,https://root.cern,https://root.cern/doc/master/rf708__bphysics_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf708_bphysics.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf708_bphysics.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: special decay pdf for B physics with mixing and/or CP violation . ; import ROOT; ; ; # B-decay with mixing; # -------------------------; ; # Construct pdf; # -------------------------; ; # Observable; dt = ROOT.RooRealVar(""dt"", ""dt"", -10, 10); dt.setBins(40); ; # Parameters; dm = ROOT.RooRealVar(""dm"", ""delta m(B0)"", 0.472); tau = ROOT.RooRealVar(""tau"", ""tau (B0)"", 1.547); w = ROOT.RooRealVar(""w"", ""flavour mistag rate"", 0.1); dw = ROOT.RooRealVar(""dw"", ""delta mistag rate for B0/B0bar"", 0.1); ; mixState = ROOT.RooCategory(""mixState"", ""B0/B0bar mixing state"", {""mixed"": -1, ""unmixed"": 1}); ; tagFlav = ROOT.RooCategory(""tagFlav"", ""Flavour of the tagged B0"", {""B0"": 1, ""B0bar"": -1}); ; # Use delta function resolution model; tm = ROOT.RooTruthModel(""tm"", ""truth model"", dt); ; # Construct Bdecay with mixing; bmix = ROOT.RooBMixDecay(""bmix"", ""decay"", dt, mixState, tagFlav, tau, dm, w, dw, tm, type=""DoubleSided""); ; # Plot pdf in various slices; # ---------------------------------------------------; ; # Generate some data; data = bmix.generate({dt, mixState, tagFlav}, 10000); ; # Plot B0 and B0bar tagged data separately; # For all plots below B0 and B0 tagged data will look somewhat differently; # if the flavor tagging mistag rate for B0 and B0 is different (i.e. dw!=0); frame1 = dt.frame(Title=""B decay distribution with mixing (B0/B0bar)""); ; data.plotOn(frame1, Cut=""tagFlav==tagFlav::B0""); bmix.plotOn(frame1, Slice=(tagFlav, ""B0"")); ; data.plotOn(frame1, Cut=""tagFlav==tagFlav::B0bar"", MarkerColor=""c""); bmix.plotOn(frame1, Slice=(tagFlav, ""B0bar""), LineColor=""c""); ; # Plot mixed slice for B0 and B0bar tagged data separately; frame2 = dt.frame(Title=""B decay distribution of mixed events (B0/B0bar)""); ; data.plotOn(frame2, Cut=""mix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf708__bphysics_8py.html:89,Guid,Guide,89,doc/master/rf708__bphysics_8py.html,https://root.cern,https://root.cern/doc/master/rf708__bphysics_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf709_BarlowBeeston.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf709_BarlowBeeston.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Implementing the Barlow-Beeston method for taking into account the statistical uncertainty of a Monte-Carlo fit template. . ; #include ""RooRealVar.h""; #include ""RooGaussian.h""; #include ""RooUniform.h""; #include ""RooDataSet.h""; #include ""RooDataHist.h""; #include ""RooHistFunc.h""; #include ""RooRealSumPdf.h""; #include ""RooParamHistFunc.h""; #include ""RooHistConstraint.h""; #include ""RooProdPdf.h""; #include ""RooPlot.h""; ; #include ""TCanvas.h""; #include ""TPaveText.h""; ; #include <iostream>; #include <memory>; ; using namespace RooFit;; ; void rf709_BarlowBeeston(); {; // First, construct a likelihood model with a Gaussian signal on top of a uniform background; RooRealVar x(""x"", ""x"", -20, 20);; x.setBins(25);; ; RooRealVar meanG(""meanG"", ""meanG"", 1, -10, 10);; RooRealVar sigG(""sigG"", ""sigG"", 1.5, -10, 10);; RooGaussian g(""g"", ""Gauss"", x, meanG, sigG);; RooUniform u(""u"", ""Uniform"", x);; ; ; // Generate the data to be fitted; std::unique_ptr<RooDataSet> sigData(g.generate(x, 50));; std::unique_ptr<RooDataSet> bkgData(u.generate(x, 1000));; ; RooDataSet sumData(""sumData"", ""Gauss + Uniform"", x);; sumData.append(*sigData);; sumData.append(*bkgData);; ; ; // Make histogram templates for signal and background.; // Let's take a signal distribution with low statistics and a more accurate; // background distribution.; // Normally, these come from Monte Carlo simulations, but we will just generate them.; std::unique_ptr<RooDataHist> dh_sig( g.generateBinned(x, 50) );; std::unique_ptr<RooDataHist> dh_bkg( u.generateBinned(x, 10000) );; ; ; // ***** Case 0 - 'Rigid templates' *****; ; // Construct histogram shapes for signal and background; RooHistFunc p_h_sig(""p_h_sig"",""p_h_sig"",x,*dh_sig);; RooHistFunc p_h_bkg(""p_h_bkg"",""p_h_bkg"",x,*dh_bkg);; ; // Construct s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:93,Guid,Guide,93,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf709_BarlowBeeston.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf709_BarlowBeeston.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Implementing the Barlow-Beeston method for taking into account the statistical uncertainty of a Monte-Carlo fit template. . ; ; import ROOT; ; # First, construct a likelihood model with a Gaussian signal on top of a uniform background; x = ROOT.RooRealVar(""x"", ""x"", -20, 20); x.setBins(25); ; meanG = ROOT.RooRealVar(""meanG"", ""meanG"", 1, -10, 10); sigG = ROOT.RooRealVar(""sigG"", ""sigG"", 1.5, -10, 10); g = ROOT.RooGaussian(""g"", ""Gauss"", x, meanG, sigG); u = ROOT.RooUniform(""u"", ""Uniform"", x); ; ; # Generate the data to be fitted; sigData = g.generate(x, 50); bkgData = u.generate(x, 1000); ; sumData = ROOT.RooDataSet(""sumData"", ""Gauss + Uniform"", x); sumData.append(sigData); sumData.append(bkgData); ; ; # Make histogram templates for signal and background.; # Let's take a signal distribution with low statistics and a more accurate; # background distribution.; # Normally, these come from Monte Carlo simulations, but we will just generate them.; dh_sig = g.generateBinned(x, 50); dh_bkg = u.generateBinned(x, 10000); ; ; # Case 0 - 'Rigid templates'; ; # Construct histogram shapes for signal and background; p_h_sig = ROOT.RooHistFunc(""p_h_sig"", ""p_h_sig"", x, dh_sig); p_h_bkg = ROOT.RooHistFunc(""p_h_bkg"", ""p_h_bkg"", x, dh_bkg); ; # Construct scale factors for adding the two distributions; Asig0 = ROOT.RooRealVar(""Asig"", ""Asig"", 1, 0.01, 5000); Abkg0 = ROOT.RooRealVar(""Abkg"", ""Abkg"", 1, 0.01, 5000); ; # Construct the sum model; model0 = ROOT.RooRealSumPdf(""model0"", ""model0"", [p_h_sig, p_h_bkg], [Asig0, Abkg0], True); ; ; # Case 1 - 'Barlow Beeston'; ; # Construct parameterized histogram shapes for signal and background; p_ph_sig1 = ROOT.RooParamHistFunc(""p_ph_sig"", ""p_ph_sig"", dh_sig, x); p_ph_bkg1 = ROOT.RooParamHistFunc(""p_ph_bkg"", """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html:94,Guid,Guide,94,doc/master/rf709__BarlowBeeston_8py.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf710_roopoly.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf710_roopoly.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Taylor expansion of RooFit functions using the taylorExpand function with RooPolyFunc . ; #include ""RooRealVar.h""; #include ""RooPolyFunc.h""; #include ""RooAbsCollection.h""; #include ""RooPlot.h""; #include ""TCanvas.h""; ; using namespace RooFit;; ; void rf710_roopoly(); {; // C r e a t e p o l y n o m i a l; // f u n c t i o n o f f o u r t h o r d e r; // ---------------------------------------------; // x^4 - 5x^3 + 5x^2 + 5x -6; // ---------------------------------------------; ; RooRealVar x(""x"", ""x"", 0, -3, 10);; RooPolyFunc f(""f"", ""f"", RooArgSet(x));; f.addTerm(+1, x, 4);; f.addTerm(-5, x, 3);; f.addTerm(+5, x, 2);; f.addTerm(+5, x, 1);; f.addTerm(-6, x, 0);; ; // C r e a t e t a y l o r e x p a n s i o n; // ---------------------------------------------; double x0 = 2.0;; auto taylor_o1 = RooPolyFunc::taylorExpand(""taylor_o1"", ""taylor expansion order 1"", f, {x}, 1, {x0});; auto taylor_o2 = RooPolyFunc::taylorExpand(""taylor_o2"", ""taylor expansion order 2"", f, {x}, 2, {x0});; ; // Plot polynomial with first and second order taylor expansion overlaid; auto frame = x.frame(Title(""x^{4} - 5x^{3} + 5x^{2} + 5x - 6""));; auto c = new TCanvas(""rf710_roopoly"", ""rf710_roopoly"", 400, 400);; c->cd();; ; f.plotOn(frame, Name(""f""));; taylor_o1->plotOn(frame, LineColor(kRed), LineStyle(kDashed), Name(""taylor_o1""));; taylor_o2->plotOn(frame, LineColor(kRed - 9), LineStyle(kDotted), Name(""taylor_o2""));; ; frame->SetMinimum(-8.0);; frame->SetMaximum(+8.0);; frame->SetYTitle(""function value"");; frame->Draw();; ; auto legend = new TLegend(0.53, 0.7, 0.86, 0.87);; legend->SetFillColor(kWhite);; legend->SetLineColor(kWhite);; legend->SetTextSize(0.02);; legend->AddEntry(""taylor_o1"", ""Taylor expansion upto first order"", ""L"");; legend->AddEntry(""taylor_o2"", ""Taylor expansi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf710__roopoly_8C.html:87,Guid,Guide,87,doc/master/rf710__roopoly_8C.html,https://root.cern,https://root.cern/doc/master/rf710__roopoly_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf710_roopoly.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf710_roopoly.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Taylor expansion of RooFit functions using the taylorExpand function . ; import ROOT; ; # Create functions; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; x = ROOT.RooRealVar(""x"", ""x"", 0.0, -3, 10); ; # RooPolyFunc polynomial; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; # x ^ 4 - 5x ^ 3 + 5x ^ 2 + 5x - 6; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; f = ROOT.RooPolyFunc(""f"", ""f"", ROOT.RooArgList(x)); f.addTerm(+1, x, 4); f.addTerm(-5, x, 3); f.addTerm(+5, x, 2); f.addTerm(+5, x, 1); f.addTerm(-6, x, 0); ; f = ROOT.RooFormulaVar(""f"", ""f"", ""pow(@0,4) -5 * pow(@0,3) +5 * pow(@0,2) + 5 * pow(@0,1) - 6"", [x]); # taylor expand around x0 = 0; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; x0 = 2.0; taylor_o1 = ROOT.RooPolyFunc.taylorExpand(""taylorfunc_o1"", ""taylor expansion order 1"", f, [x], 1, [x0]); ROOT.SetOwnership(taylor_o1, True); taylor_o2 = ROOT.RooPolyFunc.taylorExpand(""taylorfunc_o2"", ""taylor expansion order 2"", f, [x], 2, [x0]); ROOT.SetOwnership(taylor_o2, True); frame = x.frame(Title=""x^{4} - 5x^{3} + 5x^{2} + 5x - 6""); c = ROOT.TCanvas(""c"", ""c"", 400, 400); ; f.plotOn(frame, Name=""f""); taylor_o1.plotOn(frame, Name=""taylor_o1"", LineColor=""kRed"", LineStyle=""kDashed""); taylor_o2.plotOn(frame, Name=""taylor_o2"", LineColor=""kRed - 9"", LineStyle=""kDotted""); ; c.cd(); frame.SetMinimum(-8.0); frame.SetMaximum(+8.0); frame.SetYTitle(""function value""); frame.Draw(); ; legend = ROOT.TLegend(0.53, 0.73, 0.86, 0.87); legend.SetFillColor(ROOT.kWhite); legend.SetLineColor(ROOT.kWhite); legend.SetTextSize(0.02); legend.AddEntry(""taylor_o1"", ""Taylor exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf710__roopoly_8py.html:88,Guid,Guide,88,doc/master/rf710__roopoly_8py.html,https://root.cern,https://root.cern/doc/master/rf710__roopoly_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf711_lagrangianmorph.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf711_lagrangianmorph.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Morphing effective field theory distributions with RooLagrangianMorphFunc A morphing function as a function of one coefficient is setup and can be used to obtain the distribution for any value of the coefficient. . ; #include <RooAbsCollection.h>; #include <RooDataHist.h>; #include <RooDataSet.h>; #include <RooLagrangianMorphFunc.h>; #include <RooPlot.h>; #include <RooRealVar.h>; ; #include <TCanvas.h>; #include <TColor.h>; #include <TFile.h>; #include <TFolder.h>; #include <TH1.h>; #include <TLegend.h>; #include <TStyle.h>; ; using namespace RooFit;; ; void rf711_lagrangianmorph(); {; // C r e a t e v a r i a b l e s f o r; // m o r p h i n g f u n c t i o n; // ---------------------------------------------; ; std::string observablename = ""pTV"";; ; // Setup observable that is morphed; RooRealVar obsvar(observablename.c_str(), ""p_{T}^{V}"", 10, 600);; ; // Setup two couplings that enters the morphing function; // kSM -> SM coupling set to constant (1); // cHq3 -> EFT parameter with NewPhysics attribute set to true; RooRealVar kSM(""kSM"", ""sm modifier"", 1.0);; RooRealVar cHq3(""cHq3"", ""EFT modifier"", 0.0, 1.0);; cHq3.setAttribute(""NewPhysics"", true);; ; // I n p u t s n e e d e d f o r c o n f i g; // ---------------------------------------------; std::string infilename = std::string(gROOT->GetTutorialDir()) + ""/roofit/input_histos_rf_lagrangianmorph.root"";; std::vector<std::string> samplelist = {""SM_NPsq0"", ""cHq3_NPsq1"", ""cHq3_NPsq2""};; ; // S e t u p C o n f i g; // ---------------------------------------------; RooLagrangianMorphFunc::Config config;; config.fileName = infilename;; config.observableName = observablename;; config.folderNames = samplelist;; config.couplings.add(cHq3);; config.couplings.add(kSM);; ; // C r e a t e m o r p h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf711__lagrangianmorph_8C.html:95,Guid,Guide,95,doc/master/rf711__lagrangianmorph_8C.html,https://root.cern,https://root.cern/doc/master/rf711__lagrangianmorph_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf711_lagrangianmorph.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf711_lagrangianmorph.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Morphing effective field theory distributions with RooLagrangianMorphFunc. ; A morphing function as a function of one coefficient is setup and can be used to obtain the distribution for any value of the coefficient. ; import ROOT; ; ROOT.gStyle.SetOptStat(0); ROOT.PyConfig.IgnoreCommandLineOptions = True; ROOT.gROOT.SetBatch(True); ; # Create functions; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; observablename = ""pTV""; ; # Setup observable that is to be morphed; obsvar = ROOT.RooRealVar(observablename, ""p_{T}^{V}"", 10, 600); ; # Setup two couplings that enters the morphing function; # kSM -> SM coupling set to constant (1); # cHq3 -> EFT parameter with NewPhysics attribute set to true; kSM = ROOT.RooRealVar(""kSM"", ""sm modifier"", 1.0); cHq3 = ROOT.RooRealVar(""cHq3"", ""EFT modifier"", 0.0, 1.0); cHq3.setAttribute(""NewPhysics"", True); ; # Inputs to setup config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; infilename = ROOT.gROOT.GetTutorialDir().Data() + ""/roofit/input_histos_rf_lagrangianmorph.root""; par = ""cHq3""; samplelist = [""SM_NPsq0"", ""cHq3_NPsq1"", ""cHq3_NPsq2""]; ; # Set Config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; config = ROOT.RooLagrangianMorphFunc.Config(); config.fileName = infilename; config.observableName = observablename; config.folderNames = samplelist; config.couplings.add(cHq3); config.couplings.add(kSM); ; ; # Create morphing function; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; morphfunc = ROOT.RooLagrangianMorphFunc(""morphfunc"", ""morphed dist. of pTV"", config); ; # Get morphed distribution at c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html:96,Guid,Guide,96,doc/master/rf711__lagrangianmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf712_lagrangianmorphfit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf712_lagrangianmorphfit.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Performing a simple fit with RooLagrangianMorphFunc. ; a morphing function is setup as a function of three variables and a fit is performed on a pseudo-dataset. ; #include <RooDataHist.h>; #include <RooFitResult.h>; #include <RooLagrangianMorphFunc.h>; #include <RooPlot.h>; #include <RooRealVar.h>; ; #include <TAxis.h>; #include <TCanvas.h>; #include <TH2.h>; #include <TStyle.h>; ; using namespace RooFit;; ; void rf712_lagrangianmorphfit(); {; // C r e a t e v a r i a b l e s f o r; // m o r p h i n g f u n c t i o n; // ---------------------------------------------; ; std::string observablename = ""pTV"";; RooRealVar obsvar(observablename.c_str(), ""observable of pTV"", 10, 600);; RooRealVar kSM(""kSM"", ""sm modifier"", 1.0);; RooRealVar cHq3(""cHq3"", ""EFT modifier"", -10.0, 10.0);; cHq3.setAttribute(""NewPhysics"", true);; RooRealVar cHl3(""cHl3"", ""EFT modifier"", -10.0, 10.0);; cHl3.setAttribute(""NewPhysics"", true);; RooRealVar cHDD(""cHDD"", ""EFT modifier"", -10.0, 10.0);; cHDD.setAttribute(""NewPhysics"", true);; ; // I n p u t s n e e d e d f o r c o n f i g; // ---------------------------------------------; std::string infilename = std::string(gROOT->GetTutorialDir()) + ""/roofit/input_histos_rf_lagrangianmorph.root"";; std::vector<std::string> samplelist = {""SM_NPsq0"", ""cHq3_NPsq1"", ""cHq3_NPsq2"", ""cHl3_NPsq1"",; ""cHl3_NPsq2"", ""cHDD_NPsq1"", ""cHDD_NPsq2"", ""cHl3_cHDD_NPsq2"",; ""cHq3_cHDD_NPsq2"", ""cHl3_cHq3_NPsq2""};; ; // S e t u p C o n f i g; // ---------------------------------------------; RooLagrangianMorphFunc::Config config;; config.fileName = infilename;; config.observableName = observablename;; config.folderNames = samplelist;; config.couplings.add(cHq3);; config.couplings.add(cHl3);; config.couplings.add(cHDD);; config.couplings.add(kSM)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:98,Guid,Guide,98,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/roofit/rf712_lagrangianmorphfit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf712_lagrangianmorphfit.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Performing a simple fit with RooLagrangianMorphFunc . ; import ROOT; ; ROOT.gStyle.SetOptStat(0); ROOT.PyConfig.IgnoreCommandLineOptions = True; ROOT.gROOT.SetBatch(True); ; # Create functions; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; observablename = ""pTV""; obsvar = ROOT.RooRealVar(observablename, ""observable of pTV"", 10, 600); ; # Setup three EFT coefficient and constant SM modifier; kSM = ROOT.RooRealVar(""kSM"", ""sm modifier"", 1.0); cHq3 = ROOT.RooRealVar(""cHq3"", ""EFT modifier"", -10.0, 10.0); cHq3.setAttribute(""NewPhysics"", True); cHl3 = ROOT.RooRealVar(""cHl3"", ""EFT modifier"", -10.0, 10.0); cHl3.setAttribute(""NewPhysics"", True); cHDD = ROOT.RooRealVar(""cHDD"", ""EFT modifier"", -10.0, 10.0); cHDD.setAttribute(""NewPhysics"", True); ; # Inputs to setup config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; infilename = ROOT.gROOT.GetTutorialDir().Data() + ""/roofit/input_histos_rf_lagrangianmorph.root""; par = ""cHq3""; samplelist = [; ""SM_NPsq0"",; ""cHq3_NPsq1"",; ""cHq3_NPsq2"",; ""cHl3_NPsq1"",; ""cHl3_NPsq2"",; ""cHDD_NPsq1"",; ""cHDD_NPsq2"",; ""cHl3_cHDD_NPsq2"",; ""cHq3_cHDD_NPsq2"",; ""cHl3_cHq3_NPsq2"",; ]; ; # Set Config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; config = ROOT.RooLagrangianMorphFunc.Config(); config.fileName = infilename; config.observableName = observablename; config.folderNames = samplelist; config.couplings.add(cHq3); config.couplings.add(cHDD); config.couplings.add(cHl3); config.couplings.add(kSM); ; ; # Create morphing function; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; morphfunc = ROOT.RooLagrangianM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html:99,Guid,Guide,99,doc/master/rf712__lagrangianmorphfit_8py.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/roofit/rf801_mcstudy.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf801_mcstudy.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooChebychev.h""; #include ""RooAddPdf.h""; #include ""RooMCStudy.h""; #include ""RooPlot.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH2.h""; #include ""RooFitResult.h""; #include ""TStyle.h""; #include ""TDirectory.h""; ; using namespace RooFit;; ; void rf801_mcstudy(); {; // C r e a t e m o d e l; // -----------------------; ; // Declare observable x; RooRealVar x(""x"", ""x"", 0, 10);; x.setBins(40);; ; // Create two Gaussian PDFs g1(x,mean1,sigma) anf g2(x,mean2,sigma) and their parameters; RooRealVar mean(""mean"", ""mean of gaussians"", 5, 0, 10);; RooRealVar sigma1(""sigma1"", ""width of gaussians"", 0.5);; RooRealVar sigma2(""sigma2"", ""width of gaussians"", 1);; ; RooGaussian sig1(""sig1"", ""Signal component 1"", x, mean, sigma1);; RooGaussian sig2(""sig2"", ""Signal component 2"", x, mean, sigma2);; ; // Build Chebychev polynomial pdf; RooRealVar a0(""a0"", ""a0"", 0.5, 0., 1.);; RooRealVar a1(""a1"", ""a1"", -0.2, -1, 1.);; RooChebychev bkg(""bkg"", ""Background"", x, RooArgSet(a0, a1));; ; // Sum the signal components into a composite signal pdf; RooRealVar sig1frac(""sig1frac"", ""fraction of component 1 in signal"", 0.8, 0., 1.);; RooAddPdf sig(""sig"", ""Signal"", RooArgList(sig1, sig2), sig1frac);; ; // Sum the composite signal and background; RooRealVar nbkg(""nbkg"", ""number of background events,"", 150, 0, 1000);; RooRealVar nsig(""nsig"", ""number of signal events"", 150, 0, 1000);; RooAddPdf model(""model"", ""g1+g2+a"", RooArgList(bkg, sig), RooArgList(nbkg, nsig));; ; // C r e a t e m a n a g e r; // ---------------------------; ; // Instantiate RooMCStudy manager on model with x as observable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:87,Guid,Guide,87,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf801_mcstudy.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf801_mcstudy.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting . ; import ROOT; ; ; # Create model; # -----------------------; ; # Declare observable x; x = ROOT.RooRealVar(""x"", ""x"", 0, 10); x.setBins(40); ; # Create two Gaussian PDFs g1(x,mean1,sigma) anf g2(x,mean2,sigma) and; # their parameters; mean = ROOT.RooRealVar(""mean"", ""mean of gaussians"", 5, 0, 10); sigma1 = ROOT.RooRealVar(""sigma1"", ""width of gaussians"", 0.5); sigma2 = ROOT.RooRealVar(""sigma2"", ""width of gaussians"", 1); ; sig1 = ROOT.RooGaussian(""sig1"", ""Signal component 1"", x, mean, sigma1); sig2 = ROOT.RooGaussian(""sig2"", ""Signal component 2"", x, mean, sigma2); ; # Build Chebychev polynomial pdf; a0 = ROOT.RooRealVar(""a0"", ""a0"", 0.5, 0.0, 1.0); a1 = ROOT.RooRealVar(""a1"", ""a1"", -0.2, -1, 1.0); bkg = ROOT.RooChebychev(""bkg"", ""Background"", x, [a0, a1]); ; # Sum the signal components into a composite signal pdf; sig1frac = ROOT.RooRealVar(""sig1frac"", ""fraction of component 1 in signal"", 0.8, 0.0, 1.0); sig = ROOT.RooAddPdf(""sig"", ""Signal"", [sig1, sig2], [sig1frac]); ; # Sum the composite signal and background; nbkg = ROOT.RooRealVar(""nbkg"", ""number of background events, "", 150, 0, 1000); nsig = ROOT.RooRealVar(""nsig"", ""number of signal events"", 150, 0, 1000); model = ROOT.RooAddPdf(""model"", ""g1+g2+a"", [bkg, sig], [nbkg, nsig]); ; # Create manager; # ---------------------------; ; # Instantiate ROOT.RooMCStudy manager on model with x as observable and given choice of fit options; #; # The Silence() option kills all messages below the PROGRESS level, only a single message; # per sample executed, any error message that occur during fitting; #; # The Extended() option has two effects:; # 1) The extended ML term is included in the likelihood an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8py.html:88,Guid,Guide,88,doc/master/rf801__mcstudy_8py.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf802_mcstudy_addons.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf802_mcstudy_addons.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooChebychev.h""; #include ""RooAddPdf.h""; #include ""RooMCStudy.h""; #include ""RooChi2MCSModule.h""; #include ""RooPlot.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; #include ""TDirectory.h""; #include ""TLegend.h""; ; using namespace RooFit;; ; void rf802_mcstudy_addons(); {; ; // C r e a t e m o d e l; // -----------------------; ; // Observables, parameters; RooRealVar x(""x"", ""x"", -10, 10);; x.setBins(10);; RooRealVar mean(""mean"", ""mean of gaussian"", 0, -2., 1.8);; RooRealVar sigma(""sigma"", ""width of gaussian"", 5, 1, 10);; ; // Create Gaussian pdf; RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);; ; // C r e a t e m a n a g e r w i t h c h i ^ 2 a d d - o n m o d u l e; // ----------------------------------------------------------------------------; ; // Create study manager for binned likelihood fits of a Gaussian pdf in 10 bins; RooMCStudy *mcs = new RooMCStudy(gauss, x, Silence(), Binned());; ; // Add chi^2 calculator module to mcs; RooChi2MCSModule chi2mod;; mcs->addModule(chi2mod);; ; // Generate 1000 samples of 1000 events; mcs->generateAndFit(2000, 1000);; ; // Number of bins for chi2 plots; int nBins = 100;; ; // Fill histograms with distributions chi2 and prob(chi2,ndf) that; // are calculated by RooChiMCSModule; TH1 *hist_chi2 = mcs->fitParDataSet().createHistogram(""chi2"", AutoBinning(nBins));; hist_chi2->SetTitle(""#chi^{2} values of all toy runs;#chi^{2}"");; TH1 *hist_prob = mcs->fitParDataSet().createHistogram(""prob"", AutoBinning(nBins));; hist_prob->Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf802__mcstudy__addons_8C.html:94,Guid,Guide,94,doc/master/rf802__mcstudy__addons_8C.html,https://root.cern,https://root.cern/doc/master/rf802__mcstudy__addons_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf803_mcstudy_addons2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf803_mcstudy_addons2.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooChebychev.h""; #include ""RooAddPdf.h""; #include ""RooMCStudy.h""; #include ""RooRandomizeParamMCSModule.h""; #include ""RooDLLSignificanceMCSModule.h""; #include ""RooPlot.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; #include ""TDirectory.h""; ; using namespace RooFit;; ; void rf803_mcstudy_addons2(); {; // C r e a t e m o d e l; // -----------------------; ; // Simulation of signal and background of top quark decaying into; // 3 jets with background; ; // Observable; RooRealVar mjjj(""mjjj"", ""m(3jet) (GeV)"", 100, 85., 350.);; ; // Signal component (Gaussian); RooRealVar mtop(""mtop"", ""m(top)"", 162);; RooRealVar wtop(""wtop"", ""m(top) resolution"", 15.2);; RooGaussian sig(""sig"", ""top signal"", mjjj, mtop, wtop);; ; // Background component (Chebychev); RooRealVar c0(""c0"", ""Chebychev coefficient 0"", -0.846, -1., 1.);; RooRealVar c1(""c1"", ""Chebychev coefficient 1"", 0.112, -1., 1.);; RooRealVar c2(""c2"", ""Chebychev coefficient 2"", 0.076, -1., 1.);; RooChebychev bkg(""bkg"", ""combinatorial background"", mjjj, RooArgList(c0, c1, c2));; ; // Composite model; RooRealVar nsig(""nsig"", ""number of signal events"", 53, 0, 1e3);; RooRealVar nbkg(""nbkg"", ""number of background events"", 103, 0, 5e3);; RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), RooArgList(nsig, nbkg));; ; // C r e a t e m a n a g e r; // ---------------------------; ; // Configure manager to perform binned extended likelihood fits (Binned(),Extended()) on data generated; // with a Poisson fluctuation on Nobs (Extended()); RooMCStudy *mcs = new RooMCStudy(model, mjjj, Binned(), Silence(), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html:95,Guid,Guide,95,doc/master/rf803__mcstudy__addons2_8C.html,https://root.cern,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf804_mcstudy_constr.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf804_mcstudy_constr.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Validation and MC studies: using RooMCStudy on models with constrains . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooAddPdf.h""; #include ""RooProdPdf.h""; #include ""RooMCStudy.h""; #include ""RooPlot.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; using namespace RooFit;; ; void rf804_mcstudy_constr(); {; // C r e a t e m o d e l w i t h p a r a m e t e r c o n s t r a i n t; // ---------------------------------------------------------------------------; ; // Observable; RooRealVar x(""x"", ""x"", -10, 10);; ; // Signal component; RooRealVar m(""m"", ""m"", 0, -10, 10);; RooRealVar s(""s"", ""s"", 2, 0.1, 10);; RooGaussian g(""g"", ""g"", x, m, s);; ; // Background component; RooPolynomial p(""p"", ""p"", x);; ; // Composite model; RooRealVar f(""f"", ""f"", 0.4, 0., 1.);; RooAddPdf sum(""sum"", ""sum"", RooArgSet(g, p), f);; ; // Construct constraint on parameter f; RooGaussian fconstraint(""fconstraint"", ""fconstraint"", f, 0.7, 0.1);; ; // Multiply constraint with pdf; RooProdPdf sumc(""sumc"", ""sum with constraint"", RooArgSet(sum, fconstraint));; ; // S e t u p t o y s t u d y w i t h m o d e l; // ---------------------------------------------------; ; // Perform toy study with internal constraint on f; RooMCStudy mcs(sumc, x, Constrain(f), Silence(), Binned(), FitOptions(PrintLevel(-1)));; ; // Run 500 toys of 2000 events.; // Before each toy is generated, a value for the f is sampled from the constraint pdf and; // that value is used for the generation of that toy.; mcs.generateAndFit(500, 2000);; ; // Make plot of distribution of generated value of f parameter; TH1 *h_f_gen = mcs.fitParDataSet().createHistogram(""f_gen"", AutoBinning(40));; ; // Make plot of distribution of fitted",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf804__mcstudy__constr_8C.html:94,Guid,Guide,94,doc/master/rf804__mcstudy__constr_8C.html,https://root.cern,https://root.cern/doc/master/rf804__mcstudy__constr_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf901_numintconfig.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf901_numintconfig.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooNumIntConfig.h""; #include ""RooLandau.h""; #include ""RooArgSet.h""; #include <iomanip>; using namespace RooFit;; ; void rf901_numintconfig(); {; ; // A d j u s t g l o b a l 1 D i n t e g r a t i o n p r e c i s i o n; // ----------------------------------------------------------------------------; ; // Print current global default configuration for numeric integration strategies; RooAbsReal::defaultIntegratorConfig()->Print(""v"");; ; // Example: Change global precision for 1D integrals from 1e-7 to 1e-6; //; // The relative epsilon (change as fraction of current best integral estimate) and; // absolute epsilon (absolute change w.r.t last best integral estimate) can be specified; // separately. For most pdf integrals the relative change criterium is the most important,; // however for certain non-pdf functions that integrate out to zero a separate absolute; // change criterium is necessary to declare convergence of the integral; //; // NB: This change is for illustration only. In general the precision should be at least 1e-7; // for normalization integrals for MINUIT to succeed.; //; RooAbsReal::defaultIntegratorConfig()->setEpsAbs(1e-6);; RooAbsReal::defaultIntegratorConfig()->setEpsRel(1e-6);; ; // N u m e r i c i n t e g r a t i o n o f l a n d a u p d f; // ------------------------------------------------------------------; ; RooRealVar x(""x"", ""x"", -10, 10);; RooLandau landau(""landau"", ""landau"", x, 0.0, 0.1);; ; // Disable analytic integration from demonstration purposes; landau.forc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8C.html:92,Guid,Guide,92,doc/master/rf901__numintconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf901_numintconfig.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf901_numintconfig.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ; ; from __future__ import print_function; import ROOT; ; ; # Adjust global 1D integration precision; # ----------------------------------------------------------------------------; ; # Print current global default configuration for numeric integration; # strategies; ROOT.RooAbsReal.defaultIntegratorConfig().Print(""v""); ; # Example: Change global precision for 1D integrals from 1e-7 to 1e-6; #; # The relative epsilon (change as fraction of current best integral estimate) and; # absolute epsilon (absolute change w.r.t last best integral estimate) can be specified; # separately. For most pdf integrals the relative change criterium is the most important,; # however for certain non-pdf functions that integrate out to zero a separate absolute; # change criterium is necessary to declare convergence of the integral; #; # NB: ROOT.This change is for illustration only. In general the precision should be at least 1e-7; # for normalization integrals for MINUIT to succeed.; #; ROOT.RooAbsReal.defaultIntegratorConfig().setEpsAbs(1e-6); ROOT.RooAbsReal.defaultIntegratorConfig().setEpsRel(1e-6); ; # N u m e r i c i n t e g r a t i o n o f l a n d a u p d f; # ------------------------------------------------------------------; ; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); landau = ROOT.RooLandau(""landau"", ""landau"", x, 0.0, 0.1); ; # Disable analytic integration from demonstration purposes; landau.forceNumInt(True); ; # Activate debug-level messages for topic integration to be able to follow; # actions below; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Integration); ; # Calculate integral over landau with defau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8py.html:93,Guid,Guide,93,doc/master/rf901__numintconfig_8py.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf902_numgenconfig.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf902_numgenconfig.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooChebychev.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooNumGenConfig.h""; #include ""RooArgSet.h""; #include <iomanip>; using namespace RooFit;; ; void rf902_numgenconfig(); {; ; // A d j u s t g l o b a l MC s a m p l i n g s t r a t e g y; // ------------------------------------------------------------------; ; // Example pdf for use below; RooRealVar x(""x"", ""x"", 0, 10);; RooChebychev model(""model"", ""model"", x, RooArgList(0, 0.5, -0.1));; ; // Change global strategy for 1D sampling problems without conditional observable; // (1st false) and without discrete observable (2nd false) from RooFoamGenerator,; // ( an interface to the TFoam MC generator with adaptive subdivisioning strategy ) to RooAcceptReject,; // a plain accept/reject sampling algorithm [ RooFit default before ROOT 5.23/04 ]; RooAbsPdf::defaultGeneratorConfig()->method1D(false, false).setLabel(""RooAcceptReject"");; ; // Generate 10Kevt using RooAcceptReject; std::unique_ptr<RooDataSet> data_ar{model.generate(x, 10000, Verbose(true))};; data_ar->Print();; ; // A d j u s t i n g d e f a u l t c o n f i g f o r a s p e c i f i c p d f; // -------------------------------------------------------------------------------------; ; // Another possibility: associate custom MC sampling configuration as default for object 'model'; // The true argument will install a clone of the default configuration as specialized configuration; // for this model if none existed so far; model.specialGeneratorConfig(true)->method1D(false, false).setLabel(""RooFoamGenerator"");; ; // A d j u s t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf902__numgenconfig_8C.html:92,Guid,Guide,92,doc/master/rf902__numgenconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf902__numgenconfig_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf902_numgenconfig.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf902_numgenconfig.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ; ; import ROOT; ; ; # Adjust global MC sampling strategy; # ------------------------------------------------------------------; ; # Example pdf for use below; x = ROOT.RooRealVar(""x"", ""x"", 0, 10); model = ROOT.RooChebychev(""model"", ""model"", x, [0.0, 0.5, -0.1]); ; # Change global strategy for 1D sampling problems without conditional observable; # (1st kFALSE) and without discrete observable (2nd kFALSE) from ROOT.RooFoamGenerator,; # ( an interface to the ROOT.TFoam MC generator with adaptive subdivisioning strategy ) to ROOT.RooAcceptReject,; # a plain accept/reject sampling algorithm [ ROOT.RooFit default before; # ROOT 5.23/04 ]; ROOT.RooAbsPdf.defaultGeneratorConfig().method1D(False, False).setLabel(""RooAcceptReject""); ; # Generate 10Kevt using ROOT.RooAcceptReject; data_ar = model.generate({x}, 10000, Verbose=True); data_ar.Print(); ; # Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; ; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far; model.specialGeneratorConfig(True).method1D(False, False).setLabel(""RooFoamGenerator""); ; # Adjusting parameters of a specific technique; # ---------------------------------------------------------------------------------------; ; # Adjust maximum number of steps of ROOT.RooIntegrator1D in the global; # default configuration; ROOT.RooAbsPdf.defaultGeneratorConfig().getConfigSection(""RooAcceptReject"").setR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf902__numgenconfig_8py.html:93,Guid,Guide,93,doc/master/rf902__numgenconfig_8py.html,https://root.cern,https://root.cern/doc/master/rf902__numgenconfig_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf903_numintcache.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf903_numintcache.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooDataHist.h""; #include ""RooGaussian.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooWorkspace.h""; #include ""RooExpensiveObjectCache.h""; #include ""TFile.h""; #include ""TH1.h""; ; using namespace RooFit;; ; RooWorkspace *getWorkspace(Int_t mode);; ; void rf903_numintcache(Int_t mode = 0); {; // Mode = 0 : Run plain fit (slow); // Mode = 1 : Generate workspace with pre-calculated integral and store it on file (prepare for accelerated running); // Mode = 2 : Run fit from previously stored workspace including cached integrals (fast, requires run in mode=1; // first); ; // C r e a t e , s a v e o r l o a d w o r k s p a c e w i t h p . d . f .; // -----------------------------------------------------------------------------------; ; // Make/load workspace, exit here in mode 1; RooWorkspace *w1 = getWorkspace(mode);; if (mode == 1) {; ; // Show workspace that was created; w1->Print();; ; // Show plot of cached integral values; RooDataHist *hhcache = (RooDataHist *)w1->expensiveObjectCache().getObj(1);; if (hhcache) {; ; new TCanvas(""rf903_numintcache"", ""rf903_numintcache"", 600, 600);; hhcache->createHistogram(""a"")->Draw();; ; } else {; Error(""rf903_numintcache"", ""Cached histogram is not existing in workspace"");; }; return;; }; ; // U s e p . d . f . f r o m w o r k s p a c e f o r g e n e r a t i o n a n d f i t t i n g; // -----------------------------------------------------------------------------------; ; // This is always slow (need to find maximum function value empirically in 3D space); std::unique_ptr<RooDataSet> d{w1->pdf(""model"")->generate(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8C.html:91,Guid,Guide,91,doc/master/rf903__numintcache_8C.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/roofit/rf903_numintcache.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf903_numintcache.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals . ; import sys; import ROOT; ; ; def getWorkspace(mode):; # Create, save or load workspace with pdf; # -----------------------------------------------------------------------------------; #; # Mode = 0 : Create workspace for plain running (no integral caching); # Mode = 1 : Generate workspace with precalculated integral and store it on file; # Mode = 2 : Load previously stored workspace from file; ; w = ROOT.RooWorkspace(); ; if mode != 2:; # Create empty workspace workspace; w = ROOT.RooWorkspace(""w"", 1); ; # Make a difficult to normalize pdf in 3 dimensions that is; # integrated numerically.; w.factory(; ""EXPR::model('1/((x-a)*(x-a)+0.01)+1/((y-a)*(y-a)+0.01)+1/((z-a)*(z-a)+0.01)',x[-1,1],y[-1,1],z[-1,1],a[-5,5])""; ); ; if mode == 1:; # Instruct model to precalculate normalization integral that integrate at least; # two dimensions numerically. In self specific case the integral value for; # all values of parameter 'a' are stored in a histogram and available for use; # in subsequent fitting and plotting operations (interpolation is; # applied); ; # w.pdf(""model"").setNormValueCaching(3); model = w[""model""]; model.setStringAttribute(""CACHEPARMINT"", ""x:y:z""); ; # Evaluate pdf once to trigger filling of cache; normSet = {w[""x""], w[""y""], w[""z""]}; model.getVal(normSet); w.writeToFile(""rf903_numintcache.root""); ; if mode == 2:; # Load preexisting workspace from file in mode==2; f = ROOT.TFile(""rf903_numintcache.root""); w = f.Get(""w""); ; # Return created or loaded workspace; return w; ; ; mode = 0; # Mode = 0 : Run plain fit (slow); # Mode = 1 : Generate workspace with precalculated integral and store it on file (prepare for acce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8py.html:92,Guid,Guide,92,doc/master/rf903__numintcache_8py.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/rootlogoff.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rootlogoff.C File ReferenceTutorials. Detailed Description; Example of rootlogoff.C. ; The macro rootlogoff.C in the current working directory, is executed when root finishes.; ; {; printf(""\nTaking a break from ROOT? Hope to see you back!\n\n"");; }; AuthorRene Brun ; Definition in file rootlogoff.C. tutorialsrootlogoff.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootlogoff_8C.html:77,Guid,Guide,77,doc/master/rootlogoff_8C.html,https://root.cern,https://root.cern/doc/master/rootlogoff_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/rootlogon.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rootlogon.C File ReferenceTutorials. Detailed Description; Example of rootlogon.C. ; The macro rootlogon.C in the current working directory, is executed when root starts unless the option -n is used.; ; {; printf(""\nWelcome to the ROOT tutorials\n\n"");; printf(""\nType \"".x demos.C\"" to get a toolbar from which to execute the demos\n"");; printf(""\nType \"".x demoshelp.C\"" to see the help window\n\n"");; printf(""==> Many tutorials use the file hsimple.root produced by hsimple.C\n"");; printf(""==> It is recommended to execute hsimple.C before any other script\n\n"");; }; ; AuthorRene Brun ; Definition in file rootlogon.C. tutorialsrootlogon.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootlogon_8C.html:76,Guid,Guide,76,doc/master/rootlogon_8C.html,https://root.cern,https://root.cern/doc/master/rootlogon_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/rootlogon.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rootlogon.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup Tutorials; 3/// Example of `rootlogon.C`.; 4/// The macro `rootlogon.C` in the current working directory, is executed when; 5/// `root` starts unless the option `-n` is used.; 6///; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11{; 12 printf(""\nWelcome to the ROOT tutorials\n\n"");; 13 printf(""\nType \"".x demos.C\"" to get a toolbar from which to execute the demos\n"");; 14 printf(""\nType \"".x demoshelp.C\"" to see the help window\n\n"");; 15 printf(""==> Many tutorials use the file hsimple.root produced by hsimple.C\n"");; 16 printf(""==> It is recommended to execute hsimple.C before any other script\n\n"");; 17}; 18 . tutorialsrootlogon.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootlogon_8C_source.html:73,Guid,Guide,73,doc/master/rootlogon_8C_source.html,https://root.cern,https://root.cern/doc/master/rootlogon_8C_source.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/spectrum/peaks.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. peaks.C File ReferenceTutorials » Spectrum tutorials. Detailed Description; Illustrates how to find peaks in histograms. ; This script generates a random number of gaussian peaks on top of a linear background. The position of the peaks is found via TSpectrum and injected as initial values of parameters to make a global fit. The background is computed and drawn on top of the original histogram.; This script can fit ""peaks' heights"" or ""peaks' areas"" (comment out or uncomment the line which defines __PEAKS_C_FIT_AREAS__).; To execute this example, do (in ROOT 5 or ROOT 6):; root > .x peaks.C (generate 10 peaks by default); root > .x peaks.C++ (use the compiler); root > .x peaks.C++(30) (generates 30 peaks); xDouble_t x[n]Definition legend1.C:17; To execute only the first part of the script (without fitting) specify a negative value for the number of peaks, eg; root > .x peaks.C(-20); ; Found 9 candidate peaks to fit; Found 9 useful peaks to fit; Now fitting: Be patient; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 596.686; NDf = 471; Edm = 1.7299e-05; NCalls = 1747; p0 = 527.684 +/- 2.02282 ; p1 = -0.395029 +/- 0.00304651 ; p2 = 634.668 +/- 20.672 ; p3 = 519.331 +/- 0.111412 ; p4 = 3.49861 +/- 0.109353 ; p5 = 664.735 +/- 18.7022 ; p6 = 319.147 +/- 0.131874 ; p7 = 4.69145 +/- 0.126752 ; p8 = 670.916 +/- 17.6455 ; p9 = 754.806 +/- 0.108202 ; p10 = 4.29739 +/- 0.101204 ; p11 = 669.613 +/- 20.0806 ; p12 = 475.964 +/- 0.113649 ; p13 = 3.89314 +/- 0.110985 ; p14 = 648.09 +/- 18.199 ; p15 = 989.666 +/- 0.0884478 ; p16 = 3.34535 +/- 0.0786714 ; p17 = 662.552 +/- 17.8619 ; p18 = 539.268 +/- 0.122694 ; p19 = 4.56069 +/- 0.113882 ; p20 = 659.417 +/- 16.1804 ; p21 = 948.476 +/- 0.101982 ; p22 = 4.41156 +/- 0.091998 ; p23 = 753.529 +/- 15.2593 ; p24 = 232.585 +/- 0.151403 ; p25 = 6.95019 +/- 0.122555 ; p26 = 645.477 +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/peaks_8C.html:81,Guid,Guide,81,doc/master/peaks_8C.html,https://root.cern,https://root.cern/doc/master/peaks_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva Directory Reference. Directory dependency graph for tmva:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  envelope;  ;  keras;  ;  pytorch;  . Files;  createData.C;  Plot the variables. ;  ;  PyTorch_Generate_CNN_Model.py;  ;  RBatchGenerator_filters_vectors.py;  ;  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ;  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ;  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:74,Guid,Guide,74,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/RBatchGenerator_NumPy.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; RBatchGenerator_NumPy.py File ReferenceTutorials » TMVA tutorials. Detailed Description; Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ; ; import ROOT; ; tree_name = ""sig_tree""; file_name = ""http://root.cern/files/Higgs_data.root""; ; batch_size = 128; chunk_size = 5_000; ; ds_train, ds_validation = ROOT.TMVA.Experimental.CreateNumPyGenerators(; tree_name,; file_name,; batch_size,; chunk_size,; validation_split=0.3,; shuffle=True,; ); ; # Loop through training set; for i, b in enumerate(ds_train):; print(f""Training batch {i} => {b.shape}""); ; ; # Loop through Validation set; for i, b in enumerate(ds_validation):; print(f""Validation batch {i} => {b.shape}""); Training batch 0 => (128, 29); Training batch 1 => (128, 29); Training batch 2 => (128, 29); Training batch 3 => (128, 29); Training batch 4 => (128, 29); Training batch 5 => (128, 29); Training batch 6 => (128, 29); Training batch 7 => (128, 29); Training batch 8 => (128, 29); Training batch 9 => (128, 29); Training batch 10 => (128, 29); Training batch 11 => (128, 29); Training batch 12 => (128, 29); Training batch 13 => (128, 29); Training batch 14 => (128, 29); Training batch 15 => (128, 29); Training batch 16 => (128, 29); Training batch 17 => (128, 29); Training batch 18 => (128, 29); Training batch 19 => (128, 29); Training batch 20 => (128, 29); Training batch 21 => (128, 29); Training batch 22 => (128, 29); Training batch 23 => (128, 29); Training batch 24 => (128, 29); Training batch 25 => (128, 29); Training batch 26 => (128, 29); Training batch 27 => (128, 29); Training batch 28 => (128, 29); Training batch 29 => (128, 29); Training batch 30 => (128, 29); Training batch 31 => (128, 29); Training batch 32 => (128, 29); Training batch 33 => (128, 29); Training batch 34 => (128, 29); Training batch 35 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBatchGenerator__NumPy_8py.html:94,Guid,Guide,94,doc/master/RBatchGenerator__NumPy_8py.html,https://root.cern,https://root.cern/doc/master/RBatchGenerator__NumPy_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/RBatchGenerator_PyTorch.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; RBatchGenerator_PyTorch.py File ReferenceTutorials » TMVA tutorials. Detailed Description; Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ; ; import torch; import ROOT; ; tree_name = ""sig_tree""; file_name = ""http://root.cern/files/Higgs_data.root""; ; batch_size = 128; chunk_size = 5_000; ; target = ""Type""; ; # Returns two generators that return training and validation batches; # as PyTorch tensors.; gen_train, gen_validation = ROOT.TMVA.Experimental.CreatePyTorchGenerators(; tree_name,; file_name,; batch_size,; chunk_size,; target=target,; validation_split=0.3,; ); ; # Get a list of the columns used for training; input_columns = gen_train.train_columns; num_features = len(input_columns); ; ; def calc_accuracy(targets, pred):; return torch.sum(targets == pred.round()) / pred.size(0); ; ; # Initialize PyTorch model; model = torch.nn.Sequential(; torch.nn.Linear(num_features, 300),; torch.nn.Tanh(),; torch.nn.Linear(300, 300),; torch.nn.Tanh(),; torch.nn.Linear(300, 300),; torch.nn.Tanh(),; torch.nn.Linear(300, 1),; torch.nn.Sigmoid(),; ); loss_fn = torch.nn.MSELoss(reduction=""mean""); optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9); ; ; # Loop through the training set and train model; for i, (x_train, y_train) in enumerate(gen_train):; # Make prediction and calculate loss; pred = model(x_train).view(-1); loss = loss_fn(pred, y_train); ; # improve model; model.zero_grad(); loss.backward(); optimizer.step(); ; # Calculate accuracy; accuracy = calc_accuracy(y_train, pred); ; print(f""Training => accuracy: {accuracy}""); ; #################################################################; # Validation; #################################################################; ; # Evaluate the model on the validation set; for i, (x_train, y_train) in enumerate(gen_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBatchGenerator__PyTorch_8py.html:96,Guid,Guide,96,doc/master/RBatchGenerator__PyTorch_8py.html,https://root.cern,https://root.cern/doc/master/RBatchGenerator__PyTorch_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/RBatchGenerator_TensorFlow.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; RBatchGenerator_TensorFlow.py File ReferenceTutorials » TMVA tutorials. Detailed Description; Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ; ; import tensorflow as tf; import ROOT; ; tree_name = ""sig_tree""; file_name = ""http://root.cern/files/Higgs_data.root""; ; batch_size = 128; chunk_size = 5_000; ; target = ""Type""; ; # Returns two TF.Dataset for training and validation batches.; ds_train, ds_valid = ROOT.TMVA.Experimental.CreateTFDatasets(; tree_name,; file_name,; batch_size,; chunk_size,; validation_split=0.3,; target=target,; ); ; # Get a list of the columns used for training; input_columns = ds_train.train_columns; num_features = len(input_columns); ; ##############################################################################; # AI example; ##############################################################################; ; # Define TensorFlow model; model = tf.keras.Sequential(; [; tf.keras.layers.Dense(; 300, activation=tf.nn.tanh, input_shape=(num_features,); ), # input shape required; tf.keras.layers.Dense(300, activation=tf.nn.tanh),; tf.keras.layers.Dense(300, activation=tf.nn.tanh),; tf.keras.layers.Dense(1, activation=tf.nn.sigmoid),; ]; ); loss_fn = tf.keras.losses.BinaryCrossentropy(); model.compile(optimizer=""adam"", loss=loss_fn, metrics=[""accuracy""]); ; # Train model; model.fit(ds_train, validation_data=ds_valid, epochs=2); lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBatchGenerator__TensorFlow_8py.html:99,Guid,Guide,99,doc/master/RBatchGenerator__TensorFlow_8py.html,https://root.cern,https://root.cern/doc/master/RBatchGenerator__TensorFlow_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVAClassification.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassification.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers. ; As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables. The methods to be used can be switched on and off by means of booleans, or via the prompt command, for example: root -l ./TMVAClassification.C\‍(\""Fisher,Likelihood\""\‍); (note that the backslashes are mandatory) If no method given, a default set of classifiers is used. The output file ""TMVAC.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro. Launch the GUI via the command: root -l ./TMVAGui.C; You can also compile and run the example with the following commands make; ./TMVAClassification <Methods>; where: <Methods> = ""method1 method2"" are the TMVA classifier names example: ./TMVAClassification Fisher LikelihoodPCA BDT; If no method given, a default set is of classifiers is used. Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAClassification. ; ; ==> Start TMVAClassification; --- TMVAClassification : Using input file: ./files/tmva_class_example.root; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 6000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree TreeB of type Background with 6000 events; Factory : Booking method: ␛[1mCuts␛[0m; : ; : Use optimization method: ""Monte Carlo""; : Use efficiency computation method: ""Event Selection""; : Use ""FSmart"" cuts for variable: 'myvar1'; : Use ""FSmart"" cuts for variable: 'myvar2'; : Use ""FSmart"" cuts for variable: 'var3'; : Use ""FSmart"" cuts for variable: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:90,Guid,Guide,90,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: tutorials/tmva/TMVAClassification.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassification.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides examples for the training and testing of the; 5/// TMVA classifiers.; 6///; 7/// As input data is used a toy-MC sample consisting of four Gaussian-distributed; 8/// and linearly correlated input variables.; 9/// The methods to be used can be switched on and off by means of booleans, or; 10/// via the prompt command, for example:; 11///; 12/// root -l ./TMVAClassification.C\‍(\""Fisher,Likelihood\""\‍); 13///; 14/// (note that the backslashes are mandatory); 15/// If no method given, a default set of classifiers is used.; 16/// The output file ""TMVAC.root"" can be analysed with the use of dedicated; 17/// macros (simply say: root -l <macro.C>), which can be conveniently; 18/// invoked through a GUI that will appear at the end of the run of this macro.; 19/// Launch the GUI via the command:; 20///; 21/// root -l ./TMVAGui.C; 22///; 23/// You can also compile and run the example with the following commands; 24///; 25/// make; 26/// ./TMVAClassification <Methods>; 27///; 28/// where: `<Methods> = ""method1 method2""` are the TMVA classifier names; 29/// example:; 30///; 31/// ./TMVAClassification Fisher LikelihoodPCA BDT; 32///; 33/// If no method given, a default set is of classifiers is used; 34///; 35/// - Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; 36/// - Package : TMVA; 37/// - Root Macro: TMVAClassification; 38///; 39/// \macro_output; 40/// \macro_code; 41/// \author Andreas Hoecker; 42 ; 43 ; 44#include <cstdlib>; 45#include <iostream>; 46#include <map>; 47#include <string>; 48 ; 49#include ""TChain.h""; 50#include ""TFile.h""; 51#include ""TTree.h""; 52#include ""TString.h""; 53#include ""TObjString.h""; 54#include ""TSystem.h""; 55#include ""TROOT.h""; 56 ; 57#inclu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:87,Guid,Guide,87,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: tutorials/tmva/TMVAClassificationApplication.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassificationApplication.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example on how to use the trained classifiers within an analysis module . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVAClassificationApplication. ; ; ==> Start TMVAClassificationApplication; : Booking ""BDT method"" of type ""BDT"" from dataset/weights/TMVAClassification_BDT.weights.xml.; : Reading weight file: dataset/weights/TMVAClassification_BDT.weights.xml; <HEADER> DataSetInfo : [Default] : Added class ""Signal""; <HEADER> DataSetInfo : [Default] : Added class ""Background""; : Booked classifier ""BDT"" of type: ""BDT""; : Booking ""Cuts method"" of type ""Cuts"" from dataset/weights/TMVAClassification_Cuts.weights.xml.; : Reading weight file: dataset/weights/TMVAClassification_Cuts.weights.xml; : Read cuts optimised using sample of MC events; : Reading 100 signal efficiency bins for 4 variables; : Booked classifier ""Cuts"" of type: ""Cuts""; : Booking ""CutsD method"" of type ""Cuts"" from dataset/weights/TMVAClassification_CutsD.weights.xml.; : Reading weight file: dataset/weights/TMVAClassification_CutsD.weights.xml; : Read cuts optimised using sample of MC events; : Reading 100 signal efficiency bins for 4 variables; : Booked classifier ""CutsD"" of type: ""Cuts""; : Booking ""FDA_GA method"" of type ""FDA"" from dataset/weights/TMVAClassification_FDA_GA.weights.xml.; : Reading weight file: dataset/weights/TMVAClassification_FDA_GA.weights.xml; : User-defined formula string : ""(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3""; : TFormula-compatible formula string: ""[0]+[1]*[5]+[2]*[6]+[3]*[7]+[4]*[8]""; : Booked classifier ""FDA_GA"" of type: ""FDA""; : Booking ""KNN method"" of type ""KNN"" from dataset/weights/TMVAClassification_KNN.weights.xml.; : Reading weight file: dataset/w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationApplication_8C.html:101,Guid,Guide,101,doc/master/TMVAClassificationApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationApplication_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVAClassificationApplication.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassificationApplication.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides a simple example on how to use the trained classifiers; 5/// within an analysis module; 6/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 7/// - Package : TMVA; 8/// - Executable: TMVAClassificationApplication; 9///; 10/// \macro_output; 11/// \macro_code; 12/// \author Andreas Hoecker; 13 ; 14#include <cstdlib>; 15#include <vector>; 16#include <iostream>; 17#include <map>; 18#include <string>; 19 ; 20#include ""TFile.h""; 21#include ""TTree.h""; 22#include ""TString.h""; 23#include ""TSystem.h""; 24#include ""TROOT.h""; 25#include ""TStopwatch.h""; 26 ; 27#include ""TMVA/Tools.h""; 28#include ""TMVA/Reader.h""; 29#include ""TMVA/MethodCuts.h""; 30 ; 31using namespace TMVA;; 32 ; 33void TMVAClassificationApplication( TString myMethodList = """" ); 34{; 35 ; 36 //---------------------------------------------------------------; 37 // This loads the library; 38 TMVA::Tools::Instance();; 39 ; 40 // Default MVA methods to be trained + tested; 41 std::map<std::string,int> Use;; 42 ; 43 // Cut optimisation; 44 Use[""Cuts""] = 1;; 45 Use[""CutsD""] = 1;; 46 Use[""CutsPCA""] = 0;; 47 Use[""CutsGA""] = 0;; 48 Use[""CutsSA""] = 0;; 49 //; 50 // 1-dimensional likelihood (""naive Bayes estimator""); 51 Use[""Likelihood""] = 1;; 52 Use[""LikelihoodD""] = 0; // the ""D"" extension indicates decorrelated input variables (see option strings); 53 Use[""LikelihoodPCA""] = 1; // the ""PCA"" extension indicates PCA-transformed input variables (see option strings); 54 Use[""LikelihoodKDE""] = 0;; 55 Use[""LikelihoodMIX""] = 0;; 56 //; 57 // Mutidimensional likelihood and Nearest-Neighbour methods; 58 Use[""PDERS""] = 1;; 59 Use[""PDERSD""] = 0;; 60 Use[""PDERSPCA""] = 0;; 61 Use[""PDEFoam""] = 1;; 62 Use[""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html:98,Guid,Guide,98,doc/master/TMVAClassificationApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVAClassificationCategory.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassificationCategory.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAClassificationCategory. As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables with category (eta) dependent properties.; For this example, only Fisher and Likelihood are used. Run via: root -l TMVAClassificationCategory.C; The output file ""TMVACC.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro.; ; ; ==> Start TMVAClassificationCategory; --- TMVAClassificationCategory: Accessing /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tmva/data/toy_sigbkg_categ_offset.root; <HEADER> DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 10000 events; <HEADER> DataSetInfo : [dataset] : Added class ""Background""; : Add Tree TreeB of type Background with 10000 events; <HEADER> Factory : Booking method: Fisher; : ; <HEADER> Factory : Booking method: Likelihood; : ; <HEADER> Factory : Booking method: FisherCat; : ; : Adding sub-classifier: Fisher::Category_Fisher_1; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Background""; : Adding sub-classifier: Fisher::Category_Fisher_2; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Background""; <HEADER> Factory : Booking method: LikelihoodCat; : ; : Adding su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:98,Guid,Guide,98,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: tutorials/tmva/TMVAClassificationCategoryApplication.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassificationCategoryApplication.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVAClassificationCategoryApplication. ; ; ==> Start TMVAClassificationCategoryApplication; : Booking ""FisherCat method"" of type ""Category"" from dataset/weights/TMVAClassificationCategory_FisherCat.weights.xml.; : Reading weight file: dataset/weights/TMVAClassificationCategory_FisherCat.weights.xml; <HEADER> DataSetInfo : [Default] : Added class ""Signal""; <HEADER> DataSetInfo : [Default] : Added class ""Background""; : Recreating sub-classifiers from XML-file ; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Background""; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Background""; : Booked classifier ""FisherCat"" of type: ""Category""; : Booking ""LikelihoodCat method"" of type ""Category"" from dataset/weights/TMVAClassificationCategory_LikelihoodCat.weights.xml.; : Reading weight file: dataset/weights/TMVAClassificationCategory_LikelihoodCat.weights.xml; : Recreating sub-classifiers from XML-file ; <HEADER> DataSetInfo : [Category_Likelihood_1_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Likelihood_1_dsi] : Added class ""Background""; <HEADER> DataSetInfo : [Category_Likelihood_2_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Likelihood_2_dsi] : Added class ""Background""; : Booked classifier ""LikelihoodCat"" of type: ""Category""; --- TMVAClassificationApp : Accessing /home/sftnight/build/workspace/root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html:109,Guid,Guide,109,doc/master/TMVAClassificationCategoryApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVACrossValidation.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVACrossValidation.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides an example of how to use TMVA for k-folds cross evaluation. ; As input data is used a toy-MC sample consisting of two gaussian distributions.; The output file ""TMVACV.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro. Launch the GUI via the command:; root -l -e 'TMVA::TMVAGui(""TMVACV.root"")'; e#define e(i)Definition RSha256.hxx:103; lTLine lDefinition textangle.C:4. Cross Evaluation; Cross evaluation is a special case of k-folds cross validation where the splitting into k folds is computed deterministically. This ensures that the a given event will always end up in the same fold.; In addition all resulting classifiers are saved and can be applied to new data using MethodCrossValidation. One requirement for this to work is a splitting function that is evaluated for each event to determine into what fold it goes (for training/evaluation) or to what classifier (for application). Split Expression; Cross evaluation uses a deterministic split to partition the data into folds called the split expression. The expression can be any valid TFormula as long as all parts used are defined.; For each event the split expression is evaluated to a number and the event is put in the fold corresponding to that number.; It is recommended to always use int([NumFolds]) at the end of the expression.; The split expression has access to all spectators and variables defined in the dataloader. Additionally, the number of folds in the split can be accessed with NumFolds (or numFolds). Example; ""int(fabs([eventID]))%int([NumFolds])"". Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; Package :",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:91,Guid,Guide,91,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: tutorials/tmva/TMVACrossValidationApplication.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVACrossValidationApplication.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ; This requires that CrossValidation was run with a deterministic split, such as ""...:splitExpr=int([eventID])%int([numFolds]):..."". Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVACrossValidationApplication. ; : Booking ""BDTG"" of type ""CrossValidation"" from datasetcv/weights/TMVACrossValidation_BDTG.weights.xml.; : Reading weight file: datasetcv/weights/TMVACrossValidation_BDTG.weights.xml; <HEADER> DataSetInfo : [Default] : Added class ""Signal""; <HEADER> DataSetInfo : [Default] : Added class ""Background""; : Reading weightfile: datasetcv/weights/TMVACrossValidation_BDTG_fold1.weights.xml; : Reading weight file: datasetcv/weights/TMVACrossValidation_BDTG_fold1.weights.xml; : Reading weightfile: datasetcv/weights/TMVACrossValidation_BDTG_fold2.weights.xml; : Reading weight file: datasetcv/weights/TMVACrossValidation_BDTG_fold2.weights.xml; : Booked classifier ""BDTG"" of type: ""CrossValidation""; : Booking ""Fisher"" of type ""CrossValidation"" from datasetcv/weights/TMVACrossValidation_Fisher.weights.xml.; : Reading weight file: datasetcv/weights/TMVACrossValidation_Fisher.weights.xml; : Reading weightfile: datasetcv/weights/TMVACrossValidation_Fisher_fold1.weights.xml; : Reading weight file: datasetcv/weights/TMVACrossValidation_Fisher_fold1.weights.xml; : Reading weightfile: datasetcv/weights/TMVACrossValidation_Fisher_fold2.weights.xml; : Reading weight file: datasetcv/weights/TMVACrossValidation_Fisher_fold2.weights.xml; : Booked classifier ""Fisher"" of type: ""CrossValidation""; : Rebuilding Dataset Default; (int) 0; ; #include <cstdlib>; #include <iostream>; #include <map>; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationApplication_8C.html:102,Guid,Guide,102,doc/master/TMVACrossValidationApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationApplication_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVACrossValidationRegression.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVACrossValidationRegression.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides an example of how to use TMVA for k-folds cross evaluation. ; As input data is used a toy-MC sample consisting of two gaussian distributions.; The output file ""TMVARegCv.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro. Launch the GUI via the command:; root -l -e 'TMVA::TMVAGui(""TMVARegCv.root"")'; e#define e(i)Definition RSha256.hxx:103; lTLine lDefinition textangle.C:4. Cross Evaluation; Cross evaluation is a special case of k-folds cross validation where the splitting into k folds is computed deterministically. This ensures that the a given event will always end up in the same fold.; In addition all resulting classifiers are saved and can be applied to new data using MethodCrossValidation. One requirement for this to work is a splitting function that is evaluated for each event to determine into what fold it goes (for training/evaluation) or to what classifier (for application). Split Expression; Cross evaluation uses a deterministic split to partition the data into folds called the split expression. The expression can be any valid TFormula as long as all parts used are defined.; For each event the split expression is evaluated to a number and the event is put in the fold corresponding to that number.; It is recommended to always use int([NumFolds]) at the end of the expression.; The split expression has access to all spectators and variables defined in the dataloader. Additionally, the number of folds in the split can be accessed with NumFolds (or numFolds). Example; ""int(fabs([eventID]))%int([NumFolds])"". Project : TMVA - a ROOT-integrated toolkit for multivariat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html:101,Guid,Guide,101,doc/master/TMVACrossValidationRegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,. ROOT: tutorials/tmva/TMVAGAexample.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAGAexample.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This executable gives an example of a very simple use of the genetic algorithm of TMVA . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVAGAexample. ; Start Test TMVAGAexample; ========================; ; EXAMPLE; range: 0 15; range: 0 13; range: 0 5; : fitness: -160.873 f_0: 13.4483 f_1: 12.8918 f_2: 2.5 ; ---; : fitness: -166.504 f_0: 14.4828 f_1: 12.3598 f_2: 2.5 ; ---; : fitness: -178.422 f_0: 15 f_1: 12.8948 f_2: 5 ; ---; : fitness: -178.422 f_0: 15 f_1: 12.8948 f_2: 5 ; ---; : fitness: -180.587 f_0: 15 f_1: 12.8725 f_2: 2.5 ; ---; : fitness: -180.587 f_0: 15 f_1: 12.8725 f_2: 2.5 ; ---; : fitness: -181.686 f_0: 15 f_1: 12.779 f_2: 0 ; ---; : fitness: -181.686 f_0: 15 f_1: 12.779 f_2: 0 ; ---; : fitness: -183.087 f_0: 15 f_1: 12.8725 f_2: 0 ; ---; : fitness: -183.422 f_0: 15 f_1: 12.8948 f_2: 0 ; ---; : fitness: -183.422 f_0: 15 f_1: 12.8948 f_2: 0 ; ---; : fitness: -183.422 f_0: 15 f_1: 12.8948 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAGAexample_8C.html:85,Guid,Guide,85,doc/master/TMVAGAexample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAGAexample_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVAGAexample2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAGAexample2.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This executable gives an example of a very simple use of the genetic algorithm of TMVA. . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVAGAexample. ; Start Test TMVAGAexample; ========================; ; ; EXAMPLE; range: 0 15; range: 0 13; range: 0 5; FitterBase : <GeneticFitter> Optimisation, please be patient ... (inaccurate progress timing for GA); : Elapsed time: 0.0113 sec ; FACTOR 0 : 15; FACTOR 1 : 13; FACTOR 2 : 0; ; ; #include <iostream> // Stream declarations; #include <vector>; ; #include ""TMVA/GeneticAlgorithm.h""; #include ""TMVA/GeneticFitter.h""; #include ""TMVA/IFitterTarget.h""; ; using std::vector, std::cout, std::endl;; ; namespace TMVA {; ; ; class MyFitness : public IFitterTarget {; public:; MyFitness() : IFitterTarget() {; }; ; // the fitness-function goes here; // the factors are optimized such that the return-value of this function is minimized; // take care!! the fitness-function must never fail, .. means: you have to prevent; // the function from reaching undefined values (such as x=0 for 1/x or so); //; // HINT: to use INTEGER variables, it is sufficient to cast the ""factor"" in the fitness-function; // to (int). In this case the variable-range has to be chosen +1 ( to get 0..5, take Interval(0,6) ); // since the introduction of ""Interval"" ranges can be defined with a third parameter; // which gives the number of bins within the interval. With that technique discrete values; // can be achieved easier. The random selection out of this discrete numbers is completely uniform.; //; Double_t EstimatorFunction( std::vector<Double_t> & factors ){; //return (10.- (int)factors.at(0) *factors.at(1) + (int)factors.at(2));; return (10.- factors.at(0) *factors.at(1) + factors.at(2));; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAGAexample2_8C.html:86,Guid,Guide,86,doc/master/TMVAGAexample2_8C.html,https://root.cern,https://root.cern/doc/master/TMVAGAexample2_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVAMinimalClassification.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMinimalClassification.C File ReferenceTutorials » TMVA tutorials. Detailed Description; Minimal self-contained example for setting up TMVA with binary classification. ; This is intended as a simple foundation to build on. It assumes you are familiar with TMVA already. As such concepts like the Factory, the DataLoader and others are not explained. For descriptions and tutorials use the TMVA User's Guide (https://root.cern/root-user-guides-and-manuals under TMVA) or the more detailed examples provided with TMVA e.g. TMVAClassification.C.; Sets up a minimal binary classification example with two slightly overlapping 2-D gaussian distributions and trains a BDT classifier to discriminate the data. Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAMinimalClassification.C. ; <HEADER> DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree of type Signal with 1000 events; <HEADER> DataSetInfo : [dataset] : Added class ""Background""; : Add Tree of type Background with 1000 events; <HEADER> Factory : Booking method: BDT; : ; : Rebuilding Dataset dataset; : Building event vectors for type 2 Signal; : Dataset[dataset] : create input formulas for tree ; : Building event vectors for type 2 Background; : Dataset[dataset] : create input formulas for tree ; <HEADER> DataSetFactory : [dataset] : Number of events in input trees; : ; : ; : Dataset[dataset] : Weight renormalisation mode: ""EqualNumEvents"": renormalises all event classes ...; : Dataset[dataset] : such that the effective (weighted) number of events in each class is the same ; : Dataset[dataset] : (and equals the number of events (entries) given for class=0 ); : Dataset[dataset] : ... i.e. such that Sum[i=1..N_j]{w_i} = N_classA, j=classA, classB, ...; : Dataset[dataset] : ... (note that N_j is the sum of TRAINING eve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMinimalClassification_8C.html:97,Guid,Guide,97,doc/master/TMVAMinimalClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMinimalClassification_8C.html,4,"['Guid', 'guid', 'simpl']","['Guide', 'guides-and-manuals', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVAMulticlass.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMulticlass.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example for the training and testing of the TMVA multiclass classification . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAMulticlass. ; ; ==> Start TMVAMulticlass; --- TMVAMulticlass: Using input file: ./files/tmva_multiclass_example.root; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 2000 events; DataSetInfo : [dataset] : Added class ""bg0""; : Add Tree TreeB0 of type bg0 with 2000 events; DataSetInfo : [dataset] : Added class ""bg1""; : Add Tree TreeB1 of type bg1 with 2000 events; DataSetInfo : [dataset] : Added class ""bg2""; : Add Tree TreeB2 of type bg2 with 2000 events; : Dataset[dataset] : Class index : 0 name : Signal; : Dataset[dataset] : Class index : 1 name : bg0; : Dataset[dataset] : Class index : 2 name : bg1; : Dataset[dataset] : Class index : 3 name : bg2; Factory : Booking method: ␛[1mBDTG␛[0m; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset dataset; : Building event vectors for type 2 Signal; : Dataset[dataset] : create input formulas for tree TreeS; : Building event vectors for type 2 bg0; : Dataset[dataset] : create input formulas for tree TreeB0; : Building event vectors for type 2 bg1; : Dataset[dataset] : create input formulas for tree TreeB1; : Building event vectors for type 2 bg2; : Dataset[dataset] : create input formulas for tree TreeB2; DataSetFactory : [dataset] : Number of events in input trees; : ; : ; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 1000; : Signal -- testing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:86,Guid,Guide,86,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVAMulticlass.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMulticlass.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides a simple example for the training and testing of the TMVA; 5/// multiclass classification; 6/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 7/// - Package : TMVA; 8/// - Root Macro: TMVAMulticlass; 9///; 10/// \macro_output; 11/// \macro_code; 12/// \author Andreas Hoecker; 13 ; 14#include <cstdlib>; 15#include <iostream>; 16#include <map>; 17#include <string>; 18 ; 19#include ""TFile.h""; 20#include ""TTree.h""; 21#include ""TString.h""; 22#include ""TSystem.h""; 23#include ""TROOT.h""; 24 ; 25 ; 26#include ""TMVA/Tools.h""; 27#include ""TMVA/Factory.h""; 28#include ""TMVA/DataLoader.h""; 29#include ""TMVA/TMVAMultiClassGui.h""; 30 ; 31 ; 32using namespace TMVA;; 33 ; 34void TMVAMulticlass( TString myMethodList = """" ); 35{; 36 ; 37 // This loads the library; 38 TMVA::Tools::Instance();; 39 ; 40 // to get access to the GUI and all tmva macros; 41 //; 42 // TString tmva_dir(TString(gRootDir) + ""/tmva"");; 43 // if(gSystem->Getenv(""TMVASYS"")); 44 // tmva_dir = TString(gSystem->Getenv(""TMVASYS""));; 45 // gROOT->SetMacroPath(tmva_dir + ""/test/:"" + gROOT->GetMacroPath() );; 46 // gROOT->ProcessLine("".L TMVAMultiClassGui.C"");; 47 ; 48 ; 49 //---------------------------------------------------------------; 50 // Default MVA methods to be trained + tested; 51 std::map<std::string,int> Use;; 52 Use[""MLP""] = 1;; 53 Use[""BDTG""] = 1;; 54#ifdef R__HAS_TMVAGPU; 55 Use[""DL_CPU""] = 1;; 56 Use[""DL_GPU""] = 1;; 57#else; 58 Use[""DL_CPU""] = 1;; 59 Use[""DL_GPU""] = 0;; 60#endif; 61 Use[""FDA_GA""] = 0;; 62 Use[""PDEFoam""] = 1;; 63 ; 64 //---------------------------------------------------------------; 65 ; 66 std::cout << std::endl;; 67 std::cout << ""==> Start TMVAMulticlass"" << std::endl;; 68 ; 69 if (m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C_source.html:83,Guid,Guide,83,doc/master/TMVAMulticlass_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVAMulticlassApplication.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMulticlassApplication.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAMulticlassApplication. ; ; ==> Start TMVAMulticlassApp; : Booking ""BDTG method"" of type ""BDT"" from dataset/weights/TMVAMulticlass_BDTG.weights.xml.; : Reading weight file: dataset/weights/TMVAMulticlass_BDTG.weights.xml; <HEADER> DataSetInfo : [Default] : Added class ""Signal""; <HEADER> DataSetInfo : [Default] : Added class ""bg0""; <HEADER> DataSetInfo : [Default] : Added class ""bg1""; <HEADER> DataSetInfo : [Default] : Added class ""bg2""; : Booked classifier ""BDTG"" of type: ""BDT""; : Booking ""DL_CPU method"" of type ""DL"" from dataset/weights/TMVAMulticlass_DL_CPU.weights.xml.; : Reading weight file: dataset/weights/TMVAMulticlass_DL_CPU.weights.xml; : Booked classifier ""DL_CPU"" of type: ""DL""; TMVAMultiClassApplication: Skip DL_GPU method since it has not been trained !; TMVAMultiClassApplication: Skip FDA_GA method since it has not been trained !; : Booking ""MLP method"" of type ""MLP"" from dataset/weights/TMVAMulticlass_MLP.weights.xml.; : Reading weight file: dataset/weights/TMVAMulticlass_MLP.weights.xml; <HEADER> MLP : Building Network. ; : Initializing weights; : Booked classifier ""MLP"" of type: ""MLP""; : Booking ""PDEFoam method"" of type ""PDEFoam"" from dataset/weights/TMVAMulticlass_PDEFoam.weights.xml.; : Reading weight file: dataset/weights/TMVAMulticlass_PDEFoam.weights.xml; : Read foams from file: dataset/weights/TMVAMulticlass_PDEFoam.weights_foams.root; : Booked classifier ""PDEFoam"" of type: ""PDEFoam""; --- TMVAMulticlassApp : Using input file: ./files/tmva_multiclass_example.root; --- Select signal sample; : Reb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlassApplication_8C.html:97,Guid,Guide,97,doc/master/TMVAMulticlassApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlassApplication_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVAMulticlassApplication.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMulticlassApplication.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides a simple example on how to use the trained multiclass; 5/// classifiers within an analysis module; 6/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 7/// - Package : TMVA; 8/// - Root Macro: TMVAMulticlassApplication; 9///; 10/// \macro_output; 11/// \macro_code; 12/// \author Andreas Hoecker; 13 ; 14 ; 15#include <cstdlib>; 16#include <iostream>; 17#include <map>; 18#include <string>; 19#include <vector>; 20 ; 21#include ""TFile.h""; 22#include ""TTree.h""; 23#include ""TString.h""; 24#include ""TSystem.h""; 25#include ""TROOT.h""; 26#include ""TStopwatch.h""; 27#include ""TH1F.h""; 28 ; 29#include ""TMVA/Tools.h""; 30#include ""TMVA/Reader.h""; 31 ; 32using namespace TMVA;; 33 ; 34void TMVAMulticlassApplication( TString myMethodList = """" ); 35{; 36 ; 37 TMVA::Tools::Instance();; 38 ; 39 //---------------------------------------------------------------; 40 // Default MVA methods to be trained + tested; 41 std::map<std::string,int> Use;; 42 Use[""MLP""] = 1;; 43 Use[""BDTG""] = 1;; 44 Use[""DL_CPU""] = 1;; 45 Use[""DL_GPU""] = 1;; 46 Use[""FDA_GA""] = 1;; 47 Use[""PDEFoam""] = 1;; 48 //---------------------------------------------------------------; 49 ; 50 std::cout << std::endl;; 51 std::cout << ""==> Start TMVAMulticlassApp"" << std::endl;; 52 if (myMethodList != """") {; 53 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; 54 ; 55 std::vector<TString> mlist = gTools().SplitString( myMethodList, ',' );; 56 for (UInt_t i=0; i<mlist.size(); i++) {; 57 std::string regMethod(mlist[i]);; 58 ; 59 if (Use.find(regMethod) == Use.end()) {; 60 std::cout << ""Method \"""" << regMethod << ""\"" not known in TMVA under this name. Choose am",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlassApplication_8C_source.html:94,Guid,Guide,94,doc/master/TMVAMulticlassApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlassApplication_8C_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVAMultipleBackgroundExample.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMultipleBackgroundExample.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVAGAexample. ; Start Test TMVAGAexample; ========================; ; ... event: 0 (200); ======> EVENT:0; var1 = -1.14361; var2 = -0.822373; var3 = -0.395426; var4 = -0.529427; created tree: TreeS; ... event: 0 (200); ======> EVENT:0; var1 = -1.54361; var2 = -1.42237; var3 = -1.39543; var4 = -2.02943; created tree: TreeB0; ... event: 0 (200); ======> EVENT:0; var1 = -1.54361; var2 = -0.822373; var3 = -0.395426; var4 = -2.02943; created tree: TreeB1; ======> EVENT:0; var1 = 0.463304; var2 = 1.37192; var3 = -1.16769; var4 = -1.77551; created tree: TreeB2; created data file: tmva_example_multiple_background.root; ; ========================; --- Training; <HEADER> DataSetInfo : [datasetBkg0] : Added class ""Signal""; : Add Tree TreeS of type Signal with 200 events; <HEADER> DataSetInfo : [datasetBkg0] : Added class ""Background""; : Add Tree TreeB0 of type Background with 200 events; <HEADER> Factory : Booking method: BDTG; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset datasetBkg0; : Building event vectors for type 2 Signal; : Dataset[datasetBkg0] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[datasetBkg0] : create input formulas f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:101,Guid,Guide,101,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVARegression.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegression.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers. ; As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables.; The methods to be used can be switched on and off by means of booleans, or via the prompt command, for example: root -l TMVARegression.C\‍(\""LD,MLP\""\‍); (note that the backslashes are mandatory) If no method given, a default set is used.; The output file ""TMVAReg.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro.; Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVARegression. ; ; ==> Start TMVARegression; --- TMVARegression : Using input file: ./files/tmva_reg_example.root; DataSetInfo : [datasetreg] : Added class ""Regression""; : Add Tree TreeR of type Regression with 10000 events; : Dataset[datasetreg] : Class index : 0 name : Regression; Factory : Booking method: ␛[1mPDEFoam␛[0m; : ; : Rebuilding Dataset datasetreg; : Building event vectors for type 2 Regression; : Dataset[datasetreg] : create input formulas for tree TreeR; DataSetFactory : [datasetreg] : Number of events in input trees; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Regression -- training events : 1000; : Regression -- testing events : 9000; : Regression -- training and testing events: 10000; : ; DataSetInfo : Correlation matrix (Regression):; : ------------------------; : var1 var2; : var1: +1.000 +0.006; : var2: +0.006 +1.000; : ------------------------; DataSetFactory : [datasetreg] : ; : ; Factory : Booking m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:86,Guid,Guide,86,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: tutorials/tmva/TMVARegression.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegression.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides examples for the training and testing of the; 5/// TMVA classifiers.; 6///; 7/// As input data is used a toy-MC sample consisting of four Gaussian-distributed; 8/// and linearly correlated input variables.; 9///; 10/// The methods to be used can be switched on and off by means of booleans, or; 11/// via the prompt command, for example:; 12///; 13/// root -l TMVARegression.C\‍(\""LD,MLP\""\‍); 14///; 15/// (note that the backslashes are mandatory); 16/// If no method given, a default set is used.; 17///; 18/// The output file ""TMVAReg.root"" can be analysed with the use of dedicated; 19/// macros (simply say: root -l <macro.C>), which can be conveniently; 20/// invoked through a GUI that will appear at the end of the run of this macro.; 21/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 22/// - Package : TMVA; 23/// - Root Macro: TMVARegression; 24///; 25/// \macro_output; 26/// \macro_code; 27/// \author Andreas Hoecker; 28 ; 29#include <cstdlib>; 30#include <iostream>; 31#include <map>; 32#include <string>; 33 ; 34#include ""TChain.h""; 35#include ""TFile.h""; 36#include ""TTree.h""; 37#include ""TString.h""; 38#include ""TObjString.h""; 39#include ""TSystem.h""; 40#include ""TROOT.h""; 41 ; 42#include ""TMVA/Tools.h""; 43#include ""TMVA/Factory.h""; 44#include ""TMVA/DataLoader.h""; 45#include ""TMVA/TMVARegGui.h""; 46 ; 47 ; 48using namespace TMVA;; 49 ; 50void TMVARegression( TString myMethodList = """" ); 51{; 52 // The explicit loading of the shared libTMVA is done in TMVAlogon.C, defined in .rootrc; 53 // if you use your private .rootrc, or run from a different directory, please copy the; 54 // corresponding lines from .rootrc; 55 ; 56 // methods to be processed can be given as an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C_source.html:83,Guid,Guide,83,doc/master/TMVARegression_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C_source.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: tutorials/tmva/TMVARegressionApplication.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegressionApplication.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example on how to use the trained regression MVAs within an analysis module . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVARegressionApplication. ; ; ==> Start TMVARegressionApplication; : Booking ""BDTG method"" of type ""BDT"" from datasetreg/weights/TMVARegression_BDTG.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_BDTG.weights.xml; <HEADER> DataSetInfo : [Default] : Added class ""Regression""; : Booked classifier ""BDTG"" of type: ""BDT""; : Booking ""DNN_CPU method"" of type ""DL"" from datasetreg/weights/TMVARegression_DNN_CPU.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_DNN_CPU.weights.xml; : Booked classifier ""DNN_CPU"" of type: ""DL""; : Booking ""KNN method"" of type ""KNN"" from datasetreg/weights/TMVARegression_KNN.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_KNN.weights.xml; : Creating kd-tree with 1000 events; : Computing scale factor for 1d distributions: (ifrac, bottom, top) = (80%, 10%, 90%); <HEADER> ModulekNN : Optimizing tree for 2 variables with 1000 values; : <Fill> Class 1 has 1000 events; : Booked classifier ""KNN"" of type: ""KNN""; : Booking ""LD method"" of type ""LD"" from datasetreg/weights/TMVARegression_LD.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_LD.weights.xml; : Booked classifier ""LD"" of type: ""LD""; : Booking ""PDEFoam method"" of type ""PDEFoam"" from datasetreg/weights/TMVARegression_PDEFoam.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_PDEFoam.weights.xml; : Read foams from file: datasetreg/weights/TMVARegression_PDEFoam.weights_foams.root; : Booked classifier ""PDEFoam"" of type: ""PDEFoam""; --- TMVARegressionApp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C.html:97,Guid,Guide,97,doc/master/TMVARegressionApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVARegressionApplication.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegressionApplication.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides a simple example on how to use the trained regression MVAs; 5/// within an analysis module; 6///; 7/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 8/// - Package : TMVA; 9/// - Executable: TMVARegressionApplication; 10///; 11/// \macro_output; 12/// \macro_code; 13/// \author Andreas Hoecker; 14 ; 15#include <cstdlib>; 16#include <vector>; 17#include <iostream>; 18#include <map>; 19#include <string>; 20 ; 21#include ""TFile.h""; 22#include ""TTree.h""; 23#include ""TString.h""; 24#include ""TSystem.h""; 25#include ""TROOT.h""; 26#include ""TStopwatch.h""; 27 ; 28#include ""TMVA/Tools.h""; 29#include ""TMVA/Reader.h""; 30 ; 31using namespace TMVA;; 32 ; 33void TMVARegressionApplication( TString myMethodList = """" ); 34{; 35 //---------------------------------------------------------------; 36 // This loads the library; 37 TMVA::Tools::Instance();; 38 ; 39 // Default MVA methods to be trained + tested; 40 std::map<std::string,int> Use;; 41 ; 42 // --- Mutidimensional likelihood and Nearest-Neighbour methods; 43 Use[""PDERS""] = 0;; 44 Use[""PDEFoam""] = 1;; 45 Use[""KNN""] = 1;; 46 //; 47 // --- Linear Discriminant Analysis; 48 Use[""LD""] = 1;; 49 //; 50 // --- Function Discriminant analysis; 51 Use[""FDA_GA""] = 0;; 52 Use[""FDA_MC""] = 0;; 53 Use[""FDA_MT""] = 0;; 54 Use[""FDA_GAMT""] = 0;; 55 //; 56 // --- Neural Network; 57 Use[""MLP""] = 0;; 58 // Deep neural network; 59#ifdef R__HAS_TMVAGPU; 60 Use[""DNN_GPU""] = 1;; 61 Use[""DNN_CPU""] = 0;; 62#else; 63 Use[""DNN_GPU""] = 0;; 64#ifdef R__HAS_TMVACPU; 65 Use[""DNN_CPU""] = 1;; 66#else; 67 Use[""DNN_CPU""] = 0;; 68#endif; 69#endif; 70 //; 71 // --- Support Vector Machine; 72 Use[""SVM""] = 0;; 73 //; 74 // --- Boosted Decision Tre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html:94,Guid,Guide,94,doc/master/TMVARegressionApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVA_CNN_Classification.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_CNN_Classification.C File ReferenceTutorials » TMVA tutorials. Detailed Description; TMVA Classification Example Using a Convolutional Neural Network ; This is an example of using a CNN in TMVA. We do classification using a toy image data set that is generated when running the example macro. ; Running with nthreads = 4; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sig_tree of type Signal with 1000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg_tree of type Background with 1000 events; Factory : Booking method: ␛[1mBDT␛[0m; : ; : Rebuilding Dataset dataset; : Building event vectors for type 2 Signal; : Dataset[dataset] : create input formulas for tree sig_tree; : Using variable vars[0] from array expression vars of size 256; : Building event vectors for type 2 Background; : Dataset[dataset] : create input formulas for tree bkg_tree; : Using variable vars[0] from array expression vars of size 256; DataSetFactory : [dataset] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 800; : Signal -- testing events : 200; : Signal -- training and testing events: 1000; : Background -- training events : 800; : Background -- testing events : 200; : Background -- training and testing events: 1000; : ; Factory : Booking method: ␛[1mTMVA_DNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:Layout=DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:95,Guid,Guide,95,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_CNN_Classification.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; TMVA_CNN_Classification.py File ReferenceTutorials » TMVA tutorials. Detailed Description; TMVA Classification Example Using a Convolutional Neural Network ; This is an example of using a CNN in TMVA. We do classification using a toy image data set that is generated when running the example macro; ; ; # TMVA Classification Example Using a Convolutional Neural Network; ; ; ## Helper function to create input images data; ## we create a signal and background 2D histograms from 2d gaussians; ## with a location (means in X and Y) different for each event; ## The difference between signal and background is in the gaussian width.; ## The width for the background gaussian is slightly larger than the signal width by few % values; ; import os; import importlib.util; ; opt = [1, 1, 1, 1, 1]; useTMVACNN = opt[0] if len(opt) > 0 else False; useKerasCNN = opt[1] if len(opt) > 1 else False; useTMVADNN = opt[2] if len(opt) > 2 else False; useTMVABDT = opt[3] if len(opt) > 3 else False; usePyTorchCNN = opt[4] if len(opt) > 4 else False; ; tf_spec = importlib.util.find_spec(""tensorflow""); if tf_spec is None:; useKerasCNN = False; print(""TMVA_CNN_Classificaton"",""Skip using Keras since tensorflow is not installed""); else:; import tensorflow; ; # PyTorch has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227; torch_spec = importlib.util.find_spec(""torch""); if torch_spec is None:; usePyTorchCNN = False; print(""TMVA_CNN_Classificaton"",""Skip using PyTorch since torch is not installed""); else:; import torch; ; ; import ROOT; ; ; TMVA = ROOT.TMVA; TFile = ROOT.TFile; ; TMVA.Tools.Instance(); ; def MakeImagesTree(n, nh, nw):; # image size (nh x nw); ntot = nh * nw; fileOutName = ""images_data_16x16.root""; nRndmEvts = 1000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:96,Guid,Guide,96,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_Higgs_Classification.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_Higgs_Classification.C File ReferenceTutorials » TMVA tutorials. Detailed Description; Classification example of TMVA based on public Higgs UCI dataset ; The UCI data set is a public HIGGS data set , see http://archive.ics.uci.edu/ml/datasets/HIGGS used in this paper: Baldi, P., P. Sadowski, and D. Whiteson. “Searching for Exotic Particles in High-energy Physics with Deep Learning.” Nature Communications 5 (July 2, 2014). ; ******************************************************************************; *Tree :sig_tree : tree *; *Entries : 10000 : Total = 1177229 bytes File Size = 785298 *; * : : Tree compression factor = 1.48 *; ******************************************************************************; *Br 0 :Type : Type/F *; *Entries : 10000 : Total Size= 40556 bytes File Size = 307 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 130.54 *; *............................................................................*; *Br 1 :lepton_pT : lepton_pT/F *; *Entries : 10000 : Total Size= 40581 bytes File Size = 30464 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 1.32 *; *............................................................................*; *Br 2 :lepton_eta : lepton_eta/F *; *Entries : 10000 : Total Size= 40586 bytes File Size = 28650 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 1.40 *; *............................................................................*; *Br 3 :lepton_phi : lepton_phi/F *; *Entries : 10000 : Total Size= 40586 bytes File Size = 30508 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 1.31 *; *............................................................................*; *Br 4 :missing_energy_magnitude : missing_energy_magnitude/F *; *Entries : 10000 : Total Size= 40656 bytes File Size = 35749 *; *Baskets : 1 : Basket Size= 1500672 bytes Com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:97,Guid,Guide,97,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,2,"['Guid', 'Learn']","['Guide', 'Learning']"
Usability,". ROOT: tutorials/tmva/TMVA_Higgs_Classification.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; TMVA_Higgs_Classification.py File ReferenceTutorials » TMVA tutorials. Detailed Description; Classification example of TMVA based on public Higgs UCI dataset ; The UCI data set is a public HIGGS data set , see http://archive.ics.uci.edu/ml/datasets/HIGGS used in this paper: Baldi, P., P. Sadowski, and D. Whiteson. “Searching for Exotic Particles in High-energy Physics with Deep Learning.” Nature Communications 5 (July 2, 2014). ******************************************************************************; *Tree :sig_tree : tree *; *Entries : 10000 : Total = 1177229 bytes File Size = 785298 *; * : : Tree compression factor = 1.48 *; ******************************************************************************; *Br 0 :Type : Type/F *; *Entries : 10000 : Total Size= 40556 bytes File Size = 307 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 130.54 *; *............................................................................*; *Br 1 :lepton_pT : lepton_pT/F *; *Entries : 10000 : Total Size= 40581 bytes File Size = 30464 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 1.32 *; *............................................................................*; *Br 2 :lepton_eta : lepton_eta/F *; *Entries : 10000 : Total Size= 40586 bytes File Size = 28650 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 1.40 *; *............................................................................*; *Br 3 :lepton_phi : lepton_phi/F *; *Entries : 10000 : Total Size= 40586 bytes File Size = 30508 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 1.31 *; *............................................................................*; *Br 4 :missing_energy_magnitude : missing_energy_magnitude/F *; *Entries : 10000 : Total Size= 40656 bytes File Size = 35749 *; *Baskets : 1 : Basket Size= 1500",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:98,Guid,Guide,98,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,2,"['Guid', 'Learn']","['Guide', 'Learning']"
Usability,". ROOT: tutorials/tmva/TMVA_RNN_Classification.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_RNN_Classification.C File ReferenceTutorials » TMVA tutorials. Detailed Description; TMVA Classification Example Using a Recurrent Neural Network ; This is an example of using a RNN in TMVA. We do classification using a toy time dependent data set that is generated when running this example macro. ; Running with nthreads = 4; --- RNNClassification : Using input file: time_data_t10_d30.root; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sgn of type Signal with 2000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg of type Background with 2000 events; number of variables is 300; vars_time0[0],vars_time0[1],vars_time0[2],vars_time0[3],vars_time0[4],vars_time0[5],vars_time0[6],vars_time0[7],vars_time0[8],vars_time0[9],vars_time0[10],vars_time0[11],vars_time0[12],vars_time0[13],vars_time0[14],vars_time0[15],vars_time0[16],vars_time0[17],vars_time0[18],vars_time0[19],vars_time0[20],vars_time0[21],vars_time0[22],vars_time0[23],vars_time0[24],vars_time0[25],vars_time0[26],vars_time0[27],vars_time0[28],vars_time0[29],vars_time1[0],vars_time1[1],vars_time1[2],vars_time1[3],vars_time1[4],vars_time1[5],vars_time1[6],vars_time1[7],vars_time1[8],vars_time1[9],vars_time1[10],vars_time1[11],vars_time1[12],vars_time1[13],vars_time1[14],vars_time1[15],vars_time1[16],vars_time1[17],vars_time1[18],vars_time1[19],vars_time1[20],vars_time1[21],vars_time1[22],vars_time1[23],vars_time1[24],vars_time1[25],vars_time1[26],vars_time1[27],vars_time1[28],vars_time1[29],vars_time2[0],vars_time2[1],vars_time2[2],vars_time2[3],vars_time2[4],vars_time2[5],vars_time2[6],vars_time2[7],vars_time2[8],vars_time2[9],vars_time2[10],vars_time2[11],vars_time2[12],vars_time2[13],vars_time2[14],vars_time2[15],vars_time2[16],vars_time2[17],vars_time2[18],vars_time2[19],vars_time2[20],vars_time2[21],vars_time2[22],vars_time2[23",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:95,Guid,Guide,95,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_RNN_Classification.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; TMVA_RNN_Classification.py File ReferenceTutorials » TMVA tutorials. Detailed Description; TMVA Classification Example Using a Recurrent Neural Network ; This is an example of using a RNN in TMVA. We do classification using a toy time dependent data set that is generated when running this example macro. DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sgn of type Signal with 2000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg of type Background with 2000 events; Factory : Booking method: ␛[1mTMVA_LSTM␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234:InputLayout=10|30:Layout=LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=10Optimizer=ADAM,DropConfig=0.0+0.+0.+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234:InputLayout=10|30:Layout=LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=10Optimizer=ADAM,DropConfig=0.0+0.+0.+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Backgroun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:96,Guid,Guide,96,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,2,"['Guid', 'Learn']","['Guide', 'LearningRate']"
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_GNN_Application.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; TMVA_SOFIE_GNN_Application.C File Reference. #include ""encoder.hxx""; #include ""core.hxx""; #include ""decoder.hxx""; #include ""output_transform.hxx""; #include ""TMVA/SOFIE_common.hxx""; #include ""TRandom3.h""; #include ""TH1.h""; #include ""TCanvas.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TSystem.h""; #include ""ROOT/RDataFrame.hxx"". Include dependency graph for TMVA_SOFIE_GNN_Application.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  SOFIE_GNN;  . Functions; double check_mem (std::string s="""");  ; std::vector< GNN_Data > GenerateData (int nevts, int seed);  ; int main ();  ; void Print (GNN_Data &d, std::string txt="""");  ; template<class T > ; void PrintTensor (RTensor< T > &t);  ; std::vector< GNN_Data > ReadData (std::string treename, std::string filename);  ; void TMVA_SOFIE_GNN_Application (bool verbose=false);  . Variables; const int EDGE_FEATURE_SIZE = 4;  ; const int GLOBAL_FEATURE_SIZE = 1;  ; const int NODE_FEATURE_SIZE = 4;  ; const int num_max_edges = 30;  ; const int num_max_nodes = 10;  . Function Documentation. ◆ check_mem(). double check_mem ; (; std::string ; s = """"). Definition at line 27 of file TMVA_SOFIE_GNN_Application.C. ◆ GenerateData(). std::vector< GNN_Data > GenerateData ; (; int ; nevts, . int ; seed . ). Definition at line 109 of file TMVA_SOFIE_GNN_Application.C. ◆ main(). int main ; (; ). Definition at line 234 of file TMVA_SOFIE_GNN_Application.C. ◆ Print(). void Print ; (; GNN_Data & ; d, . std::string ; txt = """" . ). Definition at line 59 of file TMVA_SOFIE_GNN_Application.C. ◆ PrintTensor(). template<class T > . void PrintTensor ; (; RTensor< T > & ; t). Definition at line 40 of file TMVA_SOFIE_GNN_Application.C. ◆ ReadData(). std::vector< GNN_Data > ReadData ; (; std::string ; treename, . s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__GNN__Application_8C.html:98,Guid,Guide,98,doc/master/TMVA__SOFIE__GNN__Application_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__GNN__Application_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_GNN_Application.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_GNN_Application.C. Go to the documentation of this file. 1// Macor evaluating a GNN model which was generated with the Parser macro; 2//; 3 ; 4// need to add include path to find generated model file; 5#ifdef __CLING__; 6R__ADD_INCLUDE_PATH($PWD); 7R__ADD_INCLUDE_PATH($ROOTSYS/runtutorials); 8#endif; 9 ; 10#include ""encoder.hxx""; 11#include ""core.hxx""; 12#include ""decoder.hxx""; 13#include ""output_transform.hxx""; 14 ; 15#include ""TMVA/SOFIE_common.hxx""; 16#include ""TRandom3.h""; 17#include ""TH1.h""; 18#include ""TCanvas.h""; 19#include ""TFile.h""; 20#include ""TTree.h""; 21#include ""TSystem.h""; 22#include ""ROOT/RDataFrame.hxx""; 23 ; 24using namespace TMVA::Experimental;; 25using namespace TMVA::Experimental::SOFIE;; 26 ; 27double check_mem(std::string s = """"){; 28 ProcInfo_t p;; 29 printf(""%s - "",s.c_str());; 30 gSystem->GetProcInfo(&p);; 31 printf("" Rmem = %8.3f MB, Vmem = %8.f3 MB \n"",; 32 p.fMemResident /1024., /// convert memory from kB to MB; 33 p.fMemVirtual /1024.; 34 );; 35 return p.fMemResident / 1024.;; 36}; 37 ; 38 ; 39template<class T>; 40void PrintTensor(RTensor<T> & t) {; 41 std::cout << "" shape : "" << ConvertShapeToString(t.GetShape()) << "" size : "" << t.GetSize() << ""\n"";; 42 auto & shape = t.GetShape();; 43 auto p = t.GetData();; 44 size_t nrows = (shape.size() > 1) ? shape[0] : 1;; 45 size_t ncols = (shape.size() > 1) ? t.GetStrides()[0] : shape[0];; 46 for (size_t i = 0; i < nrows; i++) {; 47 for (size_t j = 0; j < ncols; j++) {; 48 if (j==ncols-1) {; 49 if (j>10) std::cout << ""... "";; 50 std::cout << *p << std::endl;; 51 }; 52 else if (j<10); 53 std::cout << *p << "", "";; 54 p++;; 55 }; 56 }; 57 std::cout << std::endl;; 58}; 59void Print(GNN_Data & d, std::string txt = """") {; 60 if (!txt.empty()) std::cout << std::endl << txt << std::endl;; 61 std::cout << ""node data:""; PrintTensor(d.node_data);; 62 st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__GNN__Application_8C_source.html:95,Guid,Guide,95,doc/master/TMVA__SOFIE__GNN__Application_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__GNN__Application_8C_source.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_GNN_Parser.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_GNN_Parser.py. Go to the documentation of this file. 1## Tutorial showing how to parse a GNN from GraphNet and make a SOFIE model; 2## The tutorial also generate some data which can serve as input for the tutorial TMVA_SOFIE_GNN_Application.C; 3import ROOT; 4 ; 5import numpy as np; 6import graph_nets as gn; 7from graph_nets import utils_tf; 8import sonnet as snt; 9#for getting time and memory; 10import time; 11import os; 12import psutil; 13 ; 14# defining graph properties. Number of edges/modes are the maximum; 15num_max_nodes=100; 16num_max_edges=300; 17node_size=4; 18edge_size=4; 19global_size=1; 20LATENT_SIZE = 100; 21NUM_LAYERS = 4; 22processing_steps = 5; 23numevts = 100; 24 ; 25verbose = False; 26 ; 27#print the used memory in MB; 28def printMemory(s = """") :; 29 #get memory of current process; 30 pid = os.getpid(); 31 python_process = psutil.Process(pid); 32 memoryUse = python_process.memory_info()[0]/(1024.*1024.) #divide by 1024 * 1024 to get memory in MB; 33 print(s,""memory:"",memoryUse,""(MB)""); 34 ; 35 ; 36# method for returning dictionary of graph data; 37def get_dynamic_graph_data_dict(NODE_FEATURE_SIZE=2, EDGE_FEATURE_SIZE=2, GLOBAL_FEATURE_SIZE=1):; 38 num_nodes = np.random.randint(num_max_nodes-2, size=1)[0] + 2; 39 num_edges = np.random.randint(num_max_edges-1, size=1)[0] + 1; 40 return {; 41 ""globals"": 10*np.random.rand(GLOBAL_FEATURE_SIZE).astype(np.float32)-5.,; 42 ""nodes"": 10*np.random.rand(num_nodes, NODE_FEATURE_SIZE).astype(np.float32)-5.,; 43 ""edges"": 10*np.random.rand(num_edges, EDGE_FEATURE_SIZE).astype(np.float32)-5.,; 44 ""senders"": np.random.randint(num_nodes, size=num_edges, dtype=np.int32),; 45 ""receivers"": np.random.randint(num_nodes, size=num_edges, dtype=np.int32); 46 }; 47 ; 48# generate graph data with a fixed number of nodes/edges; 49def get_fix_graph_data_dict(num_nodes, num_edges,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__GNN__Parser_8py_source.html:91,Guid,Guide,91,doc/master/TMVA__SOFIE__GNN__Parser_8py_source.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__GNN__Parser_8py_source.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_Inference.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; TMVA_SOFIE_Inference.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides an example of using a trained model with Keras and make inference using SOFIE directly from Numpy This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ; In this case we are parsing the input file and then run the inference in the same macro making use of the ROOT JITing capability; ; import ROOT; import numpy as np; ; ; ROOT.TMVA.PyMethodBase.PyInitialize(); ; ; # check if the input file exists; modelFile = ""Higgs_trained_model.h5""; if (ROOT.gSystem.AccessPathName(modelFile)) :; ROOT.Info(""TMVA_SOFIE_RDataFrame"",""You need to run TMVA_Higgs_Classification.C to generate the Keras trained model""); exit(); ; ; # parse the input Keras model into RModel object; model = ROOT.TMVA.Experimental.SOFIE.PyKeras.Parse(modelFile); ; generatedHeaderFile = modelFile.replace("".h5"","".hxx""); print(""Generating inference code for the Keras model from "",modelFile,""in the header "", generatedHeaderFile); #Generating inference code; model.Generate(); model.OutputGenerated(generatedHeaderFile); model.PrintGenerated(); ; # now compile using ROOT JIT trained model; modelName = modelFile.replace("".h5"",""""); print(""compiling SOFIE model "", modelName); ROOT.gInterpreter.Declare('#include ""' + generatedHeaderFile + '""'); ; ; generatedHeaderFile = modelFile.replace("".h5"","".hxx""); print(""Generating inference code for the Keras model from "",modelFile,""in the header "", generatedHeaderFile); #Generating inference; ; inputFileName = ""Higgs_data.root""; inputFile = ""http://root.cern.ch/files/"" + inputFileName; ; ; ; ; ; # make SOFIE inference on signal data; ; df1 = ROOT.RDataFrame(""sig_tree"", inputFile); sigData = df1.AsNumpy(columns=['m_jj', 'm_jjj', 'm_lv', 'm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Inference_8py.html:93,Guid,Guide,93,doc/master/TMVA__SOFIE__Inference_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Inference_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_Keras.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_Keras.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ; ; using namespace TMVA::Experimental;; ; TString pythonSrc = ""\; import os\n\; os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\; \n\; import numpy as np\n\; from tensorflow.keras.models import Model\n\; from tensorflow.keras.layers import Input,Dense,Activation,ReLU\n\; from tensorflow.keras.optimizers import SGD\n\; \n\; input=Input(shape=(64,),batch_size=4)\n\; x=Dense(32)(input)\n\; x=Activation('relu')(x)\n\; x=Dense(16,activation='relu')(x)\n\; x=Dense(8,activation='relu')(x)\n\; x=Dense(4)(x)\n\; output=ReLU()(x)\n\; model=Model(inputs=input,outputs=output)\n\; \n\; randomGenerator=np.random.RandomState(0)\n\; x_train=randomGenerator.rand(4,64)\n\; y_train=randomGenerator.rand(4,4)\n\; \n\; model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))\n\; model.fit(x_train, y_train, epochs=5, batch_size=4)\n\; model.save('KerasModel.h5')\n"";; ; ; void TMVA_SOFIE_Keras(const char * modelFile = nullptr, bool printModelInfo = true){; ; //Running the Python script to generate Keras .h5 file; TMVA::PyMethodBase::PyInitialize();; ; if (modelFile == nullptr) {; TMacro m;; m.AddLine(pythonSrc);; m.SaveSource(""make_keras_model.py"");; gSystem->Exec(TMVA::Python_Executable() + "" make_keras_model.py"");; modelFile = ""KerasModel.h5"";; }; ; //Parsing the saved Keras .h5 file into RModel object; SOFIE::RModel model = SOFIE::PyKeras::Parse(modelFile);; ; ; //Generating inference code; model.Generate();; // generate output header. By default it will be modelName.hxx; model.OutputGenerated();; ; if (!printModelInfo) return;; ; //Printing required input tensors; std::cout<<""\n\n"";; model.PrintRequiredInpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Keras_8C.html:88,Guid,Guide,88,doc/master/TMVA__SOFIE__Keras_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Keras_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,. ROOT: tutorials/tmva/TMVA_SOFIE_Keras_HiggsModel.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_Keras_HiggsModel.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro run the SOFIE parser on the Keras model obtaining running TMVA_Higgs_Classification.C You need to run that macro before this one ; AuthorLorenzo Moneta ; Definition in file TMVA_SOFIE_Keras_HiggsModel.C. tutorialstmvaTMVA_SOFIE_Keras_HiggsModel.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Keras__HiggsModel_8C.html:99,Guid,Guide,99,doc/master/TMVA__SOFIE__Keras__HiggsModel_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Keras__HiggsModel_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_Models.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; TMVA_SOFIE_Models.py File ReferenceTutorials » TMVA tutorials. Detailed Description; Example of inference with SOFIE using a set of models trained with Keras. ; This tutorial shows how to store several models in a single header file and the weights in a ROOT binary file. The models are then evaluated using the RDataFrame First, generate the input model by running TMVA_Higgs_Classification.C.; This tutorial parses the input model and runs the inference using ROOT's JITing capability.; ; import ROOT; from os.path import exists; ; ROOT.TMVA.PyMethodBase.PyInitialize(); ; ; ## generate and train Keras models with different architectures; ; import numpy as np; from tensorflow.keras.models import Sequential; from tensorflow.keras.layers import Dense; from tensorflow.keras.optimizers import Adam; ; from sklearn.model_selection import train_test_split; ; def CreateModel(nlayers = 4, nunits = 64):; model = Sequential(); model.add(Dense(nunits, activation='relu',input_dim=7)); for i in range(1,nlayers) :; model.add(Dense(nunits, activation='relu')); ; model.add(Dense(1, activation='sigmoid')); model.compile(loss = 'binary_crossentropy', optimizer = Adam(learning_rate = 0.001), weighted_metrics = ['accuracy']); model.summary(); return model; ; def PrepareData() :; #get the input data; inputFileName = ""Higgs_data.root""; inputFile = ""http://root.cern.ch/files/"" + inputFileName; ; df1 = ROOT.RDataFrame(""sig_tree"", inputFile); sigData = df1.AsNumpy(columns=['m_jj', 'm_jjj', 'm_lv', 'm_jlv', 'm_bb', 'm_wbb', 'm_wwbb']); #print(sigData); ; # stack all the 7 numpy array in a single array (nevents x nvars); xsig = np.column_stack(list(sigData.values())); data_sig_size = xsig.shape[0]; print(""size of data"", data_sig_size); ; # make SOFIE inference on background data; df2 = ROOT.RDataFrame(""bkg_tree"", inputFile); bkgData = df2.AsNumpy(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html:90,Guid,Guide,90,doc/master/TMVA__SOFIE__Models_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_ONNX.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_ONNX.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example for the parsing of ONNX files into RModel object and further generating the .hxx header files for inference. ; ; using namespace TMVA::Experimental;; ; void TMVA_SOFIE_ONNX(std::string inputFile = """"){; if (inputFile.empty() ); inputFile = std::string(gROOT->GetTutorialsDir()) + ""/tmva/Linear_16.onnx"";; ; //Creating parser object to parse ONNX files; SOFIE::RModelParser_ONNX parser;; SOFIE::RModel model = parser.Parse(inputFile, true);; ; //Generating inference code; model.Generate();; // write the code in a file (by default Linear_16.hxx and Linear_16.dat; model.OutputGenerated();; ; //Printing required input tensors; model.PrintRequiredInputTensors();; ; //Printing initialized tensors (weights); std::cout<<""\n\n"";; model.PrintInitializedTensors();; ; //Printing intermediate tensors; std::cout<<""\n\n"";; model.PrintIntermediateTensors();; ; //Checking if tensor already exist in model; std::cout<<""\n\nTensor \""16weight\"" already exist: ""<<std::boolalpha<<model.CheckIfTensorAlreadyExist(""16weight"")<<""\n\n"";; std::vector<size_t> tensorShape = model.GetTensorShape(""16weight"");; std::cout<<""Shape of tensor \""16weight\"": "";; for(auto& it:tensorShape){; std::cout<<it<<"","";; }; std::cout<<""\n\nData type of tensor \""16weight\"": "";; SOFIE::ETensorType tensorType = model.GetTensorType(""16weight"");; std::cout<<SOFIE::ConvertTypeToString(tensorType);; ; //Printing generated inference code; std::cout<<""\n\n"";; model.PrintGenerated();; }; gROOT#define gROOTDefinition TROOT.h:406; TMVA::Experimental::SOFIE::RModelParser_ONNXDefinition RModelParser_ONNX.hxx:27; TMVA::Experimental::SOFIE::RModelParser_ONNX::ParseRModel Parse(std::string filename, bool verbose=false)Definition RModelParser_ONNX.cxx:312; TMVA::Experimental::SOFIE::RMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__ONNX_8C.html:87,Guid,Guide,87,doc/master/TMVA__SOFIE__ONNX_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__ONNX_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_PyTorch.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_PyTorch.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example for the parsing of PyTorch .pt file into RModel object and further generating the .hxx header files for inference. ; ; using namespace TMVA::Experimental;; ; TString pythonSrc = ""\; import torch\n\; import torch.nn as nn\n\; \n\; model = nn.Sequential(\n\; nn.Linear(32,16),\n\; nn.ReLU(),\n\; nn.Linear(16,8),\n\; nn.ReLU()\n\; )\n\; \n\; criterion = nn.MSELoss()\n\; optimizer = torch.optim.SGD(model.parameters(),lr=0.01)\n\; \n\; x=torch.randn(2,32)\n\; y=torch.randn(2,8)\n\; \n\; for i in range(500):\n\; y_pred = model(x)\n\; loss = criterion(y_pred,y)\n\; optimizer.zero_grad()\n\; loss.backward()\n\; optimizer.step()\n\; \n\; model.eval()\n\; m = torch.jit.script(model)\n\; torch.jit.save(m,'PyTorchModel.pt')\n"";; ; ; void TMVA_SOFIE_PyTorch(){; ; //Running the Python script to generate PyTorch .pt file; TMVA::PyMethodBase::PyInitialize();; ; TMacro m;; m.AddLine(pythonSrc);; m.SaveSource(""make_pytorch_model.py"");; gSystem->Exec(TMVA::Python_Executable() + "" make_pytorch_model.py"");; ; //Parsing a PyTorch model requires the shape and data-type of input tensor; //Data-type of input tensor defaults to Float if not specified; std::vector<size_t> inputTensorShapeSequential{2,32};; std::vector<std::vector<size_t>> inputShapesSequential{inputTensorShapeSequential};; ; //Parsing the saved PyTorch .pt file into RModel object; SOFIE::RModel model = SOFIE::PyTorch::Parse(""PyTorchModel.pt"",inputShapesSequential);; ; //Generating inference code; model.Generate();; model.OutputGenerated(""PyTorchModel.hxx"");; ; //Printing required input tensors; std::cout<<""\n\n"";; model.PrintRequiredInputTensors();; ; //Printing initialized tensors (weights); std::cout<<""\n\n"";; model.PrintInitializedTensors();; ; //Printing intermediat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__PyTorch_8C.html:90,Guid,Guide,90,doc/master/TMVA__SOFIE__PyTorch_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__PyTorch_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_RDataFrame.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_RDataFrame.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model Then you need to run the macro TMVA_SOFIE_Keras_HiggsModel.C to generate the corresponding header file using SOFIE. ; Execute in this order: root TMVA_Higgs_Classification.C; root TMVA_SOFIE_Keras_HiggsModel.C; root TMVA_SOFIE_RDataFrame.C; TMVA_Higgs_ClassificationDefinition TMVA_Higgs_Classification.py:1; TMVA_SOFIE_RDataFrameDefinition TMVA_SOFIE_RDataFrame.py:1; ; using namespace TMVA::Experimental;; ; // need to add the current directory (from where we are running this macro); // to the include path for Cling; R__ADD_INCLUDE_PATH($PWD); R__ADD_INCLUDE_PATH($ROOTSYS/runtutorials); #include ""Higgs_trained_model.hxx""; #include ""TMVA/SOFIEHelpers.hxx""; ; using namespace TMVA::Experimental;; ; void TMVA_SOFIE_RDataFrame(int nthreads = 2){; ; std::string inputFileName = ""Higgs_data.root"";; std::string inputFile = ""http://root.cern.ch/files/"" + inputFileName;; ; ROOT::EnableImplicitMT(nthreads);; ; ROOT::RDataFrame df1(""sig_tree"", inputFile);; int nslots = df1.GetNSlots();; std::cout << ""Running using "" << nslots << "" threads"" << std::endl;; auto h1 = df1.DefineSlot(""DNN_Value"", SofieFunctor<7, TMVA_SOFIE_Higgs_trained_model::Session>(nslots),; {""m_jj"", ""m_jjj"", ""m_lv"", ""m_jlv"", ""m_bb"", ""m_wbb"", ""m_wwbb""}); .Histo1D({""h_sig"", """", 100, 0, 1}, ""DNN_Value"");; ; ROOT::RDataFrame df2(""bkg_tree"", inputFile);; nslots = df2.GetNSlots();; auto h2 = df2.DefineSlot(""DNN_Value"", SofieFunctor<7, TMVA_SOFIE_Higgs_trained_model::Session>(nslots),; {""m_jj"", ""m_jjj"", ""m_lv"", ""m_jlv"", """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame_8C.html:93,Guid,Guide,93,doc/master/TMVA__SOFIE__RDataFrame_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_RDataFrame.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; TMVA_SOFIE_RDataFrame.py File ReferenceTutorials » TMVA tutorials. Detailed Description; Example of inference with SOFIE and RDataFrame, of a model trained with Keras. ; First, generate the input model by running TMVA_Higgs_Classification.C.; This tutorial parses the input model and runs the inference using ROOT's JITing capability.; ; import ROOT; from os.path import exists; ; ROOT.TMVA.PyMethodBase.PyInitialize(); ; ; # check if the input file exists; modelFile = ""Higgs_trained_model.h5""; modelName = ""Higgs_trained_model""; ; ; if not exists(modelFile):; raise FileNotFoundError(""You need to run TMVA_Higgs_Classification.C to generate the Keras trained model""); ; # parse the input Keras model into RModel object; model = ROOT.TMVA.Experimental.SOFIE.PyKeras.Parse(modelFile); ; # generating inference code; model.Generate(); model.OutputGenerated(""Higgs_trained_model_generated.hxx""); model.PrintGenerated(); ; # compile using ROOT JIT trained model; print(""compiling SOFIE model and functor....""); ROOT.gInterpreter.Declare('#include ""Higgs_trained_model_generated.hxx""'); ROOT.gInterpreter.Declare('auto sofie_functor = TMVA::Experimental::SofieFunctor<7,TMVA_SOFIE_'+modelName+'::Session>(0,""Higgs_trained_model_generated.dat"");'); ; # run inference over input data; inputFile = ""http://root.cern/files/Higgs_data.root""; df1 = ROOT.RDataFrame(""sig_tree"", inputFile); h1 = df1.Define(""DNN_Value"", ""sofie_functor(rdfslot_,m_jj, m_jjj, m_lv, m_jlv, m_bb, m_wbb, m_wwbb)"").Histo1D((""h_sig"", """", 100, 0, 1),""DNN_Value""); ; df2 = ROOT.RDataFrame(""bkg_tree"", inputFile); h2 = df2.Define(""DNN_Value"", ""sofie_functor(rdfslot_,m_jj, m_jjj, m_lv, m_jlv, m_bb, m_wbb, m_wwbb)"").Histo1D((""h_bkg"", """", 100, 0, 1),""DNN_Value""); ; # run over the input data once, combining both RDataFrame graphs.; ROOT.RDF.RunGraphs([h1, h2]);; ; print(""Number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame_8py.html:94,Guid,Guide,94,doc/master/TMVA__SOFIE__RDataFrame_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_RDataFrame_JIT.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_RDataFrame_JIT.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ; In this case we are parsing the input file and then run the inference in the same macro making use of the ROOT JITing capability; ; using namespace TMVA::Experimental;; ; /// function to compile the generated model and the declaration of the SofieFunctor; /// used by RDF.; /// Assume that the model name as in the header file; void CompileModelForRDF(const std::string & headerModelFile, unsigned int ninputs, unsigned int nslots=0) {; ; std::string modelName = headerModelFile.substr(0,headerModelFile.find("".hxx""));; std::string cmd = std::string(""#include \"""") + headerModelFile + std::string(""\"""");; auto ret = gInterpreter->Declare(cmd.c_str());; if (!ret); throw std::runtime_error(""Error compiling : "" + cmd);; std::cout << ""compiled : "" << cmd << std::endl;; ; cmd = ""auto sofie_functor = TMVA::Experimental::SofieFunctor<"" + std::to_string(ninputs) + "",TMVA_SOFIE_"" +; modelName + ""::Session>("" + std::to_string(nslots) + "");"";; ret = gInterpreter->Declare(cmd.c_str());; if (!ret); throw std::runtime_error(""Error compiling : "" + cmd);; std::cout << ""compiled : "" << cmd << std::endl;; std::cout << ""Model is ready to be evaluated"" << std::endl;; return;; }; ; void TMVA_SOFIE_RDataFrame_JIT(std::string modelFile = ""Higgs_trained_model.h5""){; ; TMVA::PyMethodBase::PyInitialize();; ; // check if the input file exists; if (gSystem->AccessPathName(modelFile.c_str())) {; Info(""TMVA_SOFIE_RDataFrame"",""You need to run TMVA_Higgs_Classification.C to generate the Keras trained model"");; return;; };",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame__JIT_8C.html:97,Guid,Guide,97,doc/master/TMVA__SOFIE__RDataFrame__JIT_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame__JIT_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/TMVA_SOFIE_RSofieReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_RSofieReader.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides an example of using a trained model with Keras and make inference using SOFIE with the RSofieReader class This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model ; Execute in this order: root TMVA_Higgs_Classification.C; root TMVA_SOFIE_RSofieReader.C; TMVA_Higgs_ClassificationDefinition TMVA_Higgs_Classification.py:1; ; using namespace TMVA::Experimental;; ; void TMVA_SOFIE_RSofieReader(){; ; RSofieReader model(""Higgs_trained_model.h5"");; // for debugging; //RSofieReader model(""Higgs_trained_model.h5"", {}, true);; ; // the input shape for this model is a tensor with shape (1,7); ; std::vector<float> input = {0.1,0.2,0.3,0.4,0.5,0.6,0.7};; ; // predict model on a single event (takes a std::vector<float>); ; auto output = model.Compute(input);; ; std::cout << ""Event prediction = "" << output[0] << std::endl;; ; // predict model now on a input file using RDataFrame; ; std::string inputFileName = ""Higgs_data.root"";; std::string inputFile = ""http://root.cern.ch/files/"" + inputFileName;; ; ; ROOT::RDataFrame df1(""sig_tree"", inputFile);; ; auto h1 = df1.Define(""DNN_Values"", Compute<7, float>(model),; {""m_jj"", ""m_jjj"", ""m_lv"", ""m_jlv"", ""m_bb"", ""m_wbb"", ""m_wwbb""}); .Define(""y"",""DNN_Values[0]""); .Histo1D({""h_sig"", """", 100, 0, 1}, ""y"");; ; ROOT::RDataFrame df2(""bkg_tree"", inputFile);; auto h2 = df2.Define(""DNN_Values"", Compute<7, float>(model),; {""m_jj"", ""m_jjj"", ""m_lv"", ""m_jlv"", ""m_bb"", ""m_wbb"", ""m_wwbb""}); .Define(""y"",""DNN_Values[0]""); .Histo1D({""h_bkg"", """", 100, 0, 1}, ""y"");; ; h1->SetLineColor(kRed);; h2->SetLineColor(kBlue);; ; auto c1 = new TCanvas();; gStyle->SetOptStat(0);; ; h2->DrawClone();; h1->DrawClone(""SAM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__RSofieReader_8C.html:95,Guid,Guide,95,doc/master/TMVA__SOFIE__RSofieReader_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__RSofieReader_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/createData.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. createData.C File ReferenceTutorials » TMVA tutorials. Detailed Description; Plot the variables. ; ; ; #include ""TROOT.h""; #include ""TMath.h""; #include ""TTree.h""; #include ""TArrayD.h""; #include ""TStyle.h""; #include ""TFile.h""; #include ""TRandom.h""; #include ""Riostream.h""; #include ""TCanvas.h""; #include ""TMatrixD.h""; #include ""TH2F.h""; #include ""TLegend.h""; #include ""TBranch.h""; #include <vector>; ; void plot( TString fname = ""data.root"", TString var0=""var0"", TString var1=""var1"" ); {; TFile* dataFile = TFile::Open( fname );; ; if (!dataFile) {; cout << ""ERROR: cannot open file: "" << fname << endl;; return;; }; ; TTree *treeS = (TTree*)dataFile->Get(""TreeS"");; TTree *treeB = (TTree*)dataFile->Get(""TreeB"");; ; TCanvas* c = new TCanvas( ""c"", """", 0, 0, 550, 550 );; ; TStyle *TMVAStyle = gROOT->GetStyle(""Plain""); // our style is based on Plain; TMVAStyle->SetOptStat(0);; TMVAStyle->SetPadTopMargin(0.02);; TMVAStyle->SetPadBottomMargin(0.16);; TMVAStyle->SetPadRightMargin(0.03);; TMVAStyle->SetPadLeftMargin(0.15);; TMVAStyle->SetPadGridX(0);; TMVAStyle->SetPadGridY(0);; ; TMVAStyle->SetOptTitle(0);; TMVAStyle->SetTitleW(.4);; TMVAStyle->SetTitleH(.10);; TMVAStyle->SetTitleX(.5);; TMVAStyle->SetTitleY(.9);; TMVAStyle->SetMarkerStyle(20);; TMVAStyle->SetMarkerSize(1.6);; TMVAStyle->cd();; ; ; Float_t xmin = TMath::Min( treeS->GetMinimum( var0 ), treeB->GetMinimum( var0 ) );; Float_t xmax = TMath::Max( treeS->GetMaximum( var0 ), treeB->GetMaximum( var0 ) );; Float_t ymin = TMath::Min( treeS->GetMinimum( var1 ), treeB->GetMinimum( var1 ) );; Float_t ymax = TMath::Max( treeS->GetMaximum( var1 ), treeB->GetMaximum( var1 ) );; ; Int_t nbin = 500;; TH2F* frameS = new TH2F( ""DataS"", ""DataS"", nbin, xmin, xmax, nbin, ymin, ymax );; TH2F* frameB = new TH2F( ""DataB"", ""DataB"", nbin, xmin, xmax, nbin, ymin, ymax );; ; // project trees; treeS->Draw( Form(""%s:%",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/createData_8C.html:82,Guid,Guide,82,doc/master/createData_8C.html,https://root.cern,https://root.cern/doc/master/createData_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/keras Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. keras Directory Reference. Directory dependency graph for keras:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  ApplicationClassificationKeras.py;   This tutorial shows how to apply a trained model to new data. ;  ;  ApplicationRegressionKeras.py;   This tutorial shows how to apply a trained model to new data (regression). ;  ;  ClassificationKeras.py;   This tutorial shows how to do classification in TMVA with neural networks trained with keras. ;  ;  GenerateModel.py;   This tutorial shows how to define and generate a keras model for use with TMVA. ;  ;  MulticlassKeras.py;   This tutorial shows how to do multiclass classification in TMVA with neural networks trained with keras. ;  ;  RegressionKeras.py;   This tutorial shows how to do regression in TMVA with neural networks trained with keras. ;  . tutorialstmvakeras. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_983ef7a33b0c59dc2d471f36240bf58a.html:80,Guid,Guide,80,doc/master/dir_983ef7a33b0c59dc2d471f36240bf58a.html,https://root.cern,https://root.cern/doc/master/dir_983ef7a33b0c59dc2d471f36240bf58a.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/keras/ClassificationKeras.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; ClassificationKeras.py File ReferenceTutorials » TMVA tutorials » TMVA Keras tutorials. Detailed Description; This tutorial shows how to do classification in TMVA with neural networks trained with keras. ; ; from ROOT import TMVA, TFile, TTree, TCut; from subprocess import call; from os.path import isfile; ; from tensorflow.keras.models import Sequential; from tensorflow.keras.layers import Dense, Activation; from tensorflow.keras.optimizers import SGD; ; # Setup TMVA; TMVA.Tools.Instance(); TMVA.PyMethodBase.PyInitialize(); ; output = TFile.Open('TMVA_Classification_Keras.root', 'RECREATE'); factory = TMVA.Factory('TMVAClassification', output,; '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=Classification'); ; # Load data; if not isfile('tmva_class_example.root'):; call(['curl', '-L', '-O', 'http://root.cern/files/tmva_class_example.root']); ; data = TFile.Open('tmva_class_example.root'); signal = data.Get('TreeS'); background = data.Get('TreeB'); ; dataloader = TMVA.DataLoader('dataset'); for branch in signal.GetListOfBranches():; dataloader.AddVariable(branch.GetName()); ; dataloader.AddSignalTree(signal, 1.0); dataloader.AddBackgroundTree(background, 1.0); dataloader.PrepareTrainingAndTestTree(TCut(''),; 'nTrain_Signal=4000:nTrain_Background=4000:SplitMode=Random:NormMode=NumEvents:!V'); ; # Generate model; ; # Define model; model = Sequential(); model.add(Dense(64, activation='relu', input_dim=4)); model.add(Dense(2, activation='softmax')); ; # Set loss and optimizer; model.compile(loss='categorical_crossentropy',; optimizer=SGD(learning_rate=0.01), weighted_metrics=['accuracy', ]); ; # Store model to file; model.save('modelClassification.h5'); model.summary(); ; # Book methods; factory.BookMethod(dataloader, TMVA.Types.kFisher, 'Fisher',; '!H:!V:Fisher:VarTransform=D,G'); factory.Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ClassificationKeras_8py.html:98,Guid,Guide,98,doc/master/ClassificationKeras_8py.html,https://root.cern,https://root.cern/doc/master/ClassificationKeras_8py.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/keras/ClassificationKeras.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ClassificationKeras.py. Go to the documentation of this file. 1#!/usr/bin/env python; 2## \file; 3## \ingroup tutorial_tmva_keras; 4## \notebook -nodraw; 5## This tutorial shows how to do classification in TMVA with neural networks; 6## trained with keras.; 7##; 8## \macro_code; 9##; 10## \date 2017; 11## \author TMVA Team; 12 ; 13from ROOT import TMVA, TFile, TTree, TCut; 14from subprocess import call; 15from os.path import isfile; 16 ; 17from tensorflow.keras.models import Sequential; 18from tensorflow.keras.layers import Dense, Activation; 19from tensorflow.keras.optimizers import SGD; 20 ; 21# Setup TMVA; 22TMVA.Tools.Instance(); 23TMVA.PyMethodBase.PyInitialize(); 24 ; 25output = TFile.Open('TMVA_Classification_Keras.root', 'RECREATE'); 26factory = TMVA.Factory('TMVAClassification', output,; 27 '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=Classification'); 28 ; 29# Load data; 30if not isfile('tmva_class_example.root'):; 31 call(['curl', '-L', '-O', 'http://root.cern/files/tmva_class_example.root']); 32 ; 33data = TFile.Open('tmva_class_example.root'); 34signal = data.Get('TreeS'); 35background = data.Get('TreeB'); 36 ; 37dataloader = TMVA.DataLoader('dataset'); 38for branch in signal.GetListOfBranches():; 39 dataloader.AddVariable(branch.GetName()); 40 ; 41dataloader.AddSignalTree(signal, 1.0); 42dataloader.AddBackgroundTree(background, 1.0); 43dataloader.PrepareTrainingAndTestTree(TCut(''),; 44 'nTrain_Signal=4000:nTrain_Background=4000:SplitMode=Random:NormMode=NumEvents:!V'); 45 ; 46# Generate model; 47 ; 48# Define model; 49model = Sequential(); 50model.add(Dense(64, activation='relu', input_dim=4)); 51model.add(Dense(2, activation='softmax')); 52 ; 53# Set loss and optimizer; 54model.compile(loss='categorical_crossentropy',; 55 optimizer=SGD(learning_rate=0.01), weighted_metrics=['accuracy', ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ClassificationKeras_8py_source.html:95,Guid,Guide,95,doc/master/ClassificationKeras_8py_source.html,https://root.cern,https://root.cern/doc/master/ClassificationKeras_8py_source.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/tmva001_RTensor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva001_RTensor.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ; The class serves as an interface in C++ between multi-dimensional data and the algorithm such as in machine learning workflows. The interface is similar to Numpy arrays and provides a subset of the functionality.; ; using namespace TMVA::Experimental;; ; void tmva001_RTensor(); {; // Create RTensor from scratch; RTensor<float> x({2, 2});; cout << x << endl;; ; // Assign some data; x(0, 0) = 1;; x(0, 1) = 2;; x(1, 0) = 3;; x(1, 1) = 4;; ; // Apply transformations; auto x2 = x.Reshape({1, 4}).Squeeze();; cout << x2 << endl;; ; // Slice; auto x3 = x.Reshape({2, 2}).Slice({{0, 2}, {0, 1}});; cout << x3 << endl;; ; // Create tensor as view on data without ownership; float data[] = {5, 6, 7, 8};; RTensor<float> y(data, {2, 2});; cout << y << endl;; ; // Create tensor as view on data with ownership; auto data2 = std::make_shared<std::vector<float>>(4);; float c = 9;; for (auto &v : *data2) {; v = c;; c++;; }; ; RTensor<float> z(data2, {2, 2});; cout << z << endl;; }; c#define c(i)Definition RSha256.hxx:101; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; TMVA::Experimental::RTensorRTensor is a container with contiguous memory and shape information.Definition RTensor.hxx:162; TMVA::Experimental::RTensor::ReshapeRTensor< Value_t, Container_t > Reshape(const Shape_t &shape) constReshape tensor.Definition RTensor.hxx:480; RooFit::SliceRooCmdArg Slice(const RooArgSet &sliceSet)Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva001__RTensor_8C.html:87,Guid,Guide,87,doc/master/tmva001__RTensor_8C.html,https://root.cern,https://root.cern/doc/master/tmva001__RTensor_8C.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,". ROOT: tutorials/tmva/tmva002_RDataFrameAsTensor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva002_RDataFrameAsTensor.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ; ; using namespace TMVA::Experimental;; ; void tmva002_RDataFrameAsTensor(); {; // Creation of an RDataFrame with five entries filled with ascending numbers; ROOT::RDataFrame df(5);; auto df2 = df.Define(""x"", ""1.f*rdfentry_"").Define(""y"", ""-1.f*rdfentry_"");; ; // Convert content of columns to an RTensor object; auto x = AsTensor<float>(df2);; ; std::cout << ""RTensor from an RDataFrame:\n"" << x << ""\n\n"";; ; // The utility also supports reading only a part of the RDataFrame and different; // memory layouts.; auto x2 = AsTensor<float>(df2, {""x""}, MemoryLayout::ColumnMajor);; ; std::cout << ""RTensor from a single column of the RDataFrame:\n"" << x2 << ""\n\n"";; }; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; xDouble_t x[n]Definition legend1.C:17; TMVA::ExperimentalDefinition RModelParser_Keras.h:40; ; RTensor from an RDataFrame:; { { 0, -0 } { 1, -1 } { 2, -2 } { 3, -3 } { 4, -4 } }; ; RTensor from a single column of the RDataFrame:; { { 0 } { 1 } { 2 } { 3 } { 4 } }; ; DateDecember 2018 ; AuthorStefan Wunsch ; Definition in file tmva002_RDataFrameAsTensor.C. tutorialstmvatmva002_RDataFrameAsTensor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva002__RDataFrameAsTensor_8C.html:98,Guid,Guide,98,doc/master/tmva002__RDataFrameAsTensor_8C.html,https://root.cern,https://root.cern/doc/master/tmva002__RDataFrameAsTensor_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/tmva003_RReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva003_RReader.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ; ; using namespace TMVA::Experimental;; ; void train(const std::string &filename); {; // Create factory; auto output = TFile::Open(""TMVARR.root"", ""RECREATE"");; auto factory = new TMVA::Factory(""tmva003"",; output, ""!V:!DrawProgressBar:AnalysisType=Classification"");; ; // Open trees with signal and background events; auto data = TFile::Open(filename.c_str());; auto signal = (TTree *)data->Get(""TreeS"");; auto background = (TTree *)data->Get(""TreeB"");; ; // Add variables and register the trees with the dataloader; auto dataloader = new TMVA::DataLoader(""tmva003_BDT"");; const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4""};; for (const auto &var : variables) {; dataloader->AddVariable(var);; }; dataloader->AddSignalTree(signal, 1.0);; dataloader->AddBackgroundTree(background, 1.0);; dataloader->PrepareTrainingAndTestTree("""", """");; ; // Train a TMVA method; factory->BookMethod(dataloader, TMVA::Types::kBDT, ""BDT"", ""!V:!H:NTrees=300:MaxDepth=2"");; factory->TrainAllMethods();; }; ; void tmva003_RReader(); {; // First, let's train a model with TMVA.; const std::string filename = ""http://root.cern/files/tmva_class_example.root"";; train(filename);; ; // Next, we load the model from the TMVA XML file.; RReader model(""tmva003_BDT/weights/tmva003_BDT.weights.xml"");; ; // In case you need a reminder of the names and order of the variables during; // training, you can ask the model for it.; auto variables = model.GetVariableNames();; ; // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Inference as part of an RDataFrame graph; ; // 1) Event-by-event inference; /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva003__RReader_8C.html:87,Guid,Guide,87,doc/master/tmva003__RReader_8C.html,https://root.cern,https://root.cern/doc/master/tmva003__RReader_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/tmva004_RStandardScaler.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva004_RStandardScaler.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates the usage of the standard scaler as preprocessing method. ; ; using namespace TMVA::Experimental;; ; void tmva004_RStandardScaler(); {; // Load data used to fit the parameters; ROOT::RDataFrame df(""TreeS"", ""http://root.cern/files/tmva_class_example.root"");; auto x = AsTensor<float>(df);; ; // Create standard scaler and fit to data; RStandardScaler<float> scaler;; scaler.Fit(x);; ; // Compute transformation; auto y = scaler.Compute(x);; ; // Plot first variable scaled and unscaled; TH1F h1(""h1"", "";x_{4};N_{Events}"", 20, -4, 4);; TH1F h2(""h2"", "";x_{4};N_{Events}"", 20, -4, 4);; for (std::size_t i = 0; i < x.GetShape()[0]; i++) {; h1.Fill(x(i, 3));; h2.Fill(y(i, 3));; }; h1.SetLineWidth(2);; h1.SetLineColor(kRed);; h2.SetLineWidth(2);; h2.SetLineColor(kBlue);; ; gStyle->SetOptStat(0);; auto c = new TCanvas("""", """", 800, 800);; h2.Draw(""HIST"");; h1.Draw(""HIST SAME"");; ; TLegend legend(0.7, 0.7, 0.89, 0.89);; legend.SetBorderSize(0);; legend.AddEntry(""h1"", ""Unscaled"", ""l"");; legend.AddEntry(""h2"", ""Scaled"", ""l"");; legend.Draw();; ; c->DrawClone();; }; c#define c(i)Definition RSha256.hxx:101; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva004__RStandardScaler_8C.html:95,Guid,Guide,95,doc/master/tmva004__RStandardScaler_8C.html,https://root.cern,https://root.cern/doc/master/tmva004__RStandardScaler_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tmva/tmva100_DataPreparation.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; tmva100_DataPreparation.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ; This requires filtering the initial complex datasets and writing the data in a flat format.; ; import ROOT; ; ; def filter_events(df):; """"""; Reduce initial dataset to only events which shall be used for training; """"""; return df.Filter(""nElectron>=2 && nMuon>=2"", ""At least two electrons and two muons""); ; ; def define_variables(df):; """"""; Define the variables which shall be used for training; """"""; return df.Define(""Muon_pt_1"", ""Muon_pt[0]"")\; .Define(""Muon_pt_2"", ""Muon_pt[1]"")\; .Define(""Electron_pt_1"", ""Electron_pt[0]"")\; .Define(""Electron_pt_2"", ""Electron_pt[1]""); ; ; variables = [""Muon_pt_1"", ""Muon_pt_2"", ""Electron_pt_1"", ""Electron_pt_2""]; ; ; if __name__ == ""__main__"":; for filename, label in [[""SMHiggsToZZTo4L.root"", ""signal""], [""ZZTo2e2mu.root"", ""background""]]:; print("">>> Extract the training and testing events for {} from the {} dataset."".format(; label, filename)); ; # Load dataset, filter the required events and define the training variables; filepath = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/"" + filename; df = ROOT.RDataFrame(""Events"", filepath); df = filter_events(df); df = define_variables(df); ; # Book cutflow report; report = df.Report(); ; # Split dataset by event number for training and testing; columns = ROOT.std.vector[""string""](variables); df.Filter(""event % 2 == 0"", ""Select events with even event number for training"")\; .Snapshot(""Events"", ""train_"" + label + "".root"", columns); df.Filter(""event % 2 == 1"", ""Select events with odd event number for training"")\; .Snapshot(""Events"", ""test_"" + label + "".root"", columns); ; # Print cutflow report; report.Print(); formatOpti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva100__DataPreparation_8py.html:96,Guid,Guide,96,doc/master/tmva100__DataPreparation_8py.html,https://root.cern,https://root.cern/doc/master/tmva100__DataPreparation_8py.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,". ROOT: tutorials/tmva/tmva101_Training.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; tmva101_Training.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ; Using XGBoost, we illustrate how you can convert an externally trained model in a format serializable and readable with the fast tree inference engine offered by TMVA.; ; # XGBoost has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227; from xgboost import XGBClassifier; ; import ROOT; import numpy as np; ; from tmva100_DataPreparation import variables; ; ; def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(); ; # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]); ; # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]); ; # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]); ; return x, y, w; ; if __name__ == ""__main__"":; # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""); ; # Fit xgboost model; bdt = XGBClassifier(max_depth=3, n_estimators=500); bdt.fit(x, y, sample_weight=w); ; # Save model in TMVA format; print(""Training done on "",x.shape[0],""events. Saving model in tmva101.root""); ROOT.TMVA.Experimental.SaveXGBoost(bdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1])",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva101__Training_8py.html:89,Guid,Guide,89,doc/master/tmva101__Training_8py.html,https://root.cern,https://root.cern/doc/master/tmva101__Training_8py.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,". ROOT: tutorials/tmva/tmva101_Training.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva101_Training.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_tmva; 3## \notebook -nodraw; 4## This tutorial show how you can train a machine learning model with any package; 5## reading the training data directly from ROOT files. Using XGBoost, we illustrate; 6## how you can convert an externally trained model in a format serializable and readable; 7## with the fast tree inference engine offered by TMVA.; 8##; 9## \macro_code; 10## \macro_output; 11##; 12## \date August 2019; 13## \author Stefan Wunsch; 14 ; 15# XGBoost has to be imported before ROOT to avoid crashes because of clashing; 16# std::regexp symbols that are exported by cppyy.; 17# See also: https://github.com/wlav/cppyy/issues/227; 18from xgboost import XGBClassifier; 19 ; 20import ROOT; 21import numpy as np; 22 ; 23from tmva100_DataPreparation import variables; 24 ; 25 ; 26def load_data(signal_filename, background_filename):; 27 # Read data from ROOT files; 28 data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); 29 data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(); 30 ; 31 # Convert inputs to format readable by machine learning tools; 32 x_sig = np.vstack([data_sig[var] for var in variables]).T; 33 x_bkg = np.vstack([data_bkg[var] for var in variables]).T; 34 x = np.vstack([x_sig, x_bkg]); 35 ; 36 # Create labels; 37 num_sig = x_sig.shape[0]; 38 num_bkg = x_bkg.shape[0]; 39 y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]); 40 ; 41 # Compute weights balancing both classes; 42 num_all = num_sig + num_bkg; 43 w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]); 44 ; 45 return x, y, w; 46 ; 47if __name__ == ""__main__"":; 48 # Load data; 49 x, y, w = load_data(""train_signal.root"", ""train_background.root""); 50 ; 51 # Fit xgboost model; 52 bdt = XGBClassifier(max_depth=3, n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva101__Training_8py_source.html:86,Guid,Guide,86,doc/master/tmva101__Training_8py_source.html,https://root.cern,https://root.cern/doc/master/tmva101__Training_8py_source.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,". ROOT: tutorials/tmva/tmva102_Testing.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; tmva102_Testing.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ; ; import ROOT; import pickle; ; from tmva100_DataPreparation import variables; from tmva101_Training import load_data; ; ; # Load data; x, y_true, w = load_data(""test_signal.root"", ""test_background.root""); ; # Load trained model; File = ""tmva101.root""; if (ROOT.gSystem.AccessPathName(File)) :; ROOT.Info(""tmva102_Testing.py"", File+""does not exist""); exit(); ; bdt = ROOT.TMVA.Experimental.RBDT(""myBDT"", File); ; # Make prediction; y_pred = bdt.Compute(x); ; # Compute ROC using sklearn; from sklearn.metrics import roc_curve, auc; false_positive_rate, true_positive_rate, _ = roc_curve(y_true, y_pred, sample_weight=w); score = auc(false_positive_rate, true_positive_rate); ; # Plot ROC; c = ROOT.TCanvas(""roc"", """", 600, 600); g = ROOT.TGraph(len(false_positive_rate), false_positive_rate, true_positive_rate); g.SetTitle(""AUC = {:.2f}"".format(score)); g.SetLineWidth(3); g.SetLineColor(ROOT.kRed); g.Draw(""AC""); g.GetXaxis().SetRangeUser(0, 1); g.GetYaxis().SetRangeUser(0, 1); g.GetXaxis().SetTitle(""False-positive rate""); g.GetYaxis().SetTitle(""True-positive rate""); c.Draw(); lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva102__Testing_8py.html:88,Guid,Guide,88,doc/master/tmva102__Testing_8py.html,https://root.cern,https://root.cern/doc/master/tmva102__Testing_8py.html,2,"['Guid', 'learn']","['Guide', 'learn']"
Usability,". ROOT: tutorials/tmva/tmva103_Application.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva103_Application.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ; Supported workflows are event-by-event inference, batch inference and pipelines with RDataFrame.; ; using namespace TMVA::Experimental;; ; void tmva103_Application(); {; const char* model_filename = ""tmva101.root"";; ; if (gSystem->AccessPathName(model_filename)) {; Info(""tmva103_Application.C"", ""%s does not exist"", model_filename);; return;; }; ; // Load BDT model; RBDT bdt(""myBDT"", model_filename);; ; // Apply model on a single input; auto y1 = bdt.Compute({1.0, 2.0, 3.0, 4.0});; ; std::cout << ""Apply model on a single input vector: "" << y1[0] << std::endl;; ; // Apply model on a batch of inputs; float data[8] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};; RTensor<float> x(data, {2, 4});; auto y2 = bdt.Compute(x);; ; std::cout << ""Apply model on an input tensor: "" << y2 << std::endl;; ; // Apply model as part of an RDataFrame workflow; ROOT::RDataFrame df(""Events"", ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/SMHiggsToZZTo4L.root"");; auto df2 = df.Filter(""nMuon >= 2""); .Filter(""nElectron >= 2""); .Define(""Muon_pt_1"", ""Muon_pt[0]""); .Define(""Muon_pt_2"", ""Muon_pt[1]""); .Define(""Electron_pt_1"", ""Electron_pt[0]""); .Define(""Electron_pt_2"", ""Electron_pt[1]""); .Define(""y"",; Compute<4, float>(bdt),; {""Muon_pt_1"", ""Muon_pt_2"", ""Electron_pt_1"", ""Electron_pt_2""});; ; std::cout << ""Mean response on the signal sample: "" << *df2.Mean(""y"") << std::endl;; }; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva103__Application_8C.html:91,Guid,Guide,91,doc/master/tmva103__Application_8C.html,https://root.cern,https://root.cern/doc/master/tmva103__Application_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree Directory Reference. Directory dependency graph for tree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  dictionary;  . Files;  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ;  basic2.C;   Create can ntuple reading data from an ascii file. ;  ;  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ;  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ;  cernstaff.C;   Playing with a Tree containing variables of type character ;  ;  circular.C;   Example of a circular Tree ;  ;  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ;  clonesA_Event.cxx;  ;  clonesA_Event.h;  ;  copytree.C;   Copy a subset of a Tree to a new Tree ;  ;  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ;  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ;  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html:74,Guid,Guide,74,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/basic.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. basic.C File ReferenceTutorials » Tree tutorials. Detailed Description; Read data from an ascii file and create a root file with an histogram and an ntuple. ; See a variant of this macro in basic2.C.; ; #include ""Riostream.h""; void basic() {; // read file $ROOTSYS/tutorials/tree/basic.dat; // this file has 3 columns of float data; TString dir = gROOT->GetTutorialDir();; dir.Append(""/tree/"");; dir.ReplaceAll(""/./"",""/"");; ifstream in;; in.open(Form(""%sbasic.dat"",dir.Data()));; ; Float_t x,y,z;; Int_t nlines = 0;; auto f = TFile::Open(""basic.root"",""RECREATE"");; TH1F h1(""h1"",""x distribution"",100,-4,4);; TNtuple ntuple(""ntuple"",""data from ascii file"",""x:y:z"");; ; while (1) {; in >> x >> y >> z;; if (!in.good()) break;; if (nlines < 5) printf(""x=%8f, y=%8f, z=%8f\n"",x,y,z);; h1.Fill(x);; ntuple.Fill(x,y,z);; nlines++;; }; printf("" found %d points\n"",nlines);; ; in.close();; ; f->Write();; }; f#define f(i)Definition RSha256.hxx:104; Riostream.h; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gROOT#define gROOTDefinition TROOT.h:406; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/basic_8C.html:77,Guid,Guide,77,doc/master/basic_8C.html,https://root.cern,https://root.cern/doc/master/basic_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/basic2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. basic2.C File ReferenceTutorials » Tree tutorials. Detailed Description; Create can ntuple reading data from an ascii file. ; This macro is a variant of basic.C. ; void basic2() {; TString dir = gROOT->GetTutorialDir();; dir.Append(""/tree/"");; dir.ReplaceAll(""/./"",""/"");; ; TFile *f = new TFile(""basic2.root"",""RECREATE"");; TH1F *h1 = new TH1F(""h1"",""x distribution"",100,-4,4);; TTree *T = new TTree(""ntuple"",""data from ascii file"");; Long64_t nlines = T->ReadFile(Form(""%sbasic.dat"",dir.Data()),""x:y:z"");; printf("" found %lld points\n"",nlines);; T->Draw(""x"",""z>2"");; T->Write();; }; f#define f(i)Definition RSha256.hxx:104; Long64_tlong long Long64_tDefinition RtypesCore.h:69; gROOT#define gROOTDefinition TROOT.h:406; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; h1TH1F * h1Definition legend1.C:5; AuthorRene Brun ; Definition in file basic2.C. tutorialstreebasic2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/basic2_8C.html:78,Guid,Guide,78,doc/master/basic2_8C.html,https://root.cern,https://root.cern/doc/master/basic2_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/bill.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. bill.C File ReferenceTutorials » Tree tutorials. Detailed Description; Benchmark comparing row-wise and column-wise storage performance ; The test consists in writing/reading to/from keys or trees To execute the benchmark: root -b -q bill.C or root -b -q bill.C++; b#define b(i)Definition RSha256.hxx:100; qfloat * qDefinition THbookFile.cxx:89; for example for N=10000, the following output is produced on an 2.7 GHz Intel Core i7 (year 2011). The names featuring a ""t"" are relative to trees, the faster, the better. billw0 : RT= 0.803 s, Cpu= 0.800 s, File size= 45608143 bytes, CX= 1; billr0 : RT= 0.388 s, Cpu= 0.390 s; billtw0 : RT= 0.336 s, Cpu= 0.310 s, File size= 45266881 bytes, CX= 1.00034; billtr0 : RT= 0.229 s, Cpu= 0.230 s; billw1 : RT= 1.671 s, Cpu= 1.670 s, File size= 16760526 bytes, CX= 2.72078; billr1 : RT= 0.667 s, Cpu= 0.680 s; billtw1 : RT= 0.775 s, Cpu= 0.770 s, File size= 9540884 bytes, CX= 4.74501; billtr1 : RT= 0.352 s, Cpu= 0.350 s; billtot : RT= 5.384 s, Cpu= 5.290 s; ******************************************************************; * ROOTMARKS =1763.9 * Root6.05/03 20150914/948; ******************************************************************; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/bill_8C.html:76,Guid,Guide,76,doc/master/bill_8C.html,https://root.cern,https://root.cern/doc/master/bill_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/cernbuild.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cernbuild.C File ReferenceTutorials » Tree tutorials. Detailed Description; Read data (CERN staff) from an ascii file and create a root file with a Tree. ; ; TFile *cernbuild(Int_t getFile=0, Int_t print=1) {; ; Int_t Category;; UInt_t Flag;; Int_t Age;; Int_t Service;; Int_t Children;; Int_t Grade;; Int_t Step;; Int_t Hrweek;; Int_t Cost;; Char_t Division[4];; Char_t Nation[3];; ; //The input file cern.dat is a copy of the CERN staff data base; //from 1988; TString filename = ""cernstaff.root"";; TString dir = gROOT->GetTutorialDir();; dir.Append(""/tree/"");; dir.ReplaceAll(""/./"",""/"");; FILE *fp = fopen(Form(""%scernstaff.dat"",dir.Data()),""r"");; ; TFile *hfile = 0;; if (getFile) {; // if the argument getFile =1 return the file ""cernstaff.root""; // if the file does not exist, it is created; if (!gSystem->AccessPathName(dir+""cernstaff.root"",kFileExists)) {; hfile = TFile::Open(dir+""cernstaff.root""); //in $ROOTSYS/tutorials/tree; if (hfile) return hfile;; }; //otherwise try $PWD/cernstaff.root; if (!gSystem->AccessPathName(""cernstaff.root"",kFileExists)) {; hfile = TFile::Open(""cernstaff.root""); //in current dir; if (hfile) return hfile;; }; }; //no cernstaff.root file found. Must generate it !; //generate cernstaff.root in $ROOTSYS/tutorials/tree if we have write access; if (gSystem->AccessPathName(""."",kWritePermission)) {; printf(""you must run the script in a directory with write access\n"");; return 0;; }; hfile = TFile::Open(filename,""RECREATE"");; TTree *tree = new TTree(""T"",""CERN 1988 staff data"");; tree->Branch(""Category"",&Category,""Category/I"");; tree->Branch(""Flag"",&Flag,""Flag/i"");; tree->Branch(""Age"",&Age,""Age/I"");; tree->Branch(""Service"",&Service,""Service/I"");; tree->Branch(""Children"",&Children,""Children/I"");; tree->Branch(""Grade"",&Grade,""Grade/I"");; tree->Branch(""Step"",&Step,""Step/I"");; tree->Branch(""Hrweek"",&Hrweek,""Hrweek/I"");; tree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/cernbuild_8C.html:81,Guid,Guide,81,doc/master/cernbuild_8C.html,https://root.cern,https://root.cern/doc/master/cernbuild_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/cernstaff.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cernstaff.C File ReferenceTutorials » Tree tutorials. Detailed Description; Playing with a Tree containing variables of type character . ; void cernstaff () {; TString dir = gROOT->GetTutorialDir();; dir.Append(""/tree/cernstaff.C"");; if (gSystem->AccessPathName(""cernstaff.root"")) {; gROOT->SetMacroPath(dir);; gROOT->ProcessLine("".x cernbuild.C"");; }; TFile *f = new TFile(""cernstaff.root"");; TTree *T = (TTree*)f->Get(""T"");; TCanvas *c1 = new TCanvas(""c1"",""CERN staff"",10,10,1000,750);; c1->Divide(2,2);; // make table of number of people per Nation & Division; c1->cd(1); gPad->SetGrid();; T->Draw(""Nation:Division>>hN"","""",""text"");; TH2F *hN = (TH2F*)gDirectory->Get(""hN"");; hN->SetMarkerSize(1.6);; hN->SetStats(0);; ; //make profile of Average cost per Nation; c1->cd(2); gPad->SetGrid();; gPad->SetLeftMargin(0.12);; T->Draw(""Cost:Nation>>hNation"","""",""prof,goff"");; TH1F *hNation = (TH1F*)gDirectory->Get(""hNation"");; hNation->SetTitle(""Average Cost per Nation"");; hNation->LabelsOption("">""); //sort by decreasing bin contents; hNation->SetMaximum(13000);; hNation->SetMinimum(7000);; hNation->SetStats(0);; hNation->SetMarkerStyle(21);; hNation->Draw();; ; //make stacked plot of Nations versus Grade; c1->cd(3); gPad->SetGrid();; THStack *hGrades = new THStack(""hGrades"",""Nations versus Grade"");; TH1F *hFR = new TH1F(""hFR"",""FR"",12,3,15);; hFR->SetFillColor(kCyan);; hGrades->Add(hFR);; T->Draw(""Grade>>hFR"",""Nation==\""FR\"""");; TH1F *hCH = new TH1F(""hCH"",""CH"",12,3,15);; hCH->SetFillColor(kRed);; hGrades->Add(hCH);; T->Draw(""Grade>>hCH"",""Nation==\""CH\"""");; TH1F *hIT = new TH1F(""hIT"",""IT"",12,3,15);; hIT->SetFillColor(kGreen);; hGrades->Add(hIT);; T->Draw(""Grade>>hIT"",""Nation==\""IT\"""");; TH1F *hDE = new TH1F(""hDE"",""DE"",12,3,15);; hDE->SetFillColor(kYellow);; hGrades->Add(hDE);; T->Draw(""Grade>>hDE"",""Nation==\""DE\"""");; TH1F *hGB = new TH1F(""hGB"",""GB"",12,3,1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/cernstaff_8C.html:81,Guid,Guide,81,doc/master/cernstaff_8C.html,https://root.cern,https://root.cern/doc/master/cernstaff_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/cernstaff.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cernstaff.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tree; 3/// \notebook; 4/// Playing with a Tree containing variables of type character; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void cernstaff () {; 12 TString dir = gROOT->GetTutorialDir();; 13 dir.Append(""/tree/cernstaff.C"");; 14 if (gSystem->AccessPathName(""cernstaff.root"")) {; 15 gROOT->SetMacroPath(dir);; 16 gROOT->ProcessLine("".x cernbuild.C"");; 17 }; 18 TFile *f = new TFile(""cernstaff.root"");; 19 TTree *T = (TTree*)f->Get(""T"");; 20 TCanvas *c1 = new TCanvas(""c1"",""CERN staff"",10,10,1000,750);; 21 c1->Divide(2,2);; 22 // make table of number of people per Nation & Division; 23 c1->cd(1); gPad->SetGrid();; 24 T->Draw(""Nation:Division>>hN"","""",""text"");; 25 TH2F *hN = (TH2F*)gDirectory->Get(""hN"");; 26 hN->SetMarkerSize(1.6);; 27 hN->SetStats(0);; 28 ; 29 //make profile of Average cost per Nation; 30 c1->cd(2); gPad->SetGrid();; 31 gPad->SetLeftMargin(0.12);; 32 T->Draw(""Cost:Nation>>hNation"","""",""prof,goff"");; 33 TH1F *hNation = (TH1F*)gDirectory->Get(""hNation"");; 34 hNation->SetTitle(""Average Cost per Nation"");; 35 hNation->LabelsOption("">""); //sort by decreasing bin contents; 36 hNation->SetMaximum(13000);; 37 hNation->SetMinimum(7000);; 38 hNation->SetStats(0);; 39 hNation->SetMarkerStyle(21);; 40 hNation->Draw();; 41 ; 42 //make stacked plot of Nations versus Grade; 43 c1->cd(3); gPad->SetGrid();; 44 THStack *hGrades = new THStack(""hGrades"",""Nations versus Grade"");; 45 TH1F *hFR = new TH1F(""hFR"",""FR"",12,3,15);; 46 hFR->SetFillColor(kCyan);; 47 hGrades->Add(hFR);; 48 T->Draw(""Grade>>hFR"",""Nation==\""FR\"""");; 49 TH1F *hCH = new TH1F(""hCH"",""CH"",12,3,15);; 50 hCH->SetFillColor(kRed);; 51 hGrades->Add(hCH);; 52 T->Draw(""Grade>>hCH"",""Nation==\""CH\"""");; 53 TH1F *hIT = new TH1F(""hIT"",""IT"",12,3,15);; 54 hIT->SetFillColor(kG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/cernstaff_8C_source.html:78,Guid,Guide,78,doc/master/cernstaff_8C_source.html,https://root.cern,https://root.cern/doc/master/cernstaff_8C_source.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/circular.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. circular.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of a circular Tree ; Circular Trees are interesting in online real time environments to store the results of the last maxEntries events. for more info, see TTree::SetCircular. Circular trees must be memory resident.; ; void circular() {; auto T = new TTree(""T"",""test circular buffers"");; TRandom r;; Float_t px,py,pz;; Double_t randomNum;; UShort_t i;; T->Branch(""px"",&px,""px/F"");; T->Branch(""py"",&py,""px/F"");; T->Branch(""pz"",&pz,""px/F"");; T->Branch(""random"",&randomNum,""random/D"");; T->Branch(""i"",&i,""i/s"");; T->SetCircular(20000); //keep a maximum of 20000 entries in memory; for (i = 0; i < 65000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; randomNum = r.Rndm();; T->Fill();; }; T->Print();; }; ; UShort_tunsigned short UShort_tDefinition RtypesCore.h:40; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; AuthorRene Brun ; Definition in file circular.C. tutorialstreecircular.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/circular_8C.html:80,Guid,Guide,80,doc/master/circular_8C.html,https://root.cern,https://root.cern/doc/master/circular_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/clonesA_Event.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. clonesA_Event.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example to write & read a Tree built with a complex class inheritance tree. ; It demonstrates usage of inheritance and TClonesArrays This is simplified / stripped extract of an event structure which was used within the Marabou project.; To run this example, do: root > .x clonesA_Event.C; ; #ifndef CLONESA_EVENT_SECOND_RUN; ; void clonesA_Event() {; std::string s1(__FILE__);; TString dir = gSystem->UnixPathName(s1.substr(0, s1.find_last_of(""\\/"")).c_str());; gROOT->ProcessLine(TString("".L "")+dir+""/clonesA_Event.cxx+"");; #define CLONESA_EVENT_SECOND_RUN yes; gROOT->ProcessLine(""#include \"""" __FILE__ ""\"""");; gROOT->ProcessLine(""clonesA_Event(true)"");; }; ; #else; ; void clonesA_Event_w(); {; // protect against old ROOT versions; if ( gROOT->GetVersionInt() < 30503 ) {; cout << ""Works only with ROOT version >= 3.05/03"" << endl;; return;; }; if ( gROOT->GetVersionDate() < 20030406 ) {; cout << ""Works only with ROOT CVS version after 5. 4. 2003"" << endl;; return;; }; ; //write a Tree; TFile *hfile = new TFile(""clonesA_Event.root"",""RECREATE"",""Test TClonesArray"");; TTree *tree = new TTree(""clonesA_Event"",""An example of a ROOT tree"");; TUsrSevtData1 *event1 = new TUsrSevtData1();; TUsrSevtData2 *event2 = new TUsrSevtData2();; tree->Branch(""top1"",""TUsrSevtData1"",&event1,8000,99);; tree->Branch(""top2"",""TUsrSevtData2"",&event2,8000,99);; for (Int_t ev = 0; ev < 10; ev++) {; cout << ""event "" << ev << endl;; event1->SetEvent(ev);; event2->SetEvent(ev);; tree->Fill();; if (ev <3) tree->Show(ev);; }; tree->Write();; tree->Print();; delete hfile;; }; ; void clonesA_Event_r(); {; //read the Tree; TFile * hfile = new TFile(""clonesA_Event.root"");; TTree *tree = (TTree*)hfile->Get(""clonesA_Event"");; ; TUsrSevtData1 * event1 = 0;; TUsrSevtData2 * event2 = 0;; tree->SetBranchAdd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/clonesA__Event_8C.html:85,Guid,Guide,85,doc/master/clonesA__Event_8C.html,https://root.cern,https://root.cern/doc/master/clonesA__Event_8C.html,2,"['Guid', 'simpl']","['Guide', 'simplified']"
Usability,". ROOT: tutorials/tree/copytree.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree.C File ReferenceTutorials » Tree tutorials. Detailed Description; Copy a subset of a Tree to a new Tree ; The input file has been generated by the program in $ROOTSYS/test/Event with Event 1000 1 1 1.; ; // Load the library at macro parsing time: we need this to use its content in the code; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree(); {; ; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; // Deactivate all branches; oldtree->SetBranchStatus(""*"", 0);; ; // Activate only four of them; for (auto activeBranchName : {""event"", ""fNtrack"", ""fNseg"", ""fH""}); oldtree->SetBranchStatus(activeBranchName, 1);; ; // Create a new file + a clone of old tree in new file; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree();; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TFileA ROOT file is an on-disk file, usually with extension ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree_8C.html:80,Guid,Guide,80,doc/master/copytree_8C.html,https://root.cern,https://root.cern/doc/master/copytree_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/copytree2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree2.C File ReferenceTutorials » Tree tutorials. Detailed Description; Copy a subset of a Tree to a new Tree, one branch in a separate file. ; One branch of the new Tree is written to a separate file The input file has been generated by the program in $ROOTSYS/test/Event with the command Event 1000 1 1 1; ; // Load the library at macro parsing time: we need this to use its content in the code; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree2(); {; ; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; // Activate only four of them; for (auto activeBranchName : {""event"", ""fNtrack"", ""fNseg"", ""fH""}) {; oldtree->SetBranchStatus(activeBranchName, 1);; }; ; // Create a new file + a clone of old tree header. Do not copy events; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree(0);; ; // Divert branch fH to a separate file and copy all events; newtree->GetBranch(""fH"")->SetFile(""small_fH.root"");; newtree->CopyEntries(oldtree);; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree2_8C.html:81,Guid,Guide,81,doc/master/copytree2_8C.html,https://root.cern,https://root.cern/doc/master/copytree2_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/copytree3.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree3.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ; Only selected entries are copied to the new Tree. The input file has been generated by the program in $ROOTSYS/test/Event with Event 1000 1 99 1; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree3(); {; // Get old file, old tree and set top branch address; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; const auto nentries = oldtree->GetEntries();; ; Event *event = nullptr;; oldtree->SetBranchAddress(""event"", &event);; ; // Create a new file + a clone of old tree in new file; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree(0);; ; for (auto i : ROOT::TSeqI(nentries)) {; oldtree->GetEntry(i);; if (event->GetNtrack() > 605); newtree->Fill();; event->Clear();; }; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; nentriesint nent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree3_8C.html:81,Guid,Guide,81,doc/master/copytree3_8C.html,https://root.cern,https://root.cern/doc/master/copytree3_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/drawsparse.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. drawsparse.C File ReferenceTutorials » Tree tutorials. Detailed Description; Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ; The plot will contain one line for each filled bin, with the bin's coordinates on each axis, and the bin's content on the rightmost axis.; Run as .L $ROOTSYS/tutorials/tree/drawsparse.C+. ; ; ; #include ""TParallelCoord.h""; #include ""TParallelCoordVar.h""; #include ""TROOT.h""; #include ""TTree.h""; #include ""TLeaf.h""; #include ""THnSparse.h""; #include ""TAxis.h""; #include ""TCanvas.h""; #include ""TRandom.h""; #include ""TFile.h""; #include ""TH3.h""; ; TTree* toTree(THnSparse* h); {; // Creates a TTree and fills it with the coordinates of all; // filled bins. The tree will have one branch for each dimension,; // and one for the bin content.; ; Int_t dim = h->GetNdimensions();; TString name(h->GetName()); name += ""_tree"";; TString title(h->GetTitle()); title += "" tree"";; ; TTree* tree = new TTree(name, title);; Double_t* x = new Double_t[dim + 1];; memset(x, 0, sizeof(Double_t) * (dim + 1));; ; TString branchname;; for (Int_t d = 0; d < dim; ++d) {; if (branchname.Length()); branchname += "":"";; TAxis* axis = h->GetAxis(d);; branchname += axis->GetName();; branchname += ""/D"";; }; tree->Branch(""coord"", x, branchname);; tree->Branch(""bincontent"", &x[dim], ""bincontent/D"");; ; Int_t *bins = new Int_t[dim];; for (Long64_t i = 0; i < h->GetNbins(); ++i) {; x[dim] = h->GetBinContent(i, bins);; for (Int_t d = 0; d < dim; ++d) {; x[d] = h->GetAxis(d)->GetBinCenter(bins[d]);; }; ; tree->Fill();; }; ; delete [] bins;; //delete [] x;; return tree;; }; ; ; void drawsparse_draw(THnSparse* h); {; // Draw a THnSparse using TParallelCoord, creating a temporary TTree.; ; TTree* tree = toTree(h);; ; TString whatToDraw;; TIter iLeaf(tree->GetListOfLeaves());; const TLeaf* le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/drawsparse_8C.html:82,Guid,Guide,82,doc/master/drawsparse_8C.html,https://root.cern,https://root.cern/doc/master/drawsparse_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/h1analysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysis.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42"" The class definition in h1analysis.h has been generated automatically by the Root utility TTree::MakeSelector using one of the files with the following statement:; h42->MakeSelector(""h1analysis"");; This produces two files: h1analysis.h and h1analysis.C (skeleton of this f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysis_8C.html:82,Guid,Guide,82,doc/master/h1analysis_8C.html,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/h1analysisProxy.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data using code generated by MakeProxy. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42""; h1analysProxy.C can be used either via TTree::Draw: h42->Draw(""h1analysisProxy.C"");; or it can be used directly with TTree::MakeProxy, for example to generate a shared library. TTree::MakeProxy will generate a TSelector skeleto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisProxy_8C.html:87,Guid,Guide,87,doc/master/h1analysisProxy_8C.html,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/h1analysisProxy.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; h1analysisProxy.h File Reference. #include ""TH2.h""; #include ""TF1.h""; #include ""TStyle.h""; #include ""TCanvas.h""; #include ""TLine.h""; #include ""TEntryList.h""; #include ""TPaveStats.h""; #include ""TMath.h"". Include dependency graph for h1analysisProxy.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; Double_t fdm2 (Double_t *xx, Double_t *par);  ; Double_t fdm5 (Double_t *xx, Double_t *par);  . Variables; const Double_t dxbin = (0.17-0.13)/40;  ; const Double_t sigma = 0.0012;  . Function Documentation. ◆ fdm2(). Double_t fdm2 ; (; Double_t * ; xx, . Double_t * ; par . ). Definition at line 25 of file h1analysisProxy.h. ◆ fdm5(). Double_t fdm5 ; (; Double_t * ; xx, . Double_t * ; par . ). Definition at line 14 of file h1analysisProxy.h. Variable Documentation. ◆ dxbin. const Double_t dxbin = (0.17-0.13)/40. Definition at line 10 of file h1analysisProxy.h. ◆ sigma. const Double_t sigma = 0.0012. Definition at line 11 of file h1analysisProxy.h. tutorialstreeh1analysisProxy.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisProxy_8h.html:87,Guid,Guide,87,doc/master/h1analysisProxy_8h.html,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/h1analysisProxy.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.h. Go to the documentation of this file. 1#include ""TH2.h""; 2#include ""TF1.h""; 3#include ""TStyle.h""; 4#include ""TCanvas.h""; 5#include ""TLine.h""; 6#include ""TEntryList.h""; 7#include ""TPaveStats.h""; 8#include ""TMath.h""; 9 ; 10const Double_t dxbin = (0.17-0.13)/40; // Bin-width; 11const Double_t sigma = 0.0012;; 12 ; 13//_____________________________________________________________________; 14Double_t fdm5(Double_t *xx, Double_t *par); 15{; 16 Double_t x = xx[0];; 17 if (x <= 0.13957) return 0;; 18 Double_t xp3 = (x-par[3])*(x-par[3]);; 19 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); 20 + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; 21 return res;; 22}; 23 ; 24//_____________________________________________________________________; 25Double_t fdm2(Double_t *xx, Double_t *par); 26{; 27 Double_t x = xx[0];; 28 if (x <= 0.13957) return 0;; 29 Double_t xp3 = (x-0.1454)*(x-0.1454);; 30 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); 31 + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; 32 return res;; 33}; 34 ; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TEntryList.h; TF1.h; TH2.h; TLine.h; TMath.h; TPaveStats.h; TStyle.h; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; xDouble_t x[n]Definition legend1.C:17; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721. tutorialstreeh1analysisProxy.h. ROOT master - Reference Guide Generated on Tue No",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisProxy_8h_source.html:84,Guid,Guide,84,doc/master/h1analysisProxy_8h_source.html,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8h_source.html,1,['Guid'],['Guide']
Usability,. ROOT: tutorials/tree/h1analysisProxyCut.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; h1analysisProxyCut.C File Reference. Functions; Bool_t h1analysisProxyCut ();  . Function Documentation. ◆ h1analysisProxyCut(). Bool_t h1analysisProxyCut ; (; ). Definition at line 1 of file h1analysisProxyCut.C. tutorialstreeh1analysisProxyCut.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisProxyCut_8C.html:90,Guid,Guide,90,doc/master/h1analysisProxyCut_8C.html,https://root.cern,https://root.cern/doc/master/h1analysisProxyCut_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/h1analysisTreeReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisTreeReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ; ; #include ""h1analysisTreeReader.h""; #include ""TStyle.h""; #include ""TCanvas.h""; #include ""TPaveStats.h""; #include ""TLine.h""; #include ""TMath.h""; #include ""TFile.h""; #include ""TROOT.h""; ; ; const Double_t dxbin = (0.17-0.13)/40; // Bin-width; const Double_t sigma = 0.0012;; ; //_____________________________________________________________________; Double_t fdm5(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-par[3])*(x-par[3]);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; return res;; }; ; //_____________________________________________________________________; Double_t fdm2(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-0.1454)*(x-0.1454);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }; //_____________________________________________________________________; Bool_t h1analysisTreeReader::Process(Long64_t entry){; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; myTreeReader.SetLocalEntry(entry);; fProcessed++;; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; // Return as soon as a bad entry is detected; if (TMath::Abs(*fMd0_d-1.8646) >= 0.04) return kFALSE;; if (*fPtds_d <= 2.5) return kFALSE;; if (TMath::Abs(*fEtads_d) >= 1.5) return kFALSE;; (*fIk)--; //original fIk used f77 convention starting at 1; (*fIpi)--;; ; ; if (fNhitrp.At(*fIk)* fNhitrp.At(*fIpi) <= 1) return kFALSE;; ; ; if (fRend.At(*fIk) -fRs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisTreeReader_8C.html:92,Guid,Guide,92,doc/master/h1analysisTreeReader_8C.html,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/h1chain.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1chain.C File ReferenceTutorials » Tree tutorials. Detailed Description; Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ; ; TChain chain(""h42"");; ; void h1chain(const char *h1dir = 0); {; if (h1dir) {; gSystem->Setenv(""H1"",h1dir);; }; chain.SetCacheSize(20*1024*1024);; chain.Add(""$H1/dstarmb.root"");; chain.Add(""$H1/dstarp1a.root"");; chain.Add(""$H1/dstarp1b.root"");; chain.Add(""$H1/dstarp2.root"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; AuthorRene Brun ; Definition in file h1chain.C. tutorialstreeh1chain.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1chain_8C.html:79,Guid,Guide,79,doc/master/h1chain_8C.html,https://root.cern,https://root.cern/doc/master/h1chain_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/hsimpleProxy.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimpleProxy.C File ReferenceTutorials » Tree tutorials. Detailed Description; Used by hsimpleProxyDriver.C. ; To use this file, generate hsimple.root: root.exe -b -l -q hsimple.C; b#define b(i)Definition RSha256.hxx:100; qfloat * qDefinition THbookFile.cxx:89; hsimpleDefinition hsimple.py:1; lTLine lDefinition textangle.C:4; and do TFile *file = TFile::Open(""hsimple.root"");; TTree *ntuple ; file->GetObject(""ntuple"",ntuple);; ntuple->Draw(""hsimpleProxy.C+"");; TDirectory::GetObjectvoid GetObject(const char *namecycle, T *&ptr)Get an object with proper type checking.Definition TDirectory.h:212; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; ; double hsimpleProxy() {; return px;; }; AuthorRene Brun ; Definition in file hsimpleProxy.C. tutorialstreehsimpleProxy.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsimpleProxy_8C.html:84,Guid,Guide,84,doc/master/hsimpleProxy_8C.html,https://root.cern,https://root.cern/doc/master/hsimpleProxy_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/hsimpleProxyDriver.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimpleProxyDriver.C File ReferenceTutorials » Tree tutorials. Detailed Description; This is the driver of the hsimpleProxy example. ; It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory; ; void hsimpleProxyDriver(); {; std::cout << gSystem->WorkingDirectory() << std::endl;; TFile *file = TFile::Open(""hsimple.root"");; if (!file){; std::cerr << ""Input file not found.\n"";; return ;; }; TTree *ntuple = nullptr;; file->GetObject(""ntuple"",ntuple);; std::string s1(__FILE__);; TString dir = gSystem->UnixPathName(s1.substr(0, s1.find_last_of(""\\/"")).c_str());; ntuple->Draw(dir+""/hsimpleProxy.C+"");; }; s1#define s1(x)Definition RSha256.hxx:91; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TDirectory::GetObjectvoid GetObject(const char *namecycle, T *&ptr)Get an object with proper type checking.Definition TDirectory.h:212; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TStringBasic string class.Definition TString.h:139; TSystem::UnixPathNamevirtual const char * UnixPathName(const char *unixpathname)Convert from a local pathname to a Unix pathname.Definition TSystem.cxx:1063; TSystem::WorkingDirectoryvirtual const char * WorkingDirectory()Return working directory.Definition TSystem.cxx:871; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; AuthorRene Brun ; Definition in file hsimpleProxyDriver.C. tutorialstreehsimpleProxyDriver.C. ROOT master - Refere",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsimpleProxyDriver_8C.html:90,Guid,Guide,90,doc/master/hsimpleProxyDriver_8C.html,https://root.cern,https://root.cern/doc/master/hsimpleProxyDriver_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/hsimpleReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Refe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsimpleReader_8C.html:85,Guid,Guide,85,doc/master/hsimpleReader_8C.html,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html,2,"['Guid', 'simpl']","['Guide', 'simplest']"
Usability,". ROOT: tutorials/tree/htest.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. htest.C File ReferenceTutorials » Tree tutorials. Detailed Description; Save histograms in Tree branches ; To run this example, do root > .L htest.C; root > htw(); root > htr1(); root > htr2(); root > htr3(). ; void htw() {; // Create a Tree with a few branches of type histogram; // 25000 entries are filled in the Tree; // For each entry, the copy of 3 histograms is written; // The data base will contain 75000 histograms.; gBenchmark->Start(""hsimple"");; TFile f(""ht.root"",""recreate"");; auto T = new TTree(""T"",""test"");; auto hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; T->Branch(""hpx"",""TH1F"",&hpx,32000,0);; T->Branch(""hpxpy"",""TH2F"",&hpxpy,32000,0);; T->Branch(""hprof"",""TProfile"",&hprof,32000,0);; Float_t px, py, pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/htest_8C.html:77,Guid,Guide,77,doc/master/htest_8C.html,https://root.cern,https://root.cern/doc/master/htest_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/hvector.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hvector.C File ReferenceTutorials » Tree tutorials. Detailed Description; Write and read STL vectors in a tree. . ; #include <vector>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TCanvas.h""; #include ""TFrame.h""; #include ""TH1F.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; #include ""TSystem.h""; ; void write(); {; ; TFile *f = TFile::Open(""hvector.root"",""RECREATE"");; ; if (!f) { return; }; ; // Create one histograms; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; ; std::vector<float> vpx;; std::vector<float> vpy;; std::vector<float> vpz;; std::vector<float> vrand;; ; // Create a TTree; TTree *t = new TTree(""tvec"",""Tree with vectors"");; t->Branch(""vpx"",&vpx);; t->Branch(""vpy"",&vpy);; t->Branch(""vpz"",&vpz);; t->Branch(""vrand"",&vrand);; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; gRandom->SetSeed();; const Int_t kUPDATE = 1000;; for (Int_t i = 0; i < 25000; i++) {; Int_t npx = (Int_t)(gRandom->Rndm(1)*15);; ; vpx.clear();; vpy.clear();; vpz.clear();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hvector_8C.html:79,Guid,Guide,79,doc/master/hvector_8C.html,https://root.cern,https://root.cern/doc/master/hvector_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/jets.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. jets.C File ReferenceTutorials » Tree tutorials. Detailed Description; Usage of a Tree using the JetEvent class. ; The JetEvent class has several collections (TClonesArray) and other collections (TRefArray) referencing objects in the TClonesArrays. The JetEvent class is in $ROOTSYS/tutorials/tree/JetEvent.h,cxx to execute the script, do .x jets.C; jetsvoid jets()Definition jets.C:38; ; #ifdef JETS_SECOND_RUN; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TRandom.h""; #include ""TROOT.h""; #include ""TSystem.h""; #include ""JetEvent.h""; #include ""Riostream.h""; ; ; void write(Int_t nev=100) {; //write nev Jet events; TFile f(""JetEvent.root"",""recreate"");; TTree *T = new TTree(""T"",""Event example with Jets"");; JetEvent *event = new JetEvent;; T->Branch(""event"",""JetEvent"",&event,8000,2);; ; for (Int_t ev=0;ev<nev;ev++) {; event->Build();; T->Fill();; }; ; T->Print();; T->Write();; }; ; void read() {; //read the JetEvent file; TFile f(""JetEvent.root"");; TTree *T = (TTree*)f.Get(""T"");; JetEvent *event = 0;; T->SetBranchAddress(""event"", &event);; Long64_t nentries = T->GetEntries();; ; for (Long64_t ev=0;ev<nentries;ev++) {; T->GetEntry(ev);; if (ev) continue; //dump first event only; cout << "" Event: ""<< ev; << "" Jets: "" << event->GetNjet(); << "" Tracks: "" << event->GetNtrack(); << "" Hits A: "" << event->GetNhitA(); << "" Hits B: "" << event->GetNhitB() << endl;; }; }; ; void pileup(Int_t nev=200) {; //make nev pileup events, each build with LOOPMAX events selected; //randomly among the nentries; TFile f(""JetEvent.root"");; TTree *T = (TTree*)f.Get(""T"");; // Long64_t nentries = T->GetEntries();; ; const Int_t LOOPMAX=10;; JetEvent *events[LOOPMAX];; Int_t loop;; for (loop=0;loop<LOOPMAX;loop++) events[loop] = 0;; for (Long64_t ev=0;ev<nev;ev++) {; if (ev%10 == 0) printf(""building pileup: %lld\n"",ev);; for (loop=0;loop<LOOPMAX;loop++) {; Int_t rev = gRand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree_2jets_8C.html:76,Guid,Guide,76,doc/master/tree_2jets_8C.html,https://root.cern,https://root.cern/doc/master/tree_2jets_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/ntuple1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ntuple1.C File ReferenceTutorials » Tree tutorials. Detailed Description; Simple tree analysis. . ; #include ""TCanvas.h""; #include ""TFile.h""; #include ""TNtuple.h""; #include ""TProfile.h""; #include ""TBenchmark.h""; #include ""TStyle.h""; #include ""TPaveText.h""; #include ""TFrame.h""; #include ""TF1.h""; #include ""TROOT.h""; #include ""TSystem.h""; #include ""TInterpreter.h""; ; void ntuple1() {; ; //just in case this script is executed multiple times; delete gROOT->GetListOfFiles()->FindObject(""hsimple.root"");; delete gROOT->GetListOfCanvases()->FindObject(""c1"");; ; gBenchmark->Start(""ntuple1"");; //; // Connect ROOT histogram/ntuple demonstration file; // generated by example $ROOTSYS/tutorials/hsimple.C.; TString dir = gROOT->GetTutorialDir();; dir.Append(""/hsimple.C"");; dir.ReplaceAll(""/./"",""/"");; if (gBenchmark->GetBench(""hsimple"") < 0) gInterpreter->LoadMacro(dir.Data());; TFile *f1 = (TFile*)gROOT->ProcessLineFast(""hsimple(1)"");; if (!f1) return;; //; // Create a canvas, with 4 pads; //; TCanvas *c1 = new TCanvas(""c1"",""The Ntuple canvas"",200,10,700,780);; TPad *pad1 = new TPad(""pad1"",""This is pad1"",0.02,0.52,0.48,0.98,21);; TPad *pad2 = new TPad(""pad2"",""This is pad2"",0.52,0.52,0.98,0.98,21);; TPad *pad3 = new TPad(""pad3"",""This is pad3"",0.02,0.02,0.48,0.48,21);; TPad *pad4 = new TPad(""pad4"",""This is pad4"",0.52,0.02,0.98,0.48,1);; pad1->Draw();; pad2->Draw();; pad3->Draw();; pad4->Draw();; //; // Change default style for the statistics box; gStyle->SetStatW(0.30);; gStyle->SetStatH(0.20);; //; // Display a function of one ntuple column imposing a condition; // on another column.; pad1->cd();; pad1->SetGrid();; pad1->SetLogy();; TNtuple *ntuple = (TNtuple*)f1->Get(""ntuple"");; ntuple->SetLineColor(1);; ntuple->SetFillStyle(1001);; ntuple->SetFillColor(45);; ntuple->Draw(""3*px+2"",""px**2+py**2>1"");; ntuple->SetFillColor(38);; ntuple->Draw(""2*px+2"",""pz>2""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntuple1_8C.html:79,Guid,Guide,79,doc/master/ntuple1_8C.html,https://root.cern,https://root.cern/doc/master/ntuple1_8C.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: tutorials/tree/parallelcoord.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. parallelcoord.C File ReferenceTutorials » Tree tutorials. Detailed Description; Script illustrating the use of the TParallelCoord class . ; #include ""TFile.h""; #include ""TCanvas.h""; #include ""TStyle.h""; #include ""TRandom.h""; #include ""TNtuple.h""; #include ""TParallelCoord.h""; #include ""TParallelCoordVar.h""; #include ""TParallelCoordRange.h""; ; Double_t r1,r2,r3,r4,r5,r6,r7,r8,r9;; Double_t dr = 3.5;; TRandom *r;; ; void generate_random(Int_t i) {; r1 = (2*dr*r->Rndm(i))-dr;; r2 = (2*dr*r->Rndm(i))-dr;; r7 = (2*dr*r->Rndm(i))-dr;; r9 = (2*dr*r->Rndm(i))-dr;; r4 = (2*dr*r->Rndm(i))-dr;; r3 = (2*dr*r->Rndm(i))-dr;; r5 = (2*dr*r->Rndm(i))-dr;; r6 = (2*dr*r->Rndm(i))-dr;; r8 = (2*dr*r->Rndm(i))-dr;; }; ; void parallelcoord() {; ; TNtuple *nt = nullptr;; ; Double_t s1x, s1y, s1z;; Double_t s2x, s2y, s2z;; Double_t s3x, s3y, s3z;; r = new TRandom();;; ; new TCanvas(""c1"", ""c1"",0,0,800,700);; ; nt = new TNtuple(""nt"",""Demo ntuple"",""x:y:z:u:v:w"");; ; for (Int_t i=0; i<20000; i++) {; r->Sphere(s1x, s1y, s1z, 0.1);; r->Sphere(s2x, s2y, s2z, 0.2);; r->Sphere(s3x, s3y, s3z, 0.05);; ; generate_random(i);; nt->Fill(r1, r2, r3, r4, r5, r6);; ; generate_random(i);; nt->Fill(s1x, s1y, s1z, s2x, s2y, s2z);; ; generate_random(i);; nt->Fill(r1, r2, r3, r4, r5, r6);; ; generate_random(i);; nt->Fill(s2x-1, s2y-1, s2z, s1x+.5, s1y+.5, s1z+.5);; ; generate_random(i);; nt->Fill(r1, r2, r3, r4, r5, r6);; ; generate_random(i);; nt->Fill(s1x+1, s1y+1, s1z+1, s3x-2, s3y-2, s3z-2);; ; generate_random(i);; nt->Fill(r1, r2, r3, r4, r5, r6);; }; nt->Draw(""x:y:z:u:v:w"","""",""para"",5000);; TParallelCoord* para = (TParallelCoord*)gPad->GetListOfPrimitives()->FindObject(""ParaCoord"");; para->SetDotsSpacing(5);; TParallelCoordVar* firstaxis = (TParallelCoordVar*)para->GetVarList()->FindObject(""x"");; firstaxis->AddRange(new TParallelCoordRange(firstaxis,0.846018,1.158469));; para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/parallelcoord_8C.html:85,Guid,Guide,85,doc/master/parallelcoord_8C.html,https://root.cern,https://root.cern/doc/master/parallelcoord_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/parallelcoordtrans.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. parallelcoordtrans.C File ReferenceTutorials » Tree tutorials. Detailed Description; Use of transparency with ||-Coord. ; It displays the same data set twice. The first time without transparency and the second time with transparency. On the second plot, several clusters appear. Images without and with transparency. Transparency works in PDF files. ; #include ""TFile.h""; #include ""TCanvas.h""; #include ""TStyle.h""; #include ""TRandom.h""; #include ""TNtuple.h""; #include ""TParallelCoord.h""; #include ""TParallelCoordVar.h""; #include ""TParallelCoordRange.h""; ; Double_t r1,r2,r3,r4,r5,r6,r7,r8,r9;; Double_t dr = 3.5;; TRandom *r;; ; void generate_random(Int_t i) {; r->Rannor(r1,r4);; r->Rannor(r7,r9);; r2 = (2*dr*r->Rndm(i))-dr;; r3 = (2*dr*r->Rndm(i))-dr;; r5 = (2*dr*r->Rndm(i))-dr;; r6 = (2*dr*r->Rndm(i))-dr;; r8 = (2*dr*r->Rndm(i))-dr;; }; ; void parallelcoordtrans() {; Double_t x,y,z,u,v,w,a,b,c;; Double_t s1x, s1y, s1z;; Double_t s2x, s2y, s2z;; Double_t s3x, s3y, s3z;; r = new TRandom();;; ; auto c1 = new TCanvas(""c1"", ""c1"",0,0,900,1000);; c1->Divide(1,2);; ; auto nt = new TNtuple(""nt"",""Demo ntuple"",""x:y:z:u:v:w:a:b:c"");; ; int n=0;; for (Int_t i=0; i<1500; i++) {; r->Sphere(s1x, s1y, s1z, 0.1);; r->Sphere(s2x, s2y, s2z, 0.2);; r->Sphere(s3x, s3y, s3z, 0.05);; ; generate_random(i);; nt->Fill(r1, r2, r3, r4, r5, r6, r7, r8, r9);; n++;; ; generate_random(i);; nt->Fill(s1x, s1y, s1z, s2x, s2y, s2z, r7, r8, r9);; n++;; ; generate_random(i);; nt->Fill(r1, r2, r3, r4, r5, r6, r7, s3y, r9);; n++;; ; generate_random(i);; nt->Fill(s2x-1, s2y-1, s2z, s1x+.5, s1y+.5, s1z+.5, r7, r8, r9);; n++;; ; generate_random(i);; nt->Fill(r1, r2, r3, r4, r5, r6, r7, r8, r9);; n++;; ; generate_random(i);; nt->Fill(s1x+1, s1y+1, s1z+1, s3x-2, s3y-2, s3z-2, r7, r8, r9);; n++;; ; generate_random(i);; nt->Fill(r1, r2, r3, r4, r5, r6, s3x, r8, s3z );; n++;; }; ; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree_2parallelcoordtrans_8C.html:90,Guid,Guide,90,doc/master/tree_2parallelcoordtrans_8C.html,https://root.cern,https://root.cern/doc/master/tree_2parallelcoordtrans_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/printSizes.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. printSizes.C File ReferenceTutorials » Tree tutorials. Detailed Description; This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ; For example: root [] printTreeSummary(tree);; The TTree ""T"" takes 3764343 bytes on disk; Its branch ""event"" takes 3760313 bytes on disk; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t bytesDefinition TGWin32VirtualXProxy.cxx:245; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; root [] printBranchSummary(tree->GetBranch(""event""));; The branch ""event"" takes 3760313 bytes on disk; Its sub-branch ""TObject"" takes 581 bytes on disk; Its sub-branch ""fType[20]"" takes 640 bytes on disk; Its sub-branch ""fEventName"" takes 855 bytes on disk; Its sub-branch ""fNtrack"" takes 506 bytes on disk; Its sub-branch ""fNseg"" takes 554 bytes on disk; Its sub-branch ""fNvertex"" takes 507 bytes on disk; Its sub-branch ""fFlag"" takes 420 bytes on disk; Its sub-branch ""fTemper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/printSizes_8C.html:82,Guid,Guide,82,doc/master/printSizes_8C.html,https://root.cern,https://root.cern/doc/master/printSizes_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/run_h1analysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. run_h1analysis.C File ReferenceTutorials » Tree tutorials. Detailed Description; Macro driving the analysis can specify file name and type ; .- type == 0 : normal; type = 1 : use AClic to compile selector; type = 2 : use a fill list and then process the fill list///. ; //----------------------------------------; ; void run_h1analysis(int type = 0, const char * h1dir = 0) {; ; std::cout << ""Run h1 analysis "" << std::endl;; ; // create first the chain with all the files; ; TChain chain(""h42"");; ; if (h1dir) {; gSystem->Setenv(""H1"",h1dir);; }; else; gSystem->Setenv(""H1"",""http://root.cern/files/h1/"");; ; ; std::cout << ""Creating the chain"" << std::endl;; ; chain.SetCacheSize(20*1024*1024);; chain.Add(""$H1/dstarmb.root"");; chain.Add(""$H1/dstarp1a.root"");; chain.Add(""$H1/dstarp1b.root"");; chain.Add(""$H1/dstarp2.root"");; ; TString selectionMacro = gSystem->GetDirName(__FILE__) + ""/h1analysis.C"";; ; if (type == 0); chain.Process(selectionMacro);; else if (type == 1) {; // use AClic ( add a + at the end; selectionMacro += ""+"";; chain.Process(selectionMacro);; }; else if (type == 2) {; chain.Process(selectionMacro,""fillList"");; chain.Process(selectionMacro,""useList"");; }; }; ; ; ; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/run__h1analysis_8C.html:86,Guid,Guide,86,doc/master/run__h1analysis_8C.html,https://root.cern,https://root.cern/doc/master/run__h1analysis_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/spider.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. spider.C File ReferenceTutorials » Tree tutorials. Detailed Description; TSpider example. ; ; #include ""TFile.h""; #include ""TCanvas.h""; #include ""TNtuple.h""; #include ""TSpider.h""; ; void spider() {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selection = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selection.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; }; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TFile.h; TNtuple.h; TSpider.h; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41; AuthorBastien Dallapiazza ; Definition in file spider.C. tutorialstreespider.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/spider_8C.html:78,Guid,Guide,78,doc/master/spider_8C.html,https://root.cern,https://root.cern/doc/master/spider_8C.html,3,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tree/staff.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. staff.C File ReferenceTutorials » Tree tutorials. Detailed Description; Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C . ; void staff() {; auto f = TFile::Open(""cernstaff.root"");; TTree *T = nullptr;; f->GetObject(""T"",T);; T->Draw(""Grade:Age:Cost:Division:Nation"","""",""gl5d"");; if (gPad) gPad->Print(""staff.C.png"");; }; f#define f(i)Definition RSha256.hxx:104; gPad#define gPadDefinition TVirtualPad.h:308; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; staffDefinition staff.py:1; AuthorRene Brun ; Definition in file staff.C. tutorialstreestaff.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/staff_8C.html:77,Guid,Guide,77,doc/master/staff_8C.html,https://root.cern,https://root.cern/doc/master/staff_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/tcl.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tcl.C File ReferenceTutorials » Tree tutorials. Detailed Description; How to write a TClonesArray to a TTree ; The following tests can be run Interactive tests Root > .x tcl.C //no-split interpreted; Root > .x tcl.C(1) //split interpreted; Root > .x tcl.C++ //no-split compiled; Root > .x tcl.C++(1) //split compiled; Batch tests: same as above but with no graphics root -b -q tcl.C; root -b -q tcl.C++; root -b -q ""tcl.C(1)""; root -b -q ""tcl.C++(1)""; ; #include ""TFile.h""; #include ""TClonesArray.h""; #include ""TH2.h""; #include ""TLine.h""; #include ""TTree.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; ; void tclwrite(Int_t split); {; // Generate a Tree with a TClonesArray; // The array can be split or not; TFile f(""tcl.root"",""recreate"");; f.SetCompressionLevel(1); //try level 2 also; TTree T(""T"",""test tcl"");; TClonesArray *arr = new TClonesArray(""TLine"");; TClonesArray &ar = *arr;; T.Branch(""tcl"",&arr,256000,split);; //By default a TClonesArray is created with its BypassStreamer bit set.; //However, because TLine has a custom Streamer, this bit was reset; //by TTree::Branch above. We set again this bit because the current; //version of TLine uses the automatic Streamer.; //BypassingStreamer saves space and time.; arr->BypassStreamer();; for (Int_t ev=0;ev<10000;ev++) {; ar.Clear();; Int_t nlines = Int_t(gRandom->Gaus(50,10));; if(nlines < 0) nlines = 1;; for (Int_t i=0;i<nlines;i++) {; Float_t x1 = gRandom->Rndm();; Float_t y1 = gRandom->Rndm();; Float_t x2 = gRandom->Rndm();; Float_t y2 = gRandom->Rndm();; new(ar[i]) TLine(x1,y1,x2,y2);; }; T.Fill();; }; T.Print();; T.Write();; }; ; void tclread(); {; // read file generated by tclwrite; // loop on all entries.; // histogram center of lines; TFile *f = new TFile(""tcl.root"");; TTree *T = (TTree*)f->Get(""T"");; TH2F *h2 = new TH2F(""h2"",""center of lines"",40,0,1,40,0,1);; ; TClonesArray *arr = new TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tcl_8C.html:75,Guid,Guide,75,doc/master/tcl_8C.html,https://root.cern,https://root.cern/doc/master/tcl_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/temperature.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. temperature.C File ReferenceTutorials » Tree tutorials. Detailed Description; This tutorial illustrates how to use the highlight mode with trees. ; It first creates a TTree from a temperature data set in Prague between 1775 and 2004. Then it defines three pads representing the temperature per year, month and day. Thanks to the highlight mechanism it is possible to explore the data set only by moving the mouse on the plots. Movements on the years' plot will update the months' and days' plot. Movements on the months plot will update the days plot. Movements on the days' plot will display the exact temperature for a given day.; ; Int_t year, month, day;; TTree *tree = nullptr;; TProfile *hYear = nullptr, *hMonth = nullptr, *hDay = nullptr;; TCanvas *Canvas = nullptr;; Int_t customhb = -2;; TLatex *info = nullptr;; ; // Ranges for year, month, day and temperature; Int_t rYear[3]; // from tree/data; Int_t rMonth[3] = { 12, 1, 13 };; Int_t rDay[3] = { 31, 1, 32 };; Double_t rTemp[3] = { 55.0, -20.0, 35.0 };; ; void HighlightDay(Int_t xhb); {; if (!info) {; info = new TLatex();; info->SetTextSizePixels(25);; Canvas->cd(3);; info->Draw();; gPad->Update();; }; ; if (xhb != customhb) day = xhb;; TString temp = TString::Format("" %5.1f #circC"", hDay->GetBinContent(day));; if (hDay->GetBinEntries(day) == 0) temp = "" "";; TString m = "" "";; if (month>0) m = TString::Format(""-%02d"",month);; TString d = "" "";; if (day>0) d = TString::Format(""-%02d"",day);; info->SetText(2.0, hDay->GetMinimum()*0.8, TString::Format(""%4d%s%s%s"", year, m.Data(), d.Data(), temp.Data()));; Canvas->GetPad(3)->Modified();; }; ; void HighlightMonth(Int_t xhb); {; if (!hDay) {; hDay = new TProfile(""hDay"", ""; day; temp, #circC"", rDay[0], rDay[1], rDay[2]);; hDay->SetMinimum(rTemp[1]);; hDay->SetMaximum(rTemp[2]);; hDay->GetYaxis()->SetNdivisions(410);; hDay->SetFillColor(kGray);; h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/temperature_8C.html:83,Guid,Guide,83,doc/master/temperature_8C.html,https://root.cern,https://root.cern/doc/master/temperature_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/tree.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree.C File ReferenceTutorials » Tree tutorials. Detailed Description; Display the Tree data structures . ; void tree() {; TCanvas* c1 = new TCanvas(""c1"",""Tree Data Structure"",200,10,750,940);; c1->Range(0,-0.1,1,1.15);; ; gBenchmark->Start(""tree"");; ; Int_t branchcolor = 26;; Int_t leafcolor = 30;; Int_t basketcolor = 42;; Int_t offsetcolor = 43;; TPaveLabel* title = new TPaveLabel(.3,1.05,.8,1.13,c1->GetTitle());; title->SetFillColor(16);; title->Draw();; TPaveText* treePave = new TPaveText(.01,.75,.15,1.00);; treePave->SetFillColor(18);; treePave->SetTextAlign(12);; TText *tnt = treePave->AddText(""Tree"");; tnt->SetTextAlign(22);; tnt->SetTextSize(0.030);; treePave->AddText(""fScanField"");; treePave->AddText(""fMaxEventLoop"");; treePave->AddText(""fMaxVirtualSize"");; treePave->AddText(""fEntries"");; treePave->AddText(""fDimension"");; treePave->AddText(""fSelectedRows"");; treePave->Draw();; TPavesText* farm = new TPavesText(.01,1.02,.15,1.1,9,""tr"");; TText *tfarm = farm->AddText(""CHAIN"");; tfarm->SetTextSize(0.024);; farm->AddText(""Collection"");; farm->AddText(""of Trees"");; farm->Draw();; TLine* llink = new TLine(.15,.92,.80,.92);; llink->SetLineWidth(2);; llink->SetLineColor(1);; llink->Draw();; llink->DrawLine(.21,.87,.21,.275);; llink->DrawLine(.23,.87,.23,.375);; llink->DrawLine(.25,.87,.25,.805);; llink->DrawLine(.41,.25,.41,-.025);; llink->DrawLine(.43,.25,.43,.075);; llink->DrawLine(.45,.25,.45,.175);; TPaveLabel* branch0 = new TPaveLabel(.20,.87,.35,.97,""Branch 0"");; branch0->SetTextSize(0.35);; branch0->SetFillColor(branchcolor);; branch0->Draw();; TPaveLabel* branch1 = new TPaveLabel(.40,.87,.55,.97,""Branch 1"");; branch1->SetTextSize(0.35);; branch1->SetFillColor(branchcolor);; branch1->Draw();; TPaveLabel* branch2 = new TPaveLabel(.60,.87,.75,.97,""Branch 2"");; branch2->SetTextSize(0.35);; branch2->SetFillColor(branchcolor);; branch2->Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree_8C.html:76,Guid,Guide,76,doc/master/tree_8C.html,https://root.cern,https://root.cern/doc/master/tree_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/tree0.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree0.C File ReferenceTutorials » Tree tutorials. Detailed Description; Simple Event class example ; execute as: .x tree0.C++; You have to copy it first to a directory where you have write access! Note that .x tree0.C cannot work with this example. Effect of ClassDef() and ClassImp() macros; After running this macro create an instance of Det and Event; Det d;; Event e;; d#define d(i)Definition RSha256.hxx:102; e#define e(i)Definition RSha256.hxx:103; EventDefinition collection_proxies.C:172; now you can see the effect of the ClassDef() and ClassImp() macros. (for the Det class these commands are commented!) For instance 'e' now knows who it is:; cout<<e.Class_Name()<<endl;; whereas d does not.; The methods that are added by the ClassDef()/Imp() macro can be listed with; .class; .class Event; .class Det; ; #include <TRandom.h>; #include <TTree.h>; #include <TCanvas.h>; #include <TStyle.h>; ; #include <Riostream.h>; ; //class Det : public TObject {; class Det { // each detector gives an energy and time signal; public:; Double_t e; //energy; Double_t t; //time; ; // ClassDef(Det,1); };; ; //ClassImp(Det); ; //class Event { //TObject is not required by this example; class Event : public TObject {; public:; ; Det a; // say there are two detectors (a and b) in the experiment; Det b;; ClassDefOverride(Event,1); };; ; ClassImp(Event); ; void tree0() {; // create a TTree; TTree *tree = new TTree(""tree"",""treelibrated tree"");; Event *e = new Event;; ; // create a branch with energy; tree->Branch(""event"",&e);; ; // fill some events with random numbers; Int_t nevent=10000;; for (Int_t iev=0;iev<nevent;iev++) {; if (iev%1000==0) cout<<""Processing event ""<<iev<<""...""<<endl;; ; Float_t ea,eb;; gRandom->Rannor(ea,eb); // the two energies follow a gaus distribution; e->a.e=ea;; e->b.e=eb;; e->a.t=gRandom->Rndm(); // random; e->b.t=e->a.t + gRandom->Gaus(0.,.1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree0_8C.html:77,Guid,Guide,77,doc/master/tree0_8C.html,https://root.cern,https://root.cern/doc/master/tree0_8C.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: tutorials/tree/tree1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree1.C File ReferenceTutorials » Tree tutorials. Detailed Description; This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ; It shows:; how to fill a Tree with a few simple variables.; how to read this Tree; how to browse and analyze the Tree via the TBrowser and TTreeViewer This example can be run in many different ways:. Using the Cling interpreter .x tree1.C. Using the automatic compiler interface .x tree1.C++. .L tree1.C or .L tree1.C++; tree1(); One can also run the write and read parts in two separate sessions. For example following one of the sessions above, one can start the session: .L tree1.C; tree1r();; ; #include ""TROOT.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TBrowser.h""; #include ""TH2.h""; #include ""TRandom.h""; ; void tree1w(); {; //create a Tree file tree1.root; ; //create the file, the Tree and a few branches; TFile f(""tree1.root"",""recreate"");; TTree t1(""t1"",""a simple Tree with simple variables"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1.Branch(""px"",&px,""px/F"");; t1.Branch(""py"",&py,""py/F"");; t1.Branch(""pz"",&pz,""pz/F"");; t1.Branch(""random"",&random,""random/D"");; t1.Branch(""ev"",&ev,""ev/I"");; ; //fill the tree; for (Int_t i=0;i<10000;i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; random = gRandom->Rndm();; ev = i;; t1.Fill();; }; ; //save the Tree header. The file will be automatically closed; //when going out of the function scope; t1.Write();; }; ; void tree1r(); {; //read the Tree generated by tree1w and fill two histograms; ; //note that we use ""new"" to create the TFile and TTree objects !; //because we want to keep these objects alive when we leave this function.; TFile *f = new TFile(""tree1.root"");; TTree *t1 = (TTree*)f->Get(""t1"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1->SetBranchAddress(""px"",&px);; t1->SetBranchAddress(""py"",&py);; t1->SetBranchAddr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree1_8C.html:77,Guid,Guide,77,doc/master/tree1_8C.html,https://root.cern,https://root.cern/doc/master/tree1_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tree/tree2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree2.C File ReferenceTutorials » Tree tutorials. Detailed Description; This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly. ; See tree2a.C for the same example using a class with dictionary instead of a C-struct.; In this example, we are mapping a C struct to one of the Geant3 common blocks /gctrak/. In the real life, this common will be filled by Geant3 at each step and only the Tree Fill function should be called. The example emulates the Geant3 step routines.; to run the example, do: .x tree2.C to execute with the Cling interpreter; .x tree2.C++ to execute with native compiler; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TH2.h""; #include ""TRandom.h""; #include ""TCanvas.h""; #include ""TMath.h""; ; const Int_t MAXMEC = 30;; ; typedef struct {; Float_t vect[7];; Float_t getot;; Float_t gekin;; Float_t vout[7];; Int_t nmec;; Int_t lmec[MAXMEC];; Int_t namec[MAXMEC];; Int_t nstep;; Int_t pid;; Float_t destep;; Float_t destel;; Float_t safety;; Float_t sleng;; Float_t step;; Float_t snext;; Float_t sfield;; Float_t tofg;; Float_t gekrat;; Float_t upwght;; } Gctrak_t;; ; ; void helixStep(Float_t step, Float_t *vect, Float_t *vout); {; // extrapolate track in constant field; Float_t field = 20; //magnetic field in kilogauss; enum Evect {kX,kY,kZ,kPX,kPY,kPZ,kPP};; vout[kPP] = vect[kPP];; Float_t h4 = field*2.99792e-4;; Float_t rho = -h4/vect[kPP];; Float_t tet = rho*step;; Float_t tsint = tet*tet/6;; Float_t sintt = 1 - tsint;; Float_t sint = tet*sintt;; Float_t cos1t = tet/2;; Float_t f1 = step*sintt;; Float_t f2 = step*cos1t;; Float_t f3 = step*tsint*vect[kPZ];; Float_t f4 = -tet*cos1t;; Float_t f5 = sint;; Float_t f6 = tet*cos1t*vect[kPZ];; vout[kX] = vect[kX] + (f1*vect[kPX] - f2*vect[kPY]);; vout[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree2_8C.html:77,Guid,Guide,77,doc/master/tree2_8C.html,https://root.cern,https://root.cern/doc/master/tree2_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/tree2a.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree2a.C File ReferenceTutorials » Tree tutorials. Detailed Description; This example is the same as tree2.C, but uses a class instead of a C-struct. ; In this example, we are mapping a class to one of the Geant3 common blocks /gctrak/. In the real life, this common will be filled by Geant3 at each step and only the Tree Fill function should be called. The example emulates the Geant3 step routines.; to run the example, do to execute with native compiler: .x tree2a.C+ ; Note that since IO is involved, ACLiC has to be invoked to create the dictionary of class Gctrak. ; #include ""TROOT.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TBrowser.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TRandom.h""; #include ""TCanvas.h""; ; const Int_t MAXMEC = 30;; ; class Gctrak : public TObject {; public:; Float_t vect[7];; Float_t getot;; Float_t gekin;; Float_t vout[7]; //! not persistent; Int_t nmec;; Int_t *lmec; //[nmec]; Int_t *namec; //[nmec]; Int_t nstep; //! not persistent; Int_t pid;; Float_t destep;; Float_t destel; //! not persistent; Float_t safety; //! not persistent; Float_t sleng; //! not persistent; Float_t step; //! not persistent; Float_t snext; //! not persistent; Float_t sfield; //! not persistent; Float_t tofg; //! not persistent; Float_t gekrat; //! not persistent; Float_t upwght; //! not persistent; ; Gctrak() {lmec=nullptr; namec=nullptr;}; ; ClassDefOverride(Gctrak,1); };; ; ; void helixStep(Float_t step, Float_t *vect, Float_t *vout); {; // extrapolate track in constant field; Float_t field = 20; //magnetic field in kilogauss; enum Evect {kX,kY,kZ,kPX,kPY,kPZ,kPP};; vout[kPP] = vect[kPP];; Float_t h4 = field*2.99792e-4;; Float_t rho = -h4/vect[kPP];; Float_t tet = rho*step;; Float_t tsint = tet*tet/6;; Float_t sintt = 1 - tsint;; Float_t sint = tet*sintt;; Float_t cos1t = tet/2;; Float_t f1 = step*sintt;; Float_t f2 = st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree2a_8C.html:78,Guid,Guide,78,doc/master/tree2a_8C.html,https://root.cern,https://root.cern/doc/master/tree2a_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/tree3.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree3.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel. ; Run this script with .x tree3.C; In the function treer, the first Tree is open. The second Tree is declared friend of the first tree. TTree::Draw is called with variables from both Trees. ; #include ""TFile.h""; #include ""TTree.h""; #include ""TRandom.h""; #include ""TCanvas.h""; ; void tree3w() {; ; const Int_t kMaxTrack = 500;; Int_t ntrack;; Int_t stat[kMaxTrack];; Int_t sign[kMaxTrack];; Float_t px[kMaxTrack];; Float_t py[kMaxTrack];; Float_t pz[kMaxTrack];; Float_t pt[kMaxTrack];; Float_t zv[kMaxTrack];; Float_t chi2[kMaxTrack];; Double_t sumstat;; ; TFile f(""tree3.root"",""recreate"");; TTree *t3 = new TTree(""t3"",""Reconst ntuple"");; t3->Branch(""ntrack"",&ntrack,""ntrack/I"");; t3->Branch(""stat"",stat,""stat[ntrack]/I"");; t3->Branch(""sign"",sign,""sign[ntrack]/I"");; t3->Branch(""px"",px,""px[ntrack]/F"");; t3->Branch(""py"",py,""py[ntrack]/F"");; t3->Branch(""pz"",pz,""pz[ntrack]/F"");; t3->Branch(""zv"",zv,""zv[ntrack]/F"");; t3->Branch(""chi2"",chi2,""chi2[ntrack]/F"");; ; TFile fr(""tree3f.root"",""recreate"");; TTree *t3f = new TTree(""t3f"",""a friend Tree"");; t3f->Branch(""ntrack"",&ntrack,""ntrack/I"");; t3f->Branch(""sumstat"",&sumstat,""sumstat/D"");; t3f->Branch(""pt"",pt,""pt[ntrack]/F"");; ; for (Int_t i=0;i<1000;i++) {; Int_t nt = gRandom->Rndm()*(kMaxTrack-1);; ntrack = nt;; sumstat = 0;; for (Int_t n=0;n<nt;n++) {; stat[n] = n%3;; sign[n] = i%2;; px[n] = gRandom->Gaus(0,1);; py[n] = gRandom->Gaus(0,2);; pz[n] = gRandom->Gaus(10,5);; zv[n] = gRandom->Gaus(100,2);; chi2[n] = gRandom->Gaus(0,.01);; sumstat += chi2[n];; pt[n] = TMath::Sqrt(px[n]*px[n] + py[n]*py[n]);; }; t3->Fill();; t3f->Fill();; }; t3->Print();; f.cd();; t3->Write();; fr.cd();; t3f->Write();; }; ; void tree3r(); {; TFile *f = new TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree3_8C.html:77,Guid,Guide,77,doc/master/tree3_8C.html,https://root.cern,https://root.cern/doc/master/tree3_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/tree/tree4.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree4.C File ReferenceTutorials » Tree tutorials. Detailed Description; This example writes a tree with objects of the class Event. ; It is a simplified version of $ROOTSYS/test/MainEvent.cxx to write the tree, and $ROOTSYS/test/eventb.C It shows:; how to fill a Tree with an event class containing these data members: char fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Float_t fTemperature;; EventHeader fEvtHdr;; TClonesArray *fTracks; //->; TH1F *fH; //->; Int_t fMeasures[10];; Float_t fMatrix[4][4];; Float_t *fClosestDistance; //[fNvertex]; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622. the difference in splitting or not splitting a branch; how to read selected branches of the tree, and print the first entry with less than 587 tracks.; how to browse and analyze the Tree via the TBrowser and TTreeViewer. This example can be run in many different ways:; way1 using the Cling interpreter: .x tree4.C. way2 using the Cling interpreter: .L tree4.C; tree4(). way3 using ACLIC: .L ../test/libEvent.so; .x tree4.C++; One can also run the write and read parts in two separate sessions. For example following one of the sessions above, one can start the session: .L tree4.C; tree4r();; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; #include ""TFile.h""; #include ""TTree.h""; #include ""TBrowser.h""; #include ""TH2.h""; #include ""TRandom.h""; #include ""TClassTable.h""; #include ""TSystem.h""; #include ""TROOT.h""; #include ""../test/Event.h""; ; void tree4w(); {; ; //create a Tree file tree4.root; TFile f(""tree4.root"",""RECREATE"");; ; // Create a ROOT Tree; TTree t4(""t4"",""A Tree with Even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree4_8C.html:77,Guid,Guide,77,doc/master/tree4_8C.html,https://root.cern,https://root.cern/doc/master/tree4_8C.html,2,"['Guid', 'simpl']","['Guide', 'simplified']"
Usability,". ROOT: tutorials/tree/treefriend.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. treefriend.C File ReferenceTutorials » Tree tutorials. Detailed Description; Illustrates how to use Tree friends: . create a simple TTree; Copy a subset of this TTree to a new TTree; Create a Tree Index; Make a friend TTree; compare two TTrees; Draw a variable from the first tree versus a variable in the friend Tree. You can run this tutorial with: root > .x treefriend.C (interpreted via Cling); root > .x treefriend.C+ (executed via ACLIC & the native compiler); or, variants like: root > .L treefriend.C+; root > CreateParentTree();; root > CreateFriendTree();; root > CompareTrees();; root > DrawFriend();; ; ******************************************************************************; *Tree :T : test friend trees *; *Entries : 10000 : Total = 203762 bytes File Size = 94821 *; * : : Tree compression factor = 1.69 *; ******************************************************************************; *Br 0 :Run : Run/I *; *Entries : 10000 : Total Size= 40698 bytes File Size = 265 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 120.75 *; *............................................................................*; *Br 1 :Event : Event/I *; *Entries : 10000 : Total Size= 40712 bytes File Size = 11231 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.85 *; *............................................................................*; *Br 2 :x : x/F *; *Entries : 10000 : Total Size= 40684 bytes File Size = 27116 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 3 :y : y/F *; *Entries : 10000 : Total Size= 40684 bytes File Size = 27035 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 4 :z : z/F *; *Entries : 10000 : Total Size= 40684 b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treefriend_8C.html:82,Guid,Guide,82,doc/master/treefriend_8C.html,https://root.cern,https://root.cern/doc/master/treefriend_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/tree/treegetval.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. treegetval.C File ReferenceTutorials » Tree tutorials. Detailed Description; Illustrates how to retrieve TTree variables in arrays. ; This example:; creates a simple TTree,; generates TTree variables thanks to the Draw method with goff option,; retrieves some of them in arrays thanks to GetVal,; generates and draw graphs with these arrays. The option goff in TTree::Draw behaves like any other drawing option except that, at the end, no graphics is produced ( goff= graphics off). This allows to generate as many TTree variables as needed. All the graphics options (except para and candle) are limited to four variables only. And para and candle need at least two variables.; Note that by default TTree::Draw creates the arrays obtained with GetVal with a length corresponding to the parameter fEstimate. By default fEstimate=1000000 and can be modified via TTree::SetEstimate. To keep in memory all the results use: tree->SetEstimate(-1);; SetEstimate should be called if the expected number of selected rows is greater than 1000000. ; The arrays' dimension is 5000; ; void treegetval() {; // create a simple TTree with 5 branches; Int_t run, evt;; Float_t x,y,z;; TTree *T = new TTree(""T"",""test friend trees"");; T->Branch(""Run"",&run,""Run/I"");; T->Branch(""Event"",&evt,""Event/I"");; T->Branch(""x"",&x,""x/F"");; T->Branch(""y"",&y,""y/F"");; T->Branch(""z"",&z,""z/F"");; TRandom r;; for (Int_t i=0;i<10000;i++) {; if (i < 5000) run = 1;; else run = 2;; evt = i;; x = r.Gaus(10,1);; y = r.Gaus(20,2);; z = r.Landau(2,1);; T->Fill();; }; ; // Draw with option goff and generate seven variables; Int_t n = T->Draw(""x:y:z:Run:Event:sin(x):cos(x)"",""Run==1"",""goff"");; printf(""The arrays' dimension is %d\n"",n);; ; // Retrieve variables 0, 5 et 6; Double_t *vx = T->GetVal(0);; Double_t *vxs = T->GetVal(5);; Double_t *vxc = T->GetVal(6);; ; // Create and draw graphs; TGraph *gs = ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treegetval_8C.html:82,Guid,Guide,82,doc/master/treegetval_8C.html,https://root.cern,https://root.cern/doc/master/treegetval_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/v7 Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. v7 Directory Reference. Directory dependency graph for v7:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ntuple;  . Files;  browser.cxx;  ;  concurrentfill.cxx;  ;  filedialog.cxx;  ;  fitpanel.cxx;  ;  fitpanel6.cxx;  ;  histops.cxx;  ;  perf.cxx;  ;  perfcomp.cxx;  ;  simple.cxx;  . tutorialsv7. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_87a15b6630bbbec9854bba9437a28716.html:72,Guid,Guide,72,doc/master/dir_87a15b6630bbbec9854bba9437a28716.html,https://root.cern,https://root.cern/doc/master/dir_87a15b6630bbbec9854bba9437a28716.html,3,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: tutorials/v7/ntuple Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ntuple Directory Reference. Directory dependency graph for ntuple:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  ntpl001_staff.C;   Write and read tabular data with RNTuple. ;  ;  ntpl002_vector.C;   Write and read STL vectors with RNTuple. ;  ;  ntpl004_dimuon.C;   Mini-Analysis on CMS OpenData with RDataFrame. ;  ;  ntpl005_introspection.C;   Write and read an RNTuple from a user-defined class. ;  ;  ntpl006_friends.C;   Work with befriended RNTuples. ;  ;  ntpl007_mtFill.C;   Example of multi-threaded writes using multiple REntry objects ;  ;  ntpl008_import.C;   Example of converting data stored in a TTree into an RNTuple ;  ;  ntpl009_parallelWriter.C;   Example of multi-threaded writes using RNTupleParallelWriter. ;  ;  ntpl010_skim.C;   Example creating a derived RNTuple ;  ;  ntpl011_global_temperatures.C;   This ROOT 7 example demonstrates how to use RNTuple in combination with ROOT 6 features like RDataframe and visualizations. ;  ;  ntpl012_processor.C;   Demonstrate the RNTupleProcessor using multiple RNTuples ;  ;  ntpl013_staged.C;   Example of staged cluster committing in multi-threaded writing using RNTupleParallelWriter. ;  ;  ntpl014_framework.C;   ;  . tutorialsv7ntuple. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_74d0bdb54707d3eaa1a5a0931b591e7a.html:79,Guid,Guide,79,doc/master/dir_74d0bdb54707d3eaa1a5a0931b591e7a.html,https://root.cern,https://root.cern/doc/master/dir_74d0bdb54707d3eaa1a5a0931b591e7a.html,2,['Guid'],['Guide']
Usability,". ROOT: tutorials/v7/ntuple/ntpl001_staff.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ntpl001_staff.C File ReferenceTutorials » ROOT 7 tutorials » ROOT 7 ntuple tutorials. Detailed Description; Write and read tabular data with RNTuple. ; Adapted from the cernbuild and cernstaff tree tutorials. Illustrates the type-safe ntuple model interface, which is used to define a data model that is in a second step taken by an ntuple reader or writer. ; // NOTE: The RNTuple classes are experimental at this point.; // Functionality, interface, and data format is still subject to changes.; // Do not use for real data!; ; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RNTupleReader.hxx>; #include <ROOT/RNTupleWriter.hxx>; ; #include <TCanvas.h>; #include <TH1I.h>; #include <TROOT.h>; #include <TString.h>; ; #include <cassert>; #include <cstdio>; #include <fstream>; #include <iostream>; #include <memory>; #include <string>; #include <sstream>; #include <utility>; ; // Import classes from experimental namespace for the time being; using RNTupleModel = ROOT::Experimental::RNTupleModel;; using RNTupleReader = ROOT::Experimental::RNTupleReader;; using RNTupleWriter = ROOT::Experimental::RNTupleWriter;; ; constexpr char const* kNTupleFileName = ""ntpl001_staff.root"";; ; void Ingest() {; // The input file cernstaff.dat is a copy of the CERN staff data base from 1988; ifstream fin(gROOT->GetTutorialDir() + ""/tree/cernstaff.dat"");; assert(fin.is_open());; ; // We create a unique pointer to an empty data model; auto model = RNTupleModel::Create();; ; // To define the data model, we create fields with a given C++ type and name. Fields are roughly TTree branches.; // MakeField returns a shared pointer to a memory location that we can populate to fill the ntuple with data; auto fldCategory = model->MakeField<int>(""Category"");; auto fldFlag = model->MakeField<unsigned int>(""Flag"");; auto fldAge = model->MakeField<int>(""Age"");; auto fldServi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntpl001__staff_8C.html:90,Guid,Guide,90,doc/master/ntpl001__staff_8C.html,https://root.cern,https://root.cern/doc/master/ntpl001__staff_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/v7/ntuple/ntpl001_staff.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ntpl001_staff.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_ntuple; 3/// \notebook; 4/// Write and read tabular data with RNTuple. Adapted from the cernbuild and cernstaff tree tutorials.; 5/// Illustrates the type-safe ntuple model interface, which is used to define a data model that is in a second step; 6/// taken by an ntuple reader or writer.; 7///; 8/// \macro_image; 9/// \macro_code; 10///; 11/// \date April 2019; 12/// \author The ROOT Team; 13 ; 14// NOTE: The RNTuple classes are experimental at this point.; 15// Functionality, interface, and data format is still subject to changes.; 16// Do not use for real data!; 17 ; 18#include <ROOT/RNTupleModel.hxx>; 19#include <ROOT/RNTupleReader.hxx>; 20#include <ROOT/RNTupleWriter.hxx>; 21 ; 22#include <TCanvas.h>; 23#include <TH1I.h>; 24#include <TROOT.h>; 25#include <TString.h>; 26 ; 27#include <cassert>; 28#include <cstdio>; 29#include <fstream>; 30#include <iostream>; 31#include <memory>; 32#include <string>; 33#include <sstream>; 34#include <utility>; 35 ; 36// Import classes from experimental namespace for the time being; 37using RNTupleModel = ROOT::Experimental::RNTupleModel;; 38using RNTupleReader = ROOT::Experimental::RNTupleReader;; 39using RNTupleWriter = ROOT::Experimental::RNTupleWriter;; 40 ; 41constexpr char const* kNTupleFileName = ""ntpl001_staff.root"";; 42 ; 43void Ingest() {; 44 // The input file cernstaff.dat is a copy of the CERN staff data base from 1988; 45 ifstream fin(gROOT->GetTutorialDir() + ""/tree/cernstaff.dat"");; 46 assert(fin.is_open());; 47 ; 48 // We create a unique pointer to an empty data model; 49 auto model = RNTupleModel::Create();; 50 ; 51 // To define the data model, we create fields with a given C++ type and name. Fields are roughly TTree branches.; 52 // MakeField returns a shared pointer to a memory location th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntpl001__staff_8C_source.html:87,Guid,Guide,87,doc/master/ntpl001__staff_8C_source.html,https://root.cern,https://root.cern/doc/master/ntpl001__staff_8C_source.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/v7/ntuple/ntpl008_import.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ntpl008_import.C File ReferenceTutorials » ROOT 7 tutorials » ROOT 7 ntuple tutorials. Detailed Description; Example of converting data stored in a TTree into an RNTuple . ; // NOTE: The RNTuple classes are experimental at this point.; // Functionality, interface, and data format is still subject to changes.; // Do not use for real data!; ; #include <ROOT/RNTupleDS.hxx>; #include <ROOT/RNTupleImporter.hxx>; #include <ROOT/RNTupleReader.hxx>; #include <ROOT/RPageStorageFile.hxx>; ; #include <TFile.h>; #include <TROOT.h>; #include <TSystem.h>; ; // Import classes from experimental namespace for the time being.; using RNTupleImporter = ROOT::Experimental::RNTupleImporter;; using RNTupleReader = ROOT::Experimental::RNTupleReader;; ; // Input and output.; constexpr char const *kTreeFileName = ""http://root.cern.ch/files/HiggsTauTauReduced/GluGluToHToTauTau.root"";; constexpr char const *kTreeName = ""Events"";; constexpr char const *kNTupleFileName = ""ntpl008_import.root"";; ; void ntpl008_import(); {; // RNTupleImporter appends keys to the output file; make sure a second run of the tutorial does not fail; // with `Key 'Events' already exists in file ntpl008_import.root` by removing the output file.; gSystem->Unlink(kNTupleFileName);; ; // Use multiple threads to compress RNTuple data.; ROOT::EnableImplicitMT();; ; // Create a new RNTupleImporter object.; auto importer = RNTupleImporter::Create(kTreeFileName, kTreeName, kNTupleFileName);; ; // Begin importing.; importer->Import();; ; // Inspect the schema of the written RNTuple.; auto file = std::unique_ptr<TFile>(TFile::Open(kNTupleFileName));; if (!file || file->IsZombie()) {; std::cerr << ""cannot open "" << kNTupleFileName << std::endl;; return;; }; auto ntpl = std::unique_ptr<ROOT::RNTuple>(file->Get<ROOT::RNTuple>(""Events""));; auto reader = RNTupleReader::Open(*ntpl);; reader->PrintI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntpl008__import_8C.html:91,Guid,Guide,91,doc/master/ntpl008__import_8C.html,https://root.cern,https://root.cern/doc/master/ntpl008__import_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: tutorials/v7/ntuple/ntpl008_import.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ntpl008_import.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_ntuple; 3/// \notebook; 4/// Example of converting data stored in a TTree into an RNTuple; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \date December 2022; 10/// \author The ROOT Team; 11 ; 12// NOTE: The RNTuple classes are experimental at this point.; 13// Functionality, interface, and data format is still subject to changes.; 14// Do not use for real data!; 15 ; 16#include <ROOT/RNTupleDS.hxx>; 17#include <ROOT/RNTupleImporter.hxx>; 18#include <ROOT/RNTupleReader.hxx>; 19#include <ROOT/RPageStorageFile.hxx>; 20 ; 21#include <TFile.h>; 22#include <TROOT.h>; 23#include <TSystem.h>; 24 ; 25// Import classes from experimental namespace for the time being.; 26using RNTupleImporter = ROOT::Experimental::RNTupleImporter;; 27using RNTupleReader = ROOT::Experimental::RNTupleReader;; 28 ; 29// Input and output.; 30constexpr char const *kTreeFileName = ""http://root.cern.ch/files/HiggsTauTauReduced/GluGluToHToTauTau.root"";; 31constexpr char const *kTreeName = ""Events"";; 32constexpr char const *kNTupleFileName = ""ntpl008_import.root"";; 33 ; 34void ntpl008_import(); 35{; 36 // RNTupleImporter appends keys to the output file; make sure a second run of the tutorial does not fail; 37 // with `Key 'Events' already exists in file ntpl008_import.root` by removing the output file.; 38 gSystem->Unlink(kNTupleFileName);; 39 ; 40 // Use multiple threads to compress RNTuple data.; 41 ROOT::EnableImplicitMT();; 42 ; 43 // Create a new RNTupleImporter object.; 44 auto importer = RNTupleImporter::Create(kTreeFileName, kTreeName, kNTupleFileName);; 45 ; 46 // Begin importing.; 47 importer->Import();; 48 ; 49 // Inspect the schema of the written RNTuple.; 50 auto file = std::unique_ptr<TFile>(TFile::Open(kNTupleFileName));; 51 if (!file || file->IsZombie()) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntpl008__import_8C_source.html:88,Guid,Guide,88,doc/master/ntpl008__import_8C_source.html,https://root.cern,https://root.cern/doc/master/ntpl008__import_8C_source.html,1,['Guid'],['Guide']
Usability,. ROOT: unsigned int Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. unsigned int Class Reference. The documentation for this class was generated from the following files:. unsigned int. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classunsigned_01int.html:68,Guid,Guide,68,doc/master/classunsigned_01int.html,https://root.cern,https://root.cern/doc/master/classunsigned_01int.html,2,['Guid'],['Guide']
Usability,". ROOT: vec Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; vec Struct Reference. . Definition at line 1855 of file civetweb.c. Public Attributes; size_t len;  ; const char * ptr;  . Member Data Documentation. ◆ len. size_t vec::len. Definition at line 1857 of file civetweb.c. ◆ ptr. const char* vec::ptr. Definition at line 1856 of file civetweb.c. Collaboration diagram for vec:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; net/http/civetweb/civetweb.c. vec. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structvec.html:60,Guid,Guide,60,doc/master/structvec.html,https://root.cern,https://root.cern/doc/master/structvec.html,2,['Guid'],['Guide']
Usability,". ROOT: vec Struct Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; vec Struct Reference. . Definition at line 1856 of file civetweb.c. Public Attributes; size_t len;  ; const char * ptr;  . Member Data Documentation. ◆ len. size_t vec::len. Definition at line 1858 of file civetweb.c. ◆ ptr. const char* vec::ptr. Definition at line 1857 of file civetweb.c. Collaboration diagram for vec:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; net/http/civetweb/civetweb.c. vec. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structvec.html:59,Guid,Guide,59,doc/v632/structvec.html,https://root.cern,https://root.cern/doc/v632/structvec.html,2,['Guid'],['Guide']
Usability,. ROOT: writer Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; writer Namespace Reference. Classes; class  writer;  . writer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespacewriter.html:66,Guid,Guide,66,doc/master/namespacewriter.html,https://root.cern,https://root.cern/doc/master/namespacewriter.html,2,['Guid'],['Guide']
Usability,". ROOT: xRooProjectedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; List of all members ; xRooProjectedPdf Class Reference. . Definition at line 7144 of file xRooNode.cxx. Public Member Functions; TObject * clone (const char *newname) const override;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  Public Member Functions inherited from RooProjectedPdf;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:72,Guid,Guide,72,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['Guid'],['Guide']
Usability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false) ; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: DataOptions.h 31180 2009-11-16 10:54:05Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__DataOptions.html:303,simpl,simple,303,root/html526/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__DataOptions.html,1,['simpl'],['simple']
Usability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false) ; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: DataOptions.h 31180 2009-11-16 10:54:05Z moneta $ » Last generated: 2010-09-23 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__DataOptions.html:303,simpl,simple,303,root/html528/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__DataOptions.html,1,['simpl'],['simple']
Usability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false) ; boolfExpErrorsuse expected errors from the function and not from the data ; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__DataOptions.html:305,simpl,simple,305,root/html534/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__DataOptions.html,1,['simpl'],['simple']
Usability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false) ; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: DataOptions.h 31180 2009-11-16 10:54:05Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__DataOptions.html:305,simpl,simple,305,root/html530/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__DataOptions.html,1,['simpl'],['simple']
Usability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false) ; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: DataOptions.h 31180 2009-11-16 10:54:05Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__DataOptions.html:305,simpl,simple,305,root/html532/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__DataOptions.html,1,['simpl'],['simple']
Usability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptionsDataOptions(ROOT::Fit::DataOptions&&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(ROOT::Fit::DataOptions&&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false); boolfExpErrorsuse expected errors from the function and not from the data; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfNormBinVolumenormalize data by a normalized the bin volume ( bin volume divided by a reference value); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__DataOptions.html:305,simpl,simple,305,root/html604/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__DataOptions.html,1,['simpl'],['simple']
Usability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptionsDataOptions(ROOT::Fit::DataOptions&&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(ROOT::Fit::DataOptions&&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false); boolfExpErrorsuse expected errors from the function and not from the data; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__DataOptions.html:305,simpl,simple,305,root/html602/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__DataOptions.html,1,['simpl'],['simple']
Usability,". ROOT::Math::Functor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Functor. class ROOT::Math::Functor: public ROOT::Math::IBaseFunctionMultiDim. Documentation for class Functor class.; It is used to wrap in a very simple and convenient way multi-dimensional function objects.; It can wrap all the following types:; <ul>; <li> any C++ callable object implemention double operator()( const double * ); <li> a free C function of type double ()(double * ); <li> a member function with the correct signature like Foo::Eval(const double * ).; In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); </ul>; The function dimension is required when constructing the functor. @ingroup GenFunc. Function Members (Methods); public:. virtual~Functor(); virtual ROOT::Math::Functor::ImplBase*Clone() const; ROOT::Math::FunctorFunctor(); ROOT::Math::FunctorFunctor(const ROOT::Math::Functor&); ROOT::Math::FunctorFunctor(void* p, unsigned int dim, const char* className = 0, const char* methodName = 0); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::Functor&operator=(const ROOT::Math::Functor& rhs). private:. virtual doubleDoEval(const double* x) const. Data Members; private:. auto_ptr<ROOT::Math::IBaseFunctionMultiDim>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). unsigned int NDim() const; constructor for multi-dimensional functions. double DoEval(const double* x) const. Functor(). Default constructor. {}. Functor(const PtrObj& p, MemFn memFn, unsigned int dim ). construct from a pointer to member function (multi-dim type). {}. Functor( const Func & f, unsigne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Functor.html:391,simpl,simple,391,root/html526/ROOT__Math__Functor.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Functor.html,2,['simpl'],['simple']
Usability,". ROOT::Math::Functor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Functor. class ROOT::Math::Functor: public ROOT::Math::IBaseFunctionMultiDim. Documentation for class Functor class.; It is used to wrap in a very simple and convenient way multi-dimensional function objects.; It can wrap all the following types:; <ul>; <li> any C++ callable object implemention double operator()( const double * ); <li> a free C function of type double ()(double * ); <li> a member function with the correct signature like Foo::Eval(const double * ).; In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); </ul>; The function dimension is required when constructing the functor. @ingroup GenFunc. Function Members (Methods); public:. virtual~Functor(); virtual ROOT::Math::Functor::ImplBase*Clone() const; ROOT::Math::FunctorFunctor(); ROOT::Math::FunctorFunctor(const ROOT::Math::Functor&); ROOT::Math::FunctorFunctor(void* p, unsigned int dim, const char* className = 0, const char* methodName = 0); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::Functor&operator=(const ROOT::Math::Functor& rhs). private:. virtual doubleDoEval(const double* x) const. Data Members; private:. auto_ptr<ROOT::Math::IBaseFunctionMultiDim>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). unsigned int NDim() const; constructor for multi-dimensional functions. double DoEval(const double* x) const. Functor(). Default constructor. {}. Functor(const PtrObj& p, MemFn memFn, unsigned int dim ). construct from a pointer to member function (multi-dim type). {}. Functor( const Func & f, unsig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Functor.html:393,simpl,simple,393,root/html530/ROOT__Math__Functor.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Functor.html,2,['simpl'],['simple']
Usability,". ROOT::Math::Functor1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Functor1D. class ROOT::Math::Functor1D: public ROOT::Math::IBaseFunctionOneDim. Documentation for class Functor class.; It is used to wrap in a very simple and convenient way multi-dimensional function objects.; It can wrap all the following types:; <ul>; <li> any C++ callable object implemention double operator()( const double * ); <li> a free C function of type double ()(double * ); <li> a member function with the correct signature like Foo::Eval(const double * ).; In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); </ul>; The function dimension is required when constructing the functor. @ingroup GenFunc. Function Members (Methods); public:. virtual~Functor1D(); virtual ROOT::Math::Functor1D::ImplBase*Clone() const; ROOT::Math::Functor1DFunctor1D(); ROOT::Math::Functor1DFunctor1D(const ROOT::Math::Functor1D&); ROOT::Math::Functor1DFunctor1D(void* p, const char* className = 0, const char* methodName = 0); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::Functor1D&operator=(const ROOT::Math::Functor1D& rhs). private:. virtual doubleDoEval(double x) const. Data Members; private:. auto_ptr<ROOT::Math::IBaseFunctionOneDim>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). double DoEval(double x) const. Functor1D(). Default constructor. {}. Functor1D(const PtrObj& p, MemFn memFn). construct from a pointer to member function (1D type). {}. Functor1D(const ROOT::Math::Functor1D& ). construct from a callable object with the right signature; im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Functor1D.html:395,simpl,simple,395,root/html526/ROOT__Math__Functor1D.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Functor1D.html,2,['simpl'],['simple']
Usability,". ROOT::Math::Functor1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Functor1D. class ROOT::Math::Functor1D: public ROOT::Math::IBaseFunctionOneDim. Documentation for class Functor class.; It is used to wrap in a very simple and convenient way multi-dimensional function objects.; It can wrap all the following types:; <ul>; <li> any C++ callable object implemention double operator()( const double * ); <li> a free C function of type double ()(double * ); <li> a member function with the correct signature like Foo::Eval(const double * ).; In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); </ul>; The function dimension is required when constructing the functor. @ingroup GenFunc. Function Members (Methods); public:. virtual~Functor1D(); virtual ROOT::Math::Functor1D::ImplBase*Clone() const; ROOT::Math::Functor1DFunctor1D(); ROOT::Math::Functor1DFunctor1D(const ROOT::Math::Functor1D&); ROOT::Math::Functor1DFunctor1D(void* p, const char* className = 0, const char* methodName = 0); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::Functor1D&operator=(const ROOT::Math::Functor1D& rhs). private:. virtual doubleDoEval(double x) const. Data Members; private:. auto_ptr<ROOT::Math::IBaseFunctionOneDim>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). double DoEval(double x) const. Functor1D(). Default constructor. {}. Functor1D(const PtrObj& p, MemFn memFn). construct from a pointer to member function (1D type). {}. Functor1D(const ROOT::Math::Functor1D& ). construct from a callable object with the right signature; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Functor1D.html:397,simpl,simple,397,root/html530/ROOT__Math__Functor1D.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Functor1D.html,2,['simpl'],['simple']
Usability,". ROOT::Math::GSLMinimizer1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer1D. class ROOT::Math::GSLMinimizer1D: public ROOT::Math::IMinimizer1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be choosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods); public:. virtual~GSLMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::GSLMinimizer1DGSLMinimizer1D(ROOT::Math::Minim1D::Type type = Minim1D::kBRENT); intIterate(); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; voidSetFunction(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); virtual intStatus() const; static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMinimizer1D.html:738,simpl,simplest,738,root/html528/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMinimizer1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::GSLMinimizer1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer1D. class ROOT::Math::GSLMinimizer1D: public ROOT::Math::IMinimizer1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be choosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods); public:. virtual~GSLMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::GSLMinimizer1DGSLMinimizer1D(ROOT::Math::Minim1D::Type type = Minim1D::kBRENT); intIterate(); virtual intIterations() const; virtual intMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; voidSetFunction(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; doublefUp; doublefXlow; doublefXmin; doublefXup. Class Charts. Inheritance; Inherited Members; In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMinimizer1D.html:738,simpl,simplest,738,root/html526/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMinimizer1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::GSLMinimizer1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer1D. class ROOT::Math::GSLMinimizer1D: public ROOT::Math::IMinimizer1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be choosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods); public:. virtual~GSLMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::GSLMinimizer1DGSLMinimizer1D(ROOT::Math::Minim1D::Type type = Minim1D::kBRENT); intIterate(); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; voidSetFunction(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); virtual intStatus() const; static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMinimizer1D.html:740,simpl,simplest,740,root/html530/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMinimizer1D.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::GSLMinimizer1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer1D. class ROOT::Math::GSLMinimizer1D: public ROOT::Math::IMinimizer1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be chosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods); public:. virtual~GSLMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::GSLMinimizer1DGSLMinimizer1D(ROOT::Math::Minim1D::Type type = Minim1D::kBRENT); ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(); ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(const ROOT::Math::IMinimizer1D&); intIterate(); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; voidSetFunction(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); virtual intStatus() const; static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunctio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMinimizer1D.html:739,simpl,simplest,739,root/html602/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMinimizer1D.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::GSLMinimizer1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer1D. class ROOT::Math::GSLMinimizer1D: public ROOT::Math::IMinimizer1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be chosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods); public:. virtual~GSLMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::GSLMinimizer1DGSLMinimizer1D(ROOT::Math::Minim1D::Type type = Minim1D::kBRENT); intIterate(); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; voidSetFunction(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); virtual intStatus() const; static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLMinimizer1D.html:739,simpl,simplest,739,root/html534/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLMinimizer1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::GradFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GradFunctor. class ROOT::Math::GradFunctor: public ROOT::Math::IGradientFunctionMultiDim. Documentation for class Functor class.; It is used to wrap in a very simple and convenient way multi-dimensional function objects.; It can wrap all the following types:; <ul>; <li> any C++ callable object implemention double operator()( const double * ); <li> a free C function of type double ()(double * ); <li> a member function with the correct signature like Foo::Eval(const double * ).; In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); </ul>; The function dimension is required when constructing the functor. @ingroup GenFunc. Function Members (Methods); public:. virtual~GradFunctor(); virtual ROOT::Math::GradFunctor::ImplBase*Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; ROOT::Math::GradFunctorGradFunctor(); ROOT::Math::GradFunctorGradFunctor(const ROOT::Math::GradFunctor&); ROOT::Math::GradFunctorGradFunctor(void* p1, void* p2, unsigned int dim); ROOT::Math::GradFunctorGradFunctor(void* p1, unsigned int dim, const char* className, const char* methodName, const char* derivName); virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::GradFunctor&operator=(const ROOT::Math::GradFunctor& rhs). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const. Data Members; private:. auto_ptr<ROOT::Math::IGradie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GradFunctor.html:407,simpl,simple,407,root/html526/ROOT__Math__GradFunctor.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GradFunctor.html,2,['simpl'],['simple']
Usability,". ROOT::Math::GradFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GradFunctor. class ROOT::Math::GradFunctor: public ROOT::Math::IGradientFunctionMultiDim. Documentation for class Functor class.; It is used to wrap in a very simple and convenient way multi-dimensional function objects.; It can wrap all the following types:; <ul>; <li> any C++ callable object implemention double operator()( const double * ); <li> a free C function of type double ()(double * ); <li> a member function with the correct signature like Foo::Eval(const double * ).; In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); </ul>; The function dimension is required when constructing the functor. @ingroup GenFunc. Function Members (Methods); public:. virtual~GradFunctor(); virtual ROOT::Math::GradFunctor::ImplBase*Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; ROOT::Math::GradFunctorGradFunctor(); ROOT::Math::GradFunctorGradFunctor(const ROOT::Math::GradFunctor&); ROOT::Math::GradFunctorGradFunctor(void* p1, void* p2, unsigned int dim); ROOT::Math::GradFunctorGradFunctor(void* p1, unsigned int dim, const char* className, const char* methodName, const char* derivName); virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::GradFunctor&operator=(const ROOT::Math::GradFunctor& rhs). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const. Data Members; private:. auto_ptr<ROOT::Math::IGrad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GradFunctor.html:409,simpl,simple,409,root/html530/ROOT__Math__GradFunctor.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GradFunctor.html,2,['simpl'],['simple']
Usability,". ROOT::Math::GradFunctor1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GradFunctor1D. class ROOT::Math::GradFunctor1D: public ROOT::Math::IGradientFunctionOneDim. Documentation for class Functor class.; It is used to wrap in a very simple and convenient way multi-dimensional function objects.; It can wrap all the following types:; <ul>; <li> any C++ callable object implemention double operator()( const double * ); <li> a free C function of type double ()(double * ); <li> a member function with the correct signature like Foo::Eval(const double * ).; In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); </ul>; The function dimension is required when constructing the functor. @ingroup GenFunc. Function Members (Methods); public:. virtual~GradFunctor1D(); virtual ROOT::Math::GradFunctor1D::ImplBase*Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidROOT::Math::IGradientFunctionOneDim::FdF(double x, double& f, double& df) const; ROOT::Math::GradFunctor1DGradFunctor1D(); ROOT::Math::GradFunctor1DGradFunctor1D(const ROOT::Math::GradFunctor1D&); ROOT::Math::GradFunctor1DGradFunctor1D(void* p1, void* p2); ROOT::Math::GradFunctor1DGradFunctor1D(void* p1, const char* className, const char* methodName, const char* derivName); voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::GradFunctor1D&operator=(const ROOT::Math::GradFunctor1D& rhs). private:. virtual doubleDoDerivative(double x) const; virtual doubleDoEval(double x) const. Data Members; private:. auto_ptr<ROOT::Math::IGradientFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GradFunctor1D.html:411,simpl,simple,411,root/html526/ROOT__Math__GradFunctor1D.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GradFunctor1D.html,2,['simpl'],['simple']
Usability,". ROOT::Math::GradFunctor1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GradFunctor1D. class ROOT::Math::GradFunctor1D: public ROOT::Math::IGradientFunctionOneDim. Documentation for class Functor class.; It is used to wrap in a very simple and convenient way multi-dimensional function objects.; It can wrap all the following types:; <ul>; <li> any C++ callable object implemention double operator()( const double * ); <li> a free C function of type double ()(double * ); <li> a member function with the correct signature like Foo::Eval(const double * ).; In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); </ul>; The function dimension is required when constructing the functor. @ingroup GenFunc. Function Members (Methods); public:. virtual~GradFunctor1D(); virtual ROOT::Math::GradFunctor1D::ImplBase*Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidROOT::Math::IGradientFunctionOneDim::FdF(double x, double& f, double& df) const; ROOT::Math::GradFunctor1DGradFunctor1D(); ROOT::Math::GradFunctor1DGradFunctor1D(const ROOT::Math::GradFunctor1D&); ROOT::Math::GradFunctor1DGradFunctor1D(void* p1, void* p2); ROOT::Math::GradFunctor1DGradFunctor1D(void* p1, const char* className, const char* methodName, const char* derivName); voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::GradFunctor1D&operator=(const ROOT::Math::GradFunctor1D& rhs). private:. virtual doubleDoDerivative(double x) const; virtual doubleDoEval(double x) const. Data Members; private:. auto_ptr<ROOT::Math::IGradient",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GradFunctor1D.html:413,simpl,simple,413,root/html530/ROOT__Math__GradFunctor1D.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GradFunctor1D.html,2,['simpl'],['simple']
Usability,". ROOT::Math::Minim1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Minim1D. namespace ROOT::Math::Minim1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be choosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer1D.h 24477 2008-06-23 12:58:47Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minim1D.html:692,simpl,simplest,692,root/html526/ROOT__Math__Minim1D.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minim1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Minim1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Minim1D. namespace ROOT::Math::Minim1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be choosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer1D.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Minim1D.html:692,simpl,simplest,692,root/html528/ROOT__Math__Minim1D.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Minim1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Minim1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Minim1D. namespace ROOT::Math::Minim1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be choosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer1D.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Minim1D.html:694,simpl,simplest,694,root/html530/ROOT__Math__Minim1D.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Minim1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Minim1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Minim1D. namespace ROOT::Math::Minim1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be choosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer1D.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__Minim1D.html:694,simpl,simplest,694,root/html532/ROOT__Math__Minim1D.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__Minim1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Minim1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Minim1D. namespace ROOT::Math::Minim1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be chosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Minim1D.html:693,simpl,simplest,693,root/html602/ROOT__Math__Minim1D.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minim1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Minim1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Minim1D. namespace ROOT::Math::Minim1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be chosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minim1D.html:693,simpl,simplest,693,root/html534/ROOT__Math__Minim1D.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minim1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Minim1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Minim1D. namespace ROOT::Math::Minim1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be chosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__Minim1D.html:693,simpl,simplest,693,root/html604/ROOT__Math__Minim1D.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__Minim1D.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots. namespace ROOT::Math::Roots. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods). Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: RootFinderAlgorithms.h 21553 2007-12-21 10:55:46Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Roots.html:322,simpl,simplest,322,root/html526/ROOT__Math__Roots.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Roots.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots. namespace ROOT::Math::Roots. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods). Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: RootFinderAlgorithms.h 21553 2007-12-21 10:55:46Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Roots.html:322,simpl,simplest,322,root/html528/ROOT__Math__Roots.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Roots.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots. namespace ROOT::Math::Roots. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods). Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: RootFinderAlgorithms.h 21553 2007-12-21 10:55:46Z moneta $ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Roots.html:324,simpl,simplest,324,root/html530/ROOT__Math__Roots.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Roots.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots. namespace ROOT::Math::Roots. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods). Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: RootFinderAlgorithms.h 21553 2007-12-21 10:55:46Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__Roots.html:324,simpl,simplest,324,root/html532/ROOT__Math__Roots.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__Roots.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots. namespace ROOT::Math::Roots. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods). Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Roots.html:323,simpl,simplest,323,root/html602/ROOT__Math__Roots.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots. namespace ROOT::Math::Roots. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods). Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Roots.html:323,simpl,simplest,323,root/html534/ROOT__Math__Roots.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Roots.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots. namespace ROOT::Math::Roots. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods). Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__Roots.html:323,simpl,simplest,323,root/html604/ROOT__Math__Roots.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__Roots.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Bisection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Bisection. class ROOT::Math::Roots::Bisection: public ROOT::Math::GSLRootFinder. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Bisection(); ROOT::Math::Roots::BisectionBisection(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BisectionBisection(const ROOT::Math::Roots::Bisection&); ROOT::Math::Roots::Bisection&operator=(const ROOT::Math::Roots::Bisection&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bisection(). virtual ~Bisection(). Bisection(const ROOT::Math::Roots::Bisection& ); usually copying is non triv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Roots__Bisection.html:381,simpl,simplest,381,root/html528/ROOT__Math__Roots__Bisection.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Roots__Bisection.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Bisection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Bisection. class ROOT::Math::Roots::Bisection: public ROOT::Math::GSLRootFinder. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Bisection(); ROOT::Math::Roots::BisectionBisection(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual intROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual intROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); intROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual intROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6). protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BisectionBisection(const ROOT::Math::Roots::Bisection&); ROOT::Math::Roots::Bisection&operator=(const ROOT::Math::Roots::Bisection&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bisection(). virtual ~Bisection(). Bisection(const ROOT::Math::Roots::Bisection& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Roots__Bisection.html:381,simpl,simplest,381,root/html526/ROOT__Math__Roots__Bisection.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Roots__Bisection.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Bisection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Bisection. class ROOT::Math::Roots::Bisection: public ROOT::Math::GSLRootFinder. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Bisection(); ROOT::Math::Roots::BisectionBisection(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BisectionBisection(const ROOT::Math::Roots::Bisection&); ROOT::Math::Roots::Bisection&operator=(const ROOT::Math::Roots::Bisection&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bisection(). virtual ~Bisection(). Bisection(const ROOT::Math::Roots::Bisection& ); usually copying is non tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Roots__Bisection.html:383,simpl,simplest,383,root/html530/ROOT__Math__Roots__Bisection.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Roots__Bisection.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Bisection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Bisection. class ROOT::Math::Roots::Bisection: public ROOT::Math::GSLRootFinder. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Bisection(); ROOT::Math::Roots::BisectionBisection(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BisectionBisection(const ROOT::Math::Roots::Bisection&); ROOT::Math::Roots::Bisection&operator=(const ROOT::Math::Roots::Bisection&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bise",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Roots__Bisection.html:382,simpl,simplest,382,root/html602/ROOT__Math__Roots__Bisection.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Bisection.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Bisection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Bisection. class ROOT::Math::Roots::Bisection: public ROOT::Math::GSLRootFinder. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Bisection(); ROOT::Math::Roots::BisectionBisection(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BisectionBisection(const ROOT::Math::Roots::Bisection&); ROOT::Math::Roots::Bisection&operator=(const ROOT::Math::Roots::Bisection&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bisection(). virtual ~Bisection(). Bisection(const ROOT::Math::Roots::Bisection& ); usually copying is non trivi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Roots__Bisection.html:382,simpl,simplest,382,root/html534/ROOT__Math__Roots__Bisection.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Roots__Bisection.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Brent. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Brent. class ROOT::Math::Roots::Brent: public ROOT::Math::GSLRootFinder. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Brent(); ROOT::Math::Roots::BrentBrent(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BrentBrent(const ROOT::Math::Roots::Brent&); ROOT::Math::Roots::Brent&operator=(const ROOT::Math::Roots::Brent&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Brent(). virtual ~Brent(). Brent(const ROOT::Math::Roots::Brent& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Z",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Roots__Brent.html:369,simpl,simplest,369,root/html528/ROOT__Math__Roots__Brent.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Roots__Brent.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Brent. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Brent. class ROOT::Math::Roots::Brent: public ROOT::Math::GSLRootFinder. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Brent(); ROOT::Math::Roots::BrentBrent(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual intROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual intROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); intROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual intROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6). protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BrentBrent(const ROOT::Math::Roots::Brent&); ROOT::Math::Roots::Brent&operator=(const ROOT::Math::Roots::Brent&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Brent(). virtual ~Brent(). Brent(const ROOT::Math::Roots::Brent& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Roots__Brent.html:369,simpl,simplest,369,root/html526/ROOT__Math__Roots__Brent.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Roots__Brent.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Brent. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Brent. class ROOT::Math::Roots::Brent: public ROOT::Math::GSLRootFinder. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Brent(); ROOT::Math::Roots::BrentBrent(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BrentBrent(const ROOT::Math::Roots::Brent&); ROOT::Math::Roots::Brent&operator=(const ROOT::Math::Roots::Brent&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Brent(). virtual ~Brent(). Brent(const ROOT::Math::Roots::Brent& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Roots__Brent.html:371,simpl,simplest,371,root/html530/ROOT__Math__Roots__Brent.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Roots__Brent.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Brent. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Brent. class ROOT::Math::Roots::Brent: public ROOT::Math::GSLRootFinder. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Brent(); ROOT::Math::Roots::BrentBrent(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BrentBrent(const ROOT::Math::Roots::Brent&); ROOT::Math::Roots::Brent&operator=(const ROOT::Math::Roots::Brent&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Brent(). virtual ~Brent(). Brent(const ROOT::Mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Roots__Brent.html:370,simpl,simplest,370,root/html602/ROOT__Math__Roots__Brent.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Brent.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Brent. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Brent. class ROOT::Math::Roots::Brent: public ROOT::Math::GSLRootFinder. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Brent(); ROOT::Math::Roots::BrentBrent(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BrentBrent(const ROOT::Math::Roots::Brent&); ROOT::Math::Roots::Brent&operator=(const ROOT::Math::Roots::Brent&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Brent(). virtual ~Brent(). Brent(const ROOT::Math::Roots::Brent& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Roots__Brent.html:370,simpl,simplest,370,root/html534/ROOT__Math__Roots__Brent.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Roots__Brent.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::Roots::Newton. ROOT::Math::Roots::Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::VirtualIntegratorMultiDim←. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::GSLMCIntegrator. ROOT::Math::VirtualIntegratorOneDim←. ROOT::Math::GSLIntegrator. ROOT::Math::GaussIntegrator. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::WrappedMultiTF1. ROOT::Math::WrappedTF1. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FCNBase←. ROOT::Minuit2::FCNGradientBase; ←. TFcnAdapter. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FCNGradientBase←. TFcnAdapter. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::Minuit2Minimizer. ROOT::Minuit2::MnFumiliMinimize. ROOT::Minuit2::MnMigrad. ROOT::Minuit2::MnMinimize. ROOT::Minuit2::MnScan. ROOT::Minuit2::MnSimplex. ROOT::Minuit2::ModularFunctionMinimizer←. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::TArrayProxy<ROOT::TArrayType<bool,0> >. ROOT::TArrayProxy<ROOT::TArrayType<char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<double,0> >. ROOT::TArrayProxy<ROOT::TArrayType<float,0> >. ROOT::TArrayProxy<ROOT::TArrayType<int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<short,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> >. ROOT::TBranchProxyClassDescriptor. ROOT::TBranchProxyDescriptor. ROOT::TClaArrayProxy<ROOT::TArrayType<bool,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<char,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<double,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<float,0> >. ROOT::TClaArrayProxy<ROOT::TArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassHierarchy.html:4103,Simpl,SimplexMinimizer,4103,root/html526/ClassHierarchy.html,https://root.cern,https://root.cern/root/html526/ClassHierarchy.html,1,['Simpl'],['SimplexMinimizer']
Usability,". ROOT::Math::Roots::FalsePos. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::FalsePos. class ROOT::Math::Roots::FalsePos: public ROOT::Math::GSLRootFinder. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~FalsePos(); ROOT::Math::Roots::FalsePosFalsePos(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::FalsePosFalsePos(const ROOT::Math::Roots::FalsePos&); ROOT::Math::Roots::FalsePos&operator=(const ROOT::Math::Roots::FalsePos&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FalsePos(). virtual ~FalsePos(). FalsePos(const ROOT::Math::Roots::FalsePos& ); usually copying is non trivial, so we make",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Roots__FalsePos.html:378,simpl,simplest,378,root/html528/ROOT__Math__Roots__FalsePos.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Roots__FalsePos.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::FalsePos. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::FalsePos. class ROOT::Math::Roots::FalsePos: public ROOT::Math::GSLRootFinder. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~FalsePos(); ROOT::Math::Roots::FalsePosFalsePos(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual intROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual intROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); intROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual intROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6). protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::FalsePosFalsePos(const ROOT::Math::Roots::FalsePos&); ROOT::Math::Roots::FalsePos&operator=(const ROOT::Math::Roots::FalsePos&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FalsePos(). virtual ~FalsePos(). FalsePos(const ROOT::Math::Roots::FalsePos& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Roots__FalsePos.html:378,simpl,simplest,378,root/html526/ROOT__Math__Roots__FalsePos.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Roots__FalsePos.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::FalsePos. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::FalsePos. class ROOT::Math::Roots::FalsePos: public ROOT::Math::GSLRootFinder. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~FalsePos(); ROOT::Math::Roots::FalsePosFalsePos(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::FalsePosFalsePos(const ROOT::Math::Roots::FalsePos&); ROOT::Math::Roots::FalsePos&operator=(const ROOT::Math::Roots::FalsePos&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FalsePos(). virtual ~FalsePos(). FalsePos(const ROOT::Math::Roots::FalsePos& ); usually copying is non trivial, so we ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Roots__FalsePos.html:380,simpl,simplest,380,root/html530/ROOT__Math__Roots__FalsePos.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Roots__FalsePos.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::FalsePos. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::FalsePos. class ROOT::Math::Roots::FalsePos: public ROOT::Math::GSLRootFinder. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~FalsePos(); ROOT::Math::Roots::FalsePosFalsePos(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::FalsePosFalsePos(const ROOT::Math::Roots::FalsePos&); ROOT::Math::Roots::FalsePos&operator=(const ROOT::Math::Roots::FalsePos&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FalsePos(). vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Roots__FalsePos.html:379,simpl,simplest,379,root/html602/ROOT__Math__Roots__FalsePos.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__FalsePos.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::FalsePos. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::FalsePos. class ROOT::Math::Roots::FalsePos: public ROOT::Math::GSLRootFinder. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~FalsePos(); ROOT::Math::Roots::FalsePosFalsePos(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::FalsePosFalsePos(const ROOT::Math::Roots::FalsePos&); ROOT::Math::Roots::FalsePos&operator=(const ROOT::Math::Roots::FalsePos&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FalsePos(). virtual ~FalsePos(). FalsePos(const ROOT::Math::Roots::FalsePos& ); usually copying is non trivial, so we make ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Roots__FalsePos.html:379,simpl,simplest,379,root/html534/ROOT__Math__Roots__FalsePos.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Roots__FalsePos.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Newton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Newton. class ROOT::Math::Roots::Newton: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Newton(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; ROOT::Math::Roots::NewtonNewton(); virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::NewtonNewton(const ROOT::Math::Roots::Newton&); ROOT::Math::Roots::Newton&operator=(const ROOT::Math::Roots::Newton&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Roots__Newton.html:377,simpl,simplest,377,root/html528/ROOT__Math__Roots__Newton.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Roots__Newton.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Newton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Newton. class ROOT::Math::Roots::Newton: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Newton(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; ROOT::Math::Roots::NewtonNewton(); virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual intROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual intROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); intROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual intROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::NewtonNewton(const ROOT::Math::Roots::Newton&); ROOT::Math::Roots::Newton&operator=(const ROOT::Math::Roots::Newton&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Newton(). virtual ~Newton(). Newton(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Roots__Newton.html:377,simpl,simplest,377,root/html526/ROOT__Math__Roots__Newton.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Roots__Newton.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Newton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Newton. class ROOT::Math::Roots::Newton: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Newton(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; ROOT::Math::Roots::NewtonNewton(); virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::NewtonNewton(const ROOT::Math::Roots::Newton&); ROOT::Math::Roots::Newton&operator=(const ROOT::Math::Roots::Newton&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Roots__Newton.html:379,simpl,simplest,379,root/html530/ROOT__Math__Roots__Newton.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Roots__Newton.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Newton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Newton. class ROOT::Math::Roots::Newton: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Newton(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; ROOT::Math::Roots::NewtonNewton(); virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::NewtonNewton(const ROOT::Math::Roots::Newton&); ROOT::Math::Roots::Newton&operator=(const ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Roots__Newton.html:378,simpl,simplest,378,root/html602/ROOT__Math__Roots__Newton.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Newton.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Newton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Newton. class ROOT::Math::Roots::Newton: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Newton(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; ROOT::Math::Roots::NewtonNewton(); virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::NewtonNewton(const ROOT::Math::Roots::Newton&); ROOT::Math::Roots::Newton&operator=(const ROOT::Math::Roots::Newton&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Roots__Newton.html:378,simpl,simplest,378,root/html534/ROOT__Math__Roots__Newton.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Roots__Newton.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Secant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Secant. class ROOT::Math::Roots::Secant: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Secant(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; ROOT::Math::Roots::SecantSecant(); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Secant&operator=(const ROOT::Math::Roots::Secant&); ROOT::Math::Roots::SecantSecant(const ROOT::Math::Roots::Secant&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Roots__Secant.html:377,simpl,simplest,377,root/html528/ROOT__Math__Roots__Secant.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Roots__Secant.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Secant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Secant. class ROOT::Math::Roots::Secant: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Secant(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; ROOT::Math::Roots::SecantSecant(); virtual intROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual intROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); intROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual intROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Secant&operator=(const ROOT::Math::Roots::Secant&); ROOT::Math::Roots::SecantSecant(const ROOT::Math::Roots::Secant&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Secant(). virtual ~Secant(). Secant(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Roots__Secant.html:377,simpl,simplest,377,root/html526/ROOT__Math__Roots__Secant.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Roots__Secant.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Secant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Secant. class ROOT::Math::Roots::Secant: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Secant(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; ROOT::Math::Roots::SecantSecant(); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Secant&operator=(const ROOT::Math::Roots::Secant&); ROOT::Math::Roots::SecantSecant(const ROOT::Math::Roots::Secant&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Roots__Secant.html:379,simpl,simplest,379,root/html530/ROOT__Math__Roots__Secant.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Roots__Secant.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Secant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Secant. class ROOT::Math::Roots::Secant: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Secant(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; ROOT::Math::Roots::SecantSecant(); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Secant&operator=(const ROOT::Math::Roots::Secant&); ROOT::Math::Roots::SecantSecant(const ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Roots__Secant.html:378,simpl,simplest,378,root/html602/ROOT__Math__Roots__Secant.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Secant.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Secant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Secant. class ROOT::Math::Roots::Secant: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Secant(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; ROOT::Math::Roots::SecantSecant(); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Secant&operator=(const ROOT::Math::Roots::Secant&); ROOT::Math::Roots::SecantSecant(const ROOT::Math::Roots::Secant&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Roots__Secant.html:378,simpl,simplest,378,root/html534/ROOT__Math__Roots__Secant.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Roots__Secant.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Steffenson. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Steffenson. class ROOT::Math::Roots::Steffenson: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Steffenson(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const; ROOT::Math::Roots::SteffensonSteffenson(). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Steffenson&operator=(const ROOT::Math::Roots::Steffenson&); ROOT::Math::Roots::SteffensonSteffenson(const ROOT::Math::Roots::Steffenson&). Class Charts. Inheritance;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Roots__Steffenson.html:389,simpl,simplest,389,root/html528/ROOT__Math__Roots__Steffenson.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Roots__Steffenson.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Steffenson. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Steffenson. class ROOT::Math::Roots::Steffenson: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Steffenson(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual intROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual intROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); intROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual intROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6); ROOT::Math::Roots::SteffensonSteffenson(). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Steffenson&operator=(const ROOT::Math::Roots::Steffenson&); ROOT::Math::Roots::SteffensonSteffenson(const ROOT::Math::Roots::Steffenson&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Roots__Steffenson.html:389,simpl,simplest,389,root/html526/ROOT__Math__Roots__Steffenson.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Roots__Steffenson.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Steffenson. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Steffenson. class ROOT::Math::Roots::Steffenson: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; 	Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; 	See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; 	@ingroup RootFinders. Function Members (Methods); public:. virtual~Steffenson(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const; ROOT::Math::Roots::SteffensonSteffenson(). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Steffenson&operator=(const ROOT::Math::Roots::Steffenson&); ROOT::Math::Roots::SteffensonSteffenson(const ROOT::Math::Roots::Steffenson&). Class Charts. Inheritanc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Roots__Steffenson.html:391,simpl,simplest,391,root/html530/ROOT__Math__Roots__Steffenson.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Roots__Steffenson.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Steffenson. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Steffenson. class ROOT::Math::Roots::Steffenson: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Steffenson(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const; ROOT::Math::Roots::SteffensonSteffenson(). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Steffenson&operator=(const ROOT::Math::Roots::Steffenson&); ROOT::Math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Roots__Steffenson.html:390,simpl,simplest,390,root/html602/ROOT__Math__Roots__Steffenson.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Steffenson.html,2,['simpl'],['simplest']
Usability,". ROOT::Math::Roots::Steffenson. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Steffenson. class ROOT::Math::Roots::Steffenson: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Steffenson(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGenFunction&, double, double); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const; ROOT::Math::Roots::SteffensonSteffenson(). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Steffenson&operator=(const ROOT::Math::Roots::Steffenson&); ROOT::Math::Roots::SteffensonSteffenson(const ROOT::Math::Roots::Steffenson&). Class Charts. Inheritance; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Roots__Steffenson.html:390,simpl,simplest,390,root/html534/ROOT__Math__Roots__Steffenson.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Roots__Steffenson.html,1,['simpl'],['simplest']
Usability,". ROOT::Math::Transform3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Transform3D. class ROOT::Math::Transform3D. Basic 3D Transformation class describing a rotation and then a translation; The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data.; They are represented and held in this class like a 3x4 matrix (a simple array of 12 numbers). The class can be constructed from any 3D rotation object; (ROOT::Math::Rotation3D, ROOT::Math::AxisAngle, ROOT::Math::Quaternion, etc...) and/or; a 3D Vector (ROOT::Math::DislacementVector3D or via ROOT::Math::Translation ) representing a Translation.; The Transformation is defined by applying first the rotation and then the translation.; A transformation defined by applying first a translation and then a rotation is equivalent to the; transformation obtained applying first the rotation and then a translation equivalent to the rotated vector.; The operator * can be used to obtain directly such transformations, in addition to combine various; transformations.; Keep in mind that the operator * (like in the case of rotations ) is not commutative.; The operator * is used (in addition to operator() ) to apply a transformations on the vector; (DisplacementVector3D and LorentzVector classes) and point (PositionVector3D) classes.; In the case of Vector objects the transformation only rotates them and does not translate them.; Only Point objects are able to be both rotated and translated. @ingroup GenVector. Function Members (Methods); public:. ~Transform3D(); voidGetComponents(double* begin) const; voidGetComponents(double& xx, double& xy, double& xz, double& dx, double& yx, double& yy, double& yz, double& dy, double& zx, double& zy, double& zz, double& dz) const; voidGetDecomposition(ROOT::Math::Rotation3D& r, ROOT::Math::Trans",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Transform3D.html:528,simpl,simple,528,root/html526/ROOT__Math__Transform3D.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Transform3D.html,2,['simpl'],['simple']
Usability,". ROOT::Math::Transform3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Transform3D. class ROOT::Math::Transform3D. Basic 3D Transformation class describing a rotation and then a translation; The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data.; They are represented and held in this class like a 3x4 matrix (a simple array of 12 numbers). The class can be constructed from any 3D rotation object; (ROOT::Math::Rotation3D, ROOT::Math::AxisAngle, ROOT::Math::Quaternion, etc...) and/or; a 3D Vector (ROOT::Math::DislacementVector3D or via ROOT::Math::Translation ) representing a Translation.; The Transformation is defined by applying first the rotation and then the translation.; A transformation defined by applying first a translation and then a rotation is equivalent to the; transformation obtained applying first the rotation and then a translation equivalent to the rotated vector.; The operator * can be used to obtain directly such transformations, in addition to combine various; transformations.; Keep in mind that the operator * (like in the case of rotations ) is not commutative.; The operator * is used (in addition to operator() ) to apply a transformations on the vector; (DisplacementVector3D and LorentzVector classes) and point (PositionVector3D) classes.; In the case of Vector objects the transformation only rotates them and does not translate them.; Only Point objects are able to be both rotated and translated. @ingroup GenVector. Function Members (Methods); public:. ~Transform3D(); voidGetComponents(double& xx, double& xy, double& xz, double& dx, double& yx, double& yy, double& yz, double& dy, double& zx, double& zy, double& zz, double& dz) const; voidGetDecomposition(ROOT::Math::Rotation3D& r, ROOT::Math::Transform3D::Vector& v) const; voidGetRotat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Transform3D.html:530,simpl,simple,530,root/html602/ROOT__Math__Transform3D.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Transform3D.html,2,['simpl'],['simple']
Usability,". ROOT::Math::Transform3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Transform3D. class ROOT::Math::Transform3D. Basic 3D Transformation class describing a rotation and then a translation; The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data.; They are represented and held in this class like a 3x4 matrix (a simple array of 12 numbers). The class can be constructed from any 3D rotation object; (ROOT::Math::Rotation3D, ROOT::Math::AxisAngle, ROOT::Math::Quaternion, etc...) and/or; a 3D Vector (ROOT::Math::DislacementVector3D or via ROOT::Math::Translation ) representing a Translation.; The Transformation is defined by applying first the rotation and then the translation.; A transformation defined by applying first a translation and then a rotation is equivalent to the; transformation obtained applying first the rotation and then a translation equivalent to the rotated vector.; The operator * can be used to obtain directly such transformations, in addition to combine various; transformations.; Keep in mind that the operator * (like in the case of rotations ) is not commutative.; The operator * is used (in addition to operator() ) to apply a transformations on the vector; (DisplacementVector3D and LorentzVector classes) and point (PositionVector3D) classes.; In the case of Vector objects the transformation only rotates them and does not translate them.; Only Point objects are able to be both rotated and translated. @ingroup GenVector. Function Members (Methods); public:. ~Transform3D(); voidGetComponents(double* begin) const; voidGetComponents(double& xx, double& xy, double& xz, double& dx, double& yx, double& yy, double& yz, double& dy, double& zx, double& zy, double& zz, double& dz) const; voidGetDecomposition(ROOT::Math::Rotation3D& r, ROOT::Math::Tra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Transform3D.html:530,simpl,simple,530,root/html530/ROOT__Math__Transform3D.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Transform3D.html,3,['simpl'],['simple']
Usability,". ROOT::Minuit2::CombinedMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::CombinedMinimizer. class ROOT::Minuit2::CombinedMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__CombinedMinimizer.html:412,Simpl,Simplex,412,root/html526/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__CombinedMinimizer.html,4,"['Simpl', 'simpl']","['Simplex', 'simplex']"
Usability,". ROOT::Minuit2::CombinedMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::CombinedMinimizer. class ROOT::Minuit2::CombinedMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__CombinedMinimizer.html:414,Simpl,Simplex,414,root/html530/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__CombinedMinimizer.html,4,"['Simpl', 'simpl']","['Simplex', 'simplex']"
Usability,". ROOT::Minuit2::CombinedMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::CombinedMinimizer. class ROOT::Minuit2::CombinedMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:414,Simpl,Simplex,414,root/html602/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html,4,"['Simpl', 'simpl']","['Simplex', 'simplex']"
Usability,". ROOT::Minuit2::CombinedMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::CombinedMinimizer. class ROOT::Minuit2::CombinedMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__CombinedMinimizer.html:414,Simpl,Simplex,414,root/html534/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__CombinedMinimizer.html,2,"['Simpl', 'simpl']","['Simplex', 'simplex']"
Usability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls(); unsigned intROOT::Math::Minimizer::MaxIterations(); virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const char* type); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; virtual voidPrintResults(); virtual boolProvidesError() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__Minuit2Minimizer.html:665,Simpl,Simplex,665,root/html528/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__Minuit2Minimizer.html,1,['Simpl'],['Simplex']
Usability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls(); unsigned intROOT::Math::Minimizer::MaxIterations(); virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const char* type); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; virtual voidROOT::Math::Minimizer::PrintResults(); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__Minuit2Minimizer.html:665,Simpl,Simplex,665,root/html526/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__Minuit2Minimizer.html,1,['Simpl'],['Simplex']
Usability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:667,Simpl,Simplex,667,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html,2,['Simpl'],['Simplex']
Usability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html:667,Simpl,Simplex,667,root/html534/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html,1,['Simpl'],['Simplex']
Usability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const char* type); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::MinimizerOptionsROOT::Math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__Minuit2Minimizer.html:667,Simpl,Simplex,667,root/html530/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__Minuit2Minimizer.html,2,['Simpl'],['Simplex']
Usability,". ROOT::Minuit2::MnApplication. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnApplication. class ROOT::Minuit2::MnApplication. application interface class for minimizers (migrad, simplex, Minimize,; Scan); User normally instantiates the derived class like ROOT::Minuit2::MnMigrad; for using Migrad for minimization. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~MnApplication(); voidAdd(const char*, double); voidAdd(const char* Name, double val, double err); voidAdd(const char* Name, double val, double err, double, double); const ROOT::Minuit2::MnUserCovariance&Covariance() const; doubleError(unsigned int) const; doubleError(const char*) const; vector<double>Errors() const; doubleExt2int(unsigned int, double) const; unsigned intExtOfInt(unsigned int) const; virtual const ROOT::Minuit2::FCNBase&Fcnbase() const; voidFix(unsigned int); voidFix(const char*); unsigned intIndex(const char*) const; doubleInt2ext(unsigned int, double) const; unsigned intIntOfExt(unsigned int) const; virtual const ROOT::Minuit2::ModularFunctionMinimizer&Minimizer() const; const vector<ROOT::Minuit2::MinuitParameter>&MinuitParameters() const; const char*Name(unsigned int) const; unsigned intNumOfCalls() const; virtual ROOT::Minuit2::FunctionMinimumoperator()(unsigned int maxfcn = 0, double tolerance = 0.1); const ROOT::Minuit2::MinuitParameter&Parameter(unsigned int i) const; const ROOT::Minuit2::MnUserParameters&Parameters() const; vector<double>Params() const; const ROOT::Minuit2::MnMachinePrecision&Precision() const; voidRelease(unsigned int); voidRelease(const char*); voidRemoveLimits(unsigned int); voidRemoveLimits(const char*); voidSetError(unsigned int, double); voidSetError(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnApplication.html:358,simpl,simplex,358,root/html526/ROOT__Minuit2__MnApplication.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnApplication.html,2,['simpl'],['simplex']
Usability,". ROOT::Minuit2::MnApplication. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnApplication. class ROOT::Minuit2::MnApplication. application interface class for minimizers (migrad, simplex, Minimize,; Scan); User normally instantiates the derived class like ROOT::Minuit2::MnMigrad; for using Migrad for minimization. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~MnApplication(); voidAdd(const char*, double); voidAdd(const char* Name, double val, double err); voidAdd(const char* Name, double val, double err, double, double); const ROOT::Minuit2::MnUserCovariance&Covariance() const; doubleError(unsigned int) const; doubleError(const char*) const; vector<double>Errors() const; doubleExt2int(unsigned int, double) const; unsigned intExtOfInt(unsigned int) const; virtual const ROOT::Minuit2::FCNBase&Fcnbase() const; voidFix(unsigned int); voidFix(const char*); unsigned intIndex(const char*) const; doubleInt2ext(unsigned int, double) const; unsigned intIntOfExt(unsigned int) const; virtual const ROOT::Minuit2::ModularFunctionMinimizer&Minimizer() const; const vector<ROOT::Minuit2::MinuitParameter>&MinuitParameters() const; ROOT::Minuit2::MnApplicationMnApplication(const ROOT::Minuit2::MnApplication&); ROOT::Minuit2::MnApplicationMnApplication(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameterState& state, const ROOT::Minuit2::MnStrategy& stra, unsigned int nfcn = 0); ROOT::Minuit2::MnApplicationMnApplication(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameterState& state, const ROOT::Minuit2::MnStrategy& stra, unsigned int nfcn = 0); const char*Name(unsigned int) const; unsigned intNumOfCalls() const; virtual ROOT::Minuit2:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnApplication.html:360,simpl,simplex,360,root/html602/ROOT__Minuit2__MnApplication.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnApplication.html,2,['simpl'],['simplex']
Usability,". ROOT::Minuit2::MnApplication. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnApplication. class ROOT::Minuit2::MnApplication. application interface class for minimizers (migrad, simplex, Minimize,; Scan); User normally instantiates the derived class like ROOT::Minuit2::MnMigrad; for using Migrad for minimization. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~MnApplication(); voidAdd(const char*, double); voidAdd(const char* Name, double val, double err); voidAdd(const char* Name, double val, double err, double, double); const ROOT::Minuit2::MnUserCovariance&Covariance() const; doubleError(unsigned int) const; doubleError(const char*) const; vector<double>Errors() const; doubleExt2int(unsigned int, double) const; unsigned intExtOfInt(unsigned int) const; virtual const ROOT::Minuit2::FCNBase&Fcnbase() const; voidFix(unsigned int); voidFix(const char*); unsigned intIndex(const char*) const; doubleInt2ext(unsigned int, double) const; unsigned intIntOfExt(unsigned int) const; virtual const ROOT::Minuit2::ModularFunctionMinimizer&Minimizer() const; const vector<ROOT::Minuit2::MinuitParameter>&MinuitParameters() const; const char*Name(unsigned int) const; unsigned intNumOfCalls() const; virtual ROOT::Minuit2::FunctionMinimumoperator()(unsigned int maxfcn = 0, double tolerance = 0.1); const ROOT::Minuit2::MinuitParameter&Parameter(unsigned int i) const; const ROOT::Minuit2::MnUserParameters&Parameters() const; vector<double>Params() const; const ROOT::Minuit2::MnMachinePrecision&Precision() const; voidRelease(unsigned int); voidRelease(const char*); voidRemoveLimits(unsigned int); voidRemoveLimits(const char*); voidSetError(unsigned int, double); voidSetError(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__MnApplication.html:360,simpl,simplex,360,root/html530/ROOT__Minuit2__MnApplication.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__MnApplication.html,3,['simpl'],['simplex']
Usability,". ROOT::Minuit2::MnSimplex. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnSimplex. class ROOT::Minuit2::MnSimplex: public ROOT::Minuit2::MnApplication. API class for minimization using the Simplex method, which does not need and use; the derivatives of the function, but only function values.; More information on the minimization method is available; <A HREF=""http://seal.web.cern.ch/mathlibs/documents/minuit/mntutorial.pdf"">here</A>. It allows for user interaction: set/change parameters, do minimization,; change parameters, re-do minimization etc.;. Function Members (Methods); public:. virtual~MnSimplex(); voidROOT::Minuit2::MnApplication::Add(const char*, double); voidROOT::Minuit2::MnApplication::Add(const char* Name, double val, double err); voidROOT::Minuit2::MnApplication::Add(const char* Name, double val, double err, double, double); const ROOT::Minuit2::MnUserCovariance&ROOT::Minuit2::MnApplication::Covariance() const; doubleROOT::Minuit2::MnApplication::Error(unsigned int) const; doubleROOT::Minuit2::MnApplication::Error(const char*) const; vector<double>ROOT::Minuit2::MnApplication::Errors() const; doubleROOT::Minuit2::MnApplication::Ext2int(unsigned int, double) const; unsigned intROOT::Minuit2::MnApplication::ExtOfInt(unsigned int) const; virtual const ROOT::Minuit2::FCNBase&ROOT::Minuit2::MnApplication::Fcnbase() const; voidROOT::Minuit2::MnApplication::Fix(unsigned int); voidROOT::Minuit2::MnApplication::Fix(const char*); unsigned intROOT::Minuit2::MnApplication::Index(const char*) const; doubleROOT::Minuit2::MnApplication::Int2ext(unsigned int, double) const; unsigned intROOT::Minuit2::MnApplication::IntOfExt(unsigned int) const; virtual const ROOT::Minuit2::ModularFunctionMinimizer&Minimizer() const; const vector<ROOT::Minuit2::MinuitParameter>&ROOT::Minuit2::MnApplication::Min",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnSimplex.html:368,Simpl,Simplex,368,root/html526/ROOT__Minuit2__MnSimplex.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnSimplex.html,2,['Simpl'],['Simplex']
Usability,". ROOT::Minuit2::MnSimplex. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnSimplex. class ROOT::Minuit2::MnSimplex: public ROOT::Minuit2::MnApplication. API class for minimization using the Simplex method, which does not need and use; the derivatives of the function, but only function values.; More information on the minimization method is available; <A HREF=""http://seal.web.cern.ch/mathlibs/documents/minuit/mntutorial.pdf"">here</A>. It allows for user interaction: set/change parameters, do minimization,; change parameters, re-do minimization etc.;. Function Members (Methods); public:. virtual~MnSimplex(); voidROOT::Minuit2::MnApplication::Add(const char*, double); voidROOT::Minuit2::MnApplication::Add(const char* Name, double val, double err); voidROOT::Minuit2::MnApplication::Add(const char* Name, double val, double err, double, double); const ROOT::Minuit2::MnUserCovariance&ROOT::Minuit2::MnApplication::Covariance() const; doubleROOT::Minuit2::MnApplication::Error(unsigned int) const; doubleROOT::Minuit2::MnApplication::Error(const char*) const; vector<double>ROOT::Minuit2::MnApplication::Errors() const; doubleROOT::Minuit2::MnApplication::Ext2int(unsigned int, double) const; unsigned intROOT::Minuit2::MnApplication::ExtOfInt(unsigned int) const; virtual const ROOT::Minuit2::FCNBase&ROOT::Minuit2::MnApplication::Fcnbase() const; voidROOT::Minuit2::MnApplication::Fix(unsigned int); voidROOT::Minuit2::MnApplication::Fix(const char*); unsigned intROOT::Minuit2::MnApplication::Index(const char*) const; doubleROOT::Minuit2::MnApplication::Int2ext(unsigned int, double) const; unsigned intROOT::Minuit2::MnApplication::IntOfExt(unsigned int) const; virtual const ROOT::Minuit2::ModularFunctionMinimizer&Minimizer() const; const vector<ROOT::Minuit2::MinuitParameter>&ROOT::Minuit2::MnApplication::M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__MnSimplex.html:370,Simpl,Simplex,370,root/html530/ROOT__Minuit2__MnSimplex.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__MnSimplex.html,5,['Simpl'],['Simplex']
Usability,". ROOT::Minuit2::SimplexMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::SimplexMinimizer. class ROOT::Minuit2::SimplexMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Class implementing the required methods for a minimization using Simplex.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~SimplexMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__SimplexMinimizer.html:17,Simpl,SimplexMinimizer,17,root/html526/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__SimplexMinimizer.html,10,['Simpl'],"['Simplex', 'SimplexMinimizer']"
Usability,". ROOT::Minuit2::SimplexMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::SimplexMinimizer. class ROOT::Minuit2::SimplexMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Class implementing the required methods for a minimization using Simplex.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~SimplexMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__SimplexMinimizer.html:17,Simpl,SimplexMinimizer,17,root/html530/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__SimplexMinimizer.html,10,['Simpl'],"['Simplex', 'SimplexMinimizer']"
Usability,". ROOT::Minuit2::SimplexMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::SimplexMinimizer. class ROOT::Minuit2::SimplexMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Class implementing the required methods for a minimization using Simplex.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~SimplexMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::Functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__SimplexMinimizer.html:17,Simpl,SimplexMinimizer,17,root/html602/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__SimplexMinimizer.html,10,['Simpl'],"['Simplex', 'SimplexMinimizer']"
Usability,". ROOT::Minuit2::SimplexMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::SimplexMinimizer. class ROOT::Minuit2::SimplexMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Class implementing the required methods for a minimization using Simplex.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~SimplexMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFuncti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__SimplexMinimizer.html:17,Simpl,SimplexMinimizer,17,root/html534/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__SimplexMinimizer.html,5,['Simpl'],"['Simplex', 'SimplexMinimizer']"
Usability,". ROOTUsersGuide. User’s Guide; May 2018. Preface; 1 Introduction; 2 Getting Started; 3 Histograms; 4 Graphs; 5 Fitting Histograms; 6 A Little C++; 7 The C++ Interpreter Cling; 8 Object Ownership; 9 Graphics and the Graphical User Interface; 10 Folders and Tasks; 11 Input/Output; 12 Trees; 13 Math Libraries in ROOT; 14 Linear Algebra in ROOT; 15 Adding a Class; 16 Collection Classes; 17 Physics Vectors; 18 The Geometry Package; 19 Python Interface; 20 The Tutorials and Tests; 21 Example Analysis; 22 Networking; 23 Threads; 24 PROOF: Parallel Processing; 25 Writing a Graphical User Interface; 26 The Signal/Slot Communication Mechanism; 27 Automatic HTML Documentation; 28 Appendix A: Install and Build ROOT. WARNING: This documentation is not maintained anymore. Some part might be obsolete or wrong, some part might be missing but still some valuable information can be found there. Instead please refer to the ROOT Reference Guide and the ROOT Manual. If you think some information should be imported in the ROOT Reference Guide or in the ROOT Manual, please post your request to the ROOT Forum or via a Github Issue. Preface; In late 1994, we decided to learn and investigate Object Oriented programming and C++ to better judge the suitability of these relatively new techniques for scientific programming. We knew that there is no better way to learn a new programming environment than to use it to write a program that can solve a real problem. After a few weeks, we had our first histogramming package in C++. A few weeks later we had a rewrite of the same package using the, at that time, very new template features of C++. Again, a few weeks later we had another rewrite of the package without templates since we could only compile the version with templates on one single platform using a specific compiler. Finally, after about four months we had a histogramming package that was faster and more efficient than the well-known FORTRAN based HBOOK histogramming package. This gave us en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:25,Guid,Guide,25,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Guid'],['Guide']
Usability,". RedirectHandle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » RedirectHandle_t. class RedirectHandle_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~RedirectHandle_t(); RedirectHandle_t&operator=(RedirectHandle_t&&); RedirectHandle_t&operator=(const RedirectHandle_t&); RedirectHandle_t(const char* n = 0); RedirectHandle_t(RedirectHandle_t&&); RedirectHandle_t(const RedirectHandle_t&); voidReset(). Data Members; public:. TStringfFileFile where the output was redirected; Int_tfReadOffSetOffset where to start reading the file (used by ShowOutput(...)); Int_tfStdErrDupDuplicated descriptor for stderr; TStringfStdErrTtytty associated with stderr, if any (e.g. from ttyname(...)); Int_tfStdOutDupDuplicated descriptor for stdout; TStringfStdOutTtytty associated with stdout, if any (e.g. from ttyname(...)). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RedirectHandle_t(const char* n = 0); { }. void Reset(). TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RedirectHandle_t.html:655,simpl,simple,655,root/html602/RedirectHandle_t.html,https://root.cern,https://root.cern/root/html602/RedirectHandle_t.html,1,['simpl'],['simple']
Usability,". RedirectHandle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » RedirectHandle_t. class RedirectHandle_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~RedirectHandle_t(); RedirectHandle_t&operator=(RedirectHandle_t&&); RedirectHandle_t&operator=(const RedirectHandle_t&); RedirectHandle_t(const char* n = 0); RedirectHandle_t(RedirectHandle_t&&); RedirectHandle_t(const RedirectHandle_t&); voidReset(). Data Members; public:. TStringfFileFile where the output was redirected; Int_tfReadOffSetOffset where to start reading the file (used by ShowOutput(...)); Int_tfStdErrDupDuplicated descriptor for stderr; TStringfStdErrTtytty associated with stderr, if any (e.g. from ttyname(...)); Int_tfStdOutDupDuplicated descriptor for stdout; TStringfStdOutTtytty associated with stdout, if any (e.g. from ttyname(...)). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RedirectHandle_t(const char* n = 0); { }. void Reset(). TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RedirectHandle_t.html:655,simpl,simple,655,root/html604/RedirectHandle_t.html,https://root.cern,https://root.cern/root/html604/RedirectHandle_t.html,1,['simpl'],['simple']
Usability,". Reference Guide | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:12,Guid,Guide,12,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,3,"['Guid', 'guid']","['Guide', 'Guides', 'guidelines']"
Usability,. Reflex::Any. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Any. class Reflex::Any. Function Members (Methods); public:. ~Any(); void*Address() const; Reflex::AnyAny(); Reflex::AnyAny(const Reflex::Any& other); voidClear(); boolEmpty() const; booloperator bool(); Reflex::Any&operator=(const Reflex::Any& rhs); Reflex::Any&Swap(Reflex::Any& rhs); const type_info&TypeInfo() const. Data Members; private:. Reflex::Any::Placeholder*fContent. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Any(); Constructor . {}. template <typename ValueType> Any(const Reflex::Any& other); Constructor . {}. ~Any(); Dtor . Clear(); Clear the content . operator bool(); bool operator . return ! Empty() const. Swap(Reflex::Any& rhs); Modifier . TypeInfo() const; Query . Address() const; Adress . » Last changed: root/reflex:$Id: Any.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__Any.html:820,Clear,Clear,820,root/html526/Reflex__Any.html,https://root.cern,https://root.cern/root/html526/Reflex__Any.html,2,['Clear'],['Clear']
Usability,. Reflex::Any. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Any. class Reflex::Any. Function Members (Methods); public:. ~Any(); void*Address() const; Reflex::AnyAny(); Reflex::AnyAny(const Reflex::Any& other); voidClear(); boolEmpty() const; booloperator bool(); Reflex::Any&operator=(const Reflex::Any& rhs); Reflex::Any&Swap(Reflex::Any& rhs); const type_info&TypeInfo() const. Data Members; private:. Reflex::Any::Placeholder*fContent. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Any(); Constructor . {}. template <typename ValueType> Any(const Reflex::Any& other); Constructor . {}. ~Any(); Dtor . Clear(); Clear the content . operator bool(); bool operator . return ! Empty(). Swap(Reflex::Any& rhs); Modifier . TypeInfo() const; Query . Address() const; Adress . » Last changed: root/reflex:$Id: Any.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Reflex__Any.html:820,Clear,Clear,820,root/html528/Reflex__Any.html,https://root.cern,https://root.cern/root/html528/Reflex__Any.html,2,['Clear'],['Clear']
Usability,. Reflex::Any. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Any. class Reflex::Any. Function Members (Methods); public:. ~Any(); void*Address() const; Reflex::AnyAny(); Reflex::AnyAny(const Reflex::Any& other); voidClear(); boolEmpty() const; booloperator bool(); Reflex::Any&operator=(const Reflex::Any& rhs); Reflex::Any&Swap(Reflex::Any& rhs); const type_info&TypeInfo() const. Data Members; private:. Reflex::Any::Placeholder*fContent. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Any(); Constructor . {}. template <typename ValueType> Any(const Reflex::Any& other); Constructor . {}. ~Any(); Dtor . Clear(); Clear the content . operator bool(); bool operator . return ! Empty(). Swap(Reflex::Any& rhs); Modifier . TypeInfo() const; Query . Address() const; Adress . » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__Any.html:822,Clear,Clear,822,root/html534/Reflex__Any.html,https://root.cern,https://root.cern/root/html534/Reflex__Any.html,2,['Clear'],['Clear']
Usability,. Reflex::Any. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Any. class Reflex::Any. Function Members (Methods); public:. ~Any(); void*Address() const; Reflex::AnyAny(); Reflex::AnyAny(const Reflex::Any& other); voidClear(); boolEmpty() const; booloperator bool(); Reflex::Any&operator=(const Reflex::Any& rhs); Reflex::Any&Swap(Reflex::Any& rhs); const type_info&TypeInfo() const. Data Members; private:. Reflex::Any::Placeholder*fContent. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Any(); Constructor . {}. template <typename ValueType> Any(const Reflex::Any& other); Constructor . {}. ~Any(); Dtor . Clear(); Clear the content . operator bool(); bool operator . return ! Empty(). Swap(Reflex::Any& rhs); Modifier . TypeInfo() const; Query . Address() const; Adress . » Last changed: root/reflex:$Id: Any.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Reflex__Any.html:822,Clear,Clear,822,root/html530/Reflex__Any.html,https://root.cern,https://root.cern/root/html530/Reflex__Any.html,2,['Clear'],['Clear']
Usability,. Reflex::Any. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Any. class Reflex::Any. Function Members (Methods); public:. ~Any(); void*Address() const; Reflex::AnyAny(); Reflex::AnyAny(const Reflex::Any& other); voidClear(); boolEmpty() const; booloperator bool(); Reflex::Any&operator=(const Reflex::Any& rhs); Reflex::Any&Swap(Reflex::Any& rhs); const type_info&TypeInfo() const. Data Members; private:. Reflex::Any::Placeholder*fContent. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Any(); Constructor . {}. template <typename ValueType> Any(const Reflex::Any& other); Constructor . {}. ~Any(); Dtor . Clear(); Clear the content . operator bool(); bool operator . return ! Empty(). Swap(Reflex::Any& rhs); Modifier . TypeInfo() const; Query . Address() const; Adress . » Last changed: root/reflex:$Id: Any.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Reflex__Any.html:822,Clear,Clear,822,root/html532/Reflex__Any.html,https://root.cern,https://root.cern/root/html532/Reflex__Any.html,2,['Clear'],['Clear']
Usability,". Release Checklist | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main develope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:135,Guid,Guides,135,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". Releases | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Releases. ; Pro ; Release 6.20/04 - 2020-04-01 ; . Old ; Release 6.18/04 - 2019-09-11 ; ; ; . Version 6 ; ; Release 6.20/06 - 2020-06-10. Release 6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/releases.html:126,Guid,Guides,126,d/releases.html,https://root.cern,https://root.cern/d/releases.html,3,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualX::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 334 of file TVirtualX.h. ◆ ClearArea(). void TVirtualX::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). virtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1603 of file TVirtualX.cxx. ◆ ClearWindow() [1/2]. void TVirtualX::ClearWindow ; (; ). virtual . Clears the entire area of the current window. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 177 of file TVirtualX.cxx. ◆ ClearWindow() [2/2]. void TVirtualX::ClearWindow ; (; Window_t ; id). virtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1872 of file TVirtualX.cxx. ◆ CloseDisplay(). void TVirtualX::CloseDisplay ; (; ). virtual . Closes connection to display server and destroys all windows. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1207 of file TVirtualX.cxx. ◆ ClosePixmap(). void TVirtualX::ClosePixmap ; (; ). virtual . Deletes current pixmap. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 191 of file TVirtualX.cxx. ◆ CloseWindow(). void TVirtualX::CloseWindow ; (; ). virtual . Deletes current window. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 184 of file TVirtualX.cxx. ◆ ConvertPrimarySelection(). void TVirtualX::ConvertPrimarySe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:55445,Clear,ClearWindow,55445,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['Clear'],['ClearWindow']
Usability,". ReturnsVersion of this class ; Definition at line 476 of file TGCocoa.h. ◆ ClearArea(). void TGCocoa::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX.; Definition at line 2292 of file TGCocoa.mm. ◆ ClearAreaAux(). void TGCocoa::ClearAreaAux ; (; Window_t ; wid, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). Definition at line 2252 of file TGCocoa.mm. ◆ ClearWindow() [1/2]. void TGCocoa::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reimplemented from TVirtualX.; Definition at line 681 of file TGCocoa.mm. ◆ ClearWindow() [2/2]. void TGCocoa::ClearWindow ; (; Window_t ; id). overridevirtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented from TVirtualX.; Definition at line 2317 of file TGCocoa.mm. ◆ CloseDisplay(). void TGCocoa::CloseDisplay ; (; ). overridevirtual . Closes connection to display server and destroys all windows. ; Reimplemented from TVirtualX.; Definition at line 524 of file TGCocoa.mm. ◆ ClosePixmap(). void TGCocoa::ClosePixmap ; (; ). overridevirtual . Deletes current pixmap. ; Reimplemented from TVirtualX.; Definition at line 2413 of file TGCocoa.mm. ◆ CloseWindow(). void TGCocoa::CloseWindow ; (; ). overridevirtual . Deletes current window. ; Reimplemented from TVirtualX.; Definition at line 840 of file TGCocoa.mm. ◆ CocoaDrawOFF(). void TGCocoa::CocoaDrawOFF ; (; ). Definition at line 4412 of file TGCocoa.mm. ◆ CocoaDrawON(). void TGCocoa::CocoaDrawON ; (; ). Definition at line 4406 of file TGCocoa.mm. ◆ ConvertPrimarySelection(). void TGCocoa::C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:58125,Clear,ClearWindow,58125,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['Clear'],['ClearWindow']
Usability,". Rgl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » Rgl. namespace Rgl. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. Int_tColorToObjectID(const UChar_t* color, Bool_t highColor); voidDrawAxes(Int_t frontPoint, const Int_t* viewport, const TGLVertex3* box2D, const TGLPlotCoordinates* plotCoord, TAxis* xAxis, TAxis* yAxis, TAxis* zAxis); voidDrawBoxFront(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax, Int_t fp); voidDrawBoxFrontTextured(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax, Double_t tMin, Double_t tMax, Int_t front); voidDrawBoxWithGradientFill(Double_t y1, Double_t y2, Double_t x1, Double_t x2, const Double_t* rgba1, const Double_t* rgba2); voidDrawCylinder(TGLQuadric* quadric, Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax); voidDrawError(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax); voidDrawFaceTextured(const TGLVertex3& v1, const TGLVertex3& v2, const TGLVertex3& v3, Double_t t1, Double_t t2, Double_t t3, Double_t z, const TGLVector3& planeNormal); voidDrawFaceTextured(const TGLVertex3& v1, const TGLVertex3& v2, const TGLVertex3& v3, Double_t t1, Double_t t2, Double_t t3, const TGLVector3& norm1, const TGLVector3& norm2, const TGLVector3& norm3); voidDrawMapleMesh(const vector<Double_t>& vs, const vector<Double_t>& ns, const ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Rgl.html:338,simpl,simple,338,root/html602/Rgl.html,https://root.cern,https://root.cern/root/html602/Rgl.html,2,['simpl'],['simple']
Usability,". RooAbsFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsFunc. class RooAbsFunc. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsFunc(); static TClass*Class(); UInt_tgetDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tisValid() const; Int_tnumCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidresetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. UInt_t_dimensionNumber of observables; Int_t_ncallFunction call counter; Bool_t_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~RooAbsFunc(); { }. UInt_t getDimension() const; Dimension of function. Bool_t isValid() const; Is function in valid state. Double_t operator()(const Double_t* xvector) const. Double_t getMinLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsFunc.html:530,simpl,simple,530,root/html528/RooAbsFunc.html,https://root.cern,https://root.cern/root/html528/RooAbsFunc.html,3,['simpl'],['simple']
Usability,". RooAbsFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsFunc. class RooAbsFunc. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsFunc(); static TClass*Class(); UInt_tgetDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tisValid() const; Int_tnumCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidresetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. UInt_t_dimensionNumber of observables; Int_t_ncallFunction call counter; Bool_t_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~RooAbsFunc(); { }. UInt_t getDimension() const; Dimension of function. Bool_t isValid() const; Is function in valid state. Double_t operator()(const Double_t* xvector) const. Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsFunc.html:530,simpl,simple,530,root/html526/RooAbsFunc.html,https://root.cern,https://root.cern/root/html526/RooAbsFunc.html,1,['simpl'],['simple']
Usability,". RooAbsFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsFunc. class RooAbsFunc. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsFunc(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tgetDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tisValid() const; Int_tnumCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidresetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_t_dimensionNumber of observables; Int_t_ncallFunction call counter; Bool_t_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~RooAbsFunc(); { }. UInt_t getDimension() const; Dimension of function. Bool_t isValid() const; Is function in valid state.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsFunc.html:530,simpl,simple,530,root/html534/RooAbsFunc.html,https://root.cern,https://root.cern/root/html534/RooAbsFunc.html,1,['simpl'],['simple']
Usability,". RooAbsFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsFunc. class RooAbsFunc. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsFunc(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tgetDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tisValid() const; Int_tnumCall() const; virtual Double_toperator()(const Double_t[] xvector) const; RooAbsFunc&operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidresetNumCall() const; virtual voidrestoreXVec() const; RooAbsFunc(UInt_t dimension); RooAbsFunc(const RooAbsFunc& other); virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_t_dimensionNumber of observables; Int_t_ncallFunction call counter; Bool_t_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; inline RooAbsFunc(UInt_t dimension); { }. inline Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsFunc.html:530,simpl,simple,530,root/html602/RooAbsFunc.html,https://root.cern,https://root.cern/root/html602/RooAbsFunc.html,2,['simpl'],['simple']
Usability,". RooArgList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooArgList. class RooArgList: public RooAbsCollection. RooArgList is a container object that can hold multiple RooAbsArg objects.; The container has list semantics which means that:. - Contained objects are ordered, The iterator; follows the object insertion order. - Objects can be retrieved by name and index. - Multiple objects with the same name are allowed. Ownership of contents. Unowned objects are inserted with the add() method. Owned objects; are added with addOwned() or addClone(). A RooArgSet either owns all; of it contents, or none, which is determined by the first <add>; call. Once an ownership status is selected, inappropriate <add> calls; will return error status. Clearing the list via removeAll() resets the; ownership status. Arguments supplied in the constructor are always added; as unowned elements. Function Members (Methods); public:. RooArgList(); RooArgList(const RooArgSet& set); RooArgList(const char* name); RooArgList(const TCollection& tcoll, const char* name = """"); RooArgList(const RooAbsArg& var1, const char* name = """"); RooArgList(const RooArgList& other, const char* name = """"); RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const char* name = """"); RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const char* name = """"); RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const char* name = """"); RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const RooAbsArg& var5, const char* name = """"); RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const RooAbsArg& var5, const RooAbsArg& var6, const char* name ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgList.html:938,Clear,Clearing,938,root/html526/RooArgList.html,https://root.cern,https://root.cern/root/html526/RooArgList.html,5,['Clear'],['Clearing']
Usability,". RooArgList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooArgList. class RooArgList: public RooAbsCollection. RooArgList is a container object that can hold multiple RooAbsArg objects.; The container has list semantics which means that:. - Contained objects are ordered, The iterator; follows the object insertion order. - Objects can be retrieved by name and index. - Multiple objects with the same name are allowed. Ownership of contents. Unowned objects are inserted with the add() method. Owned objects; are added with addOwned() or addClone(). A RooArgSet either owns all; of it contents, or none, which is determined by the first <add>; call. Once an ownership status is selected, inappropriate <add> calls; will return error status. Clearing the list via removeAll() resets the; ownership status. Arguments supplied in the constructor are always added; as unowned elements. Function Members (Methods); public:. virtual~RooArgList(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tRooAbsCollection::add(const RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_tRooAbsCollection::add(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual RooAbsArg*RooAbsCollection::addClone(const RooAbsArg& var, Bool_t silent = kFALSE); virtual voidRooAbsCollection::addClone(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual Bool_tRooAbsCollection::addOwned(RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_tRooAbsCollection::addOwned(const RooAbsCollection& list, Bool_t silent = kFALSE); Bool_tRooAbsCollection::allInRange(const char* rangeSpec) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsCollection::assignFast(const RooAbsCollection& other, Bool_t setValDirty = kTRUE); RooAbsCollection&RooAbsCollection::assignValueOnly(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgList.html:938,Clear,Clearing,938,root/html602/RooArgList.html,https://root.cern,https://root.cern/root/html602/RooArgList.html,2,['Clear'],['Clearing']
Usability,". RooChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooChi2Var. class RooChi2Var: public RooAbsOptTestStatistic. Class RooChi2Var implements a simple chi^2 calculation from a binned dataset; and a PDF. The chi^2 is calculated as. / (f_PDF * N_tot/ V_bin) - N_bin \+2; Sum[bins] | ------------------------------ |; \ err_bin. If no user-defined errors are defined for the dataset, poisson errors; are used. In extended PDF mode, N_tot is substituted with N_expected. Function Members (Methods); public:. RooChi2Var(const RooChi2Var& other, const char* name = 0); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE, RooAbsData::ErrorType = RooDataHist::SumW2); RooChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooChi2Var(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooChi2Var.html:344,simpl,simple,344,root/html526/RooChi2Var.html,https://root.cern,https://root.cern/root/html526/RooChi2Var.html,4,['simpl'],['simple']
Usability,". RooChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooChi2Var. class RooChi2Var: public RooAbsOptTestStatistic. Class RooChi2Var implements a simple chi^2 calculation from a binned dataset; and a PDF. The chi^2 is calculated as. / (f_PDF * N_tot/ V_bin) - N_bin \+2; Sum[bins] | ------------------------------ |; \ err_bin. If no user-defined errors are defined for the dataset, poisson errors; are used. In extended PDF mode, N_tot is substituted with N_expected. Function Members (Methods); public:. RooChi2Var(const RooChi2Var& other, const char* name = 0); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE, RooAbsData::ErrorType = RooDataHist::SumW2); RooChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:344,simpl,simple,344,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,1,['simpl'],['simple']
Usability,". RooChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooChi2Var. class RooChi2Var: public RooAbsOptTestStatistic. Class RooChi2Var implements a simple chi^2 calculation from a binned dataset; and a PDF. The chi^2 is calculated as. / (f_PDF * N_tot/ V_bin) - N_bin \+2; Sum[bins] | ------------------------------ |; \ err_bin. If no user-defined errors are defined for the dataset, poisson errors; are used. In extended PDF mode, N_tot is substituted with N_expected. Function Members (Methods); public:. virtual~RooChi2Var(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChi2Var.html:344,simpl,simple,344,root/html602/RooChi2Var.html,https://root.cern,https://root.cern/root/html602/RooChi2Var.html,2,['simpl'],['simple']
Usability,". RooComplex. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooComplex. class RooComplex. Class RooComplex is a simple container class for complex values; . Function Members (Methods); public:. RooComplex(complex<Double_t> c); RooComplex(const RooComplex&); RooComplex(Double_t a = 0, Double_t b = 0); virtual~RooComplex(); Double_tabs() const; Double_tabs2() const; static TClass*Class(); RooComplexconj() const; RooComplexexp() const; Double_tim() const; virtual TClass*IsA() const; RooComplexoperator*(const RooComplex& other) const; RooComplexoperator*(const Double_t& other) const; RooComplexoperator+(const RooComplex& other) const; RooComplexoperator-() const; RooComplexoperator-(const RooComplex& other) const; RooComplexoperator/(const RooComplex& other) const; RooComplex&operator=(const RooComplex& other); Bool_toperator==(const RooComplex& other) const; voidPrint() const; Double_tre() const; virtual voidShowMembers(TMemberInspector&); RooComplexsqrt() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. voidwarn() const. Data Members; private:. Double_t_im; Double_t_re. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void warn() const. void Print() const; WVE Solaric CC5.0 complains about this. inline RooComplex(complex<Double_t> c); { }. inline RooComplex(Double_t a = 0, Double_t b = 0); { warn(); }. virtual ~RooComplex(); { }. RooComplex& operator=(const RooComplex& other). RooComplex operator-() const; unary operators. return RooComplex(Double_t a = 0, Double_t b = 0). RooComplex operator+(const RooComplex& other) const; binary operators. RooComplex operator-(const RooComplex& other) const. RooComplex operator*(const RooComplex& other) const. RooComplex operator/(const RooCom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooComplex.html:305,simpl,simple,305,root/html534/RooComplex.html,https://root.cern,https://root.cern/root/html534/RooComplex.html,1,['simpl'],['simple']
Usability,". RooComplex. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooComplex. class RooComplex. Class RooComplex is a simple container class for complex values; . Function Members (Methods); public:. RooComplex(const RooComplex&); RooComplex(Double_t a = 0, Double_t b = 0); virtual~RooComplex(); Double_tabs() const; Double_tabs2() const; static TClass*Class(); RooComplexconj() const; RooComplexexp() const; Double_tim() const; virtual TClass*IsA() const; RooComplexoperator*(const RooComplex& other) const; RooComplexoperator*(const Double_t& other) const; RooComplexoperator+(const RooComplex& other) const; RooComplexoperator-() const; RooComplexoperator-(const RooComplex& other) const; RooComplexoperator/(const RooComplex& other) const; RooComplex&operator=(const RooComplex& other); Bool_toperator==(const RooComplex& other) const; voidPrint() const; Double_tre() const; virtual voidShowMembers(TMemberInspector& insp); RooComplexsqrt() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. Double_t_im; Double_t_re. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Print() const; WVE Solaric CC5.0 complains about this. inline RooComplex(Double_t a = 0, Double_t b = 0); { }. virtual ~RooComplex(); {}. RooComplex& operator=(const RooComplex& other). RooComplex operator-() const; unary operators. return RooComplex(Double_t a = 0, Double_t b = 0). RooComplex operator+(const RooComplex& other) const; binary operators. RooComplex operator-(const RooComplex& other) const. RooComplex operator*(const RooComplex& other) const. RooComplex operator/(const RooComplex& other) const. RooComplex operator*(const Double_t& other) const. Bool_t operator==(const RooComplex& other) const. Double_t re() const; unary funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooComplex.html:305,simpl,simple,305,root/html528/RooComplex.html,https://root.cern,https://root.cern/root/html528/RooComplex.html,3,['simpl'],['simple']
Usability,". RooComplex. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooComplex. class RooComplex. Class RooComplex is a simple container class for complex values; . Function Members (Methods); public:. RooComplex(const RooComplex&); RooComplex(Double_t a = 0, Double_t b = 0); virtual~RooComplex(); Double_tabs() const; Double_tabs2() const; static TClass*Class(); RooComplexconj() const; RooComplexexp() const; Double_tim() const; virtual TClass*IsA() const; RooComplexoperator*(const RooComplex& other) const; RooComplexoperator*(const Double_t& other) const; RooComplexoperator+(const RooComplex& other) const; RooComplexoperator-() const; RooComplexoperator-(const RooComplex& other) const; RooComplexoperator/(const RooComplex& other) const; RooComplex&operator=(const RooComplex& other); Bool_toperator==(const RooComplex& other) const; voidPrint() const; Double_tre() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); RooComplexsqrt() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. Double_t_im; Double_t_re. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Print() const; WVE Solaric CC5.0 complains about this. inline RooComplex(Double_t a = 0, Double_t b = 0); { }. virtual ~RooComplex(); {}. RooComplex& operator=(const RooComplex& other). RooComplex operator-() const; unary operators. return RooComplex(Double_t a = 0, Double_t b = 0). RooComplex operator+(const RooComplex& other) const; binary operators. RooComplex operator-(const RooComplex& other) const. RooComplex operator*(const RooComplex& other). RooComplex operator/(const RooComplex& other) const. RooComplex operator*(const Double_t& other). Bool_t operator==(const RooComplex& other) const. Double_t re() const; unary fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooComplex.html:305,simpl,simple,305,root/html526/RooComplex.html,https://root.cern,https://root.cern/root/html526/RooComplex.html,1,['simpl'],['simple']
Usability,". RooComplex. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooComplex. class RooComplex. Class RooComplex is a simple container class for complex values; . Function Members (Methods); public:. virtual~RooComplex(); Double_tabs() const; Double_tabs2() const; static TClass*Class(); RooComplexconj() const; RooComplexexp() const; Double_tim() const; virtual TClass*IsA() const; RooComplexoperator*(const RooComplex& other) const; RooComplexoperator*(const Double_t& other) const; RooComplexoperator+(const RooComplex& other) const; RooComplexoperator-() const; RooComplexoperator-(const RooComplex& other) const; RooComplexoperator/(const RooComplex& other) const; RooComplex&operator=(const RooComplex& other); Bool_toperator==(const RooComplex& other) const; voidPrint() const; Double_tre() const; RooComplex(complex<Double_t> c); RooComplex(const RooComplex&); RooComplex(Double_t a = 0, Double_t b = 0); virtual voidShowMembers(TMemberInspector& insp) const; RooComplexsqrt() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. voidwarn() const. Data Members; private:. Double_t_im; Double_t_re. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void warn() const. void Print() const; WVE Solaric CC5.0 complains about this. inline RooComplex(complex<Double_t> c); { }. inline RooComplex(Double_t a = 0, Double_t b = 0); { warn(); }. virtual ~RooComplex(); { }. RooComplex& operator=(const RooComplex& other). RooComplex operator-() const; unary operators. return RooComplex(Double_t a = 0, Double_t b = 0). RooComplex operator+(const RooComplex& other) const; binary operators. RooComplex operator-(const RooComplex& other) const. RooComplex operator*(const RooComplex& other) const. RooComplex operator/(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooComplex.html:305,simpl,simple,305,root/html602/RooComplex.html,https://root.cern,https://root.cern/root/html602/RooComplex.html,2,['simpl'],['simple']
Usability,". RooMCStudy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMCStudy. class RooMCStudy: public TNamed. RooMCStudy is a help class to facilitate Monte Carlo studies; such as 'goodness-of-fit' studies, that involve fitting a PDF ; to multiple toy Monte Carlo sets generated from the same PDF ; or another PDF.; ; Given a fit PDF and a generator PDF, RooMCStudy can produce; large numbers of toyMC samples and/or fit these samples; and acculumate the final parameters of each fit in a dataset.; ; Additional plotting routines simplify the task of plotting; the distribution of the minimized likelihood, each parameters fitted value, ; fitted error and pull distribution.; ; Class RooMCStudy provides the option to insert add-in modules; that modify the generate and fit cycle and allow to perform; extra steps in the cycle. Output of these modules can be stored; alongside the fit results in the aggregate results dataset.; These study modules should derive from classs RooAbsMCStudyModel; . Function Members (Methods); public:. RooMCStudy(const RooAbsPdf& genModel, const RooAbsPdf& fitModel, const RooArgSet& dependents, const char* genOptions = """", const char* fitOptions = """", const RooDataSet* genProtoData = 0, const RooArgSet& projDeps = RooArgSet()); RooMCStudy(const RooAbsPdf& model, const RooArgSet& observables, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual~RooMCStudy(); voidTObject::AbstractMethod(const char* method) const; Bool_taddFitResult(const RooFitResult& fr); voidaddModule(RooAbsMCStudyModule& module); virtual voidTObject::AppendPad(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCStudy.html:718,simpl,simplify,718,root/html526/RooMCStudy.html,https://root.cern,https://root.cern/root/html526/RooMCStudy.html,1,['simpl'],['simplify']
Usability,". RooMCStudy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMCStudy. class RooMCStudy: public TNamed. RooMCStudy is a help class to facilitate Monte Carlo studies; such as 'goodness-of-fit' studies, that involve fitting a PDF ; to multiple toy Monte Carlo sets generated from the same PDF ; or another PDF.; ; Given a fit PDF and a generator PDF, RooMCStudy can produce; large numbers of toyMC samples and/or fit these samples; and acculumate the final parameters of each fit in a dataset.; ; Additional plotting routines simplify the task of plotting; the distribution of the minimized likelihood, each parameters fitted value, ; fitted error and pull distribution.; ; Class RooMCStudy provides the option to insert add-in modules; that modify the generate and fit cycle and allow to perform; extra steps in the cycle. Output of these modules can be stored; alongside the fit results in the aggregate results dataset.; These study modules should derive from classs RooAbsMCStudyModel; . Function Members (Methods); public:. RooMCStudy(const RooAbsPdf& genModel, const RooAbsPdf& fitModel, const RooArgSet& dependents, const char* genOptions = """", const char* fitOptions = """", const RooDataSet* genProtoData = 0, const RooArgSet& projDeps = RooArgSet()); RooMCStudy(const RooAbsPdf& model, const RooArgSet& observables, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual~RooMCStudy(); voidTObject::AbstractMethod(const char* method) const; Bool_taddFitResult(const RooFitResult& fr); voidaddModule(RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMCStudy.html:718,simpl,simplify,718,root/html528/RooMCStudy.html,https://root.cern,https://root.cern/root/html528/RooMCStudy.html,4,['simpl'],['simplify']
Usability,". RooMCStudy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMCStudy. class RooMCStudy: public TNamed. RooMCStudy is a help class to facilitate Monte Carlo studies; such as 'goodness-of-fit' studies, that involve fitting a PDF ; to multiple toy Monte Carlo sets generated from the same PDF ; or another PDF.; ; Given a fit PDF and a generator PDF, RooMCStudy can produce; large numbers of toyMC samples and/or fit these samples; and acculumate the final parameters of each fit in a dataset.; ; Additional plotting routines simplify the task of plotting; the distribution of the minimized likelihood, each parameters fitted value, ; fitted error and pull distribution.; ; Class RooMCStudy provides the option to insert add-in modules; that modify the generate and fit cycle and allow to perform; extra steps in the cycle. Output of these modules can be stored; alongside the fit results in the aggregate results dataset.; These study modules should derive from classs RooAbsMCStudyModel; . Function Members (Methods); public:. virtual~RooMCStudy(); voidTObject::AbstractMethod(const char* method) const; Bool_taddFitResult(const RooFitResult& fr); voidaddModule(RooAbsMCStudyModule& module); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMCStudy.html:718,simpl,simplify,718,root/html602/RooMCStudy.html,https://root.cern,https://root.cern/root/html602/RooMCStudy.html,2,['simpl'],['simplify']
Usability,". RooProdPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProdPdf. class RooProdPdf: public RooAbsPdf. RooProdPdf is an efficient implementation of a product of PDFs of the form ; PDF_1 * PDF_2 * ... * PDF_N; PDFs may share observables. If that is the case any irreducable subset; of PDFS that share observables will be normalized with explicit numeric; integration as any built-in normalization will no longer be valid.; Alternatively, products using conditional PDFs can be defined, e.g.; F(x|y) * G(y); meaning a pdf F(x) _given_ y and a PDF G(y). In this contruction F is only; normalized w.r.t x and G is normalized w.r.t y. The product in this construction; is properly normalized.; If exactly one of the component PDFs supports extended likelihood fits, the; product will also be usable in extended mode, returning the number of expected; events from the extendable component PDF. The extendable component does not; have to appear in any specific place in the list.; ; . Function Members (Methods); public:. RooProdPdf(); RooProdPdf(const RooProdPdf& other, const char* name = 0); RooProdPdf(const char* name, const char* title, Double_t cutOff = 0); RooProdPdf(const char* name, const char* title, const RooArgList& pdfList, Double_t cutOff = 0); RooProdPdf(const char* name, const char* title, const RooArgSet& fullPdfSet, const RooLinkedList& cmdArgList); RooProdPdf(const char* name, const char* title, RooAbsPdf& pdf1, RooAbsPdf& pdf2, Double_t cutOff = 0); RooProdPdf(const char* name, const char* title, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:985,usab,usable,985,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,5,['usab'],['usable']
Usability,". RooProdPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProdPdf. class RooProdPdf: public RooAbsPdf. RooProdPdf is an efficient implementation of a product of PDFs of the form ; PDF_1 * PDF_2 * ... * PDF_N; PDFs may share observables. If that is the case any irreducable subset; of PDFS that share observables will be normalized with explicit numeric; integration as any built-in normalization will no longer be valid.; Alternatively, products using conditional PDFs can be defined, e.g.; F(x|y) * G(y); meaning a pdf F(x) _given_ y and a PDF G(y). In this contruction F is only; normalized w.r.t x and G is normalized w.r.t y. The product in this construction; is properly normalized.; If exactly one of the component PDFs supports extended likelihood fits, the; product will also be usable in extended mode, returning the number of expected; events from the extendable component PDF. The extendable component does not; have to appear in any specific place in the list.; ; . Function Members (Methods); public:. virtual~RooProdPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProdPdf.html:985,usab,usable,985,root/html602/RooProdPdf.html,https://root.cern,https://root.cern/root/html602/RooProdPdf.html,2,['usab'],['usable']
Usability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual~RooRealBinding(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidloadValues(const Double_t* xvector) const. Data Members; protected:. Bool_t_clipInvalid; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealBinding.html:423,simpl,simple,423,root/html528/RooRealBinding.html,https://root.cern,https://root.cern/root/html528/RooRealBinding.html,2,['simpl'],['simple']
Usability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual~RooRealBinding(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidloadValues(const Double_t* xvector) const. Data Members; protected:. Bool_t_clipInvalid; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealBinding(const RooAbsReal& func, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealBinding.html:423,simpl,simple,423,root/html526/RooRealBinding.html,https://root.cern,https://root.cern/root/html526/RooRealBinding.html,1,['simpl'],['simple']
Usability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual~RooRealBinding(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidloadValues(const Double_t* xvector) const. Data Members; protected:. Bool_t_clipInvalid; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealBindi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealBinding.html:423,simpl,simple,423,root/html532/RooRealBinding.html,https://root.cern,https://root.cern/root/html532/RooRealBinding.html,1,['simpl'],['simple']
Usability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual~RooRealBinding(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidloadValues(const Double_t* xvector) const. Data Members; protected:. Bool_t_clipInvalid; list<RooAbsReal*>_compList!; list<Double_t>_compSave!; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Double_t_funcSave!; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. Class Cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealBinding.html:423,simpl,simple,423,root/html534/RooRealBinding.html,https://root.cern,https://root.cern/root/html534/RooRealBinding.html,1,['simpl'],['simple']
Usability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. virtual~RooRealBinding(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t[] xvector) const; RooRealBinding&operator=(const RooRealBinding&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidloadValues(const Double_t[] xvector) const. Data Members; protected:. Bool_t_clipInvalid; list<RooAbsReal*>_compList!; list<Double_t>_compSave!; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Double_t_funcSave!; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealBinding.html:423,simpl,simple,423,root/html602/RooRealBinding.html,https://root.cern,https://root.cern/root/html602/RooRealBinding.html,2,['simpl'],['simple']
Usability,". RooRealConstant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealConstant. class RooRealConstant. RooRealConstant provides static functions to create and keep track; of RooRealVar constants. Instead of creating such constants by; hand (e.g. RooRealVar one(""one"",""one"",1)), simply use; ; RooRealConstant::value(1.0); ; whenever a reference to RooRealVar with constant value 1.0 is needed.; RooRealConstant keeps an internal database of previously created; RooRealVar objects and will recycle them as appropriate.; . Function Members (Methods); public:. RooRealConstant(); RooRealConstant(const RooRealConstant&); virtual~RooRealConstant(); static TClass*Class(); static voidcleanup(); virtual TClass*IsA() const; RooRealConstant&operator=(const RooRealConstant&); static RooConstVar&removalDummy(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static RooConstVar&value(Double_t value). protected:. static voidinit(). Data Members; protected:. static RooArgList*_constDBList of already instantiated constants; static TIterator*_constDBIterIterator over constants list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function register with RooSentinel for cleanup in atexit(). RooConstVar& value(Double_t value); Return a constant value object with given value.; Return previously created object if avaliable,; otherwise create a new one on the fly. RooConstVar& removalDummy(); Create a dummy node used in node-removal operations. void init(); One-time initialization of constants database. inline RooRealConstant(); {}. virtual ~RooRealConstant(); {}. » Last changed: Mon Jul 4 15:23:49 2011 » Last generated: 2011-07-04 15:23; This page has been automatically g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooRealConstant.html:473,simpl,simply,473,root/html530/RooRealConstant.html,https://root.cern,https://root.cern/root/html530/RooRealConstant.html,1,['simpl'],['simply']
Usability,". RooRealConstant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealConstant. class RooRealConstant. RooRealConstant provides static functions to create and keep track; of RooRealVar constants. Instead of creating such constants by; hand (e.g. RooRealVar one(""one"",""one"",1)), simply use; ; RooRealConstant::value(1.0); ; whenever a reference to RooRealVar with constant value 1.0 is needed.; RooRealConstant keeps an internal database of previously created; RooRealVar objects and will recycle them as appropriate.; . Function Members (Methods); public:. RooRealConstant(); RooRealConstant(const RooRealConstant&); virtual~RooRealConstant(); static TClass*Class(); static voidcleanup(); virtual TClass*IsA() const; RooRealConstant&operator=(const RooRealConstant&); static RooConstVar&removalDummy(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static RooConstVar&value(Double_t value). protected:. static voidinit(). Data Members; protected:. static RooArgList*_constDBList of already instantiated constants; static TIterator*_constDBIterIterator over constants list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function register with RooSentinel for cleanup in atexit(). RooConstVar& value(Double_t value); Return a constant value object with given value.; Return previously created object if avaliable,; otherwise create a new one on the fly. RooConstVar& removalDummy(); Create a dummy node used in node-removal operations. void init(); One-time initialization of constants database. inline RooRealConstant(); {}. virtual ~RooRealConstant(); {}. » Last changed: Thu Nov 3 20:09:06 2011 » Last generated: 2011-11-03 20:09; This page has been automatically g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealConstant.html:473,simpl,simply,473,root/html532/RooRealConstant.html,https://root.cern,https://root.cern/root/html532/RooRealConstant.html,1,['simpl'],['simply']
Usability,". RooRealConstant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealConstant. class RooRealConstant. RooRealConstant provides static functions to create and keep track; of RooRealVar constants. Instead of creating such constants by; hand (e.g. RooRealVar one(""one"",""one"",1)), simply use; ; RooRealConstant::value(1.0); ; whenever a reference to RooRealVar with constant value 1.0 is needed.; RooRealConstant keeps an internal database of previously created; RooRealVar objects and will recycle them as appropriate.; . Function Members (Methods); public:. RooRealConstant(); RooRealConstant(const RooRealConstant&); virtual~RooRealConstant(); static TClass*Class(); static voidcleanup(); virtual TClass*IsA() const; RooRealConstant&operator=(const RooRealConstant&); static RooConstVar&removalDummy(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static RooConstVar&value(Double_t value). protected:. static voidinit(). Data Members; protected:. static RooArgList*_constDBList of already instantiated constants; static TIterator*_constDBIterIterator over constants list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function register with RooSentinel for cleanup in atexit(). RooConstVar& value(Double_t value); Return a constant value object with given value.; Return previously created object if available,; otherwise create a new one on the fly. RooConstVar& removalDummy(); Create a dummy node used in node-removal operations. void init(); One-time initialization of constants database. inline RooRealConstant(); {}. virtual ~RooRealConstant(); {}. » Last changed: Tue Mar 10 17:18:45 2015 » Last generated: 2015-03-10 17:18; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealConstant.html:473,simpl,simply,473,root/html534/RooRealConstant.html,https://root.cern,https://root.cern/root/html534/RooRealConstant.html,1,['simpl'],['simply']
Usability,". RooRealConstant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealConstant. class RooRealConstant. RooRealConstant provides static functions to create and keep track; of RooRealVar constants. Instead of creating such constants by; hand (e.g. RooRealVar one(""one"",""one"",1)), simply use; ; RooRealConstant::value(1.0); ; whenever a reference to RooRealVar with constant value 1.0 is needed.; RooRealConstant keeps an internal database of previously created; RooRealVar objects and will recycle them as appropriate.; . Function Members (Methods); public:. RooRealConstant(); RooRealConstant(const RooRealConstant&); virtual~RooRealConstant(); static TClass*Class(); static voidcleanup(); virtual TClass*IsA() const; RooRealConstant&operator=(const RooRealConstant&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static RooConstVar&value(Double_t value). protected:. static voidinit(). Data Members; protected:. static RooArgList*_constDBList of already instantiated constants; static TIterator*_constDBIterIterator over constants list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function register with RooSentinel for cleanup in atexit(). RooConstVar& value(Double_t value); Return a constant value object with given value.; Return previously created object if avaliable,; otherwise create a new one on the fly. void init(); One-time initialization of constants database. inline RooRealConstant(); {}. virtual ~RooRealConstant(); {}. » Last changed: Thu Sep 23 20:00:39 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealConstant.html:473,simpl,simply,473,root/html528/RooRealConstant.html,https://root.cern,https://root.cern/root/html528/RooRealConstant.html,1,['simpl'],['simply']
Usability,". RooRealConstant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealConstant. class RooRealConstant. RooRealConstant provides static functions to create and keep track; of RooRealVar constants. Instead of creating such constants by; hand (e.g. RooRealVar one(""one"",""one"",1)), simply use; ; RooRealConstant::value(1.0); ; whenever a reference to RooRealVar with constant value 1.0 is needed.; RooRealConstant keeps an internal database of previously created; RooRealVar objects and will recycle them as appropriate.; . Function Members (Methods); public:. RooRealConstant(); RooRealConstant(const RooRealConstant&); virtual~RooRealConstant(); static TClass*Class(); static voidcleanup(); virtual TClass*IsA() const; RooRealConstant&operator=(const RooRealConstant&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static RooConstVar&value(Double_t value). protected:. static voidinit(). Data Members; protected:. static RooArgList*_constDBList of already instantiated constants; static TIterator*_constDBIterIterator over constants list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function register with RooSentinel for cleanup in atexit(). RooConstVar& value(Double_t value); Return a constant value object with given value.; Return previously created object if avaliable,; otherwise create a new one on the fly. void init(); One-time initialization of constants database. inline RooRealConstant(); {}. virtual ~RooRealConstant(); {}. » Last changed: Mon Dec 7 13:48:50 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealConstant.html:473,simpl,simply,473,root/html526/RooRealConstant.html,https://root.cern,https://root.cern/root/html526/RooRealConstant.html,1,['simpl'],['simply']
Usability,". RooRealConstant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealConstant. class RooRealConstant. RooRealConstant provides static functions to create and keep track; of RooRealVar constants. Instead of creating such constants by; hand (e.g. RooRealVar one(""one"",""one"",1)), simply use; ; RooRealConstant::value(1.0); ; whenever a reference to RooRealVar with constant value 1.0 is needed.; RooRealConstant keeps an internal database of previously created; RooRealVar objects and will recycle them as appropriate.; . Function Members (Methods); public:. virtual~RooRealConstant(); static TClass*Class(); static voidcleanup(); virtual TClass*IsA() const; RooRealConstant&operator=(const RooRealConstant&); static RooConstVar&removalDummy(); RooRealConstant(); RooRealConstant(const RooRealConstant&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static RooConstVar&value(Double_t value). protected:. static voidinit(). Data Members; protected:. static RooArgList*_constDBList of already instantiated constants; static TIterator*_constDBIterIterator over constants list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function register with RooSentinel for cleanup in atexit(). RooConstVar& value(Double_t value); Return a constant value object with given value.; Return previously created object if available,; otherwise create a new one on the fly. RooConstVar& removalDummy(); Create a dummy node used in node-removal operations. void init(); One-time initialization of constants database. inline RooRealConstant(); {}. virtual ~RooRealConstant(); {}. » Last changed: Tue Jun 2 15:33:20 2015 » Last generated: 2015-06-02 15:33; This",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooRealConstant.html:473,simpl,simply,473,root/html604/RooRealConstant.html,https://root.cern,https://root.cern/root/html604/RooRealConstant.html,1,['simpl'],['simply']
Usability,". RooRealConstant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealConstant. class RooRealConstant. RooRealConstant provides static functions to create and keep track; of RooRealVar constants. Instead of creating such constants by; hand (e.g. RooRealVar one(""one"",""one"",1)), simply use; ; RooRealConstant::value(1.0); ; whenever a reference to RooRealVar with constant value 1.0 is needed.; RooRealConstant keeps an internal database of previously created; RooRealVar objects and will recycle them as appropriate.; . Function Members (Methods); public:. virtual~RooRealConstant(); static TClass*Class(); static voidcleanup(); virtual TClass*IsA() const; RooRealConstant&operator=(const RooRealConstant&); static RooConstVar&removalDummy(); RooRealConstant(); RooRealConstant(const RooRealConstant&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static RooConstVar&value(Double_t value). protected:. static voidinit(). Data Members; protected:. static RooArgList*_constDBList of already instantiated constants; static TIterator*_constDBIterIterator over constants list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function register with RooSentinel for cleanup in atexit(). RooConstVar& value(Double_t value); Return a constant value object with given value.; Return previously created object if available,; otherwise create a new one on the fly. RooConstVar& removalDummy(); Create a dummy node used in node-removal operations. void init(); One-time initialization of constants database. inline RooRealConstant(); {}. virtual ~RooRealConstant(); {}. » Last changed: Tue Jun 30 14:35:16 2015 » Last generated: 2015-06-30 14:35; Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealConstant.html:473,simpl,simply,473,root/html602/RooRealConstant.html,https://root.cern,https://root.cern/root/html602/RooRealConstant.html,1,['simpl'],['simply']
Usability,". RooRealMPFE. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealMPFE. class RooRealMPFE: public RooAbsReal. RooRealMPFE is the multi-processor front-end for parallel calculation; of RooAbsReal objects. Each RooRealMPFE forks a process that calculates; the value of the proxies RooAbsReal object. The (re)calculation of; the proxied object is started asynchronously with the calculate() option.; A subsequent call to getVal() will return the calculated value when available; If the calculation is still in progress when getVal() is called it blocks; the calling process until the calculation is done. The forked calculation process ; is terminated when the front-end object is deleted; Simple use demonstration; ; RooAbsReal* slowFunc ;; Double_t val = slowFunc->getVal() // Evaluate slowFunc in current process; RooRealMPFE mpfe(""mpfe"",""frontend to slowFunc"",*slowFunc) ;; mpfe.calculate() ; // Start calculation of slow-func in remote process; // .. do other stuff here ..; Double_t val = mpfe.getVal() // Wait for remote calculation to finish and retrieve value; . Function Members (Methods); public:. RooRealMPFE(const RooRealMPFE& other, const char* name = 0); RooRealMPFE(const char* name, const char* title, RooAbsReal& arg, Bool_t calcInline = kFALSE); virtual~RooRealMPFE(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealMPFE.html:882,Simpl,Simple,882,root/html528/RooRealMPFE.html,https://root.cern,https://root.cern/root/html528/RooRealMPFE.html,4,['Simpl'],['Simple']
Usability,". RooRealMPFE. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealMPFE. class RooRealMPFE: public RooAbsReal. RooRealMPFE is the multi-processor front-end for parallel calculation; of RooAbsReal objects. Each RooRealMPFE forks a process that calculates; the value of the proxies RooAbsReal object. The (re)calculation of; the proxied object is started asynchronously with the calculate() option.; A subsequent call to getVal() will return the calculated value when available; If the calculation is still in progress when getVal() is called it blocks; the calling process until the calculation is done. The forked calculation process ; is terminated when the front-end object is deleted; Simple use demonstration; ; RooAbsReal* slowFunc ;; Double_t val = slowFunc->getVal() // Evaluate slowFunc in current process; RooRealMPFE mpfe(""mpfe"",""frontend to slowFunc"",*slowFunc) ;; mpfe.calculate() ; // Start calculation of slow-func in remote process; // .. do other stuff here ..; Double_t val = mpfe.getVal() // Wait for remote calculation to finish and retrieve value; . Function Members (Methods); public:. RooRealMPFE(const RooRealMPFE& other, const char* name = 0); RooRealMPFE(const char* name, const char* title, RooAbsReal& arg, Bool_t calcInline = kFALSE); virtual~RooRealMPFE(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealMPFE.html:882,Simpl,Simple,882,root/html526/RooRealMPFE.html,https://root.cern,https://root.cern/root/html526/RooRealMPFE.html,1,['Simpl'],['Simple']
Usability,". RooRealMPFE. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealMPFE. class RooRealMPFE: public RooAbsReal. RooRealMPFE is the multi-processor front-end for parallel calculation; of RooAbsReal objects. Each RooRealMPFE forks a process that calculates; the value of the proxies RooAbsReal object. The (re)calculation of; the proxied object is started asynchronously with the calculate() option.; A subsequent call to getVal() will return the calculated value when available; If the calculation is still in progress when getVal() is called it blocks; the calling process until the calculation is done. The forked calculation process ; is terminated when the front-end object is deleted; Simple use demonstration; ; RooAbsReal* slowFunc ;; Double_t val = slowFunc->getVal() // Evaluate slowFunc in current process; RooRealMPFE mpfe(""mpfe"",""frontend to slowFunc"",*slowFunc) ;; mpfe.calculate() ; // Start calculation of slow-func in remote process; // .. do other stuff here ..; Double_t val = mpfe.getVal() // Wait for remote calculation to finish and retrieve value; . Function Members (Methods); public:. virtual~RooRealMPFE(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealMPFE.html:882,Simpl,Simple,882,root/html602/RooRealMPFE.html,https://root.cern,https://root.cern/root/html602/RooRealMPFE.html,2,['Simpl'],['Simple']
Usability,". RooRefArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRefArray. class RooRefArray: public TObjArray. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods); public:. virtual~RooRefArray(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidTObjArray::AddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTObjArray::AddAt(TObject* obj, Int_t idx); virtual voidTObjArray::AddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tTObjArray::AddAtFree(TObject* obj); virtual voidTObjArray::AddBefore(const TObject* before, TObject* obj); virtual voidTObjArray::AddFirst(TObject* obj); virtual voidTObjArray::AddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*TObjArray::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TObjArray::At(Int_t idx) const; virtual TObject*TObjArray::Before(const TObject* obj) const; TIte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRefArray.html:1027,clear,clearing,1027,root/html602/RooRefArray.html,https://root.cern,https://root.cern/root/html602/RooRefArray.html,2,['clear'],['clearing']
Usability,". RooSimWSTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool. class RooSimWSTool: public TNamed, public RooPrintable. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;Sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool.html:499,simpl,simplest,499,root/html534/RooSimWSTool.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool.html,3,['simpl'],['simplest']
Usability,". RooSimWSTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool. class RooSimWSTool: public TNamed, public RooPrintable. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool.html:499,simpl,simplest,499,root/html526/RooSimWSTool.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool.html,4,['simpl'],['simplest']
Usability,". RooSimWSTool::BuildConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::BuildConfig. class RooSimWSTool::BuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__BuildConfig.html:502,simpl,simplest,502,root/html534/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__BuildConfig.html,3,['simpl'],['simplest']
Usability,". RooSimWSTool::BuildConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::BuildConfig. class RooSimWSTool::BuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{Stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool__BuildConfig.html:502,simpl,simplest,502,root/html526/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool__BuildConfig.html,4,['simpl'],['simplest']
Usability,". RooSimWSTool::MultiBuildConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::MultiBuildConfig. class RooSimWSTool::MultiBuildConfig: public RooSimWSTool::BuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__MultiBuildConfig.html:551,simpl,simplest,551,root/html534/RooSimWSTool__MultiBuildConfig.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__MultiBuildConfig.html,3,['simpl'],['simplest']
Usability,". RooSimWSTool::MultiBuildConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::MultiBuildConfig. class RooSimWSTool::MultiBuildConfig: public RooSimWSTool::BuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool__MultiBuildConfig.html:551,simpl,simplest,551,root/html526/RooSimWSTool__MultiBuildConfig.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool__MultiBuildConfig.html,4,['simpl'],['simplest']
Usability,". RooSimWSTool::ObjBuildConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::ObjBuildConfig. class RooSimWSTool::ObjBuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__ObjBuildConfig.html:511,simpl,simplest,511,root/html534/RooSimWSTool__ObjBuildConfig.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__ObjBuildConfig.html,3,['simpl'],['simplest']
Usability,". RooSimWSTool::ObjBuildConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::ObjBuildConfig. class RooSimWSTool::ObjBuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the synt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool__ObjBuildConfig.html:511,simpl,simplest,511,root/html526/RooSimWSTool__ObjBuildConfig.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool__ObjBuildConfig.html,4,['simpl'],['simplest']
Usability,". RooSimWSTool::ObjSplitRule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::ObjSplitRule. class RooSimWSTool::ObjSplitRule. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{Stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__ObjSplitRule.html:505,simpl,simplest,505,root/html534/RooSimWSTool__ObjSplitRule.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__ObjSplitRule.html,3,['simpl'],['simplest']
Usability,". RooSimWSTool::ObjSplitRule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::ObjSplitRule. class RooSimWSTool::ObjSplitRule. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool__ObjSplitRule.html:505,simpl,simplest,505,root/html526/RooSimWSTool__ObjSplitRule.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool__ObjSplitRule.html,4,['simpl'],['simplest']
Usability,". RooSimWSTool::SplitRule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::SplitRule. class RooSimWSTool::SplitRule: public TNamed. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__SplitRule.html:511,simpl,simplest,511,root/html534/RooSimWSTool__SplitRule.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__SplitRule.html,3,['simpl'],['simplest']
Usability,". RooSimWSTool::SplitRule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::SplitRule. class RooSimWSTool::SplitRule: public TNamed. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the synt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool__SplitRule.html:511,simpl,simplest,511,root/html526/RooSimWSTool__SplitRule.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool__SplitRule.html,4,['simpl'],['simplest']
Usability,". RooStats::AcceptanceRegion. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::AcceptanceRegion. class RooStats::AcceptanceRegion: public TObject. ConfidenceBelt is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. ; . Function Members (Methods); public:. virtual~AcceptanceRegion(); voidTObject::AbstractMethod(const char* method) const; RooStats::AcceptanceRegionAcceptanceRegion(); RooStats::AcceptanceRegionAcceptanceRegion(const RooStats::AcceptanceRegion&); RooStats::AcceptanceRegionAcceptanceRegion(Int_t lu, Double_t ll, Double_t ul); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__AcceptanceRegion.html:436,simpl,simple,436,root/html602/RooStats__AcceptanceRegion.html,https://root.cern,https://root.cern/root/html602/RooStats__AcceptanceRegion.html,2,['simpl'],['simple']
Usability,". RooStats::BayesianCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::BayesianCalculator. class RooStats::BayesianCalculator: public RooStats::IntervalCalculator, public TNamed. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation ; of a credible interval using a Bayesian method. ; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval ; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution. . The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when ; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extrem of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by ; scanning the posterior function in the given number of points. The firts method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. . The class can also return the posterior function (method GetPosteriorFunction) or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:788,Simpl,SimpleInterval,788,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,5,['Simpl'],['SimpleInterval']
Usability,". RooStats::ConfInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ConfInterval. class RooStats::ConfInterval: public TNamed. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of ; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"".; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ConfInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ConfInterval.html:513,simpl,simple,513,root/html526/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__ConfInterval.html,4,['simpl'],"['simple', 'simply']"
Usability,". RooStats::ConfInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ConfInterval. class RooStats::ConfInterval: public TNamed. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of ; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"".; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ConfInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalConfInterval(const char* name = 0); RooStats::ConfIntervalConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ConfInterval.html:515,simpl,simple,515,root/html602/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__ConfInterval.html,4,['simpl'],"['simple', 'simply']"
Usability,". RooStats::ConfInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ConfInterval. class RooStats::ConfInterval: public TNamed. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of ; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"".; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ConfInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ConfInterval.html:515,simpl,simple,515,root/html530/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html530/RooStats__ConfInterval.html,6,['simpl'],"['simple', 'simply']"
Usability,". RooStats::ConfidenceBelt. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ConfidenceBelt. class RooStats::ConfidenceBelt: public TNamed. ConfidenceBelt is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. ; . Function Members (Methods); public:. virtual~ConfidenceBelt(); voidTObject::AbstractMethod(const char* method) const; voidAddAcceptanceRegion(RooArgSet&, RooStats::AcceptanceRegion region, Double_t cl = -1., Double_t leftside = -1.); voidAddAcceptanceRegion(RooArgSet& point, Int_t dataSetIndex, Double_t lower, Double_t upper, Double_t cl = -1., Double_t leftside = -1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCheckParameters(RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; RooStats::ConfidenceBeltConfidenceBelt(); RooStats::ConfidenceBeltConfidenceBelt(const char* name); RooStats::ConfidenceBeltConfidenceBelt(const RooStats::ConfidenceBelt&); RooStats::ConfidenceBeltConfidenceBelt(const char* name, const char* title); RooStats::ConfidenceBeltConfidenceBelt(const char* name, RooAbsData&); RooStats::ConfidenceBeltConfidenceBelt(const char* name, const char* title, RooAbsData&); vector<Double_t>ConfidenceLevels() const; virtual voidTNamed::Copy(TObject& named) const; virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ConfidenceBelt.html:429,simpl,simple,429,root/html526/RooStats__ConfidenceBelt.html,https://root.cern,https://root.cern/root/html526/RooStats__ConfidenceBelt.html,6,['simpl'],['simple']
Usability,". RooStats::ConfidenceBelt. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::ConfidenceBelt. class RooStats::ConfidenceBelt: public TNamed. ConfidenceBelt is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. ; . Function Members (Methods); public:. virtual~ConfidenceBelt(); voidTObject::AbstractMethod(const char* method) const; voidAddAcceptanceRegion(RooArgSet&, RooStats::AcceptanceRegion region, Double_t cl = -1., Double_t leftside = -1.); voidAddAcceptanceRegion(RooArgSet& point, Int_t dataSetIndex, Double_t lower, Double_t upper, Double_t cl = -1., Double_t leftside = -1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCheckParameters(RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; RooStats::ConfidenceBeltConfidenceBelt(); RooStats::ConfidenceBeltConfidenceBelt(const char* name); RooStats::ConfidenceBeltConfidenceBelt(const RooStats::ConfidenceBelt&); RooStats::ConfidenceBeltConfidenceBelt(const char* name, const char* title); RooStats::ConfidenceBeltConfidenceBelt(const char* name, RooAbsData&); RooStats::ConfidenceBeltConfidenceBelt(const char* name, const char* title, RooAbsData&); vector<Double_t>ConfidenceLevels() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ConfidenceBelt.html:419,simpl,simple,419,root/html528/RooStats__ConfidenceBelt.html,https://root.cern,https://root.cern/root/html528/RooStats__ConfidenceBelt.html,1,['simpl'],['simple']
Usability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetNuisanceParameters(RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooAbsArg&) const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Double_tfSize; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingSampler(). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__DebuggingSampler.html:359,simpl,simple,359,root/html526/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__DebuggingSampler.html,1,['simpl'],['simple']
Usability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Double_tfSize;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__DebuggingSampler.html:349,simpl,simple,349,root/html528/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__DebuggingSampler.html,1,['simpl'],['simple']
Usability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; RooStats::DebuggingSamplerDebuggingSampler(); RooStats::DebuggingSamplerDebuggingSampler(const RooStats::DebuggingSampler&); virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__DebuggingSampler.html:361,simpl,simple,361,root/html602/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__DebuggingSampler.html,2,['simpl'],['simple']
Usability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__DebuggingSampler.html:361,simpl,simple,361,root/html530/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html530/RooStats__DebuggingSampler.html,2,['simpl'],['simple']
Usability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__DebuggingSampler.html:361,simpl,simple,361,root/html534/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__DebuggingSampler.html,1,['simpl'],['simple']
Usability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fTestStatistic;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__DebuggingTestStat.html:361,simpl,simple,361,root/html526/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html526/RooStats__DebuggingTestStat.html,1,['simpl'],['simple']
Usability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 34109 2010-06-24 15:00:16Z moneta $ » Last generated: 2010-11-25 07:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__DebuggingTestStat.html:351,simpl,simple,351,root/html528/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__DebuggingTestStat.html,1,['simpl'],['simple']
Usability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); RooStats::DebuggingTestStatDebuggingTestStat(); RooStats::DebuggingTestStatDebuggingTestStat(const RooStats::DebuggingTestStat&); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DebuggingTestStat(). virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__DebuggingTestStat.html:363,simpl,simple,363,root/html602/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__DebuggingTestStat.html,2,['simpl'],['simple']
Usability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__DebuggingTestStat.html:363,simpl,simple,363,root/html534/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__DebuggingTestStat.html,1,['simpl'],['simple']
Usability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__DebuggingTestStat.html:363,simpl,simple,363,root/html530/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__DebuggingTestStat.html,1,['simpl'],['simple']
Usability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__DebuggingTestStat.html:363,simpl,simple,363,root/html532/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__DebuggingTestStat.html,1,['simpl'],['simple']
Usability,". RooStats::HypoTestInverter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverter. class RooStats::HypoTestInverter: public RooStats::IntervalCalculator, public TNamed. HypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of the; HybridCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverter::UseCLs has been called). New contributions to this class have been written by Matthias Wolf (advanced AutoRun algorithm). Function Members (Methods); public:. virtual~HypoTestInverter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverter.html:837,Simpl,SimpleInterval,837,root/html526/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverter.html,1,['Simpl'],['SimpleInterval']
Usability,". RooStats::HypoTestInverter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverter. class RooStats::HypoTestInverter: public RooStats::IntervalCalculator. HypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an; HypoTestCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverter::UseCLs has been called). Contributions to this class have been written by Giovanni Petrucciani and Annapaola Decosa. Function Members (Methods); public:. virtual~HypoTestInverter(); static TClass*Class(); voidClear(); virtual Double_tConfidenceLevel() const; RooStats::HypoTestCalculatorGeneric*GetHypoTestCalculator() const; virtual RooStats::HypoTestInverterResult*GetInterval() const; RooStats::SamplingDistribution*GetLowerLimitDistribution(bool rebuild = false, int nToys = 100); RooStats::TestStatistic*GetTestStatistic() const; RooStats::SamplingDistribution*GetUpperLimitDistribution(bool re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverter.html:823,Simpl,SimpleInterval,823,root/html530/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverter.html,5,['Simpl'],['SimpleInterval']
Usability,". RooStats::HypoTestInverter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::HypoTestInverter. class RooStats::HypoTestInverter: public RooStats::IntervalCalculator, public TNamed. HypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of the; HybridCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverter::UseCLs has been called). New contributions to this class have been written by Matthias Wolf (advanced AutoRun algorithm). Function Members (Methods); public:. virtual~HypoTestInverter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestInverter.html:827,Simpl,SimpleInterval,827,root/html528/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestInverter.html,1,['Simpl'],['SimpleInterval']
Usability,". RooStats::HypoTestInverterOriginal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverterOriginal. class RooStats::HypoTestInverterOriginal: public RooStats::IntervalCalculator, public TNamed. HypoTestInverterOriginal class for performing an hypothesis test inversion by scanning the hypothesis test results of the; HybridCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverterOriginal implements various option for performing the scan. HypoTestInverterOriginal::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverterOriginal::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverterOriginal::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverterOriginal::UseCLs has been called). New contributions to this class have been written by Matthias Wolf (advanced AutoRun algorithm). Function Members (Methods); public:. virtual~HypoTestInverterOriginal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterOriginal.html:869,Simpl,SimpleInterval,869,root/html530/RooStats__HypoTestInverterOriginal.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterOriginal.html,5,['Simpl'],['SimpleInterval']
Usability,". RooStats::HypoTestInverterResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverterResult. class RooStats::HypoTestInverterResult: public RooStats::SimpleInterval. Function Members (Methods); public:. virtual~HypoTestInverterResult(); voidTObject::AbstractMethod(const char* method) const; boolAdd(const RooStats::HypoTestInverterResult& otherResult); boolAdd(Double_t x, const RooStats::HypoTestResult& result); virtual voidTObject::AppendPad(Option_t* option = """"); intArraySize() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tRooStats::SimpleInterval::CheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; doubleCLb(int index) const; doubleCLbError(int index) const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; doubleCLs(int index) const; doubleCLsError(int index) const; doubleCLsplusb(int index) const; doubleCLsplusbError(int index) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::SimpleInterval::ConfidenceLevel() const; RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const char* name = 0); RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; intExclusionCleanup(); virtual voidTObject::Execute(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:364,Simpl,SimpleInterval,364,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,". RooStats::HypoTestInverterResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverterResult. class RooStats::HypoTestInverterResult: public RooStats::SimpleInterval. Function Members (Methods); public:. virtual~HypoTestInverterResult(); voidTObject::AbstractMethod(const char* method) const; boolAdd(const RooStats::HypoTestInverterResult& otherResult); boolAdd(Double_t x, const RooStats::HypoTestResult& result); virtual voidTObject::AppendPad(Option_t* option = """"); intArraySize() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tRooStats::SimpleInterval::CheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; doubleCLb(int index) const; doubleCLbError(int index) const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; doubleCLs(int index) const; doubleCLsError(int index) const; doubleCLsplusb(int index) const; doubleCLsplusbError(int index) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::SimpleInterval::ConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; intExclusionCleanup(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:364,Simpl,SimpleInterval,364,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,". RooStats::HypoTestInverterResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverterResult. class RooStats::HypoTestInverterResult: public RooStats::SimpleInterval. Function Members (Methods); public:. virtual~HypoTestInverterResult(); voidTObject::AbstractMethod(const char* method) const; boolAdd(const RooStats::HypoTestInverterResult& otherResult); boolAdd(Double_t x, const RooStats::HypoTestResult& result); virtual voidTObject::AppendPad(Option_t* option = """"); intArraySize() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tRooStats::SimpleInterval::CheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; doubleCLb(int index) const; doubleCLbError(int index) const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; doubleCLs(int index) const; doubleCLsError(int index) const; doubleCLsplusb(int index) const; doubleCLsplusbError(int index) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::SimpleInterval::ConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:364,Simpl,SimpleInterval,364,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,". RooStats::HypoTestInverterResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverterResult. class RooStats::HypoTestInverterResult: public RooStats::SimpleInterval. Function Members (Methods); public:. virtual~HypoTestInverterResult(); voidTObject::AbstractMethod(const char* method) const; boolAdd(const RooStats::HypoTestInverterResult& otherResult); virtual voidTObject::AppendPad(Option_t* option = """"); intArraySize() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tRooStats::SimpleInterval::CheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; doubleCLb(int index) const; doubleCLbError(int index) const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; doubleCLs(int index) const; doubleCLsError(int index) const; doubleCLsplusb(int index) const; doubleCLsplusbError(int index) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::SimpleInterval::ConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:364,Simpl,SimpleInterval,364,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,". RooStats::HypoTestInverterResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverterResult. class RooStats::HypoTestInverterResult: public RooStats::SimpleInterval. Function Members (Methods); public:. virtual~HypoTestInverterResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); intArraySize() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tRooStats::SimpleInterval::CheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::SimpleInterval::ConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html:364,Simpl,SimpleInterval,364,root/html526/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,". RooStats::LikelihoodIntervalPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::LikelihoodIntervalPlot. class RooStats::LikelihoodIntervalPlot: public TNamed, public RooPrintable. LikelihoodIntervalPlot :. This class provides simple and straightforward utilities to plot a LikelihoodInterval; object. Function Members (Methods); public:. virtual~LikelihoodIntervalPlot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__LikelihoodIntervalPlot.html:429,simpl,simple,429,root/html526/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__LikelihoodIntervalPlot.html,4,['simpl'],['simple']
Usability,". RooStats::LikelihoodIntervalPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::LikelihoodIntervalPlot. class RooStats::LikelihoodIntervalPlot: public TNamed, public RooPrintable. LikelihoodIntervalPlot :. This class provides simple and straightforward utilities to plot a LikelihoodInterval; object. Function Members (Methods); public:. virtual~LikelihoodIntervalPlot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__LikelihoodIntervalPlot.html:429,simpl,simple,429,root/html602/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html602/RooStats__LikelihoodIntervalPlot.html,2,['simpl'],['simple']
Usability,". RooStats::LikelihoodIntervalPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::LikelihoodIntervalPlot. class RooStats::LikelihoodIntervalPlot: public TNamed, public RooPrintable. LikelihoodIntervalPlot :. This class provides simple and straightforward utilities to plot a LikelihoodInterval; object. Function Members (Methods); public:. virtual~LikelihoodIntervalPlot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__LikelihoodIntervalPlot.html:419,simpl,simple,419,root/html528/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html528/RooStats__LikelihoodIntervalPlot.html,1,['simpl'],['simple']
Usability,". RooStats::MCMCIntervalPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MCMCIntervalPlot. class RooStats::MCMCIntervalPlot: public TNamed, public RooPrintable. This class provides simple and straightforward utilities to plot a MCMCInterval; object. Basic use only requires a few lines once you have an MCMCInterval*:. MCMCIntervalPlot plot(*interval);; plot.Draw();. (The standard Draw() function will currently draw the confidence interval; range with bars if 1-D and a contour if 2-D. The MCMC posterior will also be; plotted for the 1-D case. Many other fun plotting options are available. Function Members (Methods); public:. virtual~MCMCIntervalPlot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = NULL); voidDrawChainScatter(RooRealVar& xVar, RooRealVar& yVar); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawHistInterval(Option_t* options = NULL); voidDrawInterval(Option_t* options = NULL); voidDrawKeysPdfInterval(Option_t* options = NUL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCIntervalPlot.html:385,simpl,simple,385,root/html526/RooStats__MCMCIntervalPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCIntervalPlot.html,1,['simpl'],['simple']
Usability,". RooStats::MCMCIntervalPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MCMCIntervalPlot. class RooStats::MCMCIntervalPlot: public TNamed, public RooPrintable. This class provides simple and straightforward utilities to plot a MCMCInterval; object. Basic use only requires a few lines once you have an MCMCInterval*:. MCMCIntervalPlot plot(*interval);; plot.Draw();. The standard Draw() function will currently draw the confidence interval; range with bars if 1-D and a contour if 2-D. The MCMC posterior will also be; plotted for the 1-D case. Function Members (Methods); public:. virtual~MCMCIntervalPlot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = NULL); voidDrawChainScatter(RooRealVar& xVar, RooRealVar& yVar); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawNLLHist(Option_t* options = NULL); voidDrawNLLVsTime(); voidDrawParameterVsTime(RooRealVar& param); voidDrawWeightHist(Option_t* options = NULL); virtual voidTObject::Dump() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__MCMCIntervalPlot.html:385,simpl,simple,385,root/html530/RooStats__MCMCIntervalPlot.html,https://root.cern,https://root.cern/root/html530/RooStats__MCMCIntervalPlot.html,3,['simpl'],['simple']
Usability,". RooStats::MCMCIntervalPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MCMCIntervalPlot. class RooStats::MCMCIntervalPlot: public TNamed, public RooPrintable. This class provides simple and straightforward utilities to plot a MCMCInterval; object. Basic use only requires a few lines once you have an MCMCInterval*:. MCMCIntervalPlot plot(*interval);; plot.Draw();. The standard Draw() function will currently draw the confidence interval; range with bars if 1-D and a contour if 2-D. The MCMC posterior will also be; plotted for the 1-D case. Function Members (Methods); public:. virtual~MCMCIntervalPlot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const Option_t* options = __null); voidDrawChainScatter(RooRealVar& xVar, RooRealVar& yVar); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawNLLHist(const Option_t* options = __null); voidDrawNLLVsTime(); voidDrawParameterVsTime(RooRealVar& param); voidDrawWeightHist(const Option_t* options = __null); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MCMCIntervalPlot.html:385,simpl,simple,385,root/html602/RooStats__MCMCIntervalPlot.html,https://root.cern,https://root.cern/root/html602/RooStats__MCMCIntervalPlot.html,2,['simpl'],['simple']
Usability,". RooStats::MCMCIntervalPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::MCMCIntervalPlot. class RooStats::MCMCIntervalPlot: public TNamed, public RooPrintable. This class provides simple and straightforward utilities to plot a MCMCInterval; object. Basic use only requires a few lines once you have an MCMCInterval*:. MCMCIntervalPlot plot(*interval);; plot.Draw();. The standard Draw() function will currently draw the confidence interval; range with bars if 1-D and a contour if 2-D. The MCMC posterior will also be; plotted for the 1-D case. Function Members (Methods); public:. virtual~MCMCIntervalPlot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = NULL); voidDrawChainScatter(RooRealVar& xVar, RooRealVar& yVar); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawNLLHist(Option_t* options = NULL); voidDrawNLLVsTime(); voidDrawParameterVsTime(RooRealVar& param); voidDrawWeightHist(Option_t* options = NULL); virtual voidTObject::Dump() constMENU ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MCMCIntervalPlot.html:375,simpl,simple,375,root/html528/RooStats__MCMCIntervalPlot.html,https://root.cern,https://root.cern/root/html528/RooStats__MCMCIntervalPlot.html,1,['simpl'],['simple']
Usability,". RooStats::ModelConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ModelConfig. class RooStats::ModelConfig: public TNamed. ModelConfig is a simple class that holds configuration information specifying how a model; should be used in the context of various RooStats tools. A single model can be used; in different ways, and this class should carry all that is needed to specify how it should be used. Function Members (Methods); public:. virtual~ModelConfig(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const RooArgSet*GetConditionalObservabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ModelConfig.html:320,simpl,simple,320,root/html526/RooStats__ModelConfig.html,https://root.cern,https://root.cern/root/html526/RooStats__ModelConfig.html,1,['simpl'],['simple']
Usability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: NumEventsTestStat.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NumEventsTestStat.html:361,simpl,simple,361,root/html526/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html526/RooStats__NumEventsTestStat.html,3,['simpl'],['simple']
Usability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: NumEventsTestStat.h 36222 2010-10-09 18:27:06Z wouter $ » Last generated: 2010-11-25 07:08; This page has been automatically generated. For comments or suggestions regarding the documentation ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NumEventsTestStat.html:351,simpl,simple,351,root/html528/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__NumEventsTestStat.html,3,['simpl'],['simple']
Usability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: NumEventsTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__NumEventsTestStat.html:363,simpl,simple,363,root/html530/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__NumEventsTestStat.html,3,['simpl'],['simple']
Usability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: NumEventsTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__NumEventsTestStat.html:363,simpl,simple,363,root/html532/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__NumEventsTestStat.html,3,['simpl'],['simple']
Usability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__NumEventsTestStat.html:363,simpl,simple,363,root/html602/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__NumEventsTestStat.html,6,['simpl'],['simple']
Usability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__NumEventsTestStat.html:363,simpl,simple,363,root/html534/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__NumEventsTestStat.html,3,['simpl'],['simple']
Usability,". RooStats::PointSetInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::PointSetInterval. class RooStats::PointSetInterval: public RooStats::ConfInterval. PointSetInterval is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. ; . Function Members (Methods); public:. virtual~PointSetInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const char* name = 0); RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__PointSetInterval.html:453,simpl,simple,453,root/html602/RooStats__PointSetInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__PointSetInterval.html,2,['simpl'],['simple']
Usability,". RooStats::PointSetInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::PointSetInterval. class RooStats::PointSetInterval: public RooStats::ConfInterval. PointSetInterval is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. ; . Function Members (Methods); public:. virtual~PointSetInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__PointSetInterval.html:453,simpl,simple,453,root/html526/RooStats__PointSetInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__PointSetInterval.html,4,['simpl'],['simple']
Usability,". RooStats::PointSetInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::PointSetInterval. class RooStats::PointSetInterval: public RooStats::ConfInterval. PointSetInterval is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. ; . Function Members (Methods); public:. virtual~PointSetInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__PointSetInterval.html:443,simpl,simple,443,root/html528/RooStats__PointSetInterval.html,https://root.cern,https://root.cern/root/html528/RooStats__PointSetInterval.html,1,['simpl'],['simple']
Usability,". RooStats::SamplingDistPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistPlot. class RooStats::SamplingDistPlot: public TNamed, public RooPrintable. SamplingDistPlot :. This class provides simple and straightforward utilities to plot SamplingDistribution; objects. Function Members (Methods); public:. virtual~SamplingDistPlot(); voidTObject::AbstractMethod(const char* method) const; voidAddLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char* title = NULL); Double_tAddSamplingDistribution(const RooStats::SamplingDistribution* samplingDist, Option_t* drawOptions = ""NORMALIZE HIST""); Double_tAddSamplingDistributionShaded(const RooStats::SamplingDistribution* samplingDist, Double_t minShaded, Double_t maxShaded, Option_t* drawOptions = ""NORMALIZE HIST""); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyDefaultStyle(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidDumpToFile(const char* RootFileName, Option_t* option = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SamplingDistPlot.html:405,simpl,simple,405,root/html528/RooStats__SamplingDistPlot.html,https://root.cern,https://root.cern/root/html528/RooStats__SamplingDistPlot.html,3,['simpl'],['simple']
Usability,". RooStats::SamplingDistPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistPlot. class RooStats::SamplingDistPlot: public TNamed, public RooPrintable. SamplingDistPlot :. This class provides simple and straightforward utilities to plot SamplingDistribution; objects. Function Members (Methods); public:. virtual~SamplingDistPlot(); voidTObject::AbstractMethod(const char* method) const; voidAddLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char* title = NULL); Double_tAddSamplingDistribution(const RooStats::SamplingDistribution* samplingDist, Option_t* drawOptions = ""NORMALIZE HIST""); Double_tAddSamplingDistributionShaded(const RooStats::SamplingDistribution* samplingDist, Double_t minShaded, Double_t maxShaded, Option_t* drawOptions = ""NORMALIZE HIST""); voidAddTF1(TF1* f, const char* title = NULL, Option_t* drawOptions = ""SAME""); voidAddTH1(TH1* h, Option_t* drawOptions = """"); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyDefaultStyle(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SamplingDistPlot.html:405,simpl,simple,405,root/html534/RooStats__SamplingDistPlot.html,https://root.cern,https://root.cern/root/html534/RooStats__SamplingDistPlot.html,1,['simpl'],['simple']
Usability,". RooStats::SamplingDistPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistPlot. class RooStats::SamplingDistPlot: public TNamed, public RooPrintable. SamplingDistPlot :. This class provides simple and straightforward utilities to plot SamplingDistribution; objects. Function Members (Methods); public:. virtual~SamplingDistPlot(); voidTObject::AbstractMethod(const char* method) const; voidAddLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char* title = __null); Double_tAddSamplingDistribution(const RooStats::SamplingDistribution* samplingDist, Option_t* drawOptions = ""NORMALIZE HIST""); Double_tAddSamplingDistributionShaded(const RooStats::SamplingDistribution* samplingDist, Double_t minShaded, Double_t maxShaded, Option_t* drawOptions = ""NORMALIZE HIST""); voidAddTF1(TF1* f, const char* title = __null, Option_t* drawOptions = ""SAME""); voidAddTH1(TH1* h, Option_t* drawOptions = """"); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyDefaultStyle(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SamplingDistPlot.html:405,simpl,simple,405,root/html602/RooStats__SamplingDistPlot.html,https://root.cern,https://root.cern/root/html602/RooStats__SamplingDistPlot.html,2,['simpl'],['simple']
Usability,". RooStats::SamplingDistPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistPlot. class RooStats::SamplingDistPlot: public TNamed, public RooPrintable. SamplingDistPlot :. This class provides simple and straightforward utilities to plot SamplingDistribution; objects. Function Members (Methods); public:. virtual~SamplingDistPlot(); voidTObject::AbstractMethod(const char* method) const; voidAddSamplingDistribution(const RooStats::SamplingDistribution* samplingDist, Option_t* drawOptions = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SamplingDistPlot.html:405,simpl,simple,405,root/html526/RooStats__SamplingDistPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__SamplingDistPlot.html,1,['simpl'],['simple']
Usability,". RooStats::SamplingDistribution. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistribution. class RooStats::SamplingDistribution: public TNamed. SamplingDistribution :. This class simply holds a sampling distribution of some test statistic.; The distribution can either be an emperical distribution (eg. the samples themselves) or; a weighted set of points (eg. for the FFT method).; The class supports merging. Function Members (Methods); public:. virtual~SamplingDistribution(); voidTObject::AbstractMethod(const char* method) const; voidAdd(RooStats::SamplingDistribution* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SamplingDistribution.html:391,simpl,simply,391,root/html526/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html526/RooStats__SamplingDistribution.html,1,['simpl'],['simply']
Usability,". RooStats::SamplingDistribution. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistribution. class RooStats::SamplingDistribution: public TNamed. SamplingDistribution :. This class simply holds a sampling distribution of some test statistic.; The distribution can either be an empirical distribution (eg. the samples themselves) or; a weighted set of points (eg. for the FFT method).; The class supports merging. Function Members (Methods); public:. virtual~SamplingDistribution(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const RooStats::SamplingDistribution* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCDF(Double_t x) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SamplingDistribution.html:391,simpl,simply,391,root/html528/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html528/RooStats__SamplingDistribution.html,6,['simpl'],['simply']
Usability,". RooStats::SamplingSummary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingSummary. class RooStats::SamplingSummary: public TObject. ConfidenceBelt is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. ; . Function Members (Methods); public:. virtual~SamplingSummary(); voidTObject::AbstractMethod(const char* method) const; voidAddAcceptanceRegion(RooStats::AcceptanceRegion& ar); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SamplingSummary.html:433,simpl,simple,433,root/html602/RooStats__SamplingSummary.html,https://root.cern,https://root.cern/root/html602/RooStats__SamplingSummary.html,2,['simpl'],['simple']
Usability,". RooStats::SamplingSummaryLookup. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingSummaryLookup. class RooStats::SamplingSummaryLookup: public TObject. ConfidenceBelt is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. ; . Function Members (Methods); public:. virtual~SamplingSummaryLookup(); voidTObject::AbstractMethod(const char* method) const; voidAdd(Double_t cl, Double_t leftside); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SamplingSummaryLookup.html:451,simpl,simple,451,root/html602/RooStats__SamplingSummaryLookup.html,https://root.cern,https://root.cern/root/html602/RooStats__SamplingSummaryLookup.html,2,['simpl'],['simple']
Usability,". RooStats::SimpleInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleInterval. class RooStats::SimpleInterval: public RooStats::ConfInterval. SimpleInterval is a concrete implementation of the ConfInterval interface. ; It implements simple 1-dimensional intervals in a range [a,b].; In addition, you can ask it for the upper- or lower-bound.; . Function Members (Methods); public:. virtual~SimpleInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const char* name = 0); RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:12,Simpl,SimpleInterval,12,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,10,"['Simpl', 'simpl']","['SimpleInterval', 'simple']"
Usability,". RooStats::SimpleInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleInterval. class RooStats::SimpleInterval: public RooStats::ConfInterval. SimpleInterval is a concrete implementation of the ConfInterval interface. ; It implements simple 1-dimensional intervals in a range [a,b].; In addition, you can ask it for the upper- or lower-bound.; . Function Members (Methods); public:. virtual~SimpleInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SimpleInterval.html:12,Simpl,SimpleInterval,12,root/html526/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__SimpleInterval.html,25,"['Simpl', 'simpl']","['SimpleInterval', 'simple']"
Usability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); voidSetNullParameters(const RooArgSet& nullParameters); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; boolfFirstEval; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SimpleLikelihoodRatioTestStat.html:12,Simpl,SimpleLikelihoodRatioTestStat,12,root/html528/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__SimpleLikelihoodRatioTestStat.html,4,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt! transient copy of the alt NLL; RooNLLVar*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll. Class Charts. Inheritance; Inherited M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html:12,Simpl,SimpleLikelihoodRatioTestStat,12,root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,4,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidsetAlwaysReuseNLL(Bool_t flag); voidSetNullParameters(const RooArgSet& nullParameters); voidsetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt; RooNLLVar*fNllNull; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html:12,Simpl,SimpleLikelihoodRatioTestStat,12,root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,4,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html:12,Simpl,SimpleLikelihoodRatioTestStat,12,root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,4,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html:12,Simpl,SimpleLikelihoodRatioTestStat,12,root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,6,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,". RooStats::ToyMCSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSampler. class RooStats::ToyMCSampler: public RooStats::TestStatSampler. ToyMCSampler is a simple implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point, and evaluates a ; test statistic that the user specifies (passed via the RooStats::TestStatistic interface).; Development notes: We need to provide a nice way for the user to:. specify the number of toy experiments (needed to probe a given confidence level); specify if the number of events per toy experiment should be fixed (conditioning) or floating (unconditional); specify if any auxiliary observations should be fixed (conditioning) or floating (unconditional); specify if nuisance paramters should be part of the toy MC: eg: integrated out (Bayesian marginalization). All of these should be made fairly explicit in the interface. Function Members (Methods); public:. virtual~ToyMCSampler(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); virtual RooAbsData*GenerateToyData(RooArgSet& allParameters) const; virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& allParameters); virtual const RooAbsArg*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; stringMakeName(RooArgSet&); RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetData(const char* name); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ToyMCSampler.html:343,simpl,simple,343,root/html526/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__ToyMCSampler.html,1,['simpl'],['simple']
Usability,". RooStats::ToyMCSamplerOld. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSamplerOld. class RooStats::ToyMCSamplerOld: public RooStats::TestStatSampler. ToyMCSamplerOld is a simple implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point, and evaluates a ; test statistic that the user specifies (passed via the RooStats::TestStatistic interface).; Development notes: We need to provide a nice way for the user to:. specify the number of toy experiments (needed to probe a given confidence level); specify if the number of events per toy experiment should be fixed (conditioning) or floating (unconditional); specify if any auxiliary observations should be fixed (conditioning) or floating (unconditional); specify if nuisance paramters should be part of the toy MC: eg: integrated out (Bayesian marginalization). All of these should be made fairly explicit in the interface. Function Members (Methods); public:. virtual~ToyMCSamplerOld(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); virtual RooAbsData*GenerateToyData(RooArgSet& allParameters) const; virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& allParameters); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; stringMakeName(RooArgSet&); RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetDat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html:355,simpl,simple,355,root/html528/RooStats__ToyMCSamplerOld.html,https://root.cern,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html,1,['simpl'],['simple']
Usability,". RooStats::ToyMCSamplerOld. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSamplerOld. class RooStats::ToyMCSamplerOld: public RooStats::TestStatSampler. ToyMCSamplerOld is a simple implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point, and evaluates a ; test statistic that the user specifies (passed via the RooStats::TestStatistic interface).; Development notes: We need to provide a nice way for the user to:. specify the number of toy experiments (needed to probe a given confidence level); specify if the number of events per toy experiment should be fixed (conditioning) or floating (unconditional); specify if any auxiliary observations should be fixed (conditioning) or floating (unconditional); specify if nuisance paramters should be part of the toy MC: eg: integrated out (Bayesian marginalization). All of these should be made fairly explicit in the interface. Function Members (Methods); public:. virtual~ToyMCSamplerOld(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); virtual RooAbsData*GenerateToyData(RooArgSet& allParameters) const; virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& allParameters); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; stringMakeName(RooArgSet&); RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ToyMCSamplerOld.html:357,simpl,simple,357,root/html530/RooStats__ToyMCSamplerOld.html,https://root.cern,https://root.cern/root/html530/RooStats__ToyMCSamplerOld.html,2,['simpl'],['simple']
Usability,". RooXYChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooXYChi2Var. class RooXYChi2Var: public RooAbsOptTestStatistic. Class RooXYChi2Var implements a simple chi^2 calculation from a unbinned; dataset with values x,y with errors on y (and optionally on x) and a function.; The function can be either a RooAbsReal, or an extended RooAbsPdf where; the function value is calculated as the probability density times the; expected number of events; The chi^2 is calculated as. / (Data[y]-) - func \+2; Sum[point] | ------------------ |; \ Data[ErrY]. Function Members (Methods); public:. RooXYChi2Var(); RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); virtual~RooXYChi2Var(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:352,simpl,simple,352,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,4,['simpl'],['simple']
Usability,". RooXYChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooXYChi2Var. class RooXYChi2Var: public RooAbsOptTestStatistic. Class RooXYChi2Var implements a simple chi^2 calculation from a unbinned; dataset with values x,y with errors on y (and optionally on x) and a function.; The function can be either a RooAbsReal, or an extended RooAbsPdf where; the function value is calculated as the probability density times the; expected number of events; The chi^2 is calculated as. / (Data[y]-) - func \+2; Sum[point] | ------------------ |; \ Data[ErrY]. Function Members (Methods); public:. RooXYChi2Var(); RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); virtual~RooXYChi2Var(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:352,simpl,simple,352,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,1,['simpl'],['simple']
Usability,". RooXYChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooXYChi2Var. class RooXYChi2Var: public RooAbsOptTestStatistic. Class RooXYChi2Var implements a simple chi^2 calculation from a unbinned; dataset with values x,y with errors on y (and optionally on x) and a function.; The function can be either a RooAbsReal, or an extended RooAbsPdf where; the function value is calculated as the probability density times the; expected number of events; The chi^2 is calculated as. / (Data[y]-) - func \+2; Sum[point] | ------------------ |; \ Data[ErrY]. Function Members (Methods); public:. virtual~RooXYChi2Var(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooXYChi2Var.html:352,simpl,simple,352,root/html602/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html602/RooXYChi2Var.html,2,['simpl'],['simple']
Usability,". RootTalk Digest | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support RootTalk Digest. This mailing list is used to keep you up to date about important ROOT events (new releases, urgent bug fixes, etc.). This li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/roottalk-digest.html:133,Guid,Guides,133,d/roottalk-digest.html,https://root.cern,https://root.cern/d/roottalk-digest.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". RootTalk: [ROOT] ROOT version 3.00/01 tar files now available. [ROOT] ROOT version 3.00/01 tar files now available. From: Rene Brun (Rene.Brun@cern.ch); Date: Fri Dec 22 2000 - 15:01:04 MET. Next message: Rene Brun: ""Re: [ROOT] Kolmogorow test on weighted histos""; Previous message: Rene Brun: ""[ROOT] Re:"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. Root version 3.00/01 source and binary tar files are now available.; For more information, see:. http://root.cern.ch/; http://root.cern.ch/root/html/examples/V3.00.txt.html; http://root.cern.ch/root/SchemaEvolution.html. We are expecting to close this version around end of January.; The final version 3.00 will include a full support for STL in the new I/O; scheme and a symmetric behaviour between split and non-split mode for; the Trees. It is our intention to discontinue the support for the old HP-UX CC compiler.; The Makefile will still be provided but not the binary file.; With this version, we have added support for RedHat 7.0 and Solaris 6; with CC5.0. As soon as we have access to a Solaris 8 machine, we will also; support the corresponding binaries. CERN is closing this evening until January 8. We take this opportunity; to wish you and your family a Merry Christmas and a happy new Year 2001. Rene & Fons. Next message: Rene Brun: ""Re: [ROOT] Kolmogorow test on weighted histos""; Previous message: Rene Brun: ""[ROOT] Re:"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. This archive was generated by hypermail 2b29 ; : Tue Jan 02 2001 - 11:50:40 MET. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/roottalk/roottalk00/3518.html:881,UX,UX,881,root/roottalk/roottalk00/3518.html,https://root.cern,https://root.cern/root/roottalk/roottalk00/3518.html,1,['UX'],['UX']
Usability,". Run the tests | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anyth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:131,Guid,Guides,131,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". Set current canvas & pad. ; Returns the new current pad, or 0 in case of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 716 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 734 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 767 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 785 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 775 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas default constructor. ; Definition at line 188 of file TCanvas.cxx. ◆ Constructor() [2/4]. void TCanvas::Constructor ; (; const char * ; name, . const char * ; title, . Int_t ; form . ). Create a new canvas with a predefined size form. ; If form < 0 the menubar is not shown. form = 1 700x500 at 10,10 (set by TStyle::SetCanvasDefH,W,X,Y); form = 2 500x500 at 20,20; form = 3 500x500 at 30,30; form = 4 500x500 at 40,40; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:66591,Clear,Cleared,66591,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['Clear'],['Cleared']
Usability,". Set current canvas & pad. ; Returns the new current pad, or 0 in case of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 719 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 737 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 770 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 788 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 778 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas default constructor. ; Definition at line 191 of file TCanvas.cxx. ◆ Constructor() [2/4]. void TCanvas::Constructor ; (; const char * ; name, . const char * ; title, . Int_t ; form . ). Create a new canvas with a predefined size form. ; If form < 0 the menubar is not shown. form = 1 700x500 at 10,10 (set by TStyle::SetCanvasDefH,W,X,Y); form = 2 500x500 at 20,20; form = 3 500x500 at 30,30; form = 4 500x500 at 40,40; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:66967,Clear,Cleared,66967,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['Clear'],['Cleared']
Usability,". Shifter's Instructions | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Shifter's Instructions. These are the aspects the shifter shall keep under control; The shifter summarises the events of the week ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/shifters-instructions.html:140,Guid,Guides,140,d/shifters-instructions.html,https://root.cern,https://root.cern/d/shifters-instructions.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". Showing results with ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Showing results with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/showing-results-root.html:143,Guid,Guides,143,d/showing-results-root.html,https://root.cern,https://root.cern/d/showing-results-root.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". Simulation in ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Simulation in ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are gr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/simulation-root.html:136,Guid,Guides,136,d/simulation-root.html,https://root.cern,https://root.cern/d/simulation-root.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TDocDirective. class TDocDirective: public TNamed. When THtml parses documentation (through TDocParser), it checks for special; words (""begin_something"", ""end_something"", where the begin and end are the; significant part). THtml then searches for a TDocDirective which can handle; these tags (""whatever"" in the example), passes the text enclosed by these; tags to the directive, which in turn processes it. That way, HTML, latex, and C++ macros can be processed by THtml, e.g. to; generate plain HTML or GIF pictures. The classes reposinsible for parsing; that are TDocHtmlDirective, TDocLatexDirective, and TDocMacroDirective,; respecively. Directives can have optional parameters; these are passed as paranthesis; enclosed, comma delimited name=value pairs; see SetParameters(). You can implement your own directive simply by deriving from TDocDirective;; the tag corresponds to TDocDirective's name (e.g. ""HTML"" for ""begin_html""; ""end_html""). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. voidTObject::AbstractMethod(const char* method) const; virtual voidAddLine(const TSubString& line); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteOutput() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMEN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocDirective.html:1058,simpl,simply,1058,root/html528/TDocDirective.html,https://root.cern,https://root.cern/root/html528/TDocDirective.html,6,['simpl'],['simply']
Usability,". Support | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Support. Top level support is what makes ROOT a success. We do our utmost to solve any issues as soon as possible. To make this task as efficient as possible f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/support.html:125,Guid,Guides,125,d/support.html,https://root.cern,https://root.cern/d/support.html,3,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". SysInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SysInfo_t. class SysInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~SysInfo_t(); static TClass*Class(); virtual TClass*IsA() const; SysInfo_t&operator=(const SysInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); SysInfo_t(); SysInfo_t(const SysInfo_t&). Data Members; public:. Int_tfBusSpeedbus speed in MHz; Int_tfCpuSpeedcpu speed in MHz; TStringfCpuTypetype of cpu; Int_tfCpusnumber of cpus; Int_tfL2Cachelevel 2 cache size in KB; TStringfModelcomputer model; TStringfOSOS; Int_tfPhysRamphysical RAM in MB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SysInfo_t(); { }. virtual ~SysInfo_t(); { }. TSystem& operator=(const SysInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/SysInfo_t.html:634,simpl,simple,634,root/html602/SysInfo_t.html,https://root.cern,https://root.cern/root/html602/SysInfo_t.html,1,['simpl'],['simple']
Usability,". SysInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SysInfo_t. class SysInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~SysInfo_t(); static TClass*Class(); virtual TClass*IsA() const; SysInfo_t&operator=(const SysInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); SysInfo_t(); SysInfo_t(const SysInfo_t&). Data Members; public:. Int_tfBusSpeedbus speed in MHz; Int_tfCpuSpeedcpu speed in MHz; TStringfCpuTypetype of cpu; Int_tfCpusnumber of cpus; Int_tfL2Cachelevel 2 cache size in KB; TStringfModelcomputer model; TStringfOSOS; Int_tfPhysRamphysical RAM in MB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SysInfo_t(); { }. virtual ~SysInfo_t(); { }. TSystem& operator=(const SysInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/SysInfo_t.html:634,simpl,simple,634,root/html604/SysInfo_t.html,https://root.cern,https://root.cern/root/html604/SysInfo_t.html,1,['simpl'],['simple']
Usability,". TArrayI assignment operator. ; Definition at line 61 of file TArrayI.cxx. ◆ operator[]() [1/2]. Int_t & TArrayI::operator[] ; (; Int_t ; i). inline . Definition at line 85 of file TArrayI.h. ◆ operator[]() [2/2]. Int_t TArrayI::operator[] ; (; Int_t ; i); const. inline . Definition at line 92 of file TArrayI.h. ◆ Reset() [1/2]. void TArrayI::Reset ; (; ). inline . Definition at line 47 of file TArrayI.h. ◆ Reset() [2/2]. void TArrayI::Reset ; (; Int_t ; val). inline . Definition at line 48 of file TArrayI.h. ◆ Set() [1/2]. void TArrayI::Set ; (; Int_t ; n). overridevirtual . Set size of this array to n ints. ; A new array is created, the old contents copied to the new array, then the old array is deleted. This function should not be called if the array was declared via Adopt. ; Implements TArray.; Definition at line 105 of file TArrayI.cxx. ◆ Set() [2/2]. void TArrayI::Set ; (; Int_t ; n, . const Int_t * ; array . ). Set size of this array to n ints and set the contents. ; This function should not be called if the array was declared via Adopt. ; Definition at line 132 of file TArrayI.cxx. ◆ SetAt(). void TArrayI::SetAt ; (; Double_t ; v, . Int_t ; i . ). inlineoverridevirtual . Implements TArray.; Definition at line 51 of file TArrayI.h. ◆ Streamer(). void TArrayI::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TArrayI object. ; Reimplemented from TArray.; Reimplemented in TH1I, TH2I, and TH3I.; Definition at line 148 of file TArrayI.cxx. ◆ StreamerNVirtual(). void TArrayI::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TArrayI.h. Member Data Documentation. ◆ fArray. Int_t* TArrayI::fArray. Definition at line 30 of file TArrayI.h. Libraries for TArrayI:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TArrayI.h; core/cont/src/TArrayI.cxx. TArrayI. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayI.html:7668,Guid,Guide,7668,doc/master/classTArrayI.html,https://root.cern,https://root.cern/doc/master/classTArrayI.html,1,['Guid'],['Guide']
Usability,". TBits. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits. class TBits: public TObject. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. TBits(UInt_t nbits = 8); TBits(const TBits&); virtual~TBits(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCompact(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; UInt_tCountBits(UInt_t startBit = 0) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBits.html:324,simpl,simple,324,root/html526/TBits.html,https://root.cern,https://root.cern/root/html526/TBits.html,5,['simpl'],['simple']
Usability,". TBits. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits. class TBits: public TObject. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. virtual~TBits(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCompact(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; UInt_tCountBits(UInt_t startBit = 0) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits.html:324,simpl,simple,324,root/html602/TBits.html,https://root.cern,https://root.cern/root/html602/TBits.html,2,['simpl'],['simple']
Usability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. ~TReference(); Bool_toperator bool() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); Bool_toperator~() const; TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. Bool_t operator~() const; Flips the bit. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits__TReference.html:344,simpl,simple,344,root/html602/TBits__TReference.html,https://root.cern,https://root.cern/root/html602/TBits__TReference.html,1,['simpl'],['simple']
Usability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. ~TReference(); Bool_toperator bool() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); Bool_toperator~() const; TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. Bool_t operator~() const; Flips the bit. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBits__TReference.html:344,simpl,simple,344,root/html604/TBits__TReference.html,https://root.cern,https://root.cern/root/html604/TBits__TReference.html,1,['simpl'],['simple']
Usability,". TBufferSQL2. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » SQL; » TBufferSQL2. class TBufferSQL2: public TBufferFile. Class for serializing/deserializing object to/from SQL data base.; It redefines most of TBuffer class function to convert simple types,; array of simple types and objects to/from TSQLStructure objects.; TBufferSQL2 class uses streaming mechanism, provided by ROOT system,; therefore most of ROOT and user classes can be stored. There are; limitations for complex objects like TTree, TClonesArray, TDirectory and; few other, which can not be converted to SQL (yet). Function Members (Methods); public:. TBufferSQL2(TBuffer::EMode mode); TBufferSQL2(TBuffer::EMode mode, TSQLFile* file); virtual~TBufferSQL2(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* object); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBufferSQL2.html:417,simpl,simple,417,root/html532/TBufferSQL2.html,https://root.cern,https://root.cern/root/html532/TBufferSQL2.html,4,['simpl'],['simple']
Usability,". TBufferSQL2. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » SQL; » TBufferSQL2. class TBufferSQL2: public TBufferFile. Class for serializing/deserializing object to/from SQL data base.; It redefines most of TBuffer class function to convert simple types,; array of simple types and objects to/from TSQLStructure objects.; TBufferSQL2 class uses streaming mechanism, provided by ROOT system,; therefore most of ROOT and user classes can be stored. There are; limitations for complex objects like TTree, TClonesArray, TDirectory and; few other, which can not be converted to SQL (yet). Function Members (Methods); public:. TBufferSQL2(TBuffer::EMode mode); TBufferSQL2(TBuffer::EMode mode, TSQLFile* file); virtual~TBufferSQL2(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsize2 = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBufferSQL2.html:417,simpl,simple,417,root/html530/TBufferSQL2.html,https://root.cern,https://root.cern/root/html530/TBufferSQL2.html,2,['simpl'],['simple']
Usability,". TBufferSQL2. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » SQL; » TBufferSQL2. class TBufferSQL2: public TBufferFile. Class for serializing/deserializing object to/from SQL data base.; It redefines most of TBuffer class function to convert simple types,; array of simple types and objects to/from TSQLStructure objects.; TBufferSQL2 class uses streaming mechanism, provided by ROOT system,; therefore most of ROOT and user classes can be stored. There are; limitations for complex objects like TTree, TClonesArray, TDirectory and; few other, which can not be converted to SQL (yet). Function Members (Methods); public:. virtual~TBufferSQL2(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* object); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsize2 = -1); virtual const char*TObject::Clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferSQL2.html:417,simpl,simple,417,root/html602/TBufferSQL2.html,https://root.cern,https://root.cern/root/html602/TBufferSQL2.html,4,['simpl'],['simple']
Usability,". TBufferXML. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TBufferXML. class TBufferXML: public TBufferFile, public TXMLSetup. Class for serializing/deserializing object to/from xml.; It redefines most of TBuffer class function to convert simple types,; array of simple types and objects to/from xml.; Instead of writing a binary data it creates a set of xml structures as; nodes and attributes; TBufferXML class uses streaming mechanism, provided by ROOT system,; therefore most of ROOT and user classes can be stored to xml. There are; limitations for complex objects like TTree, which can not be yet converted to xml. Function Members (Methods); public:. TBufferXML(TBuffer::EMode mode); TBufferXML(TBuffer::EMode mode, TXMLFile* file); virtual~TBufferXML(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* object); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBufferXML.html:422,simpl,simple,422,root/html532/TBufferXML.html,https://root.cern,https://root.cern/root/html532/TBufferXML.html,4,['simpl'],['simple']
Usability,". TBufferXML. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TBufferXML. class TBufferXML: public TBufferFile, public TXMLSetup. Class for serializing/deserializing object to/from xml.; It redefines most of TBuffer class function to convert simple types,; array of simple types and objects to/from xml.; Instead of writing a binary data it creates a set of xml structures as; nodes and attributes; TBufferXML class uses streaming mechanism, provided by ROOT system,; therefore most of ROOT and user classes can be stored to xml. There are; limitations for complex objects like TTree, which can not be yet converted to xml. Function Members (Methods); public:. TBufferXML(TBuffer::EMode mode); TBufferXML(TBuffer::EMode mode, TXMLFile* file); virtual~TBufferXML(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsize2 = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TObject*ConvertFromXML(const char* str, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferXML.html:422,simpl,simple,422,root/html526/TBufferXML.html,https://root.cern,https://root.cern/root/html526/TBufferXML.html,4,['simpl'],['simple']
Usability,". TBufferXML. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TBufferXML. class TBufferXML: public TBufferFile, public TXMLSetup. Class for serializing/deserializing object to/from xml.; It redefines most of TBuffer class function to convert simple types,; array of simple types and objects to/from xml.; Instead of writing a binary data it creates a set of xml structures as; nodes and attributes; TBufferXML class uses streaming mechanism, provided by ROOT system,; therefore most of ROOT and user classes can be stored to xml. There are; limitations for complex objects like TTree, which can not be yet converted to xml. Function Members (Methods); public:. TBufferXML(TBuffer::EMode mode); TBufferXML(TBuffer::EMode mode, TXMLFile* file); virtual~TBufferXML(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsize2 = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TObject*ConvertFromXML(const char* str, Bool_t Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBufferXML.html:422,simpl,simple,422,root/html530/TBufferXML.html,https://root.cern,https://root.cern/root/html530/TBufferXML.html,2,['simpl'],['simple']
Usability,". TBufferXML. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TBufferXML. class TBufferXML: public TBufferFile, public TXMLSetup. Class for serializing/deserializing object to/from xml.; It redefines most of TBuffer class function to convert simple types,; array of simple types and objects to/from xml.; Instead of writing a binary data it creates a set of xml structures as; nodes and attributes; TBufferXML class uses streaming mechanism, provided by ROOT system,; therefore most of ROOT and user classes can be stored to xml. There are; limitations for complex objects like TTree, which can not be yet converted to xml. Function Members (Methods); public:. virtual~TBufferXML(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* object); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferXML.html:422,simpl,simple,422,root/html602/TBufferXML.html,https://root.cern,https://root.cern/root/html602/TBufferXML.html,4,['simpl'],['simple']
Usability,. TClass * TGeoGlobalMagField::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 50 of file TGeoGlobalMagField.h. ◆ IsLocked(). Bool_t TGeoGlobalMagField::IsLocked ; (; ). inline . Definition at line 36 of file TGeoGlobalMagField.h. ◆ Lock(). void TGeoGlobalMagField::Lock ; (; ). Locks the global magnetic field if this is set. Cannot be unlocked. ; Definition at line 128 of file TGeoGlobalMagField.cxx. ◆ operator=(). TGeoGlobalMagField & TGeoGlobalMagField::operator= ; (; const TGeoGlobalMagField & ; ). protecteddelete . ◆ SetField(). void TGeoGlobalMagField::SetField ; (; TVirtualMagField * ; field). Field setter. Deletes previous field if any. Acts only if fLock=kFALSE. ; Definition at line 86 of file TGeoGlobalMagField.cxx. ◆ Streamer(). void TGeoGlobalMagField::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoGlobalMagField::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file TGeoGlobalMagField.h. ◆ Unlock(). void TGeoGlobalMagField::Unlock ; (; ). inlineprotected . Definition at line 27 of file TGeoGlobalMagField.h. Member Data Documentation. ◆ fField. TVirtualMagField* TGeoGlobalMagField::fField {nullptr}. private . Definition at line 21 of file TGeoGlobalMagField.h. ◆ fgInstance. TGeoGlobalMagField * TGeoGlobalMagField::fgInstance = nullptr. staticprivate . Definition at line 20 of file TGeoGlobalMagField.h. ◆ fLock. Bool_t TGeoGlobalMagField::fLock {kFALSE}. private . Definition at line 22 of file TGeoGlobalMagField.h. Libraries for TGeoGlobalMagField:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoGlobalMagField.h; geom/geom/src/TGeoGlobalMagField.cxx. TGeoGlobalMagField. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGlobalMagField.html:15937,Guid,Guide,15937,doc/master/classTGeoGlobalMagField.html,https://root.cern,https://root.cern/doc/master/classTGeoGlobalMagField.html,1,['Guid'],['Guide']
Usability,". TCollectionClassStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionClassStreamer. class TCollectionClassStreamer: public TClassStreamer, public TCollectionStreamer. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. The purpose of this implementation; is to shield any generated dictionary implementation from the; underlying streamer/proxy implementation and only expose; the creation functions. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. virtual~TCollectionClassStreamer(); voidTCollectionStreamer::AdoptStreamer(TGenCollectionProxy* streamer); virtual TClassStreamer*Generate() const; virtual const TClass*TClassStreamer::GetOnFileClass() const; TGenCollectionProxy*GetXYZ(); virtual voidoperator()(TBuffer& buff, void* obj); virtual voidTClassStreamer::SetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* obj, const TClass* onfileClass); voidTCollectionStreamer::Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass); TCollectionClassStreamer(). protected:. voidTCollectionStreamer::InvalidProxyError(); TCollectionClassStreamer&operator=(const TCollectionClassStreamer& rhs); TCollectionClassStreamer(const TCollectionClassStreamer& c). Data Members; protected:. TClassRefTClassStreamer::fOnFileClass; TGenCollectionProxy*TCollectionStreamer::fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionStreamer& operator=(const TCollectionClassStreamer& rhs). T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCollectionClassStreamer.html:868,clear,clear,868,root/html602/TCollectionClassStreamer.html,https://root.cern,https://root.cern/root/html602/TCollectionClassStreamer.html,2,['clear'],['clear']
Usability,". TCollectionMemberStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionMemberStreamer. class TCollectionMemberStreamer: public TMemberStreamer, public TCollectionStreamer. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. The purpose of this implementation; is to shield any generated dictionary implementation from the; underlying streamer/proxy implementation and only expose; the creation functions. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. virtual~TCollectionMemberStreamer(); voidTCollectionStreamer::AdoptStreamer(TGenCollectionProxy* streamer); virtual const TClass*TMemberStreamer::GetOnFileClass() const; virtual voidoperator()(TBuffer& buff, void* obj, Int_t siz = 0); virtual voidTMemberStreamer::SetOnFileClass(const TClass* cl); voidTCollectionStreamer::Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass); TCollectionMemberStreamer(); TCollectionMemberStreamer(const TCollectionMemberStreamer& c). protected:. voidTCollectionStreamer::InvalidProxyError(). private:. TCollectionMemberStreamer&operator=(const TCollectionMemberStreamer& rhs). Data Members; protected:. TGenCollectionProxy*TCollectionStreamer::fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionStreamer& operator=(const TCollectionMemberStreamer& rhs). void operator()(TBuffer &buff, void *obj ); Streamer for I/O handling. { Streamer(buff,obj,0,fOnFileClass); }. TCollectionMemberStreamer(); Ini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCollectionMemberStreamer.html:872,clear,clear,872,root/html602/TCollectionMemberStreamer.html,https://root.cern,https://root.cern/root/html602/TCollectionMemberStreamer.html,2,['clear'],['clear']
Usability,". TCollectionProxyFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionProxyFactory. class TCollectionProxyFactory. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. The purpose of this implementation; is to shield any generated dictionary implementation from the; underlying streamer/proxy implementation and only expose; the creation functions. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~TCollectionProxyFactory(); static TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); static TMemberStreamer*GenEmulatedMemberStreamer(const char* class_name, Bool_t silent); static TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); static TClassStreamer*GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); static TMemberStreamer*GenExplicitMemberStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); static TCollectionProxyFactory::Proxy_t*GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); static TGenCollectionStreamer*GenExplicitStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); TCollectionProxyFactory&operator=(const TCollectionProxyFactory&); TCollectionProxyFactory&operator=(TCollectionProxyFactory&&); TCollectionProxyFactory(); TCollectionProxyFactory(const TCollectionProxyFactory&); TCollectionProxyFactory(TCollectionProxyFactory&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GenEmulatedProxy(const char* class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCollectionProxyFactory.html:814,clear,clear,814,root/html602/TCollectionProxyFactory.html,https://root.cern,https://root.cern/root/html602/TCollectionProxyFactory.html,2,['clear'],['clear']
Usability,". TCollectionStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionStreamer. class TCollectionStreamer. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. The purpose of this implementation; is to shield any generated dictionary implementation from the; underlying streamer/proxy implementation and only expose; the creation functions. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. virtual~TCollectionStreamer(); voidAdoptStreamer(TGenCollectionProxy* streamer); voidStreamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass); TCollectionStreamer(); TCollectionStreamer(const TCollectionStreamer& c). protected:. voidInvalidProxyError(). private:. TCollectionStreamer&operator=(const TCollectionStreamer&). Data Members; protected:. TGenCollectionProxy*fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InvalidProxyError(); Issue Error about invalid proxy. TCollectionStreamer(); Initializing constructor. TCollectionStreamer(const TCollectionStreamer& c); Copy constructor. ~TCollectionStreamer(); Standard destructor. void AdoptStreamer(TGenCollectionProxy* streamer); Attach worker proxy. void Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass); Streamer for I/O handling. TCollectionStreamer& operator=(const TCollectionStreamer& ). » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCollectionStreamer.html:802,clear,clear,802,root/html602/TCollectionStreamer.html,https://root.cern,https://root.cern/root/html602/TCollectionStreamer.html,2,['clear'],['clear']
Usability,". TColor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColor. class TColor: public TNamed. The color creation and management class. Introduction; Basic colors; The color wheel; Bright and dark colors; Gray scale view of of canvas with colors; Color palettes. Introduction; Colors are defined by their Red, Green and blue components, simply called the; RGB components. The colors are also known by the Hue, Light and saturation ; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieve thanks to its index:. TColor *color = gROOT->GetColor(10);. Then it can be manipulated. For example its RGB components can be modified:. color->SetRGB(0.1, 0.2, 0.3);. A new color can be created the following way:. Int_t ci = 1756; // color index; TColor *color = new TColor(ci, 0.1, 0.2, 0.3);. Two sets of colors are initialized;. The basic colors: colors with index from 0 to 50.; The color wheel: colors with indices from 300 to 1000. Basic colors; The following image displays the 50 basic colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c.DrawColorTable();; return c;; }; The color wheel; The wheel contains the recommended 216 colors to be used in web applications.; C; The colors in the color wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception.; Touching color chips have the same hue, but with different brightness and; vividness. Colors of slightly different hues clash. If you intend to display",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TColor.html:520,simpl,simply,520,root/html526/TColor.html,https://root.cern,https://root.cern/root/html526/TColor.html,1,['simpl'],['simply']
Usability,". TColor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColor. class TColor: public TNamed. The color creation and management class. Introduction; Basic colors; The color wheel; Bright and dark colors; Gray scale view of of canvas with colors; Color palettes. Introduction; Colors are defined by their Red, Green and blue components, simply called the; RGB components. The colors are also known by the Hue, Light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieve thanks to its index:. TColor *color = gROOT->GetColor(10);. Then it can be manipulated. For example its RGB components can be modified:. color->SetRGB(0.1, 0.2, 0.3);. A new color can be created the following way:. Int_t ci = 1756; // color index; TColor *color = new TColor(ci, 0.1, 0.2, 0.3);. Two sets of colors are initialized;. The basic colors: colors with index from 0 to 50.; The color wheel: colors with indices from 300 to 1000. Basic colors; The following image displays the 50 basic colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c.DrawColorTable();; return c;; }; The color wheel; The wheel contains the recommended 216 colors to be used in web applications.; C; The colors in the color wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception.; Touching color chips have the same hue, but with different brightness and; vividness. Colors of slightly different hues clash. If you intend to display;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TColor.html:520,simpl,simply,520,root/html528/TColor.html,https://root.cern,https://root.cern/root/html528/TColor.html,2,['simpl'],['simply']
Usability,". TColor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColor. class TColor: public TNamed. The color creation and management class. Introduction; Basic colors; The color wheel; Bright and dark colors; Gray scale view of of canvas with colors; Color palettes. Introduction; Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. TColor *color = gROOT->GetColor(10);. Then it can be manipulated. For example its RGB components can be modified:. color->SetRGB(0.1, 0.2, 0.3);. A new color can be created the following way:. Int_t ci = 1756; // color index; TColor *color = new TColor(ci, 0.1, 0.2, 0.3);. Two sets of colors are initialized;. The basic colors: colors with index from 0 to 50.; The color wheel: colors with indices from 300 to 1000. Basic colors; The following image displays the 50 basic colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c.DrawColorTable();; return c;; }; The color wheel; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the color wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception.; Touching color chips have the same hue, but with different brightness and; vividness. Colors of slightly different hues clash. If you intend to display; colors o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TColor.html:520,simpl,simply,520,root/html532/TColor.html,https://root.cern,https://root.cern/root/html532/TColor.html,1,['simpl'],['simply']
Usability,". TColor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColor. class TColor: public TNamed. The color creation and management class. Introduction; Basic colors; The color wheel; Bright and dark colors; Gray scale view of of canvas with colors; Color palettes; Color transparency. Introduction; Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. TColor *color = gROOT->GetColor(10);. Then it can be manipulated. For example its RGB components can be modified:. color->SetRGB(0.1, 0.2, 0.3);. A new color can be created the following way:. Int_t ci = 1756; // color index; TColor *color = new TColor(ci, 0.1, 0.2, 0.3);. Two sets of colors are initialized;. The basic colors: colors with index from 0 to 50.; The color wheel: colors with indices from 300 to 1000. Basic colors; The following image displays the 50 basic colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; The color wheel; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the color wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception.; Touching color chips have the same hue, but with different brightness and; vividness. Colors of slightly different hues clash. If you intend",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TColor.html:540,simpl,simply,540,root/html602/TColor.html,https://root.cern,https://root.cern/root/html602/TColor.html,2,['simpl'],['simply']
Usability,". TColor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColor. class TColor: public TNamed. The color creation and management class. Introduction; Basic colors; The color wheel; Bright and dark colors; Gray scale view of of canvas with colors; Color palettes; Color transparency. Introduction; Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. TColor *color = gROOT->GetColor(10);. Then it can be manipulated. For example its RGB components can be modified:. color->SetRGB(0.1, 0.2, 0.3);. A new color can be created the following way:. Int_t ci = 1756; // color index; TColor *color = new TColor(ci, 0.1, 0.2, 0.3);. Two sets of colors are initialized;. The basic colors: colors with index from 0 to 50.; The color wheel: colors with indices from 300 to 1000. Basic colors; The following image displays the 50 basic colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c.DrawColorTable();; return c;; }; The color wheel; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the color wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception.; Touching color chips have the same hue, but with different brightness and; vividness. Colors of slightly different hues clash. If you intend ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColor.html:540,simpl,simply,540,root/html534/TColor.html,https://root.cern,https://root.cern/root/html534/TColor.html,1,['simpl'],['simply']
Usability,". TColorGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColorGradient. class TColorGradient: public TColor. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TColorGradient(const TColorGradient&); ~TColorGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColorGradient.html:380,simpl,simple,380,root/html534/TColorGradient.html,https://root.cern,https://root.cern/root/html534/TColorGradient.html,1,['simpl'],['simple']
Usability,". TColorGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColorGradient. class TColorGradient: public TColor. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. virtual~TColorGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TColorGradient.html:380,simpl,simple,380,root/html602/TColorGradient.html,https://root.cern,https://root.cern/root/html602/TColorGradient.html,2,['simpl'],['simple']
Usability,". TColorGradient::Point. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColorGradient::Point. class TColorGradient::Point. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear or radial gradient; for a filled area. By inheriting from TColor, gradients can be; placed inside gROOT's list of colors and use it in all TAttXXX; descendants without modifying any existing code. Function Members (Methods); public:. ~Point(); TColorGradient::Point&operator=(const TColorGradient::Point&); TColorGradient::PointPoint(); TColorGradient::PointPoint(const TColorGradient::Point&); TColorGradient::PointPoint(Double_t x, Double_t y). Data Members; public:. Double_tfX; Double_tfY. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Point(). Point(Double_t x, Double_t y). » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColorGradient__Point.html:362,simpl,simple,362,root/html534/TColorGradient__Point.html,https://root.cern,https://root.cern/root/html534/TColorGradient__Point.html,1,['simpl'],['simple']
Usability,". TDecompBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TDecompBase. class TDecompBase: public TObject. Decomposition Base class. This class forms the base for all the decompositions methods in the; linear algebra package .; It or its derived classes have installed the methods to solve; equations,invert matrices and calculate determinants while monitoring; the accuracy. Each derived class has always the following methods available:. Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); gives,. {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . TransSolve(TVectorD &b); Solve A^T x = b . x is supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompBase.html:891,simpl,simple,891,root/html528/TDecompBase.html,https://root.cern,https://root.cern/root/html528/TDecompBase.html,6,['simpl'],['simple']
Usability,". TDocHtmlDirective. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TDocHtmlDirective. class TDocHtmlDirective: public TDocDirective. Process a ""begin_html"" / ""end_html"" block. Stop linking keywords and simply; copy the text enclosed by the directive to the output HTML file. Function Members (Methods); public:. TDocHtmlDirective(); TDocHtmlDirective(const TDocHtmlDirective&); virtual~TDocHtmlDirective(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddLine(const TSubString& line); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTDocDirective::DeleteOutput() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocHtmlDirective.html:379,simpl,simply,379,root/html528/TDocHtmlDirective.html,https://root.cern,https://root.cern/root/html528/TDocHtmlDirective.html,4,['simpl'],['simply']
Usability,". TDocHtmlDirective. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TDocHtmlDirective. class TDocHtmlDirective: public TDocDirective. Process a ""begin_html"" / ""end_html"" block. Stop linking keywords and simply; copy the text enclosed by the directive to the output HTML file. Function Members (Methods); public:. virtual~TDocHtmlDirective(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddLine(const TSubString& line); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTDocDirective::DeleteOutput() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDocHtmlDirective.html:379,simpl,simply,379,root/html602/TDocHtmlDirective.html,https://root.cern,https://root.cern/root/html602/TDocHtmlDirective.html,2,['simpl'],['simply']
Usability,". TDrawFeedback. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TDrawFeedback. class TDrawFeedback: public TObject, public TQObject. TDrawFeedback. Utility class to draw objects in the feedback list during queries. Function Members (Methods); public:. TDrawFeedback(TProof* proof = 0, TSeqCollection* names = 0); virtual~TDrawFeedback(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDrawFeedback.html:377,feedback,feedback,377,root/html528/TDrawFeedback.html,https://root.cern,https://root.cern/root/html528/TDrawFeedback.html,3,['feedback'],['feedback']
Usability,". TDrawFeedback. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TDrawFeedback. class TDrawFeedback: public TObject, public TQObject. TDrawFeedback. Utility class to draw objects in the feedback list during queries.; Draws histograms in separated canvases and user-defined objects via; Draw(). Users requiring advanced treatment should implement their; own version following this example. See also TStatsFeedback. Function Members (Methods); public:. TDrawFeedback(TProof* proof = 0, TSeqCollection* names = 0); virtual~TDrawFeedback(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDrawFeedback.html:377,feedback,feedback,377,root/html534/TDrawFeedback.html,https://root.cern,https://root.cern/root/html534/TDrawFeedback.html,1,['feedback'],['feedback']
Usability,". TDrawFeedback. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TDrawFeedback. class TDrawFeedback: public TObject, public TQObject. TDrawFeedback. Utility class to draw objects in the feedback list during queries.; Draws histograms in separated canvases and user-defined objects via; Draw(). Users requiring advanced treatment should implement their; own version following this example. See also TStatsFeedback. Function Members (Methods); public:. virtual~TDrawFeedback(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDrawFeedback.html:377,feedback,feedback,377,root/html602/TDrawFeedback.html,https://root.cern,https://root.cern/root/html602/TDrawFeedback.html,2,['feedback'],['feedback']
Usability,". TEmulatedCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TEmulatedCollectionProxy. class TEmulatedCollectionProxy: public TGenCollectionProxy. TEmulatedCollectionProxy. Streamer around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. virtual~TEmulatedCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void* env); virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE) const; virtual TVirtualCollectionProxy*Generate() const; virtual TClass*TGenCollectionProxy::GetCollectionClass() const; virtual Int_tTGenCollectionProxy::GetCollectionType() const; virtual TStreamerInfoActions::TActionSequence*TGenCollectionProxy::GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tTGenCollectionProxy::GetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tTGenCollectionProxy::GetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tTGenCollectionProxy::GetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tTGenCollectionProxy::GetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tTGenCollectionProxy::GetFunctionNext(Bool_t read = kTRUE); virtual ULong_tTGenCollectionPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEmulatedCollectionProxy.html:672,clear,clear,672,root/html602/TEmulatedCollectionProxy.html,https://root.cern,https://root.cern/root/html602/TEmulatedCollectionProxy.html,2,['clear'],['clear']
Usability,". TEmulatedMapProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TEmulatedMapProxy. class TEmulatedMapProxy: public TEmulatedCollectionProxy. TEmulatedMapProxy. Streamer around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. virtual~TEmulatedMapProxy(); virtual void*TEmulatedCollectionProxy::Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidTEmulatedCollectionProxy::Clear(const char* opt = """"); virtual voidTEmulatedCollectionProxy::Commit(void* env); virtual voidTEmulatedCollectionProxy::DeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; virtual voidTEmulatedCollectionProxy::Destructor(void* p, Bool_t dtorOnly = kFALSE) const; virtual TVirtualCollectionProxy*Generate() const; virtual TClass*TGenCollectionProxy::GetCollectionClass() const; virtual Int_tTGenCollectionProxy::GetCollectionType() const; virtual TStreamerInfoActions::TActionSequence*TGenCollectionProxy::GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tTGenCollectionProxy::GetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tTGenCollectionProxy::GetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tTGenCollectionProxy::GetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tTGenCollectionProxy::GetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEmulatedMapProxy.html:649,clear,clear,649,root/html602/TEmulatedMapProxy.html,https://root.cern,https://root.cern/root/html602/TEmulatedMapProxy.html,2,['clear'],['clear']
Usability,". TEntryListBlock. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TEntryListBlock. class TEntryListBlock: public TObject. TEntryListBlock: Used by TEntryList to store the entry numbers; There are 2 ways to represent entry numbers in a TEntryListBlock:. as bits, where passing entry numbers are assigned 1, not passing - 0; as a simple array of entry numbers. storing the numbers of entries that pass; storing the numbers of entries that don't pass. In both cases, a UShort_t* is used. The second option is better in case; less than 1/16 or more than 15/16 of entries pass the selection, and the representation can be; changed by calling OptimizeStorage() function. ; When the block is being filled, it's always stored as bits, and the OptimizeStorage(); function is called by TEntryList when it starts filling the next block. If; Enter() or Remove() is called after OptimizeStorage(), representation is ; again changed to 1). . Picture; Source. {; //=========Macro generated from canvas: c/c; //========= (Fri Mar 16 18:59:21 2007) by ROOT version5.15/03; TCanvas *c = new TCanvas(""c"", ""c"",49,123,752,435);; c->Range(0,0,1,1);; c->SetBorderSize(2);; c->SetFrameFillColor(0);; ; TPaveText *pt = new TPaveText(0.00313972,0.650146,0.22135,0.772595,""br"");; pt->SetFillColor(19);; TText *text = pt->AddText(""TEntryListBlock"");; pt->Draw();; ; pt = new TPaveText(0.00313972,0.827988,0.675039,0.994169,""br"");; pt->SetFillColor(19);; pt->SetTextColor(4);; text = pt->AddText(""Indices representation in a TEntryListBlock"");; pt->Draw();; ; pt = new TPaveText(0.00410678,0.412955,0.221766,0.651822,""br"");; pt->SetFillColor(19);; pt->SetTextAlign(12);; pt->SetTextSize(0.048583);; text = pt->AddText(""UShort_t* fIndices"");; text = pt->AddText(""Int_t fType"");; pt->Draw();; ; pt = new TPaveText(0.324961,0.708455,0.959184,0.80466",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEntryListBlock.html:512,simpl,simple,512,root/html528/TEntryListBlock.html,https://root.cern,https://root.cern/root/html528/TEntryListBlock.html,4,['simpl'],['simple']
Usability,". TEntryListBlock. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TEntryListBlock. class TEntryListBlock: public TObject. TEntryListBlock: Used by TEntryList to store the entry numbers; There are 2 ways to represent entry numbers in a TEntryListBlock:. as bits, where passing entry numbers are assigned 1, not passing - 0; as a simple array of entry numbers. storing the numbers of entries that pass; storing the numbers of entries that don't pass. In both cases, a UShort_t* is used. The second option is better in case; less than 1/16 or more than 15/16 of entries pass the selection, and the representation can be; changed by calling OptimizeStorage() function.; When the block is being filled, it's always stored as bits, and the OptimizeStorage(); function is called by TEntryList when it starts filling the next block. If; Enter() or Remove() is called after OptimizeStorage(), representation is; again changed to 1). Picture; Source. {; //=========Macro generated from canvas: c/c; //========= (Fri Mar 16 18:59:21 2007) by ROOT version5.15/03; TCanvas *c = new TCanvas(""c"", ""c"",49,123,752,435);; c->Range(0,0,1,1);; c->SetBorderSize(2);; c->SetFrameFillColor(0);. TPaveText *pt = new TPaveText(0.00313972,0.650146,0.22135,0.772595,""br"");; pt->SetFillColor(19);; TText *text = pt->AddText(""TEntryListBlock"");; pt->Draw();. pt = new TPaveText(0.00313972,0.827988,0.675039,0.994169,""br"");; pt->SetFillColor(19);; pt->SetTextColor(4);; text = pt->AddText(""Indices representation in a TEntryListBlock"");; pt->Draw();. pt = new TPaveText(0.00410678,0.412955,0.221766,0.651822,""br"");; pt->SetFillColor(19);; pt->SetTextAlign(12);; pt->SetTextSize(0.048583);; text = pt->AddText(""UShort_t* fIndices"");; text = pt->AddText(""Int_t fType"");; pt->Draw();. pt = new TPaveText(0.324961,0.708455,0.959184,0.804665,""br"");; pt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEntryListBlock.html:512,simpl,simple,512,root/html602/TEntryListBlock.html,https://root.cern,https://root.cern/root/html602/TEntryListBlock.html,2,['simpl'],['simple']
Usability,". TEveGedNameFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveGedNameFrame. class TEveGedNameFrame: public TGedFrame. Specialization of TGedNameFrame used in EVE.; It provides the ability to undock given editor for easier use.; Support for that is also provided from the TEveManager. Function Members (Methods); public:. TEveGedNameFrame(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame|kHorizontalFrame); virtual~TEveGedNameFrame(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGedNameFrame.html:385,undo,undock,385,root/html528/TEveGedNameFrame.html,https://root.cern,https://root.cern/root/html528/TEveGedNameFrame.html,4,['undo'],['undock']
Usability,". TEveGedNameFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveGedNameFrame. class TEveGedNameFrame: public TGedFrame. Specialization of TGedNameFrame used in EVE.; It provides the ability to undock given editor for easier use.; Support for that is also provided from the TEveManager. Function Members (Methods); public:. virtual~TEveGedNameFrame(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGedNameFrame.html:385,undo,undock,385,root/html602/TEveGedNameFrame.html,https://root.cern,https://root.cern/root/html602/TEveGedNameFrame.html,2,['undo'],['undock']
Usability,". TEveGeoShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveGeoShape. class TEveGeoShape: public TEveShape. Wrapper for TGeoShape with absolute positioning and color; attributes allowing display of extracted TGeoShape's (without an; active TGeoManager) and simplified geometries (needed for non-linear; projections). TGeoCompositeShapes and TGeoAssemblies are supported. If fNSegments data-member is < 2 (0 by default), the default number of; segments is used for tesselation and special GL objects are; instantiated for selected shapes (spheres, tubes). If fNSegments is > 2,; it gets forwarded to geo-manager and this tesselation detail is; used when creating the buffer passed to GL. Function Members (Methods); public:. TEveGeoShape(const char* name = ""TEveGeoShape"", const char* title = 0); virtual~TEveGeoShape(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElementList::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoShape.html:449,simpl,simplified,449,root/html528/TEveGeoShape.html,https://root.cern,https://root.cern/root/html528/TEveGeoShape.html,4,['simpl'],['simplified']
Usability,". TEveGeoShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveGeoShape. class TEveGeoShape: public TEveShape. Wrapper for TGeoShape with absolute positioning and color; attributes allowing display of extracted TGeoShape's (without an; active TGeoManager) and simplified geometries (needed for non-linear; projections). TGeoCompositeShapes and TGeoAssemblies are supported. If fNSegments data-member is < 2 (0 by default), the default number of; segments is used for tesselation and special GL objects are; instantiated for selected shapes (spheres, tubes). If fNSegments is > 2,; it gets forwarded to geo-manager and this tesselation detail is; used when creating the buffer passed to GL. Function Members (Methods); public:. virtual~TEveGeoShape(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElementList::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGeoShape.html:449,simpl,simplified,449,root/html602/TEveGeoShape.html,https://root.cern,https://root.cern/root/html602/TEveGeoShape.html,2,['simpl'],['simplified']
Usability,". TEveMagField. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagField. class TEveMagField. Abstract base-class for interfacing to magnetic field needed by the; TEveTrackPropagator.; See sub-classes for two simple implementations. NOTE: Magnetic field direction convention is inverted. Function Members (Methods); public:. TEveMagField(); TEveMagField(const TEveMagField&); virtual~TEveMagField(); static TClass*Class(); virtual TEveVectorGetField(Float_t, Float_t, Float_t) const; TEveVectorDGetFieldD(const TEveVectorD& v) const; virtual TEveVectorDGetFieldD(Double_t x, Double_t y, Double_t z) const; virtual Float_tGetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tIsConst() const; TEveMagField&operator=(const TEveMagField&); virtual voidPrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. Bool_tfFieldConstant. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveMagField(); {}. virtual ~TEveMagField(); {}. Bool_t IsConst() const; { return fFieldConstant; }. void PrintField(Double_t x, Double_t y, Double_t z) const. TEveVectorD GetFieldD(const TEveVectorD& v) const; { return GetFieldD(v.fX, v.fY, v.fZ); }. TEveVectorD GetFieldD(Double_t x, Double_t y, Double_t z) const; Track propgator uses only GetFieldD() and GetMaxFieldMagD(). Have to keep/reuse; GetField() and GetMaxFieldMag() because of backward compatibility. { return GetField(x, y, z); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveVector GetField(Float_t , Float_t , Float_t ) const; { return TEveVector(); }. Float_t GetMaxFieldMag() const; { retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveMagField.html:397,simpl,simple,397,root/html534/TEveMagField.html,https://root.cern,https://root.cern/root/html534/TEveMagField.html,1,['simpl'],['simple']
Usability,". TEveMagField. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagField. class TEveMagField. Abstract base-class for interfacing to magnetic field needed by the; TEveTrackPropagator.; See sub-classes for two simple implementations. NOTE: Magnetic field direction convention is inverted. Function Members (Methods); public:. virtual~TEveMagField(); static TClass*Class(); virtual TEveVectorGetField(Float_t, Float_t, Float_t) const; TEveVectorDGetFieldD(const TEveVectorD& v) const; virtual TEveVectorDGetFieldD(Double_t x, Double_t y, Double_t z) const; virtual Float_tGetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tIsConst() const; TEveMagField&operator=(const TEveMagField&); virtual voidPrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveMagField(); TEveMagField(const TEveMagField&). Data Members; protected:. Bool_tfFieldConstant. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveMagField(); {}. virtual ~TEveMagField(); {}. Bool_t IsConst() const; { return fFieldConstant; }. void PrintField(Double_t x, Double_t y, Double_t z) const. TEveVectorD GetFieldD(const TEveVectorD& v) const; { return GetFieldD(v.fX, v.fY, v.fZ); }. TEveVectorD GetFieldD(Double_t x, Double_t y, Double_t z) const; Track propgator uses only GetFieldD() and GetMaxFieldMagD(). Have to keep/reuse; GetField() and GetMaxFieldMag() because of backward compatibility. { return GetField(x, y, z); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveVector GetField(Float_t , Float_t , Float_t ) const; { return TEveVector(); }. Float_t GetMaxFieldMag() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveMagField.html:397,simpl,simple,397,root/html602/TEveMagField.html,https://root.cern,https://root.cern/root/html602/TEveMagField.html,2,['simpl'],['simple']
Usability,". TEveSecondarySelectable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveSecondarySelectable. class TEveSecondarySelectable. Semi-abstract interface for classes supporting secondary-selection. Element class that inherits from this, should also implement the; following virtuals from TEveElement:; virtual void UnSelected();; virtual void UnHighlighted();; and clear corresponding selection-set from there. To support tooltips for sub-elements, implement:; virtual TString TEveElement::GetHighlightTooltip();; and return tooltip for the entry in the fHighlightedSet.; There should always be a single entry there.; See TEveDigitSet for an example. Function Members (Methods); public:. TEveSecondarySelectable(); virtual~TEveSecondarySelectable(); static TClass*Class(); Bool_tGetAlwaysSecSelect() const; virtual TClass*IsA() const; voidProcessGLSelection(TGLSelectRecord& rec); const TEveSecondarySelectable::SelectionSet_t&RefHighlightedSet() const; const TEveSecondarySelectable::SelectionSet_t&RefSelectedSet() const; voidSetAlwaysSecSelect(Bool_t f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidProcessGLSelectionInternal(TGLSelectRecord& rec, TEveSecondarySelectable::SelectionSet_t& sset). private:. TEveSecondarySelectable(const TEveSecondarySelectable&); TEveSecondarySelectable&operator=(const TEveSecondarySelectable&). Data Members; protected:. Bool_tfAlwaysSecSelectAlways do secondary-selection in GL.; set<int>fHighlightedSetHighlighted indices.; set<int>fSelectedSetSelected indices. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSecondarySelectable(); Constructor. void ProcessGLSelection(TGLSelectRecord& rec); Process secondary GL selection and populate sel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSecondarySelectable.html:550,clear,clear,550,root/html528/TEveSecondarySelectable.html,https://root.cern,https://root.cern/root/html528/TEveSecondarySelectable.html,3,['clear'],['clear']
Usability,". TEveSecondarySelectable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveSecondarySelectable. class TEveSecondarySelectable. Semi-abstract interface for classes supporting secondary-selection. Element class that inherits from this, should also implement the; following virtuals from TEveElement:; virtual void UnSelected();; virtual void UnHighlighted();; and clear corresponding selection-set from there. To support tooltips for sub-elements, implement:; virtual TString TEveElement::GetHighlightTooltip();; and return tooltip for the entry in the fHighlightedSet.; There should always be a single entry there.; See TEveDigitSet for an example. Function Members (Methods); public:. TEveSecondarySelectable(); virtual~TEveSecondarySelectable(); static TClass*Class(); Bool_tGetAlwaysSecSelect() const; virtual TClass*IsA() const; voidProcessGLSelection(TGLSelectRecord& rec); const TEveSecondarySelectable::SelectionSet_t&RefHighlightedSet() const; const TEveSecondarySelectable::SelectionSet_t&RefSelectedSet() const; voidSetAlwaysSecSelect(Bool_t f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidProcessGLSelectionInternal(TGLSelectRecord& rec, TEveSecondarySelectable::SelectionSet_t& sset). private:. TEveSecondarySelectable(const TEveSecondarySelectable&); TEveSecondarySelectable&operator=(const TEveSecondarySelectable&). Data Members; protected:. Bool_tfAlwaysSecSelectAlways do secondary-selection in GL.; set<int>fHighlightedSetHighlighted indices.; set<int>fSelectedSetSelected indices. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSecondarySelectable(); Constructor. void ProcessGLSelection(TGLSelectRecord& rec); Process secondary GL selecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveSecondarySelectable.html:550,clear,clear,550,root/html534/TEveSecondarySelectable.html,https://root.cern,https://root.cern/root/html534/TEveSecondarySelectable.html,1,['clear'],['clear']
Usability,". TEveSecondarySelectable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveSecondarySelectable. class TEveSecondarySelectable. Semi-abstract interface for classes supporting secondary-selection. Element class that inherits from this, should also implement the; following virtuals from TEveElement:; virtual void UnSelected();; virtual void UnHighlighted();; and clear corresponding selection-set from there. To support tooltips for sub-elements, implement:; virtual TString TEveElement::GetHighlightTooltip();; and return tooltip for the entry in the fHighlightedSet.; There should always be a single entry there.; See TEveDigitSet for an example. Function Members (Methods); public:. virtual~TEveSecondarySelectable(); static TClass*Class(); Bool_tGetAlwaysSecSelect() const; virtual TClass*IsA() const; voidProcessGLSelection(TGLSelectRecord& rec); const TEveSecondarySelectable::SelectionSet_t&RefHighlightedSet() const; const TEveSecondarySelectable::SelectionSet_t&RefSelectedSet() const; voidSetAlwaysSecSelect(Bool_t f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveSecondarySelectable(). protected:. voidProcessGLSelectionInternal(TGLSelectRecord& rec, TEveSecondarySelectable::SelectionSet_t& sset). private:. TEveSecondarySelectable&operator=(const TEveSecondarySelectable&); TEveSecondarySelectable(const TEveSecondarySelectable&). Data Members; protected:. Bool_tfAlwaysSecSelectAlways do secondary-selection in GL.; TEveSecondarySelectable::SelectionSet_tfHighlightedSetHighlighted indices.; TEveSecondarySelectable::SelectionSet_tfSelectedSetSelected indices. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSecondarySelectable(); Constructor. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveSecondarySelectable.html:550,clear,clear,550,root/html602/TEveSecondarySelectable.html,https://root.cern,https://root.cern/root/html602/TEveSecondarySelectable.html,2,['clear'],['clear']
Usability,". TF1. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TF1. class TF1: public TFormula, public TAttLine, public TAttFill, public TAttMarker. TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function (see TFormula) or a; precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1/TGraph drawing functions. The following types of functions can be created:. A - Expression using variable x and no parameters; B - Expression using variable x with parameters; C - A general C function with parameters; D - A general C++ function object (functor) with parameters; E - A member function with parameters of a general C++ class. A - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators. TF1 *fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();. Case 2: inline expression using TMath functions without parameters. TF1 *fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();. Case 3: inline expression using a CINT function by name. Double_t myFunc(x) {; return x+sin(x);; }; TF1 *fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();. B - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators. Example a:; >; TF1 *fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);. This creates a function of variable x with 2 parameters.; The parameters must be initialized via:. fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);. Parameters may be given a name:. fa->SetParName(0,""Constant"");. Example b:; >; TF1 *fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); and (0) means start numbering parameters ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:448,simpl,simple,448,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,5,['simpl'],['simple']
Usability,". TF1. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TF1. class TF1: public TNamed, public TAttLine, public TAttFill, public TAttMarker. TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function (see TFormula) or a; precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1/TGraph drawing functions. The following types of functions can be created:. A - Expression using variable x and no parameters; B - Expression using variable x with parameters; C - A general C function with parameters; D - A general C++ function object (functor) with parameters; E - A member function with parameters of a general C++ class. A - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators. TF1 *fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();. Case 2: inline expression using TMath functions without parameters. TF1 *fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();. Case 3: inline expression using a CINT function by name. Double_t myFunc(x) {; return x+sin(x);; }; TF1 *fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();. B - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators. Example a:; >; TF1 *fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);. This creates a function of variable x with 2 parameters.; The parameters must be initialized via:. fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);. Parameters may be given a name:. fa->SetParName(0,""Constant"");. Example b:; >; TF1 *fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); and (0) means start numbering parameters at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:446,simpl,simple,446,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,1,['simpl'],['simple']
Usability,". TF1Parameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TF1Parameters. class TF1Parameters. TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function (see TFormula) or a; precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1/TGraph drawing functions. The following types of functions can be created:. A - Expression using variable x and no parameters; B - Expression using variable x with parameters; C - A general C function with parameters; D - A general C++ function object (functor) with parameters; E - A member function with parameters of a general C++ class. A - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators. TF1 *fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();. Case 2: inline expression using TMath functions without parameters. TF1 *fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();. Case 3: inline expression using a CINT function by name. Double_t myFunc(x) {; return x+sin(x);; }; TF1 *fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();. B - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators. Example a:; >; TF1 *fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);. This creates a function of variable x with 2 parameters.; The parameters must be initialized via:. fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);. Parameters may be given a name:. fa->SetParName(0,""Constant"");. Example b:; >; TF1 *fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); and (0) means start numbering parameters at 0.; expo(3) is a substitute for exp([",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1Parameters.html:408,simpl,simple,408,root/html604/TF1Parameters.html,https://root.cern,https://root.cern/root/html604/TF1Parameters.html,1,['simpl'],['simple']
Usability,". TFeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TFeldmanCousins. class TFeldmanCousins: public TObject. TFeldmanCousins. class to calculate the CL upper limit using; the Feldman-Cousins method as described in PRD V57 #7, p3873-3889. The default confidence interval calvculated using this method is 90%; This is set either by having a default the constructor, or using the; appropriate fraction when instantiating an object of this class (e.g. 0.9). The simple extension to a gaussian resolution function bounded at zero; has not been addressed as yet -> `time is of the essence' as they write; on the wall of the maze in that classic game ... VARIABLES THAT CAN BE ALTERED. => depending on your desired precision: The intial values of fMuMin,; fMuMax, fMuStep and fNMax are those used in the PRD:; fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; but there is total flexibility in changing this should you desire. see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C. see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?""; in the TRolke class description. Author: Adrian Bevan, Liverpool University. Copyright Liverpool University 2001 bevan@slac.stanford.edu. Function Members (Methods); public:. TFeldmanCousins(const TFeldmanCousins&); TFeldmanCousins(Double_t newCL = 0.9, TString options = """"); virtual~TFeldmanCousins(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateLowerLimit(Double_t Nobserved, Double_t Nbackground); Double_tCalculateUpperLimit(Double_t Nobserved, Double_t Nbackground); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFeldmanCousins.html:658,simpl,simple,658,root/html528/TFeldmanCousins.html,https://root.cern,https://root.cern/root/html528/TFeldmanCousins.html,4,['simpl'],['simple']
Usability,". TFeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TFeldmanCousins. class TFeldmanCousins: public TObject. TFeldmanCousins. class to calculate the CL upper limit using; the Feldman-Cousins method as described in PRD V57 #7, p3873-3889. The default confidence interval calvculated using this method is 90%; This is set either by having a default the constructor, or using the; appropriate fraction when instantiating an object of this class (e.g. 0.9). The simple extension to a gaussian resolution function bounded at zero; has not been addressed as yet -> `time is of the essence' as they write; on the wall of the maze in that classic game ... VARIABLES THAT CAN BE ALTERED. => depending on your desired precision: The intial values of fMuMin,; fMuMax, fMuStep and fNMax are those used in the PRD:; fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; but there is total flexibility in changing this should you desire. see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C. see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?""; in the TRolke class description. Author: Adrian Bevan, Liverpool University. Copyright Liverpool University 2001 bevan@slac.stanford.edu. Function Members (Methods); public:. virtual~TFeldmanCousins(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateLowerLimit(Double_t Nobserved, Double_t Nbackground); Double_tCalculateUpperLimit(Double_t Nobserved, Double_t Nbackground); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFeldmanCousins.html:658,simpl,simple,658,root/html602/TFeldmanCousins.html,https://root.cern,https://root.cern/root/html602/TFeldmanCousins.html,2,['simpl'],['simple']
Usability,". TFileIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TFileIter. class TFileIter: public TListIter. Class to iterate (read / write ) the events written to TFile.; The event is supposed to assign an unique ID in form of. TKey <event Id> ::= eventName ""."" run_number ""."" event_number. and stored as the TKey name of the object written. void TesTFileIter(){; // This macros tests the various methods of TFileIter class.; gSystem->Load(""libTable"");. //First create simple ROOT file; TDataSet *ds = new TDataSet(""event"");; TObject *nextObject = 0;; TRandom run;; TRandom event;; {; TFileIter outSet(""test.root"",""RECREATE"");; UInt_t totalEvent = 10;; UInt_t runNumber = 20010301;; Int_t i=0;; Int_t j=0;; for (;j < 10;j++) {; for (i = 1;i<totalEvent;i++) {; outSet.NextEventPut(ds,UInt_t(i),UInt_t(runNumber+j+10*run.Rndm()-5));; }; }; }; printf("" ----------------------> TFile has been created <--------------------\n"");; TFile *f = new TFile(""test.root"");; TFileIter readObj(f);; // the number of the object available directly from ""MyDataSet.root""; Int_t size = readObj.TotalKeys();; printf("" The total number of the objects: %d\n"",size);. //-----------------------------------------------------------------------; // Loop over all objects, read them in to memory one by one. printf("" -- > Loop over all objects, read them in to memory one by one < -- \n"");; for( readObj = 0; int(readObj) < size; ++readObj){; nextObject = *readObj;; printf("" %d bytes of the object \""%s\"" of class \""%s\"" written with TKey \""%s\"" has been read from file\n""; ,readObj.GetObjlen(); ,nextObject->GetName(); ,nextObject->IsA()->GetName(); ,(const char *)readObj; );; delete nextObject;; }; //-----------------------------------------------------------------------; // Now loop over all objects in inverse order; printf("" -- > Now lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileIter.html:652,simpl,simple,652,root/html528/TFileIter.html,https://root.cern,https://root.cern/root/html528/TFileIter.html,6,['simpl'],['simple']
Usability,". TFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FOAM; » TFoam. class TFoam: public TObject. FOAM Version 1.02M. Authors:; S. Jadach and P.Sawicki; Institute of Nuclear Physics, Cracow, Poland; Stanislaw. Jadach@ifj.edu.pl, Pawel.Sawicki@ifj.edu.pl. What is FOAM for?. * Suppose you want to generate randomly points (vectors) according to; an arbitrary probability distribution in n dimensions,; for which you supply your own subprogram. FOAM can do it for you!; Even if your distributions has quite strong peaks and is discontinuous!; * FOAM generates random points with weight one or with variable weight.; * FOAM is capable to integrate using efficient ""adaptive"" MC method.; (The distribution does not need to be normalized to one.); How does it work?. FOAM is the simplified version of the multi-dimensional general purpose; Monte Carlo event generator (integrator) FOAM.; It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks.; See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. . FOAM is now fully integrated with the ROOT package.; The important bonus of the ROOT use is persistency of the FOAM objects!. For more sophisticated problems full version of FOAM may be more appropriate:. ; See full version of FOAM. Simple example of the use of FOAM:. Int_t kanwa(){; gSystem->Load(""libFoam"");; TH2D *hst_xy = new TH2D(""hst_xy"" , ""x-y plot"", 50,0,1.0, 50,0,1.0);; Double_t *MCvect =new Double_t[2]; // 2-dim vector generated in the MC run; TRandom3 *PseRan = new TRandom3(); // Create random number generator; PseRan->SetSeed(4357); // Set seed; TFoam *FoamX = new TFoam(""FoamX""); // Create Simulator; FoamX->SetkDim(2); // No. of dimensions, obligatory!; FoamX->SetnCells(500); // No. of cells, can be omitted, default=2000; FoamX->SetRhoInt(Ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFoam.html:952,simpl,simplified,952,root/html528/TFoam.html,https://root.cern,https://root.cern/root/html528/TFoam.html,6,['simpl'],['simplified']
Usability,". TFumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FUMILI; » TFumiliMinimizer. class TFumiliMinimizer: public ROOT::Math::Minimizer. TFumiliMinimizer class implementing the ROOT::Math::Minimizer interface using; TFumili.; This class is normally instantiates using the plug-in manager; (plug-in with name Fumili or TFumili); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. TFumiliMinimizer(int dummy = 0); virtual~TFumiliMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings&) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; virtual boolROOT::Math::Minimizer::IsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFumiliMinimizer.html:599,Simpl,Simplex,599,root/html534/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html534/TFumiliMinimizer.html,2,['Simpl'],['Simplex']
Usability,". TFumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FUMILI; » TFumiliMinimizer. class TFumiliMinimizer: public ROOT::Math::Minimizer. TFumiliMinimizer class implementing the ROOT::Math::Minimizer interface using; TFumili.; This class is normally instantiates using the plug-in manager; (plug-in with name Fumili or TFumili); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. TFumiliMinimizer(int dummy = 0); virtual~TFumiliMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetCovMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::MinimizerOptionsRO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFumiliMinimizer.html:599,Simpl,Simplex,599,root/html530/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html530/TFumiliMinimizer.html,4,['Simpl'],['Simplex']
Usability,". TFumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FUMILI; » TFumiliMinimizer. class TFumiliMinimizer: public ROOT::Math::Minimizer. TFumiliMinimizer class implementing the ROOT::Math::Minimizer interface using; TFumili.; This class is normally instantiates using the plug-in manager; (plug-in with name Fumili or TFumili); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. TFumiliMinimizer(int dummy = 0); virtual~TFumiliMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::Options() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFumiliMinimizer.html:599,Simpl,Simplex,599,root/html528/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html528/TFumiliMinimizer.html,2,['Simpl'],['Simplex']
Usability,". TFumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FUMILI; » TFumiliMinimizer. class TFumiliMinimizer: public ROOT::Math::Minimizer. TFumiliMinimizer class implementing the ROOT::Math::Minimizer interface using; TFumili.; This class is normally instantiates using the plug-in manager; (plug-in with name Fumili or TFumili); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. virtual~TFumiliMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; virtual boolROOT::Math::Minimizer::IsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFumiliMinimizer.html:599,Simpl,Simplex,599,root/html602/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html602/TFumiliMinimizer.html,4,['Simpl'],['Simplex']
Usability,". TGCompositeFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGCompositeFrame. class TGCompositeFrame: public TGFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. TGCompositeFrame(TGClient* c, Window_t id, const TGWindow* parent = 0); TGCompositeFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual~TGCompositeFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSigna",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGCompositeFrame.html:566,simpl,simple,566,root/html528/TGCompositeFrame.html,https://root.cern,https://root.cern/root/html528/TGCompositeFrame.html,4,['simpl'],['simple']
Usability,". TGCompositeFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGCompositeFrame. class TGCompositeFrame: public TGFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. virtual~TGCompositeFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGCompositeFrame.html:566,simpl,simple,566,root/html602/TGCompositeFrame.html,https://root.cern,https://root.cern/root/html602/TGCompositeFrame.html,2,['simpl'],['simple']
Usability,". TGDockButton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGDockButton. class TGDockButton: public TGButton. A TGDockableFrame is a frame with handles that allow it to be; undocked (i.e. put in a transient frame of its own) and to be docked; again or hidden and shown again. It uses the TGDockButton, which is; a button with two vertical bars (||) and TGDockHideButton, which is; a button with a small triangle. The TGUndockedFrame is a transient; frame that on closure will put the frame back in the dock. Function Members (Methods); public:. TGDockButton(const TGCompositeFrame* p = 0, Int_t id = 1); virtual~TGDockButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGButton::Clicked()SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDockButton.html:359,undo,undocked,359,root/html528/TGDockButton.html,https://root.cern,https://root.cern/root/html528/TGDockButton.html,4,['undo'],['undocked']
Usability,". TGDockButton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGDockButton. class TGDockButton: public TGButton. A TGDockableFrame is a frame with handles that allow it to be; undocked (i.e. put in a transient frame of its own) and to be docked; again or hidden and shown again. It uses the TGDockButton, which is; a button with two vertical bars (||) and TGDockHideButton, which is; a button with a small triangle. The TGUndockedFrame is a transient; frame that on closure will put the frame back in the dock. Function Members (Methods); public:. virtual~TGDockButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGButton::Clicked()SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* sl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDockButton.html:359,undo,undocked,359,root/html602/TGDockButton.html,https://root.cern,https://root.cern/root/html602/TGDockButton.html,2,['undo'],['undocked']
Usability,". TGDockHideButton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGDockHideButton. class TGDockHideButton: public TGDockButton. A TGDockableFrame is a frame with handles that allow it to be; undocked (i.e. put in a transient frame of its own) and to be docked; again or hidden and shown again. It uses the TGDockButton, which is; a button with two vertical bars (||) and TGDockHideButton, which is; a button with a small triangle. The TGUndockedFrame is a transient; frame that on closure will put the frame back in the dock. Function Members (Methods); public:. TGDockHideButton(const TGCompositeFrame* p = 0); ~TGDockHideButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGButton::Clicked()SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* sign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDockHideButton.html:375,undo,undocked,375,root/html528/TGDockHideButton.html,https://root.cern,https://root.cern/root/html528/TGDockHideButton.html,4,['undo'],['undocked']
Usability,". TGDockHideButton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGDockHideButton. class TGDockHideButton: public TGDockButton. A TGDockableFrame is a frame with handles that allow it to be; undocked (i.e. put in a transient frame of its own) and to be docked; again or hidden and shown again. It uses the TGDockButton, which is; a button with two vertical bars (||) and TGDockHideButton, which is; a button with a small triangle. The TGUndockedFrame is a transient; frame that on closure will put the frame back in the dock. Function Members (Methods); public:. virtual~TGDockHideButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGButton::Clicked()SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* rece",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDockHideButton.html:375,undo,undocked,375,root/html602/TGDockHideButton.html,https://root.cern,https://root.cern/root/html602/TGDockHideButton.html,2,['undo'],['undocked']
Usability,". TGDockableFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGDockableFrame. class TGDockableFrame: public TGCompositeFrame, public TGWidget. A TGDockableFrame is a frame with handles that allow it to be; undocked (i.e. put in a transient frame of its own) and to be docked; again or hidden and shown again. It uses the TGDockButton, which is; a button with two vertical bars (||) and TGDockHideButton, which is; a button with a small triangle. The TGUndockedFrame is a transient; frame that on closure will put the frame back in the dock. Function Members (Methods); public:. TGDockableFrame(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kHorizontalFrame); virtual~TGDockableFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAddFrame(TGFrame* f, TGLayoutHints* hints); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDockableFrame.html:393,undo,undocked,393,root/html528/TGDockableFrame.html,https://root.cern,https://root.cern/root/html528/TGDockableFrame.html,4,['undo'],['undocked']
Usability,". TGDockableFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGDockableFrame. class TGDockableFrame: public TGCompositeFrame, public TGWidget. A TGDockableFrame is a frame with handles that allow it to be; undocked (i.e. put in a transient frame of its own) and to be docked; again or hidden and shown again. It uses the TGDockButton, which is; a button with two vertical bars (||) and TGDockHideButton, which is; a button with a small triangle. The TGUndockedFrame is a transient; frame that on closure will put the frame back in the dock. Function Members (Methods); public:. virtual~TGDockableFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAddFrame(TGFrame* f, TGLayoutHints* hints); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDockableFrame.html:393,undo,undocked,393,root/html602/TGDockableFrame.html,https://root.cern,https://root.cern/root/html602/TGDockableFrame.html,2,['undo'],['undocked']
Usability,". TGFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGFrame. class TGFrame: public TGWindow, public TQObject. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. TGFrame(TGClient* c, Window_t id, const TGWindow* parent = 0); TGFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual~TGFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidActivate(Bool_t); voidAddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFrame.html:557,simpl,simple,557,root/html528/TGFrame.html,https://root.cern,https://root.cern/root/html528/TGFrame.html,4,['simpl'],['simple']
Usability,". TGFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGFrame. class TGFrame: public TGWindow, public TQObject. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. virtual~TGFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidActivate(Bool_t); voidAddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidChangeOptions(UInt_t options);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFrame.html:557,simpl,simple,557,root/html602/TGFrame.html,https://root.cern,https://root.cern/root/html602/TGFrame.html,2,['simpl'],['simple']
Usability,". TGGroupFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGGroupFrame. class TGGroupFrame: public TGCompositeFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. TGGroupFrame(const TGWindow* p, TGString* title, UInt_t options = kVerticalFrame, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), Pixel_t back = GetDefaultFrameBackground()); TGGroupFrame(const TGWindow* p = 0, const char* title = 0, UInt_t options = kVerticalFrame, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), Pixel_t back = GetDefaultFrameBackground()); virtual~TGGroupFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGGroupFrame.html:563,simpl,simple,563,root/html528/TGGroupFrame.html,https://root.cern,https://root.cern/root/html528/TGGroupFrame.html,4,['simpl'],['simple']
Usability,". TGGroupFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGGroupFrame. class TGGroupFrame: public TGCompositeFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. virtual~TGGroupFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGGroupFrame.html:563,simpl,simple,563,root/html602/TGGroupFrame.html,https://root.cern,https://root.cern/root/html602/TGGroupFrame.html,2,['simpl'],['simple']
Usability,". TGHProgressBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGHProgressBar. class TGHProgressBar: public TGProgressBar. TGProgressBar, TGHProgressBar and TGVProgressBar. The classes in this file implement progress bars. Progress bars can; be used to show progress of tasks taking more then a few seconds.; TGProgressBar is an abstract base class, use either TGHProgressBar; or TGVProgressBar. TGHProgressBar can in addition show the position; as text in the bar. Function Members (Methods); public:. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); virtual~TGHProgressBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHProgressBar.html:392,progress bar,progress bars,392,root/html528/TGHProgressBar.html,https://root.cern,https://root.cern/root/html528/TGHProgressBar.html,8,"['Progress bar', 'progress bar']","['Progress bars', 'progress bars']"
Usability,". TGHProgressBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGHProgressBar. class TGHProgressBar: public TGProgressBar. TGProgressBar, TGHProgressBar and TGVProgressBar. The classes in this file implement progress bars. Progress bars can; be used to show progress of tasks taking more then a few seconds.; TGProgressBar is an abstract base class, use either TGHProgressBar; or TGVProgressBar. TGHProgressBar can in addition show the position; as text in the bar. Function Members (Methods); public:. virtual~TGHProgressBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHProgressBar.html:392,progress bar,progress bars,392,root/html602/TGHProgressBar.html,https://root.cern,https://root.cern/root/html602/TGHProgressBar.html,4,"['Progress bar', 'progress bar']","['Progress bars', 'progress bars']"
Usability,". TGHeaderFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGHeaderFrame. class TGHeaderFrame: public TGHorizontalFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. TGHeaderFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); ~TGHeaderFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHeaderFrame.html:567,simpl,simple,567,root/html528/TGHeaderFrame.html,https://root.cern,https://root.cern/root/html528/TGHeaderFrame.html,4,['simpl'],['simple']
Usability,". TGHeaderFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGHeaderFrame. class TGHeaderFrame: public TGHorizontalFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. virtual~TGHeaderFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHeaderFrame.html:567,simpl,simple,567,root/html602/TGHeaderFrame.html,https://root.cern,https://root.cern/root/html602/TGHeaderFrame.html,2,['simpl'],['simple']
Usability,". TGHorizontalFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGHorizontalFrame. class TGHorizontalFrame: public TGCompositeFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. TGHorizontalFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); ~TGHorizontalFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHorizontalFrame.html:578,simpl,simple,578,root/html528/TGHorizontalFrame.html,https://root.cern,https://root.cern/root/html528/TGHorizontalFrame.html,4,['simpl'],['simple']
Usability,". TGHorizontalFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGHorizontalFrame. class TGHorizontalFrame: public TGCompositeFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. virtual~TGHorizontalFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHorizontalFrame.html:578,simpl,simple,578,root/html602/TGHorizontalFrame.html,https://root.cern,https://root.cern/root/html602/TGHorizontalFrame.html,2,['simpl'],['simple']
Usability,". TGHtmlBrowser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUIHTML; » TGHtmlBrowser. class TGHtmlBrowser: public TGMainFrame. TGHtmlBrowser. A very simple HTML browser. Function Members (Methods); public:. TGHtmlBrowser(const char* filename = 0, const TGWindow* p = 0, UInt_t w = 900, UInt_t h = 600); virtual~TGHtmlBrowser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidBack(); virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); Bool_tCheckAnchors(const char*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClicked(char* uri)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHtmlBrowser.html:328,simpl,simple,328,root/html528/TGHtmlBrowser.html,https://root.cern,https://root.cern/root/html528/TGHtmlBrowser.html,4,['simpl'],['simple']
Usability,". TGHtmlBrowser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUIHTML; » TGHtmlBrowser. class TGHtmlBrowser: public TGMainFrame. TGHtmlBrowser. A very simple HTML browser. Function Members (Methods); public:. virtual~TGHtmlBrowser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidBack(); virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); Bool_tCheckAnchors(const char*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClicked(char* uri)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHtmlBrowser.html:328,simpl,simple,328,root/html602/TGHtmlBrowser.html,https://root.cern,https://root.cern/root/html602/TGHtmlBrowser.html,2,['simpl'],['simple']
Usability,". TGIconLBEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGIconLBEntry. class TGIconLBEntry: public TGTextLBEntry. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. TGIconLBEntry(const TGWindow* p = 0, Int_t id = -1, const char* str = 0, const TGPicture* pic = 0, UInt_t w = 0, Style_t s = 0, UInt_t options = kHorizontalFrame, Pixel_t back = GetWhitePixel()); virtual~TGIconLBEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLBEntry::Activate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGIconLBEntry.html:421,simpl,simple,421,root/html528/TGIconLBEntry.html,https://root.cern,https://root.cern/root/html528/TGIconLBEntry.html,1,['simpl'],['simple']
Usability,". TGIconLBEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGIconLBEntry. class TGIconLBEntry: public TGTextLBEntry. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. TGIconLBEntry(const TGWindow* p = 0, Int_t id = -1, const char* str = 0, const TGPicture* pic = 0, UInt_t w = 0, Style_t s = 0, UInt_t options = kHorizontalFrame, Pixel_t back = GetWhitePixel()); virtual~TGIconLBEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLBEntry::Activate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGIconLBEntry.html:423,simpl,simple,423,root/html530/TGIconLBEntry.html,https://root.cern,https://root.cern/root/html530/TGIconLBEntry.html,3,['simpl'],['simple']
Usability,". TGIconLBEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGIconLBEntry. class TGIconLBEntry: public TGTextLBEntry. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. virtual~TGIconLBEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLBEntry::Activate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGIconLBEntry.html:447,simpl,simple,447,root/html602/TGIconLBEntry.html,https://root.cern,https://root.cern/root/html602/TGIconLBEntry.html,2,['simpl'],['simple']
Usability,". TGLBContainer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGLBContainer. class TGLBContainer: public TGContainer. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. TGLBContainer(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kSunkenFrame, Pixel_t back = GetDefaultFrameBackground()); virtual~TGLBContainer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidActivateItem(TGFrameElement* el); virtual voidAddEntry(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidAddEntrySort(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGContainer::AdjustPosition(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGComposite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBContainer.html:445,simpl,simple,445,root/html528/TGLBContainer.html,https://root.cern,https://root.cern/root/html528/TGLBContainer.html,4,['simpl'],['simple']
Usability,". TGLBContainer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGLBContainer. class TGLBContainer: public TGContainer. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. virtual~TGLBContainer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidActivateItem(TGFrameElement* el); virtual voidAddEntry(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidAddEntrySort(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGContainer::AdjustPosition(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLBContainer.html:445,simpl,simple,445,root/html602/TGLBContainer.html,https://root.cern,https://root.cern/root/html602/TGLBContainer.html,2,['simpl'],['simple']
Usability,". TGLBEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGLBEntry. class TGLBEntry: public TGFrame. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. TGLBEntry(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kHorizontalFrame, Pixel_t back = GetWhitePixel()); ~TGLBEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidActivate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* recei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBEntry.html:429,simpl,simple,429,root/html528/TGLBEntry.html,https://root.cern,https://root.cern/root/html528/TGLBEntry.html,4,['simpl'],['simple']
Usability,". TGLBEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGLBEntry. class TGLBEntry: public TGFrame. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. virtual~TGLBEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidActivate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLBEntry.html:429,simpl,simple,429,root/html602/TGLBEntry.html,https://root.cern,https://root.cern/root/html602/TGLBEntry.html,2,['simpl'],['simple']
Usability,". TGLLockable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLockable. class TGLLockable. TGLLockable. Simple locking interface used by viewer and scene. Function Members (Methods); public:. TGLLockable(); virtual~TGLLockable(); static TClass*Class(); TGLLockable::ELockCurrentLock() const; virtual TClass*IsA() const; Bool_tIsDrawOrSelectLock() const; Bool_tIsLocked() const; virtual const char*LockIdStr() const; static const char*LockName(TGLLockable::ELock lock); static Bool_tLockValid(TGLLockable::ELock lock); Bool_tReleaseLock(TGLLockable::ELock lock) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tTakeLock(TGLLockable::ELock lock) const. private:. TGLLockable(const TGLLockable&); TGLLockable&operator=(const TGLLockable&). Data Members; public:. enum ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. TGLLockable::ELockfLockLock state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLockable(); Constructor. Bool_t TakeLock(TGLLockable::ELock lock) const; Lock the object in mode 'lock'. Return TRUE if successful, FALSE; if the object is already locked. Bool_t ReleaseLock(TGLLockable::ELock lock) const; Release current lock, make sure it the same as the 'lock' argument.; Returns TRUE on success, FALSE on failure. const char* LockName(TGLLockable::ELock lock); Return name-string for given lock-type. Bool_t LockValid(TGLLockable::ELock lock); Test if lock is a valid type to take/release.; kUnlocked is never valid in these cases. TGLLockable(const TGLLockable& ). TGLLockable& operator=(const TGLLockable& ). virtual ~TGLLockable(); {}. const char* LockIdStr() const; { return ""<unknown>""; }. Bool_t IsLocked() const; { return (fLock != kUnlock",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLockable.html:291,Simpl,Simple,291,root/html528/TGLLockable.html,https://root.cern,https://root.cern/root/html528/TGLLockable.html,3,['Simpl'],['Simple']
Usability,". TGLLockable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLockable. class TGLLockable. TGLLockable. Simple locking interface used by viewer and scene. Function Members (Methods); public:. TGLLockable(); virtual~TGLLockable(); static TClass*Class(); TGLLockable::ELockCurrentLock() const; virtual TClass*IsA() const; Bool_tIsDrawOrSelectLock() const; Bool_tIsLocked() const; virtual const char*LockIdStr() const; static const char*LockName(TGLLockable::ELock lock); static Bool_tLockValid(TGLLockable::ELock lock); Bool_tReleaseLock(TGLLockable::ELock lock) const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tTakeLock(TGLLockable::ELock lock) const. private:. TGLLockable(const TGLLockable&); TGLLockable&operator=(const TGLLockable&). Data Members; public:. enum ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. TGLLockable::ELockfLockLock state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLockable(); Constructor. Bool_t TakeLock(TGLLockable::ELock lock) const; Lock the object in mode 'lock'. Return TRUE if successful, FALSE; if the object is already locked. Bool_t ReleaseLock(TGLLockable::ELock lock) const; Release current lock, make sure it the same as the 'lock' argument.; Returns TRUE on success, FALSE on failure. const char* LockName(TGLLockable::ELock lock); Return name-string for given lock-type. Bool_t LockValid(TGLLockable::ELock lock); Test if lock is a valid type to take/release.; kUnlocked is never valid in these cases. TGLLockable(const TGLLockable& ). TGLLockable& operator=(const TGLLockable& ). virtual ~TGLLockable(); {}. const char* LockIdStr() const; { return ""<unknown>""; }. Bool_t IsLocked() const; { retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLLockable.html:291,Simpl,Simple,291,root/html534/TGLLockable.html,https://root.cern,https://root.cern/root/html534/TGLLockable.html,1,['Simpl'],['Simple']
Usability,". TGLLockable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLockable. class TGLLockable. TGLLockable. Simple locking interface used by viewer and scene. Function Members (Methods); public:. virtual~TGLLockable(); static TClass*Class(); TGLLockable::ELockCurrentLock() const; virtual TClass*IsA() const; Bool_tIsDrawOrSelectLock() const; Bool_tIsLocked() const; virtual const char*LockIdStr() const; static const char*LockName(TGLLockable::ELock lock); static Bool_tLockValid(TGLLockable::ELock lock); Bool_tReleaseLock(TGLLockable::ELock lock) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tTakeLock(TGLLockable::ELock lock) const; TGLLockable(). private:. TGLLockable&operator=(const TGLLockable&); TGLLockable(const TGLLockable&). Data Members; public:. static TGLLockable::ELockkDrawLock; static TGLLockable::ELockkModifyLock; static TGLLockable::ELockkSelectLock; static TGLLockable::ELockkUnlocked. protected:. TGLLockable::ELockfLockLock state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLockable(); Constructor. Bool_t TakeLock(TGLLockable::ELock lock) const; Lock the object in mode 'lock'. Return TRUE if successful, FALSE; if the object is already locked. Bool_t ReleaseLock(TGLLockable::ELock lock) const; Release current lock, make sure it the same as the 'lock' argument.; Returns TRUE on success, FALSE on failure. const char* LockName(TGLLockable::ELock lock); Return name-string for given lock-type. Bool_t LockValid(TGLLockable::ELock lock); Test if lock is a valid type to take/release.; kUnlocked is never valid in these cases. TGLLockable(const TGLLockable& ). TGLLockable& operator=(const TGLLockable& ). virtual ~TGLLockable()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLLockable.html:291,Simpl,Simple,291,root/html602/TGLLockable.html,https://root.cern,https://root.cern/root/html602/TGLLockable.html,2,['Simpl'],['Simple']
Usability,". TGLMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLMatrix. class TGLMatrix. TGLMatrix. 16 component (4x4) transform matrix - column MAJOR as per GL.; Provides limited support for adjusting the translation, scale and; rotation components. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLMatrix(); TGLMatrix(const TGLVertex3& translation); TGLMatrix(const Double_t* vals); TGLMatrix(const TGLMatrix& other); TGLMatrix(const TGLVertex3& origin, const TGLVector3& zAxis); TGLMatrix(Double_t x, Double_t y, Double_t z); TGLMatrix(const TGLVertex3& origin, const TGLVector3& zAxis, const TGLVector3& xAxis); virtual~TGLMatrix(); Double_t*Arr(); const Double_t*CArr() const; static TClass*Class(); voidDump() const; TGLVector3GetBaseVec(Int_t b) const; voidGetBaseVec(Int_t b, TGLVector3& v) const; voidGetBaseVec(Int_t b, Double_t* x) const; TGLVector3GetScale() const; TGLVector3GetTranslation() const; Double_tInvert(); virtual TClass*IsA() const; Bool_tIsScalingForRender() const; voidMove3LF(Double_t x, Double_t y, Double_t z); voidMoveLF(Int_t ai, Double_t amount); TGLVector3Multiply(const TGLVector3& v, Double_t w = 1) const; voidMultiplyIP(TGLVector3& v, Double_t w = 1) const; voidMultLeft(const TGLMatrix& lhs); voidMultRight(const TGLMatrix& rhs); TGLMatrix&operator*=(const TGLMatrix& rhs); TGLMatrix&operator=(const TGLMatrix& rhs); Double_t&operator[](Int_t index); Double_toperator[](Int_t index) const; TGLVector3Rotate(const TGLVector3& v) const; voidRotate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLMatrix.html:464,simpl,simple,464,root/html534/TGLMatrix.html,https://root.cern,https://root.cern/root/html534/TGLMatrix.html,1,['simpl'],['simple']
Usability,". TGLMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLMatrix. class TGLMatrix. TGLMatrix. 16 component (4x4) transform matrix - column MAJOR as per GL.; Provides limited support for adjusting the translation, scale and; rotation components. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLMatrix(); TGLMatrix(const TGLVertex3& translation); TGLMatrix(const Double_t* vals); TGLMatrix(const TGLMatrix& other); TGLMatrix(const TGLVertex3& origin, const TGLVector3& zAxis); TGLMatrix(Double_t x, Double_t y, Double_t z); TGLMatrix(const TGLVertex3& origin, const TGLVector3& zAxis, const TGLVector3& xAxis); virtual~TGLMatrix(); Double_t*Arr(); const Double_t*CArr() const; static TClass*Class(); voidDump() const; TGLVector3GetBaseVec(Int_t b) const; voidGetBaseVec(Int_t b, TGLVector3& v) const; voidGetBaseVec(Int_t b, Double_t* x) const; TGLVector3GetScale() const; TGLVector3GetTranslation() const; Double_tInvert(); virtual TClass*IsA() const; voidMove3LF(Double_t x, Double_t y, Double_t z); voidMoveLF(Int_t ai, Double_t amount); TGLVector3Multiply(const TGLVector3& v, Double_t w = 1) const; voidMultiplyIP(TGLVector3& v, Double_t w = 1) const; voidMultLeft(const TGLMatrix& lhs); voidMultRight(const TGLMatrix& rhs); TGLMatrix&operator*=(const TGLMatrix& rhs); TGLMatrix&operator=(const TGLMatrix& rhs); Double_t&operator[](Int_t index); Double_toperator[](Int_t index) const; TGLVector3Rotate(const TGLVector3& v) const; voidRotate(const TGLVertex3& pivot, const TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLMatrix.html:464,simpl,simple,464,root/html528/TGLMatrix.html,https://root.cern,https://root.cern/root/html528/TGLMatrix.html,3,['simpl'],['simple']
Usability,". TGLMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLMatrix. class TGLMatrix. TGLMatrix. 16 component (4x4) transform matrix - column MAJOR as per GL.; Provides limited support for adjusting the translation, scale and; rotation components. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TGLMatrix(); Double_t*Arr(); const Double_t*CArr() const; static TClass*Class(); voidDump() const; TGLVector3GetBaseVec(Int_t b) const; voidGetBaseVec(Int_t b, TGLVector3& v) const; voidGetBaseVec(Int_t b, Double_t* x) const; TGLVector3GetScale() const; TGLVector3GetTranslation() const; Double_tInvert(); virtual TClass*IsA() const; Bool_tIsScalingForRender() const; voidMove3LF(Double_t x, Double_t y, Double_t z); voidMoveLF(Int_t ai, Double_t amount); TGLVector3Multiply(const TGLVector3& v, Double_t w = 1) const; voidMultiplyIP(TGLVector3& v, Double_t w = 1) const; voidMultLeft(const TGLMatrix& lhs); voidMultRight(const TGLMatrix& rhs); TGLMatrix&operator*=(const TGLMatrix& rhs); TGLMatrix&operator=(const TGLMatrix& rhs); Double_t&operator[](Int_t index); Double_toperator[](Int_t index) const; TGLVector3Rotate(const TGLVector3& v) const; voidRotate(const TGLVertex3& pivot, const TGLVector3& axis, Double_t angle); voidRotateIP(TGLVector3& v) const; voidRotateLF(Int_t i1, Int_t i2, Double_t amount); voidRotatePF(Int_t i1, Int_t i2, Double_t amount); voidScale(const TGLVector3& scale); voidSet(const Double_t[16] vals); voidSet(const TGLVertex3& origin, const TGLVe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLMatrix.html:464,simpl,simple,464,root/html602/TGLMatrix.html,https://root.cern,https://root.cern/root/html602/TGLMatrix.html,2,['simpl'],['simple']
Usability,". TGLPlane. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlane. class TGLPlane. TGLPlane. 3D plane class - of format Ax + By + Cz + D = 0. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLPlane(); TGLPlane(const TGLPlane& other); TGLPlane(Double_t* eq); TGLPlane(const TGLVector3& norm, const TGLVertex3& point); TGLPlane(const TGLVertex3& p1, const TGLVertex3& p2, const TGLVertex3& p3); TGLPlane(Double_t a, Double_t b, Double_t c, Double_t d); virtual~TGLPlane(); Double_tA() const; Double_t*Arr(); Double_tB() const; Double_tC() const; const Double_t*CArr() const; static TClass*Class(); Double_tD() const; Double_tDistanceTo(const TGLVertex3& vertex) const; voidDump() const; virtual TClass*IsA() const; TGLVertex3NearestOn(const TGLVertex3& point) const; voidNegate(); TGLVector3Norm() const; TGLPlane&operator=(const TGLPlane&); voidSet(const TGLPlane& other); voidSet(Double_t* eq); voidSet(const TGLVector3& norm, const TGLVertex3& point); voidSet(const TGLVertex3& p1, const TGLVertex3& p2, const TGLVertex3& p3); voidSet(Double_t a, Double_t b, Double_t c, Double_t d); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. voidNormalise(). Data Members; private:. Double_tfVals[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlane(); Construct a default plane of x + y + z = 0. TGLPlane(const TGLPlane& other); Construct plane from 'other'. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPlane.html:358,simpl,simple,358,root/html528/TGLPlane.html,https://root.cern,https://root.cern/root/html528/TGLPlane.html,3,['simpl'],['simple']
Usability,". TGLPlane. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlane. class TGLPlane. TGLPlane. 3D plane class - of format Ax + By + Cz + D = 0. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLPlane(); TGLPlane(const TGLPlane& other); TGLPlane(Double_t* eq); TGLPlane(const TGLVector3& norm, const TGLVertex3& point); TGLPlane(const TGLVertex3& p1, const TGLVertex3& p2, const TGLVertex3& p3); TGLPlane(Double_t a, Double_t b, Double_t c, Double_t d); virtual~TGLPlane(); Double_tA() const; Double_t*Arr(); Double_tB() const; Double_tC() const; const Double_t*CArr() const; static TClass*Class(); Double_tD() const; Double_tDistanceTo(const TGLVertex3& vertex) const; voidDump() const; virtual TClass*IsA() const; TGLVertex3NearestOn(const TGLVertex3& point) const; voidNegate(); TGLVector3Norm() const; TGLPlane&operator=(const TGLPlane&); voidSet(const TGLPlane& other); voidSet(Double_t* eq); voidSet(const TGLVector3& norm, const TGLVertex3& point); voidSet(const TGLVertex3& p1, const TGLVertex3& p2, const TGLVertex3& p3); voidSet(Double_t a, Double_t b, Double_t c, Double_t d); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. voidNormalise(). Data Members; private:. Double_tfVals[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlane(); Construct a default plane of x + y + z = 0. TGLPlane(const TGLPlane& other); Construct pl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLPlane.html:358,simpl,simple,358,root/html534/TGLPlane.html,https://root.cern,https://root.cern/root/html534/TGLPlane.html,1,['simpl'],['simple']
Usability,". TGLPlane. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlane. class TGLPlane. TGLPlane. 3D plane class - of format Ax + By + Cz + D = 0. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TGLPlane(); Double_tA() const; Double_t*Arr(); Double_tB() const; Double_tC() const; const Double_t*CArr() const; static TClass*Class(); Double_tD() const; Double_tDistanceTo(const TGLVertex3& vertex) const; voidDump() const; virtual TClass*IsA() const; TGLVertex3NearestOn(const TGLVertex3& point) const; voidNegate(); TGLVector3Norm() const; TGLPlane&operator=(const TGLPlane&); voidSet(const TGLPlane& other); voidSet(Double_t[4] eq); voidSet(const TGLVector3& norm, const TGLVertex3& point); voidSet(const TGLVertex3& p1, const TGLVertex3& p2, const TGLVertex3& p3); voidSet(Double_t a, Double_t b, Double_t c, Double_t d); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLPlane(); TGLPlane(const TGLPlane& other); TGLPlane(Double_t[4] eq); TGLPlane(const TGLVector3& norm, const TGLVertex3& point); TGLPlane(const TGLVertex3& p1, const TGLVertex3& p2, const TGLVertex3& p3); TGLPlane(Double_t a, Double_t b, Double_t c, Double_t d). private:. voidNormalise(). Data Members; private:. Double_tfVals[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlane(); Construct a default plane of x + y + z = 0. TGLPlane(const TGLPlane& other",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPlane.html:358,simpl,simple,358,root/html602/TGLPlane.html,https://root.cern,https://root.cern/root/html602/TGLPlane.html,2,['simpl'],['simple']
Usability,". TGLSelectRecord. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectRecord. class TGLSelectRecord: public TGLSelectRecordBase. Standard selection record including information about containing; scene and details ob out selected object (TGLPhysicalShape*,; TObject* or simply a void* for foreign scenes). Function Members (Methods); public:. TGLSelectRecord(); TGLSelectRecord(UInt_t* data); TGLSelectRecord(const TGLSelectRecord& rec); virtual~TGLSelectRecord(); static Bool_tAreSameSelectionWise(const TGLSelectRecord& r1, const TGLSelectRecord& r2); static TClass*Class(); UInt_tTGLSelectRecordBase::GetCurrItem() const; Bool_tGetHighlight() const; UInt_tTGLSelectRecordBase::GetItem(Int_t i) const; UInt_t*TGLSelectRecordBase::GetItems() const; Float_tTGLSelectRecordBase::GetMaxZ() const; Float_tTGLSelectRecordBase::GetMinZ() const; Bool_tGetMultiple() const; Int_tTGLSelectRecordBase::GetN() const; Int_tTGLSelectRecordBase::GetNLeft() const; TObject*GetObject() const; TGLPhysicalShape*GetPhysShape() const; TGLSceneInfo*GetSceneInfo() const; TGLSelectRecord::ESecSelResultGetSecSelResult() const; void*GetSpecific() const; Bool_tGetTransparent() const; virtual TClass*IsA() const; voidTGLSelectRecordBase::NextPos(); TGLSelectRecord&operator=(const TGLSelectRecord& rec); voidTGLSelectRecordBase::PrevPos(); voidPrint(); virtual voidReset(); voidTGLSelectRecordBase::ResetPos(); virtual voidSet(UInt_t* data); voidSetHighlight(Bool_t hlt); voidSetMultiple(Bool_t multi); voidSetObject(TObject* obj); voidSetPhysShape(TGLPhysicalShape* pshp); voidTGLSelectRecordBase::SetRawOnly(UInt_t* data); voidSetSceneInfo(TGLSceneInfo* si); voidSetSecSelResult(TGLSelectRecord::ESecSelResult r); voidSetSpecific(void* spec); voidSetTransparent(Bool_t t); virtual voidShowMembers(TMemberInspector& insp); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSelectRecord.html:458,simpl,simply,458,root/html528/TGLSelectRecord.html,https://root.cern,https://root.cern/root/html528/TGLSelectRecord.html,3,['simpl'],['simply']
Usability,". TGLSelectRecord. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectRecord. class TGLSelectRecord: public TGLSelectRecordBase. Standard selection record including information about containing; scene and details ob out selected object (TGLPhysicalShape*,; TObject* or simply a void* for foreign scenes). Function Members (Methods); public:. TGLSelectRecord(); TGLSelectRecord(UInt_t* data); TGLSelectRecord(const TGLSelectRecord& rec); virtual~TGLSelectRecord(); static Bool_tAreSameSelectionWise(const TGLSelectRecord& r1, const TGLSelectRecord& r2); static TClass*Class(); UInt_tTGLSelectRecordBase::GetCurrItem() const; Bool_tGetHighlight() const; UInt_tTGLSelectRecordBase::GetItem(Int_t i) const; UInt_t*TGLSelectRecordBase::GetItems() const; TGLLogicalShape*GetLogShape() const; Float_tTGLSelectRecordBase::GetMaxZ() const; Float_tTGLSelectRecordBase::GetMinZ() const; Bool_tGetMultiple() const; Int_tTGLSelectRecordBase::GetN() const; Int_tTGLSelectRecordBase::GetNLeft() const; TObject*GetObject() const; TGLPhysicalShape*GetPhysShape() const; TGLSceneInfo*GetSceneInfo() const; TGLSelectRecord::ESecSelResultGetSecSelResult() const; void*GetSpecific() const; Bool_tGetTransparent() const; virtual TClass*IsA() const; voidTGLSelectRecordBase::NextPos(); TGLSelectRecord&operator=(const TGLSelectRecord& rec); voidTGLSelectRecordBase::PrevPos(); voidPrint(); virtual voidReset(); voidTGLSelectRecordBase::ResetPos(); virtual voidSet(UInt_t* data); voidSetHighlight(Bool_t hlt); voidSetLogShape(TGLLogicalShape* lshp); voidSetMultiple(Bool_t multi); voidSetObject(TObject* obj); voidSetPhysShape(TGLPhysicalShape* pshp); voidTGLSelectRecordBase::SetRawOnly(UInt_t* data); voidSetSceneInfo(TGLSceneInfo* si); voidSetSecSelResult(TGLSelectRecord::ESecSelResult r); voidSetSpecific(void* spec); voidSetTransp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLSelectRecord.html:458,simpl,simply,458,root/html534/TGLSelectRecord.html,https://root.cern,https://root.cern/root/html534/TGLSelectRecord.html,1,['simpl'],['simply']
Usability,". TGLSelectRecord. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectRecord. class TGLSelectRecord: public TGLSelectRecordBase. Standard selection record including information about containing; scene and details ob out selected object (TGLPhysicalShape*,; TObject* or simply a void* for foreign scenes). Function Members (Methods); public:. virtual~TGLSelectRecord(); static Bool_tAreSameSelectionWise(const TGLSelectRecord& r1, const TGLSelectRecord& r2); static TClass*Class(); UInt_tTGLSelectRecordBase::GetCurrItem() const; Bool_tGetHighlight() const; UInt_tTGLSelectRecordBase::GetItem(Int_t i) const; UInt_t*TGLSelectRecordBase::GetItems() const; TGLLogicalShape*GetLogShape() const; Float_tTGLSelectRecordBase::GetMaxZ() const; Float_tTGLSelectRecordBase::GetMinZ() const; Bool_tGetMultiple() const; Int_tTGLSelectRecordBase::GetN() const; Int_tTGLSelectRecordBase::GetNLeft() const; TObject*GetObject() const; TGLPhysicalShape*GetPhysShape() const; TGLSceneInfo*GetSceneInfo() const; TGLSelectRecord::ESecSelResultGetSecSelResult() const; void*GetSpecific() const; Bool_tGetTransparent() const; virtual TClass*IsA() const; voidTGLSelectRecordBase::NextPos(); TGLSelectRecord&operator=(const TGLSelectRecord& rec); voidTGLSelectRecordBase::PrevPos(); voidPrint(); virtual voidReset(); voidTGLSelectRecordBase::ResetPos(); virtual voidSet(UInt_t* data); voidSetHighlight(Bool_t hlt); voidSetLogShape(TGLLogicalShape* lshp); voidSetMultiple(Bool_t multi); voidSetObject(TObject* obj); voidSetPhysShape(TGLPhysicalShape* pshp); voidTGLSelectRecordBase::SetRawOnly(UInt_t* data); voidSetSceneInfo(TGLSceneInfo* si); voidSetSecSelResult(TGLSelectRecord::ESecSelResult r); voidSetSpecific(void* spec); voidSetTransparent(Bool_t t); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSelectRecord.html:458,simpl,simply,458,root/html602/TGLSelectRecord.html,https://root.cern,https://root.cern/root/html602/TGLSelectRecord.html,2,['simpl'],['simply']
Usability,". TGLSelectionBuffer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectionBuffer. class TGLSelectionBuffer. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLSelectionBuffer(); virtual~TGLSelectionBuffer(); static TClass*Class(); const UChar_t*GetPixelColor(Int_t px, Int_t py) const; virtual TClass*IsA() const; voidReadColorBuffer(Int_t width, Int_t height); voidReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TGLSelectionBuffer(const TGLSelectionBuffer&); TGLSelectionBuffer&operator=(const TGLSelectionBuffer&). Data Members; private:. vector<UChar_t>fBuffer; Int_tfHeight; Int_tfWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLSelectionBuffer(); TGLSelectionBuffer constructor. ~TGLSelectionBuffer(); TGLSelectionBuffer destructor. void ReadColorBuffer(Int_t width, Int_t height); Read color buffer. void ReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); Read color buffer. const UChar_t * GetPixelColor(Int_t px, Int_t py) const; Get pixel color. TGLColor& operator=(const TGLSelectionBuffer& ). TGLSelectionBuffer(). » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 36560 2010-11-09 15:26:23Z couet $ » Last generated: 2010-11-09",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSelectionBuffer.html:375,simpl,simple,375,root/html528/TGLSelectionBuffer.html,https://root.cern,https://root.cern/root/html528/TGLSelectionBuffer.html,1,['simpl'],['simple']
Usability,". TGLSelectionBuffer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectionBuffer. class TGLSelectionBuffer. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLSelectionBuffer(); virtual~TGLSelectionBuffer(); static TClass*Class(); const UChar_t*GetPixelColor(Int_t px, Int_t py) const; virtual TClass*IsA() const; voidReadColorBuffer(Int_t width, Int_t height); voidReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TGLSelectionBuffer(const TGLSelectionBuffer&); TGLSelectionBuffer&operator=(const TGLSelectionBuffer&). Data Members; private:. vector<UChar_t>fBuffer; Int_tfHeight; Int_tfWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLSelectionBuffer(); TGLSelectionBuffer constructor. ~TGLSelectionBuffer(); TGLSelectionBuffer destructor. void ReadColorBuffer(Int_t width, Int_t height); Read color buffer. void ReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); Read color buffer. const UChar_t * GetPixelColor(Int_t px, Int_t py) const; Get pixel color. TGLColor& operator=(const TGLSelectionBuffer& ). TGLSelectionBuffer(). » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-07-04",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLSelectionBuffer.html:375,simpl,simple,375,root/html530/TGLSelectionBuffer.html,https://root.cern,https://root.cern/root/html530/TGLSelectionBuffer.html,1,['simpl'],['simple']
Usability,". TGLSelectionBuffer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectionBuffer. class TGLSelectionBuffer. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLSelectionBuffer(); virtual~TGLSelectionBuffer(); static TClass*Class(); const UChar_t*GetPixelColor(Int_t px, Int_t py) const; virtual TClass*IsA() const; voidReadColorBuffer(Int_t width, Int_t height); voidReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TGLSelectionBuffer(const TGLSelectionBuffer&); TGLSelectionBuffer&operator=(const TGLSelectionBuffer&). Data Members; private:. vector<UChar_t>fBuffer; Int_tfHeight; Int_tfWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLSelectionBuffer(); TGLSelectionBuffer constructor. ~TGLSelectionBuffer(); TGLSelectionBuffer destructor. void ReadColorBuffer(Int_t width, Int_t height); Read color buffer. void ReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); Read color buffer. const UChar_t * GetPixelColor(Int_t px, Int_t py) const; Get pixel color. TGLColor& operator=(const TGLSelectionBuffer& ). TGLSelectionBuffer(). » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-12-02",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLSelectionBuffer.html:375,simpl,simple,375,root/html532/TGLSelectionBuffer.html,https://root.cern,https://root.cern/root/html532/TGLSelectionBuffer.html,1,['simpl'],['simple']
Usability,". TGLSelectionBuffer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectionBuffer. class TGLSelectionBuffer. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLSelectionBuffer(); virtual~TGLSelectionBuffer(); static TClass*Class(); const UChar_t*GetPixelColor(Int_t px, Int_t py) const; virtual TClass*IsA() const; voidReadColorBuffer(Int_t width, Int_t height); voidReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TGLSelectionBuffer(const TGLSelectionBuffer&); TGLSelectionBuffer&operator=(const TGLSelectionBuffer&). Data Members; private:. vector<UChar_t>fBuffer; Int_tfHeight; Int_tfWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLSelectionBuffer(); TGLSelectionBuffer constructor. ~TGLSelectionBuffer(); TGLSelectionBuffer destructor. void ReadColorBuffer(Int_t width, Int_t height); Read color buffer. void ReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); Read color buffer. const UChar_t * GetPixelColor(Int_t px, Int_t py) const; Get pixel color. TGLColor& operator=(const TGLSelectionBuffer& ). TGLSelectionBuffer(). » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:26; This page has been",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLSelectionBuffer.html:375,simpl,simple,375,root/html534/TGLSelectionBuffer.html,https://root.cern,https://root.cern/root/html534/TGLSelectionBuffer.html,1,['simpl'],['simple']
Usability,". TGLSelectionBuffer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectionBuffer. class TGLSelectionBuffer. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TGLSelectionBuffer(); static TClass*Class(); const UChar_t*GetPixelColor(Int_t px, Int_t py) const; virtual TClass*IsA() const; voidReadColorBuffer(Int_t width, Int_t height); voidReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLSelectionBuffer(). private:. TGLSelectionBuffer&operator=(const TGLSelectionBuffer&); TGLSelectionBuffer(const TGLSelectionBuffer&). Data Members; private:. vector<UChar_t>fBuffer; Int_tfHeight; Int_tfWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLSelectionBuffer(); TGLSelectionBuffer constructor. ~TGLSelectionBuffer(); TGLSelectionBuffer destructor. void ReadColorBuffer(Int_t width, Int_t height); Read color buffer. void ReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); Read color buffer. const UChar_t * GetPixelColor(Int_t px, Int_t py) const; Get pixel color. TGLColor& operator=(const TGLSelectionBuffer& ). TGLSelectionBuffer(). » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:53; This pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLSelectionBuffer.html:375,simpl,simple,375,root/html604/TGLSelectionBuffer.html,https://root.cern,https://root.cern/root/html604/TGLSelectionBuffer.html,1,['simpl'],['simple']
Usability,". TGLSelectionBuffer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectionBuffer. class TGLSelectionBuffer. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TGLSelectionBuffer(); static TClass*Class(); const UChar_t*GetPixelColor(Int_t px, Int_t py) const; virtual TClass*IsA() const; voidReadColorBuffer(Int_t width, Int_t height); voidReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLSelectionBuffer(). private:. TGLSelectionBuffer&operator=(const TGLSelectionBuffer&); TGLSelectionBuffer(const TGLSelectionBuffer&). Data Members; private:. vector<UChar_t>fBuffer; Int_tfHeight; Int_tfWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLSelectionBuffer(); TGLSelectionBuffer constructor. ~TGLSelectionBuffer(); TGLSelectionBuffer destructor. void ReadColorBuffer(Int_t width, Int_t height); Read color buffer. void ReadColorBuffer(Int_t x, Int_t y, Int_t width, Int_t height); Read color buffer. const UChar_t * GetPixelColor(Int_t px, Int_t py) const; Get pixel color. TGLColor& operator=(const TGLSelectionBuffer& ). TGLSelectionBuffer(). » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSelectionBuffer.html:375,simpl,simple,375,root/html602/TGLSelectionBuffer.html,https://root.cern,https://root.cern/root/html602/TGLSelectionBuffer.html,1,['simpl'],['simple']
Usability,". TGLUtil::TColorLocker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TColorLocker. class TGLUtil::TColorLocker. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TColorLocker(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TColorLocker&operator=(const TGLUtil::TColorLocker&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TColorLockerTColorLocker(); TGLUtil::TColorLockerTColorLocker(const TGLUtil::TColorLocker&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TColorLocker& ). TColorLocker(); { LockColor(); }. virtual ~TColorLocker(); { UnlockColor(); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLUtil__TColorLocker.html:384,simpl,simple,384,root/html602/TGLUtil__TColorLocker.html,https://root.cern,https://root.cern/root/html602/TGLUtil__TColorLocker.html,1,['simpl'],['simple']
Usability,". TGLUtil::TColorLocker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TColorLocker. class TGLUtil::TColorLocker. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TColorLocker(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TColorLocker&operator=(const TGLUtil::TColorLocker&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TColorLockerTColorLocker(); TGLUtil::TColorLockerTColorLocker(const TGLUtil::TColorLocker&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TColorLocker& ). TColorLocker(); { LockColor(); }. virtual ~TColorLocker(); { UnlockColor(); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLUtil__TColorLocker.html:384,simpl,simple,384,root/html604/TGLUtil__TColorLocker.html,https://root.cern,https://root.cern/root/html604/TGLUtil__TColorLocker.html,1,['simpl'],['simple']
Usability,". TGLUtil::TDrawQualityModifier. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityModifier. class TGLUtil::TDrawQualityModifier. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TDrawQualityModifier(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityModifier&operator=(const TGLUtil::TDrawQualityModifier&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityModifierTDrawQualityModifier(Int_t dq); TGLUtil::TDrawQualityModifierTDrawQualityModifier(const TGLUtil::TDrawQualityModifier&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityModifier& ). TDrawQualityModifier(Int_t dq); {SetDrawQuality(dq); }. virtual ~TDrawQualityModifier(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLUtil__TDrawQualityModifier.html:408,simpl,simple,408,root/html602/TGLUtil__TDrawQualityModifier.html,https://root.cern,https://root.cern/root/html602/TGLUtil__TDrawQualityModifier.html,1,['simpl'],['simple']
Usability,". TGLUtil::TDrawQualityModifier. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityModifier. class TGLUtil::TDrawQualityModifier. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TDrawQualityModifier(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityModifier&operator=(const TGLUtil::TDrawQualityModifier&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityModifierTDrawQualityModifier(Int_t dq); TGLUtil::TDrawQualityModifierTDrawQualityModifier(const TGLUtil::TDrawQualityModifier&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityModifier& ). TDrawQualityModifier(Int_t dq); {SetDrawQuality(dq); }. virtual ~TDrawQualityModifier(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLUtil__TDrawQualityModifier.html:408,simpl,simple,408,root/html604/TGLUtil__TDrawQualityModifier.html,https://root.cern,https://root.cern/root/html604/TGLUtil__TDrawQualityModifier.html,1,['simpl'],['simple']
Usability,". TGLUtil::TDrawQualityScaler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityScaler. class TGLUtil::TDrawQualityScaler. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TDrawQualityScaler(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityScaler&operator=(const TGLUtil::TDrawQualityScaler&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityScalerTDrawQualityScaler(Float_t fac); TGLUtil::TDrawQualityScalerTDrawQualityScaler(const TGLUtil::TDrawQualityScaler&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityScaler& ). TDrawQualityScaler(Float_t fac); {SetDrawQuality((Int_t)(fac*fOldQuality)); }. virtual ~TDrawQualityScaler(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLUtil__TDrawQualityScaler.html:402,simpl,simple,402,root/html602/TGLUtil__TDrawQualityScaler.html,https://root.cern,https://root.cern/root/html602/TGLUtil__TDrawQualityScaler.html,1,['simpl'],['simple']
Usability,". TGLUtil::TDrawQualityScaler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityScaler. class TGLUtil::TDrawQualityScaler. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TDrawQualityScaler(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityScaler&operator=(const TGLUtil::TDrawQualityScaler&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityScalerTDrawQualityScaler(Float_t fac); TGLUtil::TDrawQualityScalerTDrawQualityScaler(const TGLUtil::TDrawQualityScaler&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityScaler& ). TDrawQualityScaler(Float_t fac); {SetDrawQuality((Int_t)(fac*fOldQuality)); }. virtual ~TDrawQualityScaler(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLUtil__TDrawQualityScaler.html:402,simpl,simple,402,root/html604/TGLUtil__TDrawQualityScaler.html,https://root.cern,https://root.cern/root/html604/TGLUtil__TDrawQualityScaler.html,1,['simpl'],['simple']
Usability,". TGLVertex3. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLVertex3. class TGLVertex3. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLVertex3(); TGLVertex3(Double_t* v); TGLVertex3(const TGLVertex3& other); TGLVertex3(Double_t x, Double_t y, Double_t z); virtual~TGLVertex3(); Double_t*Arr(); const Double_t*CArr() const; static TClass*Class(); voidDump() const; voidFill(Double_t val); virtual TClass*IsA() const; voidMaximum(const TGLVertex3& other); voidMinimum(const TGLVertex3& other); voidNegate(); TGLVertex3&operator*=(Double_t f); const TGLVertex3&operator+=(const TGLVector3& vec); TGLVertex3operator-() const; const TGLVertex3&operator-=(const TGLVector3& vec); TGLVertex3&operator=(const TGLVertex3& rhs); Bool_toperator==(const TGLVertex3& rhs) const; Double_t&operator[](Int_t index); const Double_t&operator[](Int_t index) const; voidSet(const Double_t* xyz); voidSet(const TGLVertex3& other); voidSet(Double_t x, Double_t y, Double_t z); voidShift(TGLVector3& shift); voidShift(Double_t xDelta, Double_t yDelta, Double_t zDelta); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Double_tX() const; Double_t&X(); Double_tY() const; Double_t&Y(); Double_tZ() const; Double_t&Z(). protected:. Bool_tValidIndex(UInt_t index) const. Data Members; protected:. Double_tfVals[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLVertex3.html:351,simpl,simple,351,root/html528/TGLVertex3.html,https://root.cern,https://root.cern/root/html528/TGLVertex3.html,3,['simpl'],['simple']
Usability,". TGLVertex3. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLVertex3. class TGLVertex3. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. TGLVertex3(); TGLVertex3(Double_t* v); TGLVertex3(const TGLVertex3& other); TGLVertex3(Double_t x, Double_t y, Double_t z); virtual~TGLVertex3(); Double_t*Arr(); const Double_t*CArr() const; static TClass*Class(); voidDump() const; voidFill(Double_t val); virtual TClass*IsA() const; voidMaximum(const TGLVertex3& other); voidMinimum(const TGLVertex3& other); voidNegate(); TGLVertex3&operator*=(Double_t f); const TGLVertex3&operator+=(const TGLVector3& vec); TGLVertex3operator-() const; const TGLVertex3&operator-=(const TGLVector3& vec); TGLVertex3&operator=(const TGLVertex3& rhs); Bool_toperator==(const TGLVertex3& rhs) const; Double_t&operator[](Int_t index); const Double_t&operator[](Int_t index) const; voidSet(const Double_t* xyz); voidSet(const TGLVertex3& other); voidSet(Double_t x, Double_t y, Double_t z); voidShift(TGLVector3& shift); voidShift(Double_t xDelta, Double_t yDelta, Double_t zDelta); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Double_tX() const; Double_t&X(); Double_tY() const; Double_t&Y(); Double_tZ() const; Double_t&Z(). protected:. Bool_tValidIndex(UInt_t index) const. Data Members; protected:. Double_tfVals[3]. Class Charts. Inheritance; Inherited Members; Includes; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLVertex3.html:351,simpl,simple,351,root/html534/TGLVertex3.html,https://root.cern,https://root.cern/root/html534/TGLVertex3.html,1,['simpl'],['simple']
Usability,". TGLVertex3. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLVertex3. class TGLVertex3. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TGLVertex3(); Double_t*Arr(); const Double_t*CArr() const; static TClass*Class(); voidDump() const; voidFill(Double_t val); virtual TClass*IsA() const; voidMaximum(const TGLVertex3& other); voidMinimum(const TGLVertex3& other); voidNegate(); TGLVertex3&operator*=(Double_t f); const TGLVertex3&operator+=(const TGLVector3& val); TGLVertex3operator-() const; const TGLVertex3&operator-=(const TGLVector3& val); TGLVertex3&operator=(const TGLVertex3& rhs); Bool_toperator==(const TGLVertex3& rhs) const; Double_t&operator[](Int_t index); const Double_t&operator[](Int_t index) const; voidSet(const Double_t* xyz); voidSet(const TGLVertex3& other); voidSet(Double_t x, Double_t y, Double_t z); voidShift(TGLVector3& shift); voidShift(Double_t xDelta, Double_t yDelta, Double_t zDelta); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLVertex3(); TGLVertex3(Double_t* v); TGLVertex3(const TGLVertex3& other); TGLVertex3(Double_t x, Double_t y, Double_t z); Double_tX() const; Double_t&X(); Double_tY() const; Double_t&Y(); Double_tZ() const; Double_t&Z(). protected:. Bool_tValidIndex(UInt_t index) const. Data Members; protected:. Double_tfVals[3]. Class Charts. Inheritance; Inherited Members;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLVertex3.html:351,simpl,simple,351,root/html602/TGLVertex3.html,https://root.cern,https://root.cern/root/html602/TGLVertex3.html,2,['simpl'],['simple']
Usability,". TGLWidget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLWidget. class TGLWidget: public TGFrame, public TGLPaintDevice. GL window with context. _Must_ _have_ a parent window; (the 'parent' parameter of ctors). The current version inherits; TGCanvas (I'm not sure about future versions), probably, in future; multiple inheritance will be added - the second; base class will be TGLPaintDevice or something like this. Usage:; - Simply create TGLWidget as an embedded widget, and; connect your slots to signals you need: HandleExpose, HandleConfigureNotify, etc.; In your slots you can use gl API directly - under Win32 TGLWidget switches; between threads internally (look TGLPShapeObjEditor for such usage).; - You can write your own class, derived from TGLWidget, with PaintGL and InitGL; overriden. Resources (and invariants):; -fContainer (TGLWidgetContainer) - controlled by std::auto_ptr; -fWindowIndex - controlled manually (see CreateWidget and dtor); -fGLContext - controlled manually (see CreateWidget and dtor); -visual info for X11 version, controlled manually (see CreateGLContainer and dtor). Exceptions:; -can be thrown only during construction.; -under win32 class does not throw itself (but some internal operations can throw); -under X11 can throw std::runtime_error (from CreateGLContext).; -In case of exceptions resources will be freed. TGLWidget object is immutable as far as it was created. Boolean parameter defines, if you want to grab user's input or not.; By default you want, but for example when not - see TGLPShapeObjEditor. Non-copyable. Function Members (Methods); public:. virtual~TGLWidget(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLWidget.html:616,Simpl,Simply,616,root/html528/TGLWidget.html,https://root.cern,https://root.cern/root/html528/TGLWidget.html,6,['Simpl'],['Simply']
Usability,". TGLineLBEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGLineLBEntry. class TGLineLBEntry: public TGTextLBEntry. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. TGLineLBEntry(const TGWindow* p = 0, Int_t id = -1, const char* str = 0, UInt_t w = 0, Style_t s = 0, UInt_t options = kHorizontalFrame, Pixel_t back = GetWhitePixel()); virtual~TGLineLBEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLBEntry::Activate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLineLBEntry.html:447,simpl,simple,447,root/html528/TGLineLBEntry.html,https://root.cern,https://root.cern/root/html528/TGLineLBEntry.html,4,['simpl'],['simple']
Usability,". TGLineLBEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGLineLBEntry. class TGLineLBEntry: public TGTextLBEntry. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. virtual~TGLineLBEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLBEntry::Activate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLineLBEntry.html:447,simpl,simple,447,root/html602/TGLineLBEntry.html,https://root.cern,https://root.cern/root/html602/TGLineLBEntry.html,2,['simpl'],['simple']
Usability,". TGListBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGListBox. class TGListBox: public TGCompositeFrame, public TGWidget. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. TGListBox(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kSunkenFrame|kDoubleBorder, Pixel_t back = GetWhitePixel()); virtual~TGListBox(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAddEntry(TGString* s, Int_t id); virtual voidAddEntry(const char* s, Int_t id); virtual voidAddEntry(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidAddEntrySort(TGString* s, Int_t id); virtual voidAddEntrySort(const char* s, Int_t id); virtual voidAddEntrySort(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeBackground(Pix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListBox.html:455,simpl,simple,455,root/html528/TGListBox.html,https://root.cern,https://root.cern/root/html528/TGListBox.html,4,['simpl'],['simple']
Usability,". TGListBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGListBox. class TGListBox: public TGCompositeFrame, public TGWidget. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. virtual~TGListBox(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAddEntry(TGString* s, Int_t id); virtual voidAddEntry(const char* s, Int_t id); virtual voidAddEntry(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidAddEntrySort(TGString* s, Int_t id); virtual voidAddEntrySort(const char* s, Int_t id); virtual voidAddEntrySort(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGListBox.html:455,simpl,simple,455,root/html602/TGListBox.html,https://root.cern,https://root.cern/root/html602/TGListBox.html,2,['simpl'],['simple']
Usability,". TGMainFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGMainFrame. class TGMainFrame: public TGCompositeFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. TGMainFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kVerticalFrame); virtual~TGMainFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tBindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMainFrame.html:560,simpl,simple,560,root/html528/TGMainFrame.html,https://root.cern,https://root.cern/root/html528/TGMainFrame.html,4,['simpl'],['simple']
Usability,". TGMainFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGMainFrame. class TGMainFrame: public TGCompositeFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. virtual~TGMainFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tBindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGMainFrame.html:560,simpl,simple,560,root/html602/TGMainFrame.html,https://root.cern,https://root.cern/root/html602/TGMainFrame.html,2,['simpl'],['simple']
Usability,". TGProgressBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGProgressBar. class TGProgressBar: public TGFrame. TGProgressBar, TGHProgressBar and TGVProgressBar. The classes in this file implement progress bars. Progress bars can; be used to show progress of tasks taking more then a few seconds.; TGProgressBar is an abstract base class, use either TGHProgressBar; or TGVProgressBar. TGHProgressBar can in addition show the position; as text in the bar. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGProgressBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGProgressBar.html:383,progress bar,progress bars,383,root/html528/TGProgressBar.html,https://root.cern,https://root.cern/root/html528/TGProgressBar.html,12,"['Progress bar', 'progress bar']","['Progress bars', 'progress bars']"
Usability,". TGSimpleTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSimpleTable. class TGSimpleTable: public TGTable. TGSimpleTable. To provide a simple class to visualize an array of doubles, the class; TGSimpleTable is provided. TGSimpleTable creates it's own; TGSimpleTableInterface. For more information, see the documentation of; TGTable. The interface is accesible through the GetInterface() method. Function Members (Methods); public:. virtual~TGSimpleTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSimpleTable.html:326,simpl,simple,326,root/html602/TGSimpleTable.html,https://root.cern,https://root.cern/root/html602/TGSimpleTable.html,2,['simpl'],['simple']
Usability,". TGSimpleTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSimpleTable. class TGSimpleTable: public TGTable. TGSimpleTable; ; To provide a simple class to visualize an array of doubles, the class; TGSimpleTable is provided. TGSimpleTable creates it's own; TGSimpleTableInterface. For more information, see the documentation of; TGTable. The interface is accesible through the GetInterface() method. Function Members (Methods); public:. TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns); virtual~TGSimpleTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSimpleTable.html:328,simpl,simple,328,root/html528/TGSimpleTable.html,https://root.cern,https://root.cern/root/html528/TGSimpleTable.html,4,['simpl'],['simple']
Usability,". TGSimpleTableInterface. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSimpleTableInterface. class TGSimpleTableInterface: public TVirtualTableInterface. TGSimpleTableInterface. TGSimpleTableInterface is a very simple implementation of a; TVirtualTableInterface. This interface provides a TGTable with data; from a two dimensional array of doubles in memory. It is mostly; meant as an example implementation for a TVirtualTableInterface. Function Members (Methods); public:. TGSimpleTableInterface(const TGSimpleTableInterface&); TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2); virtual~TGSimpleTableInterface(); static TClass*Class(); virtual const char*GetColumnHeader(UInt_t column); virtual UInt_tGetNColumns(); virtual UInt_tGetNRows(); virtual const char*GetRowHeader(UInt_t row); virtual Double_tGetValue(UInt_t row, UInt_t column); virtual const char*GetValueAsString(UInt_t row, UInt_t column); virtual TClass*IsA() const; TGSimpleTableInterface&operator=(const TGSimpleTableInterface&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. Double_t**fDataPointer to 2 dimensional array of Double_t; UInt_tfNColumns; UInt_tfNRows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2); TGSimpleTableInterfac constructor. ~TGSimpleTableInterface(); TGSimpleTableInterface destructor. Double_t GetValue(UInt_t row, UInt_t column); Return the value of the double in row,column of the data. const char * GetValueAsString(UInt_t row, UInt_t column); Return the value of the double in row,column of the data as a string. const char * GetRowHeader(UInt_t row); Return a name for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSimpleTableInterface.html:397,simpl,simple,397,root/html528/TGSimpleTableInterface.html,https://root.cern,https://root.cern/root/html528/TGSimpleTableInterface.html,3,['simpl'],['simple']
Usability,". TGSimpleTableInterface. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSimpleTableInterface. class TGSimpleTableInterface: public TVirtualTableInterface. TGSimpleTableInterface. TGSimpleTableInterface is a very simple implementation of a; TVirtualTableInterface. This interface provides a TGTable with data; from a two dimensional array of doubles in memory. It is mostly; meant as an example implementation for a TVirtualTableInterface. Function Members (Methods); public:. TGSimpleTableInterface(const TGSimpleTableInterface&); TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2); virtual~TGSimpleTableInterface(); static TClass*Class(); virtual const char*GetColumnHeader(UInt_t column); virtual UInt_tGetNColumns(); virtual UInt_tGetNRows(); virtual const char*GetRowHeader(UInt_t row); virtual Double_tGetValue(UInt_t row, UInt_t column); virtual const char*GetValueAsString(UInt_t row, UInt_t column); virtual TClass*IsA() const; TGSimpleTableInterface&operator=(const TGSimpleTableInterface&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. Double_t**fDataPointer to 2 dimensional array of Double_t; UInt_tfNColumns; UInt_tfNRows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2); TGSimpleTableInterfac constructor. ~TGSimpleTableInterface(); TGSimpleTableInterface destructor. Double_t GetValue(UInt_t row, UInt_t column); Return the value of the double in row,column of the data. const char * GetValueAsString(UInt_t row, UInt_t column); Return the value of the double in row,column of the data as a string. const char * GetRowHeader(UInt_t row)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGSimpleTableInterface.html:397,simpl,simple,397,root/html534/TGSimpleTableInterface.html,https://root.cern,https://root.cern/root/html534/TGSimpleTableInterface.html,1,['simpl'],['simple']
Usability,". TGSimpleTableInterface. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSimpleTableInterface. class TGSimpleTableInterface: public TVirtualTableInterface. TGSimpleTableInterface. TGSimpleTableInterface is a very simple implementation of a; TVirtualTableInterface. This interface provides a TGTable with data; from a two dimensional array of doubles in memory. It is mostly; meant as an example implementation for a TVirtualTableInterface. Function Members (Methods); public:. virtual~TGSimpleTableInterface(); static TClass*Class(); virtual const char*GetColumnHeader(UInt_t column); virtual UInt_tGetNColumns(); virtual UInt_tGetNRows(); virtual const char*GetRowHeader(UInt_t row); virtual Double_tGetValue(UInt_t row, UInt_t column); virtual const char*GetValueAsString(UInt_t row, UInt_t column); virtual TClass*IsA() const; TGSimpleTableInterface&operator=(const TGSimpleTableInterface&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGSimpleTableInterface(const TGSimpleTableInterface&); TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2). Data Members; private:. Double_t**fDataPointer to 2 dimensional array of Double_t; UInt_tfNColumns; UInt_tfNRows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2); TGSimpleTableInterfac constructor. ~TGSimpleTableInterface(); TGSimpleTableInterface destructor. Double_t GetValue(UInt_t row, UInt_t column); Return the value of the double in row,column of the data. const char * GetValueAsString(UInt_t row, UInt_t column); Return the value of the double in row,column of the data as a string. const char * GetRowHeader(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSimpleTableInterface.html:397,simpl,simple,397,root/html602/TGSimpleTableInterface.html,https://root.cern,https://root.cern/root/html602/TGSimpleTableInterface.html,2,['simpl'],['simple']
Usability,". TGTextEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTextEditor. class TGTextEditor: public TGMainFrame. TGTextEditor. A simple text editor that uses the TGTextEdit widget.; It provides all functionalities of TGTextEdit as copy, paste, cut,; search, go to a given line number. In addition, it provides the; possibilities for compiling, executing or interrupting a running; macro. This class can be used in following ways:; - with file name as argument:; new TGTextEditor(""hsimple.C"");; - with a TMacro* as argument:; TMacro *macro = new TMacro(""hsimple.C"");; new TGTextEditor(macro);. Basic Features:. New Document. To create a new blank document, select File menu / New, or click; the New toolbar button. It will create a new instance of; TGTextEditor. Open/Save File. To open a file, select File menu / Open or click on the Open; toolbar button. This will bring up the standard File Dialog for; opening files.; If the current document has not been saved yet, you will be asked; either to save or abandon the changes.; To save the file using the same name, select File menu / Save or; the toolbar Save button. To change the file name use File menu /; Save As... or corresponding SaveAs button on the toolbar. Text Selection. You can move the cursor by simply clicking on the desired location; with the left mouse button. To highlight some text, press the mouse; and drag the mouse while holding the left button pressed.; To select a word, double-click on it;; to select the text line - triple-click on it;; to select all do quadruple-click. Cut, Copy, Paste. After selecting some text, you can cut or copy it to the clipboard.; A subsequent paste operation will insert the contents of the; clipboard at the current cursor location. Text Search. The editor uses a standard Search dialog. You can specify a f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEditor.html:315,simpl,simple,315,root/html528/TGTextEditor.html,https://root.cern,https://root.cern/root/html528/TGTextEditor.html,6,['simpl'],['simple']
Usability,". TGTextLBEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTextLBEntry. class TGTextLBEntry: public TGLBEntry. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. TGTextLBEntry(const TGWindow* p = 0, TGString* s = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kHorizontalFrame, Pixel_t back = GetWhitePixel()); virtual~TGTextLBEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLBEntry::Activate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextLBEntry.html:443,simpl,simple,443,root/html528/TGTextLBEntry.html,https://root.cern,https://root.cern/root/html528/TGTextLBEntry.html,4,['simpl'],['simple']
Usability,". TGTextLBEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTextLBEntry. class TGTextLBEntry: public TGLBEntry. TGListBox, TGLBContainer, TGLBEntry and TGTextLBEntry. A listbox is a box, possibly with scrollbar, containing entries.; Currently entries are simple text strings (TGTextLBEntry).; A TGListBox looks a lot like a TGCanvas. It has a TGViewPort; containing a TGLBContainer which contains the entries and it also; has a vertical scrollbar which becomes visible if there are more; items than fit in the visible part of the container. The TGListBox is user callable. The other classes are service; classes of the listbox. Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. Function Members (Methods); public:. virtual~TGTextLBEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLBEntry::Activate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextLBEntry.html:443,simpl,simple,443,root/html602/TGTextLBEntry.html,https://root.cern,https://root.cern/root/html602/TGTextLBEntry.html,2,['simpl'],['simple']
Usability,". TGTransientFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTransientFrame. class TGTransientFrame: public TGMainFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. TGTransientFrame(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kVerticalFrame); ~TGTransientFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTransientFrame.html:570,simpl,simple,570,root/html528/TGTransientFrame.html,https://root.cern,https://root.cern/root/html528/TGTransientFrame.html,4,['simpl'],['simple']
Usability,". TGTransientFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTransientFrame. class TGTransientFrame: public TGMainFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. virtual~TGTransientFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTransientFrame.html:570,simpl,simple,570,root/html602/TGTransientFrame.html,https://root.cern,https://root.cern/root/html602/TGTransientFrame.html,2,['simpl'],['simple']
Usability,". TGUndockedFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGUndockedFrame. class TGUndockedFrame: public TGTransientFrame. A TGDockableFrame is a frame with handles that allow it to be; undocked (i.e. put in a transient frame of its own) and to be docked; again or hidden and shown again. It uses the TGDockButton, which is; a button with two vertical bars (||) and TGDockHideButton, which is; a button with a small triangle. The TGUndockedFrame is a transient; frame that on closure will put the frame back in the dock. Function Members (Methods); public:. TGUndockedFrame(const TGWindow* p = 0, TGDockableFrame* dockable = 0); virtual~TGUndockedFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGUndockedFrame.html:376,undo,undocked,376,root/html528/TGUndockedFrame.html,https://root.cern,https://root.cern/root/html528/TGUndockedFrame.html,4,['undo'],['undocked']
Usability,". TGUndockedFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGUndockedFrame. class TGUndockedFrame: public TGTransientFrame. A TGDockableFrame is a frame with handles that allow it to be; undocked (i.e. put in a transient frame of its own) and to be docked; again or hidden and shown again. It uses the TGDockButton, which is; a button with two vertical bars (||) and TGDockHideButton, which is; a button with a small triangle. The TGUndockedFrame is a transient; frame that on closure will put the frame back in the dock. Function Members (Methods); public:. virtual~TGUndockedFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGUndockedFrame.html:376,undo,undocked,376,root/html602/TGUndockedFrame.html,https://root.cern,https://root.cern/root/html602/TGUndockedFrame.html,2,['undo'],['undocked']
Usability,". TGVProgressBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGVProgressBar. class TGVProgressBar: public TGProgressBar. TGProgressBar, TGHProgressBar and TGVProgressBar. The classes in this file implement progress bars. Progress bars can; be used to show progress of tasks taking more then a few seconds.; TGProgressBar is an abstract base class, use either TGHProgressBar; or TGVProgressBar. TGHProgressBar can in addition show the position; as text in the bar. Function Members (Methods); public:. TGVProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t h); TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); virtual~TGVProgressBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGVProgressBar.html:392,progress bar,progress bars,392,root/html528/TGVProgressBar.html,https://root.cern,https://root.cern/root/html528/TGVProgressBar.html,8,"['Progress bar', 'progress bar']","['Progress bars', 'progress bars']"
Usability,". TGVProgressBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGVProgressBar. class TGVProgressBar: public TGProgressBar. TGProgressBar, TGHProgressBar and TGVProgressBar. The classes in this file implement progress bars. Progress bars can; be used to show progress of tasks taking more then a few seconds.; TGProgressBar is an abstract base class, use either TGHProgressBar; or TGVProgressBar. TGHProgressBar can in addition show the position; as text in the bar. Function Members (Methods); public:. virtual~TGVProgressBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGVProgressBar.html:392,progress bar,progress bars,392,root/html602/TGVProgressBar.html,https://root.cern,https://root.cern/root/html602/TGVProgressBar.html,4,"['Progress bar', 'progress bar']","['Progress bars', 'progress bars']"
Usability,". TGVerticalFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGVerticalFrame. class TGVerticalFrame: public TGCompositeFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. TGVerticalFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); ~TGVerticalFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::Block",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGVerticalFrame.html:572,simpl,simple,572,root/html528/TGVerticalFrame.html,https://root.cern,https://root.cern/root/html528/TGVerticalFrame.html,4,['simpl'],['simple']
Usability,". TGVerticalFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGVerticalFrame. class TGVerticalFrame: public TGCompositeFrame. TGFrame, TGCompositeFrame, TGVerticalFrame, TGHorizontalFrame,; TGMainFrame, TGTransientFrame and TGGroupFrame. The frame classes describe the different ""dressed"" GUI windows. The TGFrame class is a subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. The TGCompositeFrame class is the base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). The TGVerticalFrame and TGHorizontalFrame are composite frame that; layout their children in vertical or horizontal way. The TGMainFrame class defines top level windows that interact with; the system Window Manager. The TGTransientFrame class defines transient windows that typically; are used for dialogs windows. The TGGroupFrame is a composite frame with a border and a title.; It is typically used to group a number of logically related widgets; visually together. /*. */. Function Members (Methods); public:. virtual~TGVerticalFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBack",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGVerticalFrame.html:572,simpl,simple,572,root/html602/TGVerticalFrame.html,https://root.cern,https://root.cern/root/html602/TGVerticalFrame.html,2,['simpl'],['simple']
Usability,". TGedEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TGedEditor. class TGedEditor: public TVirtualPadEditor, public TGMainFrame. TGedEditor. The main class of ROOT graphics editor. It manages the appearance; of objects editors according to the selected object in the canvas; (an object became selected after the user click on it using the; left-mouse button). Every object editor provides an object specific GUI and follows a; simple naming convention: it has as a name the object class name; concatinated with 'Editor' (e.g. for TGraph objects the object; editor is TGraphEditor). The ROOT graphics editor can be activated by selecting 'Editor'; from the View canvas menu, or SetLine/Fill/Text/MarkerAttributes; from the context menu. The algorithm in use is simple: according to; the selected object <obj> in the canvas it looks for a class name; <obj>Editor. If a class with this name exists, the editor verifies; that this class derives from the base editor class TGedFrame.; It makes an instance of the object editor, scans all object base; classes searching the corresponding object editors and makes an; instance of the base class editor too. Once the object editor is in; place, it sets the user interface elements according to the object; state and is ready for interactions. When a new object of a; different class is selected, a new object editor is loaded in the; editor frame. The old one is cached in memory for potential reuse. Any created canvas will be shown with the editor if you have a; .rootrc file in your working directory containing the the line:; Canvas.ShowEditor: true. An created object can be set as selected in a macro by:; canvas->Selected(parent_pad_of_object, object, 1);; The first parameter can be the canvas itself or the pad containing; 'object'. //; /*. */. Function Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedEditor.html:617,simpl,simple,617,root/html528/TGedEditor.html,https://root.cern,https://root.cern/root/html528/TGedEditor.html,12,['simpl'],['simple']
Usability,". TGenCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy. class TGenCollectionProxy: public TVirtualCollectionProxy. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. TGenCollectionProxy(const TGenCollectionProxy& copy); TGenCollectionProxy(TGenCollectionProxy::Info_t typ, size_t iter_size); TGenCollectionProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual~TGenCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void* env); virtual voidTVirtualCollectionProxy::DeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidTVirtualCollectionProxy::Destructor(void* p, Bool_t dtorOnly = kFALSE); virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass(); virtual Int_tGetCollectionType(); virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE); virtual ULong_tGetIncrem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenCollectionProxy.html:627,clear,clear,627,root/html528/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html528/TGenCollectionProxy.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy. class TGenCollectionProxy: public TVirtualCollectionProxy. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. TGenCollectionProxy(const TGenCollectionProxy& copy); TGenCollectionProxy(TGenCollectionProxy::Info_t typ, size_t iter_size); TGenCollectionProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual~TGenCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void* env); virtual voidTVirtualCollectionProxy::DeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; virtual voidTVirtualCollectionProxy::Destructor(void* p, Bool_t dtorOnly = kFALSE) const; virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass() const; virtual Int_tGetCollectionType() const; virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGenCollectionProxy.html:629,clear,clear,629,root/html534/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TGenCollectionProxy.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy. class TGenCollectionProxy: public TVirtualCollectionProxy. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. TGenCollectionProxy(const TGenCollectionProxy& copy); TGenCollectionProxy(TGenCollectionProxy::Info_t typ, size_t iter_size); TGenCollectionProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual~TGenCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void* env); virtual voidTVirtualCollectionProxy::DeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidTVirtualCollectionProxy::Destructor(void* p, Bool_t dtorOnly = kFALSE); virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass(); virtual Int_tGetCollectionType(); virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE); virtual ULong_tGetIncr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGenCollectionProxy.html:629,clear,clear,629,root/html530/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html530/TGenCollectionProxy.html,2,['clear'],['clear']
Usability,". TGenCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy. class TGenCollectionProxy: public TVirtualCollectionProxy. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. virtual~TGenCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void* env); virtual voidTVirtualCollectionProxy::DeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; virtual voidTVirtualCollectionProxy::Destructor(void* p, Bool_t dtorOnly = kFALSE) const; virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass() const; virtual Int_tGetCollectionType() const; virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE); virtual ULong_tGetIncrement() const; virtual TClass*GetOnFileClass() const; virtual Int_tTVirtualCollectionProxy::GetProperties() const; virtual TStreamerInfoActions::TActio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenCollectionProxy.html:653,clear,clear,653,root/html602/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html602/TGenCollectionProxy.html,2,['clear'],['clear']
Usability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method&). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TGenCollectionProxy.h 36061 2010-10-04 16:05:51Z pcanal $ » Last generated: 2010-10-04 18:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenCollectionProxy__Method.html:619,clear,clear,619,root/html528/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html528/TGenCollectionProxy__Method.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method& m). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. Method & operator=(const TGenCollectionProxy::Method& m); { call = m.call; return *this; }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGenCollectionProxy__Method.html:621,clear,clear,621,root/html534/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html534/TGenCollectionProxy__Method.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method&). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TGenCollectionProxy.h 38934 2011-04-19 20:26:28Z pcanal $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGenCollectionProxy__Method.html:621,clear,clear,621,root/html530/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html530/TGenCollectionProxy__Method.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method&). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TGenCollectionProxy.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGenCollectionProxy__Method.html:621,clear,clear,621,root/html532/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html532/TGenCollectionProxy__Method.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method& m). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. Method & operator=(const TGenCollectionProxy::Method& m); { call = m.call; return *this; }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 14:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenCollectionProxy__Method.html:645,clear,clear,645,root/html602/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html602/TGenCollectionProxy__Method.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method& m). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. Method & operator=(const TGenCollectionProxy::Method& m); { call = m.call; return *this; }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGenCollectionProxy__Method.html:645,clear,clear,645,root/html604/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html604/TGenCollectionProxy__Method.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Value. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Value. class TGenCollectionProxy::Value. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Value(); voidDeleteItem(void* ptr); Bool_tIsValid(); TGenCollectionProxy::Value&operator=(const TGenCollectionProxy::Value&); TGenCollectionProxy::ValueValue(const TGenCollectionProxy::Value& inside); TGenCollectionProxy::ValueValue(const string& info). Data Members; public:. unsigned intfCasetype of data of Value_type; void*fCtorMethod cache for containee constructor; void*fDeleteMethod cache for containee delete; void*fDtorMethod cache for containee destructor; EDataTypefKindkind of ROOT-fundamental type; size_tfSizefSize of the contained object; TClassReffTypeTClass reference of Value_type in collection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Value(const Value& inside); Copy constructor. Value(const std::string& info); Initializing constructor. void DeleteItem(void* ptr); Delete individual item from STL container. Bool_t IsValid(). » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TGenCollectionProxy.h 36061 2010-10-04 16:05:51Z pcanal $ » Last generated: 2010-10-04 18:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenCollectionProxy__Value.html:616,clear,clear,616,root/html528/TGenCollectionProxy__Value.html,https://root.cern,https://root.cern/root/html528/TGenCollectionProxy__Value.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Value. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Value. class TGenCollectionProxy::Value. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Value(); voidDeleteItem(void* ptr); Bool_tIsValid(); TGenCollectionProxy::Value&operator=(const TGenCollectionProxy::Value&); TGenCollectionProxy::ValueValue(const TGenCollectionProxy::Value& inside); TGenCollectionProxy::ValueValue(const string& info). Data Members; public:. unsigned intfCasetype of data of Value_type; void*fCtorMethod cache for containee constructor; void*fDeleteMethod cache for containee delete; void*fDtorMethod cache for containee destructor; EDataTypefKindkind of ROOT-fundamental type; size_tfSizefSize of the contained object; TClassReffTypeTClass reference of Value_type in collection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Value(const Value& inside); Copy constructor. Value(const std::string& info); Initializing constructor. void DeleteItem(void* ptr); Delete individual item from STL container. Bool_t IsValid(). » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TGenCollectionProxy.h 38934 2011-04-19 20:26:28Z pcanal $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGenCollectionProxy__Value.html:618,clear,clear,618,root/html530/TGenCollectionProxy__Value.html,https://root.cern,https://root.cern/root/html530/TGenCollectionProxy__Value.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Value. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Value. class TGenCollectionProxy::Value. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Value(); voidDeleteItem(void* ptr); Bool_tIsValid(); TGenCollectionProxy::Value&operator=(const TGenCollectionProxy::Value&); TGenCollectionProxy::ValueValue(const TGenCollectionProxy::Value& inside); TGenCollectionProxy::ValueValue(const string& info, Bool_t silent). Data Members; public:. UInt_tfCasetype of data of Value_type; void*fCtorMethod cache for containee constructor; void*fDeleteMethod cache for containee delete; void*fDtorMethod cache for containee destructor; EDataTypefKindkind of ROOT-fundamental type; UInt_tfPropertiesAdditional properties of the value type (kNeedDelete); size_tfSizefSize of the contained object; TClassReffTypeTClass reference of Value_type in collection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Value(const TGenCollectionProxy::Value& inside); Copy constructor. Value(const string& info, Bool_t silent); Initializing constructor. void DeleteItem(void* ptr); Delete individual item from STL container. Bool_t IsValid(). » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TGenCollectionProxy.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or sugge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGenCollectionProxy__Value.html:618,clear,clear,618,root/html532/TGenCollectionProxy__Value.html,https://root.cern,https://root.cern/root/html532/TGenCollectionProxy__Value.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Value. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Value. class TGenCollectionProxy::Value. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Value(); voidDeleteItem(void* ptr); Bool_tIsValid(); TGenCollectionProxy::Value&operator=(const TGenCollectionProxy::Value&); TGenCollectionProxy::ValueValue(const TGenCollectionProxy::Value&); TGenCollectionProxy::ValueValue(const string& info, Bool_t silent). Data Members; public:. UInt_tfCasetype of data of Value_type; void*fCtorMethod cache for containee constructor; void*fDeleteMethod cache for containee delete; void*fDtorMethod cache for containee destructor; EDataTypefKindkind of ROOT-fundamental type; UInt_tfPropertiesAdditional properties of the value type (kNeedDelete); size_tfSizefSize of the contained object; TClassReffTypeTClass reference of Value_type in collection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Value(const string& info, Bool_t silent); Default copy constructor has the correct implementation.; Initializing constructor. void DeleteItem(void* ptr); Delete individual item from STL container. Bool_t IsValid(). Method & operator=(const TGenCollectionProxy::Value& ); { call = m.call; return *this; }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGenCollectionProxy__Value.html:618,clear,clear,618,root/html534/TGenCollectionProxy__Value.html,https://root.cern,https://root.cern/root/html534/TGenCollectionProxy__Value.html,1,['clear'],['clear']
Usability,". TGenCollectionProxy::Value. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Value. class TGenCollectionProxy::Value. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Value(); voidDeleteItem(void* ptr); Bool_tIsValid(); TGenCollectionProxy::Value&operator=(const TGenCollectionProxy::Value&); TGenCollectionProxy::Value&operator=(TGenCollectionProxy::Value&&); TGenCollectionProxy::ValueValue(const TGenCollectionProxy::Value&); TGenCollectionProxy::ValueValue(TGenCollectionProxy::Value&&); TGenCollectionProxy::ValueValue(const string& info, Bool_t silent). Data Members; public:. UInt_tfCasetype of data of Value_type; ROOT::NewFunc_tfCtorMethod cache for containee constructor; ROOT::DelFunc_tfDeleteMethod cache for containee delete; ROOT::DesFunc_tfDtorMethod cache for containee destructor; EDataTypefKindkind of ROOT-fundamental type; UInt_tfPropertiesAdditional properties of the value type (kNeedDelete); size_tfSizefSize of the contained object; TClassReffTypeTClass reference of Value_type in collection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Value(const string& info, Bool_t silent); Constructor. Bool_t IsValid(); Return true if the Value has been properly initialized. void DeleteItem(void* ptr); Delete an item. Value(const string& info, Bool_t silent); Default copy constructor has the correct implementation.; Initializing constructor. Method & operator=(const Met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenCollectionProxy__Value.html:642,clear,clear,642,root/html602/TGenCollectionProxy__Value.html,https://root.cern,https://root.cern/root/html602/TGenCollectionProxy__Value.html,2,['clear'],['clear']
Usability,". TGeoMaterial. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoMaterial. class TGeoMaterial: public TNamed, public TAttFill. /*. */. Function Members (Methods); public:. TGeoMaterial(); TGeoMaterial(const char* name); TGeoMaterial(const char* name, TGeoElement* elem, Double_t rho); TGeoMaterial(const char* name, Double_t a, Double_t z, Double_t rho, Double_t radlen = 0, Double_t intlen = 0); TGeoMaterial(const char* name, Double_t a, Double_t z, Double_t rho, TGeoMaterial::EGeoMaterialState state, Double_t temperature = STP_temperature, Double_t pressure = STP_pressure); virtual~TGeoMaterial(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static Double_tCoulomb(Double_t z); virtual TGeoMaterial*DecayMaterial(Double_t time, Double_t precision = 0.001); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMaterial.html:1032,Clear,Clear,1032,root/html528/TGeoMaterial.html,https://root.cern,https://root.cern/root/html528/TGeoMaterial.html,4,['Clear'],['Clear']
Usability,". TGeoMaterial. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoMaterial. class TGeoMaterial: public TNamed, public TAttFill. /*. */. Function Members (Methods); public:. virtual~TGeoMaterial(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static Double_tCoulomb(Double_t z); virtual TGeoMaterial*DecayMaterial(Double_t time, Double_t precision = 0.001); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillMaterialEvolution(TObjArray* population, Double_t precision = 0.001); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetA() const; TGeoElement*GetBaseElement() const; virtual Int_tGetByteCount() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoMaterial.html:624,Clear,Clear,624,root/html602/TGeoMaterial.html,https://root.cern,https://root.cern/root/html602/TGeoMaterial.html,2,['Clear'],['Clear']
Usability,". TGeoMixture. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoMixture. class TGeoMixture: public TGeoMaterial. /*. */. Function Members (Methods); public:. TGeoMixture(); TGeoMixture(const char* name, Int_t nel, Double_t rho = -1); virtual~TGeoMixture(); voidTObject::AbstractMethod(const char* method) const; voidAddElement(TGeoMaterial* mat, Double_t weight); voidAddElement(TGeoElement* elem, Double_t weight); voidAddElement(TGeoElement* elem, Int_t natoms); voidAddElement(Double_t a, Double_t z, Double_t weight); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static Double_tTGeoMaterial::Coulomb(Double_t z); virtual TGeoMaterial*DecayMaterial(Double_t time, Double_t precision = 0.001); voidDefineElement(Int_t iel, TGeoElement* elem, Double_t weight); voidDefineElement(Int_t iel, Int_t z, Int_t natoms); voidDefineElement(Int_t iel, Double_t a, Double_t z, Double_t weight); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMixture.html:895,Clear,Clear,895,root/html528/TGeoMixture.html,https://root.cern,https://root.cern/root/html528/TGeoMixture.html,4,['Clear'],['Clear']
Usability,". TGeoMixture. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoMixture. class TGeoMixture: public TGeoMaterial. /*. */. Function Members (Methods); public:. virtual~TGeoMixture(); voidTObject::AbstractMethod(const char* method) const; voidAddElement(TGeoMaterial* mat, Double_t weight); voidAddElement(TGeoElement* elem, Double_t weight); voidAddElement(TGeoElement* elem, Int_t natoms); voidAddElement(Double_t a, Double_t z, Double_t weight); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static Double_tTGeoMaterial::Coulomb(Double_t z); virtual TGeoMaterial*DecayMaterial(Double_t time, Double_t precision = 0.001); voidDefineElement(Int_t iel, TGeoElement* elem, Double_t weight); voidDefineElement(Int_t iel, Int_t z, Int_t natoms); voidDefineElement(Int_t iel, Double_t a, Double_t z, Double_t weight); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoMixture.html:819,Clear,Clear,819,root/html602/TGeoMixture.html,https://root.cern,https://root.cern/root/html602/TGeoMixture.html,2,['Clear'],['Clear']
Usability,". TGraph. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraph. class TGraph: public TNamed, public TAttLine, public TAttFill, public TAttMarker. Graph class; A Graph is a graphics object made of two arrays X and Y with npoints each. The TGraph painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. Note:Unlike histogram or tree (or even TGraph2D), TGraph objects; are not automatically attached to the current TFile, in order to keep the; management and size of the TGraph has small as possible. The picture below gives an example:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph Example"",200,10,700,500);; Double_t x[100], y[100];; Int_t n = 20;; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; gr = new TGraph(n,x,y);; gr->Draw(""AC*"");; return c1;; } . Function Members (Methods); public:. TGraph(); TGraph(Int_t n); TGraph(const TGraph& gr); TGraph(const TH1* h); TGraph(const TVectorF& vx, const TVectorF& vy); TGraph(const TVectorD& vx, const TVectorD& vy); TGraph(const TF1* f, Option_t* option = """"); TGraph(Int_t n, const Int_t* x, const Int_t* y); TGraph(Int_t n, const Float_t* x, const Float_t* y); TGraph(Int_t n, const Double_t* x, const Double_t* y); TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); virtual~TGraph(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBrowse(TBrowser* b); virtual Double_tChisquare(const TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:851,Simpl,Simple,851,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,1,['Simpl'],['Simple']
Usability,". TGraph. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraph. class TGraph: public TNamed, public TAttLine, public TAttFill, public TAttMarker. Graph class; A Graph is a graphics object made of two arrays X and Y with npoints each. The TGraph painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. Note:Unlike histogram or tree (or even TGraph2D), TGraph objects; are not automatically attached to the current TFile, in order to keep the; management and size of the TGraph has small as possible. The picture below gives an example:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph Example"",200,10,700,500);; Double_t x[100], y[100];; Int_t n = 20;; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; gr = new TGraph(n,x,y);; gr->Draw(""AC*"");; return c1;; } . Function Members (Methods); public:. virtual~TGraph(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBrowse(TBrowser* b); virtual Double_tChisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tCompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareX(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraph.html:851,Simpl,Simple,851,root/html602/TGraph.html,https://root.cern,https://root.cern/root/html602/TGraph.html,2,['Simpl'],['Simple']
Usability,". TGraph. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraph. class TGraph: public TNamed, public TAttLine, public TAttFill, public TAttMarker. Graph class; A Graph is a graphics object made of two arrays X and Y with npoints each. The TGraph painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph Example"",200,10,700,500);; Double_t x[100], y[100];; Int_t n = 20;; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; gr = new TGraph(n,x,y);; gr->Draw(""AC*"");; return c1;; } . Function Members (Methods); public:. TGraph(); TGraph(Int_t n); TGraph(const TGraph& gr); TGraph(const TH1* h); TGraph(const TVectorF& vx, const TVectorF& vy); TGraph(const TVectorD& vx, const TVectorD& vy); TGraph(const TF1* f, Option_t* option = """"); TGraph(Int_t n, const Int_t* x, const Int_t* y); TGraph(Int_t n, const Float_t* x, const Float_t* y); TGraph(Int_t n, const Double_t* x, const Double_t* y); TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); virtual~TGraph(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBrowse(TBrowser* b); virtual Double_tChisquare(const TF1* f1) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tCompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareX(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraph.html:653,Simpl,Simple,653,root/html530/TGraph.html,https://root.cern,https://root.cern/root/html530/TGraph.html,2,['Simpl'],['Simple']
Usability,". TGraph. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraph. class TGraph: public TNamed, public TAttLine, public TAttFill, public TAttMarker. Graph class; A Graph is a graphics object made of two arrays X and Y with npoints each. The TGraph painting is permofed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph Example"",200,10,700,500);; Double_t x[100], y[100];; Int_t n = 20;; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; gr = new TGraph(n,x,y);; gr->Draw(""AC*"");; return c1;; } . Function Members (Methods); public:. TGraph(); TGraph(Int_t n); TGraph(const TGraph& gr); TGraph(const TH1* h); TGraph(const TVectorF& vx, const TVectorF& vy); TGraph(const TVectorD& vx, const TVectorD& vy); TGraph(const TF1* f, Option_t* option = """"); TGraph(Int_t n, const Int_t* x, const Int_t* y); TGraph(Int_t n, const Float_t* x, const Float_t* y); TGraph(Int_t n, const Double_t* x, const Double_t* y); TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); virtual~TGraph(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBrowse(TBrowser* b); virtual Double_tChisquare(const TF1* f1) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tCompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareX(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:652,Simpl,Simple,652,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,1,['Simpl'],['Simple']
Usability,". TGraphAsymmErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphAsymmErrors. class TGraphAsymmErrors: public TGraph. TGraphAsymmErrors class; A TGraphAsymmErrors is a TGraph with assymetric error bars. The TGraphAsymmErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with assymetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. TGraphAsymmErrors(); TGraphAsymmErrors(Int_t n); TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vexl, const TVectorF& vexh, const TVectorF& veyl, const TVectorF& veyh); TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); TGraphAsymmErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphAsymmErrors.html:632,Simpl,Simple,632,root/html534/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html534/TGraphAsymmErrors.html,1,['Simpl'],['Simple']
Usability,". TGraphAsymmErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphAsymmErrors. class TGraphAsymmErrors: public TGraph. TGraphAsymmErrors class; A TGraphAsymmErrors is a TGraph with assymetric error bars. The TGraphAsymmErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with assymetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphAsymmErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphAsymmErrors.html:632,Simpl,Simple,632,root/html602/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html602/TGraphAsymmErrors.html,2,['Simpl'],['Simple']
Usability,". TGraphAsymmErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphAsymmErrors. class TGraphAsymmErrors: public TGraph. TGraphAsymmErrors class; A TGraphAsymmErrors is a TGraph with assymetric error bars. The TGraphAsymmErrors painting is permofed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with assymetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. TGraphAsymmErrors(); TGraphAsymmErrors(Int_t n); TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vexl, const TVectorF& vexh, const TVectorF& veyl, const TVectorF& veyh); TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); TGraphAsymmErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphAsymmErrors.html:631,Simpl,Simple,631,root/html528/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html528/TGraphAsymmErrors.html,3,['Simpl'],['Simple']
Usability,". TGraphBentErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphBentErrors. class TGraphBentErrors: public TGraph. TGraphBentErrors class; A TGraphBentErrors is a TGraph with bent, assymetric error bars. The TGraphBentErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. TGraphBentErrors(); TGraphBentErrors(Int_t n); TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphBentErrors.html:632,Simpl,Simple,632,root/html534/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html534/TGraphBentErrors.html,1,['Simpl'],['Simple']
Usability,". TGraphBentErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphBentErrors. class TGraphBentErrors: public TGraph. TGraphBentErrors class; A TGraphBentErrors is a TGraph with bent, assymetric error bars. The TGraphBentErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphBentErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphBentErrors.html:632,Simpl,Simple,632,root/html602/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html602/TGraphBentErrors.html,2,['Simpl'],['Simple']
Usability,". TGraphBentErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphBentErrors. class TGraphBentErrors: public TGraph. TGraphBentErrors class; A TGraphBentErrors is a TGraph with bent, assymetric error bars. The TGraphBentErrors painting is permofed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. TGraphBentErrors(); TGraphBentErrors(Int_t n); TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphBentErrors.html:631,Simpl,Simple,631,root/html528/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html528/TGraphBentErrors.html,3,['Simpl'],['Simple']
Usability,". TGraphEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TGraphEditor. class TGraphEditor: public TGedFrame. TGraphEditor. Implements GUI for graph attributes. Title': set the title of the graph; Change the Shape of the graph:; 'No Line' = "" "": just draw unconnected points; 'Simple Line' = ""L"":simple poly line between every point is drawn; 'Smooth Line' = ""C"":smooth curve is drawn; 'Bar Chart' = ""B"": A bar chart is drawn at each point; 'Fill Area' = ""F"": A fill area is drawn; Check box: 'Marker On/Off' Set Marker visible/invisible. /*. */. Function Members (Methods); public:. TGraphEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual~TGraphEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphEditor.html:464,Simpl,Simple,464,root/html528/TGraphEditor.html,https://root.cern,https://root.cern/root/html528/TGraphEditor.html,8,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,". TGraphEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TGraphEditor. class TGraphEditor: public TGedFrame. TGraphEditor. Implements GUI for graph attributes. Title': set the title of the graph; Change the Shape of the graph:; 'No Line' = "" "": just draw unconnected points; 'Simple Line' = ""L"":simple poly line between every point is drawn; 'Smooth Line' = ""C"":smooth curve is drawn; 'Bar Chart' = ""B"": A bar chart is drawn at each point; 'Fill Area' = ""F"": A fill area is drawn; Check box: 'Marker On/Off' Set Marker visible/invisible. /*. */. Function Members (Methods); public:. virtual~TGraphEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphEditor.html:464,Simpl,Simple,464,root/html602/TGraphEditor.html,https://root.cern,https://root.cern/root/html602/TGraphEditor.html,4,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,". TGraphErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphErrors. class TGraphErrors: public TGraph. TGraphErrors class; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. TGraphErrors(); TGraphErrors(Int_t n); TGraphErrors(const TGraphErrors& gr); TGraphErrors(const TH1* h); TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); virtual~TGraphErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:591,Simpl,Simple,591,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,1,['Simpl'],['Simple']
Usability,". TGraphErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphErrors. class TGraphErrors: public TGraph. TGraphErrors class; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tCalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareX(const TGraph* gr, Int_t left, Int_t right); st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:591,Simpl,Simple,591,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,2,['Simpl'],['Simple']
Usability,". TGraphErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphErrors. class TGraphErrors: public TGraph. TGraphErrors class; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is permofed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. TGraphErrors(); TGraphErrors(Int_t n); TGraphErrors(const TGraphErrors& gr); TGraphErrors(const TH1* h); TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); virtual~TGraphErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphErrors.html:590,Simpl,Simple,590,root/html528/TGraphErrors.html,https://root.cern,https://root.cern/root/html528/TGraphErrors.html,3,['Simpl'],['Simple']
Usability,". TGraphPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HISTPAINTER; » TGraphPainter. class TGraphPainter: public TVirtualGraphPainter. The graph painter class. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars. TGraphErrors; TGraphAsymmErrors; TGraphBentErrors. TGraphPolar options. Introduction; Graphs are drawn via the painter TGraphPainter class. This class; implement all the various techniques need to display the various kind of; graphs ie: TGraph, TGraphAsymmErrors,; TGraphBentErrors and TGraphErrors. To draw a graph ""g"" is enough to do:. g->Draw(""AL"");. The option ""AL"" in the Draw() method means that the axis; syetem should be define (option ""A"") and that the graph should; be drawn as a simple line (option ""L""). By default a graph is drawn; in the current pad in the current coordinates system. To define a suitable; coordinates system and drawn the axis the option ""A"" must be; specified. TGraphPainter offers many options to paint the various kind of graphs. The TGraphPainter class specializes in the drawing of graphs. It is; separated from the graph so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is not need to call the; Draw() method again; the image will be refreshed the next time the; pad will be updated.; A pad is updated after one of these three actions:. a carriage control on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. ""A""; Axis are drawn around the graph. ""L""; A simple polyline between every points is drawn. ""F""; A fill area is drawn ('CF' draw a smooth fill area). ""C""; A smooth Curve is drawn. ""*""; A Star is plotted at each point. ""P""; Idem with the current",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPainter.html:917,simpl,simple,917,root/html528/TGraphPainter.html,https://root.cern,https://root.cern/root/html528/TGraphPainter.html,2,['simpl'],['simple']
Usability,". TGraphPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HISTPAINTER; » TGraphPainter. class TGraphPainter: public TVirtualGraphPainter. The graph painter class. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars. TGraphErrors; TGraphAsymmErrors; TGraphBentErrors. TGraphPolar options. Introduction; Graphs are drawn via the painter TGraphPainter class. This class; implements techniques needed to display the various kind of; graphs i.e.: TGraph, TGraphErrors,; TGraphBentErrors and TGraphAsymmErrors. To draw a graph ""graph"" it's enough to do:. graph->Draw(""AL"");. The option ""AL"" in the Draw() method means:. The axis should be drawn (option ""A""),; The graph should be drawn as a simple line (option ""L""). By default a graph is drawn in the current pad in the current coordinate system.; To define a suitable coordinate system and draw the axis the option; ""A"" must be specified. TGraphPainter offers many options to paint the various kind of graphs. It is separated from the graph classes so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is no need to call; Draw() again; the image will be refreshed the next time the; pad will be updated.; A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. ""A""; Axis are drawn around the graph. ""L""; A simple polyline is drawn. ""F""; A fill area is drawn ('CF' draw a smoothed fill area). ""C""; A smooth Curve is drawn. ""*""; A Star is plotted at each point. ""P""; The current marker is plotted at each point. ""B""; A Bar chart is drawn. ""1""; When a graph is drawn as a bar chart, this option makes ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:896,simpl,simple,896,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,4,['simpl'],['simple']
Usability,". TGraphStruct. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GVIZ; » TGraphStruct. class TGraphStruct: public TObject. Graph Structure class; The Graph Structure is an interface to the graphviz package. The graphviz package is a graph visualization system. This interface consists in; three classes:. TGraphStruct: holds the graph structure. It uses the graphiz library to; layout the graphs and the ROOT graphics to paint them.; TGraphNode: Is a graph node object which can be added in a TGraphStruct.; TGraphEdge: Is an edge object connecting two nodes which can be added in ; a TGraphStruct. Picture; Source. // Draw a simple graph structure. ; // The graph layout is made using graphviz. This macro creates some; // nodes and edges and change a few graphical attributes on some of them.; // Author: Olivier Couet; {; TGraphStruct *gs = new TGraphStruct();. // create some nodes and put them in the graph in one go ...; TGraphNode *n0 = gs->AddNode(""n0"",""Node 0"");; TGraphNode *n1 = gs->AddNode(""n1"",""First node"");; TGraphNode *n2 = gs->AddNode(""n2"",""Second node"");; TGraphNode *n3 = gs->AddNode(""n3"",""Third node"");; TGraphNode *n4 = gs->AddNode(""n4"",""Fourth node"");; TGraphNode *n5 = gs->AddNode(""n5"",""5th node"");; TGraphNode *n6 = gs->AddNode(""n6"",""Node number six"");; TGraphNode *n7 = gs->AddNode(""n7"",""Node 7"");; TGraphNode *n8 = gs->AddNode(""n8"",""Node 8"");; TGraphNode *n9 = gs->AddNode(""n9"",""Node 9"");. n4->SetTextSize(0.03);; n6->SetTextSize(0.03);; n2->SetTextSize(0.04);. n3->SetTextFont(132);. n0->SetTextColor(kRed);. n9->SetFillColor(kRed-10);; n0->SetFillColor(kYellow-9);; n7->SetFillColor(kViolet-9);. // some edges ...; gs->AddEdge(n0,n1)->SetLineColor(kRed);; TGraphEdge *e06 = gs->AddEdge(n0,n6);; e06->SetLineColor(kRed-3);; e06->SetLineWidth(4);; gs->AddEdge(n1,n7);; gs->AddEdge(n4,n6);; gs->AddEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphStruct.html:802,simpl,simple,802,root/html528/TGraphStruct.html,https://root.cern,https://root.cern/root/html528/TGraphStruct.html,4,['simpl'],['simple']
Usability,". TGraphStruct. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GVIZ; » TGraphStruct. class TGraphStruct: public TObject. Graph Structure class; The Graph Structure is an interface to the graphviz package. The graphviz package is a graph visualization system. This interface consists in; three classes:. TGraphStruct: holds the graph structure. It uses the graphiz library to; layout the graphs and the ROOT graphics to paint them.; TGraphNode: Is a graph node object which can be added in a TGraphStruct.; TGraphEdge: Is an edge object connecting two nodes which can be added in; a TGraphStruct. Picture; Source. // Draw a simple graph structure.; // The graph layout is made using graphviz. This macro creates some; // nodes and edges and change a few graphical attributes on some of them.; // Author: Olivier Couet; {; TGraphStruct *gs = new TGraphStruct();. // create some nodes and put them in the graph in one go ...; TGraphNode *n0 = gs->AddNode(""n0"",""Node 0"");; TGraphNode *n1 = gs->AddNode(""n1"",""First node"");; TGraphNode *n2 = gs->AddNode(""n2"",""Second node"");; TGraphNode *n3 = gs->AddNode(""n3"",""Third node"");; TGraphNode *n4 = gs->AddNode(""n4"",""Fourth node"");; TGraphNode *n5 = gs->AddNode(""n5"",""5th node"");; TGraphNode *n6 = gs->AddNode(""n6"",""Node number six"");; TGraphNode *n7 = gs->AddNode(""n7"",""Node 7"");; TGraphNode *n8 = gs->AddNode(""n8"",""Node 8"");; TGraphNode *n9 = gs->AddNode(""n9"",""Node 9"");. n4->SetTextSize(0.03);; n6->SetTextSize(0.03);; n2->SetTextSize(0.04);. n3->SetTextFont(132);. n0->SetTextColor(kRed);. n9->SetFillColor(kRed-10);; n0->SetFillColor(kYellow-9);; n7->SetFillColor(kViolet-9);. // some edges ...; gs->AddEdge(n0,n1)->SetLineColor(kRed);; TGraphEdge *e06 = gs->AddEdge(n0,n6);; e06->SetLineColor(kRed-3);; e06->SetLineWidth(4);; gs->AddEdge(n1,n7);; gs->AddEdge(n4,n6);; gs->AddEdge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphStruct.html:801,simpl,simple,801,root/html602/TGraphStruct.html,https://root.cern,https://root.cern/root/html602/TGraphStruct.html,2,['simpl'],['simple']
Usability,". TH1Editor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TH1Editor. class TH1Editor: public TGedFrame. TH1Editor; Editor for changing TH1 histogram attributes, rebinning & fitting.; For all possible draw options (there are a few which are not imple-; mentable in graphical user interface) see THistPainter::Paint in; root/histpainter/THistPainter.cxx. /*. */. /*. */. These changes can be made via the TH1Editor:; Style Tab:; 'Line' : change Line attributes (color, thickness); see TAttLineEditor; 'Fill' : change Fill attributes (color, pattern); see TAttFillEditor; 'Title' : TextEntry: set the title of the histogram; 'Histogram': change the draw options of the histogram; 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram; according to the Plot dimension there will be; different drawing possibilities (ComboBoxes/; CheckBoxes); 2d Plot:; 'Error' : ComboBox: add different error bars to the histogram; (no errors, simple, ..., see THistPainter::Paint; 'Add' : ComboBox: further things which can be added to the; histogram (None, simple/smooth line, fill area; 'Simple Drawing': CheckBox: draw a simple histogram without; errors (= ""HIST"" drawoption). In combination with; some other draw options an outer line is drawn on; top of the histogram; 'Show markers': CheckBox: draw a marker on to of each bin (=""P""; drawoption); 'Draw bar chart': CheckBox: draw a bar chart (=""B"" drawoption); change the Fill Color with Fill in the Style Tab; => will show Bar menue in the Style Tab; 'Bar option': CheckBox: draw a bar chart (=""BAR"" drawoption); => will show Bar menue in the Style Tab; 3d Plot:; 'Type' : ComboBox: set histogram type Lego-Plot or Surface; draw(Lego, Lego1.2, Surf, Surf1..5); see THistPainter::Paint; 'Coords' : ComboBox: set the coordinate system (Cartesian, ..; Spheric) see THistPainter:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1Editor.html:1113,simpl,simple,1113,root/html528/TH1Editor.html,https://root.cern,https://root.cern/root/html528/TH1Editor.html,6,['simpl'],['simple']
Usability,". TH2Poly. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TH2Poly. class TH2Poly: public TH2. TH2Poly: 2D Histogram with Polygonal Bins; Overview; TH2Poly is a 2D Histogram class (TH2) allowing to define polygonal; bins of arbitary shape. Each bin in the TH2Poly histogram is a TH2PolyBin object.; TH2PolyBin is a very simple class containing the vertices (stored; as TGraphs or TMultiGraphs ) and contents of the polygonal; bin as well as several related functions. Essentially, a TH2Poly is a TList of TH2PolyBin objects; with methods to manipulate them. Bins are defined using one of the AddBin() methods. The bin definition; should be done before filling. The histogram can be filled with Fill(Double_t x, Double_t y, Double_t w); . w is the weight.; If no weight is specified, it is assumed to be 1. Not all histogram's area need to be binned. Filling an area without bins,; will falls into the overflows. Adding a bin is not retroactive; it doesn't; affect previous fillings. A Fill() call, that; was previously ignored due to the lack of a bin at the specified location, is; not reconsidered when that location is binned later. If there are two overlapping bins, the first one in the list will be incremented; by Fill(). The histogram may automatically extends its limits if a bin outside the; histogram limits is added. This is done when the default constructor (with no; arguments) is used. It generates a histogram with no limits along the X and Y; axis. Adding bins to it will extend it up to a proper size. TH2Poly implements a partitioning algorithm to speed up bins' filling.; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of TLists.; When a coordinate in the histogram is to be filled; the method (quickly) find",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2Poly.html:503,simpl,simple,503,root/html528/TH2Poly.html,https://root.cern,https://root.cern/root/html528/TH2Poly.html,3,['simpl'],['simple']
Usability,". TH2Poly. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TH2Poly. class TH2Poly: public TH2. TH2Poly: 2D Histogram with Polygonal Bins; Overview; TH2Poly is a 2D Histogram class (TH2) allowing to define polygonal; bins of arbitrary shape. Each bin in the TH2Poly histogram is a TH2PolyBin object.; TH2PolyBin is a very simple class containing the vertices (stored; as TGraphs or TMultiGraphs ) and contents of the polygonal; bin as well as several related functions. Essentially, a TH2Poly is a TList of TH2PolyBin objects; with methods to manipulate them. Bins are defined using one of the AddBin() methods. The bin definition; should be done before filling. The histogram can be filled with Fill(Double_t x, Double_t y, Double_t w); . w is the weight.; If no weight is specified, it is assumed to be 1. Not all histogram's area need to be binned. Filling an area without bins,; will falls into the overflows. Adding a bin is not retroactive; it doesn't; affect previous fillings. A Fill() call, that; was previously ignored due to the lack of a bin at the specified location, is; not reconsidered when that location is binned later. If there are two overlapping bins, the first one in the list will be incremented; by Fill(). The histogram may automatically extends its limits if a bin outside the; histogram limits is added. This is done when the default constructor (with no; arguments) is used. It generates a histogram with no limits along the X and Y; axis. Adding bins to it will extend it up to a proper size. TH2Poly implements a partitioning algorithm to speed up bins' filling.; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of TLists.; When a coordinate in the histogram is to be filled; the method (quickly) fin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2Poly.html:504,simpl,simple,504,root/html534/TH2Poly.html,https://root.cern,https://root.cern/root/html534/TH2Poly.html,3,['simpl'],['simple']
Usability,". TH2PolyBin. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TH2PolyBin. class TH2PolyBin: public TObject. TH2Poly: 2D Histogram with Polygonal Bins; Overview; TH2Poly is a 2D Histogram class (TH2) allowing to define polygonal; bins of arbitrary shape. Each bin in the TH2Poly histogram is a TH2PolyBin object.; TH2PolyBin is a very simple class containing the vertices (stored; as TGraphs or TMultiGraphs ) and contents of the polygonal; bin as well as several related functions. Essentially, a TH2Poly is a TList of TH2PolyBin objects; with methods to manipulate them. Bins are defined using one of the AddBin() methods. The bin definition; should be done before filling. The histogram can be filled with Fill(Double_t x, Double_t y, Double_t w); . w is the weight.; If no weight is specified, it is assumed to be 1. Not all histogram's area need to be binned. Filling an area without bins,; will falls into the overflows. Adding a bin is not retroactive; it doesn't; affect previous fillings. A Fill() call, that; was previously ignored due to the lack of a bin at the specified location, is; not reconsidered when that location is binned later. If there are two overlapping bins, the first one in the list will be incremented; by Fill(). The histogram may automatically extends its limits if a bin outside the; histogram limits is added. This is done when the default constructor (with no; arguments) is used. It generates a histogram with no limits along the X and Y; axis. Adding bins to it will extend it up to a proper size. TH2Poly implements a partitioning algorithm to speed up bins' filling.; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of TLists.; When a coordinate in the histogram is to be filled; the method ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2PolyBin.html:517,simpl,simple,517,root/html602/TH2PolyBin.html,https://root.cern,https://root.cern/root/html602/TH2PolyBin.html,2,['simpl'],['simple']
Usability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml.html:514,guid,guide,514,root/html602/THtml.html,https://root.cern,https://root.cern/root/html602/THtml.html,2,['guid'],['guide']
Usability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THtml.html:514,guid,guide,514,root/html534/THtml.html,https://root.cern,https://root.cern/root/html534/THtml.html,1,['guid'],['guide']
Usability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxilliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Config",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml.html:514,guid,guide,514,root/html528/THtml.html,https://root.cern,https://root.cern/root/html528/THtml.html,3,['guid'],['guide']
Usability,". THtml::TFileSysEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml::TFileSysEntry. class THtml::TFileSysEntry: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml__TFileSysEntry.html:559,guid,guide,559,root/html602/THtml__TFileSysEntry.html,https://root.cern,https://root.cern/root/html602/THtml__TFileSysEntry.html,2,['guid'],['guide']
Usability,". THtml::TFileSysRoot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml::TFileSysRoot. class THtml::TFileSysRoot: public THtml::TFileSysDir. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml__TFileSysRoot.html:567,guid,guide,567,root/html602/THtml__TFileSysRoot.html,https://root.cern,https://root.cern/root/html602/THtml__TFileSysRoot.html,2,['guid'],['guide']
Usability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidReserve(UInt_t size); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void Reserve(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id: TIndArray.h 30815 2009-10-20 13:49:22Z rdm $ » Last generated: 2010-09-23 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TIndArray.html:1035,Clear,Clear,1035,root/html528/TIndArray.html,https://root.cern,https://root.cern/root/html528/TIndArray.html,1,['Clear'],['Clear']
Usability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidReserve(UInt_t size); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void Reserve(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id: TIndArray.h 30815 2009-10-20 13:49:22Z rdm $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TIndArray.html:1037,Clear,Clear,1037,root/html530/TIndArray.html,https://root.cern,https://root.cern/root/html530/TIndArray.html,1,['Clear'],['Clear']
Usability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidReserve(UInt_t size); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void Reserve(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id: TIndArray.h 30815 2009-10-20 13:49:22Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TIndArray.html:1037,Clear,Clear,1037,root/html532/TIndArray.html,https://root.cern,https://root.cern/root/html532/TIndArray.html,1,['Clear'],['Clear']
Usability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TIndArray.html:830,Clear,ClearAndResize,830,root/html534/TIndArray.html,https://root.cern,https://root.cern/root/html534/TIndArray.html,2,['Clear'],"['Clear', 'ClearAndResize']"
Usability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items); TIndArray(); TIndArray(const TIndArray&). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TIndArray.html:830,Clear,ClearAndResize,830,root/html602/TIndArray.html,https://root.cern,https://root.cern/root/html602/TIndArray.html,2,['Clear'],"['Clear', 'ClearAndResize']"
Usability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items); TIndArray(); TIndArray(const TIndArray&). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TIndArray.html:830,Clear,ClearAndResize,830,root/html604/TIndArray.html,https://root.cern,https://root.cern/root/html604/TIndArray.html,2,['Clear'],"['Clear', 'ClearAndResize']"
Usability,". TLinearGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TLinearGradient. class TLinearGradient: public TColorGradient. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TLinearGradient(); TLinearGradient(const TLinearGradient&); TLinearGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Color_t* colorIndices, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); TLinearGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Double_t* colors, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); ~TLinearGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLinearGradient.html:391,simpl,simple,391,root/html534/TLinearGradient.html,https://root.cern,https://root.cern/root/html534/TLinearGradient.html,1,['simpl'],['simple']
Usability,". TLinearGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TLinearGradient. class TLinearGradient: public TColorGradient. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. virtual~TLinearGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearGradient.html:391,simpl,simple,391,root/html602/TLinearGradient.html,https://root.cern,https://root.cern/root/html602/TLinearGradient.html,2,['simpl'],['simple']
Usability,". TLinearMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TLinearMinimizer. class TLinearMinimizer: public ROOT::Math::Minimizer. TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface using; TLinearFitter.; This class uses TLinearFitter to find directly (by solving a system of linear equations); the minimum of a; least-square function which has a linear dependence in the fit parameters.; This class is not used directly, but via the ROOT::Fitter class, when calling the; LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). Function Members (Methods); public:. TLinearMinimizer(int type = 0); TLinearMinimizer(const char* type); virtual~TLinearMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings&) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLinearMinimizer.html:343,simpl,simple,343,root/html534/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html534/TLinearMinimizer.html,1,['simpl'],['simple']
Usability,". TLinearMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TLinearMinimizer. class TLinearMinimizer: public ROOT::Math::Minimizer. TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface using; TLinearFitter.; This class uses TLinearFitter to find directly (by solving a system of linear equations); the minimum of a; least-square function which has a linear dependence in the fit parameters.; This class is not used directly, but via the ROOT::Fitter class, when calling the; LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). Function Members (Methods); public:. TLinearMinimizer(int type = 0); TLinearMinimizer(const char* type); virtual~TLinearMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetCovMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLinearMinimizer.html:343,simpl,simple,343,root/html530/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html530/TLinearMinimizer.html,2,['simpl'],['simple']
Usability,". TLinearMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TLinearMinimizer. class TLinearMinimizer: public ROOT::Math::Minimizer. TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface using; TLinearFitter.; This class uses TLinearFitter to find directly (by solving a system of linear equations); the minimum of a; least-square function which has a linear dependence in the fit parameters.; This class is not used directly, but via the ROOT::Fitter class, when calling the; LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). Function Members (Methods); public:. TLinearMinimizer(int type = 0); TLinearMinimizer(const char* type); virtual~TLinearMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls(); unsigned intROOT::Math::Minimizer::MaxIterations(); virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; doubleROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearMinimizer.html:343,simpl,simple,343,root/html528/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html528/TLinearMinimizer.html,1,['simpl'],['simple']
Usability,". TLinearMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TLinearMinimizer. class TLinearMinimizer: public ROOT::Math::Minimizer. TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface using; TLinearFitter.; This class uses TLinearFitter to find directly (by solving a system of linear equations); the minimum of a; least-square function which has a linear dependence in the fit parameters.; This class is not used directly, but via the ROOT::Fitter class, when calling the; LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). Function Members (Methods); public:. virtual~TLinearMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; virtual boolROOT::Math::Minimizer::IsFixedVariable(unsigned int ivar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearMinimizer.html:343,simpl,simple,343,root/html602/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html602/TLinearMinimizer.html,2,['simpl'],['simple']
Usability,". TMVA::BinarySearchTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BinarySearchTree. class TMVA::BinarySearchTree: public TMVA::BinaryTree. BinarySearchTree. A simple Binary search tree including a volume search method. Function Members (Methods); public:. virtual~BinarySearchTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; TMVA::BinarySearchTreeBinarySearchTree(); TMVA::BinarySearchTreeBinarySearchTree(const TMVA::BinarySearchTree& b); TMVA::BinaryTreeTMVA::BinaryTree::BinaryTree(); TMVA::BinaryTreeTMVA::BinaryTree::BinaryTree(const TMVA::BinaryTree&); voidCalcStatistics(TMVA::Node* n = 0); static TClass*Class(); virtual const char*ClassName() const; voidClear(TMVA::Node* n = 0); UInt_tTMVA::BinaryTree::CountNodes(TMVA::Node* n = __null); static TMVA::BinarySearchTree*CreateFromXML(void* node, UInt_t tmva_Version_Code = 262656); virtual TMVA::Node*CreateNode(UInt_t) const; virtual TMVA::BinaryTree*CreateTree() const; Double_tFill(const vector<TMVA::Event*>& events, Int_t theType = -1); Double_tFill(const vector<TMVA::Event*>& events, const vector<Int_t>& theVars, Int_t theType = -1); TMVA::Node*TMVA::BinaryTree::GetLeftDaughter(TMVA::Node* n); UInt_tTMVA::BinaryTree::GetNNodes() const; UInt_tGetPeriode() const; TMVA::Node*TMVA::BinaryTree::GetRightDaughter(TMVA::Node* n); virtual TMVA::Node*TMVA::BinaryTree::GetRoot() const; Double_tGetSumOfWeights() const; Double_tGetSumOfWeights(Int_t theType) const; UInt_tTMVA::BinaryTree::GetTotalTreeDepth() const; voidInsert(const TMVA::Event*); virtual TClass*IsA() const; Float_tMax(TMVA::Types::ESBType sb, UInt_t var); Float_tMean(TMVA::Types::ESBType sb, UInt_t var); Float_tMin(TMVA::Types::ESBType sb, UInt_t var); voidNormalizeTree(); TMVA::BinarySearchTree&operator=(const TMVA::BinarySearchTree&); virtual voidTMVA::Bin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__BinarySearchTree.html:348,simpl,simple,348,root/html602/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html602/TMVA__BinarySearchTree.html,1,['simpl'],['simple']
Usability,". TMVA::BinarySearchTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BinarySearchTree. class TMVA::BinarySearchTree: public TMVA::BinaryTree. BinarySearchTree. A simple Binary search tree including a volume search method. Function Members (Methods); public:. virtual~BinarySearchTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; TMVA::BinarySearchTreeBinarySearchTree(); TMVA::BinarySearchTreeBinarySearchTree(const TMVA::BinarySearchTree& b); voidCalcStatistics(TMVA::Node* n = 0); static TClass*Class(); virtual const char*ClassName() const; voidClear(TMVA::Node* n = 0); UInt_tTMVA::BinaryTree::CountNodes(TMVA::Node* n = NULL); static TMVA::BinarySearchTree*CreateFromXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); virtual TMVA::Node*CreateNode(UInt_t) const; virtual TMVA::BinaryTree*CreateTree() const; Double_tFill(const vector<TMVA::Event*>& events, Int_t theType = -1); Double_tFill(const vector<TMVA::Event*>& events, const vector<Int_t>& theVars, Int_t theType = -1); TMVA::Node*TMVA::BinaryTree::GetLeftDaughter(TMVA::Node* n); UInt_tTMVA::BinaryTree::GetNNodes() const; UInt_tGetPeriode() const; TMVA::Node*TMVA::BinaryTree::GetRightDaughter(TMVA::Node* n); virtual TMVA::Node*TMVA::BinaryTree::GetRoot() const; Double_tGetSumOfWeights() const; Double_tGetSumOfWeights(Int_t theType) const; UInt_tTMVA::BinaryTree::GetTotalTreeDepth() const; voidInsert(const TMVA::Event*); virtual TClass*IsA() const; Float_tMax(TMVA::Types::ESBType sb, UInt_t var); Float_tMean(TMVA::Types::ESBType sb, UInt_t var); Float_tMin(TMVA::Types::ESBType sb, UInt_t var); voidNormalizeTree(); TMVA::BinarySearchTree&operator=(const TMVA::BinarySearchTree&); virtual voidTMVA::BinaryTree::Print(ostream& os) const; virtual voidTMVA::BinaryTree::Read(istream& istr, UInt_t tmva_Version_Code ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__BinarySearchTree.html:348,simpl,simple,348,root/html528/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html528/TMVA__BinarySearchTree.html,2,['simpl'],['simple']
Usability,". TMVA::BinarySearchTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BinarySearchTree. class TMVA::BinarySearchTree: public TMVA::BinaryTree. BinarySearchTree. A simple Binary search tree including a volume search method. Function Members (Methods); public:. virtual~BinarySearchTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; TMVA::BinarySearchTreeBinarySearchTree(); TMVA::BinarySearchTreeBinarySearchTree(const TMVA::BinarySearchTree& b); voidCalcStatistics(TMVA::Node* n = 0, Int_t signalClass = 0); static TClass*Class(); virtual const char*ClassName() const; voidClear(TMVA::Node* n = 0); UInt_tTMVA::BinaryTree::CountNodes(TMVA::Node* n = NULL); static TMVA::BinarySearchTree*CreateFromXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); virtual TMVA::Node*CreateNode(UInt_t) const; virtual TMVA::BinaryTree*CreateTree() const; Double_tFill(const vector<TMVA::Event*>& events, Int_t theType = -1); Double_tFill(const vector<TMVA::Event*>& events, const vector<Int_t>& theVars, Int_t theType = -1); TMVA::Node*TMVA::BinaryTree::GetLeftDaughter(TMVA::Node* n); UInt_tTMVA::BinaryTree::GetNNodes() const; UInt_tGetPeriode() const; TMVA::Node*TMVA::BinaryTree::GetRightDaughter(TMVA::Node* n); virtual TMVA::Node*TMVA::BinaryTree::GetRoot() const; Double_tGetSumOfWeights() const; Double_tGetSumOfWeights(Int_t theType) const; UInt_tTMVA::BinaryTree::GetTotalTreeDepth() const; voidInsert(const TMVA::Event*); virtual TClass*IsA() const; Float_tMax(TMVA::Types::ESBType sb, UInt_t var); Float_tMean(TMVA::Types::ESBType sb, UInt_t var); Float_tMin(TMVA::Types::ESBType sb, UInt_t var); voidNormalizeTree(); TMVA::BinarySearchTree&operator=(const TMVA::BinarySearchTree&); virtual voidTMVA::BinaryTree::Print(ostream& os) const; virtual voidTMVA::BinaryTree::Read(istream& istr, UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__BinarySearchTree.html:348,simpl,simple,348,root/html530/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html530/TMVA__BinarySearchTree.html,2,['simpl'],['simple']
Usability,". TMVA::BinarySearchTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::BinarySearchTree. class TMVA::BinarySearchTree: public TMVA::BinaryTree. BinarySearchTree. A simple Binary search tree including a volume search method. Function Members (Methods); public:. virtual~BinarySearchTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; TMVA::BinarySearchTreeBinarySearchTree(); TMVA::BinarySearchTreeBinarySearchTree(const TMVA::BinarySearchTree& b); TMVA::BinaryTreeTMVA::BinaryTree::BinaryTree(); TMVA::BinaryTreeTMVA::BinaryTree::BinaryTree(const TMVA::BinaryTree&); voidCalcStatistics(TMVA::Node* n = 0); static TClass*Class(); virtual const char*ClassName() const; voidClear(TMVA::Node* n = 0); UInt_tTMVA::BinaryTree::CountNodes(TMVA::Node* n = __null); static TMVA::BinarySearchTree*CreateFromXML(void* node, UInt_t tmva_Version_Code = 262657); virtual TMVA::Node*CreateNode(UInt_t) const; virtual TMVA::BinaryTree*CreateTree() const; Double_tFill(const vector<TMVA::Event*>& events, Int_t theType = -1); Double_tFill(const vector<TMVA::Event*>& events, const vector<Int_t>& theVars, Int_t theType = -1); TMVA::Node*TMVA::BinaryTree::GetLeftDaughter(TMVA::Node* n); UInt_tTMVA::BinaryTree::GetNNodes() const; UInt_tGetPeriode() const; TMVA::Node*TMVA::BinaryTree::GetRightDaughter(TMVA::Node* n); virtual TMVA::Node*TMVA::BinaryTree::GetRoot() const; Double_tGetSumOfWeights() const; Double_tGetSumOfWeights(Int_t theType) const; UInt_tTMVA::BinaryTree::GetTotalTreeDepth() const; voidInsert(const TMVA::Event*); virtual TClass*IsA() const; Float_tMax(TMVA::Types::ESBType sb, UInt_t var); Float_tMean(TMVA::Types::ESBType sb, UInt_t var); Float_tMin(TMVA::Types::ESBType sb, UInt_t var); voidNormalizeTree(); TMVA::BinarySearchTree&operator=(const TMVA::BinarySearchTree&); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__BinarySearchTree.html:356,simpl,simple,356,root/html604/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html604/TMVA__BinarySearchTree.html,1,['simpl'],['simple']
Usability,. TMVA::Event. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TEST; » TMVA::Event. class TMVA::Event. Event and Track classes. The Event class is a naive/simple example of an event structure.; public:; char fType[20];; char *fEventName; //run+event number in character format; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Double32_t fTemperature;; Int_t fMeasures[10];; Double32_t fMatrix[4][4];; Double32_t *fClosestDistance; //[fNvertex] indexed array!; EventHeader fEvtHdr;; TClonesArray *fTracks;; TRefArray *fHighPt; //array of High Pt tracks only; TRefArray *fMuons; //array of Muon tracks only; TRef fLastTrack; //pointer to last track; TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; TH1F *fH;; TBits fTriggerBits; //Bits triggered by this event. The EventHeader class has 3 data members (integers):; public:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;. The Event data member fTracks is a pointer to a TClonesArray.; It is an array of a variable number of tracks per event.; Each element of the array is an object of class Track with the members:; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits of this track; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Event.html:322,simpl,simple,322,root/html528/TMVA__Event.html,https://root.cern,https://root.cern/root/html528/TMVA__Event.html,4,['simpl'],['simple']
Usability,". TMVA::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Factory. class TMVA::Factory: public TMVA::Configurable. This is the main MVA steering class: it creates all MVA methods,; and guides them through the training, testing and evaluation; phases. Function Members (Methods); public:. virtual~Factory(); voidTObject::AbstractMethod(const char* method) const; voidAddBackgroundTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddBackgroundTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddBackgroundTree(TTree* background, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TString datFileB, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TTree* background, Double_t weight, const TString& treetype); voidAddCut(const TString& cut, const TString& className = """"); voidAddCut(const TCut& cut, const TString& className = """"); TMVA::DataSetInfo&AddDataSet(TMVA::DataSetInfo&); TMVA::DataSetInfo&AddDataSet(const TString&); voidAddEvent(const TString& className, TMVA::Types::ETreeType tt, const vector<Double_t>& event, Double_t weight); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddRegressionTarget(const TString& expression, const TString& title = """", const TString& unit = """", Double_t min = 0, Double_t max = 0); voidAddRegressionTree(TTree* tree, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddSignalTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddSignalTree(TTree* signal, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTree(TString datFileS, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Factory.html:373,guid,guides,373,root/html528/TMVA__Factory.html,https://root.cern,https://root.cern/root/html528/TMVA__Factory.html,4,['guid'],['guides']
Usability,". TMVA::MethodCommittee. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodCommittee. class TMVA::MethodCommittee: public TMVA::MethodBase. Boosting:. the idea behind the boosting is, that signal events from the training; sample, that end up in a background node (and vice versa) are given a; larger weight than events that are in the correct leave node. This; results in a re-weighed training event sample, with which then a new; decision tree can be developed. The boosting can be applied several; times (typically 100-500 times) and one ends up with a set of decision; trees (a forest). Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochasitc re-sampling of the initial training event sample. Function Members (Methods); public:. virtual~MethodCommittee(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Double_tBoost(TMVA::MethodBase*, UInt_t imember); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCommittee.html:920,simpl,simple,920,root/html528/TMVA__MethodCommittee.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCommittee.html,3,['simpl'],['simple']
Usability,". TMVA::MethodFDA. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodFDA. class TMVA::MethodFDA: public TMVA::MethodBase, public TMVA::IFitterTarget. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output. Function Members (Methods); public:. virtual~MethodFDA(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodFDA.html:378,simpl,simple,378,root/html602/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodFDA.html,1,['simpl'],['simple']
Usability,". TMVA::MethodFDA. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodFDA. class TMVA::MethodFDA: public TMVA::MethodBase, public TMVA::IFitterTarget. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output. Function Members (Methods); public:. virtual~MethodFDA(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWrit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFDA.html:378,simpl,simple,378,root/html528/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFDA.html,4,['simpl'],['simple']
Usability,". TMVA::MethodFDA. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodFDA. class TMVA::MethodFDA: public TMVA::MethodBase, public TMVA::IFitterTarget. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output. Function Members (Methods); public:. virtual~MethodFDA(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodFDA.html:386,simpl,simple,386,root/html604/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodFDA.html,1,['simpl'],['simple']
Usability,". TMVA::MethodHMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodHMatrix. class TMVA::MethodHMatrix: public TMVA::MethodBase. /*; H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables; This MVA approach is used by the DØ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; hep-ex/9507007).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two χ2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:. TMVA then uses as normalised analyser for event (i) the ratio:; (χS(i)2 − χB2(i)); (χS2(i) + χB2(i)).; */. Function Members (Methods); public:. virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::Configura",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodHMatrix.html:366,simpl,simple,366,root/html602/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodHMatrix.html,1,['simpl'],['simple']
Usability,". TMVA::MethodHMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodHMatrix. class TMVA::MethodHMatrix: public TMVA::MethodBase. /*; H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables; This MVA approach is used by the DØ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; hep-ex/9507007).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two χ2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:. TMVA then uses as normalised analyser for event (i) the ratio:; (χS(i)2 − χB2(i)); (χS2(i) + χB2(i)).; */. Function Members (Methods); public:. virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodHMatrix.html:366,simpl,simple,366,root/html528/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodHMatrix.html,4,['simpl'],['simple']
Usability,". TMVA::MethodHMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodHMatrix. class TMVA::MethodHMatrix: public TMVA::MethodBase. /*; H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables; This MVA approach is used by the DØ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; hep-ex/9507007).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two χ2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:. TMVA then uses as normalised analyser for event (i) the ratio:; (χS(i)2 − χB2(i)); (χS2(i) + χB2(i)).; */. Function Members (Methods); public:. virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodHMatrix.html:374,simpl,simple,374,root/html604/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html,1,['simpl'],['simple']
Usability,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDERS.html:761,simpl,simple,761,root/html528/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDERS.html,5,['simpl'],['simple']
Usability,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodPDERS.html:769,simpl,simple,769,root/html604/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html,1,['simpl'],['simple']
Usability,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodTMlpANN.html:475,learn,learning,475,root/html602/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodTMlpANN.html,1,['learn'],['learning']
Usability,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodTMlpANN.html:475,learn,learning,475,root/html528/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodTMlpANN.html,4,['learn'],['learning']
Usability,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodTMlpANN.html:483,learn,learning,483,root/html604/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html,1,['learn'],['learning']
Usability,". TMVA::TActivationRadial. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationRadial. class TMVA::TActivationRadial: public TMVA::TActivation. Radial basis activation function for ANN. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationRadial(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationRadial&operator=(const TMVA::TActivationRadial&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationTMVA::TActivation::TActivation(); TMVA::TActivationTMVA::TActivation::TActivation(const TMVA::TActivation&); TMVA::TActivationRadialTActivationRadial(); TMVA::TActivationRadialTActivationRadial(const TMVA::TActivationRadial&). Data Members; private:. TFormula*fEqnequation of radial basis function; TFormula*fEqnDerivativeequation of derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationRadial(); constructor for gaussian with center 0, width 1. ~TActivationRadial(); destructor. Double_t Eval(Double_t arg); evaluate gaussian. Double_t EvalDerivative(Double_t arg); evaluate derivative. TString GetExpression(); get expressions for the gaussian and its derivatives. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationRadial(). Double_t GetMin(); minimum of the range of the activation function. {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TActivationRadial.html:386,simpl,simple,386,root/html602/TMVA__TActivationRadial.html,https://root.cern,https://root.cern/root/html602/TMVA__TActivationRadial.html,1,['simpl'],['simple']
Usability,". TMVA::TActivationRadial. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationRadial. class TMVA::TActivationRadial: public TMVA::TActivation. Radial basis activation function for ANN. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationRadial(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationRadial&operator=(const TMVA::TActivationRadial&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TMVA::TActivationRadialTActivationRadial(); TMVA::TActivationRadialTActivationRadial(const TMVA::TActivationRadial&). Data Members; private:. TFormula*fEqnequation of radial basis function; TFormula*fEqnDerivativeequation of derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationRadial(); constructor for gaussian with center 0, width 1. ~TActivationRadial(); destructor. Double_t Eval(Double_t arg); evaluate gaussian. Double_t EvalDerivative(Double_t arg); evaluate derivative. TString GetExpression(); get expressions for the gaussian and its derivatives. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationRadial(). Double_t GetMin(); minimum of the range of the activation function. { return 0; }. Double_t GetMax(); maximum of the range of the activation function. { return 1; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__TActivationRadial.html:386,simpl,simple,386,root/html528/TMVA__TActivationRadial.html,https://root.cern,https://root.cern/root/html528/TMVA__TActivationRadial.html,3,['simpl'],['simple']
Usability,". TMVA::TActivationRadial. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationRadial. class TMVA::TActivationRadial: public TMVA::TActivation. Radial basis activation function for ANN. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationRadial(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationRadial&operator=(const TMVA::TActivationRadial&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationRadialTActivationRadial(); TMVA::TActivationRadialTActivationRadial(const TMVA::TActivationRadial&). Data Members; private:. TFormula*fEqnequation of radial basis function; TFormula*fEqnDerivativeequation of derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationRadial(); constructor for gaussian with center 0, width 1. ~TActivationRadial(); destructor. Double_t Eval(Double_t arg); evaluate gaussian. Double_t EvalDerivative(Double_t arg); evaluate derivative. TString GetExpression(); get expressions for the gaussian and its derivatives. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationRadial(). Double_t GetMin(); minimum of the range of the activation function. { return 0; }. Double_t GetMax(); maximum of the range of the activation function. { return 1; }. » Author: Matt Jachowski » Copyright (c)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TActivationRadial.html:386,simpl,simple,386,root/html534/TMVA__TActivationRadial.html,https://root.cern,https://root.cern/root/html534/TMVA__TActivationRadial.html,1,['simpl'],['simple']
Usability,". TMVA::TActivationRadial. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::TActivationRadial. class TMVA::TActivationRadial: public TMVA::TActivation. Radial basis activation function for ANN. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationRadial(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationRadial&operator=(const TMVA::TActivationRadial&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationTMVA::TActivation::TActivation(); TMVA::TActivationTMVA::TActivation::TActivation(const TMVA::TActivation&); TMVA::TActivationRadialTActivationRadial(); TMVA::TActivationRadialTActivationRadial(const TMVA::TActivationRadial&). Data Members; private:. TFormula*fEqnequation of radial basis function; TFormula*fEqnDerivativeequation of derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationRadial(); constructor for gaussian with center 0, width 1. ~TActivationRadial(); destructor. Double_t Eval(Double_t arg); evaluate gaussian. Double_t EvalDerivative(Double_t arg); evaluate derivative. TString GetExpression(); get expressions for the gaussian and its derivatives. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationRadial(). Double_t GetMin(); minimum of the range of the activation fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TActivationRadial.html:394,simpl,simple,394,root/html604/TMVA__TActivationRadial.html,https://root.cern,https://root.cern/root/html604/TMVA__TActivationRadial.html,1,['simpl'],['simple']
Usability,". TMVA::TActivationSigmoid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationSigmoid. class TMVA::TActivationSigmoid: public TMVA::TActivation. Sigmoid activation function for TNeuron. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationSigmoid(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationSigmoid&operator=(const TMVA::TActivationSigmoid&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationTMVA::TActivation::TActivation(); TMVA::TActivationTMVA::TActivation::TActivation(const TMVA::TActivation&); TMVA::TActivationSigmoidTActivationSigmoid(); TMVA::TActivationSigmoidTActivationSigmoid(const TMVA::TActivationSigmoid&). Data Members; private:. TFormula*fEqnequation of sigmoid; TFormula*fEqnDerivativeequation of sigmoid derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationSigmoid(); constructor for sigmoid normalized in [0,1]. ~TActivationSigmoid(); destructor. Double_t Eval(Double_t arg); evaluate the sigmoid. Double_t EvalDerivative(Double_t arg); evaluate the derivative of the sigmoid. TString GetExpression(); get expressions for the sigmoid and its derivatives. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationSigmoid(). Double_t GetMin(); minimum of the range of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TActivationSigmoid.html:388,simpl,simple,388,root/html602/TMVA__TActivationSigmoid.html,https://root.cern,https://root.cern/root/html602/TMVA__TActivationSigmoid.html,1,['simpl'],['simple']
Usability,". TMVA::TActivationSigmoid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationSigmoid. class TMVA::TActivationSigmoid: public TMVA::TActivation. Sigmoid activation function for TNeuron. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationSigmoid(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationSigmoid&operator=(const TMVA::TActivationSigmoid&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TMVA::TActivationSigmoidTActivationSigmoid(); TMVA::TActivationSigmoidTActivationSigmoid(const TMVA::TActivationSigmoid&). Data Members; private:. TFormula*fEqnequation of sigmoid; TFormula*fEqnDerivativeequation of sigmoid derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationSigmoid(); constructor for sigmoid normalized in [0,1]. ~TActivationSigmoid(); destructor. Double_t Eval(Double_t arg); evaluate the sigmoid. Double_t EvalDerivative(Double_t arg); evaluate the derivative of the sigmoid. TString GetExpression(); get expressions for the sigmoid and its derivatives. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationSigmoid(). Double_t GetMin(); minimum of the range of the activation function. { return 0; }. Double_t GetMax(); maximum of the range of the activation function. { return 1; }. » Author: Matt Jachowski » Copyrigh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__TActivationSigmoid.html:388,simpl,simple,388,root/html528/TMVA__TActivationSigmoid.html,https://root.cern,https://root.cern/root/html528/TMVA__TActivationSigmoid.html,3,['simpl'],['simple']
Usability,". TMVA::TActivationSigmoid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationSigmoid. class TMVA::TActivationSigmoid: public TMVA::TActivation. Sigmoid activation function for TNeuron. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationSigmoid(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationSigmoid&operator=(const TMVA::TActivationSigmoid&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationSigmoidTActivationSigmoid(); TMVA::TActivationSigmoidTActivationSigmoid(const TMVA::TActivationSigmoid&). Data Members; private:. TFormula*fEqnequation of sigmoid; TFormula*fEqnDerivativeequation of sigmoid derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationSigmoid(); constructor for sigmoid normalized in [0,1]. ~TActivationSigmoid(); destructor. Double_t Eval(Double_t arg); evaluate the sigmoid. Double_t EvalDerivative(Double_t arg); evaluate the derivative of the sigmoid. TString GetExpression(); get expressions for the sigmoid and its derivatives. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationSigmoid(). Double_t GetMin(); minimum of the range of the activation function. { return 0; }. Double_t GetMax(); maximum of the range of the activation function. { return 1; }. » Author: Matt J",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TActivationSigmoid.html:388,simpl,simple,388,root/html534/TMVA__TActivationSigmoid.html,https://root.cern,https://root.cern/root/html534/TMVA__TActivationSigmoid.html,1,['simpl'],['simple']
Usability,". TMVA::TActivationSigmoid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::TActivationSigmoid. class TMVA::TActivationSigmoid: public TMVA::TActivation. Sigmoid activation function for TNeuron. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationSigmoid(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationSigmoid&operator=(const TMVA::TActivationSigmoid&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationTMVA::TActivation::TActivation(); TMVA::TActivationTMVA::TActivation::TActivation(const TMVA::TActivation&); TMVA::TActivationSigmoidTActivationSigmoid(); TMVA::TActivationSigmoidTActivationSigmoid(const TMVA::TActivationSigmoid&). Data Members; private:. TFormula*fEqnequation of sigmoid; TFormula*fEqnDerivativeequation of sigmoid derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationSigmoid(); constructor for sigmoid normalized in [0,1]. ~TActivationSigmoid(); destructor. Double_t Eval(Double_t arg); evaluate the sigmoid. Double_t EvalDerivative(Double_t arg); evaluate the derivative of the sigmoid. TString GetExpression(); get expressions for the sigmoid and its derivatives. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationSigmoid(). Double_t GetMin(); minimum of the ran",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TActivationSigmoid.html:396,simpl,simple,396,root/html604/TMVA__TActivationSigmoid.html,https://root.cern,https://root.cern/root/html604/TMVA__TActivationSigmoid.html,1,['simpl'],['simple']
Usability,". TMVA::TActivationTanh. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationTanh. class TMVA::TActivationTanh: public TMVA::TActivation. Tanh activation function for ANN. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationTanh(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationTanh&operator=(const TMVA::TActivationTanh&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationTMVA::TActivation::TActivation(); TMVA::TActivationTMVA::TActivation::TActivation(const TMVA::TActivation&); TMVA::TActivationTanhTActivationTanh(); TMVA::TActivationTanhTActivationTanh(const TMVA::TActivationTanh&). Data Members; private:. TFormula*fEqnequation of tanh sigmoid; TFormula*fEqnDerivativeequation of tanh sigmoid derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationTanh(); constructor for tanh sigmoid (normalized in [-1,1]). ~TActivationTanh(); destructor. Double_t Eval(Double_t arg); evaluate the tanh. Double_t EvalDerivative(Double_t arg); evaluate the derivative. TString GetExpression(); get expressions for the tanh and its derivative. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationTanh(). Double_t GetMin(); minimum of the range of the activation function. { return -1; }. Double_t GetMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TActivationTanh.html:372,simpl,simple,372,root/html602/TMVA__TActivationTanh.html,https://root.cern,https://root.cern/root/html602/TMVA__TActivationTanh.html,1,['simpl'],['simple']
Usability,". TMVA::TActivationTanh. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationTanh. class TMVA::TActivationTanh: public TMVA::TActivation. Tanh activation function for ANN. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationTanh(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationTanh&operator=(const TMVA::TActivationTanh&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TMVA::TActivationTanhTActivationTanh(); TMVA::TActivationTanhTActivationTanh(const TMVA::TActivationTanh&). Data Members; private:. TFormula*fEqnequation of tanh sigmoid; TFormula*fEqnDerivativeequation of tanh sigmoid derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationTanh(); constructor for tanh sigmoid (normalized in [-1,1]). ~TActivationTanh(); destructor. Double_t Eval(Double_t arg); evaluate the tanh. Double_t EvalDerivative(Double_t arg); evaluate the derivative. TString GetExpression(); get expressions for the tanh and its derivative. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationTanh(). Double_t GetMin(); minimum of the range of the activation function. { return -1; }. Double_t GetMax(); maximum of the range of the activation function. { return 1; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TActiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__TActivationTanh.html:372,simpl,simple,372,root/html528/TMVA__TActivationTanh.html,https://root.cern,https://root.cern/root/html528/TMVA__TActivationTanh.html,3,['simpl'],['simple']
Usability,". TMVA::TActivationTanh. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationTanh. class TMVA::TActivationTanh: public TMVA::TActivation. Tanh activation function for ANN. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationTanh(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationTanh&operator=(const TMVA::TActivationTanh&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationTanhTActivationTanh(); TMVA::TActivationTanhTActivationTanh(const TMVA::TActivationTanh&). Data Members; private:. TFormula*fEqnequation of tanh sigmoid; TFormula*fEqnDerivativeequation of tanh sigmoid derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationTanh(); constructor for tanh sigmoid (normalized in [-1,1]). ~TActivationTanh(); destructor. Double_t Eval(Double_t arg); evaluate the tanh. Double_t EvalDerivative(Double_t arg); evaluate the derivative. TString GetExpression(); get expressions for the tanh and its derivative. void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationTanh(). Double_t GetMin(); minimum of the range of the activation function. { return -1; }. Double_t GetMax(); maximum of the range of the activation function. { return 1; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TActivationTanh.html:372,simpl,simple,372,root/html534/TMVA__TActivationTanh.html,https://root.cern,https://root.cern/root/html534/TMVA__TActivationTanh.html,1,['simpl'],['simple']
Usability,". TMVA::TActivationTanh. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::TActivationTanh. class TMVA::TActivationTanh: public TMVA::TActivation. Tanh activation function for ANN. This really simple implementation; uses TFormulas and should probably be replaced with something more; efficient later. Function Members (Methods); public:. virtual~TActivationTanh(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationTanh&operator=(const TMVA::TActivationTanh&); voidSetSlow(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationTMVA::TActivation::TActivation(); TMVA::TActivationTMVA::TActivation::TActivation(const TMVA::TActivation&); TMVA::TActivationTanhTActivationTanh(); TMVA::TActivationTanhTActivationTanh(const TMVA::TActivationTanh&). private:. Double_tfast_tanh(Double_t arg). Data Members; private:. Bool_tfFAST. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationTanh(); constructor for tanh sigmoid (normalized in [-1,1]). ~TActivationTanh(); destructor. Double_t fast_tanh(Double_t arg); a fast tanh approximation. Double_t Eval(Double_t arg); evaluate the tanh. Double_t EvalDerivative(Double_t arg); evaluate the derivative. TString GetExpression(); get expressions for the tanh and its derivative; whatever that may be good for ... void MakeFunction(ostream& fout, const TString& fncName); writes the sigmoid activation function source code. TActivationTanh(). Double_t GetMin(); mini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TActivationTanh.html:380,simpl,simple,380,root/html604/TMVA__TActivationTanh.html,https://root.cern,https://root.cern/root/html604/TMVA__TActivationTanh.html,1,['simpl'],['simple']
Usability,". TMVA::TSynapse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMVA::TSynapse. class TMVA::TSynapse: public TObject. TSynapse. This is a simple weighted bidirectionnal connection between; two neurons.; A network is built connecting two neurons by a synapse.; In addition to the value, the synapse can return the DeDw. Function Members (Methods); public:. virtual~TSynapse(); voidTObject::AbstractMethod(const char* method) const; voidAdjustWeight(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalculateDelta(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidDecayLearningRate(Double_t rate); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDEDw(); Double_tGetDelta(); virtual Option_t*TObject::GetDrawOption() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TSynapse.html:322,simpl,simple,322,root/html602/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html602/TMVA__TSynapse.html,2,['simpl'],['simple']
Usability,". TMVA::Timer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Timer. class TMVA::Timer: public TStopwatch. Timing information for training and evaluation of MVA methods. Usage:. TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code. // now, print progress bar:; timer.DrawProgressBar( i );. // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;. }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;. Remark: in batch mode, the progress bar is quite ugly; you may; want to use the text output then. Function Members (Methods); public:. virtual~Timer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidTStopwatch::Continue(); virtual voidTObject::Copy(TObject& object) const; Int_tTStopwatch::Counter() const; Double_tTStopwatch::CpuTime(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawProgressBar(); voidDrawProgressBar(TString); voidDrawProgressBar(Int_t, const TString& comment = """"); virtual voidTObject::Dump() constMENU ; Double_tElapsedSeconds(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Timer.html:471,progress bar,progress bar,471,root/html528/TMVA__Timer.html,https://root.cern,https://root.cern/root/html528/TMVA__Timer.html,10,['progress bar'],['progress bar']
Usability,". TMVA::Timer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Timer. class TMVA::Timer: public TStopwatch. Timing information for training and evaluation of MVA methods. Usage:. TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code. // now, print progress bar:; timer.DrawProgressBar( i );. // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;. }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;. Remark: in batch mode, the progress bar is quite ugly; you may; want to use the text output then. Function Members (Methods); public:. virtual~Timer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidTStopwatch::Continue(); virtual voidTObject::Copy(TObject& object) const; Int_tTStopwatch::Counter() const; Double_tTStopwatch::CpuTime(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawProgressBar(); voidDrawProgressBar(TString); voidDrawProgressBar(Int_t, const TString& comment = """"); virtual voidTObject::Dump() constMENU ; Double_tElapsedSeconds(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Timer.html:479,progress bar,progress bar,479,root/html604/TMVA__Timer.html,https://root.cern,https://root.cern/root/html604/TMVA__Timer.html,2,['progress bar'],['progress bar']
Usability,. TMVA::kNN::Event. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TEST; » TMVA::kNN::Event. class TMVA::kNN::Event. Event and Track classes. The Event class is a naive/simple example of an event structure.; public:; char fType[20];; char *fEventName; //run+event number in character format; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Double32_t fTemperature;; Int_t fMeasures[10];; Double32_t fMatrix[4][4];; Double32_t *fClosestDistance; //[fNvertex] indexed array!; EventHeader fEvtHdr;; TClonesArray *fTracks;; TRefArray *fHighPt; //array of High Pt tracks only; TRefArray *fMuons; //array of Muon tracks only; TRef fLastTrack; //pointer to last track; TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; TH1F *fH;; TBits fTriggerBits; //Bits triggered by this event. The EventHeader class has 3 data members (integers):; public:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;. The Event data member fTracks is a pointer to a TClonesArray.; It is an array of a variable number of tracks per event.; Each element of the array is an object of class Track with the members:; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits of this track; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharg,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__kNN__Event.html:337,simpl,simple,337,root/html528/TMVA__kNN__Event.html,https://root.cern,https://root.cern/root/html528/TMVA__kNN__Event.html,4,['simpl'],['simple']
Usability,. TMatrixD TPrincipal::fCovarianceMatrix. protected . Covariance matrix. ; Definition at line 29 of file TPrincipal.h. ◆ fEigenValues. TVectorD TPrincipal::fEigenValues. protected . Eigenvalue vector of trans. ; Definition at line 32 of file TPrincipal.h. ◆ fEigenVectors. TMatrixD TPrincipal::fEigenVectors. protected . Eigenvector matrix of trans. ; Definition at line 31 of file TPrincipal.h. ◆ fHistograms. TList* TPrincipal::fHistograms. protected . List of histograms. ; Definition at line 40 of file TPrincipal.h. ◆ fIsNormalised. Bool_t TPrincipal::fIsNormalised. protected . Normalize matrix? ; Definition at line 42 of file TPrincipal.h. ◆ fMeanValues. TVectorD TPrincipal::fMeanValues. protected . Mean value over all data points. ; Definition at line 27 of file TPrincipal.h. ◆ fNumberOfDataPoints. Int_t TPrincipal::fNumberOfDataPoints. protected . Number of data points. ; Definition at line 24 of file TPrincipal.h. ◆ fNumberOfVariables. Int_t TPrincipal::fNumberOfVariables. protected . Number of variables. ; Definition at line 25 of file TPrincipal.h. ◆ fOffDiagonal. TVectorD TPrincipal::fOffDiagonal. protected . Elements of the tridiagonal. ; Definition at line 34 of file TPrincipal.h. ◆ fSigmas. TVectorD TPrincipal::fSigmas. protected . vector of sigmas ; Definition at line 28 of file TPrincipal.h. ◆ fStoreData. Bool_t TPrincipal::fStoreData. protected . Should we store input data? ; Definition at line 43 of file TPrincipal.h. ◆ fTrace. Double_t TPrincipal::fTrace. protected . Trace of covarience matrix. ; Definition at line 38 of file TPrincipal.h. ◆ fUserData. TVectorD TPrincipal::fUserData. protected . Vector of original data points. ; Definition at line 36 of file TPrincipal.h. Libraries for TPrincipal:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TPrincipal.h; hist/hist/src/TPrincipal.cxx. TPrincipal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrincipal.html:34952,Guid,Guide,34952,doc/master/classTPrincipal.html,https://root.cern,https://root.cern/doc/master/classTPrincipal.html,1,['Guid'],['Guide']
Usability,". TMinuit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TMinuit. class TMinuit: public TNamed. The Minimization package*-; -* ======================== ; -* ; -* This package was originally written in Fortran by Fred James ; -* and part of PACKLIB (patch D506) ; -* ; -* It has been converted to a C++ class by R.Brun ; -* The current implementation in C++ is a straightforward conversion ; -* of the original Fortran version: The main changes are: ; -* ; -* - The variables in the various Minuit labelled common blocks ; -* have been changed to the TMinuit class data members. ; -* - The internal arrays with a maximum dimension depending on the ; -* maximum number of parameters are now data members arrays with ; -* a dynamic dimension such that one can fit very large problems ; -* by simply initialising the TMinuit constructor with the maximum ; -* number of parameters. ; -* - The include file Minuit.h has been commented as much as possible; -* using existing comments in the code or the printed documentation; -* - The original Minuit subroutines are now member functions. ; -* - Constructors and destructor have been added. ; -* - Instead of passing the FCN function in the argument ; -* list, the addresses of this function is stored as pointer ; -* in the data members of the class. This is by far more elegant ; -* and flexible in an interactive environment. ; -* The member function SetFCN can be used to define this pointer. ; -* - The ROOT static function Printf is provided to replace all ; -* format statements and to print on currently defined output file.; -* - The functions SetObjectFit(TObject *obj)/GetObjectFit() can be ; -* used inside the FCN function to set/get a referenced object ; -* instead of using global variables. ; *. . Basic concepts of MINUIT. The MINUIT package acts on a mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:976,simpl,simply,976,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['simpl'],['simply']
Usability,". TMinuitMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TMinuitMinimizer. class TMinuitMinimizer: public ROOT::Math::Minimizer. TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using; TMinuit.; This class is normally instantiates using the plug-in manager; (plug-in with name Minuit or TMinuit); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); TMinuitMinimizer(const char* type, unsigned int ndim = 0); virtual~TMinuitMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int, ROOT::Fit::ParameterSettings&) const; virtual doubleGlobalCC(unsigned int) const; virtual boolHesse(); virtual TClass*IsA() const; virtual boolIsFixedVariable(unsigned int) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMinuitMinimizer.html:599,Simpl,Simplex,599,root/html534/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html534/TMinuitMinimizer.html,2,['Simpl'],['Simplex']
Usability,". TMinuitMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TMinuitMinimizer. class TMinuitMinimizer: public ROOT::Math::Minimizer. TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using; TMinuit.; This class is normally instantiates using the plug-in manager; (plug-in with name Minuit or TMinuit); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); TMinuitMinimizer(const char* type, unsigned int ndim = 0); virtual~TMinuitMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int) const; virtual boolHesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::Mini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMinuitMinimizer.html:599,Simpl,Simplex,599,root/html530/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html530/TMinuitMinimizer.html,4,['Simpl'],['Simplex']
Usability,". TMinuitMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TMinuitMinimizer. class TMinuitMinimizer: public ROOT::Math::Minimizer. TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using; TMinuit.; This class is normally instantiates using the plug-in manager; (plug-in with name Minuit or TMinuit); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); TMinuitMinimizer(const char* type, unsigned int ndim = 0); virtual~TMinuitMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int) const; virtual boolHesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::Options() const; doubleROOT::Math::Minimizer::Precision()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuitMinimizer.html:599,Simpl,Simplex,599,root/html528/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html528/TMinuitMinimizer.html,2,['Simpl'],['Simplex']
Usability,". TMinuitMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TMinuitMinimizer. class TMinuitMinimizer: public ROOT::Math::Minimizer. TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using; TMinuit.; This class is normally instantiates using the plug-in manager; (plug-in with name Minuit or TMinuit); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. virtual~TMinuitMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int, ROOT::Fit::ParameterSettings&) const; virtual doubleGlobalCC(unsigned int) const; virtual boolHesse(); virtual TClass*IsA() const; virtual boolIsFixedVariable(unsigned int) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuitMinimizer.html:599,Simpl,Simplex,599,root/html602/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html602/TMinuitMinimizer.html,4,['Simpl'],['Simplex']
Usability,". TNtuple. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TNtuple. class TNtuple: public TTree. TNtuple. A simple tree restricted to a list of float variables only. Each variable goes to a separate branch. A Ntuple is created via; TNtuple(name,title,varlist,bufsize); It is filled via:; TNtuple::Fill(*x) or; TNtuple::Fill(v1,v2,v3.....). Function Members (Methods); public:. TNtuple(); TNtuple(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); virtual~TNtuple(); voidTObject::AbstractMethod(const char* method) const; virtual voidTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch(const char* name, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); virtual TBranch*TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, char* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNtuple.html:291,simpl,simple,291,root/html534/TNtuple.html,https://root.cern,https://root.cern/root/html534/TNtuple.html,1,['simpl'],['simple']
Usability,". TNtuple. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TNtuple. class TNtuple: public TTree. TNtuple. A simple tree restricted to a list of float variables only. Each variable goes to a separate branch. A Ntuple is created via; TNtuple(name,title,varlist,bufsize); It is filled via:; TNtuple::Fill(*x) or; TNtuple::Fill(v1,v2,v3.....). Function Members (Methods); public:. TNtuple(); TNtuple(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); virtual~TNtuple(); voidTObject::AbstractMethod(const char* method) const; virtual voidTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); virtual TBranch*TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, char* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, long address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNtuple.html:291,simpl,simple,291,root/html528/TNtuple.html,https://root.cern,https://root.cern/root/html528/TNtuple.html,3,['simpl'],['simple']
Usability,". TNtuple. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TNtuple. class TNtuple: public TTree. TNtuple. A simple tree restricted to a list of float variables only. Each variable goes to a separate branch. A Ntuple is created via; TNtuple(name,title,varlist,bufsize); It is filled via:; TNtuple::Fill(*x) or; TNtuple::Fill(v1,v2,v3.....). Function Members (Methods); public:. virtual~TNtuple(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); virtual TBranch*TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, char* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, Long_t address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); virtual TBranch*TTree::Bra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNtuple.html:291,simpl,simple,291,root/html604/TNtuple.html,https://root.cern,https://root.cern/root/html604/TNtuple.html,1,['simpl'],['simple']
Usability,". TNtuple. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TNtuple. class TNtuple: public TTree. TNtuple. A simple tree restricted to a list of float variables only. Each variable goes to a separate branch. A Ntuple is created via; TNtuple(name,title,varlist,bufsize); It is filled via:; TNtuple::Fill(*x) or; TNtuple::Fill(v1,v2,v3.....). Function Members (Methods); public:. virtual~TNtuple(); voidTObject::AbstractMethod(const char* method) const; virtual voidTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); virtual TBranch*TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, char* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, Long_t address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); virtual TBranch*TTree::Branc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNtuple.html:291,simpl,simple,291,root/html602/TNtuple.html,https://root.cern,https://root.cern/root/html602/TNtuple.html,1,['simpl'],['simple']
Usability,". TNtupleD. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TNtupleD. class TNtupleD: public TTree. TNtupleD. A simple tree restricted to a list of double variables only. Each variable goes to a separate branch. A Ntuple is created via; TNtupleD(name,title,varlist,bufsize); It is filled via:; TNtupleD::Fill(*x) or; TNtupleD::Fill(v1,v2,v3.....). Function Members (Methods); public:. TNtupleD(); TNtupleD(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); virtual~TNtupleD(); voidTObject::AbstractMethod(const char* method) const; virtual voidTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch(const char* name, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); virtual TBranch*TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, char* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Bra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNtupleD.html:295,simpl,simple,295,root/html534/TNtupleD.html,https://root.cern,https://root.cern/root/html534/TNtupleD.html,1,['simpl'],['simple']
Usability,". TNtupleD. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TNtupleD. class TNtupleD: public TTree. TNtupleD. A simple tree restricted to a list of double variables only. Each variable goes to a separate branch. A Ntuple is created via; TNtupleD(name,title,varlist,bufsize); It is filled via:; TNtupleD::Fill(*x) or; TNtupleD::Fill(v1,v2,v3.....). Function Members (Methods); public:. TNtupleD(); TNtupleD(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); virtual~TNtupleD(); voidTObject::AbstractMethod(const char* method) const; virtual voidTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); virtual TBranch*TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, char* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, long address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNtupleD.html:295,simpl,simple,295,root/html528/TNtupleD.html,https://root.cern,https://root.cern/root/html528/TNtupleD.html,3,['simpl'],['simple']
Usability,". TNtupleD. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TNtupleD. class TNtupleD: public TTree. TNtupleD. A simple tree restricted to a list of double variables only. Each variable goes to a separate branch. A Ntuple is created via; TNtupleD(name,title,varlist,bufsize); It is filled via:; TNtupleD::Fill(*x) or; TNtupleD::Fill(v1,v2,v3.....). Function Members (Methods); public:. virtual~TNtupleD(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); virtual TBranch*TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, char* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, Long_t address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); virtual TBranch*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNtupleD.html:295,simpl,simple,295,root/html604/TNtupleD.html,https://root.cern,https://root.cern/root/html604/TNtupleD.html,1,['simpl'],['simple']
Usability,". TNtupleD. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TNtupleD. class TNtupleD: public TTree. TNtupleD. A simple tree restricted to a list of double variables only. Each variable goes to a separate branch. A Ntuple is created via; TNtupleD(name,title,varlist,bufsize); It is filled via:; TNtupleD::Fill(*x) or; TNtupleD::Fill(v1,v2,v3.....). Function Members (Methods); public:. virtual~TNtupleD(); voidTObject::AbstractMethod(const char* method) const; virtual voidTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tTTree::Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); virtual TBranch*TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, char* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, Long_t address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); virtual TBranch*TTr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNtupleD.html:295,simpl,simple,295,root/html602/TNtupleD.html,https://root.cern,https://root.cern/root/html602/TNtupleD.html,1,['simpl'],['simple']
Usability,". TObjArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TObjArray. class TObjArray: public TSeqCollection. TObjArray. An array of TObjects. The array expands automatically when; objects are added (shrinking can be done by hand using Expand(),; how nice to have meaningful names -:)).; Use operator[] to have ""real"" array behaviour. Note on ownership and copy:; By default the TObjArray does not own the objects it points to and; will not delete them unless explicitly asked (via a call to the; Delete member function). To assign ownership of the content to; the array, call:; myarr->SetOwner(kTRUE);; When the array owns its content a call to Clear or the deletion of; the array itself will lead to the deletion of its contents. You can either make a shallow copy of the array:; otherarr = new TObjArray(*myarr);; *otherarr = *myarr;; in which case ownership (if any) is not transfered but the other; array points to the same object as the original array. Note that; if the content of either array is deleted the other array is not; notified in any way (i.e. still points to the now deleted objects). You can also make a deep copy of the array:; otherarr = (TObjArray*)myarr->Clone();; in which case the array and the content are both duplicated (i.e.; otherarr and myarr do not point to the same objects). If myarr; is set to the be the owner of its content, otherarr will also be; set to the owner of its own conent. /*. */. Function Members (Methods); public:. TObjArray(const TObjArray& a); TObjArray(Int_t s = TCollection::kInitCapacity, Int_t lowerBound = 0); virtual~TObjArray(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjArray.html:831,Clear,Clear,831,root/html528/TObjArray.html,https://root.cern,https://root.cern/root/html528/TObjArray.html,4,['Clear'],['Clear']
Usability,". TObjArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TObjArray. class TObjArray: public TSeqCollection. TObjArray. An array of TObjects. The array expands automatically when; objects are added (shrinking can be done by hand using Expand(),; how nice to have meaningful names -:)).; Use operator[] to have ""real"" array behaviour. Note on ownership and copy:; By default the TObjArray does not own the objects it points to and; will not delete them unless explicitly asked (via a call to the; Delete member function). To assign ownership of the content to; the array, call:; myarr->SetOwner(kTRUE);; When the array owns its content a call to Clear or the deletion of; the array itself will lead to the deletion of its contents. You can either make a shallow copy of the array:; otherarr = new TObjArray(*myarr);; *otherarr = *myarr;; in which case ownership (if any) is not transfered but the other; array points to the same object as the original array. Note that; if the content of either array is deleted the other array is not; notified in any way (i.e. still points to the now deleted objects). You can also make a deep copy of the array:; otherarr = (TObjArray*)myarr->Clone();; in which case the array and the content are both duplicated (i.e.; otherarr and myarr do not point to the same objects). If myarr; is set to the be the owner of its content, otherarr will also be; set to the owner of its own conent. /*. */. Function Members (Methods); public:. virtual~TObjArray(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tAddAtFree(TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TObjArray.html:831,Clear,Clear,831,root/html602/TObjArray.html,https://root.cern,https://root.cern/root/html602/TObjArray.html,2,['Clear'],['Clear']
Usability,". TPMERegexp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TPMERegexp. class TPMERegexp: protected TPRegexp. Wrapper for PCRE library (Perl Compatible Regular Expressions).; Based on PME - PCRE Made Easy by Zachary Hansen. Supports main Perl operations using regular expressions (Match,; Substitute and Split). To retrieve the results one can simply use; operator[] returning a TString. See $ROOTSYS/tutorials/regexp_pme.C for examples. Function Members (Methods); public:. TPMERegexp(); TPMERegexp(const TPMERegexp& r); TPMERegexp(const TString& s, const TString& opts = """", Int_t nMatchMax = 10); TPMERegexp(const TString& s, UInt_t opts, Int_t nMatchMax = 10); virtual~TPMERegexp(); voidAssignGlobalState(const TPMERegexp& re); static TClass*Class(); Int_tGetGlobalPosition() const; Int_tGetNMaxMatches() const; virtual TClass*IsA() const; Int_tMatch(const TString& s, UInt_t start = 0); Int_tNMatches() const; TStringoperator[](Int_t); virtual voidPrint(Option_t* option = """"); voidReset(const TString& s, const TString& opts = """", Int_t nMatchMax = -1); voidReset(const TString& s, UInt_t opts, Int_t nMatchMax = -1); voidResetGlobalState(); voidSetNMaxMatches(Int_t nm); virtual voidShowMembers(TMemberInspector& insp); Int_tSplit(const TString& s, Int_t maxfields = 0); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Int_tSubstitute(TString& s, const TString& r, Bool_t doDollarSubst = kTRUE). protected:. voidTPRegexp::Compile(); TStringTPRegexp::GetModifiers() const; TStringTPRegexp::GetPattern() const; Bool_tTPRegexp::MatchB(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10); Int_tTPRegexp::MatchInternal(const TString& s, Int_t start, Int_t nMaxMatch, TArrayI* pos = 0); TObjArray*TPRegexp::MatchS(const TString& s, const TString& mods = """", Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPMERegexp.html:529,simpl,simply,529,root/html528/TPMERegexp.html,https://root.cern,https://root.cern/root/html528/TPMERegexp.html,3,['simpl'],['simply']
Usability,". TPMERegexp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TPMERegexp. class TPMERegexp: protected TPRegexp. Wrapper for PCRE library (Perl Compatible Regular Expressions).; Based on PME - PCRE Made Easy by Zachary Hansen. Supports main Perl operations using regular expressions (Match,; Substitute and Split). To retrieve the results one can simply use; operator[] returning a TString. See $ROOTSYS/tutorials/regexp_pme.C for examples. Function Members (Methods); public:. TPMERegexp(); TPMERegexp(const TPMERegexp& r); TPMERegexp(const TString& s, const TString& opts = """", Int_t nMatchMax = 10); TPMERegexp(const TString& s, UInt_t opts, Int_t nMatchMax = 10); virtual~TPMERegexp(); voidAssignGlobalState(const TPMERegexp& re); static TClass*Class(); Int_tGetGlobalPosition() const; Int_tGetNMaxMatches() const; virtual TClass*IsA() const; Int_tMatch(const TString& s, UInt_t start = 0); Int_tNMatches() const; TStringoperator[](Int_t); virtual voidPrint(Option_t* option = """"); voidReset(const TString& s, const TString& opts = """", Int_t nMatchMax = -1); voidReset(const TString& s, UInt_t opts, Int_t nMatchMax = -1); voidResetGlobalState(); voidSetNMaxMatches(Int_t nm); virtual voidShowMembers(TMemberInspector&); Int_tSplit(const TString& s, Int_t maxfields = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Int_tSubstitute(TString& s, const TString& r, Bool_t doDollarSubst = kTRUE). protected:. voidTPRegexp::Compile(); TStringTPRegexp::GetModifiers() const; TStringTPRegexp::GetPattern() const; static Bool_tTPRegexp::GetThrowAtCompileError(); Bool_tTPRegexp::IsValid() const; Bool_tTPRegexp::MatchB(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10); Int_tTPRegexp::MatchInternal(const TString& s, Int_t start, Int_t nMaxMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPMERegexp.html:529,simpl,simply,529,root/html534/TPMERegexp.html,https://root.cern,https://root.cern/root/html534/TPMERegexp.html,1,['simpl'],['simply']
Usability,". TPMERegexp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TPMERegexp. class TPMERegexp: protected TPRegexp. Wrapper for PCRE library (Perl Compatible Regular Expressions).; Based on PME - PCRE Made Easy by Zachary Hansen. Supports main Perl operations using regular expressions (Match,; Substitute and Split). To retrieve the results one can simply use; operator[] returning a TString. See $ROOTSYS/tutorials/regexp_pme.C for examples. Function Members (Methods); public:. virtual~TPMERegexp(); voidAssignGlobalState(const TPMERegexp& re); static TClass*Class(); Int_tGetGlobalPosition() const; Int_tGetNMaxMatches() const; virtual TClass*IsA() const; Int_tMatch(const TString& s, UInt_t start = 0); Int_tNMatches() const; TStringoperator[](Int_t); virtual voidPrint(Option_t* option = """"); voidReset(const TString& s, const TString& opts = """", Int_t nMatchMax = -1); voidReset(const TString& s, UInt_t opts, Int_t nMatchMax = -1); voidResetGlobalState(); voidSetNMaxMatches(Int_t nm); virtual voidShowMembers(TMemberInspector& insp) const; Int_tSplit(const TString& s, Int_t maxfields = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Int_tSubstitute(TString& s, const TString& r, Bool_t doDollarSubst = kTRUE); TPMERegexp(); TPMERegexp(const TPMERegexp& r); TPMERegexp(const TString& s, const TString& opts = """", Int_t nMatchMax = 10); TPMERegexp(const TString& s, UInt_t opts, Int_t nMatchMax = 10). protected:. voidTPRegexp::Compile(); TStringTPRegexp::GetModifiers() const; TStringTPRegexp::GetPattern() const; static Bool_tTPRegexp::GetThrowAtCompileError(); Bool_tTPRegexp::IsValid() const; Bool_tTPRegexp::MatchB(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10); Int_tTPRegexp::MatchInternal(const TString& s, Int_t start, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPMERegexp.html:529,simpl,simply,529,root/html602/TPMERegexp.html,https://root.cern,https://root.cern/root/html602/TPMERegexp.html,2,['simpl'],['simply']
Usability,". TParallelCoordVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TParallelCoordVar. class TParallelCoordVar: public TNamed, public TAttLine, public TAttFill. Axes:. Class containing a variable for the TParallelCoord. Options can be defined each axis separatly using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. Function Members (Methods); public:. TParallelCoordVar(); TParallelCoordVar(const TParallelCoordVar&); TParallelCoordVar(Double_t* val, const char* title, Int_t id, TParallelCoord* gram); virtual~TParallelCoordVar(); voidTObject::AbstractMethod(const char* method) const; voidAddRange()MENU ; voidAddRange(TParallelCoordRange* range); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParallelCoordVar.html:580,simpl,simply,580,root/html530/TParallelCoordVar.html,https://root.cern,https://root.cern/root/html530/TParallelCoordVar.html,3,['simpl'],['simply']
Usability,". TParallelCoordVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TParallelCoordVar. class TParallelCoordVar: public TNamed, public TAttLine, public TAttFill. Axes:. Class containing a variable for the TParallelCoord. Options can be defined each axis separatly using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. Function Members (Methods); public:. virtual~TParallelCoordVar(); voidTObject::AbstractMethod(const char* method) const; voidAddRange()MENU ; voidAddRange(TParallelCoordRange* range); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoordVar.html:580,simpl,simply,580,root/html602/TParallelCoordVar.html,https://root.cern,https://root.cern/root/html602/TParallelCoordVar.html,2,['simpl'],['simply']
Usability,". TPointSet3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » G3D; » TPointSet3D. class TPointSet3D: public TPolyMarker3D, public TAttBBox. TPolyMarker3D using TPointSet3DGL for direct OpenGL rendering.; Supports only elementary marker types:; 4, 20, 24 : round points, size in pixels;; 2, 3, 5 : crosses, size in scene units;; 28 : as above, line width 2 pixels;; all other : square points, size in pixels. Marker-size (from TAttMarker) is multiplied by 5!. An identification of type TObject* can be assigned to each point; via SetPointId() method. Set the fOwnIds flag if the ids are owned; by the point-set and should be deleted when pointset is cleared or; destructed. Copy-constructor and assignment operator COPIES the ids if the are; not owned and CLONES them if they are owned. The ids are not streamed. Function Members (Methods); public:. TPointSet3D(); TPointSet3D(const TPointSet3D& t); TPointSet3D(Int_t n, Marker_t m = 1, Option_t* opt = """"); TPointSet3D(Int_t n, Float_t* p, Marker_t m = 1, Option_t* opt = """"); TPointSet3D(Int_t n, Double_t* p, Marker_t m = 1, Option_t* opt = """"); virtual~TPointSet3D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_t*TAttBBox::AssertBBox(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearIds(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTPolyMarker3D::Copy(TObject& polymarker) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTPolyMarker3D::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyMarker3D::Draw(Option_t* option = """")",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPointSet3D.html:827,clear,cleared,827,root/html528/TPointSet3D.html,https://root.cern,https://root.cern/root/html528/TPointSet3D.html,4,['clear'],['cleared']
Usability,". TPointSet3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » G3D; » TPointSet3D. class TPointSet3D: public TPolyMarker3D, public TAttBBox. TPolyMarker3D using TPointSet3DGL for direct OpenGL rendering.; Supports only elementary marker types:; 4, 20, 24 : round points, size in pixels;; 2, 3, 5 : crosses, size in scene units;; 28 : as above, line width 2 pixels;; all other : square points, size in pixels. Marker-size (from TAttMarker) is multiplied by 5!. An identification of type TObject* can be assigned to each point; via SetPointId() method. Set the fOwnIds flag if the ids are owned; by the point-set and should be deleted when pointset is cleared or; destructed. Copy-constructor and assignment operator COPIES the ids if the are; not owned and CLONES them if they are owned. The ids are not streamed. Function Members (Methods); public:. virtual~TPointSet3D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_t*TAttBBox::AssertBBox(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearIds(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTPolyMarker3D::Copy(TObject& polymarker) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTPolyMarker3D::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyMarker3D::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyMarker3D::DrawPolyMarker(Int_t n, Float_t* p, Marker_t marker, Option_t* option = """"); virtual voidTObject::Dump() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPointSet3D.html:827,clear,cleared,827,root/html602/TPointSet3D.html,https://root.cern,https://root.cern/root/html602/TPointSet3D.html,2,['clear'],['cleared']
Usability,". TProcessEventTimer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TProcessEventTimer. class TProcessEventTimer: public TTimer. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. TProcessEventTimer(Long_t delay); ~TProcessEventTimer(); voidTObject::AbstractMethod(const char* method) const; voidTSysEvtHandler::Activate(); virtual voidTSysEvtHandler::Activated()SIGNAL ; virtual voidTTimer::Add(); virtual voidTSysEvtHandler::Added()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; Bool_tTTimer::CheckTimer(const TTime& now); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProcessEventTimer.html:676,simpl,simple,676,root/html528/TProcessEventTimer.html,https://root.cern,https://root.cern/root/html528/TProcessEventTimer.html,4,['simpl'],['simple']
Usability,". TProcessEventTimer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TProcessEventTimer. class TProcessEventTimer: public TTimer. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~TProcessEventTimer(); voidTObject::AbstractMethod(const char* method) const; voidTSysEvtHandler::Activate(); virtual voidTSysEvtHandler::Activated()SIGNAL ; virtual voidTTimer::Add(); virtual voidTSysEvtHandler::Added()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; Bool_tTTimer::CheckTimer(const TTime& now); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProcessEventTimer.html:676,simpl,simple,676,root/html602/TProcessEventTimer.html,https://root.cern,https://root.cern/root/html602/TProcessEventTimer.html,2,['simpl'],['simple']
Usability,". TProofProgressDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressDialog. class TProofProgressDialog. TProofProgressDialog. This class provides a query progress bar. Function Members (Methods); public:. TProofProgressDialog(const TProofProgressDialog&); TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); virtual~TProofProgressDialog(); static TClass*Class(); voidCloseWindow(); voidDisableAsyn(); voidDoAbort(); voidDoAsyn(); voidDoClose(); voidDoEnableSpeedo(); voidDoKeep(Bool_t on); voidDoLog(); voidDoMemoryPlot(); voidDoPlotRateGraph(); voidDoSetLogQuery(Bool_t on); voidDoStop(); voidIndicateStop(Bool_t aborted); virtual TClass*IsA() const; voidLogMessage(const char* msg, Bool_t all); TProofProgressDialog&operator=(const TProofProgressDialog&); voidProgress(Long64_t total, Long64_t processed); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); voidResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidToggleOdometerInfos(); voidToggleThreshold(). private:. Float_tAdjustBytes(Float_t mbs, TString& sf). Data Members; public:. enum EQueryStatus { kRunning; kDone; kStopped; kAborted; kIncomplete; };. private:. TGTextButton*fAbort; TGraph*fActWGraph; TGTextButton*fAsyn; Double_tfAvgMBRate; Double_tfAvgRate; TGProgressBar*fBarprogress bar; TGTextButton*fClose; TGTransientFrame*fDialogtransient frame, main dialog wind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressDialog.html:363,progress bar,progress bar,363,root/html528/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html528/TProofProgressDialog.html,3,['progress bar'],['progress bar']
Usability,". TProofProgressDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressDialog. class TProofProgressDialog. TProofProgressDialog. This class provides a query progress bar. Function Members (Methods); public:. TProofProgressDialog(const TProofProgressDialog&); TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); virtual~TProofProgressDialog(); static TClass*Class(); voidCloseWindow(); voidDisableAsyn(); voidDoAbort(); voidDoAsyn(); voidDoClose(); voidDoEnableSpeedo(); voidDoKeep(Bool_t on); voidDoLog(); voidDoMemoryPlot(); voidDoPlotRateGraph(); voidDoSetLogQuery(Bool_t on); voidDoStop(); voidIndicateStop(Bool_t aborted); virtual TClass*IsA() const; voidLogMessage(const char* msg, Bool_t all); TProofProgressDialog&operator=(const TProofProgressDialog&); voidProgress(Long64_t total, Long64_t processed); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); voidResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidToggleOdometerInfos(); voidToggleThreshold(). private:. Float_tAdjustBytes(Float_t mbs, TString& sf). Data Members; public:. enum EQueryStatus { kRunning; kDone; kStopped; kAborted; kIncomplete; };. private:. TGTextButton*fAbort; TGraph*fActWGraph; TGTextButton*fAsyn; Double_tfAvgMBRate; Double_tfAvgRate; TGProgressBar*fBarprogress bar; TGTextButton*fClose; TGTransientFrame*fDialogtransient fram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofProgressDialog.html:363,progress bar,progress bar,363,root/html534/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html534/TProofProgressDialog.html,1,['progress bar'],['progress bar']
Usability,". TProofProgressDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressDialog. class TProofProgressDialog. TProofProgressDialog. This class provides a query progress bar. Function Members (Methods); public:. virtual~TProofProgressDialog(); static TClass*Class(); voidCloseWindow(); voidDisableAsyn(); voidDoAbort(); voidDoAsyn(); voidDoClose(); voidDoEnableSpeedo(); voidDoKeep(Bool_t on); voidDoLog(); voidDoMemoryPlot(); voidDoPlotRateGraph(); voidDoSetLogQuery(Bool_t on); voidDoStop(); voidIndicateStop(Bool_t aborted); virtual TClass*IsA() const; voidLogMessage(const char* msg, Bool_t all); TProofProgressDialog&operator=(const TProofProgressDialog&); voidProgress(Long64_t total, Long64_t processed); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); voidResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidToggleOdometerInfos(); voidToggleThreshold(); TProofProgressDialog(const TProofProgressDialog&); TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). private:. Float_tAdjustBytes(Float_t mbs, TString& sf). Data Members; private:. TGTextButton*fAbort; TGraph*fActWGraph; TGTextButton*fAsyn; Double_tfAvgMBRate; Double_tfAvgRate; TGProgressBar*fBarprogress bar; TGTextButton*fClose; TGTransientFrame*fDialogtransient frame, main dialog window; TGraph*fEffSGraph; TTimefEndTime; Long64_tfEntrie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressDialog.html:363,progress bar,progress bar,363,root/html602/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html602/TProofProgressDialog.html,2,['progress bar'],['progress bar']
Usability,". TPyMultiGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » TPyMultiGenFunction. class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. TPyMultiGenFunction(PyObject* self = 0); virtual~TPyMultiGenFunction(); static TClass*Class(); virtual TPyMultiGenFunction*Clone() const; virtual doubleDoEval(const double* x) const; virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TPyMultiGenFunction(const TPyMultiGenFunction& src); TPyMultiGenFunction&operator=(const TPyMultiGenFunction&). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. TPyMultiGenFunction* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGenFunction& ); { return *this; }. » Last changed: Mon Nov 29 18:57:56 2010 » Last generated: 2010-11-29 18:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPyMultiGenFunction.html:1375,Simpl,Simply,1375,root/html528/TPyMultiGenFunction.html,https://root.cern,https://root.cern/root/html528/TPyMultiGenFunction.html,2,['Simpl'],['Simply']
Usability,". TQCommand. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQCommand. class TQCommand: public TList, public TQObject. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:595,undo,undo,595,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,6,['undo'],['undo']
Usability,". TQCommand. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQCommand. class TQCommand: public TList, public TQObject. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:571,undo,undo,571,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,12,['undo'],['undo']
Usability,". TQUndoManager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQUndoManager. class TQUndoManager: public TQCommand. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQUndoManager.html:594,undo,undo,594,root/html602/TQUndoManager.html,https://root.cern,https://root.cern/root/html602/TQUndoManager.html,6,['undo'],['undo']
Usability,". TQUndoManager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQUndoManager. class TQUndoManager: public TQCommand. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:570,undo,undo,570,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,12,['undo'],['undo']
Usability,". TRadialGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRadialGradient. class TRadialGradient: public TColorGradient. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. virtual~TRadialGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRadialGradient.html:415,simpl,simple,415,root/html602/TRadialGradient.html,https://root.cern,https://root.cern/root/html602/TRadialGradient.html,2,['simpl'],['simple']
Usability,". TRadialGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRadialGradient. class TRadialGradient: public TColorGradient. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TRadialGradient(); TRadialGradient(const TRadialGradient&); TRadialGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Color_t* colorIndices, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); TRadialGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Double_t* colors, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); ~TRadialGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRadialGradient.html:391,simpl,simple,391,root/html534/TRadialGradient.html,https://root.cern,https://root.cern/root/html534/TRadialGradient.html,1,['simpl'],['simple']
Usability,". TRandom. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » TRandom. class TRandom: public TNamed. TRandom. basic Random number generator class (periodicity = 10**9).; Note that this is a very simple generator (linear congruential); which is known to have defects (the lower random bits are correlated); and therefore should NOT be used in any statistical study.; One should use instead TRandom1, TRandom2 or TRandom3.; TRandom3, is based on the ""Mersenne Twister generator"", and is the recommended one,; since it has good random proprieties (period of about 10**6000 ) and it is fast.; TRandom1, based on the RANLUX algorithm, has mathematically proven random proprieties; and a period of about 10**171. It is however slower than the others.; TRandom2, is based on the Tausworthe generator of L'Ecuyer, and it has the advantage; of being fast and using only 3 words (of 32 bits) for the state. The period is 10**26. The following table shows some timings (in nanoseconds/call); for the random numbers obtained using an Intel Pentium 3.0 GHz running Linux; and using the gcc 3.2.3 compiler. TRandom 34 ns/call (BAD Generator); TRandom1 242 ns/call; TRandom2 37 ns/call; TRandom3 45 ns/call. The following basic Random distributions are provided:. -Exp(tau); -Integer(imax); -Gaus(mean,sigma); -Rndm(); -Uniform(x1); -Landau(mpv,sigma); -Poisson(mean); -Binomial(ntot,prob). Random numbers distributed according to 1-d, 2-d or 3-d distributions. contained in TF1, TF2 or TF3 objects.; For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x); you can do :; TF1 *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10);; double r = f1->GetRandom();; or you can use the UNURAN package. You need in this case to initialize UNURAN; to the function you would like to generate.; TUnu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRandom.html:403,simpl,simple,403,root/html602/TRandom.html,https://root.cern,https://root.cern/root/html602/TRandom.html,2,['simpl'],['simple']
Usability,". TRandom. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » TRandom. class TRandom: public TNamed. TRandom. basic Random number generator class (periodicity = 10**9).; Note that this is a very simple generator (linear congruential); which is known to have defects (the lower random bits are correlated); and therefore should NOT be used in any statistical study.; One should use instead TRandom1, TRandom2 or TRandom3.; TRandom3, is based on the ""Mersenne Twister generator"", and is the recommended one,; since it has good random proprieties (period of about 10**6000 ) and it is fast.; TRandom1, based on the RANLUX algorithm, has mathematically proven random proprieties; and a period of about 10**171. It is however slower than the others.; TRandom2, is based on the Tausworthe generator of L'Ecuyer, and it has the advantage; of being fast and using only 3 words (of 32 bits) for the state. The period is 10**26. The following table shows some timings (in nanoseconds/call); for the random numbers obtained using an Intel Pentium 3.0 GHz running Linux; and using the gcc 3.2.3 compiler. TRandom 34 ns/call (BAD Generator); TRandom1 242 ns/call; TRandom2 37 ns/call; TRandom3 45 ns/call. The following basic Random distributions are provided:. -Exp(tau); -Integer(imax); -Gaus(mean,sigma); -Rndm(); -Uniform(x1); -Landau(mpv,sigma); -Poisson(mean); -Binomial(ntot,prob). Random numbers distributed according to 1-d, 2-d or 3-d distributions. contained in TF1, TF2 or TF3 objects.; For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x); you can do :; TF1 *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10);; double r = f1->GetRandom();; or you can use the UNURAN package. You need in this case to initialize UNURAN; to the function you would like to generate.; TUnuran u;; u.Init(TUnuranDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRandom.html:379,simpl,simple,379,root/html528/TRandom.html,https://root.cern,https://root.cern/root/html528/TRandom.html,4,['simpl'],['simple']
Usability,". TRecorderInactive. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderInactive. class TRecorderInactive: public TRecorderState. Represents state of TRecorder after its creation. Function Members (Methods); public:. virtual~TRecorderInactive(); static TClass*Class(); static longDisplayValid(Long_t n); static voidDumpRootEvent(TRecGuiEvent* e, Int_t n); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char* filename); virtual voidListGui(const char* filename); TRecorderInactive&operator=(const TRecorderInactive&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidPrevCanvases(const char* filename, Option_t* option); virtual Bool_tReplay(TRecorder* r, const char* filename, Bool_t showMouseCursor, TRecorder::EReplayModes mode); virtual voidTRecorderState::ReplayStop(TRecorder*); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStart(TRecorder* r, const char* filename, Option_t* option, Window_t* w = 0, Int_t winCount = 0); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRecorderInactive(); TRecorderInactive(const TRecorderInactive&). protected:. voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). Data Members; private:. TSeqCollection*fCollect. Class Charts. Inheritance Chart:. TRecorderState. ←; TRecorderInactive. Function documentation; void Start(TRecorder* r, const char* filename, Option_t* option, Window_t* w = 0, Int_t winCount = 0); Switches from INACTIVE state to RECORDING and starts recording. Bool_t Replay(TRecorder* r, const char* filename, Bool_t showMouseCursor, TRecorder::ERep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorderInactive.html:820,Pause,Pause,820,root/html602/TRecorderInactive.html,https://root.cern,https://root.cern/root/html602/TRecorderInactive.html,4,"['Pause', 'Resume']","['Pause', 'Resume']"
Usability,". TRecorderInactive. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderInactive. class TRecorderInactive: public TRecorderState. Represents state of TRecorder after its creation. Function Members (Methods); public:. TRecorderInactive(); TRecorderInactive(const TRecorderInactive&); virtual~TRecorderInactive(); static TClass*Class(); static longDisplayValid(Long_t n); static voidDumpRootEvent(TRecGuiEvent* e, Int_t n); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char* filename); virtual voidListGui(const char* filename); TRecorderInactive&operator=(const TRecorderInactive&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidPrevCanvases(const char* filename, Option_t* option); virtual Bool_tReplay(TRecorder* r, const char* filename, Bool_t showMouseCursor, TRecorder::EReplayModes mode); virtual voidTRecorderState::ReplayStop(TRecorder*); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStart(TRecorder* r, const char* filename, Option_t* option, Window_t* w = 0, Int_t winCount = 0); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). Data Members; private:. TSeqCollection*fCollect. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Start(TRecorder* r, const char* filename, Option_t* option, Window_t* w = 0, Int_t winCount = 0); Switches from INACTIVE state to RECORDING and starts recording. Bool_t Replay(TRecorder* r, const char* filename, Bool_t showMouseCursor, TRecorder::EReplayModes mode); Switches from INACTIVE state of recorder to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderInactive.html:862,Pause,Pause,862,root/html528/TRecorderInactive.html,https://root.cern,https://root.cern/root/html528/TRecorderInactive.html,6,"['Pause', 'Resume']","['Pause', 'Resume']"
Usability,". TRecorderInactive. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderInactive. class TRecorderInactive: public TRecorderState. Represents state of TRecorder after its creation. Function Members (Methods); public:. TRecorderInactive(); TRecorderInactive(const TRecorderInactive&); virtual~TRecorderInactive(); static TClass*Class(); static longDisplayValid(Long_t n); static voidDumpRootEvent(TRecGuiEvent* e, Int_t n); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char* filename); virtual voidListGui(const char* filename); TRecorderInactive&operator=(const TRecorderInactive&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidPrevCanvases(const char* filename, Option_t* option); virtual Bool_tReplay(TRecorder* r, const char* filename, Bool_t showMouseCursor, TRecorder::EReplayModes mode); virtual voidTRecorderState::ReplayStop(TRecorder*); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector&); virtual voidStart(TRecorder* r, const char* filename, Option_t* option, Window_t* w = 0, Int_t winCount = 0); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). Data Members; private:. TSeqCollection*fCollect. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Start(TRecorder* r, const char* filename, Option_t* option, Window_t* w = 0, Int_t winCount = 0); Switches from INACTIVE state to RECORDING and starts recording. Bool_t Replay(TRecorder* r, const char* filename, Bool_t showMouseCursor, TRecorder::EReplayModes mode); Switches from INACTIVE s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorderInactive.html:862,Pause,Pause,862,root/html534/TRecorderInactive.html,https://root.cern,https://root.cern/root/html534/TRecorderInactive.html,2,"['Pause', 'Resume']","['Pause', 'Resume']"
Usability,". TRecorderPaused. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderPaused. class TRecorderPaused: public TRecorderState. Represents state of TRecorder when paused. Function Members (Methods); public:. static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderPaused&operator=(const TRecorderPaused&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder* r); virtual voidResume(TRecorder* r); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRecorderPaused(const TRecorderPaused&). protected:. voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState); TRecorderPaused(TRecorderReplaying* state). private:. virtual~TRecorderPaused(). Data Members; private:. TRecorderReplaying*fReplayingStateReplaying that is paused. Class Charts. Inheritance Chart:. TRecorderState. ←; TRecorderPaused. Function documentation; TRecorderPaused(TRecorderReplaying* state); Rememeber the recorder state that is paused. void Resume(TRecorder* r); Continues replaying. void ReplayStop(TRecorder* r); Replaying is cancelled. TRecorder & operator=(const TRecorderPaused& ). TRecorder::ERecorderState GetState() const; Gets current state of recorder. virtual ~TRecorderPaused(); {}. TRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorderPaused.html:375,pause,paused,375,root/html602/TRecorderPaused.html,https://root.cern,https://root.cern/root/html602/TRecorderPaused.html,4,"['Pause', 'pause']","['Pause', 'paused']"
Usability,". TRecorderPaused. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderPaused. class TRecorderPaused: public TRecorderState. Represents state of TRecorder when paused. Function Members (Methods); public:. TRecorderPaused(const TRecorderPaused&); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderPaused&operator=(const TRecorderPaused&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder* r); virtual voidResume(TRecorder* r); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderPaused(TRecorderReplaying* state); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). private:. (unknown)(). Data Members; private:. TRecorderReplaying*fReplayingStateReplaying that is paused. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorderPaused(TRecorderReplaying* state); Rememeber the recorder state that is paused. void Resume(TRecorder* r); Continues replaying. void ReplayStop(TRecorder* r); Replaying is cancelled. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderPaused(TRecorderReplaying* state). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderPaused.html:351,pause,paused,351,root/html528/TRecorderPaused.html,https://root.cern,https://root.cern/root/html528/TRecorderPaused.html,6,"['Pause', 'pause']","['Pause', 'paused']"
Usability,". TRecorderPaused. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderPaused. class TRecorderPaused: public TRecorderState. Represents state of TRecorder when paused. Function Members (Methods); public:. TRecorderPaused(const TRecorderPaused&); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderPaused&operator=(const TRecorderPaused&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder* r); virtual voidResume(TRecorder* r); virtual voidShowMembers(TMemberInspector&); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TRecorderPaused(TRecorderReplaying* state); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). private:. (unknown)(). Data Members; private:. TRecorderReplaying*fReplayingStateReplaying that is paused. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorderPaused(TRecorderReplaying* state); Rememeber the recorder state that is paused. void Resume(TRecorder* r); Continues replaying. void ReplayStop(TRecorder* r); Replaying is cancelled. TRecorder & operator=(const TRecorderPaused& ). TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderPaused(TRecorderReplaying* state). » Author: Katerina Opocenska 11/09/2008 » C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorderPaused.html:351,pause,paused,351,root/html534/TRecorderPaused.html,https://root.cern,https://root.cern/root/html534/TRecorderPaused.html,2,"['Pause', 'pause']","['Pause', 'paused']"
Usability,". TRecorderReplaying. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderReplaying. class TRecorderReplaying: public TRecorderState. Represents state of TRecorder when replaying. Function Members (Methods); public:. static TClass*Class(); virtual voidContinue(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderReplaying&operator=(const TRecorderReplaying&); virtual voidPause(TRecorder* r); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); voidRegisterWindow(Window_t w); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); voidReplayRealtime(); virtual voidReplayStop(TRecorder* r); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRecorderReplaying(const TRecorderReplaying&). protected:. voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState); Bool_tInitialize(TRecorder* r, Bool_t showMouseCursor, TRecorder::EReplayModes mode); TRecorderReplaying(const char* filename). private:. virtual~TRecorderReplaying(); Bool_tCanOverlap(); Bool_tFilterEvent(TRecGuiEvent* e); Bool_tPrepareNextEvent(); Bool_tRemapWindowReferences(). Data Members; private:. TCanvas*fCanvUsed to record the previous canvases; TRecCmdEvent*fCmdEventCommandline event being currently replayed; TTree*fCmdTreeTTree with recorded commandline events; Int_tfCmdTreeCounterCounter of c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorderReplaying.html:1030,Resume,Resume,1030,root/html602/TRecorderReplaying.html,https://root.cern,https://root.cern/root/html602/TRecorderReplaying.html,2,['Resume'],['Resume']
Usability,". TRecorderReplaying. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderReplaying. class TRecorderReplaying: public TRecorderState. Represents state of TRecorder when replaying. Function Members (Methods); public:. TRecorderReplaying(const TRecorderReplaying&); static TClass*Class(); virtual voidContinue(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderReplaying&operator=(const TRecorderReplaying&); virtual voidPause(TRecorder* r); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); voidRegisterWindow(Window_t w); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); voidReplayRealtime(); virtual voidReplayStop(TRecorder* r); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderReplaying(const char* filename); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState); Bool_tInitialize(TRecorder* r, Bool_t showMouseCursor, TRecorder::EReplayModes mode). private:. (unknown)(); Bool_tCanOverlap(); Bool_tFilterEvent(TRecGuiEvent* e); Bool_tPrepareNextEvent(); Bool_tRemapWindowReferences(). Data Members; private:. TCanvas*fCanvUsed to record the previous canvases; TRecCmdEvent*fCmdEventCommandline event being currently replayed; TTree*fCmdTreeTTree with recorded commandline events; Int_tfCmdTreeCounterCounter of commandline events that have been replayed; Bool_tfEventReplayedSignaliz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderReplaying.html:1053,Resume,Resume,1053,root/html528/TRecorderReplaying.html,https://root.cern,https://root.cern/root/html528/TRecorderReplaying.html,3,['Resume'],['Resume']
Usability,". TRecorderReplaying. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderReplaying. class TRecorderReplaying: public TRecorderState. Represents state of TRecorder when replaying. Function Members (Methods); public:. TRecorderReplaying(const TRecorderReplaying&); static TClass*Class(); virtual voidContinue(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderReplaying&operator=(const TRecorderReplaying&); virtual voidPause(TRecorder* r); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); voidRegisterWindow(Window_t w); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); voidReplayRealtime(); virtual voidReplayStop(TRecorder* r); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector&); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TRecorderReplaying(const char* filename); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState); Bool_tInitialize(TRecorder* r, Bool_t showMouseCursor, TRecorder::EReplayModes mode). private:. (unknown)(); Bool_tCanOverlap(); Bool_tFilterEvent(TRecGuiEvent* e); Bool_tPrepareNextEvent(); Bool_tRemapWindowReferences(). Data Members; private:. TCanvas*fCanvUsed to record the previous canvases; TRecCmdEvent*fCmdEventCommandline event being currently replayed; TTree*fCmdTreeTTree with recorded commandline events; Int_tfCmdTreeCounterCounter of commandline events that have been replayed; Bool_tfEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorderReplaying.html:1053,Resume,Resume,1053,root/html534/TRecorderReplaying.html,https://root.cern,https://root.cern/root/html534/TRecorderReplaying.html,1,['Resume'],['Resume']
Usability,". TSAXParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TSAXParser. class TSAXParser: public TXMLParser. TSAXParser. TSAXParser is a subclass of TXMLParser, it is a wraper class to; libxml library. SAX (Simple API for XML) is an event based interface, which doesn't; maintain the DOM tree in memory, in other words, it's much more; efficient for large document. TSAXParserCallback contains a number of callback routines to the; parser in a xmlSAXHandler structure. The parser will then parse the; document and call the appropriate callback when certain conditions; occur. Function Members (Methods); public:. virtual~TSAXParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectToHandler(const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSAXParser.html:419,Simpl,Simple,419,root/html602/TSAXParser.html,https://root.cern,https://root.cern/root/html602/TSAXParser.html,2,['Simpl'],['Simple']
Usability,". TSAXParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TSAXParser. class TSAXParser: public TXMLParser. TSAXParser. TSAXParser is a subclass of TXMLParser, it is a wraper class to; libxml library. SAX (Simple API for XML) is an event based interface, which doesn't; maintain the DOM tree in memory, in other words, it's much more; efficient for large document. TSAXParserCallback contains a number of callback routines to the; parser in a xmlSAXHandler structure. The parser will then parse the; document and call the appropriate callback when certain conditions; occur. Function Members (Methods); public:. TSAXParser(); virtual~TSAXParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectToHandler(const char* handle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSAXParser.html:395,Simpl,Simple,395,root/html528/TSAXParser.html,https://root.cern,https://root.cern/root/html528/TSAXParser.html,4,['Simpl'],['Simple']
Usability,". TSVDUnfold. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TSVDUnfold. class TSVDUnfold: public TObject. TSVDUnfold. Data unfolding using Singular Value Decomposition (hep-ph/9509307); Authors: Kerstin Tackmann, Andreas Hoecker, Heiko Lacker. Function Members (Methods); public:. TSVDUnfold(const TSVDUnfold& other); TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); virtual~TSVDUnfold(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static Double_tComputeChiSquared(const TH1D& truspec, const TH1D& unfspec, const TH2D& covmat, Double_t regpar = 0.01); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSVDUnfold.html:852,Clear,Clear,852,root/html528/TSVDUnfold.html,https://root.cern,https://root.cern/root/html528/TSVDUnfold.html,1,['Clear'],['Clear']
Usability,". TSVG. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TSVG. class TSVG: public TVirtualPS. TSVG: Graphics interface to SVG; SVG; (Scalable Vector Graphics) is a language for describing two-dimensional; graphics in XML. SVG allows high quality vector graphics in; HTML pages. To print a ROOT canvas ""c1"" into an SVG file simply do:. c1->Print(""c1.svg"");. The result is the ASCII file c1.svg. It can be open direclty using a web browser or included in a html document; the following way:. <embed width=""95%"" height=""500"" src=""c1.svg"" />>. It is best viewed with Internet Explorer and you need the; Adobe SVG; Viewer. To zoom using the Adobe SVG Viewer, position the mouse over; the area you want to zoom and click the right button. To define the zoom area,; use Control+drag to mark the boundaries of the zoom area. To pan, use Alt+drag.; By clicking with the right mouse button on the SVG graphics you will get; a pop-up menu giving other ways to interact with the image. SVG files can be used directly in compressed mode to minimize the time; transfer over the network. Compressed SVG files should be created using; gzip on a normal ASCII SVG file and should then be renamed; using the file extension .svgz.; . Function Members (Methods); public:. virtual~TSVG(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSVG.html:537,simpl,simply,537,root/html602/TSVG.html,https://root.cern,https://root.cern/root/html602/TSVG.html,2,['simpl'],['simply']
Usability,". TSVG. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TSVG. class TSVG: public TVirtualPS. TSVG: Graphics interface to SVG; SVG; (Scalable Vector Graphics) is a language for describing two-dimensional; graphics in XML. SVG allows high quality vector graphics in; HTML pages. To print a ROOT canvas ""c1"" into an SVG file simply do:. c1->Print(""c1.svg"");. The result is the ASCII file c1.svg. It can be open direclty using a web browser or included in a html document; the following way:. <embed width=""95%"" height=""500"" src=""c1.svg"" />>. It is best viewed with Internet Explorer and you need the; Adobe SVG; Viewer. To zoom using the Adobe SVG Viewer, position the mouse over; the area you want to zoom and click the right button. To define the zoom area,; use Control+drag to mark the boundaries of the zoom area. To pan, use Alt+drag.; By clicking with the right mouse button on the SVG graphics you will get; a pop-up menu giving other ways to interact with the image. SVG files can be used directly in compressed mode to minimize the time; transfer over the network. Compressed SVG files should be created using; gzip on a normal ASCII SVG file and should then be renamed; using the file extension .svgz.; . Function Members (Methods); public:. TSVG(); TSVG(const char* filename, Int_t type = -113); virtual~TSVG(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSVG.html:513,simpl,simply,513,root/html528/TSVG.html,https://root.cern,https://root.cern/root/html528/TSVG.html,4,['simpl'],['simply']
Usability,". TSelectorDraw::TSelectorDraw ; (; const TSelectorDraw & ; ). private . ◆ TSelectorDraw() [2/2]. TSelectorDraw::TSelectorDraw ; (; ). Default selector constructor. ; Definition at line 47 of file TSelectorDraw.cxx. ◆ ~TSelectorDraw(). TSelectorDraw::~TSelectorDraw ; (; ). override . Selector destructor. ; Definition at line 86 of file TSelectorDraw.cxx. Member Function Documentation. ◆ Begin(). void TSelectorDraw::Begin ; (; TTree * ; tree). overridevirtual . Called every time a loop on the tree(s) starts. ; Reimplemented from TSelector.; Definition at line 105 of file TSelectorDraw.cxx. ◆ Class(). static TClass * TSelectorDraw::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSelectorDraw::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSelectorDraw::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 121 of file TSelectorDraw.h. ◆ ClearFormula(). void TSelectorDraw::ClearFormula ; (; ). protectedvirtual . Delete internal buffers. ; Definition at line 941 of file TSelectorDraw.cxx. ◆ CompileVariables(). bool TSelectorDraw::CompileVariables ; (; const char * ; varexp = """", . const char * ; selection = """" . ). protectedvirtual . Compile input variables and selection expression. ; varexp is an expression of the general form e1:e2:e3 where e1,etc is a formula referencing a combination of the columns; Example: varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); selection is an expression with a combination of the columns; Example: selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized; Return false if any of the variable is not compilable. ; Definition at line 976 of file TSelectorDraw.cxx. ◆ DeclFileName(). static const char * TSelectorDraw::DeclFileName ; (; ). inlinestat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:18201,Clear,ClearFormula,18201,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['Clear'],['ClearFormula']
Usability,". TSpider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TSpider. class TSpider: public TObject, public TAttFill, public TAttLine. Spider class; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as; many polar axes as selected data members. For each of them, it draws on the axis; the position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpider.html:897,simpl,simply,897,root/html602/TSpider.html,https://root.cern,https://root.cern/root/html602/TSpider.html,2,['simpl'],['simply']
Usability,". TSpider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TSpider. class TSpider: public TObject, public TAttFill, public TAttLine. Spider class; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as; many polar axes as selected data members. For each of them, it draws on the axis; the position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString select = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),select.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. TSpider(); TSpider(const TSpider&); TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSpider.html:873,simpl,simply,873,root/html530/TSpider.html,https://root.cern,https://root.cern/root/html530/TSpider.html,3,['simpl'],['simply']
Usability,". TStatsFeedback. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TStatsFeedback. class TStatsFeedback: public TObject, public TQObject. TStatsFeedback. Utility class to display PROOF stats feedback histos during queries. Function Members (Methods); public:. virtual~TStatsFeedback(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStatsFeedback.html:405,feedback,feedback,405,root/html602/TStatsFeedback.html,https://root.cern,https://root.cern/root/html602/TStatsFeedback.html,2,['feedback'],['feedback']
Usability,". TStatsFeedback. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TStatsFeedback. class TStatsFeedback: public TObject, public TQObject. TStatsFeedback. Utility class to display PROOF stats feedback histos during queries. Function Members (Methods); public:. TStatsFeedback(TProof* proof = 0); virtual~TStatsFeedback(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStatsFeedback.html:381,feedback,feedback,381,root/html534/TStatsFeedback.html,https://root.cern,https://root.cern/root/html534/TStatsFeedback.html,1,['feedback'],['feedback']
Usability,". TStructNodeProperty* FindNodeProperty(TStructNode* node); Returns pointer to property associated with node ""node"". If property is not found; then it returns default property. TCanvas* GetCanvas(); Returns canvas used to keep TGeoVolumes. Int_t GetColor(TStructNode* node); Returns color form fColors for given ""node"". TStructNodeProperty* GetDefaultColor(); Return default color for nodes. Bool_t GetLinksVisibility() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStructViewerGUI.html:27566,Undo,Undo,27566,root/html530/TStructViewerGUI.html,https://root.cern,https://root.cern/root/html530/TStructViewerGUI.html,5,['Undo'],['Undo']
Usability,". TSynapse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TSynapse. class TSynapse: public TObject. TSynapse. This is a simple weighted bidirectionnal connection between; two neurons.; A network is built connecting two neurons by a synapse.; In addition to the value, the synapse can return the DeDw. Function Members (Methods); public:. virtual~TSynapse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSynapse.html:328,simpl,simple,328,root/html602/TSynapse.html,https://root.cern,https://root.cern/root/html602/TSynapse.html,2,['simpl'],['simple']
Usability,". TSynapse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TSynapse. class TSynapse: public TObject. TSynapse. This is a simple weighted bidirectionnal connection between; two neurons.; A network is built connecting two neurons by a synapse.; In addition to the value, the synapse can return the DeDw. Function Members (Methods); public:. TSynapse(); TSynapse(const TSynapse&); TSynapse(TNeuron*, TNeuron*, Double_t w = 1); virtual~TSynapse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSynapse.html:304,simpl,simple,304,root/html528/TSynapse.html,https://root.cern,https://root.cern/root/html528/TSynapse.html,4,['simpl'],['simple']
Usability,". TSystem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSystem. class TSystem: public TNamed. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~TSystem(); virtual voidAbort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intAcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode = kFileExists); virtual voidAddDynamicPath(const char* pathname); virtual voidAddFileHandler(TFileHandler* fh); virtual voidAddIncludePath(const char* includePath); virtual voidAddLinkedLibs(const char* linkedLib); virtual voidAddSignalHandler(TSignalHandler* sh); virtual voidAddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* t); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUdpService(int port, int backlog); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*BaseName(const char* pathname); voidBeep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tcd(const char* path); virtual Bool_tChangeDirectory(const char* path); virtual intChmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:667,simpl,simple,667,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,1,['simpl'],['simple']
Usability,". TSystem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSystem. class TSystem: public TNamed. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); virtual~TSystem(); virtual voidAbort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intAcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode = kFileExists); virtual voidAddDynamicPath(const char* pathname); virtual voidAddFileHandler(TFileHandler* fh); virtual voidAddIncludePath(const char* includePath); virtual voidAddLinkedLibs(const char* linkedLib); virtual voidAddSignalHandler(TSignalHandler* sh); virtual voidAddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* t); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUdpService(int port, int backlog); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*BaseName(const char* pathname); voidBeep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tcd(const char* path); virtual Bool_tChangeDirectory(const char* path); virtual intChmod(const char* file, UInt_t mode); static TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSystem.html:643,simpl,simple,643,root/html532/TSystem.html,https://root.cern,https://root.cern/root/html532/TSystem.html,2,['simpl'],['simple']
Usability,". TSystem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSystem. class TSystem: public TNamed. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); virtual~TSystem(); virtual voidAbort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intAcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode = kFileExists); virtual voidAddDynamicPath(const char* pathname); virtual voidAddFileHandler(TFileHandler* fh); virtual voidAddIncludePath(const char* includePath); virtual voidAddLinkedLibs(const char* linkedLib); virtual voidAddSignalHandler(TSignalHandler* sh); virtual voidAddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* t); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*BaseName(const char* pathname); voidBeep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tcd(const char* path); virtual Bool_tChangeDirectory(const char* path); virtual intChmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:643,simpl,simple,643,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,2,['simpl'],['simple']
Usability,". TSystem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSystem. class TSystem: public TNamed. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~TSystem(); virtual voidAbort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intAcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode = kFileExists); virtual voidAddDynamicPath(const char* pathname); virtual voidAddFileHandler(TFileHandler* fh); virtual voidAddIncludePath(const char* includePath); virtual voidAddLinkedLibs(const char* linkedLib); virtual voidAddSignalHandler(TSignalHandler* sh); virtual voidAddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* t); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUdpService(int port, int backlog); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*BaseName(const char* pathname); voidBeep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tcd(const char* path); virtual Bool_tChangeDirectory(const char* path); virtual intChmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidCleanC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSystem.html:643,simpl,simple,643,root/html604/TSystem.html,https://root.cern,https://root.cern/root/html604/TSystem.html,1,['simpl'],['simple']
Usability,". TTeXDump. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TTeXDump. class TTeXDump: public TVirtualPS. TTeXDump: Graphics interface to TeX; This class allow to generate PGF/TikZ vector graphics output; which can be included in TeX and LaTeX documents. PGF is a TeX macro package for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTeXDump.html:670,user-friendly,user-friendly,670,root/html602/TTeXDump.html,https://root.cern,https://root.cern/root/html602/TTeXDump.html,2,"['simpl', 'user-friendly']","['simple', 'user-friendly']"
Usability,". TTeXDump. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TTeXDump. class TTeXDump: public TVirtualPS. TTeXDump: Graphics interface to TeX; This class allow to generate PGF/TikZ vector graphics output; which can be included in TeX and LaTeX documents. PGF is a TeX macro package for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. TTeXDump(); TTeXDump(const char* filename, Int_t type = -113); virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTeXDump.html:646,user-friendly,user-friendly,646,root/html534/TTeXDump.html,https://root.cern,https://root.cern/root/html534/TTeXDump.html,2,"['simpl', 'user-friendly']","['simple', 'user-friendly']"
Usability,". TTeXDump. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TTeXDump. class TTeXDump: public TVirtualPS. TTeXDump: Graphics interface to TeX; This class allow to generate PGF/TikZ vector graphics output; which can be included in TeX and LaTeX documents. PGF is a TeX macro package for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTeXDump.html:646,user-friendly,user-friendly,646,root/html604/TTeXDump.html,https://root.cern,https://root.cern/root/html604/TTeXDump.html,2,"['simpl', 'user-friendly']","['simple', 'user-friendly']"
Usability,". TTimeStamp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TTimeStamp. class TTimeStamp. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. Function Members (Methods); public:. virtual~TTimeStamp(); voidAdd(const TTimeStamp& offset); Double_tAsDouble() const; Double_tAsGAST(Double_t UT1Offset = 0) const; Double_tAsGMST(Double_t UT1Offset = 0) const; Double_tAsJulianDate() const; Double_tAsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Double_tAsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; const char*AsString(const Option_t* option = """") const; static TClass*Class(); voidCopy(TTimeStamp& ts) const; static voidDumpTMStruct(const tm_t& tmstruct); UInt_tGetDate(Bool_t inUTC = kTRUE, Int_t secOffset = 0, UInt_t* year = 0, UInt_t* month = 0, UInt_t* day = 0) const; Int_tGetDayOfWeek(Bool_t inUTC = kTRUE, Int_t secOffset = 0) const; static Int_tGetDayOfWeek(Int_t day, Int_t month, Int_t year); Int_tGetDayOfYear(Bool_t inUTC = kTRUE, Int_t secOffset = 0) const; static Int_tGetDayOfYear(Int_t day, Int_t month, Int_t year); Int_tGetMonth(Bool_t in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTimeStamp.html:752,simpl,simply,752,root/html604/TTimeStamp.html,https://root.cern,https://root.cern/root/html604/TTimeStamp.html,1,['simpl'],['simply']
Usability,". TTimeStamp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TTimeStamp. class TTimeStamp. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. Function Members (Methods); public:. virtual~TTimeStamp(); voidAdd(const TTimeStamp& offset); Double_tAsDouble() const; Double_tAsJulianDate() const; const char*AsString(const Option_t* option = """") const; static TClass*Class(); voidCopy(TTimeStamp& ts) const; static voidDumpTMStruct(const tm_t& tmstruct); UInt_tGetDate(Bool_t inUTC = kTRUE, Int_t secOffset = 0, UInt_t* year = 0, UInt_t* month = 0, UInt_t* day = 0) const; Int_tGetDayOfWeek(Bool_t inUTC = kTRUE, Int_t secOffset = 0) const; static Int_tGetDayOfWeek(Int_t day, Int_t month, Int_t year); Int_tGetDayOfYear(Bool_t inUTC = kTRUE, Int_t secOffset = 0) const; static Int_tGetDayOfYear(Int_t day, Int_t month, Int_t year); Int_tGetMonth(Bool_t inUTC = kTRUE, Int_t secOffset = 0) const; Int_tGetNanoSec() const; time_tGetSec() const; UInt_tGetTime(Bool_t inUTC = kTRUE, Int_t secOffset = 0, UInt_t* hour = 0, UInt_t* min = 0, UInt_t* sec = 0) const; timespec_tGetTimeSpe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTimeStamp.html:752,simpl,simply,752,root/html602/TTimeStamp.html,https://root.cern,https://root.cern/root/html602/TTimeStamp.html,1,['simpl'],['simply']
Usability,". TTimeStamp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TTimeStamp. class TTimeStamp. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. Function Members (Methods); public:. TTimeStamp(); TTimeStamp(const timespec_t& ts); TTimeStamp(const TTimeStamp&); TTimeStamp(time_t t, Int_t nsec); TTimeStamp(UInt_t tloc, Bool_t isUTC = kTRUE, Int_t secOffset = 0, Bool_t dosDate = kFALSE); TTimeStamp(UInt_t date, UInt_t time, UInt_t nsec, Bool_t isUTC = kTRUE, Int_t secOffset = 0); TTimeStamp(UInt_t year, UInt_t month, UInt_t day, UInt_t hour, UInt_t min, UInt_t sec, UInt_t nsec = 0, Bool_t isUTC = kTRUE, Int_t secOffset = 0); virtual~TTimeStamp(); voidAdd(const TTimeStamp& offset); Double_tAsDouble() const; Double_tAsGAST(Double_t UT1Offset = 0) const; Double_tAsGMST(Double_t UT1Offset = 0) const; Double_tAsJulianDate() const; Double_tAsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Double_tAsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; const char*AsString(Option_t* option = """") const; static TClass*Class(); voidCopy(TTimeStamp& ts) const; static voidDumpTMStruct(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTimeStamp.html:728,simpl,simply,728,root/html534/TTimeStamp.html,https://root.cern,https://root.cern/root/html534/TTimeStamp.html,1,['simpl'],['simply']
Usability,". TTimeStamp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TTimeStamp. class TTimeStamp. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. Function Members (Methods); public:. TTimeStamp(); TTimeStamp(const timespec_t& ts); TTimeStamp(const TTimeStamp&); TTimeStamp(time_t t, Int_t nsec); TTimeStamp(UInt_t tloc, Bool_t isUTC = kTRUE, Int_t secOffset = 0, Bool_t dosDate = kFALSE); TTimeStamp(UInt_t date, UInt_t time, UInt_t nsec, Bool_t isUTC = kTRUE, Int_t secOffset = 0); TTimeStamp(UInt_t year, UInt_t month, UInt_t day, UInt_t hour, UInt_t min, UInt_t sec, UInt_t nsec = 0, Bool_t isUTC = kTRUE, Int_t secOffset = 0); virtual~TTimeStamp(); voidAdd(const TTimeStamp& offset); Double_tAsDouble() const; Double_tAsJulianDate() const; const char*AsString(Option_t* option = """") const; static TClass*Class(); voidCopy(TTimeStamp& ts) const; static voidDumpTMStruct(const tm_t& tmstruct); UInt_tGetDate(Bool_t inUTC = kTRUE, Int_t secOffset = 0, UInt_t* year = 0, UInt_t* month = 0, UInt_t* day = 0) const; Int_tGetDayOfWeek(Bool_t inUTC = kTRUE, Int_t secOffset = 0) const; static Int_tGetDayOfW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTimeStamp.html:728,simpl,simply,728,root/html528/TTimeStamp.html,https://root.cern,https://root.cern/root/html528/TTimeStamp.html,3,['simpl'],['simply']
Usability,". TTree and Its Data | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials TTree and Its Data. TTree; A TTree is a large, structured chunk of data on disk. The trick is tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/ttree-and-its-data.html:136,Guid,Guides,136,d/ttree-and-its-data.html,https://root.cern,https://root.cern/d/ttree-and-its-data.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". TTreeCache. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TTreeCache. class TTreeCache: public TFileCacheRead. TTreeCache. A specialized TFileCacheRead object for a TTree; This class acts as a file cache, registering automatically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:549,learn,learning,549,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,2,['learn'],['learning']
Usability,". TTreeCache. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TTreeCache. class TTreeCache: public TFileCacheRead. TTreeCache. A specialized TFileCacheRead object for a TTree; This class acts as a file cache, registering automatically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - TTree automatically creates a cache. This feature can be; controlled with an env. variable or the TTreeCache.Size option.; - TTree::SetCacheSize is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the '",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:549,learn,learning,549,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,2,['learn'],['learning']
Usability,". TTreeCache. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TTreeCache. class TTreeCache: public TFileCacheRead. TTreeCache. A specialized TFileCacheRead object for a TTree; This class acts as a file cache, registering automatically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:525,learn,learning,525,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,2,['learn'],['learning']
Usability,". TTreeCache. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TTreeCache. class TTreeCache: public TFileCacheRead. TTreeCache. A specialized TFileCacheRead object for a TTree; This class acts as a file cache, registering automatically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:525,learn,learning,525,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,6,['learn'],['learning']
Usability,". TTreeReader. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » TTreeReader. class TTreeReader: public TObject. TTreeReader is a simple, robust and fast interface to read values from a TTree,; TChain or TNtuple. It uses TTreeReaderValue<T> and; TTreeReaderArray<T> to access the data. Example code can be found in; tutorials/tree/hsimpleReader.C and tutorials/trees/h1analysisTreeReader.h and; tutorials/trees/h1analysisTreeReader.C for a TSelector.; Roottest contains an; example; showing the full power.; A simpler analysis example - the one from the tutorials - can be found below:; it histograms a function of the px and py branches.;  ; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C);  ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h"";  ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F *myHist = new TH1F(""h1"", ""ntuple"", 100, -4, 4);;  ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");;  ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);;  ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");;  ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; };  ; myHist->Draw();; }. A more complete example including error handling and a few combinations of; TTreeReaderValue and TTreeReaderArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeReader.html:341,simpl,simple,341,root/html602/TTreeReader.html,https://root.cern,https://root.cern/root/html602/TTreeReader.html,6,['simpl'],"['simple', 'simpler']"
Usability,". TUUID. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TUUID. class TUUID. TUUID. This class defines a UUID (Universally Unique IDentifier), also; known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits; long, and if generated according to this algorithm, is either; guaranteed to be different from all other UUIDs/GUIDs generated; until 3400 A.D. or extremely likely to be different. UUIDs were; originally used in the Network Computing System (NCS) and; later in the Open Software Foundation's (OSF) Distributed Computing; Environment (DCE). Structure of universal unique IDs (UUIDs). Depending on the network data representation, the multi-; octet unsigned integer fields are subject to byte swapping; when communicated between dissimilar endian machines. | low 32 bits of time | 0-3 .fTimeLow; +-------------------------------+----; | mid 16 bits of time | 4-5 .fTimeMid; +; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion. |Res | clkSeqHi | 8 .fClockSeqHiAndReserved. | clkSeqLow | 9 .fClockSeqLow; +; | node ID | 10-15 .fNode. The adjusted time stamp is split into three fields, and the; clockSeq is split into two fields. The timestamp is a 60-bit value. For UUID version 1, this; is represented by Coordinated Universal Time (UTC/GMT) as; a count of 100-nanosecond intervals since 00:00:00.00,; 15 October 1582 (the date of Gregorian reform to the; Christian calendar). The version number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; MSB <---; Version 4-Bit Code Description. | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value. Clock Sequence. The clock sequence value must be changed whenever:. The UU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUUID.html:365,GUID,GUIDs,365,root/html602/TUUID.html,https://root.cern,https://root.cern/root/html602/TUUID.html,4,['GUID'],['GUIDs']
Usability,". TUUID. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TUUID. class TUUID. TUUID. This class defines a UUID (Universally Unique IDentifier), also; known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits; long, and if generated according to this algorithm, is either; guaranteed to be different from all other UUIDs/GUIDs generated; until 3400 A.D. or extremely likely to be different. UUIDs were; originally used in the Network Computing System (NCS) and; later in the Open Software Foundation's (OSF) Distributed Computing; Environment (DCE). Structure of universal unique IDs (UUIDs). Depending on the network data representation, the multi-; octet unsigned integer fields are subject to byte swapping; when communicated between dissimilar endian machines. | low 32 bits of time | 0-3 .fTimeLow; +-------------------------------+----; | mid 16 bits of time | 4-5 .fTimeMid; +; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion. |Res | clkSeqHi | 8 .fClockSeqHiAndReserved. | clkSeqLow | 9 .fClockSeqLow; +; | node ID | 10-15 .fNode. The adjusted time stamp is split into three fields, and the; clockSeq is split into two fields. The timestamp is a 60-bit value. For UUID version 1, this; is represented by Coordinated Universal Time (UTC/GMT) as; a count of 100-nanosecond intervals since 00:00:00.00,; 15 October 1582 (the date of Gregorian reform to the; Christian calendar). The version number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; MSB <---; Version 4-Bit Code Description. | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value. Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUUID.html:341,GUID,GUIDs,341,root/html528/TUUID.html,https://root.cern,https://root.cern/root/html528/TUUID.html,8,['GUID'],['GUIDs']
Usability,". TView3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » G3D; » TView3D. class TView3D: public TView. The 3D view class; This package was originally written by Evgueni Tcherniaev from IHEP/Protvino. The original Fortran implementation was adapted to HIGZ/PAW by Olivier Couet and; Evgueni Tcherniaev. This View class is a subset of the original system. It has been converted to a; C++ class by Rene Brun. TView3D creates a 3-D view in the current pad. In this 3D view Lego and Surface; plots can be drawn and also 3D polyline and markers. Most of the time a TView3D; is created automatically when a 3D object needs to be painted in a pad (for; instance a Lego or a Surface plot). In some case a TView3D should be explicitly. For instance to paint a 3D simple; scene composed of simple objects like polylines and polymarkers.; The following macro gives an example:. Picture; Source. {; cV3D = new TCanvas(""cV3D"",""PolyLine3D & PolyMarker3D Window"",200,10,500,500);. // Creating a view; TView3D *view = (TView3D*) TView::CreateView(1);; view->SetRange(5,5,5,25,25,25);. // Create a first PolyLine3D; TPolyLine3D *pl3d1 = new TPolyLine3D(5);; pl3d1->SetPoint(0, 10, 10, 10);; pl3d1->SetPoint(1, 15, 15, 10);; pl3d1->SetPoint(2, 20, 15, 15);; pl3d1->SetPoint(3, 20, 20, 20);; pl3d1->SetPoint(4, 10, 10, 20);. // Create a first PolyMarker3D; TPolyMarker3D *pm3d1 = new TPolyMarker3D(12);; pm3d1->SetPoint(0, 10, 10, 10);; pm3d1->SetPoint(1, 11, 15, 11);; pm3d1->SetPoint(2, 12, 15, 9);; pm3d1->SetPoint(3, 13, 17, 20);; pm3d1->SetPoint(4, 14, 16, 15);; pm3d1->SetPoint(5, 15, 20, 15);; pm3d1->SetPoint(6, 16, 18, 10);; pm3d1->SetPoint(7, 17, 15, 10);; pm3d1->SetPoint(8, 18, 22, 15);; pm3d1->SetPoint(9, 19, 28, 25);; pm3d1->SetPoint(10, 20, 12, 15);; pm3d1->SetPoint(11, 21, 12, 15);; pm3d1->SetMarkerSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TView3D.html:955,simpl,simple,955,root/html602/TView3D.html,https://root.cern,https://root.cern/root/html602/TView3D.html,4,['simpl'],['simple']
Usability,". TView3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » G3D; » TView3D. class TView3D: public TView. The 3D view class; This package was originally written by Evgueni Tcherniaev from IHEP/Protvino. The original Fortran implementation was adapted to HIGZ/PAW by Olivier Couet and; Evgueni Tcherniaev. This View class is a subset of the original system. It has been converted to a; C++ class by Rene Brun. TView3D creates a 3-D view in the current pad. In this 3D view Lego and Surface; plots can be drawn and also 3D polyline and markers. Most of the time a TView3D; is created automatically when a 3D object needs to be painted in a pad (for; instance a Lego or a Surface plot). In some case a TView3D should be explicitly. For instance to paint a 3D simple; scene composed of simple objects like polylines and polymarkers.; The following macro gives an example:. Several coordinate systems are available:. Cartesian; Polar; Cylindrical; Spherical; PseudoRapidity/Phi. . Function Members (Methods); public:. TView3D(); TView3D(Int_t system, const Double_t* rmin, const Double_t* rmax); virtual~TView3D(); voidTObject::AbstractMethod(const char* method) const; static voidAdjustPad(TVirtualPad* pad = 0); virtual voidAdjustScales(TVirtualPad* pad = 0)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAxisVertex(Double_t ang, Double_t* av, Int_t& ix1, Int_t& ix2, Int_t& iy1, Int_t& iy2, Int_t& iz1, Int_t& iz2); virtual voidTObject::Browse(TBrowser* b); virtual voidCentered()MENU ; virtual voidCentered3DImages(TVirtualPad* pad = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TView3D.html:931,simpl,simple,931,root/html528/TView3D.html,https://root.cern,https://root.cern/root/html528/TView3D.html,8,['simpl'],['simple']
Usability,". TXMLFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TXMLFile. class TXMLFile: public TFile, public TXMLSetup. The main motivation for the XML format is to facilitate the; communication with other non ROOT applications. Currently; writing and reading XML files is limited to ROOT applications.; It is our intention to develop a simple reader independent; of the ROOT libraries that could be used as an example for; real applications. One of possible approach with code generation; is implemented in TXMLPlayer class. The XML format should be used only for small data volumes,; typically histogram files, pictures, geometries, calibrations.; The XML file is built in memory before being dumped to disk. Like for normal ROOT files, XML files use the same I/O mechanism; exploiting the ROOT/CINT dictionary. Any class having a dictionary; can be saved in XML format. This first implementation does not support subdirectories; or Trees. The shared library libRXML.so may be loaded dynamically; via gSystem->Load(""libRXML""). This library is automatically; loaded by the plugin manager as soon as a XML file is created; via, eg; TFile::Open(""file.xml"",""recreate"");; TFile::Open returns a TXMLFile object. When a XML file is open in write mode,; one can use the normal TObject::Write to write an object in the file.; Alternatively one can use the new functions TDirectoryFile::WriteObject and; TDirectoryFile::WriteObjectAny to write a TObject* or any class not deriving; from TObject. example of a session saving a histogram to a XML file. TFile *f = TFile::Open(""Example.xml"",""recreate"");; TH1F *h = new TH1F(""h"",""test"",1000,-2,2);; h->FillRandom(""gaus"");; h->Write();; delete f;. example of a session reading the histogram from the file. TFile *f = TFile::Open(""Example.xml"");; TH1F *h = (TH1F*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLFile.html:539,simpl,simple,539,root/html602/TXMLFile.html,https://root.cern,https://root.cern/root/html602/TXMLFile.html,2,['simpl'],['simple']
Usability,". TXMLFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TXMLFile. class TXMLFile: public TFile, public TXMLSetup. The main motivation for the XML format is to facilitate the; communication with other non ROOT applications. Currently; writing and reading XML files is limited to ROOT applications.; It is our intention to develop a simple reader independent; of the ROOT libraries that could be used as an example for; real applications. One of possible approach with code generation; is implemented in TXMLPlayer class. The XML format should be used only for small data volumes,; typically histogram files, pictures, geometries, calibrations.; The XML file is built in memory before being dumped to disk. Like for normal ROOT files, XML files use the same I/O mechanism; exploiting the ROOT/CINT dictionary. Any class having a dictionary; can be saved in XML format. This first implementation does not support subdirectories; or Trees. The shared library libRXML.so may be loaded dynamically; via gSystem->Load(""libRXML""). This library is automatically; loaded by the plugin manager as soon as a XML file is created; via, eg; TFile::Open(""file.xml"",""recreate"");; TFile::Open returns a TXMLFile object. When a XML file is open in write mode,; one can use the normal TObject::Write to write an object in the file.; Alternatively one can use the new functions TDirectoryFile::WriteObject and; TDirectoryFile::WriteObjectAny to write a TObject* or any class not deriving; from TObject. example of a session saving a histogram to a XML file. TFile *f = TFile::Open(""Example.xml"",""recreate"");; TH1F *h = new TH1F(""h"",""test"",1000,-2,2);; h->FillRandom(""gaus"");; h->Write();; delete f;. example of a session reading the histogram from the file. TFile *f = TFile::Open(""Example.xml"");; TH1F *h = (TH1F*)f->Get(""h"");; h->Draw()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLFile.html:515,simpl,simple,515,root/html528/TXMLFile.html,https://root.cern,https://root.cern/root/html528/TXMLFile.html,4,['simpl'],['simple']
Usability,". Taligent's Guide to Designing Programs - Name conventions. Name conventions; Select C++ identifiers (including types, functions, and classes) carefully. When a programmer sees a name, it might be out of context; choose names to enhance readability and comprehension. A name that seems cute or easy to type can cause trouble to someone trying to decipher code. Remember, code is read many more times than it is written; err on the side of long, readable names. Internal code names should not appear anywhere in the interfaces to the system. Even inside your implementation, it's better to use the prosaic form if there is one.; To make the scope of names explicit, Taligent uses the following conventions. Name conventions. Identifier. Convention. Example. Types. Begin with a capital letter. Boolean. Base classes. Begin with T. TContainerView. Mixin classes. Begin with M; ; see ""Multiple inheritance"" on page 44. MPrintable. Enumeration types. Begin with E. EFreezeLevel. Raw C types. Avoid using C types; see ""Avoid raw C types with dimensions"" on page 66. Virtual base classes. Begin with V, rather than T or M. VBaseClass. Members. Begin with f for field1; ; functions begin with a capital letter. fViewList, DrawSelf(). Static variables. Begin with g; applies to static variables in functions and global variables (excluding static data members of a class). gDeviceList. Static data members. Begin with fg; includes class globals. TView::fgTokenClient. Locals and parameters. Begin with a word whose initial letter is lowercase; local automatic variables only, treat statics like globals. seed, port, ; theCurrentArea. Constants. Begin with k; including names of enumeration constants and constant statics. kMenuCommand. Acronyms. All uppercase. TNBPName, not TNbpName. Template arguments. Begin with A. AType. Getters and setters. Begin with Set..., Get..., or Is... (Boolean); use sparingly (see ""Structification"" on page 50). SetLast(), GetNext(), IsDone(). Allocator and adopters. Begin wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_63.html:13,Guid,Guide,13,TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_63.html,https://root.cern,https://root.cern/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_63.html,1,['Guid'],['Guide']
Usability,". Team | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Team. . Axel Naumann ; ; Starting off as a physicist, Axel studied physics and math in Muenster, Germany. In 2000, he got a Ph.D. position for high energy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/team.html:122,Guid,Guides,122,d/team.html,https://root.cern,https://root.cern/d/team.html,3,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". The End | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials The End. You are done - that was the introductory tutorial!. Image by Tangopaso; If you want to go on, have ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/end.html:125,Guid,Guides,125,d/end.html,https://root.cern,https://root.cern/d/end.html,3,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". The first one is for defining the placement of a volume with respect to its container reference frame. This frame will be called 'master' and the frame of the positioned volume - 'local'. If T is a transformation used for positioning volume daughters, then:; MASTER = T * LOCAL; Therefore a local-to-master conversion will be performed by using T, while a master-to-local by using its inverse. The second use case is the computation of the global transformation of a given object in the geometry. Since the geometry is built as 'volumes-inside-volumes', this global transformation represent the pile-up of all local transformations in the corresponding branch. The conversion from the global reference frame and the given object is also called master-to-local, but it is handled by the manager class. A general homogenous transformation is defined as a 4x4 matrix embedding a rotation, a translation and a scale. The advantage of this description is that each basic transformation can be represented as a homogenous matrix, composition being performed as simple matrix multiplication.; Rotation: Inverse rotation:; r11 r12 r13 0 r11 r21 r31 0; r21 r22 r23 0 r12 r22 r32 0; r31 r32 r33 0 r13 r23 r33 0; 0 0 0 1 0 0 0 1; Translation: Inverse translation:; 1 0 0 tx 1 0 0 -tx; 0 1 0 ty 0 1 0 -ty; 0 0 1 tz 0 0 1 -tz; 0 0 0 1 0 0 0 1; Scale: Inverse scale:; sx 0 0 0 1/sx 0 0 0; 0 sy 0 0 0 1/sy 0 0; 0 0 sz 0 0 0 1/sz 0; 0 0 0 1 0 0 0 1; where:; rij are the 3x3 rotation matrix components,; tx, ty, tz are the translation components; sx, sy, sz are arbitrary scale constants on each axis,. The disadvantage in using this approach is that computation for 4x4 matrices is expensive. Even combining two translation would become a multiplication of their corresponding matrices, which is quite an undesired effect. On the other hand, it is not a good idea to store a translation as a block of 16 numbers. We have therefore chosen to implement each basic transformation type as a class deriving from the sam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMatrix.html:1748,simpl,simple,1748,doc/master/classTGeoMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoMatrix.html,1,['simpl'],['simple']
Usability,". The meaningful combinations (denoted by x) are given in the next table. Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); This function controls the display mode group and display mode of the histogram drawing. To illustrate the possible effects of the various display modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight; displayMode = kDisplayModeSurface. Simple modes group, display mode = points, 256 x 256 channels. . Simple modes group, display mode = grid, 64 x 64 channels. . Simple modes group, display mode = contours, 64 x 64 channels. . Simple modes group, display mode = bars, 64 x 64 channels. . Simple modes group, display mode = linesX, 64 x 64 channels. . Simple modes group, display mode = linesY, 64 x 64 channels. . Simple modes group, display mode = barsX, 64 x 64 channels. . Simple modes group, display mode = barsY, 64 x 64 channels. . Simple modes group, display mode = needles, 64 x 64 channels. . Simple modes group, display mode = triangles, 64 x 64 channels. . Light modes group, display mode = points, 256 x 256 channels. . Light modes group, display mode = grid, 256 x 256 channels. . Light modes group, display mode = surface, 64 x 64 channels. . Light modes group, display mode = triangles, 64 x 64 channels. . Height modes group, display mode = points, 256 x 256 channels. . Height modes group, display mode = grid, 256 x 256 channels. . Height modes group, display mode = contours, 64 x 64 channels. . Height modes group, display mode = bars, 64 x 64 channels. . Height modes group, display mode = surface, 64 x 64 channels. . Height modes group, display mode = triangles, 64 x 64 channels. . Light - height modes group, display mode = surface, 64 x 64 channels. The w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:33195,Simpl,Simple,33195,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,". This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveContextMenu(). TEveContextMenu::TEveContextMenu ; (; const char * ; name, . const char * ; title = ""Eve context menu"" . ). Constructor. ; Definition at line 1478 of file TEveWindow.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveContextMenu::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveContextMenu::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveContextMenu::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 437 of file TEveWindow.h. ◆ DeclFileName(). static const char * TEveContextMenu::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 437 of file TEveWindow.h. ◆ IsA(). TClass * TEveContextMenu::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TContextMenu.; Definition at line 437 of file TEveWindow.h. ◆ SetupAndPopup(). void TEveContextMenu::SetupAndPopup ; (; TGWindow * ; button, . TObject * ; obj . ). Position the popup below given button and show context menu for object obj. ; Definition at line 1486 of file TEveWindow.cxx. ◆ Streamer(). void TEveContextMenu::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TContextMenu. ◆ StreamerNVirtual(). void TEveContextMenu::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 437 of file TEveWindow.h. Libraries for TEveContextMenu:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindow.h; graf3d/eve/src/TEveWindow.cxx. TEveContextMenu. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveContextMenu.html:16494,Guid,Guide,16494,doc/master/classTEveContextMenu.html,https://root.cern,https://root.cern/doc/master/classTEveContextMenu.html,1,['Guid'],['Guide']
Usability,". This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHtmlLayoutContext(). TGHtmlLayoutContext::TGHtmlLayoutContext ; (; ). Html Layout Context constructor. ; Definition at line 38 of file TGHtmlLayout.cxx. Member Function Documentation. ◆ ClearMarginStack(). void TGHtmlLayoutContext::ClearMarginStack ; (; SHtmlMargin_t ** ; ppMargin). protected . Clear a margin stack to reclaim memory. ; This routine just blindly pops everything off the stack. Typically used when the screen is cleared or the widget is deleted, etc. ; Definition at line 165 of file TGHtmlLayout.cxx. ◆ ClearObstacle(). void TGHtmlLayoutContext::ClearObstacle ; (; int ; mode). protected . Clear a wrap-around obstacle. ; The second option determines the precise behavior.; CLEAR_Left Clear all obstacles on the left.; CLEAR_Right Clear all obstacles on the right.; CLEAR_Both Clear all obstacles on both sides.; CLEAR_First Clear only the first obstacle on either side. ; Definition at line 733 of file TGHtmlLayout.cxx. ◆ ComputeMargins(). void TGHtmlLayoutContext::ComputeMargins ; (; int * ; pX, . int * ; pY, . int * ; pW . ). protected . Compute the current margins for layout. ; Three values are returned:; *pY The top edge of the area in which we can put ink. This takes into account any requested headroom.; *pX The left edge of the inkable area. The takes into account any margin requests active at vertical position specified in pLC->bottom.; *pW The width of the inkable area. This takes into account an margin requests that are active at the vertical position pLC->bottom. ; Definition at line 696 of file TGHtmlLayout.cxx. ◆ DoBreakMarkup(). TGHtmlElement * TGHtmlLayoutContext::DoBreakMarkup ; (; TGHtmlElement * ; p). protected . Break markup is any kind of markup that might force a line-break. ; This routine handles a single element of break markup and returns a pointer to the first element past that markup. If p doesn't",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:13068,Clear,Clear,13068,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['Clear'],['Clear']
Usability,. Track. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TEST; » Track. class Track: public TObject. Event and Track classes. The Event class is a naive/simple example of an event structure.; public:; char fType[20];; char *fEventName; //run+event number in character format; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Double32_t fTemperature;; Int_t fMeasures[10];; Double32_t fMatrix[4][4];; Double32_t *fClosestDistance; //[fNvertex] indexed array!; EventHeader fEvtHdr;; TClonesArray *fTracks;; TRefArray *fHighPt; //array of High Pt tracks only; TRefArray *fMuons; //array of Muon tracks only; TRef fLastTrack; //pointer to last track; TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; TH1F *fH;; TBits fTriggerBits; //Bits triggered by this event. The EventHeader class has 3 data members (integers):; public:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;. The Event data member fTracks is a pointer to a TClonesArray.; It is an array of a variable number of tracks per event.; Each element of the array is an object of class Track with the members:; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits of this track; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of th,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Track.html:320,simpl,simple,320,root/html528/Track.html,https://root.cern,https://root.cern/root/html528/Track.html,1,['simpl'],['simple']
Usability,". TutorialSelector.C | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop TutorialSelector.C. // This class is derived from the ROOT class TSelector to demonstrate; // the use of PROOF with the R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorialselectorc.html:136,Guid,Guides,136,d/tutorialselectorc.html,https://root.cern,https://root.cern/d/tutorialselectorc.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". Tutorials | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Tutorials. ROOT offers a rich set of code examples that allow you to see ROOT's building blocks ""in action"", as part of more complex programs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorials.html:127,Guid,Guides,127,d/tutorials.html,https://root.cern,https://root.cern/d/tutorials.html,3,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". UserGroup_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » UserGroup_t. class UserGroup_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~UserGroup_t(); UserGroup_t&operator=(UserGroup_t&&); UserGroup_t&operator=(const UserGroup_t&); UserGroup_t(); UserGroup_t(UserGroup_t&&); UserGroup_t(const UserGroup_t&). Data Members; public:. Int_tfGidgroup id; TStringfGroupgroup name; TStringfPasswdpassword; TStringfRealNameuser full name; TStringfShelluser preferred shell; Int_tfUiduser id; TStringfUseruser name. Class Charts. Inheritance Chart:. UserGroup_t. Function documentation; UserGroup_t(); { }. TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/UserGroup_t.html:664,simpl,simple,664,root/html602/UserGroup_t.html,https://root.cern,https://root.cern/root/html602/UserGroup_t.html,1,['simpl'],['simple']
Usability,". UserGroup_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » UserGroup_t. class UserGroup_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~UserGroup_t(); UserGroup_t&operator=(UserGroup_t&&); UserGroup_t&operator=(const UserGroup_t&); UserGroup_t(); UserGroup_t(UserGroup_t&&); UserGroup_t(const UserGroup_t&). Data Members; public:. Int_tfGidgroup id; TStringfGroupgroup name; TStringfPasswdpassword; TStringfRealNameuser full name; TStringfShelluser preferred shell; Int_tfUiduser id; TStringfUseruser name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UserGroup_t(); { }. TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/UserGroup_t.html:640,simpl,simple,640,root/html604/UserGroup_t.html,https://root.cern,https://root.cern/root/html604/UserGroup_t.html,1,['simpl'],['simple']
Usability,". Using TTree::Draw() to access a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using TTree::Draw() to access a TTree. Now close the browser, quit and restart",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-ttreedraw-access-ttree.html:155,Guid,Guides,155,d/using-ttreedraw-access-ttree.html,https://root.cern,https://root.cern/d/using-ttreedraw-access-ttree.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". Using a Macro to Read a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a Macro to Read a TTree. Why using a macro?; As real analyses don't fit into sim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:147,Guid,Guides,147,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". Using a TSelector with PROOF | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a TSelector with PROOF. For people having a multi (e.g. dual) core computer, it i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-tselector-proof.html:146,Guid,Guides,146,d/using-tselector-proof.html,https://root.cern,https://root.cern/d/using-tselector-proof.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:78040,clear,clearEvalErrorLog,78040,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['clear'],['clearEvalErrorLog']
Usability,". Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:79308,clear,clearEvalErrorLog,79308,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['clear'],['clearEvalErrorLog']
Usability,". Workshops | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Workshops. Here the list with ROOT workshops:. ROOT 2018 ; ROOT 2015 ; ROOT 2013 (slides); ROOT 2007 (slides); ROOT 2005 (slides); ROOT 2007; ROOT 200",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/workshops.html:127,Guid,Guides,127,d/workshops.html,https://root.cern,https://root.cern/d/workshops.html,3,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,". [in]varexpA string that takes one of these general forms:; ""e1"" produces a 1-d histogram (TH1F) of expression ""e1""; ""e1:e2"" produces an unbinned 2-d scatter-plot (TGraph) of ""e1"" on the y-axis versus ""e2"" on the x-axis; ""e1:e2:e3"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1"" vs ""e2"" vs ""e3"" on the z-, y-, x-axis, respectively; ""e1:e2:e3:e4"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1"" vs ""e2"" vs ""e3"" and ""e4"" mapped on the current color palette. (to create histograms in the 2, 3, and 4 dimensional case, see section ""Saving the result of Draw to an histogram""); ""e1:e2:e3:e4:e5"" with option ""GL5D"" produces a 5D plot using OpenGL. gStyle->SetCanvasPreferGL(true) is needed.; Any number of variables no fewer than two can be used with the options ""CANDLE"" and ""PARA""; An arbitrary number of variables can be used with the option ""GOFF"". Examples:; ""x"": the simplest case, it draws a 1-Dim histogram of column x; ""sqrt(x)"", ""x*y/z"": draw histogram with the values of the specified numerical expression across TTree events; ""y:sqrt(x)"": 2-Dim histogram of y versus sqrt(x); ""px:py:pz:2.5*E"": produces a 3-d scatter-plot of px vs py ps pz and the color number of each marker will be 2.5*E. If the color number is negative it is set to 0. If the color number is greater than the current number of colors it is set to the highest color number. The default number of colors is 50. See TStyle::SetPalette for setting a new color palette. The expressions can use all the operations and built-in functions supported by TFormula (see TFormula::Analyze()), including free functions taking numerical arguments (e.g. TMath::Bessel()). In addition, you can call member functions taking numerical arguments. For example, these are two valid expressions: TMath::BreitWigner(fPx,3,2); event.GetHistogram()->GetXaxis()->GetXmax(); TTree::GetHistogramTH1 * GetHistogram()Definition TTree.h:479; TMath::BreitWignerDouble_t BreitWigner(Double_t x, Double_t mean=0, Double_t gamma=1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:112058,simpl,simplest,112058,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['simpl'],['simplest']
Usability,". [in]varexpA string that takes one of these general forms:; ""e1"" produces a 1-d histogram (TH1F) of expression ""e1""; ""e1:e2"" produces an unbinned 2-d scatter-plot (TGraph) of ""e1"" on the y-axis versus ""e2"" on the x-axis; ""e1:e2:e3"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1"" vs ""e2"" vs ""e3"" on the z-, y-, x-axis, respectively; ""e1:e2:e3:e4"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1"" vs ""e2"" vs ""e3"" and ""e4"" mapped on the current color palette. (to create histograms in the 2, 3, and 4 dimensional case, see section ""Saving the result of Draw to an histogram""); ""e1:e2:e3:e4:e5"" with option ""GL5D"" produces a 5D plot using OpenGL. gStyle->SetCanvasPreferGL(true) is needed.; Any number of variables no fewer than two can be used with the options ""CANDLE"" and ""PARA""; An arbitrary number of variables can be used with the option ""GOFF"". Examples:; ""x"": the simplest case, it draws a 1-Dim histogram of column x; ""sqrt(x)"", ""x*y/z"": draw histogram with the values of the specified numerical expression across TTree events; ""y:sqrt(x)"": 2-Dim histogram of y versus sqrt(x); ""px:py:pz:2.5*E"": produces a 3-d scatter-plot of px vs py ps pz and the color number of each marker will be 2.5*E. If the color number is negative it is set to 0. If the color number is greater than the current number of colors it is set to the highest color number. The default number of colors is 50. See TStyle::SetPalette for setting a new color palette. The expressions can use all the operations and built-in functions supported by TFormula (see TFormula::Analyze()), including free functions taking numerical arguments (e.g. TMath::Bessel()). In addition, you can call member functions taking numerical arguments. For example, these are two valid expressions: TMath::BreitWigner(fPx,3,2); event.GetHistogram()->GetXaxis()->GetXmax(); TTree::GetHistogramTH1 * GetHistogram()Definition TTree.h:519; TMath::BreitWignerDouble_t BreitWigner(Double_t x, Double_t mean=0, Double_t gamma=1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:112231,simpl,simplest,112231,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['simpl'],['simplest']
Usability,". const TH1D & ; h2 . ). Operator -. ; Definition at line 10544 of file TH1.cxx. ◆ operator-() [3/6]. TH1F operator- ; (; const TH1F & ; h1, . const TH1F & ; h2 . ). Operator -. ; Definition at line 10362 of file TH1.cxx. ◆ operator-() [4/6]. TH1I operator- ; (; const TH1I & ; h1, . const TH1I & ; h2 . ). Operator -. ; Definition at line 9993 of file TH1.cxx. ◆ operator-() [5/6]. TH1L operator- ; (; const TH1L & ; h1, . const TH1L & ; h2 . ). Operator -. ; Definition at line 10181 of file TH1.cxx. ◆ operator-() [6/6]. TH1S operator- ; (; const TH1S & ; h1, . const TH1S & ; h2 . ). Operator -. ; Definition at line 9805 of file TH1.cxx. ◆ operator/() [1/6]. TH1C operator/ ; (; const TH1C & ; h1, . const TH1C & ; h2 . ). Operator /. ; Definition at line 9641 of file TH1.cxx. ◆ operator/() [2/6]. TH1D operator/ ; (; const TH1D & ; h1, . const TH1D & ; h2 . ). Operator /. ; Definition at line 10566 of file TH1.cxx. ◆ operator/() [3/6]. TH1F operator/ ; (; const TH1F & ; h1, . const TH1F & ; h2 . ). Operator /. ; Definition at line 10384 of file TH1.cxx. ◆ operator/() [4/6]. TH1I operator/ ; (; const TH1I & ; h1, . const TH1I & ; h2 . ). Operator /. ; Definition at line 10015 of file TH1.cxx. ◆ operator/() [5/6]. TH1L operator/ ; (; const TH1L & ; h1, . const TH1L & ; h2 . ). Operator /. ; Definition at line 10203 of file TH1.cxx. ◆ operator/() [6/6]. TH1S operator/ ; (; const TH1S & ; h1, . const TH1S & ; h2 . ). Operator /. ; Definition at line 9827 of file TH1.cxx. ◆ R__H() [1/2]. TH1 * R__H ; (; const char * ; hname). return pointer to histogram with name hname ; Definition at line 10590 of file TH1.cxx. ◆ R__H() [2/2]. TH1 * R__H ; (; Int_t ; hid). return pointer to histogram with name hid if id >=0 h_id if id <0 ; Definition at line 10579 of file TH1.cxx. Variable Documentation. ◆ gF1. TF1* gF1 =nullptr. Definition at line 581 of file TH1.cxx. histhistsrcTH1.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx.html:11347,Guid,Guide,11347,doc/master/TH1_8cxx.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx.html,1,['Guid'],['Guide']
Usability,". const char * ; , . const char * ; , . Bool_t ;  . ). inlinevirtual . Reimplemented in TRootSnifferStoreJson, and TRootSnifferStoreXml.; Definition at line 35 of file TRootSnifferStore.h. ◆ SetResult(). void TRootSnifferStore::SetResult ; (; void * ; _res, . TClass * ; _rescl, . TDataMember * ; _resmemb, . Int_t ; _res_chld, . Int_t ; restr = 0 . ). set pointer on found element, class and number of childs ; Definition at line 26 of file TRootSnifferStore.cxx. ◆ Streamer(). void TRootSnifferStore::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TRootSnifferStoreXml, and TRootSnifferStoreJson. ◆ StreamerNVirtual(). void TRootSnifferStore::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TRootSnifferStore.h. Member Data Documentation. ◆ fResClass. TClass* TRootSnifferStore::fResClass {nullptr}. protected . ! class of found item ; Definition at line 27 of file TRootSnifferStore.h. ◆ fResMember. TDataMember* TRootSnifferStore::fResMember {nullptr}. protected . ! datamember pointer of found item ; Definition at line 28 of file TRootSnifferStore.h. ◆ fResNumChilds. Int_t TRootSnifferStore::fResNumChilds {-1}. protected . ! count of found childs, -1 by default ; Definition at line 29 of file TRootSnifferStore.h. ◆ fResPtr. void* TRootSnifferStore::fResPtr {nullptr}. protected . ! pointer on found item ; Definition at line 26 of file TRootSnifferStore.h. ◆ fResRestrict. Int_t TRootSnifferStore::fResRestrict {0}. protected . ! restriction for result, 0-default, 1-readonly, 2-full ; Definition at line 30 of file TRootSnifferStore.h. Libraries for TRootSnifferStore:. [legend]; The documentation for this class was generated from the following files:; net/http/inc/TRootSnifferStore.h; net/http/src/TRootSnifferStore.cxx. TRootSnifferStore. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSnifferStore.html:15669,Guid,Guide,15669,doc/master/classTRootSnifferStore.html,https://root.cern,https://root.cern/doc/master/classTRootSnifferStore.html,1,['Guid'],['Guide']
Usability,". const std::vector< double > & ; xmin, . const std::vector< double > & ; xmax . ). Definition at line 245 of file RDFHistoModels.cxx. ◆ THnDModel() [6/7]. ROOT::RDF::THnDModel::THnDModel ; (; const char * ; name, . const char * ; title, . int ; dim, . const int * ; nbins, . const std::vector< std::vector< double > > & ; xbins . ). Definition at line 251 of file RDFHistoModels.cxx. ◆ THnDModel() [7/7]. ROOT::RDF::THnDModel::THnDModel ; (; const char * ; name, . const char * ; title, . int ; dim, . const std::vector< int > & ; nbins, . const std::vector< std::vector< double > > & ; xbins . ). Definition at line 261 of file RDFHistoModels.cxx. Member Function Documentation. ◆ GetHistogram(). std::shared_ptr<::THnD > ROOT::RDF::THnDModel::GetHistogram ; (; ); const. Definition at line 267 of file RDFHistoModels.cxx. Member Data Documentation. ◆ fBinEdges. std::vector<std::vector<double> > ROOT::RDF::THnDModel::fBinEdges. Definition at line 109 of file HistoModels.hxx. ◆ fDim. int ROOT::RDF::THnDModel::fDim. Definition at line 105 of file HistoModels.hxx. ◆ fName. TString ROOT::RDF::THnDModel::fName. Definition at line 103 of file HistoModels.hxx. ◆ fNbins. std::vector<int> ROOT::RDF::THnDModel::fNbins. Definition at line 106 of file HistoModels.hxx. ◆ fTitle. TString ROOT::RDF::THnDModel::fTitle. Definition at line 104 of file HistoModels.hxx. ◆ fXmax. std::vector<double> ROOT::RDF::THnDModel::fXmax. Definition at line 108 of file HistoModels.hxx. ◆ fXmin. std::vector<double> ROOT::RDF::THnDModel::fXmin. Definition at line 107 of file HistoModels.hxx. Collaboration diagram for ROOT::RDF::THnDModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/HistoModels.hxx; tree/dataframe/src/RDFHistoModels.cxx. ROOTRDFTHnDModel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1THnDModel.html:4135,Guid,Guide,4135,doc/master/structROOT_1_1RDF_1_1THnDModel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1THnDModel.html,1,['Guid'],['Guide']
Usability,". double ROOT::Math::MultiNumGradFunction::GetDerivPrecision ; (; ). static . get precision value used for calculating the derivative step-size ; Definition at line 56 of file MultiNumGradFunction.cxx. ◆ NCalls(). unsigned int ROOT::Math::MultiNumGradFunction::NCalls ; (; ); const. inline . Definition at line 91 of file MultiNumGradFunction.h. ◆ NDim(). unsigned int ROOT::Math::MultiNumGradFunction::NDim ; (; ); const. inlineoverridevirtual . Retrieve the dimension of the function. ; Reimplemented from ROOT::Math::IGradientFunctionMultiDimTempl< T >.; Definition at line 89 of file MultiNumGradFunction.h. ◆ SetDerivPrecision(). void ROOT::Math::MultiNumGradFunction::SetDerivPrecision ; (; double ; eps). static . precision value used for calculating the derivative step-size h = eps * |x|. ; The default is 0.001, give a smaller in case function chanes rapidly ; Definition at line 54 of file MultiNumGradFunction.cxx. ◆ SetOwnership(). void ROOT::Math::MultiNumGradFunction::SetOwnership ; (; bool ; on = true). inline . Definition at line 105 of file MultiNumGradFunction.h. Member Data Documentation. ◆ fDim. unsigned int ROOT::Math::MultiNumGradFunction::fDim. private . Definition at line 128 of file MultiNumGradFunction.h. ◆ fFunc. const IMultiGenFunction* ROOT::Math::MultiNumGradFunction::fFunc. private . Definition at line 127 of file MultiNumGradFunction.h. ◆ fgEps. double ROOT::Math::MultiNumGradFunction::fgEps = 0.001. staticprivate . Definition at line 132 of file MultiNumGradFunction.h. ◆ fNCalls. unsigned int ROOT::Math::MultiNumGradFunction::fNCalls. mutableprivate . Definition at line 129 of file MultiNumGradFunction.h. ◆ fOwner. bool ROOT::Math::MultiNumGradFunction::fOwner. private . Definition at line 130 of file MultiNumGradFunction.h. math/mathmore/inc/Math/MultiNumGradFunction.h; math/mathmore/src/MultiNumGradFunction.cxx. ROOTMathMultiNumGradFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiNumGradFunction.html:7245,Guid,Guide,7245,doc/master/classROOT_1_1Math_1_1MultiNumGradFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiNumGradFunction.html,1,['Guid'],['Guide']
Usability,". enum TProof::ESubMerger. EnumeratorkOutputSize ; kSendOutput ; kBeMerger ; kMergerDown ; kStopMerging ; kOutputSent . Definition at line 376 of file TProof.h. ◆ EUploadOpt. enum TProof::EUploadOpt. EnumeratorkAppend ; kOverwriteDataSet ; kNoOverwriteDataSet ; kOverwriteAllFiles ; kOverwriteNoFiles ; kAskUser . Definition at line 353 of file TProof.h. ◆ EUploadPackageOpt. enum TProof::EUploadPackageOpt. EnumeratorkUntar ; kRemoveOld . Definition at line 366 of file TProof.h. ◆ EUrgent. enum TProof::EUrgent. private . EnumeratorkLocalInterrupt ; kPing ; kHardInterrupt ; kSoftInterrupt ; kShutdownInterrupt . Definition at line 393 of file TProof.h. Constructor & Destructor Documentation. ◆ TProof() [1/3]. TProof::TProof ; (; const TProof & ; ). private . ◆ TProof() [2/3]. TProof::TProof ; (; ). protected . Protected constructor to be used by classes deriving from TProof (they have to call Init themselves and override StartSlaves appropriately). ; This constructor simply closes any previous gProof and sets gProof to this instance. ; Definition at line 513 of file TProof.cxx. ◆ TProof() [3/3]. TProof::TProof ; (; const char * ; masterurl, . const char * ; conffile = kPROOF_ConfFile, . const char * ; confdir = kPROOF_ConfDir, . Int_t ; loglevel = 0, . const char * ; alias = 0, . TProofMgr * ; mgr = 0 . ). Create a PROOF environment. ; Starting PROOF involves either connecting to a master server, which in turn will start a set of slave servers, or directly starting as master server (if master = """"). Masterurl is of the form: [proof[s]://]host[:port]. Conffile is the name of the config file describing the remote PROOF cluster (this argument alows you to describe different cluster configurations). The default is proof.conf. Confdir is the directory where the config file and other PROOF related files are (like motd and noproof files). Loglevel is the log level (default = 1). User specified custom config files will be first looked for in $HOME/.conffile. ; Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:60294,simpl,simply,60294,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['simpl'],['simply']
Usability,". float ; x, . float ; y, . float ; z . ). Definition at line 131 of file REvePointSet.cxx. ◆ WriteCoreJson(). Int_t REvePointSet::WriteCoreJson ; (; nlohmann::json & ; j, . Int_t ; rnr_offset . ). overridevirtual . Write core json. ; If rnr_offset is negative, render data shall not be written. Returns number of bytes written into binary render data. ; Reimplemented from ROOT::Experimental::REveElement.; Reimplemented in ROOT::Experimental::REveTrack, and ROOT::Experimental::REveTrackProjected.; Definition at line 214 of file REvePointSet.cxx. ◆ WriteVizParams(). void REvePointSet::WriteVizParams ; (; std::ostream & ; out, . const TString & ; var . ). overridevirtual . Write visualization parameters. ; Reimplemented from ROOT::Experimental::REveElement.; Reimplemented in ROOT::Experimental::REveTrack.; Definition at line 198 of file REvePointSet.cxx. Friends And Related Symbol Documentation. ◆ REvePointSetArray. friend class REvePointSetArray. friend . Definition at line 41 of file REvePointSet.hxx. Member Data Documentation. ◆ fCapacity. int ROOT::Experimental::REvePointSet::fCapacity {0}. protected . Definition at line 48 of file REvePointSet.hxx. ◆ fPoints. std::vector<REveVector> ROOT::Experimental::REvePointSet::fPoints. protected . Definition at line 47 of file REvePointSet.hxx. ◆ fSize. int ROOT::Experimental::REvePointSet::fSize {0}. protected . Definition at line 49 of file REvePointSet.hxx. ◆ fTexX. int ROOT::Experimental::REvePointSet::fTexX {0}. protected . Definition at line 50 of file REvePointSet.hxx. ◆ fTexY. int ROOT::Experimental::REvePointSet::fTexY {0}. protected . Definition at line 50 of file REvePointSet.hxx. Libraries for ROOT::Experimental::REvePointSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve7/inc/ROOT/REvePointSet.hxx; graf3d/eve7/src/REvePointSet.cxx. ROOTExperimentalREvePointSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:28783,Guid,Guide,28783,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,1,['Guid'],['Guide']
Usability,. inline . Definition at line 131 of file GSLMCIntegrationWorkspace.h. ◆ ReInit(). bool ROOT::Math::GSLVegasIntegrationWorkspace::ReInit ; (; ). inlineoverridevirtual . re-initialize an existing the workspace ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 101 of file GSLMCIntegrationWorkspace.h. ◆ Result(). double ROOT::Math::GSLVegasIntegrationWorkspace::Result ; (; ); const. inline . Definition at line 123 of file GSLMCIntegrationWorkspace.h. ◆ SetOptions(). virtual void ROOT::Math::GSLVegasIntegrationWorkspace::SetOptions ; (; const ROOT::Math::IOptions & ; opt). inlineoverridevirtual . set options ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 138 of file GSLMCIntegrationWorkspace.h. ◆ SetParameters(). void ROOT::Math::GSLVegasIntegrationWorkspace::SetParameters ; (; const struct VegasParameters & ; p). inline . Definition at line 116 of file GSLMCIntegrationWorkspace.h. ◆ SetVegasParameters(). void ROOT::Math::GSLVegasIntegrationWorkspace::SetVegasParameters ; (; ). inlineprivate . Definition at line 144 of file GSLMCIntegrationWorkspace.h. ◆ Sigma(). double ROOT::Math::GSLVegasIntegrationWorkspace::Sigma ; (; ); const. inline . Definition at line 125 of file GSLMCIntegrationWorkspace.h. ◆ Type(). MCIntegration::Type ROOT::Math::GSLVegasIntegrationWorkspace::Type ; (; ); const. inlineoverridevirtual . Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 129 of file GSLMCIntegrationWorkspace.h. Member Data Documentation. ◆ fParams. VegasParameters ROOT::Math::GSLVegasIntegrationWorkspace::fParams. private . Definition at line 154 of file GSLMCIntegrationWorkspace.h. ◆ fWs. gsl_monte_vegas_state* ROOT::Math::GSLVegasIntegrationWorkspace::fWs. private . Definition at line 153 of file GSLMCIntegrationWorkspace.h. math/mathmore/src/GSLMCIntegrationWorkspace.h. ROOTMathGSLVegasIntegrationWorkspace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html:5799,Guid,Guide,5799,doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html,1,['Guid'],['Guide']
Usability,". inline . Forwards to THnBase::Projection(). ; Non-virtual, as a CINT-compatible replacement of a using declaration. ; Definition at line 134 of file THnSparse.h. ◆ Projection() [4/4]. TH2D * THnSparse::Projection ; (; Int_t ; yDim, . Int_t ; xDim, . Option_t * ; option = """" . ); const. inline . Forwards to THnBase::Projection(). ; Non-virtual, as a CINT-compatible replacement of a using declaration. ; Definition at line 141 of file THnSparse.h. ◆ Rebin() [1/2]. THnSparse * THnSparse::Rebin ; (; const Int_t * ; group); const. inline . Definition at line 162 of file THnSparse.h. ◆ Rebin() [2/2]. THnSparse * THnSparse::Rebin ; (; Int_t ; group); const. inline . Definition at line 159 of file THnSparse.h. ◆ Reserve(). void THnSparse::Reserve ; (; Long64_t ; nbins). overrideprotectedvirtual . Initialize storage for nbins. ; Reimplemented from THnBase.; Definition at line 689 of file THnSparse.cxx. ◆ Reset(). void THnSparse::Reset ; (; Option_t * ; option = """"). overridevirtual . Clear the histogram. ; Implements THnBase.; Definition at line 962 of file THnSparse.cxx. ◆ SetBinContent() [1/2]. void THnSparse::SetBinContent ; (; const Int_t * ; idx, . Double_t ; v . ). inline . Forwards to THnBase::SetBinContent(). ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 105 of file THnSparse.h. ◆ SetBinContent() [2/2]. void THnSparse::SetBinContent ; (; Long64_t ; bin, . Double_t ; v . ). overridevirtual . Set content of bin with index ""bin"" to ""v"". ; Implements THnBase.; Definition at line 904 of file THnSparse.cxx. ◆ SetBinError2(). void THnSparse::SetBinError2 ; (; Long64_t ; bin, . Double_t ; e2 . ). overridevirtual . Set error of bin with index ""bin"" to ""e"", enable errors if needed. ; Implements THnBase.; Definition at line 914 of file THnSparse.cxx. ◆ SetFilledBins(). void THnSparse::SetFilledBins ; (; Long64_t ; nbins). inlineoverridevirtual . Reimplemented from THnBase.; Definition at line 94 of file THnSparse.h. ◆ Streamer(). void T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:38953,Clear,Clear,38953,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['Clear'],['Clear']
Usability,". master. Reference Guide ; .  . Loading...; Searching...; No Matches. exec1.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Echo object at mouse position. ; Example of macro called when a pad is redrawn one must create a TExec object in the following way gPad->AddExec(""ex1"", "".x exec1.C"");; gPad#define gPadDefinition TVirtualPad.h:308; this macro prints the bin number and the bin content when one clicks on the histogram contour of any histogram in a pad; ; ; void exec1(); {; if (!gPad) {; Error(""exec1"", ""gPad is null, you are not supposed to run this macro"");; return;; }; ; Int_t event = gPad->GetEvent();; int px = gPad->GetEventX();; TObject *select = gPad->GetSelected();; ; if (select && select->InheritsFrom(TH1::Class())) {; TH1 *h = (TH1*)select;; Float_t xx = gPad->AbsPixeltoX(px);; Float_t x = gPad->PadtoX(xx);; Int_t binx = h->GetXaxis()->FindBin(x);; printf(""event=%d, hist:%s, bin=%d, content=%f\n"", event, h->GetName(), binx, h->GetBinContent(binx));; }; }; ; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TAxis::FindBinvirtual Int_t FindBin(Double_t x)Find bin number corresponding to abscissa x.Definition TAxis.cxx:293; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Classstatic TClass * Class(); TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; xDouble_t x[n]Definition legend1.C:17; AuthorsRene Brun, Sergey Linev ; Definition in file exec1.C. tutorialshistexec1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/exec1_8C.html:1977,Guid,Guide,1977,doc/master/exec1_8C.html,https://root.cern,https://root.cern/doc/master/exec1_8C.html,1,['Guid'],['Guide']
Usability,. overridevirtual . Return total X3D size of this primary. ; Reimplemented from TAtt3D.; Definition at line 225 of file TPrimary.cxx. ◆ Streamer(). void TPrimary::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPrimary::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TPrimary.h. Member Data Documentation. ◆ fEtot. Double_t TPrimary::fEtot. protected . Definition at line 41 of file TPrimary.h. ◆ fFirstMother. Int_t TPrimary::fFirstMother. protected . Definition at line 35 of file TPrimary.h. ◆ fGeneration. Int_t TPrimary::fGeneration. protected . Definition at line 37 of file TPrimary.h. ◆ fPart. Int_t TPrimary::fPart. protected . Definition at line 34 of file TPrimary.h. ◆ fPx. Double_t TPrimary::fPx. protected . Definition at line 38 of file TPrimary.h. ◆ fPy. Double_t TPrimary::fPy. protected . Definition at line 39 of file TPrimary.h. ◆ fPz. Double_t TPrimary::fPz. protected . Definition at line 40 of file TPrimary.h. ◆ fSecondMother. Int_t TPrimary::fSecondMother. protected . Definition at line 36 of file TPrimary.h. ◆ fTime. Double_t TPrimary::fTime. protected . Definition at line 45 of file TPrimary.h. ◆ fTimeEnd. Double_t TPrimary::fTimeEnd. protected . Definition at line 46 of file TPrimary.h. ◆ fType. TString TPrimary::fType. protected . Definition at line 47 of file TPrimary.h. ◆ fVx. Double_t TPrimary::fVx. protected . Definition at line 42 of file TPrimary.h. ◆ fVy. Double_t TPrimary::fVy. protected . Definition at line 43 of file TPrimary.h. ◆ fVz. Double_t TPrimary::fVz. protected . Definition at line 44 of file TPrimary.h. Libraries for TPrimary:. [legend]; The documentation for this class was generated from the following files:; montecarlo/eg/inc/TPrimary.h; montecarlo/eg/src/TPrimary.cxx. TPrimary. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrimary.html:20369,Guid,Guide,20369,doc/master/classTPrimary.html,https://root.cern,https://root.cern/doc/master/classTPrimary.html,1,['Guid'],['Guide']
Usability,". overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooLognormal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file RooLognormal.h. ◆ translate(). void RooLognormal::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 85 of file RooLognormal.cxx. ◆ useStandardParametrization(). bool RooLognormal::useStandardParametrization ; (; ); const. inline . Definition at line 44 of file RooLognormal.h. Member Data Documentation. ◆ _useStandardParametrization. bool RooLognormal::_useStandardParametrization = false. protected . Definition at line 50 of file RooLognormal.h. ◆ k. RooRealProxy RooLognormal::k. protected . the shape parameter, exp(sigma) ; Definition at line 49 of file RooLognormal.h. ◆ m0. RooRealProxy RooLognormal::m0. protected . the median, exp(mu) ; Definition at line 48 of file RooLognormal.h. ◆ x. RooRealProxy RooLognormal::x. protected . the variable ; Definition at line 47 of file RooLognormal.h. Libraries for RooLognormal:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooLognormal.h; roofit/roofit/src/RooLognormal.cxx. RooLognormal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:81981,Guid,Guide,81981,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,1,['Guid'],['Guide']
Usability,. p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 129 of file HypoTestResult.h. ◆ fAlternatePValueError. double RooStats::HypoTestResult::fAlternatePValueError. mutableprotected . error of p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 131 of file HypoTestResult.h. ◆ fBackgroundIsAlt. bool RooStats::HypoTestResult::fBackgroundIsAlt. protected . Definition at line 140 of file HypoTestResult.h. ◆ fFitInfo. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fFitInfo. protected . Definition at line 138 of file HypoTestResult.h. ◆ fNullDetailedOutput. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fNullDetailedOutput. protected . Definition at line 136 of file HypoTestResult.h. ◆ fNullDistr. std::unique_ptr<SamplingDistribution> RooStats::HypoTestResult::fNullDistr. protected . Definition at line 134 of file HypoTestResult.h. ◆ fNullPValue. double RooStats::HypoTestResult::fNullPValue. mutableprotected . p-value for the null hypothesis (small number means disfavoured) ; Definition at line 128 of file HypoTestResult.h. ◆ fNullPValueError. double RooStats::HypoTestResult::fNullPValueError. mutableprotected . error of p-value for the null hypothesis (small number means disfavoured) ; Definition at line 130 of file HypoTestResult.h. ◆ fPValueIsRightTail. bool RooStats::HypoTestResult::fPValueIsRightTail. protected . Definition at line 139 of file HypoTestResult.h. ◆ fTestStatisticData. double RooStats::HypoTestResult::fTestStatisticData. protected . result of the test statistic evaluated on data ; Definition at line 132 of file HypoTestResult.h. Libraries for RooStats::HypoTestResult:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HypoTestResult.h; roofit/roostats/src/HypoTestResult.cxx. RooStatsHypoTestResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:29104,Guid,Guide,29104,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['Guid'],['Guide']
Usability,". privatedelete . ◆ ReallocBlock(). void TFPBlock::ReallocBlock ; (; Long64_t * ; offset, . Int_t * ; length, . Int_t ; nb . ). Reallocate the block's buffer based on the length of the elements it will contain. ; Definition at line 94 of file TFPBlock.cxx. ◆ SetBuffer(). void TFPBlock::SetBuffer ; (; char * ; buf). Set block buffer. ; Definition at line 81 of file TFPBlock.cxx. ◆ SetPos(). void TFPBlock::SetPos ; (; Int_t ; idx, . Long64_t ; value . ). Set pos value for index idx. ; Definition at line 72 of file TFPBlock.cxx. ◆ Streamer(). void TFPBlock::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFPBlock::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TFPBlock.h. Member Data Documentation. ◆ fBuffer. char* TFPBlock::fBuffer. private . Content of the block. ; Definition at line 25 of file TFPBlock.h. ◆ fCapacity. Long64_t TFPBlock::fCapacity. private . Capacity of the buffer. ; Definition at line 28 of file TFPBlock.h. ◆ fDataSize. Long64_t TFPBlock::fDataSize. private . Total size of useful data in the block. ; Definition at line 27 of file TFPBlock.h. ◆ fLen. Int_t* TFPBlock::fLen. private . Array of lengths of each segment. ; Definition at line 29 of file TFPBlock.h. ◆ fNblock. Int_t TFPBlock::fNblock. private . Number of segment in the block. ; Definition at line 26 of file TFPBlock.h. ◆ fPos. Long64_t* TFPBlock::fPos. private . Array of positions of each segment. ; Definition at line 30 of file TFPBlock.h. ◆ fRelOffset. Long64_t* TFPBlock::fRelOffset. private . Relative offset of piece in the buffer. ; Definition at line 31 of file TFPBlock.h. Libraries for TFPBlock:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TFPBlock.h; io/io/src/TFPBlock.cxx. TFPBlock. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFPBlock.html:16195,Guid,Guide,16195,doc/master/classTFPBlock.html,https://root.cern,https://root.cern/doc/master/classTFPBlock.html,1,['Guid'],['Guide']
Usability,". privatedelete . ◆ RecursiveRemove(). void TFolder::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Recursively remove object from a folder. ; Reimplemented from TObject.; Definition at line 449 of file TFolder.cxx. ◆ Remove(). void TFolder::Remove ; (; TObject * ; obj). virtual . Remove object from this folder. obj must be a TObject or a TFolder. ; Definition at line 457 of file TFolder.cxx. ◆ SaveAs(). void TFolder::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . Save all objects in this folder in filename. ; Each object in this folder will have a key in the file where the name of the key will be the name of the object. ; Reimplemented from TObject.; Definition at line 468 of file TFolder.cxx. ◆ SetOwner(). void TFolder::SetOwner ; (; Bool_t ; owner = kTRUE). virtual . Set ownership. ; If the folder is declared owner, when the folder is deleted, all the objects added via TFolder::Add are deleted via TObject::Delete, otherwise TObject::Clear is called.; NOTE that folder ownership can be set:; via TFolder::SetOwner; or via TCollection::SetOwner on the collection specified to TFolder::AddFolder . Definition at line 483 of file TFolder.cxx. ◆ Streamer(). void TFolder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFolder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file TFolder.h. Member Data Documentation. ◆ fFolders. TCollection* TFolder::fFolders. protected . Definition at line 33 of file TFolder.h. ◆ fIsOwner. Bool_t TFolder::fIsOwner. protected . Definition at line 34 of file TFolder.h. Libraries for TFolder:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TFolder.h; core/base/src/TFolder.cxx. TFolder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFolder.html:24742,Guid,Guide,24742,doc/master/classTFolder.html,https://root.cern,https://root.cern/doc/master/classTFolder.html,1,['Guid'],['Guide']
Usability,. protected . ! fGraph2D->fHistogram Xmin ; Definition at line 50 of file TGraph2DPainter.h. ◆ fXN. Double_t* TGraph2DPainter::fXN. protected . ! Pointer to fDelaunay->fXN ; Definition at line 38 of file TGraph2DPainter.h. ◆ fXNmax. Double_t TGraph2DPainter::fXNmax. protected . ! Equal to fDelaunay->fXNmax ; Definition at line 47 of file TGraph2DPainter.h. ◆ fXNmin. Double_t TGraph2DPainter::fXNmin. protected . ! Equal to fDelaunay->fXNmin ; Definition at line 46 of file TGraph2DPainter.h. ◆ fY. Double_t* TGraph2DPainter::fY. protected . ! Pointer to fGraph2D->fY ; Definition at line 36 of file TGraph2DPainter.h. ◆ fYmax. Double_t TGraph2DPainter::fYmax. protected . ! fGraph2D->fHistogram Ymax ; Definition at line 53 of file TGraph2DPainter.h. ◆ fYmin. Double_t TGraph2DPainter::fYmin. protected . ! fGraph2D->fHistogram Ymin ; Definition at line 52 of file TGraph2DPainter.h. ◆ fYN. Double_t* TGraph2DPainter::fYN. protected . ! Pointer to fDelaunay->fYN ; Definition at line 39 of file TGraph2DPainter.h. ◆ fYNmax. Double_t TGraph2DPainter::fYNmax. protected . ! Equal to fDelaunay->fYNmax ; Definition at line 49 of file TGraph2DPainter.h. ◆ fYNmin. Double_t TGraph2DPainter::fYNmin. protected . ! Equal to fDelaunay->fYNmin ; Definition at line 48 of file TGraph2DPainter.h. ◆ fZ. Double_t* TGraph2DPainter::fZ. protected . ! Pointer to fGraph2D->fZ ; Definition at line 37 of file TGraph2DPainter.h. ◆ fZmax. Double_t TGraph2DPainter::fZmax. protected . ! fGraph2D->fHistogram Zmax ; Definition at line 55 of file TGraph2DPainter.h. ◆ fZmin. Double_t TGraph2DPainter::fZmin. protected . ! fGraph2D->fHistogram Zmin ; Definition at line 54 of file TGraph2DPainter.h. Libraries for TGraph2DPainter:. [legend]; The documentation for this class was generated from the following files:; hist/histpainter/inc/TGraph2DPainter.h; hist/histpainter/src/TGraph2DPainter.cxx. TGraph2DPainter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DPainter.html:23276,Guid,Guide,23276,doc/master/classTGraph2DPainter.html,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html,1,['Guid'],['Guide']
Usability,". protected . !< object to store all painting, owned by TWebPS object . EnumeratorattrLine ; attrFill ; attrMarker ; attrText ; attrAll . Definition at line 34 of file TWebPadPainter.h. Constructor & Destructor Documentation. ◆ TWebPadPainter() [1/3]. TWebPadPainter::TWebPadPainter ; (; ). inline . Definition at line 40 of file TWebPadPainter.h. ◆ TWebPadPainter() [2/3]. TWebPadPainter::TWebPadPainter ; (; const TWebPadPainter & ; rhs). privatedelete . ◆ TWebPadPainter() [3/3]. TWebPadPainter::TWebPadPainter ; (; TWebPadPainter && ; rhs). privatedelete . Member Function Documentation. ◆ Class(). static TClass * TWebPadPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TWebPadPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TWebPadPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 122 of file TWebPadPainter.h. ◆ ClearDrawable(). void TWebPadPainter::ClearDrawable ; (; ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 81 of file TWebPadPainter.h. ◆ CopyDrawable(). void TWebPadPainter::CopyDrawable ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 82 of file TWebPadPainter.h. ◆ CreateDrawable(). Int_t TWebPadPainter::CreateDrawable ; (; UInt_t ; , . UInt_t ;  . ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 80 of file TWebPadPainter.h. ◆ DeclFileName(). static const char * TWebPadPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 122 of file TWebPadPainter.h. ◆ DestroyDrawable(). void TWebPadPainter::DestroyDrawable ; (; Int_t ; ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 83 of file TWebPadPainter.h. ◆ DrawBox(). void TWebPadPainter::DrawBox ; (; Double_t ; x1, . Double_t ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:13484,Clear,ClearDrawable,13484,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,1,['Clear'],['ClearDrawable']
Usability,. protected . Default minimum for Yaxis (as calculated from contents) ; Definition at line 249 of file RooPlot.h. ◆ _dir. TDirectory* RooPlot::_dir = nullptr. protected . ! non-persistent ; Definition at line 252 of file RooPlot.h. ◆ _hist. TH1* RooPlot::_hist = nullptr. protected . Histogram that we uses as basis for drawing the content. ; Definition at line 238 of file RooPlot.h. ◆ _items. Items RooPlot::_items. protected . A list of the items we contain. ; Definition at line 239 of file RooPlot.h. ◆ _normBinWidth. double RooPlot::_normBinWidth = 0. protected . Histogram bin width (for normalization) ; Definition at line 247 of file RooPlot.h. ◆ _normNumEvts. double RooPlot::_normNumEvts = 0. protected . Number of events in histogram (for normalization) ; Definition at line 246 of file RooPlot.h. ◆ _normObj. const RooPlotable* RooPlot::_normObj = nullptr. protected . ! Pointer to normalization object ; ; Definition at line 245 of file RooPlot.h. ◆ _normVars. RooArgSet* RooPlot::_normVars = nullptr. protected . Variables that PDF plots should be normalized over. ; Definition at line 243 of file RooPlot.h. ◆ _padFactor. double RooPlot::_padFactor. protected . Scale our y-axis to _padFactor of our maximum contents. ; Definition at line 240 of file RooPlot.h. ◆ _plotVar. RooAbsRealLValue* RooPlot::_plotVar = nullptr. protected . The variable we are plotting. ; Definition at line 241 of file RooPlot.h. ◆ _plotVarSet. RooArgSet* RooPlot::_plotVarSet = nullptr. protected . A list owning the cloned tree nodes of the plotVarClone. ; Definition at line 242 of file RooPlot.h. ◆ title. Use the constructor that doesn t take the name and RooPlot::title. Definition at line 51 of file RooPlot.h. Libraries for RooPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooPlot.h; roofit/roofitcore/src/RooPlot.cxx. RooPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:04 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:58138,Guid,Guide,58138,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,1,['Guid'],['Guide']
Usability,". protected . Definition at line 48 of file RooGenContext.h. ◆ _cloneSet. RooArgSet RooGenContext::_cloneSet. protected . Clone of all nodes of input p.d.f. ; Definition at line 44 of file RooGenContext.h. ◆ _code. Int_t RooGenContext::_code. protected . Internal generation code. ; Definition at line 47 of file RooGenContext.h. ◆ _directVars. RooArgSet RooGenContext::_directVars. protected . Definition at line 46 of file RooGenContext.h. ◆ _generator. std::unique_ptr<RooAbsNumGenerator> RooGenContext::_generator. protected . MC sampling generation engine. ; Definition at line 50 of file RooGenContext.h. ◆ _maxProb. double RooGenContext::_maxProb {0.}. protected . Definition at line 48 of file RooGenContext.h. ◆ _maxVar. std::unique_ptr<RooRealVar> RooGenContext::_maxVar. protected . Variable holding maximum value of p.d.f. ; Definition at line 51 of file RooGenContext.h. ◆ _norm. double RooGenContext::_norm {0.}. protected . Maximum probability, p.d.f area and normalization. ; Definition at line 48 of file RooGenContext.h. ◆ _otherVars. RooArgSet RooGenContext::_otherVars. protected . List of observables generated internally, randomly, and by accept/reject sampling. ; Definition at line 46 of file RooGenContext.h. ◆ _pdfClone. RooAbsPdf* RooGenContext::_pdfClone = nullptr. protected . Clone of input p.d.f. ; Definition at line 45 of file RooGenContext.h. ◆ _uniformVars. RooArgSet RooGenContext::_uniformVars. protected . Definition at line 46 of file RooGenContext.h. ◆ _updateFMaxPerEvent. Int_t RooGenContext::_updateFMaxPerEvent. protected . If true, maximum p.d.f value needs to be recalculated for each event. ; Definition at line 52 of file RooGenContext.h. Libraries for RooGenContext:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooGenContext.h; roofit/roofitcore/src/RooGenContext.cxx. RooGenContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenContext.html:23314,Guid,Guide,23314,doc/master/classRooGenContext.html,https://root.cern,https://root.cern/doc/master/classRooGenContext.html,1,['Guid'],['Guide']
Usability,". protected . copy constructor ; Definition at line 93 of file TVirtualFitter.cxx. ◆ TVirtualFitter() [2/2]. TVirtualFitter::TVirtualFitter ; (; ). Default constructor. ; Definition at line 72 of file TVirtualFitter.cxx. ◆ ~TVirtualFitter(). TVirtualFitter::~TVirtualFitter ; (; ). override . Cleanup virtual fitter. ; Definition at line 142 of file TVirtualFitter.cxx. Member Function Documentation. ◆ Chisquare(). virtual Double_t TVirtualFitter::Chisquare ; (; Int_t ; npar, . Double_t * ; params . ); const. pure virtual . Implemented in TBackCompFitter, TFumili, TFitter, and TLinearFitter. ◆ Class(). static TClass * TVirtualFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualFitter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 120 of file TVirtualFitter.h. ◆ Clear(). void TVirtualFitter::Clear ; (; Option_t * ; option = """"). overridepure virtual . Set name and title to empty strings (""""). ; Reimplemented from TNamed.; Implemented in TFumili, TBackCompFitter, TFitter, and TLinearFitter. ◆ DeclFileName(). static const char * TVirtualFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 120 of file TVirtualFitter.h. ◆ ExecuteCommand(). virtual Int_t TVirtualFitter::ExecuteCommand ; (; const char * ; command, . Double_t * ; args, . Int_t ; nargs . ). pure virtual . Implemented in TBackCompFitter, TFumili, TFitter, and TLinearFitter. ◆ Fitter(). TVirtualFitter * TVirtualFitter::Fitter ; (; TObject * ; obj, . Int_t ; maxpar = 25 . ). static . Static function returning a pointer to the current fitter. ; If the fitter does not exist, the default TFitter is created. Don't delete the returned fitter object, it will be re-used. ; Definition at line 159 of file TVirtualFitter.cxx. ◆ FixP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFitter.html:18301,Clear,Clear,18301,doc/master/classTVirtualFitter.html,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html,1,['Clear'],['Clear']
Usability,. protected . provides scroll bars ; Definition at line 41 of file TGedEditor.h. ◆ fCanvas. TCanvas* TGedEditor::fCanvas. protected . canvas related to the editor ; Definition at line 50 of file TGedEditor.h. ◆ fClass. TClass* TGedEditor::fClass. protected . class of the selected object ; Definition at line 51 of file TGedEditor.h. ◆ fCreatedTabs. TList TGedEditor::fCreatedTabs. protected . list of created tabs ; Definition at line 44 of file TGedEditor.h. ◆ fExclMap. TMap TGedEditor::fExclMap. protected . map of excluded editors for selected model ; Definition at line 38 of file TGedEditor.h. ◆ fFrameMap. TMap TGedEditor::fFrameMap. protected . global map of available frames ; Definition at line 37 of file TGedEditor.h. ◆ fGedFrames. TList TGedEditor::fGedFrames. protected . list visible of frames ; Definition at line 39 of file TGedEditor.h. ◆ fgFrameCreator. TGedEditor * TGedEditor::fgFrameCreator = 0. staticprotected . Definition at line 58 of file TGedEditor.h. ◆ fGlobal. Bool_t TGedEditor::fGlobal. protected . true if editor is global ; Definition at line 52 of file TGedEditor.h. ◆ fModel. TObject* TGedEditor::fModel. protected . selected object ; Definition at line 48 of file TGedEditor.h. ◆ fPad. TVirtualPad* TGedEditor::fPad. protected . selected pad ; Definition at line 49 of file TGedEditor.h. ◆ fTab. TGTab* TGedEditor::fTab. protected . tab widget holding the editor ; Definition at line 42 of file TGedEditor.h. ◆ fTabContainer. TGCompositeFrame* TGedEditor::fTabContainer. protected . main tab container ; Definition at line 46 of file TGedEditor.h. ◆ fVisibleTabs. TList TGedEditor::fVisibleTabs. protected . list ofcurrently used tabs ; Definition at line 45 of file TGedEditor.h. Libraries for TGedEditor:. [legend]; The documentation for this class was generated from the following files:; gui/ged/inc/TGedEditor.h; gui/ged/src/TGedEditor.cxx. TGedEditor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedEditor.html:50142,Guid,Guide,50142,doc/master/classTGedEditor.html,https://root.cern,https://root.cern/doc/master/classTGedEditor.html,1,['Guid'],['Guide']
Usability,". static const char * THnIter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t THnIter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 353 of file THnBase.h. ◆ DeclFileName(). static const char * THnIter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 353 of file THnBase.h. ◆ GetCoord(). Int_t THnIter::GetCoord ; (; Int_t ; dim); const. inline . Definition at line 347 of file THnBase.h. ◆ HaveSkippedBin(). Bool_t THnIter::HaveSkippedBin ; (; ); const. inline . Definition at line 348 of file THnBase.h. ◆ IsA(). TClass * THnIter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 353 of file THnBase.h. ◆ Next(). Long64_t THnIter::Next ; (; Int_t * ; coord = nullptr). inline . Return the next bin's index. ; If provided, set coord to that bin's coordinates (bin indexes). I.e. coord must point to Int_t[hist->GetNdimensions()] Returns -1 when all bins have been visited. ; Definition at line 343 of file THnBase.h. ◆ RespectsAxisRange(). Bool_t THnIter::RespectsAxisRange ; (; ); const. inline . Definition at line 349 of file THnBase.h. ◆ Streamer(). void THnIter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void THnIter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 353 of file THnBase.h. Member Data Documentation. ◆ fIter. ROOT::Internal::THnBaseBinIter* THnIter::fIter. private . Definition at line 352 of file THnBase.h. Libraries for THnIter:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THnBase.h; hist/hist/src/THnBase.cxx. THnIter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnIter.html:12608,Guid,Guide,12608,doc/master/classTHnIter.html,https://root.cern,https://root.cern/doc/master/classTHnIter.html,1,['Guid'],['Guide']
Usability,. staticprivate . Definition at line 97 of file TThread.h. ◆ fgThreadImp. TThreadImp * TThread::fgThreadImp = nullptr. staticprivate . Definition at line 90 of file TThread.h. ◆ fgXAct. std::atomic< char * > volatile TThread::fgXAct {nullptr}. staticprivate . Definition at line 91 of file TThread.h. ◆ fgXActCondi. TCondition * TThread::fgXActCondi = 0. staticprivate . Definition at line 99 of file TThread.h. ◆ fgXActMutex. TMutex * TThread::fgXActMutex = nullptr. staticprivate . Definition at line 98 of file TThread.h. ◆ fgXAnb. volatile Int_t TThread::fgXAnb = 0. staticprivate . Definition at line 93 of file TThread.h. ◆ fgXArr. void **volatile TThread::fgXArr = nullptr. staticprivate . Definition at line 92 of file TThread.h. ◆ fgXArt. volatile Int_t TThread::fgXArt = 0. staticprivate . Definition at line 94 of file TThread.h. ◆ fHandle. Longptr_t TThread::fHandle. private . Definition at line 81 of file TThread.h. ◆ fHolder. TThread** TThread::fHolder. private . Definition at line 76 of file TThread.h. ◆ fId. Long_t TThread::fId. private . Definition at line 80 of file TThread.h. ◆ fNamed. Bool_t TThread::fNamed. private . Definition at line 83 of file TThread.h. ◆ fNext. TThread* TThread::fNext. private . Definition at line 74 of file TThread.h. ◆ fPrev. TThread* TThread::fPrev. private . Definition at line 75 of file TThread.h. ◆ fPriority. EPriority TThread::fPriority. private . Definition at line 77 of file TThread.h. ◆ fState. EState TThread::fState. private . Definition at line 78 of file TThread.h. ◆ fStateComing. EState TThread::fStateComing. private . Definition at line 79 of file TThread.h. ◆ fThreadArg. void* TThread::fThreadArg. private . Definition at line 86 of file TThread.h. Libraries for TThread:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/TThread.h; core/thread/src/TThread.cxx. TThread. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:34458,Guid,Guide,34458,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['Guid'],['Guide']
Usability,". template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RColor > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void > ; (; const Value_t * ; rec). ◆ REveLog(). REX::RLogChannel & ROOT::Experimental::REveLog ; (; ). Log channel for Eve diagnostics. ; Definition at line 51 of file REveTypes.cxx. ◆ swap(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . void ROOT::Experimental::swap ; (; RHist< DIMENSIONS, PRECISION, STAT... > & ; a, . RHist< DIMENSIONS, PRECISION, STAT... > & ; b . ). noexcept . Swap two histograms. ; Very efficient; swaps the fImpl pointers. ; Definition at line 210 of file RHist.hxx. Variable Documentation. ◆ gEve. REveManager * ROOT::Experimental::gEve = nullptr. Definition at line 286 of file REveManager.hxx. ◆ kInvalidColumnId. constexpr ColumnId_t ROOT::Experimental::kInvalidColumnId = -1. constexpr . Definition at line 163 of file RNTupleUtil.hxx. ◆ kInvalidDescriptorId. constexpr DescriptorId_t ROOT::Experimental::kInvalidDescriptorId = std::uint64_t(-1). constexpr . Definition at line 167 of file RNTupleUtil.hxx. ◆ kInvalidNTupleIndex. constexpr NTupleSize_t ROOT::Experimental::kInvalidNTupleIndex = std::uint64_t(-1). constexpr . Definition at line 116 of file RNTupleUtil.hxx. ◆ kUnknownCompressionSettings. constexpr int ROOT::Experimental::kUnknownCompressionSettings = -1. constexpr . Definition at line 146 of file RNTupleUtil.hxx. ROOTExperimental. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:58572,Guid,Guide,58572,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,1,['Guid'],['Guide']
Usability,". template<class T > . virtual T ROOT::Math::IParametricFunctionMultiDimTempl< T >::DoEval ; (; const T * ; x); const. inlineprivatevirtual . Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Reimplemented in ROOT::Math::WrappedParamFunctionGen< FuncPtr >, ROOT::Math::WrappedMultiTF1Templ< T >, and ROOT::Math::IParametricGradFunctionMultiDimTempl< T >.; Definition at line 143 of file IParamFunction.h. ◆ DoEvalPar(). template<class T > . virtual T ROOT::Math::IParametricFunctionMultiDimTempl< T >::DoEvalPar ; (; const T * ; x, . const double * ; p . ); const. privatepure virtual . Implementation of the evaluation function using the x values and the parameters. ; Must be implemented by derived classes ; Implemented in ROOT::Math::MultiDimParamFunctionAdapter, ROOT::Math::WrappedParamFunction< FuncPtr >, ROOT::Math::WrappedParamFunctionGen< FuncPtr >, ROOT::Math::WrappedMultiTF1Templ< T >, and ROOT::Math::IParametricGradFunctionMultiDimTempl< T >. ◆ operator()() [1/2]. template<class T > . T ROOT::Math::IParametricFunctionMultiDimTempl< T >::operator() ; (; const T * ; x); const. inline . Definition at line 128 of file IParamFunction.h. ◆ operator()() [2/2]. template<class T > . T ROOT::Math::IParametricFunctionMultiDimTempl< T >::operator() ; (; const T * ; x, . const double * ; p . ); const. inline . Evaluate function at a point x and for given parameters p. ; This method does not change the internal status of the function (internal parameter values). If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be called. Use the pure virtual function DoEvalPar to implement it ; Definition at line 123 of file IParamFunction.h. math/mathcore/inc/Math/IParamFunction.h. ROOTMathIParametricFunctionMultiDimTempl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:4941,Guid,Guide,4941,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,1,['Guid'],['Guide']
Usability,. template<typename Architecture_t > . Scalar_t TMVA::DNN::TBatchNormLayer< Architecture_t >::fEpsilon. private . Definition at line 82 of file BatchNormLayer.h. ◆ fIVar. template<typename Architecture_t > . Matrix_t TMVA::DNN::TBatchNormLayer< Architecture_t >::fIVar. private . Definition at line 86 of file BatchNormLayer.h. ◆ fMomentum. template<typename Architecture_t > . Scalar_t TMVA::DNN::TBatchNormLayer< Architecture_t >::fMomentum. private . The weight decay. ; Definition at line 81 of file BatchNormLayer.h. ◆ fMu. template<typename Architecture_t > . Matrix_t TMVA::DNN::TBatchNormLayer< Architecture_t >::fMu. private . Definition at line 84 of file BatchNormLayer.h. ◆ fMu_Training. template<typename Architecture_t > . Matrix_t TMVA::DNN::TBatchNormLayer< Architecture_t >::fMu_Training. private . Definition at line 88 of file BatchNormLayer.h. ◆ fNormAxis. template<typename Architecture_t > . int TMVA::DNN::TBatchNormLayer< Architecture_t >::fNormAxis. private . Normalization axis. For each element of this axis we will compute mean and stddev. ; Definition at line 79 of file BatchNormLayer.h. ◆ fReshapedData. template<typename Architecture_t > . Tensor_t TMVA::DNN::TBatchNormLayer< Architecture_t >::fReshapedData. private . Definition at line 92 of file BatchNormLayer.h. ◆ fTrainedBatches. template<typename Architecture_t > . int TMVA::DNN::TBatchNormLayer< Architecture_t >::fTrainedBatches = 0. private . Definition at line 95 of file BatchNormLayer.h. ◆ fVar. template<typename Architecture_t > . Matrix_t TMVA::DNN::TBatchNormLayer< Architecture_t >::fVar. private . Definition at line 85 of file BatchNormLayer.h. ◆ fVar_Training. template<typename Architecture_t > . Matrix_t TMVA::DNN::TBatchNormLayer< Architecture_t >::fVar_Training. private . Definition at line 89 of file BatchNormLayer.h. tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h. TMVADNNTBatchNormLayer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html:21995,Guid,Guide,21995,doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,1,['Guid'],['Guide']
Usability,". the observable names. ;  ; void printClassName (std::ostream &os) const override;  Print class name of dataset. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose, TString indent) const override;  Detailed printing interface. ;  ; void printName (std::ostream &os) const override;  Print name of dataset. ;  ; void printTitle (std::ostream &os) const override;  Print title of dataset. ;  ; void printValue (std::ostream &os) const override;  Print value of the dataset, i.e. the sum of weights contained in the dataset. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const TTree * tree () const;  ; double weight (Int_t index) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:8449,Clear,Clear,8449,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['Clear'],['Clear']
Usability,". timespec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » timespec. class timespec. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. This class is also known as (typedefs to this class)timespec_t. Function Members (Methods); public:. timespec(); timespec(const timespec&); ~timespec(); timespec&operator=(const timespec&). Data Members; public:. longtv_nsecnanoseconds; time_ttv_secseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: R. Hatcher 30/9/2001 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TTimeStamp.h 32404 2010-02-25 12:06:10Z rdm $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/timespec.html:696,simpl,simply,696,root/html528/timespec.html,https://root.cern,https://root.cern/root/html528/timespec.html,1,['simpl'],['simply']
Usability,". timespec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » timespec. class timespec. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. This class is also known as (typedefs to this class)timespec_t. Function Members (Methods); public:. timespec(); timespec(const timespec&); ~timespec(); timespec&operator=(const timespec&). Data Members; public:. longtv_nsecnanoseconds; time_ttv_secseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: R. Hatcher 30/9/2001 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/timespec.html:698,simpl,simply,698,root/html534/timespec.html,https://root.cern,https://root.cern/root/html534/timespec.html,1,['simpl'],['simply']
Usability,". timespec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » timespec. class timespec. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. This class is also known as (typedefs to this class)timespec_t. Function Members (Methods); public:. timespec(); timespec(const timespec&); ~timespec(); timespec&operator=(const timespec&). Data Members; public:. longtv_nsecnanoseconds; time_ttv_secseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: R. Hatcher 30/9/2001 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TTimeStamp.h 32404 2010-02-25 12:06:10Z rdm $ » Last generated: 2011-07-04 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/timespec.html:698,simpl,simply,698,root/html530/timespec.html,https://root.cern,https://root.cern/root/html530/timespec.html,1,['simpl'],['simply']
Usability,". timespec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » timespec. class timespec. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. This class is also known as (typedefs to this class)timespec_t. Function Members (Methods); public:. timespec(); timespec(const timespec&); ~timespec(); timespec&operator=(const timespec&). Data Members; public:. longtv_nsecnanoseconds; time_ttv_secseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: R. Hatcher 30/9/2001 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TTimeStamp.h 32404 2010-02-25 12:06:10Z rdm $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/timespec.html:698,simpl,simply,698,root/html532/timespec.html,https://root.cern,https://root.cern/root/html532/timespec.html,1,['simpl'],['simply']
Usability,". unsigned ROOT::RWebWindowsManager::fIdCnt {0}. private . ! counter for identifiers ; Definition at line 50 of file RWebWindowsManager.hxx. ◆ fLaunchTmout. float ROOT::RWebWindowsManager::fLaunchTmout {30.}. private . ! timeout in seconds to start browser process, default 30s ; Definition at line 53 of file RWebWindowsManager.hxx. ◆ fMutex. std::recursive_mutex ROOT::RWebWindowsManager::fMutex. private . ! main mutex, used for window creations ; Definition at line 49 of file RWebWindowsManager.hxx. ◆ fServer. std::unique_ptr<THttpServer> ROOT::RWebWindowsManager::fServer. private . ! central communication with the all used displays ; Definition at line 45 of file RWebWindowsManager.hxx. ◆ fSessionKey. std::string ROOT::RWebWindowsManager::fSessionKey. private . ! secret session key used on client to code connections keys ; Definition at line 47 of file RWebWindowsManager.hxx. ◆ fShowCallback. WebWindowShowCallback_t ROOT::RWebWindowsManager::fShowCallback. private . ! function called for each RWebWindow::Show call ; Definition at line 56 of file RWebWindowsManager.hxx. ◆ fUseHttpThrd. bool ROOT::RWebWindowsManager::fUseHttpThrd {false}. private . ! use special thread for THttpServer ; Definition at line 51 of file RWebWindowsManager.hxx. ◆ fUseSenderThreads. bool ROOT::RWebWindowsManager::fUseSenderThreads {false}. private . ! use extra threads for sending data from RWebWindow to clients ; Definition at line 52 of file RWebWindowsManager.hxx. ◆ fUseSessionKey. bool ROOT::RWebWindowsManager::fUseSessionKey {false}. private . ! is session key has to be used for data signing ; Definition at line 48 of file RWebWindowsManager.hxx. Libraries for ROOT::RWebWindowsManager:. [legend]; The documentation for this class was generated from the following files:; gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx; gui/webdisplay/src/RWebWindowsManager.cxx. ROOTRWebWindowsManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:24638,Guid,Guide,24638,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['Guid'],['Guide']
Usability,". virtual TArrayD * TProfile2D::GetBinSumw2 ; (; ). inlinevirtual . Definition at line 121 of file TProfile2D.h. ◆ GetBinSumw2() [2/2]. virtual const TArrayD * TProfile2D::GetBinSumw2 ; (; ); const. inlinevirtual . Definition at line 122 of file TProfile2D.h. ◆ GetErrorOption(). Option_t * TProfile2D::GetErrorOption ; (; ); const. Return option to compute profile2D errors. ; Definition at line 889 of file TProfile2D.cxx. ◆ GetNumberOfBins(). Double_t TProfile2D::GetNumberOfBins ; (; ). inline . Definition at line 151 of file TProfile2D.h. ◆ GetStats(). void TProfile2D::GetStats ; (; Double_t * ; stats); const. overridevirtual . Fill the array stats from the contents of this profile. ; The array stats must be correctly dimensioned in the calling program. stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2. If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range is specified, the function recomputes these quantities from the bin contents in the current axis range. ; Reimplemented from TH2.; Definition at line 916 of file TProfile2D.cxx. ◆ GetW(). Double_t * TProfile2D::GetW ; (; ). inlineprivate . Definition at line 65 of file TProfile2D.h. ◆ GetW2(). Double_t * TProfile2D::GetW2 ; (; ). inlineprivate . Definition at line 66 of file TProfile2D.h. ◆ GetZmax(). virtual Double_t TProfile2D::GetZmax ; (; ); const. inlinevirtual . Definition at line 126 of file TProfile2D.h. ◆ GetZmin(). virtual Double_t TProfile2D::GetZmin ; (; ); const. inlinevirtual . Definition at line 125 of file TProfile2D.h. ◆ IsA(). TClass * TProfile2D::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH2D.; Definition at line 153 of file TProfile2D.h. ◆ LabelsDeflate(). void TProfile2D::LabelsDeflate ; (; Option_t * ; axis = ""X""). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:90601,simpl,simply,90601,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['simpl'],['simply']
Usability,". virtual double RooAbsDataStore::sumEntries ; (; ); const. inlinevirtual . Reimplemented in RooCompositeDataStore, RooTreeDataStore, and RooVectorDataStore.; Definition at line 96 of file RooAbsDataStore.h. ◆ tree(). virtual const TTree * RooAbsDataStore::tree ; (; ); const. inlinevirtual . Reimplemented in RooTreeDataStore.; Definition at line 141 of file RooAbsDataStore.h. ◆ weight() [1/2]. virtual double RooAbsDataStore::weight ; (; ); const. pure virtual . Implemented in RooCompositeDataStore, RooTreeDataStore, RooVectorDataStore, RooCompositeDataStore, RooTreeDataStore, and RooVectorDataStore. ◆ weight() [2/2]. double RooAbsDataStore::weight ; (; Int_t ; index); const. inline . Definition at line 66 of file RooAbsDataStore.h. ◆ weightError() [1/2]. virtual void RooAbsDataStore::weightError ; (; double & ; lo, . double & ; hi, . RooAbsData::ErrorType ; etype = RooAbsData::Poisson . ); const. pure virtual . Implemented in RooCompositeDataStore, RooTreeDataStore, and RooVectorDataStore. ◆ weightError() [2/2]. virtual double RooAbsDataStore::weightError ; (; RooAbsData::ErrorType ; etype = RooAbsData::Poisson); const. pure virtual . Implemented in RooCompositeDataStore, RooTreeDataStore, and RooVectorDataStore. Member Data Documentation. ◆ _cachedVars. RooArgSet RooAbsDataStore::_cachedVars. protected . Definition at line 152 of file RooAbsDataStore.h. ◆ _doDirtyProp. bool RooAbsDataStore::_doDirtyProp = true. protected . Switch do (de)activate dirty state propagation when loading a data point. ; Definition at line 154 of file RooAbsDataStore.h. ◆ _vars. RooArgSet RooAbsDataStore::_vars. protected . Definition at line 151 of file RooAbsDataStore.h. Libraries for RooAbsDataStore:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsDataStore.h; roofit/roofitcore/src/RooAbsDataStore.cxx. RooAbsDataStore. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsDataStore.html:30423,Guid,Guide,30423,doc/master/classRooAbsDataStore.html,https://root.cern,https://root.cern/doc/master/classRooAbsDataStore.html,1,['Guid'],['Guide']
Usability,". void AddPoint(Double_t* x, Double_t y, Double_t e = 1); Adds 1 point to the fitter.; First parameter stands for the coordinates of the point, where the function is measured; Second parameter - the value being fitted; Third parameter - weight(measurement error) of this point (=1 by default). void AssignData(Int_t npoints, Int_t xncols, Double_t* x, Double_t* y, Double_t* e = 0); This function is to use when you already have all the data in arrays; and don't want to copy them into the fitter. In this function, the Use() method; of TVectorD and TMatrixD is used, so no bytes are physically moved around.; First parameter - number of points to fit; Second parameter - number of variables in the model; Third parameter - the variables of the model, stored in the following way:; (x0(0), x1(0), x2(0), x3(0), x0(1), x1(1), x2(1), x3(1),... void AddToDesign(Double_t* x, Double_t y, Double_t e); Add a point to the AtA matrix and to the Atb vector. void AddTempMatrices(). void Clear(Option_t* option = """"); Clears everything. Used in TH1::Fit and TGraph::Fit(). void ClearPoints(); To be used when different sets of points are fitted with the same formula. void Chisquare(); Calculates the chisquare. void ComputeTValues(); Computes parameters' t-values and significance. Int_t Eval(); Perform the fit and evaluate the parameters; Returns 0 if the fit is ok, 1 if there are errors. void FixParameter(Int_t ipar); Fixes paramter #ipar at its current value. void FixParameter(Int_t ipar, Double_t parvalue); Fixes parameter #ipar at value parvalue. void ReleaseParameter(Int_t ipar); Releases parameter #ipar. void GetAtbVector(TVectorD& v); Get the Atb vector - a vector, used for internal computations. Double_t GetChisquare(); Get the Chisquare. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.94999999999999996); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearFitter.html:23079,Clear,Clear,23079,root/html602/TLinearFitter.html,https://root.cern,https://root.cern/root/html602/TLinearFitter.html,4,['Clear'],"['Clear', 'Clears']"
Usability,". void AddPoint(Double_t* x, Double_t y, Double_t e = 1); Adds 1 point to the fitter.; First parameter stands for the coordinates of the point, where the function is measured; Second parameter - the value being fitted; Third parameter - weight(measurement error) of this point (=1 by default). void AssignData(Int_t npoints, Int_t xncols, Double_t* x, Double_t* y, Double_t* e = 0); This function is to use when you already have all the data in arrays; and don't want to copy them into the fitter. In this function, the Use() method; of TVectorD and TMatrixD is used, so no bytes are physically moved around.; First parameter - number of points to fit; Second parameter - number of variables in the model; Third parameter - the variables of the model, stored in the following way:; (x0(0), x1(0), x2(0), x3(0), x0(1), x1(1), x2(1), x3(1),... void AddToDesign(Double_t* x, Double_t y, Double_t e); Add a point to the AtA matrix and to the Atb vector. void AddTempMatrices(). void Clear(Option_t* option = """"); Clears everything. Used in TH1::Fit and TGraph::Fit(). void ClearPoints(); To be used when different sets of points are fitted with the same formula. void Chisquare(); Calculates the chisquare. void ComputeTValues(); Computes parameters' t-values and significance. Int_t Eval(); Perform the fit and evaluate the parameters; Returns 0 if the fit is ok, 1 if there are errors. void FixParameter(Int_t ipar); Fixes paramter #ipar at its current value. void FixParameter(Int_t ipar, Double_t parvalue); Fixes parameter #ipar at value parvalue. void ReleaseParameter(Int_t ipar); Releases parameter #ipar. void GetAtbVector(TVectorD& v); Get the Atb vector - a vector, used for internal computations. Double_t GetChisquare(); Get the Chisquare. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.95); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearFitter.html:22442,Clear,Clear,22442,root/html528/TLinearFitter.html,https://root.cern,https://root.cern/root/html528/TLinearFitter.html,8,['Clear'],"['Clear', 'Clears']"
Usability,". void DrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); Draw a line.; x1,y1 : begin of line; x2,y2 : end of line. void DrawPolyLine(Int_t n, TPoint* xy); Draw a line through all points.; n : number of points; xy : list of points. void DrawPolyMarker(Int_t n, TPoint* xy); Draw n markers with the current attributes at position x, y.; n : number of markers to draw; xy : x,y coordinates of markers. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); Draw a text string using current font.; mode : drawing mode; mode=0 : the background is not drawn (kClear); mode=1 : the background is drawn (kOpaque); x,y : text position; angle : text angle; mgn : magnification factor; text : text string. void FindBestVisual(); Find best visual, i.e. the one with the most planes and TrueColor or; DirectColor. Sets fVisual, fDepth, fRootWin, fColormap, fBlackPixel; and fWhitePixel. void FindUsableVisual(RXVisualInfo* vlist, Int_t nitems); Check if visual is usable, if so set fVisual, fDepth, fColormap,; fBlackPixel and fWhitePixel. void GetCharacterUp(Float_t& chupx, Float_t& chupy); Return character up vector. XColor_t & GetColor(Int_t cid); Return reference to internal color structure associated; to color index cid. Window_t GetCurrentWindow() const; Return current window pointer. Protected method used by TGX11TTF. void * GetGC(Int_t which) const; Return desired Graphics Context (""which"" maps directly on gGCList[]).; Protected method used by TGX11TTF. Int_t GetDoubleBuffer(Int_t wid); Query the double buffer value for the window wid. void GetGeometry(Int_t wid, Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); Return position and size of window wid.; wid : window identifier; x,y : window position (output); w,h : window size (output); if wid < 0 the size of the display is returned. const char * DisplayName(const char* dpyName = 0); Return hostname on which the display is opened. ULong_t GetPixel(Color_t cindex); Return pixel value associated t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11.html:29639,usab,usable,29639,root/html602/TGX11.html,https://root.cern,https://root.cern/root/html602/TGX11.html,2,['usab'],['usable']
Usability,". void DrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); Draw a line.; x1,y1 : begin of line; x2,y2 : end of line. void DrawPolyLine(Int_t n, TPoint* xy); Draw a line through all points.; n : number of points; xy : list of points. void DrawPolyMarker(Int_t n, TPoint* xy); Draw n markers with the current attributes at position x, y.; n : number of markers to draw; xy : x,y coordinates of markers. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); Draw a text string using current font.; mode : drawing mode; mode=0 : the background is not drawn (kClear); mode=1 : the background is drawn (kOpaque); x,y : text position; angle : text angle; mgn : magnification factor; text : text string. void FindBestVisual(); Find best visual, i.e. the one with the most planes and TrueColor or; DirectColor. Sets fVisual, fDepth, fRootWin, fColormap, fBlackPixel; and fWhitePixel. void FindUsableVisual(XVisualInfo* vlist, Int_t nitems); Check if visual is usable, if so set fVisual, fDepth, fColormap,; fBlackPixel and fWhitePixel. void GetCharacterUp(Float_t& chupx, Float_t& chupy); Return character up vector. XColor_t & GetColor(Int_t cid); Return reference to internal color structure associated; to color index cid. Window_t GetCurrentWindow() const; Return current window pointer. Protected method used by TGX11TTF. GC * GetGC(Int_t which) const; Return desired Graphics Context (""which"" maps directly on gGCList[]).; Protected method used by TGX11TTF. Int_t GetDoubleBuffer(Int_t wid); Query the double buffer value for the window wid. void GetGeometry(Int_t wid, Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); Return position and size of window wid.; wid : window identifier; x,y : window position (output); w,h : window size (output); if wid < 0 the size of the display is returned. const char * DisplayName(const char* dpyName = 0); Return hostname on which the display is opened. ULong_t GetPixel(Color_t cindex); Return pixel value associated to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:27753,usab,usable,27753,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,4,['usab'],['usable']
Usability,". void GetRhoItotal(TH1* rhoi, const Int_t* binMap = 0, TH2* invEmat = 0); get global correlation coefficients including systematic,statistical,background,tau errors; rhoi: output histogram; binMap: for each global bin, indicate in which histogram bin; to store its content; invEmat: output histogram for inverse of error matrix; (pointer may zero if inverse is not requested). TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap). void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat). TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea). void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode). void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1., Double_t scale_error = 0.). Bool_t GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0). void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: Tue Jun 2 14:10:12 2015 » Last generated: 2015-06-02 14:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:21240,clear,clearEmat,21240,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,4,['clear'],['clearEmat']
Usability,". void GetRhoItotal(TH1* rhoi, const Int_t* binMap = 0, TH2* invEmat = 0); get global correlation coefficients including systematic,statistical,background,tau errors; rhoi: output histogram; binMap: for each global bin, indicate in which histogram bin; to store its content; invEmat: output histogram for inverse of error matrix; (pointer may zero if inverse is not requested). TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap). void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat). TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea). void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode). void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1., Double_t scale_error = 0.). Bool_t GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0). void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: Tue Jun 2 16:35:15 2015 » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TUnfoldSys.html:21240,clear,clearEmat,21240,root/html604/TUnfoldSys.html,https://root.cern,https://root.cern/root/html604/TUnfoldSys.html,4,['clear'],['clearEmat']
Usability,". void ReadListOfBlocks(); Get blocks specified in prefetchBlocks. Bool_t BinarySearchReadList(TFPBlock* , Long64_t , Int_t , Int_t* ); Search for a requested element in a block and return the index. Long64_t GetWaitTime(); Return the time spent wating for buffer to be read in microseconds. Bool_t ReadBuffer(char* , Long64_t , Int_t ); Return a prefetched element. void ReadBlock(Long64_t* , Int_t* , Int_t ); Create a TFPBlock object or recycle one and add it to the prefetchBlocks list. void AddPendingBlock(TFPBlock* ); Safe method to add a block to the pendingList. TFPBlock* GetPendingBlock(); Safe method to remove a block from the pendingList. void AddReadBlock(TFPBlock* ); Safe method to add a block to the readList. TFPBlock* CreateBlockObj(Long64_t* , Int_t* , Int_t ); Create a new block or recycle an old one. TThread* GetThread() const; Return reference to the consumer thread. void SetFile(TFile* ); Change the file; When prefetching is enabled we also need to:; - make sure the async thread is not doing any work; - clear all blocks from prefetching and read list; - reset the file pointer. Int_t ThreadStart(); Used to start the consumer thread. TThread::VoidRtnFunc_t ThreadProc(void* ); Execution loop of the consumer thread. Int_t SumHex(const char* ); Sum up individual hex values to obtain a decimal value. Bool_t CheckBlockInCache(char*& , TFPBlock* ); Test if the block is in cache. char* GetBlockFromCache(const char* , Int_t ); Return a buffer from cache. void SaveBlockInCache(TFPBlock* ); Save the block content in cache. Bool_t SetCache(const char* ); Set the path of the cache directory. TFilePrefetch(TFile* ). TCondition* GetCondNewBlock() const; { return fNewBlockAdded; }. » Author: Elvin Sindrilaru 19/05/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/io: » Last generated: 2015-03-13 19:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFilePrefetch.html:7984,clear,clear,7984,root/html534/TFilePrefetch.html,https://root.cern,https://root.cern/root/html534/TFilePrefetch.html,1,['clear'],['clear']
Usability,". void ReadListOfBlocks(); Get blocks specified in prefetchBlocks. Bool_t BinarySearchReadList(TFPBlock* , Long64_t , Int_t , Int_t* ); Search for a requested element in a block and return the index. Long64_t GetWaitTime(); Return the time spent wating for buffer to be read in microseconds. Bool_t ReadBuffer(char* , Long64_t , Int_t ); Return a prefetched element. void ReadBlock(Long64_t* , Int_t* , Int_t ); Create a TFPBlock object or recycle one and add it to the prefetchBlocks list. void AddPendingBlock(TFPBlock* ); Safe method to add a block to the pendingList. TFPBlock* GetPendingBlock(); Safe method to remove a block from the pendingList. void AddReadBlock(TFPBlock* ); Safe method to add a block to the readList. TFPBlock* CreateBlockObj(Long64_t* , Int_t* , Int_t ); Create a new block or recycle an old one. TThread* GetThread() const; Return reference to the consumer thread. void SetFile(TFile* ); Change the file; When prefetching is enabled we also need to:; - make sure the async thread is not doing any work; - clear all blocks from prefetching and read list; - reset the file pointer. Int_t ThreadStart(); Used to start the consumer thread. TThread::VoidRtnFunc_t ThreadProc(void* ); Execution loop of the consumer thread. Int_t SumHex(const char* ); Sum up individual hex values to obtain a decimal value. Bool_t CheckBlockInCache(char*& , TFPBlock* ); Test if the block is in cache. char* GetBlockFromCache(const char* , Int_t ); Return a buffer from cache. void SaveBlockInCache(TFPBlock* ); Save the block content in cache. Bool_t SetCache(const char* ); Set the path of the cache directory. TFilePrefetch(TFile* ). TCondition* GetCondNewBlock() const; { return fNewBlockAdded; }. » Author: Elvin Sindrilaru 19/05/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-02 15:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFilePrefetch.html:8445,clear,clear,8445,root/html604/TFilePrefetch.html,https://root.cern,https://root.cern/root/html604/TFilePrefetch.html,1,['clear'],['clear']
Usability,". void ReadListOfBlocks(); Get blocks specified in prefetchBlocks. Bool_t BinarySearchReadList(TFPBlock* , Long64_t , Int_t , Int_t* ); Search for a requested element in a block and return the index. Long64_t GetWaitTime(); Return the time spent wating for buffer to be read in microseconds. Bool_t ReadBuffer(char* , Long64_t , Int_t ); Return a prefetched element. void ReadBlock(Long64_t* , Int_t* , Int_t ); Create a TFPBlock object or recycle one and add it to the prefetchBlocks list. void AddPendingBlock(TFPBlock* ); Safe method to add a block to the pendingList. TFPBlock* GetPendingBlock(); Safe method to remove a block from the pendingList. void AddReadBlock(TFPBlock* ); Safe method to add a block to the readList. TFPBlock* CreateBlockObj(Long64_t* , Int_t* , Int_t ); Create a new block or recycle an old one. TThread* GetThread() const; Return reference to the consumer thread. void SetFile(TFile* ); Change the file; When prefetching is enabled we also need to:; - make sure the async thread is not doing any work; - clear all blocks from prefetching and read list; - reset the file pointer. Int_t ThreadStart(); Used to start the consumer thread. TThread::VoidRtnFunc_t ThreadProc(void* ); Execution loop of the consumer thread. Int_t SumHex(const char* ); Sum up individual hex values to obtain a decimal value. Bool_t CheckBlockInCache(char*& , TFPBlock* ); Test if the block is in cache. char* GetBlockFromCache(const char* , Int_t ); Return a buffer from cache. void SaveBlockInCache(TFPBlock* ); Save the block content in cache. Bool_t SetCache(const char* ); Set the path of the cache directory. TFilePrefetch(TFile* ). TCondition* GetCondNewBlock() const; { return fNewBlockAdded; }. » Author: Elvin Sindrilaru 19/05/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 14:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFilePrefetch.html:8445,clear,clear,8445,root/html602/TFilePrefetch.html,https://root.cern,https://root.cern/root/html602/TFilePrefetch.html,1,['clear'],['clear']
Usability,". void RooMultiVarGaussian::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 112 of file RooMultiVarGaussian.h. ◆ syncMuVec(). void RooMultiVarGaussian::syncMuVec ; (; ); const. protected . Definition at line 163 of file RooMultiVarGaussian.cxx. ◆ xVec(). const RooArgList & RooMultiVarGaussian::xVec ; (; ); const. inline . Definition at line 52 of file RooMultiVarGaussian.h. Member Data Documentation. ◆ _aicMap. std::vector<BitBlock> RooMultiVarGaussian::_aicMap. mutableprotected . ! ; Definition at line 96 of file RooMultiVarGaussian.h. ◆ _anaIntCache. std::map<int,AnaIntData> RooMultiVarGaussian::_anaIntCache. mutableprotected . ! ; Definition at line 93 of file RooMultiVarGaussian.h. ◆ _cov. TMatrixDSym RooMultiVarGaussian::_cov. protected . Definition at line 100 of file RooMultiVarGaussian.h. ◆ _covI. TMatrixDSym RooMultiVarGaussian::_covI. protected . Definition at line 101 of file RooMultiVarGaussian.h. ◆ _det. double RooMultiVarGaussian::_det. protected . Definition at line 102 of file RooMultiVarGaussian.h. ◆ _genCache. std::map<int,GenData> RooMultiVarGaussian::_genCache. mutableprotected . ! ; Definition at line 94 of file RooMultiVarGaussian.h. ◆ _mu. RooListProxy RooMultiVarGaussian::_mu. protected . Definition at line 99 of file RooMultiVarGaussian.h. ◆ _muVec. TVectorD RooMultiVarGaussian::_muVec. mutableprotected . Definition at line 106 of file RooMultiVarGaussian.h. ◆ _x. RooListProxy RooMultiVarGaussian::_x. protected . Definition at line 98 of file RooMultiVarGaussian.h. ◆ _z. double RooMultiVarGaussian::_z. protected . Definition at line 103 of file RooMultiVarGaussian.h. Libraries for RooMultiVarGaussian:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooMultiVarGaussian.h; roofit/roofitcore/src/RooMultiVarGaussian.cxx. RooMultiVarGaussian. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:82919,Guid,Guide,82919,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['Guid'],['Guide']
Usability,. void TGScrollBarElement::SetEnabled ; (; Bool_t ; on = kTRUE). virtual . Enable/Disable scroll bar button chaging the state. ; Definition at line 149 of file TGScrollBar.cxx. ◆ SetState(). void TGScrollBarElement::SetState ; (; Int_t ; state). virtual . Change state of scrollbar element (either up or down). ; Definition at line 127 of file TGScrollBar.cxx. ◆ Streamer(). void TGScrollBarElement::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGScrollBarElement::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file TGScrollBar.h. Member Data Documentation. ◆ fBgndColor. Pixel_t TGScrollBarElement::fBgndColor. protected . background color ; Definition at line 40 of file TGScrollBar.h. ◆ fHighColor. Pixel_t TGScrollBarElement::fHighColor. protected . highlight color ; Definition at line 41 of file TGScrollBar.h. ◆ fPic. const TGPicture* TGScrollBarElement::fPic. protected . picture in scrollbar element ; Definition at line 37 of file TGScrollBar.h. ◆ fPicD. const TGPicture* TGScrollBarElement::fPicD. protected . picture for disabled state of scrollbar element ; Definition at line 39 of file TGScrollBar.h. ◆ fPicN. const TGPicture* TGScrollBarElement::fPicN. protected . picture for normal state of scrollbar element ; Definition at line 38 of file TGScrollBar.h. ◆ fState. Int_t TGScrollBarElement::fState. protected . state of scrollbar element (button up or down) ; Definition at line 36 of file TGScrollBar.h. ◆ fStyle. Int_t TGScrollBarElement::fStyle. protected . modern or classic style ; Definition at line 42 of file TGScrollBar.h. Libraries for TGScrollBarElement:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGScrollBar.h; gui/gui/src/TGScrollBar.cxx. TGScrollBarElement. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBarElement.html:32069,Guid,Guide,32069,doc/master/classTGScrollBarElement.html,https://root.cern,https://root.cern/doc/master/classTGScrollBarElement.html,1,['Guid'],['Guide']
Usability,". };  . Public Member Functions; virtual TMethod * GetMethod () const =0;  ; virtual Int_t GetOverloadIdx () const =0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMethodWrapper.html:1918,Clear,Clear,1918,doc/master/classTDocMethodWrapper.html,https://root.cern,https://root.cern/doc/master/classTDocMethodWrapper.html,1,['Clear'],['Clear']
Usability,".  . Loading...; Searching...; No Matches. Namespaces ; tmva101_Training.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ; Using XGBoost, we illustrate how you can convert an externally trained model in a format serializable and readable with the fast tree inference engine offered by TMVA.; ; # XGBoost has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227; from xgboost import XGBClassifier; ; import ROOT; import numpy as np; ; from tmva100_DataPreparation import variables; ; ; def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(); ; # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]); ; # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]); ; # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]); ; return x, y, w; ; if __name__ == ""__main__"":; # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""); ; # Fit xgboost model; bdt = XGBClassifier(max_depth=3, n_estimators=500); bdt.fit(x, y, sample_weight=w); ; # Save model in TMVA format; print(""Training done on "",x.shape[0],""events. Saving model in tmva101.root""); ROOT.TMVA.Experimental.SaveXGBoost(bdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva101__Training_8py.html:1114,learn,learning,1114,doc/master/tmva101__Training_8py.html,https://root.cern,https://root.cern/doc/master/tmva101__Training_8py.html,1,['learn'],['learning']
Usability,".  . Loading...; Searching...; No Matches. tree1.C File ReferenceTutorials » Tree tutorials. Detailed Description; This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ; It shows:; how to fill a Tree with a few simple variables.; how to read this Tree; how to browse and analyze the Tree via the TBrowser and TTreeViewer This example can be run in many different ways:. Using the Cling interpreter .x tree1.C. Using the automatic compiler interface .x tree1.C++. .L tree1.C or .L tree1.C++; tree1(); One can also run the write and read parts in two separate sessions. For example following one of the sessions above, one can start the session: .L tree1.C; tree1r();; ; #include ""TROOT.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TBrowser.h""; #include ""TH2.h""; #include ""TRandom.h""; ; void tree1w(); {; //create a Tree file tree1.root; ; //create the file, the Tree and a few branches; TFile f(""tree1.root"",""recreate"");; TTree t1(""t1"",""a simple Tree with simple variables"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1.Branch(""px"",&px,""px/F"");; t1.Branch(""py"",&py,""py/F"");; t1.Branch(""pz"",&pz,""pz/F"");; t1.Branch(""random"",&random,""random/D"");; t1.Branch(""ev"",&ev,""ev/I"");; ; //fill the tree; for (Int_t i=0;i<10000;i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; random = gRandom->Rndm();; ev = i;; t1.Fill();; }; ; //save the Tree header. The file will be automatically closed; //when going out of the function scope; t1.Write();; }; ; void tree1r(); {; //read the Tree generated by tree1w and fill two histograms; ; //note that we use ""new"" to create the TFile and TTree objects !; //because we want to keep these objects alive when we leave this function.; TFile *f = new TFile(""tree1.root"");; TTree *t1 = (TTree*)f->Get(""t1"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1->SetBranchAddress(""px"",&px);; t1->SetBranchAddress(""py"",&py);; t1->SetBranchAddress(""pz"",&pz);; t1->SetBranchAddress(""random"",&random);; t1->SetBranchAddress(""ev"",&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree1_8C.html:1058,simpl,simple,1058,doc/master/tree1_8C.html,https://root.cern,https://root.cern/doc/master/tree1_8C.html,2,['simpl'],['simple']
Usability,". ◆ Chisquare(). Double_t TH1::Chisquare ; (; TF1 * ; func, . Option_t * ; option = """" . ); const. virtual . Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ; Use option ""R"" for restricting the chisquare calculation to the given range of the function Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare) Use option ""P"" for using the Pearson chisquare based on the expected bin errors ; Definition at line 2496 of file TH1.cxx. ◆ Class(). static TClass * TH1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 444 of file TH1.h. ◆ ClearUnderflowAndOverflow(). void TH1::ClearUnderflowAndOverflow ; (; ). virtual . Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Reimplemented in TH2Poly.; Definition at line 2752 of file TH1.cxx. ◆ ComputeIntegral(). Double_t TH1::ComputeIntegral ; (; Bool_t ; onlyPositive = false). virtual . Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; This function is automatically called by GetRandom when the fIntegral array does not ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:101756,Clear,ClearUnderflowAndOverflow,101756,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,". ◆ ClassInfo_Property(). virtual Long_t TInterpreter::ClassInfo_Property ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 429 of file TInterpreter.h. ◆ ClassInfo_Size(). virtual int TInterpreter::ClassInfo_Size ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 430 of file TInterpreter.h. ◆ ClassInfo_Tagnum(). virtual Longptr_t TInterpreter::ClassInfo_Tagnum ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 431 of file TInterpreter.h. ◆ ClassInfo_Title(). virtual const char * TInterpreter::ClassInfo_Title ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 435 of file TInterpreter.h. ◆ ClassInfo_TmpltName(). virtual const char * TInterpreter::ClassInfo_TmpltName ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 436 of file TInterpreter.h. ◆ ClearFileBusy(). virtual void TInterpreter::ClearFileBusy ; (; ). pure virtual . Implemented in TCling. ◆ ClearStack(). virtual void TInterpreter::ClearStack ; (; ). pure virtual . Implemented in TCling. ◆ CodeComplete(). virtual void TInterpreter::CodeComplete ; (; const std::string & ; , . size_t & ; , . std::vector< std::string > & ;  . ). inlinevirtual . Reimplemented in TCling.; Definition at line 279 of file TInterpreter.h. ◆ CreateEnum(). virtual TEnum * TInterpreter::CreateEnum ; (; void * ; VD, . TClass * ; cl . ); const. pure virtual . Implemented in TCling. ◆ CreateListOfBaseClasses(). virtual void TInterpreter::CreateListOfBaseClasses ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ CreateListOfDataMembers(). virtual void TInterpreter::CreateListOfDataMembers ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ CreateListOfMethodArgs(). virtual void TInterpreter::CreateListOfMethodArgs ; (; TFunction * ; m); const. pure virtual . Implemented in TCling. ◆ CreateListOfMethods(). vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:58197,Clear,ClearFileBusy,58197,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['Clear'],['ClearFileBusy']
Usability,". ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the LogL gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluatePdf(). double ROOT::Fit::FitUtil::EvaluatePdf ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:9488,simpl,simple,9488,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['simpl'],['simple']
Usability,. ◆ GetParameters(). RooArgSet * SimpleInterval::GetParameters ; (; ); const. overridevirtual . return a cloned list with the parameter of interest ; return cloned list of parameters ; Implements RooStats::ConfInterval.; Definition at line 115 of file SimpleInterval.cxx. ◆ IsA(). TClass * RooStats::SimpleInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 60 of file SimpleInterval.h. ◆ IsInInterval(). bool SimpleInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameter is in the interval ; Method to determine if a parameter point is in the interval. ; Implements RooStats::ConfInterval.; Definition at line 93 of file SimpleInterval.cxx. ◆ LowerLimit(). virtual double RooStats::SimpleInterval::LowerLimit ; (; ). inlinevirtual . return the interval lower limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 46 of file SimpleInterval.h. ◆ operator=(). SimpleInterval & SimpleInterval::operator= ; (; const SimpleInterval & ; other). default constructor ; Definition at line 64 of file SimpleInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::SimpleInterval::SetConfidenceLevel ; (; double ; ). inlineoverridevirtual . set the confidence level for the interval. ; Simple interval is defined at construction time so this function has no effect ; Implements RooStats::ConfInterval.; Definition at line 40 of file SimpleInterval.h. ◆ Streamer(). void RooStats::SimpleInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ConfInterval. ◆ StreamerNVirtual(). void RooStats::SimpleInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file SimpleInterval.h. ◆ UpperLimit(). virtual double RooStats::SimpleInterval::UpperLimit ; (; ). inlinevirtual . return the interval upper limit ; Reimp,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:16216,Simpl,SimpleInterval,16216,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,". ◆ ReadTransformationFromStream(). void TMVA::VariableNormalizeTransform::ReadTransformationFromStream ; (; std::istream & ; istr, . const TString & ;  . ). virtual . Read the variable ranges from an input stream. ; Implements TMVA::VariableTransformBase.; Definition at line 491 of file VariableNormalizeTransform.cxx. ◆ Streamer(). virtual void TMVA::VariableNormalizeTransform::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::VariableTransformBase. ◆ StreamerNVirtual(). void TMVA::VariableNormalizeTransform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 87 of file VariableNormalizeTransform.h. ◆ Transform(). const TMVA::Event * TMVA::VariableNormalizeTransform::Transform ; (; const Event * const ; ev, . Int_t ; cls . ); const. virtual . apply the normalization transformation ; Implements TMVA::VariableTransformBase.; Definition at line 108 of file VariableNormalizeTransform.cxx. ◆ WriteTransformationToStream(). void TMVA::VariableNormalizeTransform::WriteTransformationToStream ; (; std::ostream & ; o); const. virtual . write the transformation to the stream ; Implements TMVA::VariableTransformBase.; Definition at line 304 of file VariableNormalizeTransform.cxx. Member Data Documentation. ◆ fMax. VectorOfFloatVectors TMVA::VariableNormalizeTransform::fMax. private . ! Max of source range ; Definition at line 85 of file VariableNormalizeTransform.h. ◆ fMin. VectorOfFloatVectors TMVA::VariableNormalizeTransform::fMin. private . ! Min of source range ; Definition at line 84 of file VariableNormalizeTransform.h. Libraries for TMVA::VariableNormalizeTransform:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VariableNormalizeTransform.h; tmva/tmva/src/VariableNormalizeTransform.cxx. TMVAVariableNormalizeTransform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html:21997,Guid,Guide,21997,doc/master/classTMVA_1_1VariableNormalizeTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html,1,['Guid'],['Guide']
Usability,". ◆ SecToText(). TString TMVA::Timer::SecToText ; (; Double_t ; seconds, . Bool_t ; Scientific . ); const. private . pretty string output ; Definition at line 262 of file Timer.cxx. ◆ Streamer(). virtual void TMVA::Timer::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::Timer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 99 of file Timer.h. Member Data Documentation. ◆ fColourfulOutput. Bool_t TMVA::Timer::fColourfulOutput. private . flag for use of colors ; Definition at line 84 of file Timer.h. ◆ fgClassName. const TString TMVA::Timer::fgClassName = ""Timer"". staticprivate . used for output ; Definition at line 93 of file Timer.h. ◆ fgNbins. const Int_t TMVA::Timer::fgNbins = 16. staticprivate . number of bins in progress bar ; Definition at line 94 of file Timer.h. ◆ fLogger. MsgLogger* TMVA::Timer::fLogger. mutableprivate . ! the output logger ; Definition at line 96 of file Timer.h. ◆ fNcounts. Int_t TMVA::Timer::fNcounts. private . reference number of ""counts"" ; Definition at line 82 of file Timer.h. ◆ fOutputToFile. Bool_t TMVA::Timer::fOutputToFile. private . Definition at line 89 of file Timer.h. ◆ fPrefix. TString TMVA::Timer::fPrefix. private . prefix for outputs ; Definition at line 83 of file Timer.h. ◆ fPreviousProgress. Int_t TMVA::Timer::fPreviousProgress. private . Definition at line 87 of file Timer.h. ◆ fPreviousTimeEstimate. TString TMVA::Timer::fPreviousTimeEstimate. private . Definition at line 88 of file Timer.h. ◆ fProgressBarStringLength. Int_t TMVA::Timer::fProgressBarStringLength. private . Definition at line 91 of file Timer.h. Libraries for TMVA::Timer:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Timer.h; tmva/tmva/src/Timer.cxx. TMVATimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:18412,Guid,Guide,18412,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['Guid'],['Guide']
Usability,". ◆ SetOptStat(). void TPaveStats::SetOptStat ; (; Int_t ; stat = 1). Set the stat option. ; Definition at line 308 of file TPaveStats.cxx. ◆ SetParent(). void TPaveStats::SetParent ; (; TObject * ; obj). inlineoverridevirtual . Implements TVirtualPaveStats.; Definition at line 52 of file TPaveStats.h. ◆ SetStatFormat(). void TPaveStats::SetStatFormat ; (; const char * ; format = ""6.4g""). virtual . Change (i.e. set) the format for printing statistics. ; Definition at line 317 of file TPaveStats.cxx. ◆ Streamer(). void TPaveStats::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TPaveStats. ; Reimplemented from TPave.; Definition at line 539 of file TPaveStats.cxx. ◆ StreamerNVirtual(). void TPaveStats::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TPaveStats.h. ◆ UseCurrentStyle(). void TPaveStats::UseCurrentStyle ; (; ). overridevirtual . Replace current attributes by current style. ; Reimplemented from TObject.; Definition at line 570 of file TPaveStats.cxx. Member Data Documentation. ◆ fFitFormat. TString TPaveStats::fFitFormat. protected . Printing format for fit parameters. ; Definition at line 23 of file TPaveStats.h. ◆ fOptFit. Int_t TPaveStats::fOptFit. protected . option Fit ; Definition at line 21 of file TPaveStats.h. ◆ fOptStat. Int_t TPaveStats::fOptStat. protected . option Stat ; Definition at line 22 of file TPaveStats.h. ◆ fParent. TObject* TPaveStats::fParent {nullptr}. protected . owner of this TPaveStats ; Definition at line 25 of file TPaveStats.h. ◆ fStatFormat. TString TPaveStats::fStatFormat. protected . Printing format for stats. ; Definition at line 24 of file TPaveStats.h. Libraries for TPaveStats:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TPaveStats.h; graf2d/graf/src/TPaveStats.cxx. TPaveStats. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveStats.html:42540,Guid,Guide,42540,doc/master/classTPaveStats.html,https://root.cern,https://root.cern/doc/master/classTPaveStats.html,1,['Guid'],['Guide']
Usability,". ◆ SetOutputDirectory(). virtual void TGridJDL::SetOutputDirectory ; (; const char * ; value = nullptr, . const char * ; description = nullptr . ). pure virtual . ◆ SetPrice(). virtual void TGridJDL::SetPrice ; (; UInt_t ; price = 1, . const char * ; description = nullptr . ). pure virtual . ◆ SetSplitArguments(). virtual void TGridJDL::SetSplitArguments ; (; const char * ; splitarguments = nullptr, . const char * ; description = nullptr . ). pure virtual . ◆ SetSplitMode(). virtual void TGridJDL::SetSplitMode ; (; const char * ; value, . UInt_t ; maxnumberofinputfiles = 0, . UInt_t ; maxinputfilesize = 0, . const char * ; d1 = nullptr, . const char * ; d2 = nullptr, . const char * ; d3 = nullptr . ). pure virtual . ◆ SetTTL(). virtual void TGridJDL::SetTTL ; (; UInt_t ; ttl = 72000, . const char * ; description = nullptr . ). pure virtual . ◆ SetValidationCommand(). virtual void TGridJDL::SetValidationCommand ; (; const char * ; value, . const char * ; description = nullptr . ). pure virtual . ◆ SetValue(). void TGridJDL::SetValue ; (; const char * ; key, . const char * ; value . ). Sets a value. If the entry already exists the old one is replaced. ; Definition at line 50 of file TGridJDL.cxx. ◆ Streamer(). void TGridJDL::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGridJDL::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file TGridJDL.h. Member Data Documentation. ◆ fDescriptionMap. TMap TGridJDL::fDescriptionMap. protected . Definition at line 35 of file TGridJDL.h. ◆ fMap. TMap TGridJDL::fMap. protected . Definition at line 34 of file TGridJDL.h. Libraries for TGridJDL:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TGridJDL.h; net/net/src/TGridJDL.cxx. TGridJDL. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJDL.html:19592,Guid,Guide,19592,doc/master/classTGridJDL.html,https://root.cern,https://root.cern/doc/master/classTGridJDL.html,1,['Guid'],['Guide']
Usability,. ◆ SetSilent(). void TMVA::Config::SetSilent ; (; Bool_t ; s). inline . Definition at line 63 of file Config.h. ◆ SetUseColor(). void TMVA::Config::SetUseColor ; (; Bool_t ; uc). inline . Definition at line 60 of file Config.h. ◆ SetWriteOptionsReference(). void TMVA::Config::SetWriteOptionsReference ; (; Bool_t ; w). inline . Definition at line 66 of file Config.h. ◆ Streamer(). virtual void TMVA::Config::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::Config::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 148 of file Config.h. ◆ UseColor(). Bool_t TMVA::Config::UseColor ; (; ); const. inline . Definition at line 59 of file Config.h. ◆ WriteOptionsReference(). Bool_t TMVA::Config::WriteOptionsReference ; (; ); const. inline . Definition at line 65 of file Config.h. Member Data Documentation. ◆ fDrawProgressBar. std::atomic<Bool_t> TMVA::Config::fDrawProgressBar. private . draw progress bar to indicate training evolution ; Definition at line 140 of file Config.h. ◆ fExecutor. Executor TMVA::Config::fExecutor. protected . Definition at line 52 of file Config.h. ◆ fgConfigPtr. std::atomic< TMVA::Config * > TMVA::Config::fgConfigPtr { 0 }. staticprivate . Definition at line 137 of file Config.h. ◆ fIONames. class TMVA::Config::IONames TMVA::Config::fIONames. ◆ fLogger. MsgLogger* TMVA::Config::fLogger. mutableprivate . ! message logger ; Definition at line 145 of file Config.h. ◆ fNWorkers. std::atomic<UInt_t> TMVA::Config::fNWorkers. private . Default number of workers for multi-process jobs. ; Definition at line 141 of file Config.h. ◆ fSilent. std::atomic<Bool_t> TMVA::Config::fSilent. private . no output at all ; Definition at line 143 of file Config.h. ◆ fUseColoredConsole. std::atomic<Bool_t> TMVA::Config::fUseColoredConsole. private . coloured standard output ; Definition at line 142 of file Config.h. ◆ fVariablePlotting. class TMVA::Config::VariablePlotting TMVA::Config::fVariablePlotting. ◆ ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Config.html:7386,progress bar,progress bar,7386,doc/master/classTMVA_1_1Config.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html,1,['progress bar'],['progress bar']
Usability,". ◆ TGeoHMatrix() [2/4]. TGeoHMatrix::TGeoHMatrix ; (; const TGeoHMatrix & ; other). inline . Definition at line 466 of file TGeoMatrix.h. ◆ TGeoHMatrix() [3/4]. TGeoHMatrix::TGeoHMatrix ; (; const TGeoMatrix & ; matrix). assignment ; Definition at line 2404 of file TGeoMatrix.cxx. ◆ TGeoHMatrix() [4/4]. TGeoHMatrix::TGeoHMatrix ; (; const char * ; name). constructor ; Definition at line 2394 of file TGeoMatrix.cxx. ◆ ~TGeoHMatrix(). TGeoHMatrix::~TGeoHMatrix ; (; ). override . destructor ; Definition at line 2422 of file TGeoMatrix.cxx. Member Function Documentation. ◆ Class(). static TClass * TGeoHMatrix::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoHMatrix::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoHMatrix::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 534 of file TGeoMatrix.h. ◆ Clear(). void TGeoHMatrix::Clear ; (; Option_t * ; option = """"). overridevirtual . clear the data for this matrix ; Reimplemented from TObject.; Definition at line 2512 of file TGeoMatrix.cxx. ◆ CopyFrom(). void TGeoHMatrix::CopyFrom ; (; const TGeoMatrix * ; other). Fast copy method. ; Definition at line 2500 of file TGeoMatrix.cxx. ◆ DeclFileName(). static const char * TGeoHMatrix::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 534 of file TGeoMatrix.h. ◆ Determinant(). Double_t TGeoHMatrix::Determinant ; (; ); const. computes determinant of the rotation matrix ; Definition at line 2590 of file TGeoMatrix.cxx. ◆ FastRotZ(). void TGeoHMatrix::FastRotZ ; (; const Double_t * ; sincos). Perform a rotation about Z having the sine/cosine of the rotation angle. ; Definition at line 2537 of file TGeoMatrix.cxx. ◆ GetRotationMatrix() [1/2]. virtual Double_t * TGeoHMatrix::GetRotationMatrix ; (; ). inlinevirtual . Definition at line 532 of file TGeoMatrix.h. ◆ Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHMatrix.html:18758,Clear,Clear,18758,doc/master/classTGeoHMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoHMatrix.html,1,['Clear'],['Clear']
Usability,". ◆ TPGON() [2/2]. TPGON::TPGON ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; phi1, . Float_t ; dphi1, . Int_t ; npdv, . Int_t ; nz . ). PGON shape normal constructor. ; Parameters of the nz positions must be entered via TPCON::DefineSection. ; Definition at line 54 of file TPGON.cxx. ◆ ~TPGON(). TPGON::~TPGON ; (; ). override . PGON shape default destructor. ; Definition at line 64 of file TPGON.cxx. Member Function Documentation. ◆ Class(). static TClass * TPGON::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPGON::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPGON::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 39 of file TPGON.h. ◆ DeclFileName(). static const char * TPGON::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 39 of file TPGON.h. ◆ FillTableOfCoSin(). void TPGON::FillTableOfCoSin ; (; Double_t ; phi, . Double_t ; angstep, . Int_t ; n . ); const. overrideprotectedvirtual . Fill the table of cos and sin to prepare drawing. ; Reimplemented from TPCON.; Definition at line 71 of file TPGON.cxx. ◆ IsA(). TClass * TPGON::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TPCON.; Definition at line 39 of file TPGON.h. ◆ Streamer(). void TPGON::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TPCON. ◆ StreamerNVirtual(). void TPGON::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 39 of file TPGON.h. Libraries for TPGON:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TPGON.h; graf3d/g3d/src/TPGON.cxx. TPGON. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPGON.html:21537,Guid,Guide,21537,doc/master/classTPGON.html,https://root.cern,https://root.cern/doc/master/classTPGON.html,1,['Guid'],['Guide']
Usability,". ◆ Update(). bool TFormLeafInfo::Update ; (; ). virtual . We reloading all cached information in case the underlying class information has changed (for example when changing from the 'emulated' class to the real class. ; Reimplemented in TFormLeafInfoNumerical, TFormLeafInfoCollection, TFormLeafInfoCollectionSize, TFormLeafInfoMethod, TFormLeafInfoMultiVarDim, TFormLeafInfoCast, TFormLeafInfoTTree, and TFormLeafInfoReference.; Definition at line 509 of file TFormLeafInfo.cxx. ◆ UpdateSizes(). void TFormLeafInfo::UpdateSizes ; (; TArrayI * ; garr). virtual . Set the current sizes of the arrays. ; Reimplemented in TFormLeafInfoMultiVarDim.; Definition at line 499 of file TFormLeafInfo.cxx. Member Data Documentation. ◆ fClass. TClass* TFormLeafInfo::fClass. ! This is the class of the data pointed to ; Definition at line 60 of file TFormLeafInfo.h. ◆ fClassName. TString TFormLeafInfo::fClassName. Definition at line 68 of file TFormLeafInfo.h. ◆ fCounter. TFormLeafInfo* TFormLeafInfo::fCounter. Definition at line 66 of file TFormLeafInfo.h. ◆ fElement. TStreamerElement* TFormLeafInfo::fElement. ! Descriptor of the data pointed to. ; Definition at line 63 of file TFormLeafInfo.h. ◆ fElementName. TString TFormLeafInfo::fElementName. Definition at line 69 of file TFormLeafInfo.h. ◆ fMultiplicity. Int_t TFormLeafInfo::fMultiplicity. protected . Definition at line 72 of file TFormLeafInfo.h. ◆ fNext. TFormLeafInfo* TFormLeafInfo::fNext. follow this to grab the inside information ; Definition at line 67 of file TFormLeafInfo.h. ◆ fOffset. Longptr_t TFormLeafInfo::fOffset. ! Offset of the data pointed inside the class fClass ; Definition at line 62 of file TFormLeafInfo.h. Libraries for TFormLeafInfo:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TFormLeafInfo.h; tree/treeplayer/src/TFormLeafInfo.cxx. TFormLeafInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormLeafInfo.html:31079,Guid,Guide,31079,doc/master/classTFormLeafInfo.html,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html,1,['Guid'],['Guide']
Usability,. ◆ fCompI. std::vector<std::string> ROOT::TModuleGenerator::fCompI. private . Definition at line 166 of file TModuleGenerator.h. ◆ fCompU. std::vector<std::string> ROOT::TModuleGenerator::fCompU. private . Definition at line 169 of file TModuleGenerator.h. ◆ fContentName. std::string ROOT::TModuleGenerator::fContentName. private . Definition at line 162 of file TModuleGenerator.h. ◆ fDemangledDictionaryName. std::string ROOT::TModuleGenerator::fDemangledDictionaryName. private . Definition at line 158 of file TModuleGenerator.h. ◆ fDictionaryName. std::string ROOT::TModuleGenerator::fDictionaryName. private . Definition at line 157 of file TModuleGenerator.h. ◆ fErrorCount. int ROOT::TModuleGenerator::fErrorCount. mutableprivate . Definition at line 170 of file TModuleGenerator.h. ◆ fHeaders. std::vector<std::string> ROOT::TModuleGenerator::fHeaders. private . Definition at line 164 of file TModuleGenerator.h. ◆ fInlineInputHeaders. bool ROOT::TModuleGenerator::fInlineInputHeaders. private . Definition at line 155 of file TModuleGenerator.h. ◆ fIsInPCH. bool ROOT::TModuleGenerator::fIsInPCH. private . Definition at line 154 of file TModuleGenerator.h. ◆ fIsPCH. bool ROOT::TModuleGenerator::fIsPCH. private . Definition at line 153 of file TModuleGenerator.h. ◆ fLinkDefFile. std::string ROOT::TModuleGenerator::fLinkDefFile. private . Definition at line 165 of file TModuleGenerator.h. ◆ fModuleDirName. std::string ROOT::TModuleGenerator::fModuleDirName. private . Definition at line 160 of file TModuleGenerator.h. ◆ fModuleFileName. std::string ROOT::TModuleGenerator::fModuleFileName. private . Definition at line 159 of file TModuleGenerator.h. ◆ fUmbrellaName. std::string ROOT::TModuleGenerator::fUmbrellaName. private . Definition at line 161 of file TModuleGenerator.h. core/dictgen/res/TModuleGenerator.h; core/dictgen/src/TModuleGenerator.cxx. ROOTTModuleGenerator. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html:13702,Guid,Guide,13702,doc/v632/classROOT_1_1TModuleGenerator.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html,1,['Guid'],['Guide']
Usability,. ◆ fOptionsMenu. TGPopupMenu* TTreeViewer::fOptionsMenu. private . Definition at line 114 of file TTreeViewer.h. ◆ fPicDraw. const TGPicture* TTreeViewer::fPicDraw. private . Pictures for Draw buttons. ; Definition at line 93 of file TTreeViewer.h. ◆ fPicRefr. const TGPicture* TTreeViewer::fPicRefr. private . Pictures for Refresh buttons ///<ia. ; Definition at line 95 of file TTreeViewer.h. ◆ fPicStop. const TGPicture* TTreeViewer::fPicStop. private . Pictures for Stop buttons. ; Definition at line 94 of file TTreeViewer.h. ◆ fPicX. const TGPicture* TTreeViewer::fPicX. private . Pictures for X expressions. ; Definition at line 90 of file TTreeViewer.h. ◆ fPicY. const TGPicture* TTreeViewer::fPicY. private . Pictures for Y expressions. ; Definition at line 91 of file TTreeViewer.h. ◆ fPicZ. const TGPicture* TTreeViewer::fPicZ. private . Pictures for Z expressions. ; Definition at line 92 of file TTreeViewer.h. ◆ fProgressBar. TGHProgressBar* TTreeViewer::fProgressBar. private . Progress bar. ; Definition at line 152 of file TTreeViewer.h. ◆ fREFR. TGPictureButton* TTreeViewer::fREFR. private . REFRESH button ///<ia. ; Definition at line 160 of file TTreeViewer.h. ◆ fReset. TGTextButton* TTreeViewer::fReset. private . clear expression's entries ; Definition at line 168 of file TTreeViewer.h. ◆ fRunMenu. TGPopupMenu* TTreeViewer::fRunMenu. private . Definition at line 113 of file TTreeViewer.h. ◆ fScanMode. bool TTreeViewer::fScanMode. private . Flag activated when Scan Box is double-clicked. ; Definition at line 85 of file TTreeViewer.h. ◆ fSession. TTVSession* TTreeViewer::fSession. private . Current tree-viewer session. ; Definition at line 77 of file TTreeViewer.h. ◆ fSlider. TGDoubleVSlider* TTreeViewer::fSlider. private . Vertical slider to select processed tree entries;. ; Definition at line 143 of file TTreeViewer.h. ◆ fSourceFile. const char* TTreeViewer::fSourceFile. private . Name of the C++ source file - default treeviewer.C. ; Definition at line 79 of fi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer.html:64412,Progress bar,Progress bar,64412,doc/master/classTTreeViewer.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html,1,['Progress bar'],['Progress bar']
Usability,. ◆ operator()() [2/3]. template<class CoordSystem > . LorentzVector< CoordSystem > ROOT::Math::BoostZ::operator() ; (; const LorentzVector< CoordSystem > & ; v); const. inline . Lorentz transformation operation on a LorentzVector in any coordinate system. ; Definition at line 140 of file BoostZ.h. ◆ operator()() [3/3]. LorentzVector< PxPyPzE4D< double > > ROOT::Math::BoostZ::operator() ; (; const LorentzVector< ROOT::Math::PxPyPzE4D< double > > & ; v); const. Lorentz transformation operation on a Minkowski ('Cartesian') LorentzVector. ; Definition at line 83 of file BoostZ.cxx. ◆ operator*(). template<class A4Vector > . A4Vector ROOT::Math::BoostZ::operator* ; (; const A4Vector & ; v); const. inline . Overload operator * for boost on a vector. ; Definition at line 164 of file BoostZ.h. ◆ operator==(). bool ROOT::Math::BoostZ::operator== ; (; const BoostZ & ; rhs); const. inline . Equality/inequality operators. ; Definition at line 182 of file BoostZ.h. ◆ Rectify(). void ROOT::Math::BoostZ::Rectify ; (; ). Re-adjust components to eliminate small deviations from a perfect orthosyplectic matrix. ; Definition at line 64 of file BoostZ.cxx. ◆ SetBeta(). void ROOT::Math::BoostZ::SetBeta ; (; Scalar ; beta). inline . Set the given beta of the Boost. ; Definition at line 108 of file BoostZ.h. ◆ SetComponents(). void ROOT::Math::BoostZ::SetComponents ; (; Scalar ; beta_z). Set components from a Scalar beta_z. ; Definition at line 32 of file BoostZ.cxx. Member Data Documentation. ◆ fBeta. Scalar ROOT::Math::BoostZ::fBeta. private . Definition at line 193 of file BoostZ.h. ◆ fGamma. Scalar ROOT::Math::BoostZ::fGamma. private . Definition at line 194 of file BoostZ.h. Libraries for ROOT::Math::BoostZ:. [legend]; The documentation for this class was generated from the following files:; math/genvector/inc/Math/GenVector/BoostZ.h; math/genvector/src/BoostZ.cxx. ROOTMathBoostZ. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BoostZ.html:7916,Guid,Guide,7916,doc/master/classROOT_1_1Math_1_1BoostZ.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BoostZ.html,1,['Guid'],['Guide']
Usability,". ◆ printTitle(). void RooFormula::printTitle ; (; std::ostream & ; os); const. overridevirtual . Print title of formula. ; Reimplemented from RooPrintable.; Definition at line 462 of file RooFormula.cxx. ◆ printValue(). void RooFormula::printValue ; (; std::ostream & ; os); const. overridevirtual . Print value of formula. ; Reimplemented from RooPrintable.; Definition at line 444 of file RooFormula.cxx. ◆ processFormula(). std::string RooFormula::processFormula ; (; std::string ; formula); const. private . Process given formula by replacing all ordinal and name references by x[i], where i matches the position of the argument in _origList. ; Further, references to category states such as leptonMulti:one are replaced by the category index. ; Definition at line 226 of file RooFormula.cxx. ◆ reconstructFormula(). std::string RooFormula::reconstructFormula ; (; std::string ; internalRepr); const. private . From the internal representation, construct a formula by replacing all index place holders with the names of the variables that are being used to evaluate it. ; Definition at line 318 of file RooFormula.cxx. ◆ usedVariables(). RooArgList RooFormula::usedVariables ; (; ); const. private . Analyse internal formula to find out which variables are actually in use. ; Definition at line 288 of file RooFormula.cxx. Member Data Documentation. ◆ _isCategory. std::vector<bool> RooFormula::_isCategory. private . ! Whether an element of the _origList is a category. ; Definition at line 81 of file RooFormula.h. ◆ _origList. RooArgList RooFormula::_origList. private . ! Original list of dependents ; Definition at line 80 of file RooFormula.h. ◆ _tFormula. std::unique_ptr<TFormula> RooFormula::_tFormula. private . ! The formula used to compute values ; Definition at line 82 of file RooFormula.h. roofit/roofitcore/src/RooFormula.h; roofit/roofitcore/src/RooFormula.cxx. RooFormula. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormula.html:24593,Guid,Guide,24593,doc/master/classRooFormula.html,https://root.cern,https://root.cern/doc/master/classRooFormula.html,1,['Guid'],['Guide']
Usability,". ◆ writeToStream(). void RooRealVar::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to given stream. ; Reimplemented from RooAbsRealLValue.; Definition at line 700 of file RooRealVar.cxx. Member Data Documentation. ◆ _altNonSharedBinning. std::unordered_map<std::string,std::unique_ptr<RooAbsBinning> > RooRealVar::_altNonSharedBinning. protected . ! Non-shareable alternative binnings ; Definition at line 157 of file RooRealVar.h. ◆ _asymErrHi. double RooRealVar::_asymErrHi. protected . High side of asymmetric error associated with current value. ; Definition at line 155 of file RooRealVar.h. ◆ _asymErrLo. double RooRealVar::_asymErrLo. protected . Low side of asymmetric error associated with current value. ; Definition at line 154 of file RooRealVar.h. ◆ _binning. std::unique_ptr<RooAbsBinning> RooRealVar::_binning. protected . Definition at line 156 of file RooRealVar.h. ◆ _error. double RooRealVar::_error. protected . Symmetric error associated with current value. ; Definition at line 153 of file RooRealVar.h. ◆ _printScientific. bool RooRealVar::_printScientific. staticprotected . Definition at line 139 of file RooRealVar.h. ◆ _printSigDigits. Int_t RooRealVar::_printSigDigits. staticprotected . Definition at line 140 of file RooRealVar.h. ◆ _sharedProp. std::shared_ptr<RooRealVarSharedProperties> RooRealVar::_sharedProp. protected . ! Shared binnings associated with this instance ; Definition at line 169 of file RooRealVar.h. ◆ _valueResetCounter. std::size_t RooRealVar::_valueResetCounter = 0. protected . ! How many times the value of this variable was reset ; Definition at line 171 of file RooRealVar.h. Libraries for RooRealVar:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealVar.h; roofit/roofitcore/src/RooRealVar.cxx. RooRealVar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:94174,Guid,Guide,94174,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['Guid'],['Guide']
Usability,"..)`. The color; 526is determined according to the number of objects having palette coloring in; 527the current pad.; 528 ; 529Begin_Macro(source); 530../../../tutorials/graphs/graphpalettecolor.C; 531End_Macro; 532 ; 533Begin_Macro(source); 534../../../tutorials/graphs/multigraphpalettecolor.C; 535End_Macro; 536 ; 537\anchor GrP6; 538### Reverse graphs' axis; 539 ; 540\since **ROOT version 6.09/03**; 541 ; 542When a TGraph is drawn, the X-axis is drawn with increasing values from left to; 543right and the Y-axis from bottom to top. The two options `RX` and `RY` allow to; 544change this order. The option `RX` allows to draw the X-axis with increasing values; 545from right to left and the `RY` option allows to draw the Y-axis with increasing; 546values from top to bottom. The following example illustrate how to use these options.; 547 ; 548Begin_Macro(source); 549{; 550 auto c = new TCanvas();; 551 c->Divide(2,1);; 552 auto g = new TGraphErrors();; 553 g->SetTitle(""Simple Graph"");; 554 ; 555 g->SetPoint(0,-4,-3);; 556 g->SetPoint(1,1,1);; 557 g->SetPoint(2,2,1);; 558 g->SetPoint(3,3,4);; 559 g->SetPoint(4,5,5);; 560 ; 561 g->SetPointError(0,1.,2.);; 562 g->SetPointError(1,2,1);; 563 g->SetPointError(2,2,3);; 564 g->SetPointError(3,3,2);; 565 g->SetPointError(4,4,5);; 566 ; 567 g->GetXaxis()->SetNdivisions(520);; 568 ; 569 g->SetMarkerStyle(21);; 570 c->cd(1); gPad->SetGrid(1,1);; 571 g->Draw(""APL"");; 572 ; 573 c->cd(2); gPad->SetGrid(1,1);; 574 g->Draw(""A RX RY PL"");; 575}; 576End_Macro; 577 ; 578\anchor GrP7; 579### Graphs in logarithmic scale; 580 ; 581Like histograms, graphs can be drawn in logarithmic scale along X and Y. When; 582a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy(); 583the points building the graph are converted into logarithmic scale. But **only** the; 584points not the lines connecting them which stay linear. This can be clearly seen; 585on the following example:; 586 ; 587Begin_Macro(source); 588{; 589 // A graph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:21916,Simpl,Simple,21916,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree, Bool_t owner = kFALSE); Update pointer to current Tree and recompute pointers to the branches in the cache. TTreeCache(const TTreeCache& ). TTreeCache& operator=(const TTreeCache& ). Bool_t IsLearning() const; {return fIsLearning;}. » Author: Rene Brun 04/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeCache.h 34935 2010-08-23 09:13:3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:20303,learn,learning,20303,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,1,['learn'],['learning']
Usability,"....: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Overload to make sure that the object specific. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void SetLearnPrefill(TTreeCache::EPrefillType type = kNoPrefill); Set whether the learning period is started with a prefilling of the; cache and which type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:24779,simpl,simply,24779,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"....: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree, Bool_t owner = kFALSE); Update pointer to current Tree and recompute pointers to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCache.html:22888,simpl,simply,22888,root/html532/TTreeCache.html,https://root.cern,https://root.cern/root/html532/TTreeCache.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"...; Searching...; No Matches. df025_RNode.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Manipulate RDF objects in functions, loops and conditional branches. ; Each RDataFrame object has its own type. It helps with performance, but sometimes it gets in the way of writing simple code that manages RDF objects. Luckily, every RDF object can be converted to the generic RNode type. This tutorial shows how to take advantage of RNode to easily manipulate RDataFrames.; ; /// A generic function that takes an RDF object and applies a string filter; ROOT::RDF::RNode AddFilter(ROOT::RDF::RNode node, string_view filterStr); {; return node.Filter(filterStr);; }; ; void df025_RNode(); {; ROOT::RDataFrame df(8);; ; // Using the generic AddFilter helper function defined above: RNode in, RNode out; auto f1 = AddFilter(df, ""rdfentry_ > 0"");; auto f2 = f1.Filter([](ULong64_t e) { return e > 1; }, {""rdfentry_""});; ; // Conditionally applying a filter is simple with ROOT::RDF::RNode; bool someCondition = true;; auto maybe_filtered = ROOT::RDF::RNode(f2);; if (someCondition); maybe_filtered = maybe_filtered.Filter(""rdfentry_ > 3"");; ; // Adding new columns with Define in a loop is simple thanks to ROOT::RDF::RNode; auto with_columns = ROOT::RDF::RNode(maybe_filtered);; for (auto i = 0; i < 3; ++i); with_columns = with_columns.Define(""x"" + std::to_string(i), ""42"");; ; // RNodes can be used exactly like any other RDF object; std::cout << ""Entries passing the selection: "" << with_columns.Count().GetValue() << std::endl;; }; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; ROOT::RDataFram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df025__RNode_8C.html:1080,simpl,simple,1080,doc/master/df025__RNode_8C.html,https://root.cern,https://root.cern/doc/master/df025__RNode_8C.html,1,['simpl'],['simple']
Usability,..; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TVirtualObject Class ReferenceInput/Output Library. ; Wrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary. ; Definition at line 26 of file TVirtualObject.h. Public Member Functions;  TVirtualObject (TClass *cl);  ;  ~TVirtualObject ();  ; TClass * GetClass () const;  ; void * GetObject () const;  . Public Attributes; TClassRef fClass;  ; void * fObject;  . Private Member Functions;  TVirtualObject (const TVirtualObject &)=delete;  ; TVirtualObject & operator= (const TVirtualObject &)=delete;  . #include <TVirtualObject.h>; Constructor & Destructor Documentation. ◆ TVirtualObject() [1/2]. TVirtualObject::TVirtualObject ; (; const TVirtualObject & ; ). privatedelete . ◆ TVirtualObject() [2/2]. TVirtualObject::TVirtualObject ; (; TClass * ; cl). inline . Definition at line 36 of file TVirtualObject.h. ◆ ~TVirtualObject(). TVirtualObject::~TVirtualObject ; (; ). inline . Definition at line 37 of file TVirtualObject.h. Member Function Documentation. ◆ GetClass(). TClass * TVirtualObject::GetClass ; (; ); const. inline . Definition at line 40 of file TVirtualObject.h. ◆ GetObject(). void * TVirtualObject::GetObject ; (; ); const. inline . Definition at line 41 of file TVirtualObject.h. ◆ operator=(). TVirtualObject & TVirtualObject::operator= ; (; const TVirtualObject & ; ). privatedelete . Member Data Documentation. ◆ fClass. TClassRef TVirtualObject::fClass. Definition at line 33 of file TVirtualObject.h. ◆ fObject. void* TVirtualObject::fObject. Definition at line 34 of file TVirtualObject.h. Libraries for TVirtualObject:. [legend]; The documentation for this class was generated from the following file:; core/meta/inc/TVirtualObject.h. TVirtualObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualObject.html:2025,Guid,Guide,2025,doc/master/classTVirtualObject.html,https://root.cern,https://root.cern/doc/master/classTVirtualObject.html,1,['Guid'],['Guide']
Usability,"..Definition TVirtualCollectionProxy.h:75; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualCollectionProxy::GetPropertiesvirtual Int_t GetProperties() constReturn miscallenous properties of the proxy (see TVirtualCollectionProxy::EProperty)Definition TVirtualCollectionProxy.h:108; TVirtualCollectionProxy::Destructorvirtual void Destructor(void *p, Bool_t dtorOnly=kFALSE) constExecute the container destructor.Definition TVirtualCollectionProxy.h:144; TVirtualCollectionProxy::GetTypevirtual EDataType GetType() const =0If the value type is a fundamental data type, return its type (see enumeration EDataType).; TVirtualCollectionProxy::kCustomAlloc@ kCustomAllocThe collection has a custom allocator.Definition TVirtualCollectionProxy.h:71; TVirtualCollectionProxy::kIsEmulated@ kIsEmulatedDefinition TVirtualCollectionProxy.h:67; TVirtualCollectionProxy::Clearvirtual void Clear(const char *opt="""")=0Clear the container.; TVirtualCollectionProxy::Newvirtual void * New() constConstruct a new container object and return its address.Definition TVirtualCollectionProxy.h:111; TVirtualCollectionProxy::GetValueClassvirtual TClass * GetValueClass() const =0If the value type is a user-defined class, return a pointer to the TClass representing the value type...; TVirtualCollectionProxy::Atvirtual void * At(UInt_t idx)=0Return the address of the value at index idx; TVirtualCollectionProxy::GetCollectionTypevirtual Int_t GetCollectionType() const =0Return the type of the proxied collection (see enumeration TClassEdit::ESTLType); TVirtualCollectionProxy::Sizevirtual UInt_t Size() const =0Return the current number of elements in the container.; TVirtualCollectionProxy::HasPointersvirtual Bool_t HasPointers() const =0Return true if the content is of type 'pointer to'.; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:293526,Clear,Clearvirtual,293526,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,".. . ). virtual . Set redo parameters. ; The format is SetRedoArgs(number_of_params, params); Example: move_command->SetRedoArgs(2, 100, 100);. Definition at line 508 of file TQCommand.cxx. ◆ SetTitle(). void TQCommand::SetTitle ; (; const char * ; title). virtual . Sets description of the command. ; Definition at line 840 of file TQCommand.cxx. ◆ SetUndoArgs(). void TQCommand::SetUndoArgs ; (; Int_t ; narg, .  ; ... . ). virtual . Set undo parameters. ; The format is SetUndoArgs(number_of_params, params); Example: move_command->SetUndoArgs(2, 200, 200);. Definition at line 542 of file TQCommand.cxx. ◆ Streamer(). void TQCommand::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TList.; Reimplemented in TQUndoManager. ◆ StreamerNVirtual(). void TQCommand::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 98 of file TQCommand.h. ◆ Undo(). void TQCommand::Undo ; (; Option_t * ; option = """"). virtual . Un-execute all merged commands and the command. ; Merged commands are executed in reverse order. ; Reimplemented in TQUndoManager.; Definition at line 626 of file TQCommand.cxx. Friends And Related Symbol Documentation. ◆ TQUndoManager. friend class TQUndoManager. friend . Definition at line 29 of file TQCommand.h. Member Data Documentation. ◆ fName. TString TQCommand::fName. protected . Definition at line 41 of file TQCommand.h. ◆ fNewDelete. Bool_t TQCommand::fNewDelete. protected . Definition at line 40 of file TQCommand.h. ◆ fNRargs. Int_t TQCommand::fNRargs. protected . Definition at line 36 of file TQCommand.h. ◆ fNUargs. Int_t TQCommand::fNUargs. protected . Definition at line 37 of file TQCommand.h. ◆ fObject. void* TQCommand::fObject. protected . Definition at line 43 of file TQCommand.h. ◆ fRedo. TQConnection* TQCommand::fRedo. protected . Definition at line 32 of file TQCommand.h. ◆ fRedoArgs. Long_t* TQCommand::fRedoArgs. protected . Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:44073,Undo,Undo,44073,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['Undo'],['Undo']
Usability,".5 && r < 1 && x*y < 0""); .Define(""yFig"", ""y[rInFig]""); .Define(""xFig"", ""x[rInFig]""); .Histo2D({""fig"", ""Two quarters of a ring"", 64, -1.1, 1.1, 64, -1.1, 1.1}, ""xFig"", ""yFig"");; ; auto cring = new TCanvas();; ring_h->DrawCopy(""Colz"");; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< double >; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; double; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; df016_vecOpsDefinition df016_vecOps.py:1; v@ vDefinition rootcling_impl.cxx:3699; . DateFebruary 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df016_vecOps.C. tutorialsdataframedf016_vecOps.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df016__vecOps_8C.html:3429,Guid,Guide,3429,doc/master/df016__vecOps_8C.html,https://root.cern,https://root.cern/doc/master/df016__vecOps_8C.html,1,['Guid'],['Guide']
Usability,".7 Performance; The performance of PyROOT when programming with ROOT in Python is similar to that of Cling. Differences occur mainly because of differences in the respective languages: C++ is much harder to parse, but once parsed, it is much easier to optimize. Consequently, individual calls to ROOT are typically faster from PyROOT, whereas loops are typically slower.; When programming in Python, the modus operandi is to consider performance generally “good enough” on the outset, and when it turns out that, it is not good enough; the performance critical part is converted into C/C++ in an extension module. The school of thought where pre-mature optimization is the root of all evil should find this way of working very satisfying. In addition, if you look at their history, you will see that many of the standard Python modules have followed this path.; Your code should always make maximum use of ROOT facilities; such that most of the time is spending in compiled code. This goes even for very simple things: e.g. do not compute invariant masses in Python, use TLorentzVector instead. Moreover, before you start optimizing, make sure that you have run a profiler to find out where the bottlenecks are. Some performance, without cost in terms of programmer effort, may be gained by using psyco, see the next link: http://psyco.sourceforge.net, a Python just in time compiler (JIT). Note, however, that psyco is limited to Intel i386 CPUs. Since psyco optimizes Python, not PyROOT calls; it generally does not improve performance that much if most of your code consists of ROOT API calls. Mathematical computations in Python, on the other hand, benefit a lot.; Every call to a Python member function results in a lookup of that member function and an association of this method with 'self'. Furthermore, a temporary object is created during this process that is discarded after the method call. In inner loops, it may be worth your while (up to 30%), to short-cut this process by looking up a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1063748,simpl,simple,1063748,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,.798 +/- 5.86613 ; Mean = -0.0132039 +/- 0.0432773 ; Sigma = 0.938314 +/- 0.0320986 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 7.28099; NDf = 10; Edm = 6.30801e-07; NCalls = 53; Constant = 103.063 +/- 5.55774 ; Mean = -0.0233563 +/- 0.0435444 ; Sigma = 0.954358 +/- 0.0285394 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 23.1247; NDf = 14; Edm = 2.27317e-06; NCalls = 53; Constant = 69.5383 +/- 3.95119 ; Mean = -0.160071 +/- 0.0652133 ; Sigma = 1.37036 +/- 0.0473756 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 7.18474; NDf = 15; Edm = 9.01145e-06; NCalls = 61; Constant = 51.3838 +/- 3.49309 ; Mean = -0.985792 +/- 0.0760226 ; Sigma = 1.36366 +/- 0.0605719 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 11.9456; NDf = 11; Edm = 4.88765e-08; NCalls = 61; Constant = 94.7614 +/- 5.45747 ; Mean = -0.0978895 +/- 0.0483575 ; Sigma = 1.03309 +/- 0.0382346 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 20.9563; NDf = 16; Edm = 8.77656e-06; NCalls = 53; Constant = 69.8331 +/- 3.99247 ; Mean = -0.0767062 +/- 0.0640105 ; Sigma = 1.36919 +/- 0.0474577 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 8.84994; NDf = 10; Edm = 1.85865e-06; NCalls = 53; Constant = 101.665 +/- 5.77203 ; Mean = -0.0558063 +/- 0.0444665 ; Sigma = 0.96468 +/- 0.0336688 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 9.73174; NDf = 10; Edm = 1.95484e-06; NCalls = 53; Constant = 99.7164 +/- 5.69932 ; Mean = -0.0653755 +/- 0.0459247 ; Sigma = 0.982023 +/- 0.0349408 (limited); DateNovember 2019 ; AuthorChristoph Langenbruch ; Definition in file rf611_weightedfits.C. tutorialsroofitrf611_weightedfits.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf611__weightedfits_8C.html:17502,Guid,Guide,17502,doc/master/rf611__weightedfits_8C.html,https://root.cern,https://root.cern/doc/master/rf611__weightedfits_8C.html,1,['Guid'],['Guide']
Usability,".; 5788 if (fBranchRef && fBranchRef != fSeqBranches[0]) {; 5789 fSeqBranches.push_back(fBranchRef);; 5790 }; 5791 ; 5792 // The branches to be processed sequentially are those that are the leaf count of another branch; 5793 if (checkLeafCount) {; 5794 for (Int_t i = 0; i < nbranches; i++) {; 5795 TBranch* branch = (TBranch*)fBranches.UncheckedAt(i);; 5796 auto leafCount = ((TLeaf*)branch->GetListOfLeaves()->At(0))->GetLeafCount();; 5797 if (leafCount) {; 5798 auto countBranch = leafCount->GetBranch();; 5799 if (std::find(fSeqBranches.begin(), fSeqBranches.end(), countBranch) == fSeqBranches.end()) {; 5800 fSeqBranches.push_back(countBranch);; 5801 }; 5802 }; 5803 }; 5804 }; 5805 ; 5806 // Any branch that is not a leaf count can be safely processed in parallel when reading; 5807 // We need to reset the vector to make sure we do not re-add several times the same branch.; 5808 if (!checkLeafCount) {; 5809 fSortedBranches.clear();; 5810 }; 5811 for (Int_t i = 0; i < nbranches; i++) {; 5812 Long64_t bbytes = 0;; 5813 TBranch* branch = (TBranch*)fBranches.UncheckedAt(i);; 5814 if (std::find(fSeqBranches.begin(), fSeqBranches.end(), branch) == fSeqBranches.end()) {; 5815 bbytes = branch->GetTotBytes(""*"");; 5816 fSortedBranches.emplace_back(bbytes, branch);; 5817 }; 5818 }; 5819 ; 5820 // Initially sort parallel branches by size; 5821 std::sort(fSortedBranches.begin(),; 5822 fSortedBranches.end(),; 5823 [](std::pair<Long64_t,TBranch*> a, std::pair<Long64_t,TBranch*> b) {; 5824 return a.first > b.first;; 5825 });; 5826 ; 5827 for (size_t i = 0; i < fSortedBranches.size(); i++) {; 5828 fSortedBranches[i].first = 0LL;; 5829 }; 5830}; 5831 ; 5832////////////////////////////////////////////////////////////////////////////////; 5833/// Sorts top-level branches by the last average task time recorded per branch.; 5834 ; 5835void TTree::SortBranchesByTime(); 5836{; 5837 for (size_t i = 0; i < fSortedBranches.size(); i++) {; 5838 fSortedBranches[i].first *= kNEntriesResortInv;; 5839",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:229388,clear,clear,229388,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['clear'],['clear']
Usability,".; : Similarly, a small value will lead to a large set of rules; : with similar weights.; : ; : A final point is the model used; rules and/or linear terms.; : For a given training sample, the result may improve by adding; : linear terms. If best performance is obtained using only linear; : terms, it is very likely that the Fisher discriminant would be; : a better choice. Ideally the fitting procedure should be able to; : make this choice by giving appropriate weights for either terms.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : I. TUNING OF RULE ENSEMBLE:; : ; : ␛[1mForestType ␛[0m: Recommended is to use the default ""AdaBoost"".; : ␛[1mnTrees ␛[0m: More trees leads to more rules but also slow; : performance. With too few trees the risk is; : that the rule ensemble becomes too simple.; : ␛[1mfEventsMin ␛[0m; : ␛[1mfEventsMax ␛[0m: With a lower min, more large trees will be generated; : leading to more complex rules.; : With a higher max, more small trees will be; : generated leading to more simple rules.; : By changing this range, the average complexity; : of the rule ensemble can be controlled.; : ␛[1mRuleMinDist ␛[0m: By increasing the minimum distance between; : rules, fewer and more diverse rules will remain.; : Initially it is a good idea to keep this small; : or zero and let the fitting do the selection of; : rules. In order to reduce the ensemble size,; : the value can then be increased.; : ; : II. TUNING OF THE FITTING:; : ; : ␛[1mGDPathEveFrac ␛[0m: fraction of events in path evaluation; : Increasing this fraction will improve the path; : finding. However, a too high value will give few; : unique events available for error estimation.; : It is recommended to use the default = 0.5.; : ␛[1mGDTau ␛[0m: cutoff parameter tau; : By default this value is set to -1.0.; : This means that the cut off parameter is; : automatically estimated. In most cases; : this should be fine. However, you may want; : to fix this value if you already know i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:54645,simpl,simple,54645,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['simpl'],['simple']
Usability,".; Bool_tfWrapTwoPi; static TEveElement::EDestructTEveElement::kAnnihilate; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveCaloData(const char* n = ""TEveCalData"", const char* t = """"); Constructor. void UnSelected(); Virtual method TEveElement::UnSelect.; Clear selected towers when deselected. void UnHighlighted(); Virtual method TEveElement::UnHighlighted. TString GetHighlightTooltip(). void FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); Populate set impSelSet with derived / dependant elements. void PrintCellsSelected(); Print selected cells info. void ProcessSelection(TEveCaloData::vCellId_t& sel_cells, TGLSelectRecord& rec); Process newly selected cells with given select-record.; Secondary-select status is set.; CellSelectionChanged() is called if needed. void SetSliceThreshold(Int_t slice, Float_t threshold); Set threshold for given slice. Float_t GetSliceThreshold(Int_t slice) const; Get threshold for given slice. void SetSliceColor(Int_t slice, Color_t col); Set color for given slice. Color_t GetSliceColor(Int_t slice) const; Get color for given slice. void SetSliceTransparency(Int_t slice, Char_t t); Set transparency for given slice. Char_t GetSliceTransparency(Int_t slice) const; Get transparency for given slice. void InvalidateUsersCellI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveCaloData.html:21271,Clear,Clear,21271,root/html602/TEveCaloData.html,https://root.cern,https://root.cern/root/html602/TEveCaloData.html,2,['Clear'],['Clear']
Usability,".; Definition at line 450 of file TEmulatedCollectionProxy.cxx. ◆ Shrink(). void TEmulatedCollectionProxy::Shrink ; (; UInt_t ; nCurr, . UInt_t ; left, . Bool_t ; force . ). protected . Definition at line 266 of file TEmulatedCollectionProxy.cxx. ◆ Size(). UInt_t TEmulatedCollectionProxy::Size ; (; ); const. overridevirtual . Return the current number of elements in the container. ; Implements TVirtualCollectionProxy.; Reimplemented in TEmulatedMapProxy.; Definition at line 249 of file TEmulatedCollectionProxy.cxx. ◆ Sizeof(). UInt_t TEmulatedCollectionProxy::Sizeof ; (; ); const. inlineoverridevirtual . Return the sizeof() of the collection object. ; Implements TVirtualCollectionProxy.; Definition at line 92 of file TEmulatedCollectionProxy.h. ◆ Streamer() [1/2]. void TEmulatedCollectionProxy::Streamer ; (; TBuffer & ; refBuffer, . void * ; pObject, . int ; siz . ). inlineoverridevirtual . Streamer I/O overload. ; Reimplemented from TGenCollectionProxy.; Reimplemented in TEmulatedMapProxy.; Definition at line 124 of file TEmulatedCollectionProxy.h. ◆ Streamer() [2/2]. void TEmulatedCollectionProxy::Streamer ; (; TBuffer & ; refBuffer). overridevirtual . Streamer Function. ; Reimplemented from TGenCollectionProxy.; Reimplemented in TEmulatedMapProxy.; Definition at line 624 of file TEmulatedCollectionProxy.cxx. ◆ WriteItems(). void TEmulatedCollectionProxy::WriteItems ; (; int ; nElements, . TBuffer & ; b . ). protected . Definition at line 556 of file TEmulatedCollectionProxy.cxx. Friends And Related Symbol Documentation. ◆ TCollectionProxy. friend class TCollectionProxy. friend . Definition at line 21 of file TEmulatedCollectionProxy.h. Libraries for TEmulatedCollectionProxy:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TEmulatedCollectionProxy.h; io/io/src/TEmulatedCollectionProxy.cxx. TEmulatedCollectionProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:23174,Guid,Guide,23174,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,1,['Guid'],['Guide']
Usability,".; Definition at line 545 of file TTVLVContainer.cxx. ◆ RemoveNonStatic(). void TTVLVContainer::RemoveNonStatic ; (; ). Remove all non-static items from the list view, except expressions. ; Definition at line 609 of file TTVLVContainer.cxx. ◆ ScanList(). const char * TTVLVContainer::ScanList ; (; ). Return the cut entry. ; Definition at line 422 of file TTVLVContainer.cxx. ◆ SelectItem(). void TTVLVContainer::SelectItem ; (; const char * ; name). Select an item. ; Definition at line 626 of file TTVLVContainer.cxx. ◆ SetListView(). void TTVLVContainer::SetListView ; (; TGListView * ; lv). inlineoverridevirtual . Reimplemented from TGLVContainer.; Definition at line 134 of file TTVLVContainer.h. ◆ SetViewer(). void TTVLVContainer::SetViewer ; (; TTreeViewer * ; viewer). inline . Definition at line 135 of file TTVLVContainer.h. Friends And Related Symbol Documentation. ◆ TGClient. friend class TGClient. friend . Definition at line 112 of file TTVLVContainer.h. Member Data Documentation. ◆ fCursor. Cursor_t TTVLVContainer::fCursor. private . Current cursor. ; Definition at line 115 of file TTVLVContainer.h. ◆ fDefaultCursor. Cursor_t TTVLVContainer::fDefaultCursor. private . Default cursor. ; Definition at line 116 of file TTVLVContainer.h. ◆ fExpressionList. TList* TTVLVContainer::fExpressionList. private . List of user defined expression widgets. ; Definition at line 119 of file TTVLVContainer.h. ◆ fListView. TGListView* TTVLVContainer::fListView. private . Associated list view. ; Definition at line 117 of file TTVLVContainer.h. ◆ fViewer. TTreeViewer* TTVLVContainer::fViewer. private . Pointer to tree viewer. ; Definition at line 118 of file TTVLVContainer.h. Libraries for TTVLVContainer:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TTVLVContainer.h; tree/treeviewer/src/TTVLVContainer.cxx. TTVLVContainer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVContainer.html:45094,Guid,Guide,45094,doc/master/classTTVLVContainer.html,https://root.cern,https://root.cern/doc/master/classTTVLVContainer.html,1,['Guid'],['Guide']
Usability,".; Definition at line 89 of file TListOfEnums.cxx. ◆ AddLast() [2/2]. void TListOfEnums::AddLast ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add object at the end of the list and also store option. ; Storing an option is useful when one wants to change the behaviour of an object a little without having to create a complete new copy of the object. This feature is used, for example, by the Draw() method. It allows the same object to be drawn in different ways. ; Reimplemented from THashList.; Reimplemented in TListOfEnumsWithLock.; Definition at line 102 of file TListOfEnums.cxx. ◆ Class(). static TClass * TListOfEnums::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TListOfEnums::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TListOfEnums::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 95 of file TListOfEnums.h. ◆ Clear(). void TListOfEnums::Clear ; (; Option_t * ; option). overridevirtual . Remove all objects from the list. ; Does not delete the objects unless the THashList is the owner (set via SetOwner()). ; Reimplemented from THashList.; Reimplemented in TListOfEnumsWithLock.; Definition at line 157 of file TListOfEnums.cxx. ◆ DeclFileName(). static const char * TListOfEnums::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 95 of file TListOfEnums.h. ◆ Delete(). void TListOfEnums::Delete ; (; Option_t * ; option = """"). overridevirtual . Delete all TDataMember object files. ; Reimplemented from THashList.; Reimplemented in TListOfEnumsWithLock.; Definition at line 168 of file TListOfEnums.cxx. ◆ Find(). TEnum * TListOfEnums::Find ; (; DeclId_t ; id); const. Return the TEnum corresponding to the Decl 'id' or NULL if it does not exist. ; Definition at line 179 of file TListOfEnums.cxx. ◆ FindObject() [1/3]. TObject * TListOfEnums::Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnums.html:26921,Clear,Clear,26921,doc/master/classTListOfEnums.html,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html,1,['Clear'],['Clear']
Usability,".; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:30506,simpl,simple,30506,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,".; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TSelector.; Definition at line 48 of file TSelHandleDataSet.h. ◆ Process(). Bool_t TSelHandleDataSet::Process ; (; Long64_t ; entry). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either TTree::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms. ; Reimplemented from TSelector.; Definition at line 165 of file TSelHandleDataSet.cxx. ◆ ReleaseCache(). void TSelHandleDataSet::ReleaseCache ; (; const char * ; fn). private . Release the memory cache associated with file 'fn'. ; Definition at line 74 of file TSelHandleDataSet.cxx. ◆ RemoveFile(). void TSelHandleDataSet::RemoveFile ; (; const char * ; fn). private . Physically remove the file 'fn'. ; Definition at line 109 of file TSelHandleDataSet.cxx. ◆ SetInputList(). void TSelHandleDataSet::SetInputList ; (; TList * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 52 of file TSelHandleDataSet.h. ◆ SetObject(). void TSelHandleDataSet::SetObject ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 51 of file TSelHandleDataSet.h. ◆ SetOption(). void TSelHandleDataSet::SetOption ; (; const char * ; option). inlineoverridevirtual . Reimplemented",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHandleDataSet.html:16426,simpl,simple,16426,doc/master/classTSelHandleDataSet.html,https://root.cern,https://root.cern/doc/master/classTSelHandleDataSet.html,1,['simpl'],['simple']
Usability,".; No Matches. TCollection Member List. This is the complete list of members for TCollection, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TObject *obj)=0TCollectionpure virtual; AddAll(const TCollection *col)TCollectionvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddVector(TObject *obj1,...)TCollection; AppendPad(Option_t *option="""")TObjectvirtual; AssertClass(TClass *cl) constTCollection; begin() constTCollectioninline; Browse(TBrowser *b) overrideTCollectionvirtual; Capacity() constTCollectioninline; CheckedHash()TObjectinline; Class()TCollectionstatic; Class_Name()TCollectionstatic; Class_Version()TCollectioninlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") override=0TCollectionpure virtual; Clone(const char *newname="""") const overrideTCollectionvirtual; Compare(const TObject *obj) const overrideTCollectionvirtual; Contains(const char *name) constTCollectioninline; Contains(const TObject *obj) constTCollectioninline; Copy(TObject &object) constTObjectvirtual; DeclFileName()TCollectioninlinestatic; Delete(Option_t *option="""") override=0TCollectionpure virtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTCollectionvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() const overrideTCollectionvirtual; EDeprecatedStatusBits enum nameTObject; EmptyGarbageCollection()TCollectionstatic; end() constTCollectioninline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTCollectionprotected; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollection-members.html:809,Clear,Clear,809,doc/master/classTCollection-members.html,https://root.cern,https://root.cern/doc/master/classTCollection-members.html,1,['Clear'],['Clear']
Usability,".; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and; conditions either of that version or of any later version published by; the Free Software Foundation. If the Library does not specify a; license version number, you may choose any version ever published by; the Free Software Foundation.; ; 14. If you wish to incorporate parts of the Library into other free; programs whose distribution conditions are incompatible with these,; write to the author to ask for permission. For software which is; copyrighted by the Free Software Foundation, write to the Free; Software Foundation; we sometimes make exceptions for this. Our; decision will be guided by the two goals of preserving the free status; of all derivatives of our free software and of promoting the sharing; and reuse of software generally. NO WARRANTY. 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO; WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.; EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR; OTHER PARTIES PROVIDE THE LIBRARY ""AS IS"" WITHOUT WARRANTY OF ANY; KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE; LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME; THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN; WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY; AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU; FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR; CONSEQUENTIAL DAMAGES A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/license.html:25203,guid,guided,25203,d/license.html,https://root.cern,https://root.cern/d/license.html,1,['guid'],['guided']
Usability,".; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range ''; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; result of fit on all data ; ; RooFitResult: minimized FCN value: 25939.4, estimated distance to minimum: 3.77183e-06; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; f 5.0441e-01 +/- 6.32e-03; mx -2.1605e-02 +/- 1.77e-02; ; result of fit in in signal region (note increased error on signal fraction); ; RooFitResult: minimized FCN value: 10339.5, estimated distance to minimum: 0.000279216; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; f 4.8979e-01 +/- 1.62e-02; mx -2.1518e-02 +/- 1.79e-02; ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf203_ranges.C. tutorialsroofitrf203_ranges.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf203__ranges_8C.html:8667,Guid,Guide,8667,doc/master/rf203__ranges_8C.html,https://root.cern,https://root.cern/doc/master/rf203__ranges_8C.html,1,['Guid'],['Guide']
Usability,".; The function returns a pointer to the cache. void SetFCN(void* fcn); To set the address of the minimization objective function. this function is called by CINT instead of the function above. void SetMaxIterations(Int_t niter = 5000); static: Set the maximum number of function calls for the minimization algorithm; For example for MIGRAD this is the maxcalls value passed as first argument; (see http://wwwasdoc.web.cern.ch/wwwasdoc/minuit/node18.html ). void SetErrorDef(Double_t errdef = 1); static: Set the Error Definition (default=1); For Minuit this is the value passed with the ""SET ERR"" command; (see http://wwwasdoc.web.cern.ch/wwwasdoc/minuit/node18.html). void SetPrecision(Double_t prec = 9.9999999999999995E-7); static: Set the tolerance used in the minimization algorithm; For example for MIGRAD this is tolerance value passed as second argument; (see http://wwwasdoc.web.cern.ch/wwwasdoc/minuit/node18.html ). Double_t Chisquare(Int_t npar, Double_t* params) const. void Clear(Option_t* option = """"). Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs). void FixParameter(Int_t ipar). Double_t * GetCovarianceMatrix() const. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc) const. FCNFunc_t GetFCN(); { return fFCN; }. Foption_t GetFitOption() const; {return fOption;}. TMethodCall * GetMethodCall() const; {return fMethodCall;}. Int_t GetNumberTotalParameters() const. Int_t GetNumberFreeParameters() const. TObject * GetObjectFit() const; {return fObjectFit;}. Double_t GetParError(Int_t ipar) const. Double_t GetParameter(Int_t ipar) const. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const. const char * GetParName(Int_t ipar) const. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const. Double_t GetSumLog(Int_t i). TObject * GetUserFunc(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualFitter.html:13050,Clear,Clear,13050,root/html602/TVirtualFitter.html,https://root.cern,https://root.cern/root/html602/TVirtualFitter.html,2,['Clear'],['Clear']
Usability,".; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBar.html:1582,Simpl,Simple,1582,root/html526/TControlBar.html,https://root.cern,https://root.cern/root/html526/TControlBar.html,7,['Simpl'],['Simple']
Usability,".; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; const BaseIntegratorOptions & ; opt). Definition at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor to avoid user creating this class ; Definition at line 52 of file IntegratorOptions.h. Member Function Documentation. ◆ AbsTolerance(). double ROOT::Math::BaseIntegratorOptions::AbsTolerance ; (; ); const. inline . non-static methods for retrieving options ; absolute tolerance ; Definition at line 61 of file IntegratorOptions.h. ◆ ClearExtra(). void ROOT::Math::BaseIntegratorOptions::ClearExtra ; (; ). protected . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extra options ; Definition at line 71 of file IntegratorOptions.h. ◆ Integrator(). virtual std::string ROOT::Math::BaseIntegratorOptions::Integrator ; (; ); const. pure virtual . name of 1D integrator ; Implemented in ROOT::Math::IntegratorOneDimOptions, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Definition at line 137 of file IntegratorOptions.cxx. ◆ RelTolerance(). double ROOT::Math::BaseIntegratorOptions::RelTolerance ; (; ); const. inline . absolute tolerance ; Definition at line 64 of file IntegratorOptions.h. ◆ SetAbsTolerance(). void ROOT::Math::BaseIntegratorOptions::SetAbsTolerance ; (; doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:3161,Clear,ClearExtra,3161,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,".; [legend]; Constructor & Destructor Documentation. ◆ TProfile2PolyBin() [1/2]. TProfile2PolyBin::TProfile2PolyBin ; (; ). TProfile2PolyBin constructor. ; Definition at line 40 of file TProfile2Poly.cxx. ◆ TProfile2PolyBin() [2/2]. TProfile2PolyBin::TProfile2PolyBin ; (; TObject * ; poly, . Int_t ; bin_number . ). TProfile2PolyBin constructor. ; Definition at line 54 of file TProfile2Poly.cxx. ◆ ~TProfile2PolyBin(). TProfile2PolyBin::~TProfile2PolyBin ; (; ). inlineoverride . Definition at line 25 of file TProfile2Poly.h. Member Function Documentation. ◆ Class(). static TClass * TProfile2PolyBin::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProfile2PolyBin::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProfile2PolyBin::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 55 of file TProfile2Poly.h. ◆ ClearStats(). void TProfile2PolyBin::ClearStats ; (; ). Clear statistics. ; Definition at line 111 of file TProfile2Poly.cxx. ◆ DeclFileName(). static const char * TProfile2PolyBin::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 55 of file TProfile2Poly.h. ◆ Fill(). void TProfile2PolyBin::Fill ; (; Double_t ; value, . Double_t ; weight . ). protected . Fill. ; Definition at line 124 of file TProfile2Poly.cxx. ◆ GetEffectiveEntries(). Double_t TProfile2PolyBin::GetEffectiveEntries ; (; ); const. inline . Definition at line 32 of file TProfile2Poly.h. ◆ GetEntries(). Double_t TProfile2PolyBin::GetEntries ; (; ); const. inline . Definition at line 33 of file TProfile2Poly.h. ◆ GetEntriesVW(). Double_t TProfile2PolyBin::GetEntriesVW ; (; ); const. inline . Definition at line 35 of file TProfile2Poly.h. ◆ GetEntriesW2(). Double_t TProfile2PolyBin::GetEntriesW2 ; (; ); const. inline . Definition at line 34 of file TProfile2Poly.h. ◆ GetEntriesWV2(). Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2PolyBin.html:13686,Clear,ClearStats,13686,doc/master/classTProfile2PolyBin.html,https://root.cern,https://root.cern/doc/master/classTProfile2PolyBin.html,1,['Clear'],['ClearStats']
Usability,".; void Delete(const char *namecycle); The namecycle string has the format name;cycle. The next are some rules to remember:. name = * means all, but don’t remove the subdirectories; cycle =* means all cycles (memory and file); cycle ="""" means apply to a memory object; cycle = 9999 also means apply to a memory object; namecycle = """" means the same as namecycle =“T*”; namecycle = T* delete subdirectories. For example to delete a directory from a file, you must specify the directory cycle:; root[] f->Delete(""Wed011003;1""); Some other examples of namecycle format are:. foo:delete the object named foo from memory; foo;1: delete the cycle 1 of the object named foo from the file; foo;*: delete all cycles of foo from the file and also from memory; *;2: delete all objects with cycle number 2 from the file; *;*: delete all objects from memory and from the file; T*;*: delete all objects from memory and from the file including all subdirectories. 11.3 Streamers; To follow the discussion on Streamers, you need to know what a simple data type is. A variable is of a simple data type if it cannot be decomposed into other types. Examples of simple data types are longs, shorts, floats, and chars. In contrast, a variable is of a composite data type if it can be decomposed. For example, classes, structures, and arrays are composite types. Simple types are also called primitive types, basic types, and Cling sometimes calls them fundamental types.; When we say, “writing an object to a file”, we actually mean writing the current values of the data members. The most common way to do this is to decompose (also called the serialization of) the object into its data members and write them to disk. The decomposition is the job of the Streamer. Every class with ambitions to be stored in a file has a Streamerthat decomposes it and “streams” its members into a buffer.; The methods of the class are not written to the file, it contains only the persistent data members. To decompose the parent classe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:465529,simpl,simple,465529,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,".C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.10/09 - Reference Guide Generated on Thu May 31 2018 12:15:45 using Doxygen 1.8.13. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:162329,Guid,Guide,162329,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['Guid'],['Guide']
Usability,".Data());; 3069 delete list;; 3070 filelist->Delete();; 3071 delete filelist;; 3072 fclose(fpMAKE);; 3073 fclose(ifp);; 3074 return;; 3075 }; 3076 if (genreflex) {; 3077 fprintf(fp,""<lcgdict>\n"");; 3078 fprintf(fp,""\n"");; 3079 } else {; 3080 fprintf(fp,""#ifdef __CINT__\n"");; 3081 fprintf(fp,""\n"");; 3082 }; 3083 ; 3084 TString tmp;; 3085 TString instances;; 3086 TString selections;; 3087 next.Reset();; 3088 while ((info = (TStreamerInfo*)next())) {; 3089 if (info->IsA() != TStreamerInfo::Class()) {; 3090 continue;; 3091 }; 3092 if (strncmp(info->GetName(), ""auto_ptr<"", strlen(""auto_ptr<"")) == 0) {; 3093 continue;; 3094 }; 3095 TClass *cl = TClass::GetClass(info->GetName());; 3096 if (cl) {; 3097 if (cl->HasInterpreterInfo()) continue; // skip known classes; 3098 if (cl->GetSchemaRules()) {; 3099 auto rules = cl->GetSchemaRules()->FindRules(cl->GetName(), info->GetClassVersion());; 3100 TString strrule;; 3101 for(auto rule : rules) {; 3102 strrule.Clear();; 3103 if (genreflex) {; 3104 rule->AsString(strrule,""x"");; 3105 strrule.Append(""\n"");; 3106 if ( selections.Index(strrule) == kNPOS ) {; 3107 selections.Append(strrule);; 3108 }; 3109 } else {; 3110 rule->AsString(strrule);; 3111 if (strncmp(strrule.Data(),""type="",5)==0) {; 3112 strrule.Remove(0,5);; 3113 }; 3114 fprintf(fp,""#pragma %s;\n"",strrule.Data());; 3115 }; 3116 }; 3117 }; 3118 ; 3119 }; 3120 if ((info->GetClass() && info->GetClass()->GetCollectionType()) || TClassEdit::IsSTLCont(info->GetName())) {; 3121 std::vector<std::string> inside;; 3122 int nestedLoc;; 3123 TClassEdit::GetSplit( info->GetName(), inside, nestedLoc, TClassEdit::kLong64 );; 3124 Int_t stlkind = TClassEdit::STLKind(inside[0]);; 3125 TClass *key = TClass::GetClass(inside[1].c_str());; 3126 if (key) {; 3127 TString what;; 3128 switch ( stlkind ) {; 3129 case ROOT::kSTLmap:; 3130 case ROOT::kSTLmultimap:; 3131 if (TClass::GetClass(inside[1].c_str())) {; 3132 what = ""std::pair<"";; 3133 what += TMakeProject::UpdateAssociativeToVector( inside[1]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:111866,Clear,Clear,111866,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Clear'],['Clear']
Usability,".Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAxis::SetTimeDisplayvirtual void SetTimeDisplay(Int_t value)Definition TAxis.h:171; TAxis::SetTimeFormatvirtual void SetTimeFormat(const char *format="""")Change the format used for time plotting.Definition TAxis.cxx:1157; TCanvasThe Canvas class.Definition TCanvas.h:23; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TH1::SetBarOffsetvirtual void SetBarOffset(Float_t offset=0.25)Set the bar offset as fraction of the bin width for drawing mode ""B"".Definition TH1.h:364; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetBarWidthvirtual void SetBarWidth(Float_t width=0.5)Set the width of bars as fraction of the bin width for drawing mode ""B"".Definition TH1.h:365; TH2I2-D histogram with an int per channel (see TH1 documentation)Definition TH2.h:225; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TStyle::SetTimeOffsetvoid SetTimeOffset(Double_t toffset)Change the time offset for time plotting.Definition TStyle.cxx:1913; ROOT::VecOps::sinRVec< PromoteType< T > > sin(const RVec< T > &v)Definition RVec.hxx:1851; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188. tutorialshistcandleplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/candleplot_8C_source.html:4006,Guid,Guide,4006,doc/master/candleplot_8C_source.html,https://root.cern,https://root.cern/doc/master/candleplot_8C_source.html,1,['Guid'],['Guide']
Usability,".Definition TEnum.h:33; TObjectMother of all ROOT objects.Definition TObject.h:41; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition TVirtualStreamerInfo.h:44; ROOT::Experimental::NTupleSize_tstd::uint64_t NTupleSize_tInteger type long enough to hold the maximum number of entries in a column.Definition RNTupleUtil.hxx:115; ROOT::Experimental::ENTupleStructureENTupleStructureThe fields in the ntuple model tree can carry different structural information about the type system.Definition RNTupleUtil.hxx:112; ROOT::Experimental::kLeaf@ kLeafDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kRecord@ kRecordDefinition RNTupleUtil.hxx:112; ROOT::Internal::GetDemangledTypeNamestd::string GetDemangledTypeName(const std::type_info &t)Definition TGenericClassInfo.cxx:31; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Experimental::RClassField::RSubFieldInfoDefinition RField.hxx:105; ROOT::Experimental::RClassField::RSubFieldInfo::fRoleESubFieldRole fRoleDefinition RField.hxx:106; ROOT::Experimental::RClassField::RSubFieldInfo::fOffsetstd::size_t fOffsetDefinition RField.hxx:107; ROOT::Experimental::RClusterSizeWrap the integer in a struct in order to avoid template specialization clash with std::uint64_t.Definition RNTupleUtil.hxx:118; ROOT::Experimental::RClusterSize::ValueTypestd::uint64_t ValueTypeDefinition RNTupleUtil.hxx:119; ROOT::Experimental::RFieldBase::RBulkSpecDefinition RFieldBase.hxx:668; ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >Definition RField.hxx:461; ROOT::Experimental::RFieldBase::RCreateObjectDeleterDefinition RFieldBase.hxx:448; ROOT::RNTupleCardinalityHelper types to present an offset column as array of collection sizes.Definition RNTupleUtil.hxx:32. treentuplev7incROOTRField.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RField_8hxx_source.html:41728,Guid,Guide,41728,doc/master/RField_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RField_8hxx_source.html,1,['Guid'],['Guide']
Usability,".Definition TGeoChecker.cxx:2179; TGeoChecker::RandomPointsvoid RandomPoints(TGeoVolume *vol, Int_t npoints, Option_t *option)Draw random points in the bounding box of a volume.Definition TGeoChecker.cxx:2260; TGeoChecker::CheckBoundaryErrorsvirtual void CheckBoundaryErrors(Int_t ntracks=1000000, Double_t radius=-1.)Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNe...Definition TGeoChecker.cxx:257; TGeoCompositeShapeComposite shapes are Boolean combinations of two or more shape components.Definition TGeoCompositeShape.h:27; TGeoCompositeShape::PaintCompositevirtual Bool_t PaintComposite(Option_t *option="""") constPaint this composite shape into the current 3D viewer Returns bool flag indicating if the caller shou...Definition TGeoCompositeShape.cxx:429; TGeoHMatrixMatrix class used for computing global transformations Should NOT be used for node definition.Definition TGeoMatrix.h:458; TGeoHMatrix::Clearvoid Clear(Option_t *option="""") overrideclear the data for this matrixDefinition TGeoMatrix.cxx:2512; TGeoIteratorPlugin::SetIteratorvoid SetIterator(const TGeoIterator *iter)Definition TGeoNode.h:237; TGeoIteratorPlugin::ProcessNodevirtual void ProcessNode()=0; TGeoIteratorA geometry iterator.Definition TGeoNode.h:248; TGeoIterator::GetCurrentMatrixconst TGeoMatrix * GetCurrentMatrix() constReturns global matrix for current node.Definition TGeoNode.cxx:1163; TGeoIterator::SetTopNamevoid SetTopName(const char *name)Set the top name for path.Definition TGeoNode.cxx:1234; TGeoIterator::GetLevelInt_t GetLevel() constDefinition TGeoNode.h:294; TGeoIterator::GetPathvoid GetPath(TString &path) constReturns the path for the current node.Definition TGeoNode.cxx:1193; TGeoIterator::SetUserPluginvoid SetUserPlugin(TGeoIteratorPlugin *plugin)Set a plugin.Definition TGeoNode.cxx:1282; TGeoIterator::Skipvoid Skip()Stop iterating the current branch.Definition TGeoNode.cxx:1243; TGeoManagerThe manager class for any TGeo geometry.Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:85787,Clear,Clearvoid,85787,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,".Definition TGeoManager.cxx:3934; TGeoManager::BuildDefaultMaterialsvoid BuildDefaultMaterials()Now just a shortcut for GetElementTable.Definition TGeoManager.cxx:3615; TGeoManager::SetMaxThreadsvoid SetMaxThreads(Int_t nthreads)Set maximum number of threads for navigation.Definition TGeoManager.cxx:924; TGeoManager::MediumTGeoMedium * Medium(const char *name, Int_t numed, Int_t nmat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t stemax, Double_t deemax, Double_t epsil, Double_t stmin)Create tracking medium.Definition TGeoManager.cxx:1331; TGeoManager::SetExplodedViewvoid SetExplodedView(Int_t iopt=0)Set type of exploding view (see TGeoPainter::SetExplodedView())Definition TGeoManager.cxx:3569; TGeoManager::WeightDouble_t Weight(Double_t precision=0.01, Option_t *option=""va"")Estimate weight of volume VOL with a precision SIGMA(W)/W better than PRECISION.Definition TGeoManager.cxx:3896; TGeoManager::ClearPhysicalNodesvoid ClearPhysicalNodes(Bool_t mustdelete=kFALSE)Clear the current list of physical nodes, so that we can start over with a new list.Definition TGeoManager.cxx:3542; TGeoManager::Parsestatic Int_t Parse(const char *expr, TString &expr1, TString &expr2, TString &expr3)Parse a string boolean expression and do a syntax check.Definition TGeoManager.cxx:2540; TGeoManager::GetBombFactorsvoid GetBombFactors(Double_t &bombx, Double_t &bomby, Double_t &bombz, Double_t &bombr) constRetrieve cartesian and radial bomb factors.Definition TGeoManager.cxx:2095; TGeoManager::GetPropertyDouble_t GetProperty(const char *name, Bool_t *error=nullptr) constGet a user-defined property.Definition TGeoManager.cxx:656; TGeoManager::fTracksTObjArray * fTrackslist of runtime volumesDefinition TGeoManager.h:99; TGeoManager::IsAnimatingTracksBool_t IsAnimatingTracks() constDefinition TGeoManager.h:388; TGeoManager::GetPathconst char * GetPath() constGet path to the current node in the form /node0/node1/...Definition TGeoManager.cxx:2881; TGeoManager::fgNumThr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:206009,Clear,ClearPhysicalNodesvoid,206009,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,3,['Clear'],"['Clear', 'ClearPhysicalNodes', 'ClearPhysicalNodesvoid']"
Usability,".Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TStringBasic string class.Definition TString.h:139; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; bool; double; int; TMath::ACosDouble_t ACos(Double_t)Returns the principal value of the arc cosine of x, expressed in radians.Definition TMath.h:632; TMath::ASinDouble_t ASin(Double_t)Returns the principal value of the arc sine of x, expressed in radians.Definition TMath.h:624; TMath::ATan2Double_t ATan2(Double_t y, Double_t x)Returns the principal value of the arc tangent of y/x, expressed in radians.Definition TMath.h:646; TMath::DegToRadconstexpr Double_t DegToRad()Conversion from degree to radian: .Definition TMath.h:79; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::RadToDegconstexpr Double_t RadToDeg()Conversion from radian to degree: .Definition TMath.h:72; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699; th3auto * th3Definition textalign.C:22; th2auto * th2Definition textalign.C:18; th1auto * th1Definition textalign.C:14; mTMarker mDefinition textangle.C:8. geomgeomsrcTGeoMatrix.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:128723,Guid,Guide,128723,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Guid'],['Guide']
Usability,".Definition TQObject.h:48; TQObject::Emitvoid Emit(const char *signal, const T &arg)Activate signal with single parameter.Definition TQObject.h:164; TStringBasic string class.Definition TString.h:139; TViewSee TView3D.Definition TView.h:25; TVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas.Definition TVirtualPadPainter.h:19; TVirtualPad::TContextsmall helper class to store/restore gPad context in TPad methodsDefinition TVirtualPad.h:61; TVirtualPad::TContext::GetSavedauto GetSaved() constDefinition TVirtualPad.h:69; TVirtualPad::TContext::fInteractiveBool_t fInteractiveDefinition TVirtualPad.h:62; TVirtualPad::TContext::~TContext~TContext()Destructor Restores previous value of gPad.Definition TVirtualPad.cxx:61; TVirtualPad::TContext::IsInteractiveauto IsInteractive() constDefinition TVirtualPad.h:68; TVirtualPad::TContext::fSavedTVirtualPad * fSavedDefinition TVirtualPad.h:63; TVirtualPad::TContext::PadDeletedvoid PadDeleted(TVirtualPad *pad)Inform context that pad deleted or will be deleted soon Reference on that pad should be cleared.Definition TVirtualPad.cxx:73; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::PaintFillAreaNDCvirtual void PaintFillAreaNDC(Int_t n, Double_t *x, Double_t *y, Option_t *option="""")=0; TVirtualPad::Modifiedvirtual void Modified(Bool_t flag=1)=0; TVirtualPad::PadInHighlightModevirtual Bool_t PadInHighlightMode() constShould always return false, unless you can highlight selected object in pad.Definition TVirtualPad.cxx:156; TVirtualPad::SetTickxvirtual void SetTickx(Int_t value=1)=0; TVirtualPad::SetAttMarkerPSvirtual void SetAttMarkerPS(Color_t color, Style_t style, Size_t msize)=0; TVirtualPad::Clipvirtual Int_t Clip(Double_t *x, Double_t *y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt)=0; TVirtualPad::SetGridvirtual void SetGrid(Int_t valuex=1, Int_t valuey=1)=0; TVirtualPad::CloseToolTipvirtual void CloseTo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualPad_8h_source.html:21592,clear,cleared,21592,doc/master/TVirtualPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualPad_8h_source.html,1,['clear'],['cleared']
Usability,".Definition TStreamerInfo.cxx:5229; TStreamerInfo::WriteBufferInt_t WriteBuffer(TBuffer &b, char *pointer, Int_t first)General Write.Definition TStreamerInfoWriteBuffer.cxx:863; TStreamerInfo::fWriteObjectWiseTStreamerInfoActions::TActionSequence * fWriteObjectWise! List of write action resulting from the compilation.Definition TStreamerInfo.h:108; TStreamerInfo::ReadBufferArtificialInt_t ReadBufferArtificial(TBuffer &b, const T &arrptr, TStreamerElement *aElement, Int_t narr, Int_t eoffset)Handle Artificial StreamerElement.Definition TStreamerInfoReadBuffer.cxx:526; TStreamerInfo::CallShowMembersvoid CallShowMembers(const void *obj, TMemberInspector &insp, Bool_t isTransient) const overrideEmulated a call ShowMembers() on the obj of this class type, passing insp and parent.Definition TStreamerInfo.cxx:2752; TStreamerInfo::SetOnFileClassVersionvoid SetOnFileClassVersion(Int_t vers)Definition TStreamerInfo.h:221; TStreamerInfo::Clearvoid Clear(Option_t *="""") overrideIf opt contains 'built', reset this StreamerInfo as if Build or BuildOld was never called on it (usef...Definition TStreamerInfo.cxx:2616; TStreamerInfo::SetCheckSumvoid SetCheckSum(UInt_t checksum) overrideDefinition TStreamerInfo.h:218; TStreamerInfo::GetElementsTObjArray * GetElements() const overrideDefinition TStreamerInfo.h:163; TStreamerInfo::fSizeInt_t fSize!size of the persistent classDefinition TStreamerInfo.h:92; TStreamerInfo::GetTypedValueAuxstatic T GetTypedValueAux(Int_t type, void *ladd, int k, Int_t len)Get the value from inside a collection.Definition TStreamerInfo.cxx:4338; TStreamerInfo::GenerateDeclarationvoid GenerateDeclaration(FILE *fp, FILE *sfp, const TList *subClasses, Bool_t top=kTRUE)Write the Declaration of class.Definition TStreamerInfo.cxx:3668; TStreamerInfo::PrintValueAuxstatic void PrintValueAux(char *ladd, Int_t atype, TStreamerElement *aElement, Int_t aleng, Int_t *count)print value of element in object at pointer, type atype, leng aleng or *count The function may be ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8h_source.html:37698,Clear,Clearvoid,37698,doc/master/TStreamerInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,".DrawCopy(); label1 = TPaveLabel( -3.5, 700, -1, 800, 'Default option' ); label1.SetFillColor( 42 ); label1.Draw(); #; # Draw hpx as a lego. Clicking on the lego area will show; # a ""transparent cube"" to guide you rotating the lego in real time.; pad2.cd(); hpx.DrawCopy( 'lego1' ); label2 = TPaveLabel( -0.72, 0.74, -0.22, 0.88, 'option Lego1' ); label2.SetFillColor( 42 ); label2.Draw(); label2a = TPaveLabel( -0.93, -1.08, 0.25, -0.92, 'Click on lego to rotate' ); label2a.SetFillColor( 42 ); label2a.Draw(); #; # Draw hpx with its errors and a marker.; pad3.cd(); pad3.SetGridx(); pad3.SetGridy(); pad3.GetFrame().SetFillColor( 18 ); hpx.SetMarkerStyle( 21 ); hpx.Draw( 'e1p' ); label3 = TPaveLabel( 2, 600, 3.5, 650, 'option e1p' ); label3.SetFillColor( 42 ); label3.Draw(); #; # The following illustrates how to add comments using a PaveText.; # Attributes of text/lines/boxes added to a PaveText can be modified.; # The AddText function returns a pointer to the added object.; pave = TPaveText( -3.78, 500, -1.2, 750 ); pave.SetFillColor( 42 ); t1 = pave.AddText( 'You can move' ); t1.SetTextColor( 4 ); t1.SetTextSize( 0.05 ); pave.AddText( 'Title and Stats pads' ); pave.AddText( 'X and Y axis' ); pave.AddText( 'You can modify bin contents' ); pave.Draw(); c1.Update(); SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; AuthorWim Lavrijsen ; Definition in file h1ReadAndDraw.py. tutorialspyrooth1ReadAndDraw.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1ReadAndDraw_8py.html:3248,Guid,Guide,3248,doc/master/h1ReadAndDraw_8py.html,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8py.html,1,['Guid'],['Guide']
Usability,".DrawLatex(.5,.5,""e"");; ; pad->cd(14); gPad->SetFillColor(leptonColor);; gPad->SetBorderSize(border);; tex.DrawLatex(.5,.56,""#mu"");; ; pad->cd(15); gPad->SetFillColor(leptonColor);; gPad->SetBorderSize(border);; tex.DrawLatex(.5,.5,""#tau"");; ; pad->cd(16); gPad->SetFillColor(forceColor);; gPad->SetBorderSize(border);; tex.DrawLatex(.5,.5,""W"");; ; c1->cd();; }; Int_tint Int_tDefinition RtypesCore.h:45; kBlack@ kBlackDefinition Rtypes.h:65; kYellow@ kYellowDefinition Rtypes.h:66; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextAnglevirtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file quarks.C. tutorialsgraphicsquarks.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/quarks_8C.html:4816,Guid,Guide,4816,doc/master/quarks_8C.html,https://root.cern,https://root.cern/doc/master/quarks_8C.html,1,['Guid'],['Guide']
Usability,".Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80335,simpl,simple,80335,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,".SetTextSize(0.06);; l.DrawMathText(0.50, 1.000, ""\\prod_{j\\ge0} \\left(\\sum_{k\\ge0} a_{jk}z^k\\right) = \\sum_{n\\ge0} z^n \\left(\\sum_{k_0,k_1,\\ldots\\ge0\\atop k_0+k_1+\\cdots=n} a_{0k_0}a_{1k_1} \\cdots \\right)"");; l.DrawMathText(0.50, 0.800, ""W_{\\delta_1\\rho_1\\sigma_2}^{3\\beta} = U_{\\delta_1\\rho_1\\sigma_2}^{3\\beta} + {1\\over 8\\pi^2} \\int_{\\alpha_1}^{\\alpha_2} d\\alpha_2^\\prime \\left[ {U_{\\delta_1\\rho_1}^{2\\beta} - \\alpha_2^\\prime U_{\\rho_1\\sigma_2}^{1\\beta} \\over U_{\\rho_1\\sigma_2}^{0\\beta}} \\right]"");; l.DrawMathText(0.50, 0.600, ""d\\Gamma = {1\\over 2m_A} \\left( \\prod_f {d^3p_f\\over (2\\pi)^3} {1\\over 2E_f} \\right) \\left| \\mathscr{M} \\left(m_A - \\left\\{p_f\\right\\} \\right) \\right|^2 (2\\pi)^4 \\delta^{(4)} \\left(p_A - \\sum p_f \\right)"");; l.DrawMathText(0.50, 0.425, ""4\\mathrm{Re}\\left\\{{2\\over 1-\\Delta\\alpha} \\chi(s) \\left[ \\^{g}_\\nu^e \\^{g}_\\nu^f (1 + \\cos^2\\theta) + \\^{g}_a^e \\^{g}_a^f \\cos\\theta \\right] \\right\\}"");; l.DrawMathText(0.50, 0.330, ""p(n) = {1\\over\\pi\\sqrt{2}} \\sum_{k = 1}^\\infty \\sqrt{k} A_k(n) {d\\over dn} {\\sinh \\left\\{ {\\pi\\over k} \\sqrt{2\\over 3} \\sqrt{n - {1\\over 24}} \\right\\} \\over \\sqrt{n - {1\\over 24}}}"");; l.DrawMathText(0.13, 0.150, ""{(\\ell+1)C_{\\ell}^{TE} \\over 2\\pi}"");; l.DrawMathText(0.27, 0.110, ""\\mathbb{N} \\subset \\mathbb{R}"");; l.DrawMathText(0.63, 0.100, ""\\hbox{RHIC スピン物理 Нью-Йорк}"");; ; c1->Print(""c1.png"");; c1->Print(""c1.ps"");; ; return c1;; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TLine::Printvoid Print(Option_t *option="""") const overrideDump this line with its attributes.Definition TLine.cxx:419; TMathTextTo draw TeX Mathematical Formula.Definition TMathText.h:19; c1return c1Definition legend1.C:41; lTLine lDefinition textangle.C:4; AuthorYue Shi Lai ; Definition in file tmathtext.C. tutorialsgraphicstmathtext.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmathtext_8C.html:2325,Guid,Guide,2325,doc/master/tmathtext_8C.html,https://root.cern,https://root.cern/doc/master/tmathtext_8C.html,1,['Guid'],['Guide']
Usability,".begin(); it<gvec.end(); it++ ){; std::cout << ""FACTOR "" << n << "" : "" << (*it) << std::endl;; n++;; }; }; ; ; int main( int argc, char** argv ); {; TMVAGAexample();; }; GeneticAlgorithm.h; GeneticFitter.h; IFitterTarget.h; mainint main()Definition Prototype.cxx:12; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; targetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t targetDefinition TGWin32VirtualXProxy.cxx:247; TMVA::GeneticAlgorithmBase definition for genetic algorithm.Definition GeneticAlgorithm.h:50; TMVA::GeneticGenesCut optimisation interface class for genetic algorithm.Definition GeneticGenes.h:41; TMVA::GeneticGenes::GetFactorsstd::vector< Double_t > & GetFactors()Definition GeneticGenes.h:49; TMVA::IFitterTargetInterface for a fitter 'target'.Definition IFitterTarget.h:44; TMVA::IntervalThe TMVA::Interval Class.Definition Interval.h:61; nconst Int_t nDefinition legend1.C:16; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; AuthorAndreas Hoecker ; Definition in file TMVAGAexample.C. tutorialstmvaTMVAGAexample.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAGAexample_8C.html:8876,Guid,Guide,8876,doc/master/TMVAGAexample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAGAexample_8C.html,1,['Guid'],['Guide']
Usability,".cxx. ◆ CheckOperands() [1/2]. Bool_t TFormula::CheckOperands ; (; Int_t ; leftoperand, . Int_t ; rightoperartion, . Int_t & ; err . ). protectedvirtual . Check whether the operands at 'leftoper' and 'oper-1' are compatible with the operation at 'oper'. ; Definition at line 2181 of file TFormula_v5.cxx. ◆ CheckOperands() [2/2]. Bool_t TFormula::CheckOperands ; (; Int_t ; operation, . Int_t & ; err . ). protectedvirtual . Check whether the operand at 'oper-1' is compatible with the operation at 'oper'. ; Definition at line 2167 of file TFormula_v5.cxx. ◆ Class(). static TClass * ROOT::v5::TFormula::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::v5::TFormula::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::v5::TFormula::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 271 of file TFormula.h. ◆ Clear(). void TFormula::Clear ; (; Option_t * ; option = """"). overridevirtual . Resets the objects. ; Resets the object to its state before compilation. ; Reimplemented from TObject.; Definition at line 2212 of file TFormula_v5.cxx. ◆ ClearFormula(). void TFormula::ClearFormula ; (; Option_t * ; option = """"). protected . Resets the objects. ; Resets the object to its state before compilation. ; Definition at line 2222 of file TFormula_v5.cxx. ◆ Compile(). Int_t TFormula::Compile ; (; const char * ; expression = """"). virtual . Compile expression already stored in fTitle. ; Loop on all subexpressions of formula stored in fTitle; If you overload this member function, you also HAVE TO never call the constructor:; TFormula::TFormula(const char *name,const char *expression); and write your own constructor; MyClass::MyClass(const char *name,const char *expression) : TFormula(); which has to call the TFormula default constructor and whose implementation should be similar to the implementation of the normal TFormula constructor;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:32200,Clear,Clear,32200,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['Clear'],['Clear']
Usability,".cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system files. ; Definition at line 294 of file TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user seen so far. ; Definition at line 306 of file TTabCom.cxx. ◆ Complete(). Int_t TTabCom::Complete ; (; const TRegexp & ; re, . const TSeqCollection * ; pListOfCandidates",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9852,Clear,ClearFiles,9852,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearFiles']
Usability,".cxx. ◆ SetY2NDC(). virtual void TPave::SetY2NDC ; (; Double_t ; y2). inlinevirtual . Definition at line 85 of file TPave.h. ◆ Streamer(). void TPave::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TPave. ; Reimplemented from TBox.; Reimplemented in TPaveClass, TPaveLabel, TPaveStats, TPavesText, and TPaveText.; Definition at line 705 of file TPave.cxx. ◆ StreamerNVirtual(). void TPave::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 91 of file TPave.h. Member Data Documentation. ◆ fBorderSize. Int_t TPave::fBorderSize. protected . window box bordersize in pixels ; Definition at line 26 of file TPave.h. ◆ fCornerRadius. Double_t TPave::fCornerRadius. protected . Corner radius in case of option arc. ; Definition at line 29 of file TPave.h. ◆ fInit. Int_t TPave::fInit. protected . (=0 if transformation to NDC not yet done) ; Definition at line 27 of file TPave.h. ◆ fName. TString TPave::fName. protected . Pave name. ; Definition at line 31 of file TPave.h. ◆ fOption. TString TPave::fOption. protected . Pave style. ; Definition at line 30 of file TPave.h. ◆ fShadowColor. Int_t TPave::fShadowColor. protected . Color of the pave's shadow. ; Definition at line 28 of file TPave.h. ◆ fX1NDC. Double_t TPave::fX1NDC. protected . X1 point in NDC coordinates. ; Definition at line 22 of file TPave.h. ◆ fX2NDC. Double_t TPave::fX2NDC. protected . X2 point in NDC coordinates. ; Definition at line 24 of file TPave.h. ◆ fY1NDC. Double_t TPave::fY1NDC. protected . Y1 point in NDC coordinates. ; Definition at line 23 of file TPave.h. ◆ fY2NDC. Double_t TPave::fY2NDC. protected . Y2 point in NDC coordinates. ; Definition at line 25 of file TPave.h. Libraries for TPave:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TPave.h; graf2d/graf/src/TPave.cxx. TPave. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPave.html:31553,Guid,Guide,31553,doc/master/classTPave.html,https://root.cern,https://root.cern/doc/master/classTPave.html,1,['Guid'],['Guide']
Usability,".cxx. ◆ UpdateBackgroundStart(). void TGHtml::UpdateBackgroundStart ; (; ). overrideprotectedvirtual . Start background update. ; Reimplemented from TGView.; Definition at line 250 of file TGHtml.cxx. ◆ UpdateInsert(). void TGHtml::UpdateInsert ; (; ). protected . Recompute the position of the insertion cursor based on the position in fIns. ; Definition at line 2084 of file TGHtml.cxx. ◆ UpdateSelection(). void TGHtml::UpdateSelection ; (; int ; forceUpdate). protected . Given the selection end-points in fSelBegin and fSelEnd, recompute pSelBeginBlock and fPSelEndBlock, then call UpdateSelectionDisplay() to update the display. ; This routine should be called whenever the selection changes or whenever the set of TGHtmlBlock structures change. ; Definition at line 1928 of file TGHtml.cxx. ◆ UpdateSelectionDisplay(). void TGHtml::UpdateSelectionDisplay ; (; ). protected . The fPSelStartBlock and fPSelEndBlock values have been changed. ; This routine's job is to loop over all TGHtmlBlocks and either set or clear the HTML_Selected bits in the .fFlags field as appropriate. For every TGHtmlBlock where the bit changes, mark that block for redrawing. ; Definition at line 1981 of file TGHtml.cxx. Member Data Documentation. ◆ fAddEndTags. int TGHtml::fAddEndTags. protected . Definition at line 1254 of file TGHtml.h. ◆ fAFont. TGFont* TGHtml::fAFont[71]. protected . Definition at line 1228 of file TGHtml.h. ◆ fAGcCache. GcCache_t TGHtml::fAGcCache[32]. protected . Definition at line 1242 of file TGHtml.h. ◆ fAnchorFlags. int TGHtml::fAnchorFlags. protected . Definition at line 1200 of file TGHtml.h. ◆ fAnchorStart. TGHtmlAnchor* TGHtml::fAnchorStart. protected . Definition at line 1204 of file TGHtml.h. ◆ fApColor. ColorStruct_t* TGHtml::fApColor[32]. protected . Definition at line 1232 of file TGHtml.h. ◆ fBgColor. ColorStruct_t* TGHtml::fBgColor. protected . Definition at line 1237 of file TGHtml.h. ◆ fBgImage. TImage* TGHtml::fBgImage. protected . Definition at line 1246 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:92184,clear,clear,92184,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['clear'],['clear']
Usability,".cxx. ◆ begin() [1/4]. TIterator RooAbsCollection::begin ; (; ). ◆ begin() [2/4]. RooLinkedListIter RooAbsCollection::begin ; (; ). ◆ begin() [3/4]. RooFIter RooAbsCollection::begin ; (; ). ◆ begin() [4/4]. const_iterator RooAbsCollection::begin ; (; ); const. inline . Definition at line 276 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 455 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 305 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 415 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:36716,clear,clear,36716,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['clear'],['clear']
Usability,".cxx. ◆ translateImpl(). std::string RooRealSumPdf::translateImpl ; (; RooFit::Detail::CodeSquashContext & ; ctx, . RooAbsArg const * ; klass, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; normalize = false . ). staticprivate . Definition at line 300 of file RooRealSumPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddition. friend class RooAddition. friend . Definition at line 99 of file RooRealSumPdf.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 98 of file RooRealSumPdf.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 100 of file RooRealSumPdf.h. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumPdf::_coefList. protected . List of coefficients. ; Definition at line 89 of file RooRealSumPdf.h. ◆ _doFloor. bool RooRealSumPdf::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 92 of file RooRealSumPdf.h. ◆ _doFloorGlobal. bool RooRealSumPdf::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 94 of file RooRealSumPdf.h. ◆ _extended. bool RooRealSumPdf::_extended. protected . Allow use as extended p.d.f. ; Definition at line 90 of file RooRealSumPdf.h. ◆ _funcList. RooListProxy RooRealSumPdf::_funcList. protected . List of component FUNCs. ; Definition at line 88 of file RooRealSumPdf.h. ◆ _haveWarned. bool RooRealSumPdf::_haveWarned {false}. mutableprotected . ! ; Definition at line 93 of file RooRealSumPdf.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumPdf::_normIntMgr. mutableprotected . ! The integration cache manager ; Definition at line 85 of file RooRealSumPdf.h. Libraries for RooRealSumPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumPdf.h; roofit/roofitcore/src/RooRealSumPdf.cxx. RooRealSumPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumPdf.html:93493,Guid,Guide,93493,doc/master/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/master/classRooRealSumPdf.html,1,['Guid'],['Guide']
Usability,".cxx:1031; THStack::Browsevoid Browse(TBrowser *b) overrideBrowse.Definition THStack.cxx:381; THStack::Classstatic TClass * Class(); THStack::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideCompute distance from point px, py to each graph.Definition THStack.cxx:416; THStack::Modifiedvirtual void Modified()Note: this method invalidates the sum of histograms.Definition THStack.cxx:694; THStack::SetMinimumvirtual void SetMinimum(Double_t minimum=-1111)Set minimum.Definition THStack.cxx:1090; THStack::GetXaxisTAxis * GetXaxis() constGet the x-axis of the histogram used to draw the stack.Definition THStack.cxx:620; THStack::fMaximumDouble_t fMaximumMaximum value for plotting along y.Definition THStack.h:48; THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; TIterDefinition TCollection.h:235; TListA doubly linked list.Definition TList.h:38; TList::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the list.Definition TList.cxx:400; TList::LastLinkvirtual TObjLink * LastLink() constDefinition TList.h:107; TList::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRemove object from this collection and recursively remove the object from all other objects (and coll...Definition TList.cxx:762; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 when list is empty.Definition TList.cxx:657; TList::FirstLinkvirtual TObjLink * FirstLink() constDefinition TList.h:104; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THStack_8cxx_source.html:48189,Clear,Clearvoid,48189,doc/master/THStack_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THStack_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,".cxx:242; TFumili::fGrDouble_t * fGr[fMaxParam] Gradients of objective functionDefinition TFumili.h:38; TFumili::fGTDouble_t fGTExpected function change in next iteration.Definition TFumili.h:61; TFumili::SetParameterInt_t SetParameter(Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) overrideSets for parameter number ipar initial parameter value, name parname, initial error verr and limits v...Definition TFumili.cxx:1641; TFumili::fCwordTString fCwordCommand string.Definition TFumili.h:63; TFumili::FitLikelihoodIvirtual void FitLikelihoodI(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag)Minimization function for H1s using a Likelihood method.Definition TFumili.cxx:1972; TFumili::fRPDouble_t fRPPrecision of fit ( machine zero on CDC 6000) quite old yeh?Definition TFumili.h:59; TFumili::fCmParDouble_t * fCmPar[fMaxParam] parameters of commandsDefinition TFumili.h:55; TFumili::fDFDouble_t * fDF[fMaxParam] First derivatives of theoretical functionDefinition TFumili.h:54; TFumili::GetSumLogDouble_t GetSumLog(Int_t) overrideReturn Sum(log(i) i=0,n used by log-likelihood fits.Definition TFumili.cxx:921; TFumili::fSumLogDouble_t * fSumLog[fNlog]Definition TFumili.h:40; TFumili::fAMXDouble_t * fAMX[fMaxParam] Maximum param valueDefinition TFumili.h:50; TFumili::fDEBUGBool_t fDEBUGdebug infoDefinition TFumili.h:30; TFumili::fNlimMulInt_t fNlimMulfNlimMul - after fNlimMul successful iterations permits four-fold increasing of fPLDefinition TFumili.h:21; TFumili::fGRADBool_t fGRADuser calculated gradientsDefinition TFumili.h:28; TFumili::InvertZvoid InvertZ(Int_t)Inverts packed diagonal matrix Z by square-root method.Definition TFumili.cxx:945; TStringBasic string class.Definition TString.h:139; TVirtualFitterAbstract Base Class for Fitting.Definition TVirtualFitter.h:29; bool; double; int. mathfumiliincTFumili.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8h_source.html:15544,Guid,Guide,15544,doc/master/TFumili_8h_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8h_source.html,1,['Guid'],['Guide']
Usability,".cxx:67; ROOT::Math::Boost::InverseBoost Inverse() constReturn inverse of a boost.Definition Boost.cxx:163; ROOT::Math::Boost::operator()LorentzVector< ROOT::Math::PxPyPzE4D< double > > operator()(const LorentzVector< ROOT::Math::PxPyPzE4D< double > > &v) constLorentz transformation operation on a Minkowski ('Cartesian') LorentzVector.Definition Boost.cxx:143; ROOT::Math::Boost::Rectifyvoid Rectify()Re-adjust components to eliminate small deviations from a perfect orthosyplectic matrix.Definition Boost.cxx:123; ROOT::Math::Boost::GetComponentsvoid GetComponents(Scalar &beta_x, Scalar &beta_y, Scalar &beta_z) constGet components into beta_x, beta_y, and beta_z.Definition Boost.cxx:99; ROOT::Math::Boost::BetaVectorXYZVector BetaVector() constDefinition Boost.cxx:108; ROOT::Math::DisplacementVector3DClass describing a generic displacement vector in 3 dimensions.Definition DisplacementVector3D.h:58; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::Math::PxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors...Definition PxPyPzE4D.h:44; double; ROOT::Math::betadouble beta(double x, double y)Calculates the beta function.Definition SpecFuncMathCore.cxx:111; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::GenVector::Throwvoid Throw(const char *)function throwing exception, by creating internally a GenVector_exception only when neededDefinition GenVector_exception.h:80; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699; mTMarker mDefinition textangle.C:8. mathgenvectorsrcBoost.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Boost_8cxx_source.html:10725,Guid,Guide,10725,doc/master/Boost_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Boost_8cxx_source.html,1,['Guid'],['Guide']
Usability,".cxx:747; TGStatusBarProvides a StatusBar widget.Definition TGStatusBar.h:21; TGStatusBar::Draw3DCornervoid Draw3DCorner(Bool_t corner)Definition TGStatusBar.h:59; TGStatusBar::SetTextvirtual void SetText(TGString *text, Int_t partidx=0)Set text in partition partidx in status bar.Definition TGStatusBar.cxx:145; TGStringTGString wraps a TString and adds some graphics routines like drawing, size of string on screen depen...Definition TGString.h:20; TGString::GetStringconst char * GetString() constDefinition TGString.h:30; TGTextBufferA text buffer is used in several widgets, like TGTextEntry, TGFileDialog, etc.Definition TGTextBuffer.h:17; TGTextButtonYield an action as soon as it is clicked.Definition TGButton.h:142; TGTextEntryA TGTextEntry is a one line text input widget.Definition TGTextEntry.h:24; TGTextEntry::SetDefaultSizevirtual void SetDefaultSize(UInt_t w, UInt_t h)Set the default / minimal size of the widget.Definition TGTextEntry.cxx:384; TGTextEntry::Clearvoid Clear(Option_t *option="""") overrideClears up the text entry.Definition TGTextEntry.cxx:972; TGTextEntry::GetTextconst char * GetText() constDefinition TGTextEntry.h:119; TGTextEntry::SetCursorPositionvirtual void SetCursorPosition(Int_t pos)Set the cursor position to newPos.Definition TGTextEntry.cxx:718; TGTextEntry::AppendTextvirtual void AppendText(const char *text)Appends text to the end of text entry, clears the selection and moves the cursor to the end of the li...Definition TGTextEntry.cxx:1689; TGTextEntry::SetToolTipTextvirtual void SetToolTipText(const char *text, Long_t delayms=500)Set tool tip text associated with this text entry.Definition TGTextEntry.cxx:1647; TGTextEntry::SetTextvirtual void SetText(const char *text, Bool_t emit=kTRUE)Sets text entry to text, clears the selection and moves the cursor to the end of the line.Definition TGTextEntry.cxx:611; TGTextEntry::HandleButtonBool_t HandleButton(Event_t *event) overrideHandle mouse button event in text entry widget.Definition TGTex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:129341,Clear,Clearvoid,129341,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,".cxx:931; TString::TokenizeTObjArray * Tokenize(const TString &delim) constThis function is used to isolate sequential tokens in a TString.Definition TString.cxx:2264; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::Getenvvirtual const char * Getenv(const char *env)Get environment variable.Definition TSystem.cxx:1665; TThread::SelfIdstatic Long_t SelfId()Static method returning the id for the current thread.Definition TThread.cxx:549; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TTimer::SetTimevoid SetTime(Long_t milliSec)Definition TTimer.h:91; TUrlThis class represents a WWW compatible URL.Definition TUrl.h:33; TUrl::GetValueFromOptionsconst char * GetValueFromOptions(const char *key) constReturn a value for a given key from the URL options.Definition TUrl.cxx:660; TUrl::SetOptionsvoid SetOptions(const char *opt)Definition TUrl.h:87; TUrl::ParseOptionsvoid ParseOptions() constParse URL options into a key/value map.Definition TUrl.cxx:626; TUrl::HasOptionBool_t HasOption(const char *key) constReturns true if the given key appears in the URL options list.Definition TUrl.cxx:683; bool; int; nconst Int_t nDefinition legend1.C:16. nethttpsrcTHttpServer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:71734,Guid,Guide,71734,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['Guid'],['Guide']
Usability,".dat; // this file has 3 columns of float data; TString dir = gROOT->GetTutorialDir();; dir.Append(""/tree/"");; dir.ReplaceAll(""/./"",""/"");; ifstream in;; in.open(Form(""%sbasic.dat"",dir.Data()));; ; Float_t x,y,z;; Int_t nlines = 0;; auto f = TFile::Open(""basic.root"",""RECREATE"");; TH1F h1(""h1"",""x distribution"",100,-4,4);; TNtuple ntuple(""ntuple"",""data from ascii file"",""x:y:z"");; ; while (1) {; in >> x >> y >> z;; if (!in.good()) break;; if (nlines < 5) printf(""x=%8f, y=%8f, z=%8f\n"",x,y,z);; h1.Fill(x);; ntuple.Fill(x,y,z);; nlines++;; }; printf("" found %d points\n"",nlines);; ; in.close();; ; f->Write();; }; f#define f(i)Definition RSha256.hxx:104; Riostream.h; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gROOT#define gROOTDefinition TROOT.h:406; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::AppendTString & Append(const char *cs)Definition TString.h:572; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; AuthorRene Brun ; Definition in file basic.C. tutorialstreebasic.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/basic_8C.html:1753,simpl,simple,1753,doc/master/basic_8C.html,https://root.cern,https://root.cern/doc/master/basic_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,".g.: ""class TDirectory*"".Definition TMethodArg.cxx:74; TMethodArg::GetDefaultconst char * GetDefault() constGet default value of method argument.Definition TMethodArg.cxx:57; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; TMethod::GetListOfMethodArgsvirtual TList * GetListOfMethodArgs()Returns methodarg list and additionally updates fDataMember in TMethod by calling FindDataMember();.Definition TMethod.cxx:307; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::TNamedTNamed()Definition TNamed.h:36; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::Expandvirtual void Expand(Int_t newSize)Expand or shrink the array to newSize elements.Definition TObjArray.cxx:387; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::Compressvirtual void Compress()Remove empty slots from array.Definition TObjArray.cxx:334; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::RemoveTObject * Remove(TObject *obj) overrideRemove object from array.Definition TObjArray.cxx:719; TObjArray::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TObjArray.cxx:415; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::StringTString & String()Definition TObjString.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:474995,Clear,Clearvoid,474995,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,".getQuantity();; 3059 }; 3060 // TOFIX: baseCl can be null here!; 3061 if (baseCl->IsLoaded()) {; 3062 // For loaded class, CallShowMember will (especially for TObject); 3063 // call the virtual ShowMember rather than the class specific version; 3064 // resulting in an infinite recursion.; 3065 InspectMembers(insp, cobj + baseOffset, baseCl, isTransient);; 3066 } else {; 3067 baseCl->CallShowMembers(cobj + baseOffset,; 3068 insp, isTransient);; 3069 }; 3070 } // loop over bases; 3071}; 3072 ; 3073////////////////////////////////////////////////////////////////////////////////; 3074/// Reset the interpreter internal state in case a previous action was not correctly; 3075/// terminated.; 3076 ; 3077void TCling::ClearFileBusy(); 3078{; 3079 // No-op there is not equivalent state (to be cleared) in Cling.; 3080}; 3081 ; 3082////////////////////////////////////////////////////////////////////////////////; 3083/// Delete existing temporary values.; 3084 ; 3085void TCling::ClearStack(); 3086{; 3087 // No-op for cling due to cling::Value.; 3088}; 3089 ; 3090////////////////////////////////////////////////////////////////////////////////; 3091/// Declare code to the interpreter, without any of the interpreter actions; 3092/// that could trigger a re-interpretation of the code. I.e. make cling; 3093/// behave like a compiler: no dynamic lookup, no input wrapping for; 3094/// subsequent execution, no automatic provision of declarations but just a; 3095/// plain `#include`.; 3096/// Returns true on success, false on failure.; 3097 ; 3098bool TCling::Declare(const char* code); 3099{; 3100 R__LOCKGUARD_CLING(gInterpreterMutex);; 3101 ; 3102 SuspendAutoLoadingRAII autoLoadOff(this);; 3103 SuspendAutoParsing autoParseRaii(this);; 3104 ; 3105 bool oldDynLookup = fInterpreter->isDynamicLookupEnabled();; 3106 fInterpreter->enableDynamicLookup(false);; 3107 bool oldRawInput = fInterpreter->isRawInputEnabled();; 3108 fInterpreter->enableRawInput(true);; 3109 ; 3110 Bool_t ret = LoadText(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:119086,Clear,ClearStack,119086,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['Clear'],['ClearStack']
Usability,".h""; #include ""TCanvas.h""; #include ""TFrame.h""; #include ""TH1F.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; #include ""TSystem.h""; ; void write(); {; ; TFile *f = TFile::Open(""hvector.root"",""RECREATE"");; ; if (!f) { return; }; ; // Create one histograms; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; ; std::vector<float> vpx;; std::vector<float> vpy;; std::vector<float> vpz;; std::vector<float> vrand;; ; // Create a TTree; TTree *t = new TTree(""tvec"",""Tree with vectors"");; t->Branch(""vpx"",&vpx);; t->Branch(""vpy"",&vpy);; t->Branch(""vpz"",&vpz);; t->Branch(""vrand"",&vrand);; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; gRandom->SetSeed();; const Int_t kUPDATE = 1000;; for (Int_t i = 0; i < 25000; i++) {; Int_t npx = (Int_t)(gRandom->Rndm(1)*15);; ; vpx.clear();; vpy.clear();; vpz.clear();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->SetBranchAddress(""vpx"",&vpx,&bvpx);; ; ; // Create one histograms; TH1F *h = new TH1F(""h"",""This is the px distribution"",100,-4,4);; h->SetFillColor(48);; ; for (Int_t i = 0; i < 25000; i++) {; ; Long64_t tentry = t->LoadTree(i);; bvpx->GetEntry(tentry);; ; for (UInt_t j = 0; j < vpx->size(); ++j) {; ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hvector_8C.html:1215,clear,clear,1215,doc/master/hvector_8C.html,https://root.cern,https://root.cern/doc/master/hvector_8C.html,1,['clear'],['clear']
Usability,".h. ◆ DeclFileName(). static const char * TMixture::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 45 of file TMixture.h. ◆ DefineElement(). void TMixture::DefineElement ; (; Int_t ; n, . Float_t ; a, . Float_t ; z, . Float_t ; w . ). virtual . Define one mixture element. ; Definition at line 86 of file TMixture.cxx. ◆ GetAmixt(). Float_t * TMixture::GetAmixt ; (; ); const. inline . Definition at line 41 of file TMixture.h. ◆ GetNmixt(). Int_t TMixture::GetNmixt ; (; ); const. inline . Definition at line 40 of file TMixture.h. ◆ GetWmixt(). Float_t * TMixture::GetWmixt ; (; ); const. inline . Definition at line 43 of file TMixture.h. ◆ GetZmixt(). Float_t * TMixture::GetZmixt ; (; ); const. inline . Definition at line 42 of file TMixture.h. ◆ IsA(). TClass * TMixture::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TMaterial.; Definition at line 45 of file TMixture.h. ◆ Streamer(). void TMixture::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TMaterial.; Definition at line 97 of file TMixture.cxx. ◆ StreamerNVirtual(). void TMixture::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TMixture.h. Member Data Documentation. ◆ fAmixt. Float_t* TMixture::fAmixt. protected . Definition at line 30 of file TMixture.h. ◆ fNmixt. Int_t TMixture::fNmixt. protected . Definition at line 29 of file TMixture.h. ◆ fWmixt. Float_t* TMixture::fWmixt. protected . Definition at line 32 of file TMixture.h. ◆ fZmixt. Float_t* TMixture::fZmixt. protected . Definition at line 31 of file TMixture.h. Libraries for TMixture:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TMixture.h; graf3d/g3d/src/TMixture.cxx. TMixture. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMixture.html:17733,Guid,Guide,17733,doc/master/classTMixture.html,https://root.cern,https://root.cern/doc/master/classTMixture.html,1,['Guid'],['Guide']
Usability,.h. ◆ GetEntries(). UInt_t TMVA::TreeInfo::GetEntries ; (; ); const. inline . Definition at line 63 of file DataInputHandler.h. ◆ GetTree(). TTree * TMVA::TreeInfo::GetTree ; (; ); const. inline . Definition at line 61 of file DataInputHandler.h. ◆ GetTreeType(). Types::ETreeType TMVA::TreeInfo::GetTreeType ; (; ); const. inline . Definition at line 64 of file DataInputHandler.h. ◆ GetWeight(). Double_t TMVA::TreeInfo::GetWeight ; (; ); const. inline . Definition at line 62 of file DataInputHandler.h. ◆ IsA(). virtual TClass * TMVA::TreeInfo::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 75 of file DataInputHandler.h. ◆ Streamer(). virtual void TMVA::TreeInfo::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::TreeInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file DataInputHandler.h. Member Data Documentation. ◆ fClassName. TString TMVA::TreeInfo::fClassName. private . name of the class the tree belongs to ; Definition at line 70 of file DataInputHandler.h. ◆ fOwner. Bool_t TMVA::TreeInfo::fOwner. private . true if created from file ; Definition at line 73 of file DataInputHandler.h. ◆ fTree. TTree* TMVA::TreeInfo::fTree. private . pointer to the tree ; Definition at line 69 of file DataInputHandler.h. ◆ fTreeType. Types::ETreeType TMVA::TreeInfo::fTreeType. private . tree is for training/testing/both ; Definition at line 72 of file DataInputHandler.h. ◆ fWeight. Double_t TMVA::TreeInfo::fWeight. private . weight for the tree ; Definition at line 71 of file DataInputHandler.h. Libraries for TMVA::TreeInfo:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/DataInputHandler.h. TMVATreeInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html:13759,Guid,Guide,13759,doc/master/classTMVA_1_1TreeInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html,1,['Guid'],['Guide']
Usability,".h. ◆ SetBinsLength(). void TH1D::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Reimplemented in TProfile.; Definition at line 10501 of file TH1.cxx. ◆ Streamer(). void TH1D::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TH1.; Reimplemented in TProfile. ◆ StreamerNVirtual(). void TH1D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 693 of file TH1.h. ◆ UpdateBinContent(). void TH1D::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 704 of file TH1.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH1D operator* ; (; const TH1D & ; h1, . const TH1D & ; h2 . ). friend . Operator *. ; Definition at line 10555 of file TH1.cxx. ◆ operator* [2/3]. TH1D operator* ; (; const TH1D & ; h1, . Double_t ; c1 . ). friend . Definition at line 709 of file TH1.h. ◆ operator* [3/3]. TH1D operator* ; (; Double_t ; c1, . const TH1D & ; h1 . ). friend . Operator *. ; Definition at line 10522 of file TH1.cxx. ◆ operator+. TH1D operator+ ; (; const TH1D & ; h1, . const TH1D & ; h2 . ). friend . Operator +. ; Definition at line 10533 of file TH1.cxx. ◆ operator-. TH1D operator- ; (; const TH1D & ; h1, . const TH1D & ; h2 . ). friend . Operator -. ; Definition at line 10544 of file TH1.cxx. ◆ operator/. TH1D operator/ ; (; const TH1D & ; h1, . const TH1D & ; h2 . ). friend . Operator /. ; Definition at line 10566 of file TH1.cxx. Libraries for TH1D:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH1.h; hist/hist/src/TH1.cxx. TH1D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1D.html:57180,Guid,Guide,57180,doc/master/classTH1D.html,https://root.cern,https://root.cern/doc/master/classTH1D.html,1,['Guid'],['Guide']
Usability,".h. ◆ _cacheMgr. RooObjCacheManager RooLagrangianMorphFunc::_cacheMgr. mutableprivate . Definition at line 245 of file RooLagrangianMorphFunc.h. ◆ _config. Config RooLagrangianMorphFunc::_config. private . Definition at line 253 of file RooLagrangianMorphFunc.h. ◆ _diagrams. std::vector<std::vector<RooListProxy *> > RooLagrangianMorphFunc::_diagrams. private . Definition at line 254 of file RooLagrangianMorphFunc.h. ◆ _flags. RooListProxy RooLagrangianMorphFunc::_flags. private . Definition at line 252 of file RooLagrangianMorphFunc.h. ◆ _nonInterfering. std::vector<std::vector<std::string> > RooLagrangianMorphFunc::_nonInterfering. private . Definition at line 255 of file RooLagrangianMorphFunc.h. ◆ _observables. RooListProxy RooLagrangianMorphFunc::_observables. private . Definition at line 250 of file RooLagrangianMorphFunc.h. ◆ _operators. RooSetProxy RooLagrangianMorphFunc::_operators. private . Definition at line 249 of file RooLagrangianMorphFunc.h. ◆ _physics. RooListProxy RooLagrangianMorphFunc::_physics. private . Definition at line 248 of file RooLagrangianMorphFunc.h. ◆ _sampleMap. std::map<std::string, int> RooLagrangianMorphFunc::_sampleMap. private . Definition at line 247 of file RooLagrangianMorphFunc.h. ◆ _scale. double RooLagrangianMorphFunc::_scale = 1.0. private . The cache manager. ; Definition at line 246 of file RooLagrangianMorphFunc.h. ◆ implementedPrecision. constexpr double RooLagrangianMorphFunc::implementedPrecision = RooFit::SuperFloatPrecision::digits10. staticconstexpr . length of floating point digits precision supported by implementation. ; Definition at line 189 of file RooLagrangianMorphFunc.h. Libraries for RooLagrangianMorphFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooLagrangianMorphFunc.h; roofit/roofit/src/RooLagrangianMorphFunc.cxx. RooLagrangianMorphFunc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:97566,Guid,Guide,97566,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['Guid'],['Guide']
Usability,.h. ◆ fCharm. Int_t TParticlePDG::fCharm. protected . Definition at line 35 of file TParticlePDG.h. ◆ fDecayList. TObjArray* TParticlePDG::fDecayList. protected . Definition at line 43 of file TParticlePDG.h. ◆ fI3. Double_t TParticlePDG::fI3. protected . Definition at line 33 of file TParticlePDG.h. ◆ fIsospin. Double_t TParticlePDG::fIsospin. protected . Definition at line 32 of file TParticlePDG.h. ◆ fLifetime. Double_t TParticlePDG::fLifetime. protected . Definition at line 28 of file TParticlePDG.h. ◆ fMass. Double_t TParticlePDG::fMass. protected . Definition at line 26 of file TParticlePDG.h. ◆ fParity. Int_t TParticlePDG::fParity. protected . Definition at line 30 of file TParticlePDG.h. ◆ fParticleClass. TString TParticlePDG::fParticleClass. protected . Definition at line 45 of file TParticlePDG.h. ◆ fPdgCode. Int_t TParticlePDG::fPdgCode. protected . Definition at line 25 of file TParticlePDG.h. ◆ fSpin. Double_t TParticlePDG::fSpin. protected . Definition at line 31 of file TParticlePDG.h. ◆ fStable. Int_t TParticlePDG::fStable. protected . Definition at line 41 of file TParticlePDG.h. ◆ fStrangeness. Int_t TParticlePDG::fStrangeness. protected . Definition at line 34 of file TParticlePDG.h. ◆ fTop. Int_t TParticlePDG::fTop. protected . Definition at line 38 of file TParticlePDG.h. ◆ fTrackingCode. Int_t TParticlePDG::fTrackingCode. protected . Definition at line 47 of file TParticlePDG.h. ◆ fWidth. Double_t TParticlePDG::fWidth. protected . Definition at line 29 of file TParticlePDG.h. ◆ fX. Int_t TParticlePDG::fX. protected . Definition at line 40 of file TParticlePDG.h. ◆ fY. Int_t TParticlePDG::fY. protected . Definition at line 39 of file TParticlePDG.h. Libraries for TParticlePDG:. [legend]; The documentation for this class was generated from the following files:; montecarlo/eg/inc/TParticlePDG.h; montecarlo/eg/src/TParticlePDG.cxx. TParticlePDG. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParticlePDG.html:21873,Guid,Guide,21873,doc/master/classTParticlePDG.html,https://root.cern,https://root.cern/doc/master/classTParticlePDG.html,1,['Guid'],['Guide']
Usability,.h. ◆ fContinueTraining. Bool_t TMVA::MethodPyTorch::fContinueTraining. private . Definition at line 81 of file MethodPyTorch.h. ◆ fFilenameModel. TString TMVA::MethodPyTorch::fFilenameModel. private . Definition at line 76 of file MethodPyTorch.h. ◆ fFilenameTrainedModel. TString TMVA::MethodPyTorch::fFilenameTrainedModel. private . Definition at line 94 of file MethodPyTorch.h. ◆ fLearningRateSchedule. TString TMVA::MethodPyTorch::fLearningRateSchedule. private . Definition at line 83 of file MethodPyTorch.h. ◆ fModelIsSetup. bool TMVA::MethodPyTorch::fModelIsSetup = false. private . Definition at line 89 of file MethodPyTorch.h. ◆ fNOutputs. UInt_t TMVA::MethodPyTorch::fNOutputs {0}. private . Definition at line 93 of file MethodPyTorch.h. ◆ fNumEpochs. UInt_t TMVA::MethodPyTorch::fNumEpochs {0}. private . Definition at line 78 of file MethodPyTorch.h. ◆ fNumThreads. Int_t TMVA::MethodPyTorch::fNumThreads {0}. private . Definition at line 79 of file MethodPyTorch.h. ◆ fNumValidationString. TString TMVA::MethodPyTorch::fNumValidationString. private . Definition at line 85 of file MethodPyTorch.h. ◆ fNVars. UInt_t TMVA::MethodPyTorch::fNVars {0}. private . Definition at line 92 of file MethodPyTorch.h. ◆ fOutput. std::vector<float> TMVA::MethodPyTorch::fOutput. private . Definition at line 91 of file MethodPyTorch.h. ◆ fSaveBestOnly. Bool_t TMVA::MethodPyTorch::fSaveBestOnly. private . Definition at line 82 of file MethodPyTorch.h. ◆ fUserCodeName. TString TMVA::MethodPyTorch::fUserCodeName. private . Definition at line 87 of file MethodPyTorch.h. ◆ fVals. float* TMVA::MethodPyTorch::fVals = nullptr. private . Definition at line 90 of file MethodPyTorch.h. Libraries for TMVA::MethodPyTorch:. [legend]; The documentation for this class was generated from the following files:; tmva/pymva/inc/TMVA/MethodPyTorch.h; tmva/pymva/src/MethodPyTorch.cxx. TMVAMethodPyTorch. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html:36354,Guid,Guide,36354,doc/master/classTMVA_1_1MethodPyTorch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html,1,['Guid'],['Guide']
Usability,".h. ◆ setCacheAndTrackHints(). void RooProduct::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooProduct with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 479 of file RooProduct.cxx. ◆ Streamer(). void RooProduct::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooProduct::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file RooProduct.h. ◆ translate(). void RooProduct::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 493 of file RooProduct.cxx. Member Data Documentation. ◆ _cacheMgr. RooObjCacheManager RooProduct::_cacheMgr. mutableprotected . Definition at line 82 of file RooProduct.h. ◆ _compCSet. RooListProxy RooProduct::_compCSet. protected . Definition at line 72 of file RooProduct.h. ◆ _compRSet. RooListProxy RooProduct::_compRSet. protected . Definition at line 71 of file RooProduct.h. Libraries for RooProduct:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooProduct.h; roofit/roofitcore/src/RooProduct.cxx. RooProduct. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:69984,Guid,Guide,69984,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['Guid'],['Guide']
Usability,".h:118; ROOT::GetClassTClass * GetClass(T *)Definition TClass.h:663; ROOT::CreateClassTClass * CreateClass(const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il)Global function called by a class' static Dictionary() method (see the ClassDef macro).Definition TClass.cxx:5936; ROOT::DelFunc_tvoid(* DelFunc_t)(void *)Definition Rtypes.h:116; ROOT::ESTLTypeESTLTypeDefinition ESTLType.h:28; ROOT::NewArrFunc_tvoid *(* NewArrFunc_t)(Long_t size, void *arena)Definition Rtypes.h:115; ROOT::EFunctionMatchModeEFunctionMatchModeDefinition TDictionary.h:161; ROOT::kConversionMatch@ kConversionMatchDefinition TDictionary.h:163; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::DelArrFunc_tvoid(* DelArrFunc_t)(void *)Definition Rtypes.h:117; ROOT::NewFunc_tvoid *(* NewFunc_t)(void *)Definition Rtypes.h:114; ROOT::MergeFunc_tLong64_t(* MergeFunc_t)(void *, TCollection *, TFileMergeInfo *)Definition Rtypes.h:120; whatstatic const char * whatDefinition stlLoader.cc:5; ROOT::Internal::TClassGetClassHelperDefinition TClass.h:630; ROOT::Internal::TClassGetClassHelper::GetClassstatic TClass * GetClass(Bool_t load, Bool_t silent)Definition TClass.h:631; TClass::ObjectPtrDefinition TClass.h:140; TClass::ObjectPtr::fPtrvoid * fPtrDefinition TClass.h:141; TClass::ObjectPtr::GetAllocatorTVirtualStreamerInfo * GetAllocator() constDefinition TClass.h:149; TClass::ObjectPtr::GetPtrvoid * GetPtr() constDefinition TClass.h:147; TClass::ObjectPtr::fAllocatorTVirtualStreamerInfo * fAllocatorDefinition TClass.h:143; TClass::ObjectPtr::ObjectPtrObjectPtr(void *ptr=nullptr, TVirtualStreamerInfo *allocator=nullptr)Definition TClass.h:145; Drawth1 Draw(); lTLine lDefinition textangle.C:4. coremetaincTClass.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:86334,Guid,Guide,86334,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['Guid'],['Guide']
Usability,".h:196; ROOT::Math::RotationZYX::operator==bool operator==(const RotationZYX &rhs) constEquality/inequality operators.Definition RotationZYX.h:305; ROOT::Math::RotationZYX::Rectifyvoid Rectify()Re-adjust components place angles in canonical ranges.Definition RotationZYX.cxx:108; ROOT::Math::RotationZYX::SetThetavoid SetTheta(Scalar theta)Set Theta angle (Y' rotation angle)Definition RotationZYX.h:186; ROOT::Math::RotationZYX::operator*AVector operator*(const AVector &v) constOverload operator * for rotation on a vector.Definition RotationZYX.h:256; ROOT::Math::RotationZYX::Invertvoid Invert()Invert a rotation in place.Definition RotationZYX.cxx:138; ROOT::Math::RotationZYX::SetComponentsvoid SetComponents(Scalar phi, Scalar theta, Scalar psi)Set the components phi, theta, psi based on three Scalars.Definition RotationZYX.h:161; ROOT::Math::RotationZYX::InverseRotationZYX Inverse() constReturn inverse of a rotation.Definition RotationZYX.h:269; ROOT::Math::RotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation.Definition RotationZ.h:45; R; double; MathNamespace for new Math classes and functions.; ROOT::Math::gv_detail::distdouble dist(Rotation3D const &r1, Rotation3D const &r2)Definition 3DDistances.cxx:48; ROOT::Math::gv_detail::convertvoid convert(R1 const &, R2 const)Definition 3DConversions.h:41; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOT::Math::DistanceAxisAngle::Scalar Distance(const AxisAngle &r1, const R &r2)Distance between two rotations.Definition AxisAngle.h:321; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorincMathGenVectorRotationZYX.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2RotationZYX_8h_source.html:18013,Guid,Guide,18013,doc/master/GenVector_2RotationZYX_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2RotationZYX_8h_source.html,1,['Guid'],['Guide']
Usability,".h:23; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TPolyLine3DA 3-dimensional polyline.Definition TPolyLine3D.h:33; TPolyLine3D::SetPointvirtual void SetPoint(Int_t point, Double_t x, Double_t y, Double_t z)Set point n to x, y, z.Definition TPolyLine3D.cxx:595; TPolyLine3D::Drawvoid Draw(Option_t *option="""") overrideDraw this 3-D polyline with its current attributes.Definition TPolyLine3D.cxx:298; TPolyMarker3DA 3D polymarker.Definition TPolyMarker3D.h:33; TPolyMarker3D::SetPointvoid SetPoint(Int_t n, Double_t x, Double_t y, Double_t z)Set point n to x, y, z.Definition TPolyMarker3D.cxx:535; TPolyMarker3D::Drawvoid Draw(Option_t *option="""") overrideDraws 3-D polymarker with its current attributes.Definition TPolyMarker3D.cxx:242; TTextBase class for several text objects.Definition TText.h:22; TViewSee TView3D.Definition TView.h:25; TView::CreateViewstatic TView * CreateView(Int_t system=1, const Double_t *rmin=nullptr, const Double_t *rmax=nullptr)Create a concrete default 3-d view via the plug-in manager.Definition TView.cxx:27; TView::SetRangevirtual void SetRange(const Double_t *min, const Double_t *max)=0; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file basic3d.C. tutorialsgraphicsbasic3d.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/basic3d_8C.html:5405,Guid,Guide,5405,doc/master/basic3d_8C.html,https://root.cern,https://root.cern/doc/master/basic3d_8C.html,1,['Guid'],['Guide']
Usability,".h:31; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; One better uses a TClonesArray which reduces the number of new/delete calls to only O(10000): TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; To reduce the number of call to the constructor (especially useful if the user class requires memory allocation), the object can be added (and constructed when needed) using ConstructedAt which only calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; Note: the only supported way to add objects to a TClonesArray is via the new with placement method or the ConstructedAt method. The other Add() methods ofTObjArray and its base classes are not allowed.; Considering that a new/delete costs about 70 mus on a 300 MHz HP, O(10^9) new/deletes will save about 19 hours. NOTE 1; C/C++ offers the possibility of allocating and deleting memory. Forgetting to delete allocated memory is a programming error called a ""memory leak"", i.e. the memory of your process grows and eventually your program crashes. Even if you always delete the allocated memory, the recovered space may not be efficiently reused. The process knows that there are portions of free memory, but when you allocate it again, a fresh piece of memory is grabbed. Your program is free from semantic errors, but the total memory of your process still grows, because your program's memory is full of ""holes"" which reduce the efficiency of memory access; this is called """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:1984,Clear,Clear,1984,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,".h:33; ROOT::kSTLmultimap@ kSTLmultimapDefinition ESTLType.h:34; ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; ROOT::ToHumanReadableSizevoid ToHumanReadableSize(value_type bytes, Bool_t si, Double_t *coeff, const char **units)Return the size expressed in 'human readable' format.Definition StringConv.hxx:38; ROOT::FromHumanReadableSizeEFromHumanReadableSize FromHumanReadableSize(std::string_view str, T &value)Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB,...Definition StringConv.hxx:86; ROOT::EFromHumanReadableSize::kParseFail@ kParseFail; ROOT::EFromHumanReadableSize::kOverflow@ kOverflow; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::MedianDouble_t Median(Long64_t n, const T *a, const Double_t *w=nullptr, Long64_t *work=nullptr)Same as RMS.Definition TMath.h:1272; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347; slashTCanvas * slash()Definition slash.C:1; ROOT::RCompressionSetting::EAlgorithm::kUseGlobal@ kUseGlobalUse the global compression algorithm.Definition Compression.h:93; ROOT::RCompressionSetting::EAlgorithm::kInherit@ kInheritSome objects use this value to denote that the compression algorithm should be inherited from the par...Definition Compression.h:91; ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault@ kUseCompiledDefaultUse the compile-time default setting.Definition Compression.h:53; Drawth1 Draw(); mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. treetreesrcTTree.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:474622,Guid,Guide,474622,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Guid'],['Guide']
Usability,".h:75; ROOT::Math::Rotation3D::Scalardouble ScalarDefinition Rotation3D.h:71; ROOT::Math::Rotation3D::fMScalar fM[9]Definition Rotation3D.h:480; ROOT::Math::Rotation3D::operator*AVector operator*(const AVector &v) constOverload operator * for rotation on a vector.Definition Rotation3D.h:403; ROOT::Math::Rotation3D::Rotation3DRotation3D()Default constructor (identity rotation)Definition Rotation3D.cxx:29; ROOT::Math::RotationXRotation class representing a 3D rotation about the X axis by the angle of rotation.Definition RotationX.h:45; ROOT::Math::RotationX::CosAngleScalar CosAngle() constDefinition RotationX.h:111; ROOT::Math::RotationX::SinAngleScalar SinAngle() constSine or Cosine of the rotation angle.Definition RotationX.h:110; ROOT::Math::RotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation.Definition RotationY.h:45; ROOT::Math::RotationY::CosAngleScalar CosAngle() constDefinition RotationY.h:111; ROOT::Math::RotationY::SinAngleScalar SinAngle() constSine or Cosine of the rotation angle.Definition RotationY.h:110; ROOT::Math::RotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation.Definition RotationZ.h:45; ROOT::Math::RotationZ::CosAngleScalar CosAngle() constDefinition RotationZ.h:111; ROOT::Math::RotationZ::SinAngleScalar SinAngle() constSine or Cosine of the rotation angle.Definition RotationZ.h:110; double; MathNamespace for new Math classes and functions.; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOT::Math::ScalarRotation3D::Scalar ScalarDefinition Rotation3DxAxial.cxx:69; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathgenvectorsrcRotation3DxAxial.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rotation3DxAxial_8cxx_source.html:7066,Guid,Guide,7066,doc/master/Rotation3DxAxial_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Rotation3DxAxial_8cxx_source.html,1,['Guid'],['Guide']
Usability,".h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TCanvasThe Canvas class.Definition TCanvas.h:23; TComplexDefinition TComplex.h:29; TComplex::RhoDouble_t Rho() constDefinition TComplex.h:48; TH1::GetNbinsYvirtual Int_t GetNbinsY() constDefinition TH1.h:298; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetContourvirtual void SetContour(Int_t nlevels, const Double_t *levels=nullptr)Set the number and values of contour levels.Definition TH1.cxx:8483; TH1::SetBinsvirtual void SetBins(Int_t nx, Double_t xmin, Double_t xmax)Redefine x axis parameters.Definition TH1.cxx:8767; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2F::Resetvoid Reset(Option_t *option="""") overrideReset this histogram: contents, errors, etc.Definition TH2.cxx:3972; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TStyle::SetPadGridXvoid SetPadGridX(Bool_t gridx)Definition TStyle.h:362; TStyle::SetPadGridYvoid SetPadGridY(Bool_t gridy)Definition TStyle.h:363; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; AuthorLuigi Bardelli barde.nosp@m.lli@.nosp@m.fi.in.nosp@m.fn.i.nosp@m.t ; Definition in file mandelbrot.C. tutorialsgraphicsmandelbrot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mandelbrot_8C.html:5136,Guid,Guide,5136,doc/master/mandelbrot_8C.html,https://root.cern,https://root.cern/doc/master/mandelbrot_8C.html,1,['Guid'],['Guide']
Usability,".pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GVIZ3D; » TStructViewer. class TStructViewer: public TObject. TStructViewer viewer represents class, struct or other type as an object in 3D space.; At the top of the scene we can see objects which is our pointer. Under it we see; pointers and collection elements. Collection must inherit from TCollection; or be STL collecion. We can change the number of visible levels or objects on the scene with the GUI or; methods. The size of geometry objects is proportional to the memory taken by this object; or to the number of members inside this object. An easy way to find some class in the viewer is to change the color of the type.; We can connect for example a TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigation in viewer is very simple like in usual GLViewer. When you put the mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operation are supported. In this picture we can see TStructViewer with pointer to TList which contains; other collections and objects of various classes. Other screenshot presents opened TStructNodeEditor. Function Members (Methods); public:. virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStructViewer.html:1137,simpl,simple,1137,root/html602/TStructViewer.html,https://root.cern,https://root.cern/root/html602/TStructViewer.html,2,['simpl'],['simple']
Usability,".py 'ADDITION AND CONVOLUTION' RooFit tutorial macro #209 Decay function p.d.fs with optional B physics effects (mixing and CP violation) that can be analytically convolved with e.g ;  rf210_angularconv.C 'ADDITION AND CONVOLUTION' RooFit tutorial macro #210 ;  rf211_paramconv.C 'ADDITION AND CONVOLUTION' RooFit tutorial macro #211 ;  rf301_composition.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #301 ;  rf301_composition.py 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #301 Multi-dimensional p.d.f.s through composition, e.g ;  rf302_utilfuncs.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #302 ;  rf302_utilfuncs.py 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #302 Utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  rf303_conditional.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 ;  rf304_uncorrprod.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #304 ;  rf304_uncorrprod.py 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #304 Simple uncorrelated multi-dimensional p.d.f.s ;  rf305_condcorrprod.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #305 ;  rf305_condcorrprod.py 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #305 Multi-dimensional p.d.f.s with conditional p.d.fs in product ;  rf306_condpereventerrors.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #306 ;  rf306_condpereventerrors.py 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #306 Complete example with use of conditional p.d.f ;  rf307_fullpereventerrors.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #307 ;  rf307_fullpereventerrors.py 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #307 Complete example with use of full p.d.f ;  rf308_normintegration2d.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #308 ;  rf308_normintegration2d.py ;  rf309_ndimplot.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #308 ;  rf309_ndimplot.py ;  rf310_sliceplot.C 'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #309 ;  rf310_sliceplot.py ;  rf31",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:152689,Simpl,Simple,152689,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Simpl'],['Simple']
Usability,".py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ;  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ;  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ;  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:1586,learn,learning,1586,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['learn'],['learning']
Usability,"/ ""xy""; 11433 {; 11434 Int_t first = zaxis->GetFirst();; 11435 Int_t last = zaxis->GetLast();; 11436 Int_t binz = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11437 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11438 zaxis->SetRange(binz,binz2);; 11439 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11440 if (nbins>1 && rect2[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11441 xx[0] = xaxis->GetXmin();; 11442 xx[1] = yaxis->GetXmax();; 11443 xx[2] = zaxis->GetBinCenter(binz);; 11444 view->WCtoNDC(xx,u);; 11445 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11446 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11447 rect1[4].SetX(rect1[0].GetX());; 11448 rect1[4].SetY(rect1[0].GetY());; 11449 xx[0] = xaxis->GetXmax();; 11450 view->WCtoNDC(xx,u);; 11451 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11452 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11453 xx[1] = yaxis->GetXmin();; 11454 view->WCtoNDC(xx,u);; 11455 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11456 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11457 xx[0] = xaxis->GetXmin();; 11458 view->WCtoNDC(xx,u);; 11459 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11460 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11461 gVirtualX->DrawPolyLine(5,rect1);; 11462 if (nbins>1) {; 11463 xx[0] = xaxis->GetXmin();; 11464 xx[1] = yaxis->GetXmax();; 11465 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11466 view->WCtoNDC(xx,u);; 11467 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11468 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11469 rect2[4].SetX(rect2[0].GetX());; 11470 rect2[4].SetY(rect2[0].GetY());; 11471 xx[0] = xaxis->GetXmax();; 11472 view->WCtoNDC(xx,u);; 11473 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11474 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11475 xx[1] = yaxis->GetXmin();; 11476 view->WCtoNDC(xx,u);; 11477 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11478 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11479 xx[0] = xaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:415943,ux,uxmin,415943,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"/ ""xz""; 11574 {; 11575 Int_t first = yaxis->GetFirst();; 11576 Int_t last = yaxis->GetLast();; 11577 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11578 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11579 yaxis->SetRange(biny,biny2);; 11580 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11581 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11582 xx[0] = xaxis->GetXmin();; 11583 xx[2] = zaxis->GetXmax();; 11584 xx[1] = yaxis->GetBinCenter(biny);; 11585 view->WCtoNDC(xx,u);; 11586 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11587 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11588 rect1[4].SetX(rect1[0].GetX());; 11589 rect1[4].SetY(rect1[0].GetY());; 11590 xx[0] = xaxis->GetXmax();; 11591 view->WCtoNDC(xx,u);; 11592 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11593 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11594 xx[2] = zaxis->GetXmin();; 11595 view->WCtoNDC(xx,u);; 11596 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11597 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11598 xx[0] = xaxis->GetXmin();; 11599 view->WCtoNDC(xx,u);; 11600 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11601 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11602 gVirtualX->DrawPolyLine(5,rect1);; 11603 if (nbins>1) {; 11604 xx[0] = xaxis->GetXmin();; 11605 xx[2] = zaxis->GetXmax();; 11606 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11607 view->WCtoNDC(xx,u);; 11608 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11609 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11610 rect2[4].SetX(rect2[0].GetX());; 11611 rect2[4].SetY(rect2[0].GetY());; 11612 xx[0] = xaxis->GetXmax();; 11613 view->WCtoNDC(xx,u);; 11614 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11615 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11616 xx[2] = zaxis->GetXmin();; 11617 view->WCtoNDC(xx,u);; 11618 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11619 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11620 xx[0] = xaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:421737,ux,uxmin,421737,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"/ ""yx""; 11504 {; 11505 Int_t first = zaxis->GetFirst();; 11506 Int_t last = zaxis->GetLast();; 11507 Int_t binz = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11508 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11509 zaxis->SetRange(binz,binz2);; 11510 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11511 if (nbins>1 && rect2[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11512 xx[0] = xaxis->GetXmin();; 11513 xx[1] = yaxis->GetXmax();; 11514 xx[2] = zaxis->GetBinCenter(binz);; 11515 view->WCtoNDC(xx,u);; 11516 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11517 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11518 rect1[4].SetX(rect1[0].GetX());; 11519 rect1[4].SetY(rect1[0].GetY());; 11520 xx[0] = xaxis->GetXmax();; 11521 view->WCtoNDC(xx,u);; 11522 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11523 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11524 xx[1] = yaxis->GetXmin();; 11525 view->WCtoNDC(xx,u);; 11526 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11527 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11528 xx[0] = xaxis->GetXmin();; 11529 view->WCtoNDC(xx,u);; 11530 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11531 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11532 gVirtualX->DrawPolyLine(5,rect1);; 11533 if (nbins>1) {; 11534 xx[0] = xaxis->GetXmin();; 11535 xx[1] = yaxis->GetXmax();; 11536 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11537 view->WCtoNDC(xx,u);; 11538 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11539 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11540 rect2[4].SetX(rect2[0].GetX());; 11541 rect2[4].SetY(rect2[0].GetY());; 11542 xx[0] = xaxis->GetXmax();; 11543 view->WCtoNDC(xx,u);; 11544 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11545 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11546 xx[1] = yaxis->GetXmin();; 11547 view->WCtoNDC(xx,u);; 11548 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11549 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11550 xx[0] = xaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:418844,ux,uxmin,418844,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"/ ""yz""; 11714 {; 11715 Int_t first = xaxis->GetFirst();; 11716 Int_t last = xaxis->GetLast();; 11717 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11718 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11719 xaxis->SetRange(binx,binx2);; 11720 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11721 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11722 xx[2] = zaxis->GetXmin();; 11723 xx[1] = yaxis->GetXmax();; 11724 xx[0] = xaxis->GetBinCenter(binx);; 11725 view->WCtoNDC(xx,u);; 11726 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11727 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11728 rect1[4].SetX(rect1[0].GetX());; 11729 rect1[4].SetY(rect1[0].GetY());; 11730 xx[2] = zaxis->GetXmax();; 11731 view->WCtoNDC(xx,u);; 11732 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11733 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11734 xx[1] = yaxis->GetXmin();; 11735 view->WCtoNDC(xx,u);; 11736 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11737 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11738 xx[2] = zaxis->GetXmin();; 11739 view->WCtoNDC(xx,u);; 11740 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11741 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11742 gVirtualX->DrawPolyLine(5,rect1);; 11743 if (nbins>1) {; 11744 xx[2] = zaxis->GetXmin();; 11745 xx[1] = yaxis->GetXmax();; 11746 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11747 view->WCtoNDC(xx,u);; 11748 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11749 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11750 rect2[4].SetX(rect2[0].GetX());; 11751 rect2[4].SetY(rect2[0].GetY());; 11752 xx[2] = zaxis->GetXmax();; 11753 view->WCtoNDC(xx,u);; 11754 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11755 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11756 xx[1] = yaxis->GetXmin();; 11757 view->WCtoNDC(xx,u);; 11758 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11759 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11760 xx[2] = zaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:427523,ux,uxmin,427523,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"/ ""zx""; 11644 {; 11645 Int_t first = yaxis->GetFirst();; 11646 Int_t last = yaxis->GetLast();; 11647 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11648 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11649 yaxis->SetRange(biny,biny2);; 11650 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11651 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11652 xx[0] = xaxis->GetXmin();; 11653 xx[2] = zaxis->GetXmax();; 11654 xx[1] = yaxis->GetBinCenter(biny);; 11655 view->WCtoNDC(xx,u);; 11656 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11657 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11658 rect1[4].SetX(rect1[0].GetX());; 11659 rect1[4].SetY(rect1[0].GetY());; 11660 xx[0] = xaxis->GetXmax();; 11661 view->WCtoNDC(xx,u);; 11662 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11663 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11664 xx[2] = zaxis->GetXmin();; 11665 view->WCtoNDC(xx,u);; 11666 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11667 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11668 xx[0] = xaxis->GetXmin();; 11669 view->WCtoNDC(xx,u);; 11670 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11671 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11672 gVirtualX->DrawPolyLine(5,rect1);; 11673 if (nbins>1) {; 11674 xx[0] = xaxis->GetXmin();; 11675 xx[2] = zaxis->GetXmax();; 11676 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11677 view->WCtoNDC(xx,u);; 11678 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11679 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11680 rect2[4].SetX(rect2[0].GetX());; 11681 rect2[4].SetY(rect2[0].GetY());; 11682 xx[0] = xaxis->GetXmax();; 11683 view->WCtoNDC(xx,u);; 11684 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11685 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11686 xx[2] = zaxis->GetXmin();; 11687 view->WCtoNDC(xx,u);; 11688 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11689 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11690 xx[0] = xaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:424630,ux,uxmin,424630,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"/ ""zy""; 11784 {; 11785 Int_t first = xaxis->GetFirst();; 11786 Int_t last = xaxis->GetLast();; 11787 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11788 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11789 xaxis->SetRange(binx,binx2);; 11790 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11791 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11792 xx[2] = zaxis->GetXmin();; 11793 xx[1] = yaxis->GetXmax();; 11794 xx[0] = xaxis->GetBinCenter(binx);; 11795 view->WCtoNDC(xx,u);; 11796 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11797 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11798 rect1[4].SetX(rect1[0].GetX());; 11799 rect1[4].SetY(rect1[0].GetY());; 11800 xx[2] = zaxis->GetXmax();; 11801 view->WCtoNDC(xx,u);; 11802 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11803 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11804 xx[1] = yaxis->GetXmin();; 11805 view->WCtoNDC(xx,u);; 11806 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11807 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11808 xx[2] = zaxis->GetXmin();; 11809 view->WCtoNDC(xx,u);; 11810 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11811 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11812 gVirtualX->DrawPolyLine(5,rect1);; 11813 if (nbins>1) {; 11814 xx[2] = zaxis->GetXmin();; 11815 xx[1] = yaxis->GetXmax();; 11816 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11817 view->WCtoNDC(xx,u);; 11818 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11819 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11820 rect2[4].SetX(rect2[0].GetX());; 11821 rect2[4].SetY(rect2[0].GetY());; 11822 xx[2] = zaxis->GetXmax();; 11823 view->WCtoNDC(xx,u);; 11824 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11825 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11826 xx[1] = yaxis->GetXmin();; 11827 view->WCtoNDC(xx,u);; 11828 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11829 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11830 xx[2] = zaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:430416,ux,uxmin,430416,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"/ Ex:; 606/// ~~~ {.cpp}; 607/// myVol->CheckOverlaps(0.01, ""s10000000""); // shoot 10000000 points; 608/// myVol->CheckOverlaps(0.01, ""s""); // shoot the default value of 1e6 points; 609/// ~~~; 610 ; 611void TGeoVolume::CheckOverlaps(Double_t ovlp, Option_t *option) const; 612{; 613 if (!GetNdaughters() || fFinder); 614 return;; 615 Bool_t sampling = kFALSE;; 616 TString opt(option);; 617 opt.ToLower();; 618 if (opt.Contains(""s"")); 619 sampling = kTRUE;; 620 TVirtualGeoPainter *painter = fGeoManager->GetGeomPainter();; 621 if (!sampling); 622 fGeoManager->SetNsegments(80);; 623 if (!fGeoManager->IsCheckingOverlaps()) {; 624 fGeoManager->ClearOverlaps();; 625 // Info(""CheckOverlaps"", ""=== Checking overlaps for volume %s ===\n"", GetName());; 626 }; 627 painter->CheckOverlaps(this, ovlp, option);; 628 // if (sampling) return;; 629 if (!fGeoManager->IsCheckingOverlaps()) {; 630 fGeoManager->SortOverlaps();; 631 TObjArray *overlaps = fGeoManager->GetListOfOverlaps();; 632 Int_t novlps = overlaps->GetEntriesFast();; 633 TNamed *obj;; 634 TString name;; 635 for (Int_t i = 0; i < novlps; i++) {; 636 obj = (TNamed *)overlaps->At(i);; 637 if (novlps < 1000); 638 name = TString::Format(""ov%03d"", i);; 639 else; 640 name = TString::Format(""ov%06d"", i);; 641 obj->SetName(name);; 642 }; 643 if (novlps); 644 Info(""CheckOverlaps"", ""Number of illegal overlaps/extrusions for volume %s: %d\n"", GetName(), novlps);; 645 }; 646}; 647 ; 648////////////////////////////////////////////////////////////////////////////////; 649/// Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape(); 650 ; 651void TGeoVolume::CheckShape(Int_t testNo, Int_t nsamples, Option_t *option); 652{; 653 fShape->CheckShape(testNo, nsamples, option);; 654}; 655 ; 656////////////////////////////////////////////////////////////////////////////////; 657/// Clean data of the volume.; 658 ; 659void TGeoVolume::CleanAll(); 660{; 661 ClearNodes();; 662 ClearShape();; 663}; 664 ; 665///////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:27237,Clear,ClearOverlaps,27237,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['Clear'],['ClearOverlaps']
Usability,"/ When empty string specified (default), local copy of JSROOT is used (distributed with ROOT); 354 ; 355void THttpServer::SetJSROOT(const char *location); 356{; 357 fJSROOT = location ? location : """";; 358}; 359 ; 360////////////////////////////////////////////////////////////////////////////////; 361/// Set default HTML page; 362///; 363/// Sets file name, delivered by the server when http address is opened in the browser.; 364///; 365/// By default, $ROOTSYS/js/files/online.htm page is used; 366/// When empty filename is specified, default page will be used; 367 ; 368void THttpServer::SetDefaultPage(const std::string &filename); 369{; 370 if (!filename.empty()); 371 fDefaultPage = filename;; 372 else; 373 fDefaultPage = fJSROOTSYS + ""/files/online.htm"";; 374 ; 375 // force to read page content next time again; 376 fDefaultPageCont.clear();; 377}; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Set drawing HTML page; 381///; 382/// Set file name of HTML page, delivered by the server when; 383/// objects drawing page is requested from the browser; 384/// By default, $ROOTSYS/js/files/draw.htm page is used; 385/// When empty filename is specified, default page will be used; 386 ; 387void THttpServer::SetDrawPage(const std::string &filename); 388{; 389 if (!filename.empty()); 390 fDrawPage = filename;; 391 else; 392 fDrawPage = fJSROOTSYS + ""/files/draw.htm"";; 393 ; 394 // force to read page content next time again; 395 fDrawPageCont.clear();; 396}; 397 ; 398////////////////////////////////////////////////////////////////////////////////; 399/// Factory method to create different http engines; 400///; 401/// At the moment two engine kinds are supported:; 402///; 403/// * civetweb or http (default); 404/// * fastcgi; 405///; 406/// Examples:; 407///; 408/// // creates civetweb web server with http port 8080; 409/// serv->CreateEngine(""http:8080"");; 410/// serv->CreateEngine(""civetweb:8080"");; 411/// serv->CreateEngine("":",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:12447,clear,clear,12447,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['clear'],['clear']
Usability,"/ delete are expensive operations in terms of CPU time.; Without entering into technical details, TClonesArray allows you to ""reuse"" the same portion of memory for new/delete avoiding memory fragmentation and memory growth and improving the performance by orders of magnitude. Every time the memory of the TClonesArray has to be reused, the Clear() method is used. To provide its benefits, each TClonesArray must be allocated once per process and disposed of (deleted) only when not needed any more.; So a job should see only one deletion for each TClonesArray, which should be Clear()ed during the job several times. Deleting a TClonesArray is a double waste. Not only you do not avoid memory fragmentation, but you worsen it because the TClonesArray itself is a rather heavy structure, and there is quite some code in the destructor, so you have more memory fragmentation and slower code. NOTE 2; When investigating misuse of TClonesArray, please make sure of the following:. Use Clear() or Clear(""C"") instead of Delete(). This will improve program execution time.; TClonesArray object classes containing pointers allocate memory. To avoid causing memory leaks, special Clear(""C"") must be used for clearing TClonesArray. When option ""C"" is specified, ROOT automatically executes the Clear() method (by default it is empty contained in TObject). This method must be overridden in the relevant TClonesArray object class, implementing the reset procedure for pointer objects.; If the objects are added using the placement new then the Clear must deallocate the memory.; If the objects are added using TClonesArray::ConstructedAt then the heap-based memory can stay allocated and reused as the constructor is not called for already constructed/added object.; To reduce memory fragmentation, please make sure that the TClonesArrays are not destroyed and created on every event. They must only be constructed/destructed at the beginning/end of the run. . Definition at line 29 of file TClonesArray.h. Publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:4012,Clear,Clear,4012,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,2,['Clear'],['Clear']
Usability,"/ returns the MVA response for given event; 87 Double_t EvaluateMVA( const std::vector<Float_t> &, const TString& methodTag, Double_t aux = 0 );; 88 Double_t EvaluateMVA( const std::vector<Double_t>&, const TString& methodTag, Double_t aux = 0 );; 89 Double_t EvaluateMVA( MethodBase* method, Double_t aux = 0 );; 90 Double_t EvaluateMVA( const TString& methodTag, Double_t aux = 0 );; 91 ; 92 // returns error on MVA response for given event; 93 // NOTE: must be called AFTER ""EvaluateMVA(...)"" call !; 94 Double_t GetMVAError() const { return fMvaEventError; }; 95 Double_t GetMVAErrorLower() const { return fMvaEventError; }; 96 Double_t GetMVAErrorUpper() const { return fMvaEventErrorUpper; }; 97 ; 98 // regression response; 99 const std::vector< Float_t >& EvaluateRegression( const TString& methodTag, Double_t aux = 0 );; 100 const std::vector< Float_t >& EvaluateRegression( MethodBase* method, Double_t aux = 0 );; 101 Float_t EvaluateRegression( UInt_t tgtNumber, const TString& methodTag, Double_t aux = 0 );; 102 ; 103 // multiclass response; 104 const std::vector< Float_t >& EvaluateMulticlass( const TString& methodTag, Double_t aux = 0 );; 105 const std::vector< Float_t >& EvaluateMulticlass( MethodBase* method, Double_t aux = 0 );; 106 Float_t EvaluateMulticlass( UInt_t clsNumber, const TString& methodTag, Double_t aux = 0 );; 107 ; 108 // probability and rarity accessors (see Users Guide for definition of Rarity); 109 Double_t GetProba ( const TString& methodTag, Double_t ap_sig=0.5, Double_t mvaVal=-9999999 );; 110 Double_t GetRarity( const TString& methodTag, Double_t mvaVal=-9999999 );; 111 ; 112 // accessors; 113 virtual const char* GetName() const { return ""Reader""; }; 114 Bool_t Verbose( void ) const { return fVerbose; }; 115 void SetVerbose( Bool_t v ) { fVerbose = v; }; 116 ; 117 const DataSetInfo& DataInfo() const { return fDataSetInfo; }; 118 DataSetInfo& DataInfo() { return fDataSetInfo; }; 119 ; 120 void AddVariable( const TString& expression, Float_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8h_source.html:4743,Guid,Guide,4743,doc/master/Reader_8h_source.html,https://root.cern,https://root.cern/doc/master/Reader_8h_source.html,1,['Guid'],['Guide']
Usability,"/ shoot the default value of 1e6 points. Definition at line 611 of file TGeoVolume.cxx. ◆ CheckShape(). void TGeoVolume::CheckShape ; (; Int_t ; testNo, . Int_t ; nsamples = 10000, . Option_t * ; option = """" . ). Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ; Definition at line 651 of file TGeoVolume.cxx. ◆ CheckShapes(). void TGeoVolume::CheckShapes ; (; ). check for negative parameters in shapes. ; Definition at line 676 of file TGeoVolume.cxx. ◆ Class(). static TClass * TGeoVolume::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoVolume::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoVolume::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 256 of file TGeoVolume.h. ◆ CleanAll(). void TGeoVolume::CleanAll ; (; ). Clean data of the volume. ; Definition at line 659 of file TGeoVolume.cxx. ◆ ClearNodes(). void TGeoVolume::ClearNodes ; (; ). inline . Definition at line 95 of file TGeoVolume.h. ◆ ClearShape(). void TGeoVolume::ClearShape ; (; ). Clear the shape of this volume from the list held by the current manager. ; Definition at line 668 of file TGeoVolume.cxx. ◆ ClearThreadData(). void TGeoVolume::ClearThreadData ; (; ); const. virtual . Reimplemented in TGeoVolumeAssembly.; Definition at line 425 of file TGeoVolume.cxx. ◆ CloneNodesAndConnect(). void TGeoVolume::CloneNodesAndConnect ; (; TGeoVolume * ; newmother); const. Clone the array of nodes. ; Definition at line 1880 of file TGeoVolume.cxx. ◆ CloneVolume(). TGeoVolume * TGeoVolume::CloneVolume ; (; ); const. virtual . Clone this volume. ; build a volume with same name, shape and medium ; Reimplemented in TGeoVolumeAssembly.; Definition at line 1831 of file TGeoVolume.cxx. ◆ Contains(). Bool_t TGeoVolume::Contains ; (; const Double_t * ; point); const. inline . Definition at line 104 of file TGeoVolume.h. ◆ CountNodes(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:44267,Clear,ClearNodes,44267,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['Clear'],['ClearNodes']
Usability,"/ use copy-constructor of TMethodCall; 751 // if c++-14 could use std::make_unique; 752 TMethodCall *m = (fMethod) ? new TMethodCall(*fMethod) : nullptr;; 753 fnew.fMethod.reset(m);; 754 ; 755 fnew.fFuncPtr = fFuncPtr;; 756 fnew.fGradGenerationInput = fGradGenerationInput;; 757 fnew.fHessGenerationInput = fHessGenerationInput;; 758 fnew.fGradFuncPtr = fGradFuncPtr;; 759 fnew.fHessFuncPtr = fHessFuncPtr;; 760 ; 761}; 762 ; 763////////////////////////////////////////////////////////////////////////////////; 764/// Clear the formula setting expression to empty and reset the variables and; 765/// parameters containers.; 766 ; 767void TFormula::Clear(Option_t * ); 768{; 769 fNdim = 0;; 770 fNpar = 0;; 771 fNumber = 0;; 772 fFormula = """";; 773 fClingName = """";; 774 ; 775 fMethod.reset();; 776 ; 777 fClingVariables.clear();; 778 fClingParameters.clear();; 779 fReadyToExecute = false;; 780 fClingInitialized = false;; 781 fAllParametersSetted = false;; 782 fFuncs.clear();; 783 fVars.clear();; 784 fParams.clear();; 785 fConsts.clear();; 786 fFunctionsShortcuts.clear();; 787 ; 788 // delete linear parts; 789 int nLinParts = fLinearParts.size();; 790 if (nLinParts > 0) {; 791 for (int i = 0; i < nLinParts; ++i) delete fLinearParts[i];; 792 }; 793 fLinearParts.clear();; 794 ; 795}; 796 ; 797// Returns nullptr on failure.; 798static std::unique_ptr<TMethodCall>; 799prepareMethod(bool HasParameters, bool HasVariables, const char* FuncName,; 800 bool IsVectorized, bool AddCladArrayRef = false) {; 801 std::unique_ptr<TMethodCall>; 802 Method = std::make_unique<TMethodCall>();; 803 ; 804 TString prototypeArguments = """";; 805 if (HasVariables || HasParameters) {; 806 if (IsVectorized); 807 prototypeArguments.Append(""ROOT::Double_v*"");; 808 else; 809 prototypeArguments.Append(""Double_t*"");; 810 }; 811 auto AddDoublePtrParam = [&prototypeArguments]() {; 812 prototypeArguments.Append("","");; 813 prototypeArguments.Append(""Double_t*"");; 814 };; 815 if (HasParameters); 816 AddDoublePtrParam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:28537,clear,clear,28537,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['clear'],['clear']
Usability,"/**; 219 copy constructors; 220 */; 221 BinData::BinData(const BinData &rhs); 222 : FitData(rhs),; 223 fDataPtr(nullptr),; 224 fDataErrorPtr(nullptr), fDataErrorHighPtr(nullptr), fDataErrorLowPtr(nullptr),; 225 fpTmpCoordErrorVector(nullptr), fpTmpBinEdgeVector(nullptr); 226 {; 227 *this = rhs;; 228 }; 229 ; 230 BinData & BinData::operator= ( const BinData & rhs ); 231 {; 232 FitData::operator=( rhs );; 233 ; 234 if ( fpTmpBinEdgeVector ); 235 {; 236 assert(HasBinEdges());; 237 ; 238 delete[] fpTmpBinEdgeVector;; 239 fpTmpBinEdgeVector= nullptr;; 240 }; 241 ; 242 if ( fpTmpCoordErrorVector ); 243 {; 244 delete[] fpTmpCoordErrorVector;; 245 fpTmpCoordErrorVector = nullptr;; 246 }; 247 ; 248 fDataPtr = nullptr;; 249 fDataErrorPtr= fDataErrorHighPtr= fDataErrorLowPtr= nullptr;; 250 ; 251 fErrorType = rhs.fErrorType;; 252 fRefVolume = rhs.fRefVolume;; 253 fBinEdge = rhs.fBinEdge;; 254 ; 255 if ( fWrapped ); 256 {; 257 fData.clear();; 258 fCoordErrors.clear();; 259 fDataError.clear();; 260 fDataErrorHigh.clear();; 261 fDataErrorLow.clear();; 262 ; 263 fDataPtr = rhs.fDataPtr;; 264 fCoordErrorsPtr = rhs.fCoordErrorsPtr;; 265 fDataErrorPtr = rhs.fDataErrorPtr;; 266 fDataErrorHighPtr = rhs.fDataErrorHighPtr;; 267 fDataErrorLowPtr = rhs.fDataErrorLowPtr;; 268 }; 269 else; 270 {; 271 // copy data vector and set correct pointer; 272 fData = rhs.fData;; 273 if ( !fData.empty() ); 274 fDataPtr = &fData.front();; 275 ; 276 // copy coordinate errors and set correct pointers; 277 fCoordErrors = rhs.fCoordErrors;; 278 if (!fCoordErrors.empty()) {; 279 assert(kCoordError == fErrorType || kAsymError == fErrorType);; 280 fCoordErrorsPtr.resize(fDim);; 281 for (unsigned int i = 0; i < fDim; i++) {; 282 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 283 }; 284 }; 285 // copy data error; 286 fDataError = rhs.fDataError;; 287 if (!fDataError.empty()) {; 288 assert(kValueError == fErrorType || kCoordError == fErrorType);; 289 fDataErrorPtr = &fDataError.f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:7157,clear,clear,7157,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"/- 0.133931; 0x748b980/V- RooRealVar::bkgfrac = 0.428008 +/- 0.0356013; 0x7492e20/V- RooAddPdf::sig = 1/1 [Auto,Clean] ; 0x7078360/V- RooGaussian::sig1 = 1 [Auto,Dirty] ; 0x6e5aa50/V- RooRealVar::x = 5; 0x6dab710/V- RooRealVar::mean = 5; 0x69f2060/V- RooRealVar::sigma1 = 0.5; 0x72776d0/V- RooRealVar::sig1frac = 0.641992 +/- 0.0969095; 0x70914e0/V- RooGaussian::sig2 = 1 [Auto,Dirty] ; 0x6e5aa50/V- RooRealVar::x = 5; 0x6dab710/V- RooRealVar::mean = 5; 0x2b13da0/V- RooRealVar::sigma2 = 1; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); 0x7d7afc0 RooAddPdf::model = 0.886326/1 [Auto,Clean] ; 0x7475710/V- RooChebychev::bkg = 0.734412 [Auto,Dirty] ; 0x6e5aa50/V- RooRealVar::x = 5; 0x703aa10/V- RooRealVar::a0 = 0.506755 +/- 0.0795919; 0x6eef060/V- RooRealVar::a1 = 0.265588 +/- 0.133931; 0x748b980/V- RooRealVar::bkgfrac = 0.428008 +/- 0.0356013; 0x7078360/V- RooGaussian::sig1 = 1 [Auto,Dirty] ; 0x6e5aa50/V- RooRealVar::x = 5; 0x6dab710/V- RooRealVar::mean = 5; 0x69f2060/V- RooRealVar::sigma1 = 0.5; 0x7bea6d0/V- RooRecursiveFraction::model_recursive_fraction_sig1_2 = 0.367214 [Auto,Clean] ; 0x72776d0/V- RooRealVar::sig1frac = 0.641992 +/- 0.0969095; 0x748b980/V- RooRealVar::bkgfrac = 0.428008 +/- 0.0356013; 0x70914e0/V- RooGaussian::sig2 = 1 [Auto,Dirty] ; 0x6e5aa50/V- RooRealVar::x = 5; 0x6dab710/V- RooRealVar::mean = 5; 0x2b13da0/V- RooRealVar::sigma2 = 1; 0x7d790c0/V- RooRecursiveFraction::model_recursive_fraction_sig2_3 = 0.204778 [Auto,Clean] ; 0x806d820/V- RooConstVar::1 = 1; 0x72776d0/V- RooRealVar::sig1frac = 0.641992 +/- 0.0969095; 0x748b980/V- RooRealVar::bkgfrac = 0.428008 +/- 0.0356013; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf201_composite.py. tutorialsroofitrf201_composite.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf201__composite_8py.html:6859,Guid,Guide,6859,doc/master/rf201__composite_8py.html,https://root.cern,https://root.cern/doc/master/rf201__composite_8py.html,1,['Guid'],['Guide']
Usability,"/--- broadcast bias tensor 0biasfor Gemm op; {; float * data = TMVA::Experimental::SOFIE::UTILITY::UnidirectionalBroadcast<float>(tensor_0bias,{ 16 }, { 2 , 16 });; std::copy(data, data + 32, tensor_0biasbcast);; delete [] data;; }; //--- broadcast bias tensor 2biasfor Gemm op; {; float * data = TMVA::Experimental::SOFIE::UTILITY::UnidirectionalBroadcast<float>(tensor_2bias,{ 8 }, { 2 , 8 });; std::copy(data, data + 16, tensor_2biasbcast);; delete [] data;; }; }; ; std::vector<float> infer(float* tensor_input1){; ; //--------- Gemm; char op_0_transA = 'n';; char op_0_transB = 't';; int op_0_m = 2;; int op_0_n = 16;; int op_0_k = 32;; float op_0_alpha = 1;; float op_0_beta = 1;; int op_0_lda = 32;; int op_0_ldb = 32;; std::copy(tensor_0biasbcast, tensor_0biasbcast + 32, tensor_input0);; BLAS::sgemm_(&op_0_transB, &op_0_transA, &op_0_n, &op_0_m, &op_0_k, &op_0_alpha, tensor_0weight, &op_0_ldb, tensor_input1, &op_0_lda, &op_0_beta, tensor_input0, &op_0_n);; ; //------ RELU; for (int id = 0; id < 32 ; id++){; tensor_result[id] = ((tensor_input0[id] > 0 )? tensor_input0[id] : 0);; }; ; //--------- Gemm; char op_2_transA = 'n';; char op_2_transB = 't';; int op_2_m = 2;; int op_2_n = 8;; int op_2_k = 16;; float op_2_alpha = 1;; float op_2_beta = 1;; int op_2_lda = 16;; int op_2_ldb = 16;; std::copy(tensor_2biasbcast, tensor_2biasbcast + 16, tensor_input2);; BLAS::sgemm_(&op_2_transB, &op_2_transA, &op_2_n, &op_2_m, &op_2_k, &op_2_alpha, tensor_2weight, &op_2_ldb, tensor_result, &op_2_lda, &op_2_beta, tensor_input2, &op_2_n);; ; //------ RELU; for (int id = 0; id < 16 ; id++){; tensor_result3[id] = ((tensor_input2[id] > 0 )? tensor_input2[id] : 0);; }; return fTensor_result3;; }; }; // end of Session; } //TMVA_SOFIE_PyTorchModel; ; #endif // ROOT_TMVA_SOFIE_PYTORCHMODEL; AuthorSanjiban Sengupta ; Definition in file TMVA_SOFIE_PyTorch.C. tutorialstmvaTMVA_SOFIE_PyTorch.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__PyTorch_8C.html:12201,Guid,Guide,12201,doc/master/TMVA__SOFIE__PyTorch_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__PyTorch_8C.html,1,['Guid'],['Guide']
Usability,"// - kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; 6535/// - kWithTypeDef: use the sugared type name in the calculation.; 6536///; 6537/// This is needed for backward compatibility.; 6538///; 6539/// WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum.; 6540/// They are both used to handle backward compatibility and should both return the same values.; 6541/// TStreamerInfo uses the information in TStreamerElement while TClass uses the information; 6542/// from TClass::GetListOfBases and TClass::GetListOfDataMembers.; 6543 ; 6544UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const; 6545{; 6546 // fCheckSum is an atomic variable. Also once it has; 6547 // transition from a zero Value it never changes. If two; 6548 // thread reach past this if statement and calculated the; 6549 // 'kLastestCheckSum', they will by definition obtain the; 6550 // same value, so technically we could simply have:; 6551 // if (fCheckSum && code == kCurrentCheckSum) return fCheckSum;; 6552 // However save a little bit of barrier time by calling load(); 6553 // only once.; 6554 ; 6555 isvalid = kTRUE;; 6556 ; 6557 UInt_t currentChecksum = fCheckSum.load();; 6558 if (currentChecksum && code == kCurrentCheckSum) return currentChecksum;; 6559 ; 6560 R__LOCKGUARD(gInterpreterMutex);; 6561 ; 6562 // kCurrentCheckSum (0) is the default parameter value and should be kept; 6563 // for backward compatibility, too be able to use the inequality checks,; 6564 // we need to set the code to the largest value.; 6565 if (code == kCurrentCheckSum) code = kLatestCheckSum;; 6566 ; 6567 UInt_t id = 0;; 6568 ; 6569 int il;; 6570 TString name = GetName();; 6571 TString type;; 6572 il = name.Length();; 6573 for (int i=0; i<il; i++) id = id*3+name[i];; 6574 ; 6575 // Here we skip he base classes in case this is a pair or STL collection,; 6576 // otherwise, on some STL implementations, it can happen that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:251663,simpl,simply,251663,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['simpl'],['simply']
Usability,"// - kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; 6602/// - kWithTypeDef: use the sugared type name in the calculation.; 6603///; 6604/// This is needed for backward compatibility.; 6605///; 6606/// WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum.; 6607/// They are both used to handle backward compatibility and should both return the same values.; 6608/// TStreamerInfo uses the information in TStreamerElement while TClass uses the information; 6609/// from TClass::GetListOfBases and TClass::GetListOfDataMembers.; 6610 ; 6611UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const; 6612{; 6613 // fCheckSum is an atomic variable. Also once it has; 6614 // transition from a zero Value it never changes. If two; 6615 // thread reach past this if statement and calculated the; 6616 // 'kLastestCheckSum', they will by definition obtain the; 6617 // same value, so technically we could simply have:; 6618 // if (fCheckSum && code == kCurrentCheckSum) return fCheckSum;; 6619 // However save a little bit of barrier time by calling load(); 6620 // only once.; 6621 ; 6622 isvalid = kTRUE;; 6623 ; 6624 UInt_t currentChecksum = fCheckSum.load();; 6625 if (currentChecksum && code == kCurrentCheckSum) return currentChecksum;; 6626 ; 6627 R__LOCKGUARD(gInterpreterMutex);; 6628 ; 6629 // kCurrentCheckSum (0) is the default parameter value and should be kept; 6630 // for backward compatibility, too be able to use the inequality checks,; 6631 // we need to set the code to the largest value.; 6632 if (code == kCurrentCheckSum) code = kLatestCheckSum;; 6633 ; 6634 UInt_t id = 0;; 6635 ; 6636 int il;; 6637 TString name = GetName();; 6638 TString type;; 6639 il = name.Length();; 6640 for (int i=0; i<il; i++) id = id*3+name[i];; 6641 ; 6642 // Here we skip he base classes in case this is a pair or STL collection,; 6643 // otherwise, on some STL implementations, it can happen that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:254414,simpl,simply,254414,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['simpl'],['simply']
Usability,"// Histogram's minimum; Double_t per_cut = (val_cut-min)/(max-min); // normalized value of val_cut; Double_t eps = (max-min)*0.00001; // epsilon; ; // Definition of the two palettes below and above val_cut; const Int_t Number = 4;; Double_t Red[Number] = { 0.11, 0.19 , 0.30, 0.89};; Double_t Green[Number] = { 0.03, 0.304, 0.60, 0.91};; Double_t Blue[Number] = { 0.18, 0.827, 0.50, 0.70};; Double_t Stops[Number] = { 0., per_cut, per_cut+eps, 1. };; ; Int_t nb= 256;; h->SetContour(nb);; ; TColor::CreateGradientColorTable(Number,Stops,Red,Green,Blue,nb);; ; // Histogram drawing; h->Draw(""colz"");; }; ; void perceptualcolormap() {; TH2D *h = new TH2D(""h"",""Perceptual Colormap"",200,-4,4,200,-4,4);; h->SetStats(0);; ; Double_t a,b;; for (Int_t i=0;i<1000000;i++) {; gRandom->Rannor(a,b);; h->Fill(a-1.5,b-1.5,0.1);; h->Fill(a+2.,b-3.,0.07);; h->Fill(a-3.,b+3.,0.05);; gRandom->Rannor(a,b);; h->Fill(a+1.5,b+1.5,-0.08);; }; Perceptual_Colormap(h, 0.);; }; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TColor::CreateGradientColorTablestatic Int_t CreateGradientColorTable(UInt_t Number, Double_t *Stops, Double_t *Red, Double_t *Green, Double_t *Blue, UInt_t NColors, Float_t alpha=1., Bool_t setPalette=kTRUE)Static function creating a color table with several connected linear gradients.Definition TColor.cxx:2730; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; AuthorOlivier Couet ; Definition in file perceptualcolormap.C. tutorialsgraphicsperceptualcolormap.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/perceptualcolormap_8C.html:2990,Guid,Guide,2990,doc/master/perceptualcolormap_8C.html,https://root.cern,https://root.cern/doc/master/perceptualcolormap_8C.html,1,['Guid'],['Guide']
Usability,"// entry is always the local entry number in the current tree.; 327/// Assuming that fChain is the pointer to the TChain being processed,; 328/// use fChain->GetTree()->GetEntry(entry);; 329 ; 330void TSelector::ProcessFill(Long64_t /*entry*/); 331{; 332 ; 333}; 334 ; 335////////////////////////////////////////////////////////////////////////////////; 336/// The Process() function is called for each entry in the tree (or possibly; 337/// keyed object in the case of PROOF) to be processed. The entry argument; 338/// specifies which entry in the currently loaded tree is to be processed.; 339/// It can be passed to either t01::GetEntry() or TBranch::GetEntry(); 340/// to read either all or the required parts of the data. When processing; 341/// keyed objects with PROOF, the object is already loaded and is available; 342/// via the fObject pointer.; 343///; 344/// This function should contain the ""body"" of the analysis. It can contain; 345/// simple or elaborate selection criteria, run algorithms on the data; 346/// of the event and typically fill histograms.; 347///; 348/// The processing can be stopped by calling Abort().; 349///; 350/// Use fStatus to set the return value of TTree::Process().; 351///; 352/// The return value is currently not used.; 353///; 354/// WARNING when a selector is used with a TChain, you must use; 355/// the pointer to the current TTree to call GetEntry(entry).; 356/// The entry is always the local entry number in the current tree.; 357/// Assuming that fChain is the pointer to the TChain being processed,; 358/// use: `fChain->GetTree()->GetEntry(entry)`.; 359 ; 360bool TSelector::Process(Long64_t /*entry*/) {; 361 ; 362 return false;; 363}; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TClass.h; TError.h; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:13626,simpl,simple,13626,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['simpl'],['simple']
Usability,"// internally) for 2-fold cross validation.; //; // The split type can be ""Random"", ""RandomStratified"" or ""Deterministic"".; // For the last option, check the comment below. Random splitting randomises; // the order of events and distributes events as evenly as possible.; // RandomStratified applies the same logic but distributes events within a; // class as evenly as possible over the folds.; //; UInt_t numFolds = 2;; TString analysisType = ""Classification"";; ; TString splitType = (useRandomSplitting) ? ""Random"" : ""Deterministic"";; ; //; // One can also use a custom splitting function for producing the folds.; // The example uses a dataset spectator `eventID`.; //; // The idea here is that eventID should be an event number that is integral,; // random and independent of the data, generated only once. This last; // property ensures that if a calibration is changed the same event will; // still be assigned the same fold.; //; // This can be used to use the cross validated classifiers in application,; // a technique that can simplify statistical analysis.; //; // If you want to run TMVACrossValidationApplication, make sure you have; // run this tutorial with Deterministic splitting type, i.e.; // with the option useRandomSPlitting = false; //; ; TString splitExpr = (!useRandomSplitting) ? ""int(fabs([eventID]))%int([NumFolds])"" : """";; ; TString cvOptions = Form(""!V""; "":!Silent""; "":ModelPersistence""; "":AnalysisType=%s""; "":SplitType=%s""; "":NumFolds=%i""; "":SplitExpr=%s"",; analysisType.Data(), splitType.Data(), numFolds,; splitExpr.Data());; ; TMVA::CrossValidation cv{""TMVACrossValidation"", dataloader, outputFile, cvOptions};; ; // --------------------------------------------------------------------------; ; //; // Books a method to use for evaluation; //; cv.BookMethod(TMVA::Types::kBDT, ""BDTG"",; ""!H:!V:NTrees=100:MinNodeSize=2.5%:BoostType=Grad""; "":NegWeightTreatment=Pray:Shrinkage=0.10:nCuts=20""; "":MaxDepth=2"");; ; cv.BookMethod(TMVA::Types::kFisher, ""Fisher"",; ""!H:!V:Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:23117,simpl,simplify,23117,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['simpl'],['simplify']
Usability,"// makes physical node matching current modeller state.; 3505 ; 3506TGeoPhysicalNode *TGeoManager::MakePhysicalNode(const char *path); 3507{; 3508 TGeoPhysicalNode *node;; 3509 if (path) {; 3510 if (!CheckPath(path)) {; 3511 Error(""MakePhysicalNode"", ""path: %s not valid"", path);; 3512 return nullptr;; 3513 }; 3514 node = new TGeoPhysicalNode(path);; 3515 } else {; 3516 node = new TGeoPhysicalNode(GetPath());; 3517 }; 3518 fPhysicalNodes->Add(node);; 3519 return node;; 3520}; 3521 ; 3522////////////////////////////////////////////////////////////////////////////////; 3523/// Refresh physical nodes to reflect the actual geometry paths after alignment; 3524/// was applied. Optionally locks physical nodes (default).; 3525 ; 3526void TGeoManager::RefreshPhysicalNodes(Bool_t lock); 3527{; 3528 TIter next(gGeoManager->GetListOfPhysicalNodes());; 3529 TGeoPhysicalNode *pn;; 3530 while ((pn = (TGeoPhysicalNode *)next())); 3531 pn->Refresh();; 3532 if (fParallelWorld && fParallelWorld->IsClosed()); 3533 fParallelWorld->RefreshPhysicalNodes();; 3534 if (lock); 3535 LockGeometry();; 3536}; 3537 ; 3538////////////////////////////////////////////////////////////////////////////////; 3539/// Clear the current list of physical nodes, so that we can start over with a new list.; 3540/// If MUSTDELETE is true, delete previous nodes.; 3541 ; 3542void TGeoManager::ClearPhysicalNodes(Bool_t mustdelete); 3543{; 3544 if (mustdelete); 3545 fPhysicalNodes->Delete();; 3546 else; 3547 fPhysicalNodes->Clear();; 3548}; 3549 ; 3550////////////////////////////////////////////////////////////////////////////////; 3551/// Make an assembly of volumes.; 3552 ; 3553TGeoVolumeAssembly *TGeoManager::MakeVolumeAssembly(const char *name); 3554{; 3555 return TGeoBuilder::Instance(this)->MakeVolumeAssembly(name);; 3556}; 3557 ; 3558////////////////////////////////////////////////////////////////////////////////; 3559/// Make a TGeoVolumeMulti handling a list of volumes.; 3560 ; 3561TGeoVolumeMulti *TGeoManage",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:129519,Clear,Clear,129519,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['Clear']
Usability,"/// Append \p NumInputs copies of \p Elt to the end.; 665 void append(size_type NumInputs, const T &Elt); 666 {; 667 if (NumInputs > this->capacity() - this->size()); 668 this->grow(this->size() + NumInputs);; 669 ; 670 std::uninitialized_fill_n(this->end(), NumInputs, Elt);; 671 this->set_size(this->size() + NumInputs);; 672 }; 673 ; 674 void append(std::initializer_list<T> IL) { append(IL.begin(), IL.end()); }; 675 ; 676 // from the original LLVM implementation:; 677 // FIXME: Consider assigning over existing elements, rather than clearing &; 678 // re-initializing them - for all assign(...) variants.; 679 ; 680 void assign(size_type NumElts, const T &Elt); 681 {; 682 clear();; 683 if (this->capacity() < NumElts); 684 this->grow(NumElts);; 685 this->set_size(NumElts);; 686 std::uninitialized_fill(this->begin(), this->end(), Elt);; 687 }; 688 ; 689 template <typename in_iter,; 690 typename = typename std::enable_if<std::is_convertible<; 691 typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type>; 692 void assign(in_iter in_start, in_iter in_end); 693 {; 694 clear();; 695 append(in_start, in_end);; 696 }; 697 ; 698 void assign(std::initializer_list<T> IL); 699 {; 700 clear();; 701 append(IL);; 702 }; 703 ; 704 iterator erase(const_iterator CI); 705 {; 706 // Just cast away constness because this is a non-const member function.; 707 iterator I = const_cast<iterator>(CI);; 708 ; 709 if (I < this->begin() || I >= this->end()) {; 710 throw std::runtime_error(""The iterator passed to `erase` is out of bounds."");; 711 }; 712 ; 713 iterator N = I;; 714 // Shift all elts down one.; 715 std::move(I + 1, this->end(), I);; 716 // Drop the last elt.; 717 this->pop_back();; 718 return (N);; 719 }; 720 ; 721 iterator erase(const_iterator CS, const_iterator CE); 722 {; 723 // Just cast away constness because this is a non-const member function.; 724 iterator S = const_cast<iterator>(CS);; 725 iterator E = const_cast<iterator>(CE);; 726 ; 72",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:24480,clear,clear,24480,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,6,['clear'],['clear']
Usability,"/// It overrules TGeo visibility flags - but only for specific physical node; 1969 ; 1970bool RGeomDescription::SetPhysNodeVisibility(const std::vector<std::string> &path, bool on); 1971{; 1972 TLockGuard lock(fMutex);; 1973 ; 1974 RGeomBrowserIter giter(*this);; 1975 ; 1976 if (!giter.Navigate(path)); 1977 return false;; 1978 ; 1979 auto stack = MakeStackByIds(giter.CurrentIds());; 1980 ; 1981 auto nodeid = giter.GetNodeId();; 1982 ; 1983 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++) {; 1984 auto res = compare_stacks(iter->stack, stack);; 1985 ; 1986 if (res == 0) {; 1987 bool changed = iter->visible != on;; 1988 if (changed) {; 1989 iter->visible = on;; 1990 ClearDrawData();; 1991 ; 1992 // no need for custom settings if match with description; 1993 if ((fDesc[nodeid].vis > 0) == on); 1994 fVisibility.erase(iter);; 1995 }; 1996 ; 1997 return changed;; 1998 }; 1999 ; 2000 if (res > 0) {; 2001 fVisibility.emplace(iter, stack, on);; 2002 ClearDrawData();; 2003 return true;; 2004 }; 2005 }; 2006 ; 2007 fVisibility.emplace_back(stack, on);; 2008 ClearDrawData();; 2009 return true;; 2010}; 2011 ; 2012/////////////////////////////////////////////////////////////////////////////////; 2013/// Set visibility of physical node by itemname; 2014/// itemname in string with path like ""/TOP_1/SUB_2/NODE_3""; 2015 ; 2016bool RGeomDescription::SetPhysNodeVisibility(const std::string &itemname, bool on); 2017{; 2018 std::vector<std::string> path;; 2019 std::string::size_type p1 = 0;; 2020 ; 2021 while (p1 < itemname.length()) {; 2022 if (itemname[p1] == '/') {; 2023 p1++;; 2024 continue;; 2025 }; 2026 auto p = itemname.find('/', p1);; 2027 if (p == std::string::npos) {; 2028 path.emplace_back(itemname.substr(p1));; 2029 p1 = itemname.length();; 2030 } else {; 2031 path.emplace_back(itemname.substr(p1, p - p1));; 2032 p1 = p + 1;; 2033 }; 2034 }; 2035 ; 2036 return SetPhysNodeVisibility(path, on);; 2037}; 2038 ; 2039///////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:60554,Clear,ClearDrawData,60554,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['Clear'],['ClearDrawData']
Usability,"/// ~~~; 1194 ///; 1195 /// \sa This Vary() overload for more information.; 1196 RInterface<Proxied, DS_t> Vary(const std::vector<std::string> &colNames, std::string_view expression,; 1197 const std::vector<std::string> &variationTags, std::string_view variationName); 1198 {; 1199 return JittedVaryImpl(colNames, expression, variationTags, variationName, /*isSingleColumn=*/false);; 1200 }; 1201 ; 1202 ////////////////////////////////////////////////////////////////////////////; 1203 /// \brief Allow to refer to a column with a different name.; 1204 /// \param[in] alias name of the column alias; 1205 /// \param[in] columnName of the column to be aliased; 1206 /// \return the first node of the computation graph for which the alias is available.; 1207 ///; 1208 /// Aliasing an alias is supported.; 1209 ///; 1210 /// ### Example usage:; 1211 /// ~~~{.cpp}; 1212 /// auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");; 1213 /// ~~~; 1214 RInterface<Proxied, DS_t> Alias(std::string_view alias, std::string_view columnName); 1215 {; 1216 // The symmetry with Define is clear. We want to:; 1217 // - Create globally the alias and return this very node, unchanged; 1218 // - Make aliases accessible based on chains and not globally; 1219 ; 1220 // Helper to find out if a name is a column; 1221 auto &dsColumnNames = fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{};; 1222 ; 1223 constexpr auto where = ""Alias"";; 1224 RDFInternal::CheckValidCppVarName(alias, where);; 1225 // If the alias name is a column name, there is a problem; 1226 RDFInternal::CheckForRedefinition(where, alias, fColRegister, fLoopManager->GetBranchNames(), dsColumnNames);; 1227 ; 1228 const auto validColumnName = GetValidatedColumnNames(1, {std::string(columnName)})[0];; 1229 ; 1230 RDFInternal::RColumnRegister newCols(fColRegister);; 1231 newCols.AddAlias(alias, validColumnName);; 1232 ; 1233 RInterface<Proxied, DS_t> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:66462,clear,clear,66462,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['clear'],['clear']
Usability,"///////////////////////////////////////////////////////////////////////////////; 786/// Calls TRint::ProcessLine() possibly prepending a `#line` directive for; 787/// better diagnostics.; 788/// The user is responsible for incrementing `fNcmd`, where appropriate, after; 789/// a call to this function.; 790 ; 791Longptr_t TRint::ProcessLineNr(const char* filestem, const char *line, Int_t *error /*= 0*/); 792{; 793 Int_t err;; 794 if (!error); 795 error = &err;; 796 if (line && line[0] != '.') {; 797 TString input;; 798 if (!fBackslashContinue); 799 input += TString::Format(""#line 1 \""%s%d\""\n"", filestem, fNcmd);; 800 input += line;; 801 int res = ProcessLine(input, kFALSE, error);; 802 if (gCling->GetMore()) {; 803 if (!fNonContinuePrompt.Length()); 804 fNonContinuePrompt = fDefaultPrompt;; 805 SetPrompt(""root (cont'ed, cancel with .@) [%d]"");; 806 } else if (fNonContinuePrompt.Length()) {; 807 SetPrompt(fNonContinuePrompt);; 808 fNonContinuePrompt.Clear();; 809 }; 810 std::string_view sv(line);; 811 auto lastNonSpace = sv.find_last_not_of("" \t"");; 812 fBackslashContinue = (lastNonSpace != std::string_view::npos; 813 && sv[lastNonSpace] == '\\');; 814 return res;; 815 }; 816 if (line && line[0] == '.' && line[1] == '@') {; 817 ProcessLine(line, kFALSE, error);; 818 SetPrompt(""root [%d] "");; 819 }; 820 return ProcessLine(line, kFALSE, error);; 821}; 822 ; 823 ; 824////////////////////////////////////////////////////////////////////////////////; 825/// Forward tab completion request to our TTabCom::Hook().; 826 ; 827Int_t TRint::TabCompletionHook(char *buf, int *pLoc, std::ostream& out); 828{; 829 if (gTabCom); 830 return gTabCom->Hook(buf, pLoc, out);; 831 ; 832 return -1;; 833}; e#define e(i)Definition RSha256.hxx:103; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; Longptr_tlong Longptr_tDefinition RtypesCore.h:75; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:27629,Clear,Clear,27629,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['Clear'],['Clear']
Usability,"///////////////////////////////////////////////////////////////////////////////; 951/// Split the list as a comma separated list into a TObjArray of TObjString.; 952 ; 953void TSchemaRule::ProcessList( TObjArray* array, const TString& list ); 954{; 955 std::list<std::string> elems;; 956 std::list<std::string>::iterator it;; 957 Internal::TSchemaRuleProcessor::SplitList( (const char*)list, elems );; 958 ; 959 array->Clear();; 960 ; 961 if( elems.empty() ); 962 return;; 963 ; 964 for( it = elems.begin(); it != elems.end(); ++it ) {; 965 TObjString *str = new TObjString;; 966 *str = it->c_str();; 967 array->Add( str );; 968 }; 969}; 970 ; 971////////////////////////////////////////////////////////////////////////////////; 972/// Split the list as a declaration into as a TObjArray of TNamed(name,type).; 973 ; 974void TSchemaRule::ProcessDeclaration( TObjArray* array, const TString& list ); 975{; 976 std::list<std::pair<ROOT::Internal::TSchemaType,std::string> > elems;; 977 std::list<std::pair<ROOT::Internal::TSchemaType,std::string> >::iterator it;; 978 Internal::TSchemaRuleProcessor::SplitDeclaration( (const char*)list, elems );; 979 ; 980 array->Clear();; 981 ; 982 if( elems.empty() ); 983 return;; 984 ; 985 for( it = elems.begin(); it != elems.end(); ++it ) {; 986 TSources *type = new TSources( it->second.c_str(), it->first.fType.c_str(), it->first.fDimensions.c_str() ) ;; 987 array->Add( type );; 988 }; 989}; 990 ; 991#if 0; 992////////////////////////////////////////////////////////////////////////////////; 993/// Generate the actual function for the rule.; 994 ; 995Bool_t TSchemaRule::GenerateFor( TStreamerInfo *info ); 996{; 997 String funcname = fSourceClass + ""_to_"" + fTargetClass;; 998 if (info) funcname += ""_v"" + info->GetClassVersion();; 999 TString names = fSource + ""_"" + fTarget;; 1000 name.ReplaceAll(',','_');; 1001 name.ReplaceAll(':','_');; 1002 funcname += ""_"" + name;; 1003 ; 1004 String filename = funcname + "".C"";; 1005 if (!false) {; 1006 filename += ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:31976,Clear,Clear,31976,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['Clear'],['Clear']
Usability,///////////////////////////////////////////////////////////////////////////; 2870/// Destructor.; 2871 ; 2872TGeoVolumeAssembly::ThreadData_t::~ThreadData_t() {}; 2873 ; 2874////////////////////////////////////////////////////////////////////////////////; 2875 ; 2876TGeoVolumeAssembly::ThreadData_t &TGeoVolumeAssembly::GetThreadData() const; 2877{; 2878 Int_t tid = TGeoManager::ThreadId();; 2879 return *fThreadData[tid];; 2880}; 2881 ; 2882////////////////////////////////////////////////////////////////////////////////; 2883 ; 2884void TGeoVolumeAssembly::ClearThreadData() const; 2885{; 2886 std::lock_guard<std::mutex> guard(fMutex);; 2887 TGeoVolume::ClearThreadData();; 2888 std::vector<ThreadData_t *>::iterator i = fThreadData.begin();; 2889 while (i != fThreadData.end()) {; 2890 delete *i;; 2891 ++i;; 2892 }; 2893 fThreadData.clear();; 2894 fThreadSize = 0;; 2895}; 2896 ; 2897////////////////////////////////////////////////////////////////////////////////; 2898 ; 2899void TGeoVolumeAssembly::CreateThreadData(Int_t nthreads); 2900{; 2901 std::lock_guard<std::mutex> guard(fMutex);; 2902 // Create assembly thread data here; 2903 fThreadData.resize(nthreads);; 2904 fThreadSize = nthreads;; 2905 for (Int_t tid = 0; tid < nthreads; tid++) {; 2906 if (fThreadData[tid] == nullptr) {; 2907 fThreadData[tid] = new ThreadData_t;; 2908 }; 2909 }; 2910 TGeoVolume::CreateThreadData(nthreads);; 2911}; 2912 ; 2913////////////////////////////////////////////////////////////////////////////////; 2914 ; 2915Int_t TGeoVolumeAssembly::GetCurrentNodeIndex() const; 2916{; 2917 return fThreadData[TGeoManager::ThreadId()]->fCurrent;; 2918}; 2919 ; 2920////////////////////////////////////////////////////////////////////////////////; 2921 ; 2922Int_t TGeoVolumeAssembly::GetNextNodeIndex() const; 2923{; 2924 return fThreadData[TGeoManager::ThreadId()]->fNext;; 2925}; 2926 ; 2927////////////////////////////////////////////////////////////////////////////////; 2928 ; 2929void TGeoVolumeAssembl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:104681,clear,clear,104681,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11377,clear,clearValueAndShapeDirty,11377,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"////////////////////////////////////////////////////////////////////; 929/// Add ""e"" to error of bin with index ""bin"", enable errors if needed; 930 ; 931void THnSparse::AddBinError2(Long64_t bin, Double_t e2); 932{; 933 THnSparseArrayChunk* chunk = GetChunk(bin / fChunkSize);; 934 if (!chunk->fSumw2 ) {; 935 // if fSumw2 is zero GetCalculateErrors should return false; 936 if (GetCalculateErrors()) {; 937 Error(""SetBinError"", ""GetCalculateErrors() logic error!"");; 938 }; 939 Sumw2(); // enable error calculation; 940 }; 941 ; 942 (*chunk->fSumw2)[bin % fChunkSize] += e2;; 943}; 944 ; 945////////////////////////////////////////////////////////////////////////////////; 946/// Enable calculation of errors; 947 ; 948void THnSparse::Sumw2(); 949{; 950 if (GetCalculateErrors()) return;; 951 ; 952 fTsumw2 = 0.;; 953 TIter iChunk(&fBinContent);; 954 THnSparseArrayChunk* chunk = nullptr;; 955 while ((chunk = (THnSparseArrayChunk*) iChunk())); 956 chunk->Sumw2();; 957}; 958 ; 959////////////////////////////////////////////////////////////////////////////////; 960/// Clear the histogram; 961 ; 962void THnSparse::Reset(Option_t *option /*= """"*/); 963{; 964 fFilledBins = 0;; 965 fBins.Delete();; 966 fBinsContinued.Clear();; 967 fBinContent.Delete();; 968 ResetBase(option);; 969}; 970 ; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; Char_tchar Char_tDefinition RtypesCore.h:37; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TAxis.h; TClass.h; TDataMember.h; TDataType.h; optionOption_t Option_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:35695,Clear,Clear,35695,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////; 931/// Project this profile3D into a 3-D histogram along X,Y,Z.; 932///; 933/// The projection is always of the type TH3D.; 934///; 935/// - if option ""E"" is specified, the errors are computed. (default); 936/// - if option ""B"" is specified, the content of bin of the returned histogram; 937/// will be equal to the GetBinEntries(bin) of the profile,; 938/// - if option ""C=E"" the bin contents of the projection are set to the; 939/// bin errors of the profile; 940/// - if option ""E"" is specified the errors of the projected histogram are computed and set; 941/// to be equal to the errors of the profile.; 942/// Option ""E"" is defined as the default one in the header file.; 943/// - if option """" is specified the histogram errors are simply the sqrt of its content; 944/// - if option ""B"" is specified, the content of bin of the returned histogram; 945/// will be equal to the GetBinEntries(bin) of the profile,; 946/// - if option ""C=E"" the bin contents of the projection are set to the; 947/// bin errors of the profile; 948/// - if option ""W"" is specified the bin content of the projected histogram is set to the; 949/// product of the bin content of the profile and the entries.; 950/// With this option the returned histogram will be equivalent to the one obtained by; 951/// filling directly a TH2D using the 3-rd value as a weight.; 952/// This option makes sense only for profile filled with all weights =1.; 953/// When the profile is weighted (filled with weights different than 1) the; 954/// bin error of the projected histogram (obtained using this option ""W"") cannot be; 955/// correctly computed from the information stored in the profile. In that case the; 956/// obtained histogram contains as bin error square the weighted sum of the square of the; 957/// profiled observable (TProfile2D::fSumw2[bin] ); 958///; 959/// Note that the axis range is not considered when doing the projection; 960 ; 961TH3D *TProf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:33605,simpl,simply,33605,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:41946,clear,clear,41946,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"///////////////////////////////////////////////////////////////; 1007/// It opens a Forum topic in a web browser with prefilled ROOT version; 1008///; 1009/// \param[in] type the issue type (only bug supported right now); 1010 ; 1011void TApplication::OpenForumTopic(const TString &type); 1012{; 1013 // https://meta.discourse.org/t/how-to-create-a-post-clicking-a-link/96197; 1014 ; 1015 if (type == ""bug"") {; 1016 //OpenInBrowser(""\""https://root-forum.cern.ch/new-topic?title=topic%20title&body=topic%20body&category=category/subcategory&tags=email,planned\"""");; 1017 TString report_template =; 1018R""(___; 1019_Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_; 1020 ; 1021### Describe the bug; 1022<!--; 1023A clear and concise description of what the wrong behavior is.; 1024-->; 1025### Expected behavior; 1026<!--; 1027A clear and concise description of what you expected to happen.; 1028-->; 1029 ; 1030### To Reproduce; 1031<!--; 1032Steps to reproduce the behavior:; 10331. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 10342. Don't forget to attach the required input files!; 10353. How to run your code and / or build it, e.g. `root myMacro.C`, ...; 1036-->; 1037 ; 1038### Setup; 1039)""+GetSetup()+; 1040R""(; 1041<!--; 1042Please specify also how you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; 1043-->; 1044 ; 1045### Additional context; 1046<!--; 1047Add any other context about the problem here.; 1048-->)"";; 1049 report_template = FormatHttpUrl(report_template);; 1050 ; 1051 OpenInBrowser(""\""https://root-forum.cern.ch/new-topic?category=ROOT&tags=bug&body=""+report_template+""&\"""");; 1052 } else {; 1053 Warning(""OpenForumTopic"", ""cannot find \""%s\"" as type for a Forum topic\n""; 1054 ""Available types are 'bug'."", type.Data());; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:39223,clear,clear,39223,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////; 23 ; 24#ifndef TMVA_NEURAL_NET; 25#define TMVA_NEURAL_NET; 26#pragma once; 27 ; 28#include <vector>; 29#include <iostream>; 30#include <algorithm>; 31#include <iterator>; 32#include <functional>; 33#include <tuple>; 34#include <cmath>; 35#include <cassert>; 36#include <random>; 37#include <thread>; 38#include <future>; 39#include <type_traits>; 40#include <string>; 41#include <utility>; 42 ; 43#include ""Pattern.h""; 44#include ""Monitoring.h""; 45 ; 46#include ""TApplication.h""; 47#include ""Timer.h""; 48 ; 49#include ""TH1F.h""; 50#include ""TH2F.h""; 51 ; 52#include <fenv.h> // turn on or off exceptions for NaN and other numeric exceptions; 53 ; 54 ; 55namespace TMVA; 56{; 57 ; 58 class IPythonInteractive;; 59 ; 60 namespace DNN; 61 {; 62 ; 63 // double gaussDoubl (edouble mean, double sigma);; 64 ; 65 ; 66 ; 67 double gaussDouble (double mean, double sigma);; 68 double uniformDouble (double minValue, double maxValue);; 69 int randomInt (int maxValue);; 70 ; 71 ; 72 ; 73 ; 74 class MeanVariance; 75 {; 76 public:; 77 MeanVariance(); 78 : m_n(0); 79 , m_sumWeights(0); 80 , m_mean(0); 81 , m_squared(0); 82 {}; 83 ; 84 inline void clear(); 85 {; 86 m_n = 0;; 87 m_sumWeights = 0;; 88 m_mean = 0;; 89 m_squared = 0;; 90 }; 91 ; 92 template <typename T>; 93 inline void add(T value, double weight = 1.0); 94 {; 95 ++m_n; // a value has been added; 96 ; 97 if (m_n == 1) // initialization; 98 {; 99 m_mean = value;; 100 m_squared = 0.0;; 101 m_sumWeights = weight;; 102 return;; 103 }; 104 ; 105 double tmpWeight = m_sumWeights+weight;; 106 double Q = value - m_mean;; 107 ; 108 double R = Q*weight/tmpWeight;; 109 m_mean += R;; 110 m_squared += m_sumWeights*R*Q;; 111 ; 112 m_sumWeights = tmpWeight;; 113 }; 114 ; 115 template <typename ITERATOR>; 116 inline void add (ITERATOR itBegin, ITERATOR itEnd); 117 {; 118 for (ITERATOR it = itBegin; it != itEnd; ++it); 119 add (*it);; 120 }; 121 ; 122 ; 123 ; 124 inline int count() const {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:1834,clear,clear,1834,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['clear'],['clear']
Usability,"//////////////////////////////////////////////////////////; 387/// Allow geting the tree from the context menu.; 388 ; 389void TTreeViewer::AppendTree(TTree *tree); 390{; 391 if (!tree) return;; 392 TTree *ftree;; 393 if (fTreeList) {; 394 if (fTreeList->FindObject(tree)) {; 395 printf(""Tree found\n"");; 396 TIter next(fTreeList);; 397 Int_t index = 0;; 398 while ((ftree = (TTree*)next())) {; 399 if (ftree==tree) {printf(""found at index %i\n"", index);break;}; 400 index++;; 401 }; 402 SwitchTree(index);; 403 if (fTree != fMappedTree) {; 404 // switch also the global ""tree"" variable; 405 fLVContainer->RemoveNonStatic();; 406 // map it on the right panel; 407 MapTree(fTree);; 408 fListView->Layout();; 409 TGListTreeItem *base = nullptr;; 410 TGListTreeItem *parent = fLt->FindChildByName(base, ""TreeList"");; 411 TGListTreeItem *item = fLt->FindChildByName(parent, fTree->GetName());; 412 fLt->ClearHighlighted();; 413 fLt->HighlightItem(item);; 414 fClient->NeedRedraw(fLt);; 415 }; 416 return;; 417 }; 418 }; 419 if (fTree != tree) {; 420 fTree = tree;; 421 // load the tree via the interpreter; 422 char command[100];; 423 command[0] = 0;; 424 // define a global ""tree"" variable for the same tree; 425 snprintf(command,100, ""tv__tree = (TTree *)0x%zx;"", (size_t)tree);; 426 ExecuteCommand(command);; 427 }; 428 //--- add the tree to the list if it is not already in; 429 if (fTreeList) fTreeList->Add(fTree);; 430 ExecuteCommand(""tv__tree_list->Add(tv__tree);"");; 431 //--- map this tree; 432 TGListTreeItem *base = nullptr;; 433 TGListTreeItem *parent = fLt->FindChildByName(base, ""TreeList"");; 434 if (!parent) parent = fLt->AddItem(base, ""TreeList"", new ULong_t(kLTNoType));; 435 ULong_t *itemType = new ULong_t((fTreeIndex << 8) | kLTTreeType);; 436 fTreeIndex++;; 437 TGListTreeItem *lTreeItem = fLt->AddItem(parent, tree->GetName(), itemType,; 438 gClient->GetPicture(""tree_t.xpm""), gClient->GetPicture(""tree_t.xpm""));; 439 MapTree(fTree, lTreeItem, false);; 440 fLt->OpenItem(parent);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:15191,Clear,ClearHighlighted,15191,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['Clear'],['ClearHighlighted']
Usability,"///////////////////////////////////////////////////////; 106/// Print the TFitResultPtr by printing its TFitResult.; 107 ; 108std::string cling::printValue(const TFitResultPtr* val) {; 109 if (TFitResult* fr = val->Get()); 110 return printValue(fr);; 111 return ""<nullptr TFitResult>"";; 112}; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TFitResultPtr.h; TFitResult.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TFitResultPtr::~TFitResultPtrvirtual ~TFitResultPtr()Destructor.Definition TFitResultPtr.cxx:55; TFitResultPtr::GetTFitResult * Get() constReturn contained pointer.Definition TFitResultPtr.cxx:86; TFitResultPtr::fPointerstd::shared_ptr< TFitResult > fPointer! Smart Pointer to TFitResult classDefinition TFitResultPtr.h:58; TFitResultPtr::fStatusint fStatusfit status codeDefinition TFitResultPtr.h:57; TFitResultPtr::operator*TFitResult & operator*() constImplement the de-reference operator to make the class acts as a pointer to a TFitResult assert in cas...Definition TFitResultPtr.cxx:63; TFitResultPtr::operator->TFitResult * operator->() constImplement the -> operator to make the class acts as a pointer to a TFitResult.Definition TFitResultPtr.cxx:75; TFitResultPtr::operator=TFitResultPtr & operator=(const TFitResultPtr &rhs)Assignment operator.Definition TFitResultPtr.cxx:94; TFitResultPtr::TFitResultPtrTFitResultPtr(int status=-1)Definition TFitResultPtr.h:35; TFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O.Definition TFitResult.h:34. histhistsrcTFitResultPtr.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html:5702,Guid,Guide,5702,doc/master/TFitResultPtr_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html,1,['Guid'],['Guide']
Usability,"//////////////////////////////////////////////////////; 1262/// Set size of the matrix to [row_lwb:row_upb] x [col_lwb:col_upb]; 1263/// New dynamic elements are created, the overlapping part of the old ones are; 1264/// copied to the new structures, then the old elements are deleted.; 1265 ; 1266template <class Element>; 1267TMatrixTBase<Element> &; 1268TMatrixT<Element>::ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t /*nr_nonzeros*/); 1269{; 1270 R__ASSERT(this->IsValid());; 1271 if (!this->fIsOwner) {; 1272 Error(""ResizeTo(Int_t,Int_t,Int_t,Int_t)"", ""Not owner of data array,cannot resize"");; 1273 return *this;; 1274 }; 1275 ; 1276 const Int_t new_nrows = row_upb - row_lwb + 1;; 1277 const Int_t new_ncols = col_upb - col_lwb + 1;; 1278 ; 1279 if (this->fNelems > 0) {; 1280 ; 1281 if (this->fNrows == new_nrows && this->fNcols == new_ncols && this->fRowLwb == row_lwb &&; 1282 this->fColLwb == col_lwb); 1283 return *this;; 1284 else if (new_nrows == 0 || new_ncols == 0) {; 1285 this->fNrows = new_nrows;; 1286 this->fNcols = new_ncols;; 1287 this->fRowLwb = row_lwb;; 1288 this->fColLwb = col_lwb;; 1289 Clear();; 1290 return *this;; 1291 }; 1292 ; 1293 Element *elements_old = GetMatrixArray();; 1294 const Int_t nelems_old = this->fNelems;; 1295 const Int_t nrows_old = this->fNrows;; 1296 const Int_t ncols_old = this->fNcols;; 1297 const Int_t rowLwb_old = this->fRowLwb;; 1298 const Int_t colLwb_old = this->fColLwb;; 1299 ; 1300 Allocate(new_nrows, new_ncols, row_lwb, col_lwb);; 1301 R__ASSERT(this->IsValid());; 1302 ; 1303 Element *elements_new = GetMatrixArray();; 1304 // new memory should be initialized but be careful not to wipe out the stack; 1305 // storage. Initialize all when old or new storage was on the heap; 1306 if (this->fNelems > this->kSizeMax || nelems_old > this->kSizeMax); 1307 memset(elements_new, 0, this->fNelems * sizeof(Element));; 1308 else if (this->fNelems > nelems_old); 1309 memset(elements_new + nelems_old, 0, (this-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:45862,Clear,Clear,45862,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['Clear'],['Clear']
Usability,"/////////////////////////////////////////////////////; 1338/// Produces search data if necessary; 1339 ; 1340void RGeomDescription::ProduceSearchData(); 1341{; 1342 TLockGuard lock(fMutex);; 1343 ; 1344 if (fSearch.empty() || !fSearchJson.empty()); 1345 return;; 1346 ; 1347 std::string hjson;; 1348 ; 1349 SearchVisibles(fSearch, hjson, fSearchJson);; 1350 ; 1351 (void)hjson; // not used here; 1352}; 1353 ; 1354/////////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:41546,Clear,ClearDrawData,41546,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['Clear'],['ClearDrawData']
Usability,"////////////////////////////////////////////////////; 33/// TNamed copy ctor.; 34 ; 35TNamed::TNamed(const TNamed &named) : TObject(named),fName(named.fName),fTitle(named.fTitle); 36{; 37}; 38 ; 39////////////////////////////////////////////////////////////////////////////////; 40/// TNamed destructor.; 41 ; 42TNamed::~TNamed(); 43{; 44 // Required since we overload TObject::Hash.; 45 ROOT::CallRecursiveRemoveIfNeeded(*this);; 46}; 47 ; 48////////////////////////////////////////////////////////////////////////////////; 49/// TNamed assignment operator.; 50 ; 51TNamed& TNamed::operator=(const TNamed& rhs); 52{; 53 if (this != &rhs) {; 54 TObject::operator=(rhs);; 55 fName = rhs.fName;; 56 fTitle = rhs.fTitle;; 57 }; 58 return *this;; 59}; 60 ; 61////////////////////////////////////////////////////////////////////////////////; 62/// Set name and title to empty strings ("""").; 63 ; 64void TNamed::Clear(Option_t *); 65{; 66 fName = """";; 67 fTitle = """";; 68}; 69 ; 70////////////////////////////////////////////////////////////////////////////////; 71/// Make a clone of an object using the Streamer facility.; 72/// If newname is specified, this will be the name of the new object.; 73 ; 74TObject *TNamed::Clone(const char *newname) const; 75{; 76 TNamed *named = (TNamed*)TObject::Clone(newname);; 77 if (newname && strlen(newname)) named->SetName(newname);; 78 return named;; 79}; 80 ; 81////////////////////////////////////////////////////////////////////////////////; 82/// Compare two TNamed objects. Returns 0 when equal, -1 when this is; 83/// smaller and +1 when bigger (like strcmp).; 84 ; 85Int_t TNamed::Compare(const TObject *obj) const; 86{; 87 if (this == obj) return 0;; 88 return fName.CompareTo(obj->GetName());; 89}; 90 ; 91////////////////////////////////////////////////////////////////////////////////; 92/// Copy this to obj.; 93 ; 94void TNamed::Copy(TObject &obj) const; 95{; 96 TObject::Copy(obj);; 97 ((TNamed&)obj).fName = fName;; 98 ((TNamed&)obj).fTitle = fTitle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNamed_8cxx_source.html:2081,Clear,Clear,2081,doc/master/TNamed_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TNamed_8cxx_source.html,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////; 609/// Change current directory to ""path"". The path syntax is:; 610/// `file.root:/dir1/dir2`; 611/// where file.root is the file and `/dir1/dir2` the desired subdirectory; 612/// in the file.; 613/// Relative syntax is relative to the current directory `gDirectory`, e.g.: `../aa`.; 614///; 615/// Returns kFALSE in case path does not exist.; 616 ; 617Bool_t TDirectory::Cd1(const char *apath); 618{; 619 // null path is always true (i.e. stay in the current directory); 620 if (!apath || !apath[0]); 621 return kTRUE;; 622 ; 623 TDirectory *where = gDirectory->GetDirectory(apath, kTRUE, ""Cd"");; 624 if (where) {; 625 where->cd();; 626 return kTRUE;; 627 }; 628 return kFALSE;; 629}; 630 ; 631////////////////////////////////////////////////////////////////////////////////; 632/// Delete all objects from a Directory list.; 633 ; 634void TDirectory::Clear(Option_t *); 635{; 636 if (fList) fList->Clear();; 637}; 638 ; 639////////////////////////////////////////////////////////////////////////////////; 640/// Delete all objects from memory and directory structure itself.; 641/// if option is ""slow"", iterate through the containers in a way to can handle; 642/// 'external' modification (induced by recursions); 643/// if option is ""nodelete"", write the TDirectory but do not delete the contained; 644/// objects.; 645void TDirectory::Close(Option_t *option); 646{; 647 if (!fList) {; 648 return;; 649 }; 650 ; 651 // Save the directory key list and header; 652 Save();; 653 ; 654 Bool_t nodelete = option ? (!strcmp(option, ""nodelete"") ? kTRUE : kFALSE) : kFALSE;; 655 ; 656 if (!nodelete) {; 657 Bool_t slow = option ? (!strcmp(option, ""slow"") ? kTRUE : kFALSE) : kFALSE;; 658 if (!slow) {; 659 // Check if it is wise to use the fast deletion path.; 660 TObjLink *lnk = fList->FirstLink();; 661 while (lnk) {; 662 if (lnk->GetObject()->IsA() == TDirectory::Class()) {; 663 slow = kTRUE;; 664 break;; 665 }; 666 lnk = lnk->Next();; 667 }; 668 };",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:22102,Clear,Clear,22102,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,2,['Clear'],['Clear']
Usability,"///////////////////////////////////////////////; 1411/// Return pointer to function with name.; 1412///; 1413/// Functions such as TGraph::Fit store the fitted function in the list of; 1414/// functions of this graph.; 1415 ; 1416TF1 *TGraph::GetFunction(const char *name) const; 1417{; 1418 if (!fFunctions) return nullptr;; 1419 return (TF1*)fFunctions->FindObject(name);; 1420}; 1421 ; 1422////////////////////////////////////////////////////////////////////////////////; 1423/// Returns a pointer to the histogram used to draw the axis; 1424/// Takes into account the two following cases.; 1425/// 1. option 'A' was specified in TGraph::Draw. Return fHistogram; 1426/// 2. user had called TPad::DrawFrame. return pointer to hframe histogram; 1427 ; 1428TH1F *TGraph::GetHistogram() const; 1429{; 1430 Double_t rwxmin, rwxmax, rwymin, rwymax, maximum, minimum, dx, dy;; 1431 Double_t uxmin, uxmax;; 1432 ; 1433 ComputeRange(rwxmin, rwymin, rwxmax, rwymax); //this is redefined in TGraphErrors; 1434 ; 1435 // (if fHistogram exist) && (if the log scale is on) &&; 1436 // (if the computed range minimum is > 0) && (if the fHistogram minimum is zero); 1437 // then it means fHistogram limits have been computed in linear scale; 1438 // therefore they might be too strict and cut some points. In that case the; 1439 // fHistogram limits should be recomputed ie: the existing fHistogram; 1440 // should not be returned.; 1441 TH1F *historg = nullptr;; 1442 if (fHistogram) {; 1443 if (!TestBit(kResetHisto)) {; 1444 if (gPad && gPad->GetLogx()) {; 1445 if (rwxmin <= 0 || fHistogram->GetXaxis()->GetXmin() != 0) return fHistogram;; 1446 } else if (gPad && gPad->GetLogy()) {; 1447 if (rwymin <= 0 || fHistogram->GetMinimum() != 0) return fHistogram;; 1448 } else {; 1449 return fHistogram;; 1450 }; 1451 } else {; 1452 const_cast <TGraph*>(this)->ResetBit(kResetHisto);; 1453 }; 1454 historg = fHistogram;; 1455 }; 1456 ; 1457 if (rwxmin == rwxmax) rwxmax += 1.;; 1458 if (rwymin == rwymax) rwymax += 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:51460,ux,uxmin,51460,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"//////////////////////////////////////////; 46/// TInterpreter ctor only called by derived classes.; 47 ; 48TInterpreter::TInterpreter(const char *name, const char *title); 49 : TNamed(name, title); 50{; 51 gInterpreterLocal = this;; 52 gCling = this;; 53}; 54 ; 55////////////////////////////////////////////////////////////////////////////////; 56/// returns gInterpreter global; 57 ; 58TInterpreter *TInterpreter::Instance(); 59{; 60 if (gInterpreterLocal == nullptr) {; 61 static TROOT *getROOT = ROOT::GetROOT(); // Make sure gInterpreterLocal is set; 62 if (!getROOT) {; 63 ::Fatal(""TInterpreter::Instance"",""TROOT object is required before accessing a TInterpreter"");; 64 }; 65 }; 66 return gInterpreterLocal;; 67}; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TError.h; namechar name[80]Definition TGX11.cxx:110; TGlobal.h; gInterpreterLocalstatic TInterpreter * gInterpreterLocalDefinition TInterpreter.cxx:25; gClingTInterpreter * gClingDefinition TInterpreter.cxx:24; TInterpreter.h; gClingR__EXTERN TInterpreter * gClingDefinition TInterpreter.h:574; TROOT.h; TGlobalMappedFunction::MakeFunctorstatic void MakeFunctor(const char *name, const char *type, GlobFunc &func)Definition TGlobal.h:73; TInterpreterThis class defines an abstract interface to a generic command line interpreter.Definition TInterpreter.h:60; TInterpreter::TInterpreterTInterpreter()Definition TInterpreter.h:135; TInterpreter::Instancestatic TInterpreter * Instance()returns gInterpreter globalDefinition TInterpreter.cxx:58; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TROOTROOT top level object description.Definition TROOT.h:94; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472. coremetasrcTInterpreter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8cxx_source.html:3421,Guid,Guide,3421,doc/master/TInterpreter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8cxx_source.html,1,['Guid'],['Guide']
Usability,"/////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:43015,clear,clear,43015,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"////////////////////////////////////////; 885/// Check if specified checksum string is correct and build checksum vector.; 886 ; 887Bool_t TSchemaRule::ProcessChecksum( const TString& checksum ) const; 888{; 889 //---------------------------------------------------------------------------; 890 // Check if we have valid list; 891 /////////////////////////////////////////////////////////////////////////////; 892 ; 893 if (!checksum[0]); 894 return kFALSE;; 895 std::string chk = (const char*)checksum;; 896 if( chk[0] != '[' || chk[chk.size()-1] != ']' ); 897 return kFALSE;; 898 ; 899 std::list<std::string> checksums;; 900 Internal::TSchemaRuleProcessor::SplitList( chk.substr( 1, chk.size()-2), checksums );; 901 ; 902 if( checksums.empty() ) {; 903 delete fChecksumVect;; 904 fChecksumVect = nullptr;; 905 return kFALSE;; 906 }; 907 ; 908 if( !fChecksumVect ); 909 fChecksumVect = new std::vector<UInt_t>;; 910 fChecksumVect->clear();; 911 ; 912 //---------------------------------------------------------------------------; 913 // Check the validity of each list element; 914 /////////////////////////////////////////////////////////////////////////////; 915 ; 916 for( const auto& checksumStr : checksums ) {; 917 auto chksum = ParseChecksum( checksumStr.c_str() );; 918 if (chksum == 0u) {; 919 delete fChecksumVect;; 920 fChecksumVect = nullptr;; 921 return kFALSE;; 922 }; 923 ; 924 fChecksumVect->push_back( chksum );; 925 }; 926 return kTRUE;; 927}; 928 ; 929////////////////////////////////////////////////////////////////////////////////; 930/// Parse the checksum in the given string. Returns either the checksum or zero; 931/// if the string is not a hex or decimal number.; 932 ; 933UInt_t TSchemaRule::ParseChecksum(const char* checksum) const {; 934 std::istringstream converter(checksum);; 935 UInt_t chksum;; 936 converter >> std::hex >> chksum;; 937 if (converter.fail()) {; 938 converter.clear();; 939 converter.seekg(0);; 940 converter >> std::dec >> chksum;; 941 }; 942 ; 943",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:29653,clear,clear,29653,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['clear'],['clear']
Usability,"//////////////////////////////////////; 2613/// If opt contains 'built', reset this StreamerInfo as if Build or BuildOld; 2614/// was never called on it (useful to force their re-running).; 2615 ; 2616void TStreamerInfo::Clear(Option_t *option); 2617{; 2618 TString opt = option;; 2619 opt.ToLower();; 2620 ; 2621 if (opt.Contains(""build"")) {; 2622 R__LOCKGUARD(gInterpreterMutex);; 2623 ; 2624 delete [] fComp; fComp = 0;; 2625 delete [] fCompFull; fCompFull= 0;; 2626 delete [] fCompOpt; fCompOpt = 0;; 2627 ; 2628 fNdata = 0;; 2629 fNfulldata = 0;; 2630 fNslots= 0;; 2631 fSize = 0;; 2632 ; 2633 ResetIsCompiled();; 2634 ResetBit(kBuildOldUsed);; 2635 ; 2636 TIter next(fElements);; 2637 while (auto element = (TStreamerElement*)next()) {; 2638 element->SetOffset(0);; 2639 }; 2640 ; 2641 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 2642 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 2643 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 2644 if (fReadText) fReadText->fActions.clear();; 2645 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 2646 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 2647 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 2648 if (fWriteText) fWriteText->fActions.clear();; 2649 }; 2650}; 2651 ; 2652namespace {; 2653 // TMemberInfo; 2654 // Local helper class to be able to compare data member represented by; 2655 // 2 distinct TStreamerInfos; 2656 class TMemberInfo {; 2657 public:; 2658 TClass *fParent;; 2659 TString fName;; 2660 TString fClassName;; 2661 TString fComment;; 2662 Int_t fDataType;; 2663 ; 2664 TMemberInfo(TClass *parent) : fParent(parent) {};; 2665 ; 2666 void SetDataType(Int_t datatype) {; 2667 fDataType = datatype;; 2668 }; 2669 ; 2670 void SetName(const char *name) {; 2671 fName = name;; 2672 }; 2673 void SetClassName(const char *name) {; 2674 fClassName = TClassEdit::ResolveTypedef(TClassEdit::ShortType( name, TClassEdit::kDropStlDefault | TClassEdit:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:105557,clear,clear,105557,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['clear'],['clear']
Usability,"////////////////////////////////////; 1619/// Creates stack for given array of ids, first element always should be 0; 1620 ; 1621std::vector<int> RGeomDescription::MakeStackByIds(const std::vector<int> &ids); 1622{; 1623 TLockGuard lock(fMutex);; 1624 ; 1625 std::vector<int> stack;; 1626 ; 1627 if (ids.empty()); 1628 return stack;; 1629 ; 1630 if (ids[0] != 0) {; 1631 printf(""Wrong first id\n"");; 1632 return stack;; 1633 }; 1634 ; 1635 int nodeid = 0;; 1636 ; 1637 for (unsigned k = 1; k < ids.size(); ++k) {; 1638 ; 1639 int prntid = nodeid;; 1640 nodeid = ids[k];; 1641 ; 1642 if (nodeid >= (int)fDesc.size()) {; 1643 printf(""Wrong node id %d\n"", nodeid);; 1644 stack.clear();; 1645 return stack;; 1646 }; 1647 auto &chlds = fDesc[prntid].chlds;; 1648 auto pos = std::find(chlds.begin(), chlds.end(), nodeid);; 1649 if (pos == chlds.end()) {; 1650 printf(""Wrong id %d not a child of %d - fail to find stack num %d\n"", nodeid, prntid, (int)chlds.size());; 1651 stack.clear();; 1652 return stack;; 1653 }; 1654 ; 1655 stack.emplace_back(std::distance(chlds.begin(), pos));; 1656 }; 1657 ; 1658 return stack;; 1659}; 1660 ; 1661/////////////////////////////////////////////////////////////////////////////////; 1662/// Produce stack based on string path; 1663/// Used to highlight geo volumes by browser hover event; 1664 ; 1665std::vector<int> RGeomDescription::MakeStackByPath(const std::vector<std::string> &path); 1666{; 1667 TLockGuard lock(fMutex);; 1668 ; 1669 std::vector<int> res;; 1670 ; 1671 RGeomBrowserIter iter(*this);; 1672 ; 1673 if (iter.Navigate(path)); 1674 res = MakeStackByIds(iter.CurrentIds());; 1675 ; 1676 return res;; 1677}; 1678 ; 1679/////////////////////////////////////////////////////////////////////////////////; 1680/// Produce list of node ids for given stack; 1681/// If found nodes preselected - use their ids; 1682 ; 1683std::vector<int> RGeomDescription::MakeIdsByStack(const std::vector<int> &stack); 1684{; 1685 TLockGuard lock(fMutex);; 1686 ; 1687 std::ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:50227,clear,clear,50227,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"///////////////////////////////////; 3726/// Display the histogram info (bin number, contents, integral up to bin; 3727/// corresponding to cursor position px,py.; 3728 ; 3729char *THistPainter::GetObjectInfo(Int_t px, Int_t py) const; 3730{; 3731 ; 3732 if (!gPad) return (char*)"""";; 3733 ; 3734 Double_t x = gPad->PadtoX(gPad->AbsPixeltoX(px));; 3735 Double_t y = gPad->PadtoY(gPad->AbsPixeltoY(py));; 3736 Double_t x1 = gPad->PadtoX(gPad->AbsPixeltoX(px+1));; 3737 TString drawOption = fH->GetDrawOption();; 3738 drawOption.ToLower();; 3739 Double_t xmin, xmax, uxmin,uxmax;; 3740 Double_t ymin, ymax, uymin,uymax;; 3741 if (fH->GetDimension() == 2) {; 3742 if (gPad->GetView() || drawOption.Index(""cont"") >= 0) {; 3743 uxmin=gPad->GetUxmin();; 3744 uxmax=gPad->GetUxmax();; 3745 xmin = fXaxis->GetBinLowEdge(fXaxis->GetFirst());; 3746 xmax = fXaxis->GetBinUpEdge(fXaxis->GetLast());; 3747 x = xmin +(xmax-xmin)*(x-uxmin)/(uxmax-uxmin);; 3748 uymin=gPad->GetUymin();; 3749 uymax=gPad->GetUymax();; 3750 ymin = fYaxis->GetBinLowEdge(fYaxis->GetFirst());; 3751 ymax = fYaxis->GetBinUpEdge(fYaxis->GetLast());; 3752 y = ymin +(ymax-ymin)*(y-uymin)/(uymax-uymin);; 3753 }; 3754 }; 3755 Int_t binx,biny,binmin=0,binx1;; 3756 if (gPad->IsVertical()) {; 3757 binx = fXaxis->FindFixBin(x);; 3758 if (drawOption.Index(""same"") >= 0) {; 3759 TH1 *h1;; 3760 TIter next(gPad->GetListOfPrimitives());; 3761 while ((h1 = (TH1 *)next())) {; 3762 if (!h1->InheritsFrom(TH1::Class())) continue;; 3763 binmin = h1->GetXaxis()->GetFirst();; 3764 break;; 3765 }; 3766 } else {; 3767 binmin = fXaxis->GetFirst();; 3768 }; 3769 binx1 = fXaxis->FindFixBin(x1);; 3770 // special case if more than 1 bin in x per pixel; 3771 if (binx1-binx>1 && fH->GetDimension() == 1) {; 3772 Double_t binval=fH->GetBinContent(binx);; 3773 Int_t binnear=binx;; 3774 for (Int_t ibin=binx+1; ibin<binx1; ibin++) {; 3775 Double_t binvaltmp = fH->GetBinContent(ibin);; 3776 if (TMath::Abs(y-binvaltmp) < TMath::Abs(y-binval)) {; 3777 binval=bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:145578,ux,uxmin,145578,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,4,['ux'],"['uxmax', 'uxmax-uxmin', 'uxmin']"
Usability,"//////////////////////////////////; 2942/// Default constructor; 2943 ; 2944TGeoVolumeAssembly::TGeoVolumeAssembly() : TGeoVolume(); 2945{; 2946 fThreadSize = 0;; 2947 CreateThreadData(1);; 2948}; 2949 ; 2950////////////////////////////////////////////////////////////////////////////////; 2951/// Constructor. Just the name has to be provided. Assemblies does not have their own; 2952/// shape or medium.; 2953 ; 2954TGeoVolumeAssembly::TGeoVolumeAssembly(const char *name) : TGeoVolume(); 2955{; 2956 fName = name;; 2957 fName = fName.Strip();; 2958 fShape = new TGeoShapeAssembly(this);; 2959 if (fGeoManager); 2960 fNumber = fGeoManager->AddVolume(this);; 2961 fThreadSize = 0;; 2962 CreateThreadData(1);; 2963}; 2964 ; 2965////////////////////////////////////////////////////////////////////////////////; 2966/// Destructor. The assembly is owner of its ""shape"".; 2967 ; 2968TGeoVolumeAssembly::~TGeoVolumeAssembly(); 2969{; 2970 ClearThreadData();; 2971 if (fShape); 2972 delete fShape;; 2973}; 2974 ; 2975////////////////////////////////////////////////////////////////////////////////; 2976/// Add a component to the assembly.; 2977 ; 2978TGeoNode *TGeoVolumeAssembly::AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat, Option_t *option); 2979{; 2980 TGeoNode *node = TGeoVolume::AddNode(vol, copy_no, mat, option);; 2981 // ((TGeoShapeAssembly*)fShape)->RecomputeBoxLast();; 2982 ((TGeoShapeAssembly *)fShape)->NeedsBBoxRecompute();; 2983 return node;; 2984}; 2985 ; 2986////////////////////////////////////////////////////////////////////////////////; 2987/// Add an overlapping node - not allowed for assemblies.; 2988 ; 2989void TGeoVolumeAssembly::AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat, Option_t *option); 2990{; 2991 Warning(""AddNodeOverlap"",; 2992 ""Declaring assembly %s as possibly overlapping inside %s not allowed. Using AddNode instead !"",; 2993 vol->GetName(), GetName());; 2994 AddNode(vol, copy_no, mat, option);; 2995}; 2996 ; 2997////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:107178,Clear,ClearThreadData,107178,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['Clear'],['ClearThreadData']
Usability,"//////////////////////////////////; 472/// Set the target class of this rule (i.e. the in memory class).; 473 ; 474void TSchemaRule::SetTargetClass( const TString& classname ); 475{; 476 std::string normalizedName;; 477 TClassEdit::GetNormalizedName(normalizedName, classname);; 478 fTargetClass = normalizedName;; 479}; 480 ; 481////////////////////////////////////////////////////////////////////////////////; 482/// Get the targte class of this rule (i.e. the in memory class).; 483 ; 484const char *TSchemaRule::GetTargetClass() const; 485{; 486 return fTargetClass;; 487}; 488 ; 489////////////////////////////////////////////////////////////////////////////////; 490/// Set the target member of this rule (i.e. the in memory data member).; 491 ; 492void TSchemaRule::SetTarget( const TString& target ); 493{; 494 fTarget = target;; 495 ; 496 if( target == """" ) {; 497 delete fTargetVect;; 498 fTargetVect = nullptr;; 499 return;; 500 }; 501 ; 502 if( !fTargetVect ) {; 503 fTargetVect = new TObjArray();; 504 fTargetVect->SetOwner();; 505 }; 506 ProcessList( fTargetVect, target );; 507}; 508 ; 509////////////////////////////////////////////////////////////////////////////////; 510/// Get the target data members of this rule as a simple string (i.e. the in memory data member).; 511 ; 512const char *TSchemaRule::GetTargetString() const; 513{; 514 return fTarget;; 515}; 516 ; 517////////////////////////////////////////////////////////////////////////////////; 518/// Get the target data members of this rule (i.e. the in memory data member).; 519 ; 520const TObjArray* TSchemaRule::GetTarget() const; 521{; 522 if( fTarget == """" ); 523 return nullptr;; 524 ; 525 if( !fTargetVect ) {; 526 fTargetVect = new TObjArray();; 527 fTargetVect->SetOwner();; 528 ProcessList( fTargetVect, fTarget );; 529 }; 530 ; 531 return fTargetVect;; 532}; 533 ; 534////////////////////////////////////////////////////////////////////////////////; 535/// Set the list of source members. This should be in the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:16560,simpl,simple,16560,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['simpl'],['simple']
Usability,"/////////////////////////////////; 423 ; 424void TMVA::MethodDNN::ProcessOptions(); 425{; 426 if (IgnoreEventsWithNegWeightsInTraining()) {; 427 Log() << kINFO; 428 << ""Will ignore negative events in training!""; 429 << Endl;; 430 }; 431 ; 432 if (fArchitectureString == ""STANDARD"") {; 433 Log() << kERROR << ""The STANDARD architecture has been deprecated. ""; 434 ""Please use Architecture=CPU or Architecture=CPU.""; 435 ""See the TMVA Users' Guide for instructions if you ""; 436 ""encounter problems.""; 437 << Endl;; 438 Log() << kFATAL << ""The STANDARD architecture has been deprecated. ""; 439 ""Please use Architecture=CPU or Architecture=CPU.""; 440 ""See the TMVA Users' Guide for instructions if you ""; 441 ""encounter problems.""; 442 << Endl;; 443 }; 444 ; 445 if (fArchitectureString == ""OPENCL"") {; 446 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 447 ""Please use Architecture=CPU or Architecture=CPU for the ""; 448 ""time being. See the TMVA Users' Guide for instructions ""; 449 ""if you encounter problems.""; 450 << Endl;; 451 Log() << kFATAL << ""The OPENCL architecture has not been implemented yet. ""; 452 ""Please use Architecture=CPU or Architecture=CPU for the ""; 453 ""time being. See the TMVA Users' Guide for instructions ""; 454 ""if you encounter problems.""; 455 << Endl;; 456 }; 457 ; 458 if (fArchitectureString == ""GPU"") {; 459#ifndef DNNCUDA // Included only if DNNCUDA flag is _not_ set.; 460 Log() << kERROR << ""CUDA backend not enabled. Please make sure ""; 461 ""you have CUDA installed and it was successfully ""; 462 ""detected by CMAKE.""; 463 << Endl;; 464 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 465 ""you have CUDA installed and it was successfully ""; 466 ""detected by CMAKE.""; 467 << Endl;; 468#endif // DNNCUDA; 469 }; 470 ; 471 if (fArchitectureString == ""CPU"") {; 472#ifndef DNNCPU // Included only if DNNCPU flag is _not_ set.; 473 Log() << kERROR << ""Multi-core CPU backend not enabled. Please make sure ""; 474 ""you have ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:15151,Guid,Guide,15151,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Guid'],['Guide']
Usability,"////////////////////////////////; 3039/// Draw this histogram with options.; 3040///; 3041/// Histograms are drawn via the THistPainter class. Each histogram has; 3042/// a pointer to its own painter (to be usable in a multithreaded program).; 3043/// The same histogram can be drawn with different options in different pads.; 3044/// When a histogram drawn in a pad is deleted, the histogram is; 3045/// automatically removed from the pad or pads where it was drawn.; 3046/// If a histogram is drawn in a pad, then filled again, the new status; 3047/// of the histogram will be automatically shown in the pad next time; 3048/// the pad is updated. One does not need to redraw the histogram.; 3049/// To draw the current version of a histogram in a pad, one can use; 3050/// `h->DrawCopy();`; 3051/// This makes a clone of the histogram. Once the clone is drawn, the original; 3052/// histogram may be modified or deleted without affecting the aspect of the; 3053/// clone.; 3054/// By default, TH1::Draw clears the current pad.; 3055///; 3056/// One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; 3057/// value for the maximum or the minimum scale on the plot.; 3058///; 3059/// TH1::UseCurrentStyle can be used to change all histogram graphics; 3060/// attributes to correspond to the current selected style.; 3061/// This function must be called for each histogram.; 3062/// In case one reads and draws many histograms from a file, one can force; 3063/// the histograms to inherit automatically the current graphics style; 3064/// by calling before gROOT->ForceStyle();; 3065///; 3066/// See the THistPainter class for a description of all the drawing options.; 3067 ; 3068void TH1::Draw(Option_t *option); 3069{; 3070 TString opt1 = option; opt1.ToLower();; 3071 TString opt2 = option;; 3072 Int_t index = opt1.Index(""same"");; 3073 ; 3074 // Check if the string ""same"" is part of a TCutg name.; 3075 if (index>=0) {; 3076 Int_t indb = opt1.Index(""["");; 3077 if (indb>=0) {; 307",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:121554,clear,clears,121554,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['clear'],['clears']
Usability,"////////////////////////////////; 841/// Calculates hash index from any char string. (static function); 842/// - For string: i = TString::Hash(string,nstring);; 843/// - For int: i = TString::Hash(&intword,sizeof(int));; 844/// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; 845///; 846/// This employs two different hash functions, depending on ntxt:; 847/// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; 848/// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/; 849 ; 850UInt_t TString::Hash(const void *txt, Int_t ntxt); 851{; 852 if (ntxt != sizeof(void*)) {; 853 uint64_t buf[2] = {0};; 854 MurmurHash3_x64_128(txt, ntxt, 0x6384BA69, buf);; 855 return (UInt_t) buf[0];; 856 } else {; 857 // simple, superfast hash for pointers and alike; 858 UInt_t ret = (UInt_t)0x6384BA69;; 859 // aligned?; 860 if (((size_t)txt) % sizeof(void*)) {; 861 UInt_t* itxt = (UInt_t*)txt;; 862 ret ^= itxt[0];; 863 if (sizeof(void*) > sizeof(UInt_t)) {; 864 ret ^= itxt[1];; 865 }; 866 } else {; 867 const unsigned char* ctxt = (const unsigned char*) txt;; 868 for (unsigned int i = 0; i < 4; ++i) {; 869 ret ^= ctxt[i] << (i * 8);; 870 }; 871 if (sizeof(void*) > sizeof(UInt_t)) {; 872 ctxt += 4;; 873 for (unsigned int i = 0; i < 4; ++i) {; 874 ret ^= ctxt[i] << (i * 8);; 875 }; 876 }; 877 }; 878 return ret;; 879 }; 880}; 881 ; 882////////////////////////////////////////////////////////////////////////////////; 883/// Returns false if strings are not equal.; 884 ; 885static int MemIsEqual(const char *p, const char *q, Ssiz_t n); 886{; 887 while (n--); 888 {; 889 if (tolower((unsigned char)*p) != tolower((unsigned char)*q)); 890 return kFALSE;; 891 p++; q++;; 892 }; 893 return kTRUE;; 894}; 895 ; 896////////////////////////////////////////////////////////////////////////////////; 897/// Search for a string in the TString. Plen is the length of pattern,; 898/// startIndex is the index from which to start and cmp selects the type; 899/// of case-comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:25941,simpl,simple,25941,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['simpl'],['simple']
Usability,"//////////////////////////////; 123/// Parse a line of the env file and create an entry in the resource; 124/// dictionary (i.e. add a KeyValue pair).; 125 ; 126void TEnvParser::Parse(); 127{; 128 TString name(1024);; 129 TString type(1024);; 130 TString value(1024);; 131 int c, state = 0;; 132 ; 133 while ((c = fgetc(fIfp)) != EOF) {; 134 if (c == 13) // ignore CR; 135 continue;; 136 if (c == '\n') {; 137 state = 0;; 138 if (name.Length() > 0) {; 139 KeyValue(name, value, type);; 140 name.Clear();; 141 value.Clear();; 142 type.Clear();; 143 }; 144 Char(c);; 145 continue;; 146 }; 147 switch (state) {; 148 case 0: // start of line; 149 switch (c) {; 150 case ' ':; 151 case '\t':; 152 break;; 153 case '#':; 154 state = 1;; 155 break;; 156 default:; 157 state = 2;; 158 break;; 159 }; 160 break;; 161 ; 162 case 1: // comment; 163 break;; 164 ; 165 case 2: // name; 166 switch (c) {; 167 case ' ':; 168 case '\t':; 169 case ':':; 170 state = 3;; 171 break;; 172 case '(':; 173 state = 7;; 174 break;; 175 default:; 176 break;; 177 }; 178 break;; 179 ; 180 case 3: // ws before value; 181 if (c != ' ' && c != '\t'); 182 state = 4;; 183 break;; 184 ; 185 case 4: // value; 186 break;; 187 ; 188 case 5: // type; 189 if (c == ')'); 190 state = 6;; 191 break;; 192 ; 193 case 6: // optional ':'; 194 state = (c == ':') ? 3 : 4;; 195 break;; 196 ; 197 case 7:; 198 state = (c == ')') ? 6 : 5;; 199 break;; 200 ; 201 }; 202 switch (state) {; 203 case 2:; 204 name.Append(c);; 205 break;; 206 case 4:; 207 value.Append(c);; 208 break;; 209 case 5:; 210 type.Append(c);; 211 break;; 212 }; 213 if (state != 4); 214 Char(c);; 215 }; 216 // In case EOF is reach before '\n'; 217 if (name.Length() > 0) {; 218 KeyValue(name, value, type);; 219 name.Clear();; 220 value.Clear();; 221 type.Clear();; 222 }; 223}; 224 ; 225/** \class TReadEnvParser; 226*/; 227 ; 228class TReadEnvParser : public TEnvParser {; 229 ; 230private:; 231 EEnvLevel fLevel;; 232 ; 233public:; 234 TReadEnvParser(TEnv *e, FILE *f,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8cxx_source.html:4559,Clear,Clear,4559,doc/master/TEnv_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8cxx_source.html,1,['Clear'],['Clear']
Usability,"//////////////////////////////; 1316/// Draw this function with its current attributes.; 1317///; 1318/// Possible option values are:; 1319///; 1320/// option | description; 1321/// -------|----------------------------------------; 1322/// ""SAME"" | superimpose on top of existing picture; 1323/// ""L"" | connect all computed points with a straight line; 1324/// ""C"" | connect all computed points with a smooth curve; 1325/// ""FC"" | draw a fill area below a smooth curve; 1326///; 1327/// Note that the default value is ""L"". Therefore to draw on top; 1328/// of an existing picture, specify option ""LSAME""; 1329///; 1330/// NB. You must use DrawCopy if you want to draw several times the same; 1331/// function in the current canvas.; 1332 ; 1333void TF1::Draw(Option_t *option); 1334{; 1335 TString opt = option;; 1336 opt.ToLower();; 1337 if (gPad && !opt.Contains(""same"")) gPad->Clear();; 1338 ; 1339 AppendPad(option);; 1340 ; 1341 gPad->IncrementPaletteColor(1, opt);; 1342}; 1343 ; 1344 ; 1345////////////////////////////////////////////////////////////////////////////////; 1346/// Draw a copy of this function with its current attributes.; 1347///; 1348/// This function MUST be used instead of Draw when you want to draw; 1349/// the same function with different parameters settings in the same canvas.; 1350///; 1351/// Possible option values are:; 1352///; 1353/// option | description; 1354/// -------|----------------------------------------; 1355/// ""SAME"" | superimpose on top of existing picture; 1356/// ""L"" | connect all computed points with a straight line; 1357/// ""C"" | connect all computed points with a smooth curve; 1358/// ""FC"" | draw a fill area below a smooth curve; 1359///; 1360/// Note that the default value is ""L"". Therefore to draw on top; 1361/// of an existing picture, specify option ""LSAME""; 1362 ; 1363TF1 *TF1::DrawCopy(Option_t *option) const; 1364{; 1365 TF1 *newf1 = (TF1 *)this->IsA()->New();; 1366 Copy(*newf1);; 1367 newf1->AppendPad(option);; 1368 newf1->S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:48170,Clear,Clear,48170,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['Clear'],['Clear']
Usability,"//////////////////////////////; 2084/// Minimization function for Graphs using a Chisquare method.; 2085/// In case of a TGraphErrors object, ex, the error along x, is projected; 2086/// along the y-direction by calculating the function at the points x-exlow and; 2087/// x+exhigh.; 2088///; 2089/// The chisquare is computed as the sum of the quantity below at each point:; 2090///; 2091/// (y - f(x))**2; 2092/// -----------------------------------; 2093/// ey**2 + (0.5*(exl + exh)*f'(x))**2; 2094///; 2095/// where x and y are the point coordinates and f'(x) is the derivative of function f(x).; 2096/// This method to approximate the uncertainty in y because of the errors in x, is called; 2097/// ""effective variance"" method.; 2098/// The improvement, compared to the previously used method (f(x+ exhigh) - f(x-exlow))/2; 2099/// is of (error of x)**2 order.; 2100///; 2101/// NOTE:; 2102///; 2103/// 1. By using the ""effective variance"" method a simple linear regression; 2104/// becomes a non-linear case , which takes several iterations; 2105/// instead of 0 as in the linear case .; 2106///; 2107/// 2. The effective variance technique assumes that there is no correlation; 2108/// between the x and y coordinate .; 2109///; 2110/// In case the function lies below (above) the data point, ey is ey_low (ey_high).; 2111 ; 2112void GraphFitChisquareFumili(Int_t &npar, Double_t * gin, Double_t &f,; 2113 Double_t *u, Int_t flag); 2114{; 2115 Double_t cu,eu,exl,exh,ey,eux,fu,fsum;; 2116 Double_t x[1];; 2117 Int_t i, bin, npfits=0;; 2118 ; 2119 TFumili *grFitter = (TFumili*)TVirtualFitter::GetFitter();; 2120 TGraph *gr = (TGraph*)grFitter->GetObjectFit();; 2121 TF1 *f1 = (TF1*)grFitter->GetUserFunc();; 2122 Foption_t fitOption = grFitter->GetFitOption();; 2123 ; 2124 Int_t n = gr->GetN();; 2125 Double_t *gx = gr->GetX();; 2126 Double_t *gy = gr->GetY();; 2127 npar = f1->GetNpar();; 2128 ; 2129 grFitter->SetParNumber(npar);; 2130 ; 2131 if(flag == 9) return;; 2132 Double_t *zik = grFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:62080,simpl,simple,62080,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['simpl'],['simple']
Usability,"//////////////////////////////; 952 ; 953void TGeoManager::ClearThreadData() const; 954{; 955 if (!fMaxThreads); 956 return;; 957 fgMutex.lock();; 958 TIter next(fVolumes);; 959 TGeoVolume *vol;; 960 while ((vol = (TGeoVolume *)next())); 961 vol->ClearThreadData();; 962 fgMutex.unlock();; 963}; 964 ; 965////////////////////////////////////////////////////////////////////////////////; 966/// Create thread private data for all geometry objects.; 967 ; 968void TGeoManager::CreateThreadData() const; 969{; 970 if (!fMaxThreads); 971 return;; 972 fgMutex.lock();; 973 TIter next(fVolumes);; 974 TGeoVolume *vol;; 975 while ((vol = (TGeoVolume *)next())); 976 vol->CreateThreadData(fMaxThreads);; 977 fgMutex.unlock();; 978}; 979 ; 980////////////////////////////////////////////////////////////////////////////////; 981/// Clear the current map of threads. This will be filled again by the calling; 982/// threads via ThreadId calls.; 983 ; 984void TGeoManager::ClearThreadsMap(); 985{; 986 if (gGeoManager && !gGeoManager->IsMultiThread()); 987 return;; 988 fgMutex.lock();; 989 if (!fgThreadId->empty()); 990 fgThreadId->clear();; 991 fgNumThreads = 0;; 992 fgMutex.unlock();; 993}; 994 ; 995////////////////////////////////////////////////////////////////////////////////; 996/// Translates the current thread id to an ordinal number. This can be used to; 997/// manage data which is specific for a given thread.; 998 ; 999Int_t TGeoManager::ThreadId(); 1000{; 1001 TTHREAD_TLS(Int_t) tid = -1;; 1002 Int_t ttid = tid; // TTHREAD_TLS_GET(Int_t,tid);; 1003 if (ttid > -1); 1004 return ttid;; 1005 if (gGeoManager && !gGeoManager->IsMultiThread()); 1006 return 0;; 1007 std::thread::id threadId = std::this_thread::get_id();; 1008 TGeoManager::ThreadsMapIt_t it = fgThreadId->find(threadId);; 1009 if (it != fgThreadId->end()); 1010 return it->second;; 1011 // Map needs to be updated.; 1012 fgMutex.lock();; 1013 (*fgThreadId)[threadId] = fgNumThreads;; 1014 tid = fgNumThreads; // TTHREAD_TLS_SET(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:35724,Clear,ClearThreadsMap,35724,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['ClearThreadsMap']
Usability,"////////////////////////////; 1066/// Delete all primitives in pad and pad itself.; 1067/// Pad cannot be used anymore after this call.; 1068/// Emits signal ""Closed()"".; 1069 ; 1070void TPad::Close(Option_t *); 1071{; 1072 if (ROOT::Detail::HasBeenDeleted(this)) return;; 1073 if (!fMother) return;; 1074 if (ROOT::Detail::HasBeenDeleted(fMother)) return;; 1075 ; 1076 if (fPrimitives); 1077 fPrimitives->Clear();; 1078 if (fView) {; 1079 if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;; 1080 fView = nullptr;; 1081 }; 1082 if (fFrame) {; 1083 if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;; 1084 fFrame = nullptr;; 1085 }; 1086 ; 1087 // emit signal; 1088 if (IsA() != TCanvas::Class()); 1089 Closed();; 1090 ; 1091 if (fPixmapID != -1) {; 1092 if (gPad) {; 1093 if (!gPad->IsBatch() && GetPainter()); 1094 GetPainter()->DestroyDrawable(fPixmapID);; 1095 }; 1096 fPixmapID = -1;; 1097 ; 1098 if (!gROOT->GetListOfCanvases()) return;; 1099 if (fMother == this) {; 1100 gROOT->GetListOfCanvases()->Remove(this);; 1101 return; // in case of TCanvas; 1102 }; 1103 ; 1104 // remove from the mother's list of primitives; 1105 if (fMother) {; 1106 fMother->Remove(this, kFALSE); // do not produce modified; 1107 ; 1108 if (gPad == this); 1109 fMother->cd();; 1110 }; 1111 if (fCanvas) {; 1112 if (fCanvas->GetPadSave() == this); 1113 fCanvas->ClearPadSave();; 1114 if (fCanvas->GetSelectedPad() == this); 1115 fCanvas->SetSelectedPad(nullptr);; 1116 if (fCanvas->GetClickSelectedPad() == this); 1117 fCanvas->SetClickSelectedPad(nullptr);; 1118 }; 1119 }; 1120 ; 1121 fMother = nullptr;; 1122 if (gROOT->GetSelectedPad() == this); 1123 gROOT->SetSelectedPad(nullptr);; 1124}; 1125 ; 1126////////////////////////////////////////////////////////////////////////////////; 1127/// Copy the pixmap of the pad to the canvas.; 1128 ; 1129void TPad::CopyPixmap(); 1130{; 1131 int px, py;; 1132 XYtoAbsPixel(fX1, fY2, px, py);; 1133 ; 1134 if (fPixmapID != -1 && GetPainter()); 1135 GetPainter()-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:33538,Clear,Clear,33538,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,2,['Clear'],"['Clear', 'ClearPadSave']"
Usability,"///////////////////////////; 5575/// Translate the arguments of genreflex into rootcling ones and forward them; 5576/// to the RootCling function.; 5577/// These are two typical genreflex and rootcling commandlines; 5578/// 1) genreflex header1.h [header2.h ...] [options] [preprocessor options]; 5579/// 2) rootcling [-v] [-v0-4] [-f] [out.cxx] [-s sharedlib.so] [-m pcmfilename]; 5580/// header1.h[{+,-}][!] ..headerN.h[{+,-}][!] [{LinkDef.h,selectionRules.xml}]; 5581/// The rules with which the arguments are translated are (1st column genreflex):; 5582/// --debug -v4; 5583/// --quiet -v0; 5584/// -o ofile positional arg after -f; 5585/// -s selection file Last argument of the call; 5586/// --fail_on_warning Wrap ROOT::TMetaUtils::Warning and throw if selected; 5587///; 5588/// New arguments:; 5589/// -l --library targetLib name (new) -s targetLib name; 5590/// -m pcmname (can be many -m) (new) -m pcmname (can be many -m); 5591/// --rootmap -rmf (new); 5592/// --rootmap-lib -rml (new); 5593///; 5594/// genreflex options which rise warnings (feedback is desirable); 5595/// --no_membertypedefs (it should be irrelevant); 5596/// --no_templatetypedefs (it should be irrelevant); 5597///; 5598/// genreflex options which are ignored (know for sure they are not needed); 5599/// --pool, --dataonly; 5600/// --interpreteronly; 5601/// --gccxml{path,opt,post}; 5602///; 5603///; 5604/// Exceptions; 5605/// The --deep option of genreflex is passed as function parameter to rootcling; 5606/// since it's not needed at the moment there.; 5607 ; 5608int GenReflexMain(int argc, char **argv); 5609{; 5610 using namespace genreflex;; 5611 ; 5612 // Setup the options parser; 5613 enum optionIndex { UNKNOWN,; 5614 PRINTROOTCLINGINVOCATION,; 5615 OFILENAME,; 5616 TARGETLIB,; 5617 MULTIDICT,; 5618 NOGLOBALUSINGSTD,; 5619 SELECTIONFILENAME,; 5620 ROOTMAP,; 5621 ROOTMAPLIB,; 5622 PCMFILENAME,; 5623 DEEP,; 5624 DEBUG,; 5625 VERBOSE,; 5626 QUIET,; 5627 SILENT,; 5628 CXXMODULE,; 5629 WRITEEMPTYROOTPC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:224098,feedback,feedback,224098,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['feedback'],['feedback']
Usability,"//////////////////////////; 1035/// Stream an object of class TQObject.; 1036 ; 1037void TQObject::Streamer(TBuffer &R__b); 1038{; 1039 if (R__b.IsReading()) {; 1040 // nothing to read; 1041 } else {; 1042 // nothing to write; 1043 }; 1044}; 1045 ; 1046////////////////////////////////////////////////////////////////////////////////; 1047/// Returns true if all signals are blocked.; 1048 ; 1049Bool_t TQObject::AreAllSignalsBlocked(); 1050{; 1051 return fgAllSignalsBlocked;; 1052}; 1053 ; 1054////////////////////////////////////////////////////////////////////////////////; 1055/// Block or unblock all signals. Returns the previous block status.; 1056 ; 1057Bool_t TQObject::BlockAllSignals(Bool_t b); 1058{; 1059 Bool_t ret = fgAllSignalsBlocked;; 1060 fgAllSignalsBlocked = b;; 1061 return ret;; 1062}; 1063 ; 1064////////////////////////////////////////////////////////////////////////////////; 1065/// Global function which simplifies making connection in interpreted ROOT session; 1066///; 1067/// ConnectCINT - connects to interpreter(CINT) command; 1068 ; 1069Bool_t ConnectCINT(TQObject *sender, const char *signal, const char *slot); 1070{; 1071 TString str = ""ProcessLine(="";; 1072 str += '""';; 1073 str += slot;; 1074 str += '""';; 1075 str += "")"";; 1076 return TQObject::Connect(sender, signal, ""TInterpreter"",; 1077 gInterpreter, str.Data());; 1078}; SafeDelete#define SafeDelete(p)Definition RConfig.hxx:525; RQ_OBJECT.h; b#define b(i)Definition RSha256.hxx:100; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; Char_tchar Char_tDefinition RtypesCore.h:37; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; TBaseClass.h; TBuffer.h; TClass.h; TDataType.h; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; optionOption_t Option_t optionD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TQObject_8cxx_source.html:34942,simpl,simplifies,34942,doc/master/TQObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TQObject_8cxx_source.html,1,['simpl'],['simplifies']
Usability,"/////////////////////////; 744/// Return a new TObjOptLink (a TObjLink that also stores the option).; 745 ; 746TList::TObjLinkPtr_t TList::NewOptLink(TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev); 747{; 748 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 749 R__COLLECTION_WRITE_GUARD();; 750 ; 751 auto newlink = std::make_shared<TObjOptLink>(obj, opt);; 752 if (prev) {; 753 InsertAfter(newlink, prev);; 754 }; 755 return newlink;; 756}; 757 ; 758////////////////////////////////////////////////////////////////////////////////; 759/// Remove object from this collection and recursively remove the object; 760/// from all other objects (and collections).; 761 ; 762void TList::RecursiveRemove(TObject *obj); 763{; 764 // Note, we can assume that the Collection Read lock is held, see; 765 // THashList::RecursiveRemove for a more complete discussion.; 766 if (!obj || (fSize == 0 && fCache.expired())); 767 return;; 768 ; 769 R__COLLECTION_WRITE_GUARD();; 770 ; 771 // When fCache is set and has no previous and next node, it represents; 772 // the node being cleared and/or deleted.; 773 {; 774 auto cached = fCache.lock();; 775 if (cached && cached->fNext.get() == nullptr && cached->fPrev.lock().get() == nullptr) {; 776 TObject *ob = cached->GetObject();; 777 if (ob && !ROOT::Detail::HasBeenDeleted(ob)) {; 778 ob->RecursiveRemove(obj);; 779 }; 780 }; 781 }; 782 ; 783 auto lnk = fFirst;; 784 decltype(lnk) next;; 785 while (lnk.get()) {; 786 next = lnk->fNext;; 787 TObject *ob = lnk->GetObject();; 788 if (ob && !ROOT::Detail::HasBeenDeleted(ob)) {; 789 if (ob->IsEqual(obj)) {; 790 lnk->SetObject(nullptr);; 791 if (lnk == fFirst) {; 792 fFirst = next;; 793 if (lnk == fLast); 794 fLast = fFirst;; 795 else; 796 fFirst->fPrev.reset();; 797 // DeleteLink(lnk);; 798 } else if (lnk == fLast) {; 799 fLast = lnk->fPrev.lock();; 800 fLast->fNext.reset();; 801 // DeleteLink(lnk);; 802 } else {; 803 lnk->Prev()->fNext = next;; 804 lnk->Next()->fPrev = lnk->fPrev;; 805 // DeleteLink(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:23787,clear,cleared,23787,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['clear'],['cleared']
Usability,"///////////////////////; 18// //; 19// TTreeReader //; 20// //; 21// A simple interface for reading trees or chains. //; 22// //; 23// //; 24////////////////////////////////////////////////////////////////////////////; 25 ; 26#include ""TTree.h""; 27#include ""TTreeReaderUtils.h""; 28#include ""TNotifyLink.h""; 29 ; 30#include <deque>; 31#include <iterator>; 32#include <unordered_map>; 33#include <string>; 34 ; 35class TDictionary;; 36class TDirectory;; 37class TFileCollection;; 38 ; 39namespace ROOT {; 40namespace Internal {; 41 class TBranchProxyDirector;; 42 class TFriendProxy;; 43}; 44}; 45 ; 46class TTreeReader: public TObject {; 47public:; 48 ; 49 ///\class TTreeReader::Iterator_t; 50 /// Iterate through the entries of a TTree.; 51 ///; 52 /// This iterator drives the associated TTreeReader; its; 53 /// dereferencing (and actually even the iteration) will; 54 /// set the entry number represented by this iterator.; 55 /// It does not really represent a data element; it simply; 56 /// returns the entry number (or -1 once the end of the tree; 57 /// is reached).; 58 class Iterator_t {; 59 private:; 60 Long64_t fEntry; ///< Entry number of the tree referenced by this iterator; -1 is invalid.; 61 TTreeReader* fReader; ///< The reader we select the entries on.; 62 ; 63 /// Whether the iterator points to a valid entry.; 64 bool IsValid() const { return fEntry >= 0; }; 65 ; 66 public:; 67 using iterator_category = std::input_iterator_tag;; 68 using value_type = const Long64_t;; 69 using difference_type = Long64_t;; 70 using pointer = const Long64_t *;; 71 using const_pointer = const Long64_t *;; 72 using reference = const Long64_t &;; 73 ; 74 /// Default-initialize the iterator as ""past the end"".; 75 Iterator_t(): fEntry(-1), fReader(nullptr) {}; 76 ; 77 /// Initialize the iterator with the reader it steers and a; 78 /// tree entry number; -1 is invalid.; 79 Iterator_t(TTreeReader& reader, Long64_t entry):; 80 fEntry(entry), fReader(&reader) {}; 81 ; 82 /// Compare two itera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReader_8h_source.html:1789,simpl,simply,1789,doc/master/TTreeReader_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReader_8h_source.html,1,['simpl'],['simply']
Usability,"////////////////////; 23 ; 24#include ""TNamed.h""; 25 ; 26class TExec : public TNamed {; 27 ; 28public:; 29 ; 30 TExec();; 31 TExec(const char *name, const char *command);; 32 TExec(const TExec &text);; 33 virtual ~TExec();; 34 virtual void Exec(const char *command = """");; 35 void Paint(Option_t *option="""") override;; 36 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 37 virtual void SetAction(const char *action) { SetTitle(action); }; 38 ; 39 ClassDefOverride(TExec,1); //To execute a CLING command; 40};; 41 ; 42#endif; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; namechar name[80]Definition TGX11.cxx:110; TNamed.h; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TExec::~TExecvirtual ~TExec()Exec default destructor.Definition TExec.cxx:120; TExec::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TExec.cxx:168; TExec::Paintvoid Paint(Option_t *option="""") overrideExecute the command referenced by this object.Definition TExec.cxx:160; TExec::SetActionvirtual void SetAction(const char *action)Definition TExec.h:37; TExec::Execvirtual void Exec(const char *command="""")Execute the command referenced by this object.Definition TExec.cxx:143; TExec::TExecTExec()Exec default constructor.Definition TExec.cxx:105; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164. corebaseincTExec.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TExec_8h_source.html:2811,Guid,Guide,2811,doc/master/TExec_8h_source.html,https://root.cern,https://root.cern/doc/master/TExec_8h_source.html,1,['Guid'],['Guide']
Usability,"///////////////////; 3218 ; 3219void ExtractHeadersForDecls(const RScanner::ClassColl_t &annotatedRcds,; 3220 const RScanner::TypedefColl_t tDefDecls,; 3221 const RScanner::FunctionColl_t funcDecls,; 3222 const RScanner::VariableColl_t varDecls,; 3223 const RScanner::EnumColl_t enumDecls,; 3224 HeadersDeclsMap_t &headersClassesMap,; 3225 HeadersDeclsMap_t &headersDeclsMap,; 3226 const cling::Interpreter &interp); 3227{; 3228 std::set<const clang::CXXRecordDecl *> visitedDecls;; 3229 std::unordered_set<std::string> buffer;; 3230 std::string autoParseKey;; 3231 ; 3232 // Add some manip of headers; 3233 for (auto & annotatedRcd : annotatedRcds) {; 3234 if (const clang::CXXRecordDecl *cxxRcd =; 3235 llvm::dyn_cast_or_null<clang::CXXRecordDecl>(annotatedRcd.GetRecordDecl())) {; 3236 autoParseKey = """";; 3237 visitedDecls.clear();; 3238 std::list<std::string> headers(RecordDecl2Headers(*cxxRcd, interp, visitedDecls));; 3239 // remove duplicates, also if not subsequent; 3240 buffer.clear();; 3241 headers.remove_if([&buffer](const std::string & s) {; 3242 return !buffer.insert(s).second;; 3243 });; 3244 GetMostExternalEnclosingClassName(*cxxRcd, autoParseKey, interp);; 3245 if (autoParseKey.empty()) autoParseKey = annotatedRcd.GetNormalizedName();; 3246 if (IsGoodForAutoParseMap(*cxxRcd)){; 3247 headersDeclsMap[autoParseKey] = headers;; 3248 headersDeclsMap[annotatedRcd.GetRequestedName()] = headers;; 3249 } else {; 3250 ROOT::TMetaUtils::Info(nullptr, ""Class %s is not included in the set of autoparse keys.\n"", autoParseKey.c_str());; 3251 }; 3252 ; 3253 // Propagate to the classes map only if this is not a template.; 3254 // The header is then used as autoload key and we want to avoid duplicates.; 3255 if (!llvm::isa<clang::ClassTemplateSpecializationDecl>(cxxRcd)){; 3256 headersClassesMap[autoParseKey] = headersDeclsMap[autoParseKey];; 3257 headersClassesMap[annotatedRcd.GetRequestedName()] = headersDeclsMap[annotatedRcd.GetRequestedName()];; 3258 }; 3259 }; 3260 }; 3261 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:128705,clear,clear,128705,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['clear'],['clear']
Usability,"//////////////////; 1743/// Constructor from a translation specified by X,Y,Z and a pointer to a rotation. The rotation will not be owned by; 1744/// this.; 1745 ; 1746TGeoCombiTrans::TGeoCombiTrans(Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot) : TGeoMatrix(""""); 1747{; 1748 SetTranslation(dx, dy, dz);; 1749 fRotation = nullptr;; 1750 SetRotation(rot);; 1751}; 1752 ; 1753////////////////////////////////////////////////////////////////////////////////; 1754/// Named ctor; 1755 ; 1756TGeoCombiTrans::TGeoCombiTrans(const char *name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot); 1757 : TGeoMatrix(name); 1758{; 1759 SetTranslation(dx, dy, dz);; 1760 fRotation = nullptr;; 1761 SetRotation(rot);; 1762}; 1763 ; 1764////////////////////////////////////////////////////////////////////////////////; 1765/// Assignment operator with generic matrix.; 1766 ; 1767TGeoCombiTrans &TGeoCombiTrans::operator=(const TGeoMatrix &matrix); 1768{; 1769 if (&matrix == this); 1770 return *this;; 1771 Bool_t registered = TestBit(kGeoRegistered);; 1772 Clear();; 1773 TNamed::operator=(matrix);; 1774 ; 1775 if (matrix.IsTranslation()) {; 1776 memcpy(fTranslation, matrix.GetTranslation(), kN3);; 1777 }; 1778 if (matrix.IsRotation()) {; 1779 if (!fRotation) {; 1780 fRotation = new TGeoRotation();; 1781 SetBit(kGeoMatrixOwned);; 1782 } else {; 1783 if (!TestBit(kGeoMatrixOwned)) {; 1784 fRotation = new TGeoRotation();; 1785 SetBit(kGeoMatrixOwned);; 1786 }; 1787 }; 1788 fRotation->SetMatrix(matrix.GetRotationMatrix());; 1789 fRotation->SetBit(kGeoReflection, matrix.TestBit(kGeoReflection));; 1790 fRotation->SetBit(kGeoRotation);; 1791 } else {; 1792 if (fRotation && TestBit(kGeoMatrixOwned)); 1793 delete fRotation;; 1794 ResetBit(kGeoMatrixOwned);; 1795 fRotation = nullptr;; 1796 }; 1797 SetBit(kGeoRegistered, registered);; 1798 ResetBit(kGeoScale);; 1799 return *this;; 1800}; 1801 ; 1802////////////////////////////////////////////////////////////////////////////////; 1803///",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:62409,Clear,Clear,62409,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Clear'],['Clear']
Usability,"////////////////; 1157/// Copy material properties; 1158 ; 1159void RGeomDescription::CopyMaterialProperties(TGeoVolume *volume, RGeomNode &node); 1160{; 1161 if (!volume); 1162 return;; 1163 ; 1164 TColor *col = nullptr;; 1165 ; 1166 if ((volume->GetFillColor() > 1) && (volume->GetLineColor() == 1)); 1167 col = gROOT->GetColor(volume->GetFillColor());; 1168 else if (volume->GetLineColor() >= 0); 1169 col = gROOT->GetColor(volume->GetLineColor());; 1170 ; 1171 if (volume->GetMedium() && (volume->GetMedium() != TGeoVolume::DummyMedium()) &&; 1172 volume->GetMedium()->GetMaterial()) {; 1173 auto material = volume->GetMedium()->GetMaterial();; 1174 ; 1175 node.material = material->GetName();; 1176 ; 1177 auto fillstyle = material->GetFillStyle();; 1178 if ((fillstyle >= 3000) && (fillstyle <= 3100)); 1179 node.opacity = (3100 - fillstyle) / 100.;; 1180 if (!col); 1181 col = gROOT->GetColor(material->GetFillColor());; 1182 } else {; 1183 node.material.clear();; 1184 }; 1185 ; 1186 if (col) {; 1187 TString colbuf;; 1188 colbuf.Form(""#%02x%02x%02x"", (int)(col->GetRed() * 255), (int)(col->GetGreen() * 255),; 1189 (int)(col->GetBlue() * 255));; 1190 node.color = colbuf.Data();; 1191 if (node.opacity == 1.); 1192 node.opacity = col->GetAlpha();; 1193 } else {; 1194 node.color.clear();; 1195 }; 1196}; 1197 ; 1198/////////////////////////////////////////////////////////////////////; 1199/// Reset shape info, which used to pack binary data; 1200 ; 1201void RGeomDescription::ResetRndrInfos(); 1202{; 1203 for (auto &s : fShapes); 1204 s.reset();; 1205}; 1206 ; 1207/////////////////////////////////////////////////////////////////////; 1208/// Produce JSON string which can be directly used with `build`; 1209/// function from JSROOT to create three.js model of configured geometry; 1210///; 1211/// Collect all information required to draw geometry on the client; 1212/// This includes list of each visible nodes, meshes and matrixes; 1213/// If @param all_nodes is true, all existing no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:35653,clear,clear,35653,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:43035,clear,clear,43035,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"////////////////; 17// //; 18// TArc //; 19// //; 20// Arc of a circle. //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24#include ""TEllipse.h""; 25 ; 26class TArc : public TEllipse {; 27 ; 28public:; 29 TArc();; 30 TArc(Double_t x1, Double_t y1,Double_t radius; 31 , Double_t phimin=0,Double_t phimax=360);; 32 TArc(const TArc &arc);; 33 ~TArc() override;; 34 ; 35 void Copy(TObject &arc) const override;; 36 virtual TArc *DrawArc(Double_t x1, Double_t y1, Double_t radius; 37 ,Double_t phimin=0, Double_t phimax=360, Option_t *option="""");; 38 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 39 ; 40 ClassDefOverride(TArc,1) //Arc of a circle; 41};; 42 ; 43#endif; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TEllipse.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TArcCreate an Arc.Definition TArc.h:26; TArc::~TArc~TArc() overrideArc default destructor.Definition TArc.cxx:64; TArc::TArcTArc()Arc default constructor.Definition TArc.cxx:32; TArc::DrawArcvirtual TArc * DrawArc(Double_t x1, Double_t y1, Double_t radius, Double_t phimin=0, Double_t phimax=360, Option_t *option="""")Draw this arc with new coordinates.Definition TArc.cxx:79; TArc::Copyvoid Copy(TObject &arc) const overrideCopy this arc to arc.Definition TArc.cxx:71; TArc::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TArc.cxx:92; TEllipseDraw Ellipses.Definition TEllipse.h:23; TObjectMother of all ROOT objects.Definition TObject.h:41; double. graf2dgrafincTArc.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TArc_8h_source.html:2640,Guid,Guide,2640,doc/master/TArc_8h_source.html,https://root.cern,https://root.cern/doc/master/TArc_8h_source.html,1,['Guid'],['Guide']
Usability,"/////////////; 2490/// Update canvas pad buffers.; 2491 ; 2492void TCanvas::Update(); 2493{; 2494 fUpdated = kTRUE;; 2495 ; 2496 if (fUpdating) return;; 2497 ; 2498 if (fPixmapID == -1) return;; 2499 ; 2500 static const union CastFromFuncToVoidPtr_t {; 2501 CastFromFuncToVoidPtr_t(): fFuncPtr(ROOT_TCanvas_Update) {}; 2502 void (*fFuncPtr)(void*);; 2503 void* fVoidPtr;; 2504 } castFromFuncToVoidPtr;; 2505 ; 2506 if (gThreadXAR) {; 2507 void *arr[3];; 2508 arr[1] = this;; 2509 arr[2] = castFromFuncToVoidPtr.fVoidPtr;; 2510 if ((*gThreadXAR)(""CUPD"", 3, arr, nullptr)) return;; 2511 }; 2512 ; 2513 if (!fCanvasImp) return;; 2514 ; 2515 if (!gVirtualX->IsCmdThread()) {; 2516 // Why do we have this (which uses the interpreter to funnel the Update(); 2517 // through the main thread) when the gThreadXAR mechanism does seemingly; 2518 // the same?; 2519 gInterpreter->Execute(this, IsA(), ""Update"", """");; 2520 return;; 2521 }; 2522 ; 2523 R__LOCKGUARD(gROOTMutex);; 2524 ; 2525 fUpdating = kTRUE;; 2526 ; 2527 if (!fCanvasImp->PerformUpdate(kFALSE)) {; 2528 ; 2529 if (!IsBatch()) FeedbackMode(kFALSE); // Goto double buffer mode; 2530 ; 2531 if (!UseGL() || fGLDevice == -1) PaintModified(); // Repaint all modified pad's; 2532 ; 2533 Flush(); // Copy all pad pixmaps to the screen; 2534 ; 2535 SetCursor(kCross);; 2536 }; 2537 ; 2538 fUpdating = kFALSE;; 2539}; 2540 ; 2541////////////////////////////////////////////////////////////////////////////////; 2542/// Asynchronous pad update.; 2543/// In case of web-based canvas triggers update of the canvas on the client side,; 2544/// but does not wait that real update is completed. Avoids blocking of caller thread.; 2545/// Have to be used if called from other web-based widget to avoid logical dead-locks.; 2546/// In case of normal canvas just canvas->Update() is performed.; 2547 ; 2548void TCanvas::UpdateAsync(); 2549{; 2550 fUpdated = kTRUE;; 2551 ; 2552 if (IsWeb()); 2553 fCanvasImp->PerformUpdate(kTRUE);; 2554 else; 2555 Update();; 2556",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:81943,Feedback,FeedbackMode,81943,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Feedback'],['FeedbackMode']
Usability,"//////; 733/// Remove all primitives from the canvas.; 734/// If option ""D"" is specified, direct sub-pads are cleared but not deleted.; 735/// This option is not recursive, i.e. pads in direct sub-pads are deleted.; 736 ; 737void TCanvas::Clear(Option_t *option); 738{; 739 if (fCanvasID == -1) return;; 740 ; 741 R__LOCKGUARD(gROOTMutex);; 742 ; 743 TString opt = option;; 744 opt.ToLower();; 745 if (opt.Contains(""d"")) {; 746 // clear subpads, but do not delete pads in case the canvas; 747 // has been divided (note: option ""D"" is propagated so could cause; 748 // conflicts for primitives using option ""D"" for something else); 749 if (fPrimitives) {; 750 TIter next(fPrimitives);; 751 TObject *obj;; 752 while ((obj=next())) {; 753 obj->Clear(option);; 754 }; 755 }; 756 } else {; 757 //default, clear everything in the canvas. Subpads are deleted; 758 TPad::Clear(option); //Remove primitives from pad; 759 }; 760 ; 761 fSelected = nullptr;; 762 fClickSelected = nullptr;; 763 fSelectedPad = nullptr;; 764 fClickSelectedPad = nullptr;; 765}; 766 ; 767////////////////////////////////////////////////////////////////////////////////; 768/// Emit pad Cleared signal.; 769 ; 770void TCanvas::Cleared(TVirtualPad *pad); 771{; 772 Emit(""Cleared(TVirtualPad*)"", (Longptr_t)pad);; 773}; 774 ; 775////////////////////////////////////////////////////////////////////////////////; 776/// Emit Closed signal.; 777 ; 778void TCanvas::Closed(); 779{; 780 Emit(""Closed()"");; 781}; 782 ; 783////////////////////////////////////////////////////////////////////////////////; 784/// Close canvas.; 785///; 786/// Delete window/pads data structure; 787 ; 788void TCanvas::Close(Option_t *option); 789{; 790 auto padsave = gPad;; 791 TCanvas *cansave = padsave ? padsave->GetCanvas() : nullptr;; 792 ; 793 if (fCanvasID != -1) {; 794 ; 795 if (!gROOT->IsLineProcessing() && !gVirtualX->IsCmdThread()) {; 796 gInterpreter->Execute(this, IsA(), ""Close"", option);; 797 return;; 798 }; 799 ; 800 R__LOCKGUARD(gROOTMutex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:24734,Clear,Clear,24734,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,2,['Clear'],"['Clear', 'Cleared']"
Usability,"///; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ; 470 fSelectedStack.clear();; 471 ; 472 BuildDescription(nullptr, fDrawVolume);; 473}; 474 ; 475/////////////////////////////////////////////////////////////////////; 476/// Clear geometry description; 477 ; 478void RGeomDescription::ClearDescription(); 479{; 480 TLockGuard lock(fMutex);; 481 ; 482 fDesc.clear();; 483 fNodes.clear();; 484 fSortMap.clear();; 485 ClearDrawData();; 486 fDrawIdCut = 0;; 487 fDrawVolume = nullptr;; 488 fSelectedStack.clear();; 489}; 490 ; 491/////////////////////////////////////////////////////////////////////; 492/// Build geometry description; 493 ; 494void RGeomDescription::BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume); 495{; 496 // vector to remember numbers; 497 std::vector<int> numbers;; 498 int offset = 1000000000;; 499 ; 500 // try to build flat list of all nodes; 501 TGeoNode *snode = topnode;; 502 TGeoIterator iter(topvolume);; 503 do {; 504 if (!snode) {; 505 numbers.emplace_back(offset);; 506 fNodes.emplace_back(nullptr);; 507 } else if (snode->GetNumber() >= offset) {; 508 // artificial offset already applied, used as identifier; 509 iter.Skip(); // no need to look inside; 510 } else {; 511 numbers.emplace_back(snode->GetNumber());; 512 snode->SetNumber(offset + fNodes.size()); // use id with shift 1e9; 513 fNodes.emplace_back(snode);; 514 }; 515 } while ((snode = iter()) != nullptr);; 516 ; 517 fDesc.reserve(fNodes.size());; 518 fSortMap.reserve(fNodes.size());; 519 ; 520 // array for sorting; 521 std::vector<RGeomNode *> sortarr;; 522 sortarr.reserve(fNodes.size());; 523 ; 524 // create vector of desc and childs; 525 int cnt = 0;; 526 for (auto node : fNodes) {; 527 ; 528 fDesc.emplace_back(node ? node->GetN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:12642,clear,clear,12642,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"/10000.);; c1->Modified();; c1->Update();; }; }; slider->SetRange(0., 1.);; c1->Modified();; gBenchmark->Show(""hsum"");; }; mainint main()Definition Prototype.cxx:12; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; kUPDATE@ kUPDATEDefinition TFitParametersDialog.cxx:46; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::Landauvirtual Double_t Landau(Double_t mean=0, Double_t sigma=1)Generate a random number following a Landau distribution with location parameter mu and scale paramet...Definition TRandom.cxx:381; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; TSlider::SetRangevirtual void SetRange(Double_t xmin=0, Double_t xmax=1)Set Slider range in [0,1].Definition TSlider.cxx:183; c1return c1Definition legend1.C:41; hsumDefinition hsum.py:1; AuthorRene Brun ; Definition in file hsum.C. tutorialshisthsum.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsum_8C.html:3569,Guid,Guide,3569,doc/master/hsum_8C.html,https://root.cern,https://root.cern/doc/master/hsum_8C.html,1,['Guid'],['Guide']
Usability,"/2]. virtual void TVirtualPerfStats::SetLoadedMiss ; (; TBranch * ; b, . size_t ; basketNumber . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SetMissed() [1/2]. virtual void TVirtualPerfStats::SetMissed ; (; size_t ; bi, . size_t ; basketNumber . ). pure virtual . Implemented in TTreePerfStats, and TPerfStats. ◆ SetMissed() [2/2]. virtual void TVirtualPerfStats::SetMissed ; (; TBranch * ; b, . size_t ; basketNumber . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SetNumEvents(). virtual void TVirtualPerfStats::SetNumEvents ; (; Long64_t ; num). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SetUsed() [1/2]. virtual void TVirtualPerfStats::SetUsed ; (; size_t ; bi, . size_t ; basketNumber . ). pure virtual . Implemented in TTreePerfStats, and TPerfStats. ◆ SetUsed() [2/2]. virtual void TVirtualPerfStats::SetUsed ; (; TBranch * ; b, . size_t ; basketNumber . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SimpleEvent(). virtual void TVirtualPerfStats::SimpleEvent ; (; EEventType ; type). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ Streamer(). void TVirtualPerfStats::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualPerfStats::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file TVirtualPerfStats.h. ◆ UnzipEvent(). virtual void TVirtualPerfStats::UnzipEvent ; (; TObject * ; tree, . Long64_t ; pos, . Double_t ; start, . Int_t ; complen, . Int_t ; objlen . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ UpdateBranchIndices(). virtual void TVirtualPerfStats::UpdateBranchIndices ; (; TObjArray * ; branches). pure virtual . Implemented in TPerfStats, and TTreePerfStats. Friends And Related Symbol Documentation. ◆ TChain. friend class TChain. friend . Definition at line 35 of file TVirtualPerfStats.h. Libraries f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPerfStats.html:17273,Simpl,SimpleEvent,17273,doc/master/classTVirtualPerfStats.html,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,"/; 1395/// Draw class inheritance tree of the class to which obj belongs.; 1396///; 1397/// If a class B inherits from a class A, description of B is drawn; 1398/// on the right side of description of A.; 1399///; 1400/// Member functions overridden by B are shown in class A with a blue line; 1401/// crossing-out the corresponding member function.; 1402 ; 1403void TPad::DrawClassObject(const TObject *classobj, Option_t *option); 1404{; 1405 if (!classobj) return;; 1406 char dname[256];; 1407 const Int_t kMAXLEVELS = 10;; 1408 TClass *clevel[kMAXLEVELS], *cl, *cll;; 1409 TBaseClass *base, *cinherit;; 1410 TText *ptext = nullptr;; 1411 TString opt=option;; 1412 Double_t x,y,dy,y1,v1,v2,dv;; 1413 Int_t nd,nf,nc,nkd,nkf,i,j;; 1414 TPaveText *pt;; 1415 Int_t maxlev = 4;; 1416 if (opt.Contains(""2"")) maxlev = 2;; 1417 if (opt.Contains(""3"")) maxlev = 3;; 1418 if (opt.Contains(""5"")) maxlev = 5;; 1419 if (opt.Contains(""6"")) maxlev = 6;; 1420 if (opt.Contains(""7"")) maxlev = 7;; 1421 ; 1422 // Clear and Set Pad range; 1423 Double_t xpad = 20.5;; 1424 Double_t ypad = 27.5;; 1425 Clear();; 1426 Range(0,0,xpad,ypad);; 1427 ; 1428 // Find number of levels; 1429 Int_t nlevel = 0;; 1430 TClass *obj = (TClass*)classobj;; 1431 clevel[nlevel] = obj;; 1432 TList *lbase = obj->GetListOfBases();; 1433 while(lbase) {; 1434 base = (TBaseClass*)lbase->First();; 1435 if (!base) break;; 1436 if (!base->GetClassPointer()) break;; 1437 nlevel++;; 1438 clevel[nlevel] = base->GetClassPointer();; 1439 lbase = clevel[nlevel]->GetListOfBases();; 1440 if (nlevel >= maxlev-1) break;; 1441 }; 1442 Int_t maxelem = 0;; 1443 Int_t ncdraw = 0;; 1444 Int_t ilevel, nelem;; 1445 for (ilevel=nlevel;ilevel>=0;ilevel--) {; 1446 cl = clevel[ilevel];; 1447 nelem = cl->GetNdata() + cl->GetNmethods();; 1448 if (nelem > maxelem) maxelem = nelem;; 1449 nc = (nelem/50) + 1;; 1450 ncdraw += nc;; 1451 }; 1452 ; 1453 Double_t tsizcm = 0.40;; 1454 Double_t x1 = 0.25;; 1455 Double_t x2 = 0;; 1456 Double_t dx = 3.5;; 1457 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:44695,Clear,Clear,44695,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Clear'],['Clear']
Usability,"/; 189/// Add a new Text line to this pavetext at given coordinates.; 190 ; 191TText *TPaveText::AddText(Double_t x1, Double_t y1, const char *text); 192{; 193 TLatex *newtext = new TLatex(x1,y1,text);; 194 newtext->SetTextAlign(0);; 195 newtext->SetTextColor(0);; 196 newtext->SetTextFont(0);; 197 newtext->SetTextSize(0);; 198 Int_t nch = text ? strlen(text) : 0;; 199 if (nch > fLongest) fLongest = nch;; 200 ; 201 if (!fLines) fLines = new TList;; 202 fLines->Add(newtext);; 203 return newtext;; 204}; 205 ; 206////////////////////////////////////////////////////////////////////////////////; 207/// Add a new Text line to this pavetext.; 208 ; 209TText *TPaveText::AddText(const char *text); 210{; 211 return AddText(0,0,text);; 212}; 213 ; 214////////////////////////////////////////////////////////////////////////////////; 215/// Clear all lines in this pavetext.; 216 ; 217void TPaveText::Clear(Option_t *); 218{; 219 if (!fLines) return;; 220 fLines->Delete();; 221 fLongest = 0;; 222}; 223 ; 224////////////////////////////////////////////////////////////////////////////////; 225/// Delete text at the mouse position.; 226 ; 227void TPaveText::DeleteText(); 228{; 229 if (!gPad->IsEditable()) return;; 230 if (!fLines) return;; 231 Double_t ymouse, yobj;; 232 TObject *obj = GetObject(ymouse, yobj); //get object pointed by the mouse; 233 if (!obj) return;; 234 if (!obj->InheritsFrom(TText::Class())) return;; 235 fLines->Remove(obj);; 236 delete obj;; 237}; 238 ; 239////////////////////////////////////////////////////////////////////////////////; 240/// Draw this pavetext with its current attributes.; 241 ; 242void TPaveText::Draw(Option_t *option); 243{; 244 Option_t *opt;; 245 if (option && strlen(option)) opt = option;; 246 else opt = GetOption();; 247 ; 248 AppendPad(opt);; 249}; 250 ; 251////////////////////////////////////////////////////////////////////////////////; 252/// Draw lines in filename in this pavetext.; 253 ; 254void TPaveText::DrawFile(const char *filename,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveText_8cxx_source.html:7140,Clear,Clear,7140,doc/master/TPaveText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPaveText_8cxx_source.html,1,['Clear'],['Clear']
Usability,"/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Github ssh key. Using Github with ssh keys is preferred, as it's much easier to use. Here is how to set it up:; 1. Create an ssh key; Run; ssh-keygen -t rsa -b 4096 -C ""your_email@example.com"" -f ~/.ssh/github_id_rsa. The email address is for your convenience, it doesn't really matter what you put there; you can even use this to state the name of the computer that will use that key.; You can use a passphrase - but even without it's sufficiently safe, because only you have the secret key file! But please enabling Two Factor Authentication!; 2. Add the key to Github; Log in to https://github.com. In the top right corner, in a drop-down menu, click ""Settings"". Select ""SSH and GPG keys"" from the menu on the left. Click ""New SSH key"", add something as a title and copy the output of; cat ~/.ssh/github_id_rsa.pub. into the ""Key"" text box.; 3. Guide ssh to your key; Edit (or create) ~/.ssh/config and enter the following lines:; Host github.com; User git; PreferredAuthentications publickey; IdentityFile ~/.ssh/github_id_rsa. 4. Check; ssh -T git@github.com. should print; Hi UserName! You've successfully authenticated, but GitHub does not provide shell access. References. Create an ssh key; Add the key to Github; Check. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/github-ssh-key.html:2724,Guid,Guide,2724,d/github-ssh-key.html,https://root.cern,https://root.cern/d/github-ssh-key.html,1,['Guid'],['Guide']
Usability,"/EventSelector.C; Preparation; Now quit and restart ROOT (to make sure everybody starts from the same point). Then open the file again:; root[0] TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");. Processing a Selector on a Tree; To apply this selector on the tree you do not call the selector directly; instead, the selector is passed to the tree which then runs it (see the documentation of TTree::Process()):; root[1] EventTree->Process(""EventSelector.C""). As you can see, nothing happens because our selector is empty. So lets see what we can do with this selector.; Editing the Selector Skeleton; Open the downloaded selector file (EventSelector.C) in a text editor, e.g. with vi, emacs, wordpad, Eclipse... At the beginning of the file is the EventSelector class definition with the data members declaration etc. This is the place where to add new member definitions, e.g. TH1 *fMyHist;. Then come the function implementations.; Creating a Data Member; Lets start with something simple: count the number of events in our tree. To do so, we need to create a data member of type int or Int_t, to store (increment) the event number. Lets call it fNumberOfEvents. Add its declaration in the class definition, and initialize it to 0 in the constructor:; class EventSelector : public TSelector {; public :; // Variables used to store the data; Int_t fNumberOfEvents; // Total number of events. EventSelector(TTree * = 0): fNumberOfEvents(0) { }; virtual ~EventSelector() { }. virtual void Init(TTree *tree);; ... The code : fNumberOfEvents(0) after the constructor is another way of initializing a data member. Then we have to count the total number of entries (events in our case) in the tree. This has to be done in TSelector::Process(Long64_t entry). We will print also the current entry number, to see what's happening:; Bool_t EventSelector::Process(Long64_t entry); {; // ... // print some information about the current entry; printf(""Processing Entry number %ld\n"", entry);; /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:3532,simpl,simple,3532,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,1,['simpl'],['simple']
Usability,"/FAQ.html; // a simple network: 2 inputs, 10 hidden and 1 normalized; // output neuron; TMultiLayerPerceptron network(""r,z:10:@Br"",tree);; Expressions are evaluated as for TTree::Draw(). Input and outputs are taken from the TTree associated with the network. This TTree can be given as argument of the constructor or defined later with TMultiLayerPerceptron::SetData(). Events can also be weighted. The weight expression can be given in the constructor or set later with the method SetWeight() of the class TMultiLayerPerceptron. Two datasets must be defined before learning the network: a training dataset that is used when minimizing the error, and a test dataset that will avoid bias. Those two datasets can be built aside and then given to the network, or can be built from a standard expression. By default, half of the events are put in both datasets.; // a more complex 4:8:1 network; // the ptsumf branch is used as weigh;; // default event lists are explicit; TMultiLayerPerceptron network(""m,pt,acol,acopl:8:type"",""pt"",tree,; ""Entry$%2"",""Entry$/2"");; The method TMultiLayerPerceptron::SetLearningMethod() defines the learning method. Learning methods are:; TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS // default; The training can start with TMultiLayerPerceptron::Train(Int_t nepoch,Option_t* options). The first argument is the number of epochs while option is a string that can contain “text” (simple text output), “graph” (evaluating graphical training curves), “update = X” (step for the text/graph output update) or “+” (will skip the randomization and start from the previous values). All combinations are available.; network.Train(1000,""text,graph,update=10""); // full output every; // 10 epochs; network.Train(100,""text,+""); // 100 more epochs; //starts with existing weights; The weights can be saved to a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:236581,learn,learning,236581,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learning']
Usability,"/function '=' must precede to argument value.; Example: TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; undo method can be same as redo one. In that case ""undo"" can parameter be omitted.; Example: TQCommand(gPad, ""SetFillStyle(Style_t)"");. Definition at line 199 of file TQCommand.cxx. ◆ TQCommand() [3/3]. TQCommand::TQCommand ; (; const TQCommand & ; com). Copy constructor. ; Definition at line 209 of file TQCommand.cxx. ◆ ~TQCommand(). TQCommand::~TQCommand ; (; ). virtual . dtor. ; Definition at line 249 of file TQCommand.cxx. Member Function Documentation. ◆ Add() [1/2]. void TQCommand::Add ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TList.; Reimplemented in TQUndoManager.; Definition at line 91 of file TQCommand.h. ◆ Add() [2/2]. void TQCommand::Add ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add command to the list of merged commands. ; Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command . Reimplemented from TList.; Reimplemented in TQUndoManager.; Definition at line 360 of file TQCommand.cxx. ◆ CanCompress(). Bool_t TQCommand::CanCompress ; (; TQCommand * ; c); const. virtual . By default, commands can be compressed if they are: . equal; setter commands. More complicated commands might want to override this function. ; Definition at line 387 of file TQCommand.cxx. ◆ CanMerge(). Bool_t TQCommand::CanMerge ; (; TQCommand * ; c); const. virtual . Two commands can be merged if they can be composed into a single command (Macro command). ; To allow merging commands user might override this function. ; Definition at line 314 of file TQCommand.cxx. ◆ CanRedo(). Bool_t TQCommand::CanRedo ; (; ); const. virtual . Returns kTRUE if Redo action is possible, kFALSE if it's not. ; By default, only single sequential redo action is possible. ; Reimplemented in TQUndoManager.; Definition at line 57",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:33990,undo,undo,33990,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"/somefile.root"");. You can list the objects inside the file using .ls:; root [1] .ls; TFile** hsimple.root Demo ROOT file with histograms; TFile* hsimple.root Demo ROOT file with histograms; KEY: TH1F hpx;1 This is the px distribution; KEY: TH2F hpxpy;1 py vs px; KEY: TProfile hprof;1 Profile of pz versus px; KEY: TNtuple ntuple;1 Demo ntuple. You can access objects inside the files by their names, either by using this name as a variable on the prompt:; root [2] hpx->Draw();. In regular code you should use TFile::GetObject():; root [3] TH1* readThis = 0;; root [4] file->GetObject(""hpx"", readThis);. Now let's try this out: get the TTree called ""MyTree"" from a file located at http://root.cern.ch/root/files/tutorials/mockupx.root Note that you don't need to download it with your browser: you just specify the http:// location as an argument to TFile::Open(). Once you have the TTree object, call Print() on it to see its structure.; . ‹ 0. Setting up ROOT; up; 2. Running code in ROOT ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/1-extracting-object-tfile.html:3469,Guid,Guides,3469,d/1-extracting-object-tfile.html,https://root.cern,https://root.cern/d/1-extracting-object-tfile.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"0 ; 4891 std::string scopename(demangled_name_c);; 4892 free(demangled_name_c);; 4893 ; 4894 //; 4895 // Separate out the class or namespace part of the; 4896 // function name.; 4897 //; 4898 std::string dataname;; 4899 ; 4900 if (!strncmp(scopename.c_str(), ""typeinfo for "", sizeof(""typeinfo for "")-1)) {; 4901 scopename.erase(0, sizeof(""typeinfo for "")-1);; 4902 } else if (!strncmp(scopename.c_str(), ""vtable for "", sizeof(""vtable for "")-1)) {; 4903 scopename.erase(0, sizeof(""vtable for "")-1);; 4904 } else {; 4905 // See if it is a function; 4906 std::string::size_type pos = scopename.rfind('(');; 4907 if (pos != std::string::npos) {; 4908 return nullptr;; 4909 }; 4910 // Separate the scope and member name; 4911 pos = scopename.rfind(':');; 4912 if (pos != std::string::npos) {; 4913 if ((pos != 0) && (scopename[pos-1] == ':')) {; 4914 dataname = scopename.substr(pos+1);; 4915 scopename.erase(pos-1);; 4916 }; 4917 } else {; 4918 scopename.clear();; 4919 dataname = scopename;; 4920 }; 4921 }; 4922 //fprintf(stderr, ""name: '%s'\n"", name.c_str());; 4923 // Now we have the class or namespace name, so do the lookup.; 4924 ; 4925 ; 4926 DeclId_t d;; 4927 if (scopename.size()) {; 4928 TClingClassInfo cl(GetInterpreterImpl(), scopename.c_str());; 4929 d = cl.GetDataMember(dataname.c_str());; 4930 }; 4931 else {; 4932 TClingClassInfo gcl(GetInterpreterImpl());; 4933 d = gcl.GetDataMember(dataname.c_str());; 4934 }; 4935 return d;; 4936}; 4937 ; 4938////////////////////////////////////////////////////////////////////////////////; 4939/// NOT IMPLEMENTED.; 4940 ; 4941TInterpreter::DeclId_t TCling::GetDataMemberWithValue(const void *ptrvalue) const; 4942{; 4943 Error(""GetDataMemberWithValue()"", ""not implemented"");; 4944 return nullptr;; 4945}; 4946 ; 4947////////////////////////////////////////////////////////////////////////////////; 4948/// Return pointer to cling DeclId for a data member with a given name.; 4949 ; 4950TInterpreter::DeclId_t TCling::GetDataMemberAtAddr(const vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:191307,clear,clear,191307,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['clear'],['clear']
Usability,"0 for (unsigned n = 0; n < sz; ++n); 2051 if (stack[n] != item.stack[n]) {; 2052 match = false;; 2053 break;; 2054 }; 2055 ; 2056 if (match); 2057 return item.visible ? 1 : 0;; 2058 }; 2059 return -1;; 2060}; 2061 ; 2062/////////////////////////////////////////////////////////////////////////////////; 2063/// Reset custom visibility of physical node by path; 2064 ; 2065bool RGeomDescription::ClearPhysNodeVisibility(const std::vector<std::string> &path); 2066{; 2067 TLockGuard lock(fMutex);; 2068 ; 2069 RGeomBrowserIter giter(*this);; 2070 ; 2071 if (!giter.Navigate(path)); 2072 return false;; 2073 ; 2074 auto stack = MakeStackByIds(giter.CurrentIds());; 2075 ; 2076 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 2077 if (compare_stacks(iter->stack, stack) == 0) {; 2078 fVisibility.erase(iter);; 2079 ClearDrawData();; 2080 return true;; 2081 }; 2082 ; 2083 return false;; 2084}; 2085 ; 2086/////////////////////////////////////////////////////////////////////////////////; 2087/// Reset all custom visibility settings; 2088 ; 2089bool RGeomDescription::ClearAllPhysVisibility(); 2090{; 2091 TLockGuard lock(fMutex);; 2092 ; 2093 if (fVisibility.empty()); 2094 return false;; 2095 ; 2096 fVisibility.clear();; 2097 ClearDrawData();; 2098 return true;; 2099}; 2100 ; 2101/////////////////////////////////////////////////////////////////////////////////; 2102/// Change configuration by client; 2103/// Returns true if any parameter was really changed; 2104 ; 2105bool RGeomDescription::ChangeConfiguration(const std::string &json); 2106{; 2107 auto cfg = TBufferJSON::FromJSON<RGeomConfig>(json);; 2108 if (!cfg); 2109 return false;; 2110 ; 2111 TLockGuard lock(fMutex);; 2112 ; 2113 auto json1 = TBufferJSON::ToJSON(cfg.get());; 2114 auto json2 = TBufferJSON::ToJSON(&fCfg);; 2115 ; 2116 if (json1 == json2); 2117 return false;; 2118 ; 2119 fCfg = *cfg; // use assign; 2120 ; 2121 ClearDrawData();; 2122 ; 2123 return true;; 2124}; 2125 ; 2126/////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:62804,Clear,ClearDrawData,62804,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,4,['Clear'],"['ClearAllPhysVisibility', 'ClearDrawData']"
Usability,"0 of file TBrowser.h. ◆ SetSelected(). void TBrowser::SetSelected ; (; TObject * ; clickedObject). Assign the last selected object. ; Definition at line 429 of file TBrowser.cxx. ◆ SetStatusText(). void TBrowser::SetStatusText ; (; const char * ; txt, . Int_t ; col . ). inline . Definition at line 113 of file TBrowser.h. ◆ Show(). void TBrowser::Show ; (; ). inline . Definition at line 105 of file TBrowser.h. ◆ StartEmbedding(). void TBrowser::StartEmbedding ; (; Int_t ; pos, . Int_t ; subpos . ). inline . Definition at line 116 of file TBrowser.h. ◆ StopEmbedding(). void TBrowser::StopEmbedding ; (; const char * ; name = """"). inline . Definition at line 119 of file TBrowser.h. ◆ Streamer(). void TBrowser::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in ROOT::Experimental::XRooFit::xRooBrowser. ◆ StreamerNVirtual(). void TBrowser::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 121 of file TBrowser.h. Member Data Documentation. ◆ fContextMenu. TContextMenu* TBrowser::fContextMenu {nullptr}. protected . Browser's timer. ; Definition at line 48 of file TBrowser.h. ◆ fImp. TBrowserImp* TBrowser::fImp {nullptr}. protected . Definition at line 46 of file TBrowser.h. ◆ fLastSelectedObject. TObject* TBrowser::fLastSelectedObject {nullptr}. private . Definition at line 40 of file TBrowser.h. ◆ fNeedRefresh. Bool_t TBrowser::fNeedRefresh {kFALSE}. protected . Context menu pointer. ; Definition at line 49 of file TBrowser.h. ◆ fTimer. TBrowserTimer* TBrowser::fTimer {nullptr}. protected . Window system specific browser implementation. ; Definition at line 47 of file TBrowser.h. Libraries for TBrowser:. [legend]; The documentation for this class was generated from the following files:; core/gui/inc/TBrowser.h; core/gui/src/TBrowser.cxx. TBrowser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowser.html:26903,Guid,Guide,26903,doc/master/classTBrowser.html,https://root.cern,https://root.cern/doc/master/classTBrowser.html,1,['Guid'],['Guide']
Usability,"0 of file TProfileHelper.h. ◆ ExtendAxis(). template<typename T > . T * TProfileHelper::ExtendAxis ; (; T * ; p, . Double_t ; x, . TAxis * ; axis . ). static . Definition at line 430 of file TProfileHelper.h. ◆ GetBinEffectiveEntries(). template<typename T > . Double_t TProfileHelper::GetBinEffectiveEntries ; (; T * ; p, . Int_t ; bin . ). static . Definition at line 143 of file TProfileHelper.h. ◆ GetBinError(). template<typename T > . Double_t TProfileHelper::GetBinError ; (; T * ; p, . Int_t ; bin . ). static . Definition at line 704 of file TProfileHelper.h. ◆ LabelsDeflate(). template<typename T > . void TProfileHelper::LabelsDeflate ; (; T * ; p, . Option_t * ; ax . ). static . Definition at line 560 of file TProfileHelper.h. ◆ LabelsInflate(). template<typename T > . void TProfileHelper::LabelsInflate ; (; T * ; p, . Option_t * ; ax . ). static . Definition at line 626 of file TProfileHelper.h. ◆ Merge(). template<typename T > . Long64_t TProfileHelper::Merge ; (; T * ; p, . TCollection * ; list . ). static . Definition at line 167 of file TProfileHelper.h. ◆ Scale(). template<typename T > . void TProfileHelper::Scale ; (; T * ; p, . Double_t ; c1, . Option_t * ; option . ). static . Definition at line 512 of file TProfileHelper.h. ◆ SetBinEntries(). template<typename T > . void TProfileHelper::SetBinEntries ; (; T * ; p, . Int_t ; bin, . Double_t ; w . ). static . Definition at line 768 of file TProfileHelper.h. ◆ SetErrorOption(). template<typename T > . void TProfileHelper::SetErrorOption ; (; T * ; p, . Option_t * ; opt . ). static . Definition at line 693 of file TProfileHelper.h. ◆ Sumw2(). template<typename T > . void TProfileHelper::Sumw2 ; (; T * ; p, . Bool_t ; flag . ). static . Definition at line 529 of file TProfileHelper.h. The documentation for this class was generated from the following file:; hist/hist/src/TProfileHelper.h. TProfileHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfileHelper.html:3656,Guid,Guide,3656,doc/master/classTProfileHelper.html,https://root.cern,https://root.cern/doc/master/classTProfileHelper.html,1,['Guid'],['Guide']
Usability,0 of file TProofBenchTypes.h. ◆ DeclFileName(). static const char * TPBHistType::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TProofBenchTypes.h. ◆ GetName(). const char * TPBHistType::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 78 of file TProofBenchTypes.h. ◆ GetType(). EHistType TPBHistType::GetType ; (; ); const. inline . Definition at line 73 of file TProofBenchTypes.h. ◆ IsA(). TClass * TPBHistType::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 80 of file TProofBenchTypes.h. ◆ IsHist1D(). Bool_t TPBHistType::IsHist1D ; (; ); const. inline . Definition at line 74 of file TProofBenchTypes.h. ◆ IsHist2D(). Bool_t TPBHistType::IsHist2D ; (; ); const. inline . Definition at line 75 of file TProofBenchTypes.h. ◆ IsHist3D(). Bool_t TPBHistType::IsHist3D ; (; ); const. inline . Definition at line 76 of file TProofBenchTypes.h. ◆ IsHistAll(). Bool_t TPBHistType::IsHistAll ; (; ); const. inline . Definition at line 77 of file TProofBenchTypes.h. ◆ Streamer(). void TPBHistType::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPBHistType::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TProofBenchTypes.h. Member Data Documentation. ◆ fName. TString TPBHistType::fName. private . Definition at line 68 of file TProofBenchTypes.h. ◆ fType. EHistType TPBHistType::fType. private . Definition at line 67 of file TProofBenchTypes.h. proof/proofbench/inc/TProofBenchTypes.h. TPBHistType. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPBHistType.html:13173,Guid,Guide,13173,doc/master/classTPBHistType.html,https://root.cern,https://root.cern/doc/master/classTPBHistType.html,1,['Guid'],['Guide']
Usability,0 of file TStreamerElement.h. ◆ GetReadFunc(). ROOT::TSchemaRule::ReadFuncPtr_t TStreamerArtificial::GetReadFunc ; (; ). Definition at line 2101 of file TStreamerElement.cxx. ◆ GetReadRawFunc(). ROOT::TSchemaRule::ReadRawFuncPtr_t TStreamerArtificial::GetReadRawFunc ; (; ). Definition at line 2108 of file TStreamerElement.cxx. ◆ IsA(). TClass * TStreamerArtificial::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 470 of file TStreamerElement.h. ◆ operator=(). TStreamerArtificial & TStreamerArtificial::operator= ; (; const TStreamerArtificial & ; ). privatedelete . ◆ SetReadFunc(). void TStreamerArtificial::SetReadFunc ; (; ROOT::TSchemaRule::ReadFuncPtr_t ; val). inline . Definition at line 464 of file TStreamerElement.h. ◆ SetReadRawFunc(). void TStreamerArtificial::SetReadRawFunc ; (; ROOT::TSchemaRule::ReadRawFuncPtr_t ; val). inline . Definition at line 465 of file TStreamerElement.h. ◆ Streamer(). void TStreamerArtificial::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed.; Definition at line 2093 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerArtificial::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 470 of file TStreamerElement.h. Member Data Documentation. ◆ fReadFunc. ROOT::TSchemaRule::ReadFuncPtr_t TStreamerArtificial::fReadFunc. protected . Definition at line 455 of file TStreamerElement.h. ◆ fReadRawFunc. ROOT::TSchemaRule::ReadRawFuncPtr_t TStreamerArtificial::fReadRawFunc. protected . Definition at line 456 of file TStreamerElement.h. Libraries for TStreamerArtificial:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerArtificial. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerArtificial.html:20181,Guid,Guide,20181,doc/master/classTStreamerArtificial.html,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html,1,['Guid'],['Guide']
Usability,"0 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log10( double( Dim() ) );; 325 int wi = int(ndigits)+1;; 326 const double * xtmp = fSolver->X();; 327 const double * ftmp = fSolver->FVal();; 328 os << ""Root values = "";; 329 for (unsigned int i = 0; i< Dim(); ++i); 330 os << ""x["" << std::setw(wi) << i << ""] = "" << std::setw(12) << xtmp[i] << "" "";; 331 os << std::endl;; 332 os << ""Function values = "";; 333 for (unsigned int i = 0; i< Dim(); ++i); 334 os << ""f["" << std::setw(wi) << i << ""] = "" << std::setw(12) << ftmp[i] << "" "";; 335 os << std::endl;; 336}; 337 ; 338 ; 339 ; 340} // namespace Math; 341} // namespace ROOT; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; MATH_INFO_MSGVAL#define MATH_INFO_MSGVAL(loc, txt, x)Definition Error.h:101; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; GSLMultiRootFinder.h; GSLMultiRootSolver.h; IFunction.h; f#define f(i)Definition RSha256.hxx:104; GSL_SUCCESS#define GSL_SUCCESSDefinition RooAdaptiveGaussKronrodIntegrator1D.cxx:379; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:12180,simpl,simply,12180,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,1,['simpl'],['simply']
Usability,"0 wires and 1000 chamber volumes? No, we will just need to replicate the ones that we have already created.; chamber->AddNode(wire_co,1,new TGeoTranslation(0.2,0,0));; chamber->AddNode(wire_co,2,new TGeoTranslation(0.2,0,0));; The 2 nodes that we have created inside chamber will both point to a wire_co object, but will be completely distinct: WIRE_CO_1 and WIRE_CO_2. We will want now to place symmetrically 1000 chambers on a pad, following a pattern of 20 rows and 50 columns. One way to do this will be to replicate our chamber by positioning it 1000 times in different positions of the pad. Unfortunately, this is far from being the optimal way of doing what we want. Imagine that we would like to find out which of the 1000 chambers is containing a (x,y,z) point defined in the pad reference. You will never have to do that, since the modeller will take care of it for you, but let’s guess what it has to do. The most simple algorithm will just loop over all daughters, convert the point from mother to local reference and check if the current chamber contains the point or not. This might be efficient for pads with few chambers, but definitely not for 1000. Fortunately the modeller is smarter than that and creates for each volume some optimization structures called voxels to minimize the penalty having too many daughters, but if you have 100 pads like this in your geometry you will anyway lose a lot in your tracking performance. The way out when volumes can be arranged according to simple patterns is the usage of divisions. We will describe them in detail later on. Let’s think now at a different situation: instead of 1000 chambers of the same type, we may have several types of chambers. Let’s say all chambers are cylindrical and have a wire inside, but their dimensions are different. However, we would like all to be represented by a single volume family, since they have the same properties.; 18.4.2.8 Volume Families; A volume family is represented by the class TGeoVolumeMult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:950605,simpl,simple,950605,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Int_t fCount;  number of updates contributing to error field ;  ; Double_t fDEDw;  sum of deltas ;  ; Double_t fDelta;  local error field ;  ; Double_t fLearnRate;  learning rate parameter ;  ; TNeuron * fPostNeuron;  pointer to post-neuron ;  ; TNeuron * fPreNeuron;  pointer to pre-neuron ;  ; Double_t fWeight;  weight of the synapse ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TSynapse.html:9942,learn,learning,9942,doc/master/classTMVA_1_1TSynapse.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TSynapse.html,1,['learn'],['learning']
Usability,"0); TDecompQRH(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb); virtual~TDecompQRH(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual Double_tTDecompBase::Condition(); virtual voidTObject::Copy(TObject& object) const; virtual Bool_tDecompose(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDet(Double_t& d1, Double_t& d2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompQRH.html:1419,Clear,Clear,1419,root/html528/TDecompQRH.html,https://root.cern,https://root.cern/root/html528/TDecompQRH.html,4,['Clear'],['Clear']
Usability,"0); TDecompSVD(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb); virtual~TDecompSVD(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual Double_tCondition(); virtual voidTObject::Copy(TObject& object) const; virtual Bool_tDecompose(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompSVD.html:1689,Clear,Clear,1689,root/html528/TDecompSVD.html,https://root.cern,https://root.cern/root/html528/TDecompSVD.html,4,['Clear'],['Clear']
Usability,"0); virtual voidAddWithBurnIn(RooStats::MarkovChain& otherChain, Int_t burnIn = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__MarkovChain.html:1112,Clear,Clear,1112,root/html534/RooStats__MarkovChain.html,https://root.cern,https://root.cern/root/html534/RooStats__MarkovChain.html,1,['Clear'],['Clear']
Usability,"0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MarkovChain.html:949,Clear,Clear,949,root/html526/RooStats__MarkovChain.html,https://root.cern,https://root.cern/root/html526/RooStats__MarkovChain.html,4,['Clear'],['Clear']
Usability,0); virtual~TDecompBK(); voidTObject::AbstractMethod(co,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompBK.html:2214,Clear,Clear,2214,root/html528/TDecompBK.html,https://root.cern,https://root.cern/root/html528/TDecompBK.html,4,['Clear'],['Clear']
Usability,"0); virtual~TDecompChol(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual Double_tTDecompBase::Condition(); virtual voidTObject::Copy(TObject& object) const; virtual Bool_tDecompose(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDet(Double_t& d1, Double_t& d2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompChol.html:1131,Clear,Clear,1131,root/html528/TDecompChol.html,https://root.cern,https://root.cern/root/html528/TDecompChol.html,4,['Clear'],['Clear']
Usability,"0);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,10,kBackDecreasingWindow,kBackOrder8,kTRUE,; kBackSmoothing5,,kTRUE);; for (i = 0; i < nbins; i++) d1->SetBinContent(i + 1,source[i]);; d1->SetLineColor(kRed);; d1->Draw(""SAME L"");; }. . const char* SmoothMarkov(Double_t* source, Int_t ssize, Int_t averWindow). One-dimensional markov spectrum smoothing function. This function calculates smoothed spectrum from source spectrum based on; Markov chain method. The result is placed in the array pointed by source; pointer. On successful completion it returns 0. On error it returns pointer; to the string describing error.; ; Function parameters:; ; source: pointer to the array of source spectrum; ssize: length of source array; averWindow: width of averaging smoothing window; ; The goal of this function is the suppression of the statistical fluctuations.; The algorithm is based on discrete Markov chain, which has very simple; invariant distribution:; . being defined; from the normalization condition; .; n is the length of the smoothed spectrum and; . Reference:; ; Z.K. Silagadze, A new algorithm for automatic photopeak searches.; NIM A 376 (1996), 451.; . Example 14 - script Smoothing.c; . Fig. 23 Original noisy spectrum; . Fig. 24 Smoothed spectrum m=3; . Fig. 25 Smoothed spectrum; . Fig.26 Smoothed spectrum m=10; ; Script:; ; // Example to illustrate smoothing using Markov algorithm (class TSpectrum).; // To execute this example, do; // root > .x Smoothing.C; void Smoothing() {; Int_t i;; Double_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Smoothed spectrum for m=3"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""smooth1;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas *Smooth1 = gROOT->GetListOfCanvases()->FindObject(""Smooth1"");; if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:30772,simpl,simple,30772,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,2,['simpl'],['simple']
Usability,"0, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<double> datSig (numBinsData+1, 0);; 342 std::vector<double> datBkg (numBinsData+1, 0);; 343 ; 344 double binSizeROC = (maxVal - minVal)/(double)numBinsROC;; 345 double binSizeData = (maxVal - minVal)/(double)numBins",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:12140,clear,clear,12140,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,1,['clear'],['clear']
Usability,"0, 1}, ""DNN_Value"");; ; ROOT::RDataFrame df2(""bkg_tree"", inputFile);; nslots = df2.GetNSlots();; auto h2 = df2.DefineSlot(""DNN_Value"", SofieFunctor<7, TMVA_SOFIE_Higgs_trained_model::Session>(nslots),; {""m_jj"", ""m_jjj"", ""m_lv"", ""m_jlv"", ""m_bb"", ""m_wbb"", ""m_wwbb""}); .Histo1D({""h_bkg"", """", 100, 0, 1}, ""DNN_Value"");; ; h1->SetLineColor(kRed);; h2->SetLineColor(kBlue);; ; auto c1 = new TCanvas();; gStyle->SetOptStat(0);; ; h2->DrawClone();; h1->DrawClone(""SAME"");; c1->BuildLegend();; ; }; R__ADD_INCLUDE_PATH#define R__ADD_INCLUDE_PATH(PATH)Definition Rtypes.h:497; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; SOFIEHelpers.hxx; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; TMVA::ExperimentalDefinition RModelParser_Keras.h:40; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; ; Running using 2 threads; AuthorLorenzo Moneta ; Definition in file TMVA_SOFIE_RDataFrame.C. tutorialstmvaTMVA_SOFIE_RDataFrame.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame_8C.html:3683,Guid,Guide,3683,doc/master/TMVA__SOFIE__RDataFrame_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame_8C.html,1,['Guid'],['Guide']
Usability,"0, Int_t implicit = 1); virtual~TDecompLU(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual Double_tTDecompBase::Condition(); virtual voidTObject::Copy(TObject& object) const; virtual Bool_tDecompose(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDet(Double_t& d1, Double_t& d2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompLU.html:1505,Clear,Clear,1505,root/html528/TDecompLU.html,https://root.cern,https://root.cern/root/html528/TDecompLU.html,4,['Clear'],['Clear']
Usability,"0, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser* b); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNtuple.html:3264,undo,undo,3264,root/html532/TNtuple.html,https://root.cern,https://root.cern/root/html532/TNtuple.html,4,['undo'],['undo']
Usability,"0, column name) ;  ; TArrayD * GetTabVarLengthVectorCell (Int_t rownum, Int_t colnum);  Get the variable-length array contained in a cell given by (row>=0, column name) ;  ; TClass * IsA () const override;  ; void Print (const Option_t *opt="""") const override;  Print metadata. ;  ; TH1 * ReadAsHistogram ();  Read image HDU as a histogram. ;  ; TImage * ReadAsImage (Int_t layer=0, TImagePalette *pal=nullptr);  Read image HDU as a displayable image. ;  ; TMatrixD * ReadAsMatrix (Int_t layer=0, Option_t *opt="""");  Read image HDU as a matrix. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFITSHDU.html:5155,Clear,Clear,5155,doc/master/classTFITSHDU.html,https://root.cern,https://root.cern/doc/master/classTFITSHDU.html,1,['Clear'],['Clear']
Usability,"0, const char* name = 0); virtual~RooLinTransBinning(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Double_t*array() const; virtual Double_taverageBinWidth() const; virtual Double_tbinCenter(Int_t bin) const; virtual Double_tbinHigh(Int_t bin) const; virtual Double_tbinLow(Int_t bin) const; virtual Int_tbinNumber(Double_t x) const; virtual Double_tbinWidth(Int_t bin) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsBinning*clone(const char* name = 0) const; virtual TObject*RooAbsBinning::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooLinTransBinning.html:1328,Clear,Clear,1328,root/html526/RooLinTransBinning.html,https://root.cern,https://root.cern/root/html526/RooLinTransBinning.html,5,['Clear'],['Clear']
Usability,"0,-1.5,1.5);; h1->GetXaxis()->SetTitle(""Deg"");; float myRand;; for (int i = 0; i < 360; i+=10) {; for (int j = 0; j < 100; j++) {; myRand = rng->Gaus(sin(i*3.14/180),0.2);; h1->Fill(i,myRand);; }; }; for (int i = 1; i < 7; i++) {; c1->cd(i);; char str[16];; sprintf(str,""candlex%d"",i);; TH2I * myhist = (TH2I*)h1->DrawCopy(str);; myhist->SetTitle(str);; }; ; TCanvas *c2 = new TCanvas(""c2"",""Candle Individual"",800,600);; c2->Divide(4,4);; char myopt[16][8] = {""0"",""1"",""11"",""21"",""31"",""30"",""111"",""311"",""301"",""1111"",""2321"",""12111"",""112111"",""212111"",""312111""};; for (int i = 0; i < 15; i++) {; c2->cd(i+1);; char str[16];; sprintf(str, ""candlex(%s)"",myopt[i]);; TH2I * myhist = (TH2I*)h1->DrawCopy(str);; myhist->SetTitle(str);; }; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::SetTitlevoid SetTitle(const char *title) overrideChange/set the title.Definition TH1.cxx:6718; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::DrawCopyvirtual TH1 * DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constCopy this histogram and Draw in the current pad.Definition TH1.cxx:3113; TH2I2-D histogram with an int per channel (see TH1 documentation)Definition TH2.h:225; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; c2return c2Definition legend2.C:14; AuthorGeorg Troska ; Definition in file candleplotoption.C. tutorialshistcandleplotoption.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/candleplotoption_8C.html:2396,Guid,Guide,2396,doc/master/candleplotoption_8C.html,https://root.cern,https://root.cern/doc/master/candleplotoption_8C.html,1,['Guid'],['Guide']
Usability,"0,10). Definition at line 5 of file legend1.C. ◆ leg. leg = new TLegend(0.1,0.7,0.48,0.9). Definition at line 34 of file legend1.C. ◆ n. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t n = 20. Definition at line 16 of file legend1.C. ◆ x. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h x. Definition at line 17 of file legend1.C. ◆ y. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h y. Definition at line 17 of file legend1.C. graf2dgrafdocmacroslegend1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/legend1_8C.html:4719,Guid,Guide,4719,doc/master/legend1_8C.html,https://root.cern,https://root.cern/doc/master/legend1_8C.html,1,['Guid'],['Guide']
Usability,"0,10,20);; TGeoVolume *pvol = gGeoManager->MakeBox(""PVOL"", jmed, 3,3,-1);; container1->AddNode(pvol, 1);; container2->AddNode(pvol, 1);; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; Note that the third parameter of PVOL is negative, which does not make sense as half-length on Z. This is interpreted as: when positioned, create a box replacing all invalid parameters with the corresponding dimensions of the container. This is also internally handled by the TGeoVolumeMulti class, which does not need to be instantiated by users. Dividing volumes; Volumes can be divided according a pattern. The most simple division can be done along one axis, that can be: X, Y, Z, Phi, Rxy or Rxyz. Let's take the most simple case: we would like to divide a box in N equal slices along X coordinate, representing a new volume family. Supposing we already have created the initial box, this can be done like:; TGeoVolume *slicex = box->Divide(""SLICEX"", 1, N);; N#define N; TGeoVolume::Dividevirtual TGeoVolume * Divide(const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""")Division a la G3.Definition TGeoVolume.cxx:1103; where SLICE is the name of the new family representing all slices and 1 is the slicing axis. The meaning of the axis index is the following: for all volumes having shapes like box, trd1, trd2, trap, gtra or para - 1,2,3 means X,Y,Z; for tube, tubs, cone, cons - 1 means Rxy, 2 means phi and 3 means Z; for pcon and pgon - 2 means phi and 3 means Z; for spheres 1 means R and 2 means phi. In fact, the division operation has the same effect as positioning volumes in a given",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeMulti.html:4413,simpl,simple,4413,doc/master/classTGeoVolumeMulti.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeMulti.html,1,['simpl'],['simple']
Usability,"0,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,DropConfig=0.0+0.5+0.5+0.5:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""N"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|128,TANH|128,TANH|128,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-2,Momentum=0.9,ConvergenceSteps=20,BatchSize=100,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,DropConfig=0.0+0.5+0.5+0.5"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [dataset] : Create Transformation ""N"" with events from all classes.; : ; : Transformation, Variable selection : ; : ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:7382,Learn,LearningRate,7382,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Learn'],['LearningRate']
Usability,"0. private . line color for the interval (1D) or for other contours (2D) ; Definition at line 74 of file LikelihoodIntervalPlot.h. ◆ fMaximum. double RooStats::LikelihoodIntervalPlot::fMaximum = -1. private . function maximum ; Definition at line 78 of file LikelihoodIntervalPlot.h. ◆ fNdimPlot. Int_t RooStats::LikelihoodIntervalPlot::fNdimPlot = 0. private . Definition at line 75 of file LikelihoodIntervalPlot.h. ◆ fNPoints. Int_t RooStats::LikelihoodIntervalPlot::fNPoints = 0. private . number of points used to scan the PL, default depends if 1D or 2D ; Definition at line 76 of file LikelihoodIntervalPlot.h. ◆ fParamsPlot. RooArgSet* RooStats::LikelihoodIntervalPlot::fParamsPlot = nullptr. private . Definition at line 88 of file LikelihoodIntervalPlot.h. ◆ fPlotObject. TObject* RooStats::LikelihoodIntervalPlot::fPlotObject = nullptr. private . plotted object ; Definition at line 89 of file LikelihoodIntervalPlot.h. ◆ fPrecision. double RooStats::LikelihoodIntervalPlot::fPrecision = -1. private . RooCurve precision, use default in case of -1. ; Definition at line 84 of file LikelihoodIntervalPlot.h. ◆ fXmax. double RooStats::LikelihoodIntervalPlot::fXmax = -1. private . Definition at line 81 of file LikelihoodIntervalPlot.h. ◆ fXmin. double RooStats::LikelihoodIntervalPlot::fXmin = 0. private . Definition at line 80 of file LikelihoodIntervalPlot.h. ◆ fYmax. double RooStats::LikelihoodIntervalPlot::fYmax = -1. private . Definition at line 83 of file LikelihoodIntervalPlot.h. ◆ fYmin. double RooStats::LikelihoodIntervalPlot::fYmin = 0. private . Definition at line 82 of file LikelihoodIntervalPlot.h. Libraries for RooStats::LikelihoodIntervalPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h; roofit/roostats/src/LikelihoodIntervalPlot.cxx. RooStatsLikelihoodIntervalPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html:24894,Guid,Guide,24894,doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,1,['Guid'],['Guide']
Usability,"0.01, Option_t *option=""v"");  Estimate weight of top level volume with a precision SIGMA(W)/W better than PRECISION. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:7766,Clear,Clear,7766,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['Clear'],['Clear']
Usability,"00 Hz for complex data structure. A factor of few improvement for complex data can be a difference between requiring just one machine or a small farm. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: I/O Performance . Hi ROOT User,; We have dramatically improved the I/O performance over the last two years. If you use the latest production release also for writing data you might be able to see a performance improvement of an order of magnitude compared to e.g. 5.26, both in real and CPU time! See e.g. this blog entry.; We have been comparing the performance of ROOT I/O with competitors like Google ProtoBuf; we know exactly where we spend extra time and why, e.g. for schema evolution, proper C++ type support, introspection, pointers.; On the other hand, are you sure you make use of all the performance features ROOT offers? Did you enable the tree cache (on by default for PROOF and one tree per file, off - for now, still - otherwise)? Do you only read the branches you need? I am working on a new TTree read access class that should simplify all of that considerably (and is type safe - no more void*&!); maybe I should take your comment as an invitation to speed up :-); Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: Interpreters . Hi ROOT user,; Thanks for your comments - they are excellent!; Your scenario would probably work - but we decided against it, and I believe that we have good reasons for that :-); GCCXML's future is limited; there is a re-write based on GCC's plugin mechanism, but both suffer from the same problems: we cannot influence what the GCC parser does. And reading headers, writing XML, parsing XML, writing (huge files of) C++, compiling, linking, loading - that's really, really inefficient and error prone.; Python is much simpler than C++. But it's still a horrible language in our environment, unless it's used as bash++. Not a single algorithm should be written in Python: it'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:16022,simpl,simplify,16022,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['simpl'],['simplify']
Usability,"00 void SetStep(Double_t step) { GetCurrentNavigator()->SetStep(step); }; 401 Bool_t IsCurrentOverlapping() const { return GetCurrentNavigator()->IsCurrentOverlapping(); }; 402 Bool_t IsEntering() const { return GetCurrentNavigator()->IsEntering(); }; 403 Bool_t IsExiting() const { return GetCurrentNavigator()->IsExiting(); }; 404 Bool_t IsStepEntering() const { return GetCurrentNavigator()->IsStepEntering(); }; 405 Bool_t IsStepExiting() const { return GetCurrentNavigator()->IsStepExiting(); }; 406 Bool_t IsOutside() const { return GetCurrentNavigator()->IsOutside(); }; 407 Bool_t IsOnBoundary() const { return GetCurrentNavigator()->IsOnBoundary(); }; 408 Bool_t IsNullStep() const { return GetCurrentNavigator()->IsNullStep(); }; 409 Bool_t IsActivityEnabled() const { return fActivity; }; 410 void SetOutside(Bool_t flag = kTRUE) { GetCurrentNavigator()->SetOutside(flag); }; 411 ; 412 //--- cleaning; 413 void CleanGarbage();; 414 void ClearShape(const TGeoShape *shape);; 415 void ClearTracks(); 416 {; 417 fTracks->Delete();; 418 fNtracks = 0;; 419 }; 420 void ClearNavigators();; 421 void RemoveMaterial(Int_t index);; 422 void RemoveNavigator(const TGeoNavigator *nav);; 423 void ResetUserData();; 424 ; 425 //--- utilities; 426 Int_t CountNodes(const TGeoVolume *vol = nullptr, Int_t nlevels = 10000, Int_t option = 0);; 427 void CountLevels();; 428 void ExecuteEvent(Int_t event, Int_t px, Int_t py) override;; 429 static Int_t Parse(const char *expr, TString &expr1, TString &expr2, TString &expr3);; 430 Int_t ReplaceVolume(TGeoVolume *vorig, TGeoVolume *vnew);; 431 Int_t TransformVolumeToAssembly(const char *vname);; 432 UChar_t *GetBits() { return fBits; }; 433 virtual Int_t GetByteCount(Option_t *option = nullptr);; 434 void SetAllIndex();; 435 static Int_t GetMaxDaughters();; 436 static Int_t GetMaxLevels();; 437 static Int_t GetMaxXtruVert();; 438 Int_t GetMaxThreads() const { return fMaxThreads - 1; }; 439 void SetMaxThreads(Int_t nthreads);; 440 Int_t GetRTmode() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:23944,Clear,ClearTracks,23944,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['Clear'],['ClearTracks']
Usability,"00 xx[2] = zaxis->GetXmax();; 11801 view->WCtoNDC(xx,u);; 11802 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11803 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11804 xx[1] = yaxis->GetXmin();; 11805 view->WCtoNDC(xx,u);; 11806 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11807 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11808 xx[2] = zaxis->GetXmin();; 11809 view->WCtoNDC(xx,u);; 11810 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11811 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11812 gVirtualX->DrawPolyLine(5,rect1);; 11813 if (nbins>1) {; 11814 xx[2] = zaxis->GetXmin();; 11815 xx[1] = yaxis->GetXmax();; 11816 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11817 view->WCtoNDC(xx,u);; 11818 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11819 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11820 rect2[4].SetX(rect2[0].GetX());; 11821 rect2[4].SetY(rect2[0].GetY());; 11822 xx[2] = zaxis->GetXmax();; 11823 view->WCtoNDC(xx,u);; 11824 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11825 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11826 xx[1] = yaxis->GetXmin();; 11827 view->WCtoNDC(xx,u);; 11828 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11829 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11830 xx[2] = zaxis->GetXmin();; 11831 view->WCtoNDC(xx,u);; 11832 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11833 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11834 gVirtualX->DrawPolyLine(5,rect2);; 11835 }; 11836 c->Clear();; 11837 c->cd();; 11838 TH2 *hp = (TH2*)h3->Project3D(""zy"");; 11839 xaxis->SetRange(first,last);; 11840 if (hp) {; 11841 hp->SetFillColor(38);; 11842 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZY of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx)));; 11843 else hp->SetTitle(TString::Format(""ProjectionZY, binx=[%d,%d] [x=%.1f..%.1f]"", binx,binx2,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx2)));; 11844 hp->SetXTitle(fH->GetYaxis()->GetTitle());; 11845 hp->SetYTitle(fH->GetZax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:431147,ux,uxmin,431147,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"00, Int_t splitlevel=99);  Deprecated function. Use next function instead. ;  ; virtual TBranch * BranchOld (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=1);  Create a new TTree BranchObject. ;  ; virtual TBranch * BranchRef ();  Build the optional branch supporting the TRefTable. ;  ; virtual TBranch * Bronch (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99);  Create a new TTree BranchElement. ;  ; void Browse (TBrowser *) override;  Browse content of the TTree. ;  ; virtual Int_t BuildIndex (const char *majorname, const char *minorname=""0"");  Build a Tree Index (default is TTreeIndex). ;  ; TStreamerInfo * BuildStreamerInfo (TClass *cl, void *pointer=nullptr, bool canOptimize=true);  Build StreamerInfo for class cl. ;  ; virtual TFile * ChangeFile (TFile *file);  Called by TTree::Fill() when file has reached its maximum fgMaxTreeSize. ;  ; virtual void CopyAddresses (TTree *, bool undo=false);  Set branch addresses of passed tree equal to ours. ;  ; virtual Long64_t CopyEntries (TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false);  Copy nentries from given tree to this tree. ;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Copy a tree with selection. ;  ; virtual TBasket * CreateBasket (TBranch *);  Create a basket for this tree and given branch. ;  ; Int_t Debug () const;  ; void Delete (Option_t *option="""") override;  Delete this tree from memory or/and disk. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Called by TKey and TObject::Clone to automatically add us to a directory when we are read from a file. ;  ; virtual Long64_t Draw (const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Draw expression varexp for entries and objects that pass a (optional) selection. ;  ; virtual Long6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:6773,undo,undo,6773,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,1,['undo'],['undo']
Usability,"00.67/1 [Auto,Clean] ; 0x76835f0/V- RooGaussian::gauss_Sample2 = 0 [Auto,Dirty] ; 0x6d30aa0/V- RooRealVar::Energy = 1500; 0x6f8f320/V- RooRealVar::meanG_Sample2 = 100; 0x37bfa10/V- RooRealVar::sigmaG = 3; 0x76ba770/V- RooFormulaVar::yieldSig_Sample2 = 0.5 [Auto,Clean] ; 0x74a38c0/V- RooRealVar::M = 1; 0x720a750/V- RooPolynomial::linear = 1501 [Auto,Dirty] ; 0x6d30aa0/V- RooRealVar::Energy = 1500; 0x6fbfd00/V- RooRealVar::pol1 = 1; 0x70456d0/V- RooRealVar::yieldBkg = 1; 0x77151e0 RooAddPdf::model_Sample3 = 750.5/1 [Auto,Clean] ; 0x76aa830/V- RooGaussian::gauss_Sample3 = 0 [Auto,Dirty] ; 0x6d30aa0/V- RooRealVar::Energy = 1500; 0x2ad1e30/V- RooRealVar::meanG_Sample3 = 100; 0x37bfa10/V- RooRealVar::sigmaG = 3; 0x2ad2220/V- RooRealVar::yieldSig_Sample3 = 1; 0x720a750/V- RooPolynomial::linear = 1501 [Auto,Dirty] ; 0x6d30aa0/V- RooRealVar::Energy = 1500; 0x6fbfd00/V- RooRealVar::pol1 = 1; 0x70456d0/V- RooRealVar::yieldBkg = 1; 1) RooRealVar:: meanG_Sample1 = 100; 2) RooRealVar:: meanG_Sample2 = 100; 3) RooRealVar:: meanG_Sample3 = 100; 4) RooRealVar:: yieldSig_Sample3 = 1; 1) RooFormulaVar:: yieldSig_Sample1 = 0.29755; 2) RooFormulaVar:: yieldSig_Sample2 = 0.5; 3) RooRealVar:: meanG_Sample1 = 200; 4) RooRealVar:: meanG_Sample2 = 300; 5) RooRealVar:: meanG_Sample3 = 100; 6) RooRealVar:: yieldSig_Sample3 = 1; The proto model before customisation:; ; ; PDF 1 with a yield depending on M:; ; ; PDF 2 with a yield depending on M:; ; ; PDF 3 with a free yield:; ; ; The following leaves have been created automatically while customising:; ; ; The following leaves have been used while customising; (partial overlap with the set of automatically created leaves.; a new customiser for a different PDF could reuse them if necessary.):; DateJune 2021 ; AuthorHarshal Shende, Stephan Hageboeck (C++ version) ; Definition in file rf514_RooCustomizer.py. tutorialsroofitrf514_RooCustomizer.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf514__RooCustomizer_8py.html:6875,Guid,Guide,6875,doc/master/rf514__RooCustomizer_8py.html,https://root.cern,https://root.cern/doc/master/rf514__RooCustomizer_8py.html,1,['Guid'],['Guide']
Usability,"000 } | ; | | | 4 | | | ; +-----+-----------+----+-------------+--------------------------+; | 1 | 3.240000 | 5 | 10000 | { 4.5100000, 5.5100000 } | ; | | | 6 | | { 5.5100000, 6.5100000 } | ; | | | 7 | | { 6.5100000, 7.5100000 } | ; | | | 8 | | | ; +-----+-----------+----+-------------+--------------------------+; | 2 | 5.832000 | 9 | 1000000 | { 8.2610000, 9.2610000 } | ; | | | 10 | | { 9.2610000, 10.261000 } | ; | | | 11 | | { 10.261000, 11.261000 } | ; | | | 12 | | | ; +-----+-----------+----+-------------+--------------------------+; | 3 | 10.497600 | 13 | 100000000 | { 12.387100, 13.387100 } | ; | | | 14 | | { 13.387100, 14.387100 } | ; | | | 15 | | { 14.387100, 15.387100 } | ; | | | 16 | | | ; +-----+-----------+----+-------------+--------------------------+; | 4 | 18.895680 | 17 | 10000000000 | { 16.925810, 17.925810 } | ; | | | 18 | | { 17.925810, 18.925810 } | ; | | | 19 | | { 18.925810, 19.925810 } | ; | | | 20 | | | ; +-----+-----------+----+-------------+--------------------------+; +-----+----+-------------+; | Row | x | y | ; +-----+----+-------------+; | 0 | 1 | 100 | ; | | 2 | | ; | | 3 | | ; | | 4 | | ; +-----+----+-------------+; | 1 | 5 | 10000 | ; | | 6 | | ; | | 7 | | ; | | 8 | | ; +-----+----+-------------+; | 2 | 9 | 1000000 | ; | | 10 | | ; | | 11 | | ; | | 12 | | ; +-----+----+-------------+; | 3 | 13 | 100000000 | ; | | 14 | | ; | | 15 | | ; | | 16 | | ; +-----+----+-------------+; | 4 | 17 | 10000000000 | ; | | 18 | | ; | | 19 | | ; | | 20 | | ; The following is the representation of all columns with the default nr of entries; ; ; The following is the representation of two columns with the default nr of entries; +-----+----+-------------+; DateAugust 2018 ; AuthorsEnrico Guiraud, Danilo Piparo, Enric Tejedor Saavedra (CERN), Massimo Tumolo (Politecnico di Torino) ; Definition in file df024_Display.py. tutorialsdataframedf024_Display.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df024__Display_8py.html:3739,Guid,Guide,3739,doc/master/df024__Display_8py.html,https://root.cern,https://root.cern/doc/master/df024__Display_8py.html,1,['Guid'],['Guide']
Usability,"000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidTTree::Browse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeSQL.html:2802,undo,undo,2802,root/html602/TTreeSQL.html,https://root.cern,https://root.cern/root/html602/TTreeSQL.html,2,['undo'],['undo']
Usability,"0000 events; ; # signalTree.Print();; ; # Booking Methods; ; # Here we book the TMVA methods. We book a Boosted Decision Tree method (BDT); ; ; # Boosted Decision Trees; if useTMVABDT:; factory.BookMethod(; loader,; TMVA.Types.kBDT,; ""BDT"",; V=False,; NTrees=400,; MinNodeSize=""2.5%"",; MaxDepth=2,; BoostType=""AdaBoost"",; AdaBoostBeta=0.5,; UseBaggedBoost=True,; BaggedSampleFraction=0.5,; SeparationType=""GiniIndex"",; nCuts=20,; ); ; ; #### Booking Deep Neural Network; ; # Here we book the DNN of TMVA. See the example TMVA_Higgs_Classification.C for a detailed description of the; # options; ; if useTMVADNN:; layoutString = ROOT.TString(; ""DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR""; ); ; # Training strategies; # one can catenate several training strings with different parameters (e.g. learning rates or regularizations; # parameters) The training string must be concatenated with the `|` delimiter; trainingString1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.""; ) # + ""|"" + trainingString2 + ...; trainingString1 += "",MaxEpochs="" + str(max_epochs); ; # Build now the full DNN Option string; dnnMethodName = ""TMVA_DNN_CPU""; ; # use GPU if available; dnnOptions = ""CPU""; if hasGPU :; dnnOptions = ""GPU""; dnnMethodName = ""TMVA_DNN_GPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; dnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIER"",; Layout=layoutString,; TrainingStrategy=trainingString1,; Architecture=dnnOptions; ); ; ; ### Book Convolutional Neural Network in TMVA; ; # For building a CNN one needs to define; ; # - Input Layout : number of channels (in this case = 1) | image height | image width; # - Batch Layout : batch size | number of channels | image size = (height*width); ; # Then one add Convolutional ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:10227,Learn,LearningRate,10227,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['Learn'],['LearningRate']
Usability,"000000 } | ; | | | 2 | | { 2.1000000, 3.1000000 } | ; | | | 3 | | { 3.1000000, 4.1000000 } | ; | | | 4 | | | ; +-----+-----------+----+-------------+--------------------------+; | 1 | 3.240000 | 5 | 10000 | { 4.5100000, 5.5100000 } | ; | | | 6 | | { 5.5100000, 6.5100000 } | ; | | | 7 | | { 6.5100000, 7.5100000 } | ; | | | 8 | | | ; +-----+-----------+----+-------------+--------------------------+; | 2 | 5.832000 | 9 | 1000000 | { 8.2610000, 9.2610000 } | ; | | | 10 | | { 9.2610000, 10.261000 } | ; | | | 11 | | { 10.261000, 11.261000 } | ; | | | 12 | | | ; +-----+-----------+----+-------------+--------------------------+; | 3 | 10.497600 | 13 | 100000000 | { 12.387100, 13.387100 } | ; | | | 14 | | { 13.387100, 14.387100 } | ; | | | 15 | | { 14.387100, 15.387100 } | ; | | | 16 | | | ; +-----+-----------+----+-------------+--------------------------+; | 4 | 18.895680 | 17 | 10000000000 | { 16.925810, 17.925810 } | ; | | | 18 | | { 17.925810, 18.925810 } | ; | | | 19 | | { 18.925810, 19.925810 } | ; | | | 20 | | | ; +-----+-----------+----+-------------+--------------------------+; ; ; The following is the representation of two columns with the default nr of entries; +-----+----+-------------+; | Row | x | y | ; +-----+----+-------------+; | 0 | 1 | 100 | ; | | 2 | | ; | | 3 | | ; | | 4 | | ; +-----+----+-------------+; | 1 | 5 | 10000 | ; | | 6 | | ; | | 7 | | ; | | 8 | | ; +-----+----+-------------+; | 2 | 9 | 1000000 | ; | | 10 | | ; | | 11 | | ; | | 12 | | ; +-----+----+-------------+; | 3 | 13 | 100000000 | ; | | 14 | | ; | | 15 | | ; | | 16 | | ; +-----+----+-------------+; | 4 | 17 | 10000000000 | ; | | 18 | | ; | | 19 | | ; | | 20 | | ; +-----+----+-------------+; DateAugust 2018 ; AuthorsEnrico Guiraud, Danilo Piparo, Enric Tejedor Saavedra (CERN), Massimo Tumolo (Politecnico di Torino) ; Definition in file df024_Display.C. tutorialsdataframedf024_Display.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df024__Display_8C.html:3977,Guid,Guide,3977,doc/master/df024__Display_8C.html,https://root.cern,https://root.cern/doc/master/df024__Display_8C.html,1,['Guid'],['Guide']
Usability,"0000000."");; ; auto ptr = std::make_shared<double>();; KahanSum<double> helper(ptr);; ; auto kahanResult = dd.Book<double>(std::move(helper), {""x""});; auto plainResult = dd.Sum<double>({""x""});; ; std::cout << std::setprecision(24) << ""Kahan: "" << *kahanResult << "" Classical: "" << *plainResult << std::endl;; // Outputs: Kahan: 1000000000.00000011920929 Classical: 1000000000; }; d#define d(i)Definition RSha256.hxx:102; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvaglob.cxx:176; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; ; Kahan: 1000000000.00000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df022__useKahan_8C.html:3024,simpl,simple,3024,doc/master/df022__useKahan_8C.html,https://root.cern,https://root.cern/doc/master/df022__useKahan_8C.html,1,['simpl'],['simple']
Usability,"000000;; ROOT::RDataFrame df(npoints);; ; // Define what we want inside the dataframe. We do not need to define p as an array,; // but we do it here to demonstrate how to use jitting with RDataFrame.; ; // NOTE: Although it's possible to use ""for (auto&& x : p)"" below, it will; // shadow the name of the data column ""x"", and may cause compilation failures; // if the local variable and the data column are of different types, or the; // local x variable is declared in the global scope of the lambda function.; ; auto pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""p"", ""std::array<double, 2> v{x, y}; return v;""); .Define(""r"", ""double r2 = 0.0; for (auto&& x : p) r2 += x*x; return sqrt(r2);"");; ; // Now we have a dataframe with columns x, y, p (which is a point based on x; // and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; // need to know how many of our data points fall inside the unit circle compared; // with the total number of points. The ratio of the areas is; //; // A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; //; // Therefore, we can approximate pi with four times the number of points inside the; // unit circle over the total number of points in our dataframe:; ; auto incircle = *(pidf.Filter(""r <= 1.0"").Count());; ; double pi_approx = 4.0 * incircle / npoints;; ; std::cout << ""pi is approximately equal to "" << pi_approx << std::endl;; }; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; df012_DefinesAndFiltersAsStringsDefinition df012_DefinesAndFiltersAsStrings.py:1; ; pi is approximately equal to 3.14146; DateOctober 2017 ; AuthorGuilherme Amadio (CERN) ; Definition in file df012_DefinesAndFiltersAsStrings.C. tutorialsdataframedf012_DefinesAndFiltersAsStrings.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8C.html:2771,Guid,Guide,2771,doc/master/df012__DefinesAndFiltersAsStrings_8C.html,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8C.html,1,['Guid'],['Guide']
Usability,"00000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGCanvas (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kSunkenFrame|kDoubleBorder, Pixel_t back=GetDefaultFrameBackground());  Create a canvas object. ;  ;  ~TGCanvas () override;  Delete canvas. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Adding a frame to a canvas is actually adding the frame to the viewport container. ;  ; virtual void ClearViewPort ();  Clear view port and redraw content. ;  ; void DrawBorder () override;  Draw canvas border. ;  ; TGFrame * GetContainer () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual Int_t GetHsbPosition () const;  Get position of horizontal scrollbar. ;  ; TGHScrollBar * GetHScrollbar () const;  ; Int_t GetScrolling () const;  ; TGViewPort * GetViewPort () const;  ; virtual Int_t GetVsbPosition () const;  Get position of vertical scrollbar. ;  ; TGVScrollBar * GetVScrollbar () const;  ; TClass * IsA () const override;  ; void Layout () override;  Create layout for canvas. ;  ; void MapSubwindows () override;  Map all canvas sub windows. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Handle message generated by the canvas scrollbars. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a canvas widget as a C++ statement(s) on output stream out. ;  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCanvas.html:2332,Clear,ClearViewPort,2332,doc/master/classTGCanvas.html,https://root.cern,https://root.cern/doc/master/classTGCanvas.html,2,['Clear'],"['Clear', 'ClearViewPort']"
Usability,"000; GausUNURAN........ 40.000 139.000 41.000 44.000; PoissonUNURAN(10). 85.000 271.000 92.000 102.000; PoissonUNURAN(100) 62.000 256.000 69.000 78.000. Note that the time to generate a number from an arbitrary TF1 function; using TF1::GetRandom or using TUnuran is independent of the complexity of the function. TH1::FillRandom(TH1 *) or TH1::FillRandom(const char *tf1name). can be used to fill an histogram (1-d, 2-d, 3-d from an existing histogram; or from an existing function. Note this interesting feature when working with objects. You can use several TRandom objects, each with their ""independent""; random sequence. For example, one can imagine; TRandom *eventGenerator = new TRandom();; TRandom *tracking = new TRandom();; eventGenerator can be used to generate the event kinematics.; tracking can be used to track the generated particles with random numbers; independent from eventGenerator.; This very interesting feature gives the possibility to work with simple; and very fast random number generators without worrying about; random number periodicity as it was the case with Fortran.; One can use TRandom::SetSeed to modify the seed of one generator. a TRandom object may be written to a Root file. -as part of another object; -or with its own key (example gRandom->Write(""Random"");. Function Members (Methods); public:. TRandom(UInt_t seed = 65539); TRandom(const TRandom&); virtual~TRandom(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBinomial(Int_t ntot, Double_t prob); virtual Double_tBreitWigner(Double_t mean = 0, Double_t gamma = 1); virtual voidTObject::Browse(TBrowser* b); virtual voidCircle(Double_t& x, Double_t& y, Double_t r); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Cop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRandom.html:4569,simpl,simple,4569,root/html528/TRandom.html,https://root.cern,https://root.cern/root/html528/TRandom.html,4,['simpl'],['simple']
Usability,"000; GausUNURAN........ 40.000 139.000 41.000 44.000; PoissonUNURAN(10). 85.000 271.000 92.000 102.000; PoissonUNURAN(100) 62.000 256.000 69.000 78.000. Note that the time to generate a number from an arbitrary TF1 function; using TF1::GetRandom or using TUnuran is independent of the complexity of the function. TH1::FillRandom(TH1 *) or TH1::FillRandom(const char *tf1name). can be used to fill an histogram (1-d, 2-d, 3-d from an existing histogram; or from an existing function. Note this interesting feature when working with objects. You can use several TRandom objects, each with their ""independent""; random sequence. For example, one can imagine; TRandom *eventGenerator = new TRandom();; TRandom *tracking = new TRandom();; eventGenerator can be used to generate the event kinematics.; tracking can be used to track the generated particles with random numbers; independent from eventGenerator.; This very interesting feature gives the possibility to work with simple; and very fast random number generators without worrying about; random number periodicity as it was the case with Fortran.; One can use TRandom::SetSeed to modify the seed of one generator. a TRandom object may be written to a Root file. -as part of another object; -or with its own key (example gRandom->Write(""Random"");. Function Members (Methods); public:. virtual~TRandom(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBinomial(Int_t ntot, Double_t prob); virtual Double_tBreitWigner(Double_t mean = 0, Double_t gamma = 1); virtual voidTObject::Browse(TBrowser* b); virtual voidCircle(Double_t& x, Double_t& y, Double_t r); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRandom.html:4593,simpl,simple,4593,root/html602/TRandom.html,https://root.cern,https://root.cern/root/html602/TRandom.html,2,['simpl'],['simple']
Usability,"004////////////////////////////////////////////////////////////////////////////////; 2005/// Set number of points to be generated on the shape outline when checking for overlaps.; 2006 ; 2007void TGeoPainter::SetNmeshPoints(Int_t npoints); 2008{; 2009 fChecker->SetNmeshPoints(npoints);; 2010}; 2011 ; 2012////////////////////////////////////////////////////////////////////////////////; 2013/// Select a node to be checked for overlaps. All overlaps not involving it will; 2014/// be ignored.; 2015 ; 2016void TGeoPainter::SetCheckedNode(TGeoNode *node); 2017{; 2018 fChecker->SetSelectedNode(node);; 2019}; 2020 ; 2021////////////////////////////////////////////////////////////////////////////////; 2022/// Set default level down to which visualization is performed; 2023 ; 2024void TGeoPainter::SetVisLevel(Int_t level); 2025{; 2026 if (level == fVisLevel && fLastVolume == fTopVolume); 2027 return;; 2028 fVisLevel = level;; 2029 if (!fTopVolume); 2030 return;; 2031 if (fVisLock) {; 2032 ClearVisibleVolumes();; 2033 fVisLock = kFALSE;; 2034 }; 2035 if (!fLastVolume) {; 2036 // printf(""--- Drawing %6d nodes with %d visible levels\n"",fNVisNodes,fVisLevel);; 2037 return;; 2038 }; 2039 if (!gPad); 2040 return;; 2041 if (gPad->GetView()) {; 2042 // printf(""--- Drawing %6d nodes with %d visible levels\n"",fNVisNodes,fVisLevel);; 2043 ModifiedPad();; 2044 }; 2045}; 2046 ; 2047////////////////////////////////////////////////////////////////////////////////; 2048/// Set top geometry volume as visible.; 2049 ; 2050void TGeoPainter::SetTopVisible(Bool_t vis); 2051{; 2052 if (fTopVisible == vis); 2053 return;; 2054 fTopVisible = vis;; 2055 ModifiedPad();; 2056}; 2057 ; 2058////////////////////////////////////////////////////////////////////////////////; 2059/// Set drawing mode :; 2060/// - option=0 (default) all nodes drawn down to vislevel; 2061/// - option=1 leaves and nodes at vislevel drawn; 2062/// - option=2 path is drawn; 2063 ; 2064void TGeoPainter::SetVisOption(Int_t option); 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:66382,Clear,ClearVisibleVolumes,66382,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Clear'],['ClearVisibleVolumes']
Usability,"00; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TGedTabInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGedTabInfo(). TGedTabInfo::TGedTabInfo ; (; TGTabElement * ; el, . TGCompositeFrame * ; f . ). inline . Definition at line 69 of file TGedEditor.cxx. Member Data Documentation. ◆ fContainer. TGCompositeFrame* TGedTabInfo::fContainer. Definition at line 67 of file TGedEditor.cxx. ◆ fElement. TGTabElement* TGedTabInfo::fElement. Definition at line 66 of file TGedEditor.cxx. gui/ged/src/TGedEditor.cxx. TGedTabInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedTabInfo.html:10215,Guid,Guide,10215,doc/master/classTGedTabInfo.html,https://root.cern,https://root.cern/doc/master/classTGedTabInfo.html,1,['Guid'],['Guide']
Usability,"00; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos if the request is in the list of; prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. Int_t SetBufferSize(Int_t buffersize); Change the underlying buffer size of the cache.; If the change of size means some cache content is lost, or if the buffer; is now larger, setup for a cache refill the next time there is a read; Returns 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Overload to make sure that the object specific. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void SetLearnPrefill(TTreeCache::EPrefillType type = kNoPrefill); Set whether the learning period is started with a p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:25735,simpl,simply,25735,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"00; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos if the request is in the list of; prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Overload to make sure that the object specific. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void SetLearnPrefill(TTreeCache::EPrefillType type = kNoPrefill); Set whether the learning period is started with a prefilling of the; cache and which type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:25403,simpl,simply,25403,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"01 if (line1[0].GetX()) gVirtualX->DrawPolyLine(2,line1);; 11102 if (nbins>1 && line1[0].GetX()) {; 11103 gVirtualX->DrawPolyLine(2,line2);; 11104 gVirtualX->DrawPolyLine(2,line3);; 11105 gVirtualX->DrawPolyLine(2,line4);; 11106 gVirtualX->DrawPolyLine(5,endface1);; 11107 gVirtualX->DrawPolyLine(5,endface2);; 11108 }; 11109 xx[0] = xaxis->GetXmin();; 11110 xx[2] = zaxis->GetBinCenter(binz);; 11111 xx[1] = yaxis->GetBinCenter(biny);; 11112 view->WCtoNDC(xx,u);; 11113 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11114 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11115 xx[0] = xaxis->GetXmax();; 11116 view->WCtoNDC(xx,u);; 11117 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11118 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11119 gVirtualX->DrawPolyLine(2,line1);; 11120 if (nbins>1) {; 11121 xx[0] = xaxis->GetXmin();; 11122 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11123 xx[1] = yaxis->GetBinCenter(biny);; 11124 view->WCtoNDC(xx,u);; 11125 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11126 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11127 xx[0] = xaxis->GetXmax();; 11128 view->WCtoNDC(xx,u);; 11129 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11130 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11131 ; 11132 xx[0] = xaxis->GetXmin();; 11133 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11134 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11135 view->WCtoNDC(xx,u);; 11136 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11137 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11138 xx[0] = xaxis->GetXmax();; 11139 view->WCtoNDC(xx,u);; 11140 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11141 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11142 ; 11143 xx[0] = xaxis->GetXmin();; 11144 xx[2] = zaxis->GetBinCenter(binz);; 11145 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11146 view->WCtoNDC(xx,u);; 11147 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11148 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11149 xx[0] = xaxis->GetXmax();; 11150 view->WCtoN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:402521,ux,uxmin,402521,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"01 return nsigargs;; 302}; 303 ; 304/** \class TQConnectionList; 305 TQConnectionList is the named list of connections,; 306 see also TQConnection class.; 307*/; 308 ; 309class TQConnectionList : public TList {; 310 ; 311private:; 312 Int_t fSignalArgs; // number of arguments in signal function; 313 ; 314public:; 315 TQConnectionList(const char *name, Int_t nsigargs) : TList(); 316 { fName = name; fSignalArgs = nsigargs; }; 317 virtual ~TQConnectionList();; 318 ; 319 Bool_t Disconnect(void *receiver=nullptr, const char *slot_name=nullptr);; 320 Int_t GetNargs() const { return fSignalArgs; }; 321 void ls(Option_t *option = """") const override;; 322};; 323 ; 324////////////////////////////////////////////////////////////////////////////////; 325/// Destructor.; 326 ; 327TQConnectionList::~TQConnectionList(); 328{; 329 TIter next(this);; 330 TQConnection *connection;; 331 ; 332 while ((connection = (TQConnection*)next())) {; 333 // remove this from feed back reference list; 334 connection->Remove(this);; 335 if (connection->IsEmpty()) delete connection;; 336 }; 337 Clear(""nodelete"");; 338}; 339 ; 340////////////////////////////////////////////////////////////////////////////////; 341/// Remove connection from the list. For more info see; 342/// TQObject::Disconnect(); 343 ; 344Bool_t TQConnectionList::Disconnect(void *receiver, const char *slot_name); 345{; 346 TQConnection *connection = nullptr;; 347 Bool_t return_value = kFALSE;; 348 ; 349 TObjLink *lnk = FirstLink();; 350 TObjLink *savlnk; // savlnk is used when link is deleted; 351 ; 352 while (lnk) {; 353 connection = (TQConnection*)lnk->GetObject();; 354 const char *name = connection->GetName();; 355 void *obj = connection->GetReceiver();; 356 ; 357 if (!slot_name || !slot_name[0]; 358 || !strcmp(name,slot_name)) {; 359 ; 360 if (!receiver || (receiver == obj)) {; 361 return_value = kTRUE;; 362 savlnk = lnk->Next(); // keep next link ..; 363 Remove(lnk);; 364 lnk = savlnk; // current link == saved ...; 365 connecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TQObject_8cxx_source.html:10881,Clear,Clear,10881,doc/master/TQObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TQObject_8cxx_source.html,1,['Clear'],['Clear']
Usability,"01); virtual~TCurlyArc(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyArc.html:1186,Clear,Clear,1186,root/html526/TCurlyArc.html,https://root.cern,https://root.cern/root/html526/TCurlyArc.html,5,['Clear'],['Clear']
Usability,"01); virtual~TCurlyLine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCurlyLine.html:1194,Clear,Clear,1194,root/html534/TCurlyLine.html,https://root.cern,https://root.cern/root/html534/TCurlyLine.html,1,['Clear'],['Clear']
Usability,"01); virtual~TCurlyLine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyLine.html:1175,Clear,Clear,1175,root/html526/TCurlyLine.html,https://root.cern,https://root.cern/root/html526/TCurlyLine.html,4,['Clear'],['Clear']
Usability,"01); virtual~TGeoOverlap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoOverlap.html:1020,Clear,Clear,1020,root/html528/TGeoOverlap.html,https://root.cern,https://root.cern/root/html528/TGeoOverlap.html,4,['Clear'],['Clear']
Usability,"02 +/- 6.04e-02; a0_ctl -1.5627e-01 +/- 5.53e-02; a1 -3.8353e-03 +/- 6.32e-02; a1_ctl 3.8442e-01 +/- 4.35e-02; f 1.7952e-01 +/- 1.55e-02; f_ctl 5.2710e-01 +/- 1.25e-02; mean 1.4991e-02 +/- 3.34e-02; mean_ctl -3.0079e+00 +/- 1.04e-02; sigma 3.0450e-01 +/- 8.33e-03; ; [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 1000 events out of 3000 total events; [#1] INFO:Plotting -- RooSimultaneous::plotOn(simPdf) plot on x represents a slice in the index category (sample); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) slice variable sample was not projected anyway; [#1] INFO:Plotting -- RooSimultaneous::plotOn(simPdf) plot on x represents a slice in the index category (sample); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (px); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) slice variable sample was not projected anyway; [#1] INFO:Plotting -- RooSimultaneous::plotOn(simPdf) plot on x averages with data index category (sample); [#1] INFO:Plotting -- RooSimultaneous::plotOn(simPdf) plot on x averages with data index category (sample); [#1] INFO:Plotting -- RooAbsPdf::plotOn(simPdf) directly selected PDF components: (px_ctl); [#1] INFO:Plotting -- RooAbsPdf::plotOn(simPdf) indirectly selected PDF components: (model_ctl); [#1] INFO:Plotting -- RooSimultaneous::plotOn(simPdf) plot on x averages with data index category (sample); [#1] INFO:Plotting -- RooSimultaneous::plotOn(simPdf) plot on x averages with data index category (sample); [#1] INFO:Plotting -- RooAbsPdf::plotOn(simPdf) directly selected PDF components: (px,px_ctl); [#1] INFO:Plotting -- RooAbsPdf::plotOn(simPdf) indirectly selected PDF components: (model_ctl,model); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf501_simultaneouspdf.C. tutorialsroofitrf501_simultaneouspdf.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf501__simultaneouspdf_8C.html:11661,Guid,Guide,11661,doc/master/rf501__simultaneouspdf_8C.html,https://root.cern,https://root.cern/doc/master/rf501__simultaneouspdf_8C.html,1,['Guid'],['Guide']
Usability,03 of file TEveWindow.cxx. ◆ FindTabIndex(). Int_t TEveCompositeFrameInTab::FindTabIndex ; (; ). protected . Return index of this frame in the tab. ; Throws an exception if it is not found. ; Definition at line 581 of file TEveWindow.cxx. ◆ IsA(). TClass * TEveCompositeFrameInTab::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveCompositeFrame.; Definition at line 194 of file TEveWindow.h. ◆ operator=(). TEveCompositeFrameInTab & TEveCompositeFrameInTab::operator= ; (; const TEveCompositeFrameInTab & ; ). private . ◆ SetCurrent(). void TEveCompositeFrameInTab::SetCurrent ; (; Bool_t ; curr). overridevirtual . Set current state of this frame. ; Virtual from TEveCompositeFrame. ; Reimplemented from TEveCompositeFrame.; Definition at line 624 of file TEveWindow.cxx. ◆ Streamer(). void TEveCompositeFrameInTab::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TEveCompositeFrame. ◆ StreamerNVirtual(). void TEveCompositeFrameInTab::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TEveWindow.h. ◆ WindowNameChanged(). void TEveCompositeFrameInTab::WindowNameChanged ; (; const TString & ; name). overridevirtual . Update widgets using window's name or title. ; Reimplemented from TEveCompositeFrame.; Definition at line 568 of file TEveWindow.cxx. Member Data Documentation. ◆ fParentInTab. TGCompositeFrame* TEveCompositeFrameInTab::fParentInTab. protected . Definition at line 179 of file TEveWindow.h. ◆ fTab. TGTab* TEveCompositeFrameInTab::fTab. protected . Definition at line 178 of file TEveWindow.h. Libraries for TEveCompositeFrameInTab:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindow.h; graf3d/eve/src/TEveWindow.cxx. TEveCompositeFrameInTab. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInTab.html:37226,Guid,Guide,37226,doc/master/classTEveCompositeFrameInTab.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInTab.html,1,['Guid'],['Guide']
Usability,"04 xx[1] = yaxis->GetXmin();; 11805 view->WCtoNDC(xx,u);; 11806 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11807 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11808 xx[2] = zaxis->GetXmin();; 11809 view->WCtoNDC(xx,u);; 11810 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11811 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11812 gVirtualX->DrawPolyLine(5,rect1);; 11813 if (nbins>1) {; 11814 xx[2] = zaxis->GetXmin();; 11815 xx[1] = yaxis->GetXmax();; 11816 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11817 view->WCtoNDC(xx,u);; 11818 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11819 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11820 rect2[4].SetX(rect2[0].GetX());; 11821 rect2[4].SetY(rect2[0].GetY());; 11822 xx[2] = zaxis->GetXmax();; 11823 view->WCtoNDC(xx,u);; 11824 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11825 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11826 xx[1] = yaxis->GetXmin();; 11827 view->WCtoNDC(xx,u);; 11828 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11829 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11830 xx[2] = zaxis->GetXmin();; 11831 view->WCtoNDC(xx,u);; 11832 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11833 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11834 gVirtualX->DrawPolyLine(5,rect2);; 11835 }; 11836 c->Clear();; 11837 c->cd();; 11838 TH2 *hp = (TH2*)h3->Project3D(""zy"");; 11839 xaxis->SetRange(first,last);; 11840 if (hp) {; 11841 hp->SetFillColor(38);; 11842 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZY of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx)));; 11843 else hp->SetTitle(TString::Format(""ProjectionZY, binx=[%d,%d] [x=%.1f..%.1f]"", binx,binx2,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx2)));; 11844 hp->SetXTitle(fH->GetYaxis()->GetTitle());; 11845 hp->SetYTitle(fH->GetZaxis()->GetTitle());; 11846 hp->SetZTitle(""Number of Entries"");; 11847 hp->Draw(fShowOption.Data());; 11848 }; 11849 }; 11850 break;; 11851 }; 11852 c->Update();; 11853}; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:431316,ux,uxmin,431316,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"05, Option_t* option = "">""); virtual~TArrow(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& arrow) const; virtual voidTObject::Delete(Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TArrow.html:1785,Clear,Clear,1785,root/html526/TArrow.html,https://root.cern,https://root.cern/root/html526/TArrow.html,5,['Clear'],['Clear']
Usability,"05,-15,4.5,15,h1);; h1->GetListOfFunctions()->Add(palette1);; ; p2->SetBottomMargin(0.2);; auto palette2 = new TPaletteAxis(-3.,-25,3.,-23,h2);; h2->GetListOfFunctions()->Add(palette2);; ; p1->cd(); h1->Draw(""colz"");; p2->cd(); h2->Draw(""colz"");; }; c#define c(i)Definition RSha256.hxx:101; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttPad::SetBottomMarginvirtual void SetBottomMargin(Float_t bottommargin)Set Pad bottom margin in fraction of the pad height.Definition TAttPad.cxx:99; TAttPad::SetRightMarginvirtual void SetRightMargin(Float_t rightmargin)Set Pad right margin in fraction of the pad width.Definition TAttPad.cxx:119; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPaletteAxisThe palette painting class.Definition TPaletteAxis.h:28; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; h1TH1F * h1Definition legend1.C:5; AuthorOlivier Couet ; Definition in file movepalette.C. tutorialshistmovepalette.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/movepalette_8C.html:2966,Guid,Guide,2966,doc/master/movepalette_8C.html,https://root.cern,https://root.cern/doc/master/movepalette_8C.html,1,['Guid'],['Guide']
Usability,"05177 a=-0.002833, ; prevFCN = 1659.94939 a=0.0002833, ; prevFCN = 1659.944972 a=-0.0002833, ; prevFCN = 1659.919376 a=-0.001237, ; prevFCN = 1659.902781 a=-0.001089, ; prevFCN = 1659.903175 a=-0.001384, ; prevFCN = 1659.90318 a=-0.001237, ; prevFCN = 1659.902781 a=-0.001089, ; prevFCN = 1659.903175 a=-0.001384, ; prevFCN = 1659.90318 a=-0.001207, ; prevFCN = 1659.902797 a=-0.001266, ; prevFCN = 1659.902798 [#1] INFO:Minimization -- Command timer: Real time 0:00:02, CP time 2.700; [#1] INFO:Minimization -- Session timer: Real time 0:00:02, CP time 2.700; a=-0.001237, ; prevFCN = 1659.902781 a=-0.001207, ; prevFCN = 1659.902797 a=-0.001266, ; prevFCN = 1659.902798 a=-0.001231, ; prevFCN = 1659.902782 a=-0.001243, ; prevFCN = 1659.902782 [#1] INFO:Minimization -- Command timer: Real time 0:00:00, CP time 0.950; [#1] INFO:Minimization -- Session timer: Real time 0:00:03, CP time 3.650, 2 slices; a=-0.001237, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#0] WARNING:NumericIntegration -- RooAdaptiveIntegratorND::dtor(model) WARNING: Number of suppressed warningings about integral evaluations where target precision was not reached is 17; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x integrates over variables (y,z); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y,z]) using numeric integrator RooAdaptiveIntegratorND to calculate Int(x,y,z); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[y,z]_Norm[x,y,z]) using numeric integrator RooAdaptiveIntegratorND to calculate Int(y,z); [#0] WARNING:NumericIntegration -- RooAdaptiveIntegratorND::dtor(model) WARNING: Number of suppressed warningings about integral evaluations where target precision was not reached is 1; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf903_numintcache.C. tutorialsroofitrf903_numintcache.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8C.html:11566,Guid,Guide,11566,doc/master/rf903__numintcache_8C.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8C.html,1,['Guid'],['Guide']
Usability,"06 int nodeid = 0;; 1607 ; 1608 for (auto &chindx : stack) {; 1609 auto &node = fDesc[nodeid];; 1610 if (chindx >= (int)node.chlds.size()); 1611 return -1;; 1612 nodeid = node.chlds[chindx];; 1613 }; 1614 ; 1615 return nodeid;; 1616}; 1617 ; 1618/////////////////////////////////////////////////////////////////////////////////; 1619/// Creates stack for given array of ids, first element always should be 0; 1620 ; 1621std::vector<int> RGeomDescription::MakeStackByIds(const std::vector<int> &ids); 1622{; 1623 TLockGuard lock(fMutex);; 1624 ; 1625 std::vector<int> stack;; 1626 ; 1627 if (ids.empty()); 1628 return stack;; 1629 ; 1630 if (ids[0] != 0) {; 1631 printf(""Wrong first id\n"");; 1632 return stack;; 1633 }; 1634 ; 1635 int nodeid = 0;; 1636 ; 1637 for (unsigned k = 1; k < ids.size(); ++k) {; 1638 ; 1639 int prntid = nodeid;; 1640 nodeid = ids[k];; 1641 ; 1642 if (nodeid >= (int)fDesc.size()) {; 1643 printf(""Wrong node id %d\n"", nodeid);; 1644 stack.clear();; 1645 return stack;; 1646 }; 1647 auto &chlds = fDesc[prntid].chlds;; 1648 auto pos = std::find(chlds.begin(), chlds.end(), nodeid);; 1649 if (pos == chlds.end()) {; 1650 printf(""Wrong id %d not a child of %d - fail to find stack num %d\n"", nodeid, prntid, (int)chlds.size());; 1651 stack.clear();; 1652 return stack;; 1653 }; 1654 ; 1655 stack.emplace_back(std::distance(chlds.begin(), pos));; 1656 }; 1657 ; 1658 return stack;; 1659}; 1660 ; 1661/////////////////////////////////////////////////////////////////////////////////; 1662/// Produce stack based on string path; 1663/// Used to highlight geo volumes by browser hover event; 1664 ; 1665std::vector<int> RGeomDescription::MakeStackByPath(const std::vector<std::string> &path); 1666{; 1667 TLockGuard lock(fMutex);; 1668 ; 1669 std::vector<int> res;; 1670 ; 1671 RGeomBrowserIter iter(*this);; 1672 ; 1673 if (iter.Navigate(path)); 1674 res = MakeStackByIds(iter.CurrentIds());; 1675 ; 1676 return res;; 1677}; 1678 ; 1679/////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:49929,clear,clear,49929,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"07; NCalls = 149; p0 = 33.1658 +/- 0.545703 ; p1 = 4.00667 +/- 0.0165304 ; p2 = 0.984663 +/- 0.0128238 ; p3 = 63.4464 +/- 1.33233 ; fit1 : Real Time = 0.36 seconds Cpu Time = 0.37 seconds; ; import ROOT; from os import path; from ROOT import TCanvas, TFile, TPaveText; from ROOT import gROOT, gBenchmark; ; c1 = TCanvas( 'c1', 'The Fit Canvas', 200, 10, 700, 500 ); c1.SetGridx(); c1.SetGridy(); c1.GetFrame().SetFillColor( 21 ); c1.GetFrame().SetBorderMode(-1 ); c1.GetFrame().SetBorderSize( 5 ); ; gBenchmark.Start( 'fit1' ); #; # We connect the ROOT file generated in a previous tutorial; #; File = ""fillrandom-py.root""; if (ROOT.gSystem.AccessPathName(File)) :; ROOT.Info(""fit1.py"", File+"" does not exist""); exit(); ; fill = TFile(File); ; #; # The function ""ls()"" lists the directory contents of this file; #; fill.ls(); ; #; # Get object ""sqroot"" from the file.; #; ; sqroot = gROOT.FindObject( 'sqroot' ); sqroot.Print(); ; #; # Now fit histogram h1f with the function sqroot; #; h1f = gROOT.FindObject( 'h1f' ); h1f.SetFillColor( 45 ); h1f.Fit( 'sqroot' ); ; # We now annotate the picture by creating a PaveText object; # and displaying the list of commands in this macro; #; fitlabel = TPaveText( 0.6, 0.3, 0.9, 0.80, 'NDC' ); fitlabel.SetTextAlign( 12 ); fitlabel.SetFillColor( 42 ); fitlabel.ReadFile(path.join(str(gROOT.GetTutorialDir()), 'pyroot', 'fit1_py.py')); fitlabel.Draw(); c1.Update(); gBenchmark.Show( 'fit1' ); SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen ; Definition in file fit1.py. tutorialspyrootfit1.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fit1_8py.html:2627,Guid,Guide,2627,doc/master/fit1_8py.html,https://root.cern,https://root.cern/doc/master/fit1_8py.html,1,['Guid'],['Guide']
Usability,"08 xx[2] = zaxis->GetXmin();; 11809 view->WCtoNDC(xx,u);; 11810 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11811 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11812 gVirtualX->DrawPolyLine(5,rect1);; 11813 if (nbins>1) {; 11814 xx[2] = zaxis->GetXmin();; 11815 xx[1] = yaxis->GetXmax();; 11816 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11817 view->WCtoNDC(xx,u);; 11818 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11819 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11820 rect2[4].SetX(rect2[0].GetX());; 11821 rect2[4].SetY(rect2[0].GetY());; 11822 xx[2] = zaxis->GetXmax();; 11823 view->WCtoNDC(xx,u);; 11824 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11825 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11826 xx[1] = yaxis->GetXmin();; 11827 view->WCtoNDC(xx,u);; 11828 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11829 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11830 xx[2] = zaxis->GetXmin();; 11831 view->WCtoNDC(xx,u);; 11832 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11833 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11834 gVirtualX->DrawPolyLine(5,rect2);; 11835 }; 11836 c->Clear();; 11837 c->cd();; 11838 TH2 *hp = (TH2*)h3->Project3D(""zy"");; 11839 xaxis->SetRange(first,last);; 11840 if (hp) {; 11841 hp->SetFillColor(38);; 11842 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZY of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx)));; 11843 else hp->SetTitle(TString::Format(""ProjectionZY, binx=[%d,%d] [x=%.1f..%.1f]"", binx,binx2,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx2)));; 11844 hp->SetXTitle(fH->GetYaxis()->GetTitle());; 11845 hp->SetYTitle(fH->GetZaxis()->GetTitle());; 11846 hp->SetZTitle(""Number of Entries"");; 11847 hp->Draw(fShowOption.Data());; 11848 }; 11849 }; 11850 break;; 11851 }; 11852 c->Update();; 11853}; kMouseMotion@ kMouseMotionDefinition Buttons.h:23; kWheelUp@ kWheelUpDefinition Buttons.h:18; kButton1Motion@ kButton1MotionDefinition Buttons.h:20; kButton1Up@ kButton1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:431485,ux,uxmin,431485,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"080 fGrd[i-1] = 0;; 1081 for (j = 1; j <= fNpar; ++j) {; 1082 m = TMath::Max(i,j);; 1083 n = TMath::Min(i,j);; 1084 ndex = m*(m-1) / 2 + n;; 1085 fGrd[i-1] += fVthmat[ndex-1]*(fXt[j-1] - pvec[j-1]);; 1086 }; 1087 }; 1088 denom = 0;; 1089 for (i = 1; i <= fNpar; ++i) {denom += fGrd[i-1]*(fXt[i-1] - pvec[i-1]); }; 1090 if (denom <= 0) {; 1091 fDcovar = 1;; 1092 fISW[1] = 0;; 1093 denom = 1;; 1094 }; 1095 ycalf = (f - fApsi) / denom;; 1096}; 1097 ; 1098////////////////////////////////////////////////////////////////////////////////; 1099/// Resets the parameter list to UNDEFINED; 1100///; 1101/// Called from MINUIT and by option from MNEXCM; 1102 ; 1103void TMinuit::mncler(); 1104{; 1105 Int_t i;; 1106 ; 1107 fNpfix = 0;; 1108 fNu = 0;; 1109 fNpar = 0;; 1110 fNfcn = 0;; 1111 fNwrmes[0] = 0;; 1112 fNwrmes[1] = 0;; 1113 for (i = 1; i <= fMaxext; ++i) {; 1114 fU[i-1] = 0;; 1115 fCpnam[i-1] = fCundef;; 1116 fNvarl[i-1] = -1;; 1117 fNiofex[i-1] = 0;; 1118 }; 1119 mnrset(1);; 1120 fCfrom = ""CLEAR "";; 1121 fNfcnfr = fNfcn;; 1122 fCstatu = ""UNDEFINED "";; 1123 fLnolim = kTRUE;; 1124 fLphead = kTRUE;; 1125}; 1126 ; 1127////////////////////////////////////////////////////////////////////////////////; 1128/// Print function contours in two variables, on line printer; 1129///; 1130/// input arguments: parx, pary, devs, ngrid; 1131 ; 1132void TMinuit::mncntr(Int_t ike1, Int_t ike2, Int_t &ierrf); 1133{; 1134 static const char *const clabel = ""0123456789ABCDEFGHIJ"";; 1135 ; 1136 /* Local variables */; 1137 Double_t d__1, d__2;; 1138 Double_t fcna[115], fcnb[115], contur[20];; 1139 Double_t ylabel, fmn, fmx, xlo, ylo, xup, yup;; 1140 Double_t devs, xsav, ysav, bwidx, bwidy, unext, ff, xb4;; 1141 Int_t i, ngrid, ixmid, nparx, ix, nx, ny, ki1, ki2, ixzero, iy, ics;; 1142 TString chmid, chln, chzero;; 1143 ; 1144 Int_t ke1 = ike1+1;; 1145 Int_t ke2 = ike2+1;; 1146 if (ke1 <= 0 || ke2 <= 0) goto L1350;; 1147 if (ke1 > fNu || ke2 > fNu) goto L1350;; 1148 ki1 = fNiofex[ke1-1];; 1149 ki2 = f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:39329,CLEAR,CLEAR,39329,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['CLEAR'],['CLEAR']
Usability,"0; TProfileHelper::Addstatic Bool_t Add(T *p, const TH1 *h1, const TH1 *h2, Double_t c1, Double_t c2=1)Definition TProfileHelper.h:71; TProfileHelper::GetBinEffectiveEntriesstatic Double_t GetBinEffectiveEntries(T *p, Int_t bin)Definition TProfileHelper.h:143; TProfileHelper::LabelsDeflatestatic void LabelsDeflate(T *p, Option_t *)Definition TProfileHelper.h:560; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::GetBinSumw2virtual TArrayD * GetBinSumw2()Definition TProfile.h:111; TProfile::SetBinEntriesvirtual void SetBinEntries(Int_t bin, Double_t w)Set the number of entries in bin.Definition TProfile.cxx:1700; TProfile::Sumw2void Sumw2(Bool_t flag=kTRUE) overrideCreate/delete structure to store sum of squares of weights per bin.Definition TProfile.cxx:1825; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; c2return c2Definition legend2.C:14; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. histhistsrcTProfile2D.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:96601,Guid,Guide,96601,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['Guid'],['Guide']
Usability,"0; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::fTotalRealTimeDouble_t fTotalRealTimeDefinition TStopwatch.h:38; TStopwatch::CounterInt_t Counter() constDefinition TStopwatch.h:50; TStopwatch::GetRealTimestatic Double_t GetRealTime()Private static method returning system realtime.Definition TStopwatch.cxx:139; TStopwatch::fStartRealTimeDouble_t fStartRealTimeDefinition TStopwatch.h:33; TStopwatch::fStopRealTimeDouble_t fStopRealTimeDefinition TStopwatch.h:34; TStopwatch::fStartCpuTimeDouble_t fStartCpuTimeDefinition TStopwatch.h:35; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::fCounterInt_t fCounterDefinition TStopwatch.h:40; TStopwatch::Continuevoid Continue()Resume a stopped stopwatch.Definition TStopwatch.cxx:93; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::fTotalCpuTimeDouble_t fTotalCpuTimeDefinition TStopwatch.h:37; TStopwatch::TStopwatchTStopwatch()Create a stopwatch and start it.Definition TStopwatch.cxx:39; TStopwatch::GetCPUTimestatic Double_t GetCPUTime()Private static method returning system CPU time.Definition TStopwatch.cxx:158; TStopwatch::fStopCpuTimeDouble_t fStopCpuTimeDefinition TStopwatch.h:36; TStopwatch::kRunning@ kRunningDefinition TStopwatch.h:31; TStopwatch::kStopped@ kStoppedDefinition TStopwatch.h:31; TStopwatch::kUndefined@ kUndefinedDefinition TStopwatch.h:31; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TTimeStampThe TTimeStamp encapsulates seconds and ns since EPOCH.Definition TTimeStamp.h:45; bool; double; int; TRUE#define TRUEDefinition mesh.c:42. corebasesrcTStopwatch.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStopwatch_8cxx_source.html:10780,Guid,Guide,10780,doc/master/TStopwatch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStopwatch_8cxx_source.html,1,['Guid'],['Guide']
Usability,"0;  ; class  MethodCategory;  Class for categorizing the phase space. More...;  ; class  MethodCFMlpANN;  Interface to Clermond-Ferrand artificial neural network. More...;  ; class  MethodCFMlpANN_Utils;  Implementation of Clermond-Ferrand artificial neural network. More...;  ; class  MethodCompositeBase;  Virtual base class for combining several TMVA method. More...;  ; class  MethodCrossValidation;  ; class  MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  ; class  MethodDL;  ; class  MethodDNN;  Deep Neural Network Implementation. More...;  ; class  MethodDT;  Analysis of Boosted Decision Trees. More...;  ; class  MethodFDA;  Function discriminant analysis (FDA). More...;  ; class  MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  MethodInfo;  ; class  MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  MethodLD;  Linear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  Method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA.html:6138,simpl,simple,6138,doc/master/namespaceTMVA.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html,2,['simpl'],['simple']
Usability,"0] = gxwork[npt-1];; 2206 gywork[0] = gywork[npt-1];; 2207 npt = 1;; 2208 }; 2209 } //endfor (i=first; i<=last;i++); 2210 if (npt > 1) {; 2211 ComputeLogs(npt, optionZ);; 2212 if (optionFill2) {; 2213 gxworkl[npt] = gxworkl[npt-1]; gyworkl[npt] = rwymin;; 2214 gxworkl[npt+1] = gxworkl[0]; gyworkl[npt+1] = rwymin;; 2215 gPad->PaintFillArea(npt+2,gxworkl.data(),gyworkl.data());; 2216 }; 2217 gPad->PaintPolyLine(npt,gxworkl.data(),gyworkl.data());; 2218 }; 2219 } else {; 2220 npt = 0;; 2221 for (i=first; i<=last;i++) {; 2222 npt++;; 2223 if (!optionBins) {; 2224 gywork[npt-1] = wminstep+(i-first)*delta+0.5*delta;; 2225 } else {; 2226 yi1 = y[i]; yi = y[i-1];; 2227 if (yi1 < yi) {; 2228 if (i != last) Error(where, ""Y must be in increasing order"");; 2229 else Error(where, ""Y must have N+1 values with option N"");; 2230 goto do_cleanup;; 2231 }; 2232 gywork[npt-1] = y[i-1] + 0.5*(y[i]-y[i-1]);; 2233 }; 2234 gxwork[npt-1] = x[i-1];; 2235 if ((gxwork[npt-1] < uxmin) || (gxwork[npt-1] > uxmax)) {; 2236 if (npt > 2) {; 2237 if (optionLine) {; 2238 ComputeLogs(npt, optionZ);; 2239 gPad->PaintPolyLine(npt,gxworkl.data(),gyworkl.data(),noClip);; 2240 }; 2241 }; 2242 gxwork[0] = gxwork[npt-1];; 2243 gywork[0] = gywork[npt-1];; 2244 npt = 1;; 2245 continue;; 2246 }; 2247 if (npt >= fgMaxPointsPerLine) {; 2248 if (optionLine) {; 2249 ComputeLogs(fgMaxPointsPerLine, optionZ);; 2250 gPad->PaintPolyLine(fgMaxPointsPerLine,gxworkl.data(),gyworkl.data());; 2251 }; 2252 gxwork[0] = gxwork[npt-1];; 2253 gywork[0] = gywork[npt-1];; 2254 npt = 1;; 2255 }; 2256 } //endfor (i=first; i<=last;i++); 2257 if (optionLine != 0 && npt > 1) {; 2258 ComputeLogs(npt, optionZ);; 2259 gPad->PaintPolyLine(npt,gxworkl.data(),gyworkl.data(),noClip);; 2260 }; 2261 }; 2262 }; 2263 ; 2264 // Draw the histogram as a bar chart; 2265 ; 2266 if (optionBar) {; 2267 if (!optionBins) {; 2268 offset = delta*baroffset; dbar = delta*barwidth;; 2269 } else {; 2270 if (!optionRot) {; 2271 offset = (x[1]-x[0])*baroffset;; 22",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:81220,ux,uxmin,81220,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"0e-13 ***; ---; Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1; ; Residual standard error: 0.08202 on 8 degrees of freedom; ; Number of iterations to convergence: 7; Achieved convergence tolerance: 2.189e-06; ; Waiting for profiling to be done...; 2.5% 97.5%; p1 1.8206081 1.9442365; p2 0.6794193 0.7209843; e#define e(i)Definition RSha256.hxx:103; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 114 of file TRFunctionImport.h. Public Member Functions;  TRFunctionImport (const TRFunctionImport &fun);  TRFunctionImport copy constructor. ;  ;  TRFunctionImport (const TString &name);  TRFunctionImport constructor. ;  ;  TRFunctionImport (const TString &name, const TString &ns);  TRFunctionImport constructor. ;  ;  TRFunctionImport (SEXP obj);  TRFunctionImport constructor. ;  ;  TRFunctionImport (TRObject &obj);  TRFunctionImport constructor. ;  ;  ~TRFunctionImport ();  ; virtual TClass * IsA () const;  ; SEXP operator() ();  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:4883,Guid,Guide,4883,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html,1,['Guid'],['Guide']
Usability,"0 . ). Method to load a package taking an option list Return -1 on error, 0 otherwise. ; Definition at line 220 of file TPackMgr.cxx. ◆ Log(). void TPackMgr::Log ; (; const char * ; msg). private . Wrapper to notofuer / logger. ; Definition at line 73 of file TPackMgr.cxx. ◆ operator=(). TPackMgr & TPackMgr::operator= ; (; const TPackMgr & ; ). private . ◆ ReadMD5(). TMD5 * TPackMgr::ReadMD5 ; (; const char * ; pack). Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ; Returns a pointer to a TMD5 object, transferring ownership to the caller ; Definition at line 708 of file TPackMgr.cxx. ◆ RegisterGlobalPath(). Int_t TPackMgr::RegisterGlobalPath ; (; const char * ; paths). static . Parse one or more paths as possible sources of packages Returns number of paths added; or -1 in case of problems. ; Definition at line 872 of file TPackMgr.cxx. ◆ Remove(). Int_t TPackMgr::Remove ; (; const char * ; pack = 0, . Bool_t ; dolock = kTRUE . ). Remove package 'pack' If 'pack' is null or empty all packages are cleared. ; Definition at line 593 of file TPackMgr.cxx. ◆ SetLogger(). void TPackMgr::SetLogger ; (; TPackMgrLog_t ; logger). inline . Definition at line 67 of file TPackMgr.h. ◆ SetName(). void TPackMgr::SetName ; (; const char * ; name). inlineoverridevirtual . Set the name of the TNamed. ; WARNING: if the object is a member of a THashTable or THashList container the container must be Rehash()'ed after SetName(). For example the list of objects in the current directory is a THashList. ; Reimplemented from TNamed.; Definition at line 62 of file TPackMgr.h. ◆ SetPrefix(). void TPackMgr::SetPrefix ; (; const char * ; pfx). inline . Definition at line 68 of file TPackMgr.h. ◆ Show(). void TPackMgr::Show ; (; const char * ; title = 0). Show available packages. ; Definition at line 548 of file TPackMgr.cxx. ◆ ShowEnabled(). void TPackMgr::ShowEnabled ; (; const char * ; title = 0). Show enabled packages. ; Definition at line 662 of file TPackMgr.cxx. ◆ Streamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:22512,clear,cleared,22512,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['clear'],['cleared']
Usability,"1 (Double_t y1);  ; virtual void SetY2 (Double_t y2);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSliderBox.html:6310,Clear,Clear,6310,doc/master/classTSliderBox.html,https://root.cern,https://root.cern/doc/master/classTSliderBox.html,2,['Clear'],['Clear']
Usability,"1 for (auto i = 0; i < 3; i++); 1812 if (TMath::Abs(tr[i] - otr[i]) > 1.E-10); 1813 return kFALSE;; 1814 const Double_t *rot = GetRotationMatrix();; 1815 const Double_t *orot = other.GetRotationMatrix();; 1816 for (auto i = 0; i < 9; i++); 1817 if (TMath::Abs(rot[i] - orot[i]) > 1.E-10); 1818 return kFALSE;; 1819 return kTRUE;; 1820}; 1821 ; 1822////////////////////////////////////////////////////////////////////////////////; 1823/// Composition; 1824 ; 1825TGeoCombiTrans &TGeoCombiTrans::operator*=(const TGeoMatrix &right); 1826{; 1827 Multiply(&right);; 1828 return *this;; 1829}; 1830 ; 1831TGeoCombiTrans TGeoCombiTrans::operator*(const TGeoMatrix &right) const; 1832{; 1833 TGeoHMatrix h = *this;; 1834 h *= right;; 1835 return h;; 1836}; 1837 ; 1838////////////////////////////////////////////////////////////////////////////////; 1839/// destructor; 1840 ; 1841TGeoCombiTrans::~TGeoCombiTrans(); 1842{; 1843 if (fRotation) {; 1844 if (TestBit(TGeoMatrix::kGeoMatrixOwned) && !fRotation->IsRegistered()); 1845 delete fRotation;; 1846 }; 1847}; 1848 ; 1849////////////////////////////////////////////////////////////////////////////////; 1850/// Reset translation/rotation to identity; 1851 ; 1852void TGeoCombiTrans::Clear(Option_t *); 1853{; 1854 if (IsTranslation()) {; 1855 ResetBit(kGeoTranslation);; 1856 memset(fTranslation, 0, kN3);; 1857 }; 1858 if (fRotation) {; 1859 if (TestBit(kGeoMatrixOwned)); 1860 delete fRotation;; 1861 fRotation = nullptr;; 1862 }; 1863 ResetBit(kGeoRotation);; 1864 ResetBit(kGeoTranslation);; 1865 ResetBit(kGeoMatrixOwned);; 1866}; 1867 ; 1868////////////////////////////////////////////////////////////////////////////////; 1869/// Return a temporary inverse of this.; 1870 ; 1871TGeoHMatrix TGeoCombiTrans::Inverse() const; 1872{; 1873 TGeoHMatrix h;; 1874 h = *this;; 1875 h.ResetBit(kGeoRegistered);; 1876 Bool_t is_tr = IsTranslation();; 1877 Bool_t is_rot = IsRotation();; 1878 Double_t tr[3];; 1879 Double_t newrot[9];; 1880 const Double_t *ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:64825,Clear,Clear,64825,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Clear'],['Clear']
Usability,"1 }; 812 g1->Draw(""ALP"");; 813 if (g2); 814 g2->Draw(""LP"");; 815}; 816 ; 817////////////////////////////////////////////////////////////////////////////////; 818/// Draw method.; 819 ; 820void TGeoPainter::DrawVolume(TGeoVolume *vol, Option_t *option); 821{; 822 fTopVolume = vol;; 823 fLastVolume = nullptr;; 824 fIsPaintingShape = kFALSE;; 825 // if (fVisOption==kGeoVisOnly ||; 826 // fVisOption==kGeoVisBranch) fGeoManager->SetVisOption(kGeoVisLeaves);; 827 CountVisibleNodes();; 828 TString opt = option;; 829 opt.ToLower();; 830 fPaintingOverlaps = kFALSE;; 831 fOverlap = nullptr;; 832 ; 833 if (fVisLock) {; 834 ClearVisibleVolumes();; 835 fVisLock = kFALSE;; 836 }; 837 Bool_t has_pad = (gPad == nullptr) ? kFALSE : kTRUE;; 838 // Clear pad if option ""same"" not given; 839 if (!gPad) {; 840 gROOT->MakeDefCanvas();; 841 }; 842 if (!opt.Contains(""same"")); 843 gPad->Clear();; 844 // append this volume to pad; 845 fTopVolume->AppendPad(option);; 846 ; 847 // Create a 3-D view; 848 TView *view = gPad->GetView();; 849 if (!view) {; 850 view = TView::CreateView(11, nullptr, nullptr);; 851 // Set the view to perform a first autorange (frame) draw.; 852 // TViewer3DPad will revert view to normal painting after this; 853 view->SetAutoRange(kTRUE);; 854 if (has_pad); 855 gPad->Update();; 856 }; 857 if (!opt.Contains(""same"")); 858 Paint(""range"");; 859 else; 860 Paint(opt);; 861 view->SetAutoRange(kFALSE);; 862 // If we are drawing into the pad, then the view needs to be; 863 // set to perspective; 864 // if (!view->IsPerspective()) view->SetPerspective();; 865 ; 866 fLastVolume = fTopVolume;; 867 ; 868 // Create a 3D viewer to paint us; 869 gPad->GetViewer3D(option);; 870}; 871 ; 872////////////////////////////////////////////////////////////////////////////////; 873/// Draw a shape.; 874 ; 875void TGeoPainter::DrawShape(TGeoShape *shape, Option_t *option); 876{; 877 TString opt = option;; 878 opt.ToLower();; 879 fPaintingOverlaps = kFALSE;; 880 fOverlap = nullptr;; 881 fIsPainti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:27195,Clear,Clear,27195,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"1"").Histo1D(""jet_eta"", ""weight"");; // or the fully compiled version:; df.Filter([] (ULong64_t e) { return e == 1; }, {""event""}).Histo1D<RVec<float>>(""jet_eta"", ""weight"");; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::Histo1DRResultPtr<::TH1D > Histo1D(const TH1DModel &model={"""", """", 128u, 0., 0.}, std::string_view vName="""")Fill and return a one-dimensional histogram with the values of a column (lazy action).Definition RInterface.hxx:1804; . // object selection: for each event, fill histogram with array of selected pts; tree->Draw('Muon_pt', 'Muon_pt > 100'); // with RDF, arrays are read as ROOT::VecOps::RVec objects; df.Define(""good_pt"", ""Muon_pt[Muon_pt > 100]"").Histo1D(""good_pt""); . Crash course; All snippets of code presented in the crash course can be executed in the ROOT interpreter. Simply precede them with using namespace ROOT; // RDataFrame's namespace; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; which is omitted for brevity. The terms ""column"" and ""branch"" are used interchangeably. Creating an RDataFrame; RDataFrame's constructor is where the user specifies the dataset and, optionally, a default set of columns that operations should work with. Here are the most common methods to construct an RDataFrame object: // single file -- all constructors are equivalent; TFile *f = TFile::Open(""file.root"");; TTree *t = f.Get<TTree>(""treeName"");; ; RDataFrame d1(""treeName"", ""file.root"");; RDataFrame d2(""treeName"", f); // same as TTreeReader; RDataFrame d3(*t);; ; // multiple files -- all constructors are equivalent; TChain chain(""myTree"");; chain.Add(""file1.root"");; chain.Add(""file2.root"");; ; RDataFrame d4(""myTree"", {""file1.root"", ""file2.root""});; std::vector<std::string> files = {""file1.root"", ""file2.root""};; RDataFrame d5(""myTree"", files);; RDataFrame d6(""myTre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:14157,Simpl,Simply,14157,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['Simpl'],['Simply']
Usability,"1"").Histo1D(""jet_eta"", ""weight"");; // or the fully compiled version:; df.Filter([] (ULong64_t e) { return e == 1; }, {""event""}).Histo1D<RVec<float>>(""jet_eta"", ""weight"");; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:81; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::Histo1DRResultPtr<::TH1D > Histo1D(const TH1DModel &model={"""", """", 128u, 0., 0.}, std::string_view vName="""")Fill and return a one-dimensional histogram with the values of a column (lazy action).Definition RInterface.hxx:1635; . // object selection: for each event, fill histogram with array of selected pts; tree->Draw('Muon_pt', 'Muon_pt > 100'); // with RDF, arrays are read as ROOT::VecOps::RVec objects; df.Define(""good_pt"", ""Muon_pt[Muon_pt > 100]"").Histo1D(""good_pt""); . Crash course; All snippets of code presented in the crash course can be executed in the ROOT interpreter. Simply precede them with using namespace ROOT; // RDataFrame's namespace; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; which is omitted for brevity. The terms ""column"" and ""branch"" are used interchangeably. Creating an RDataFrame; RDataFrame's constructor is where the user specifies the dataset and, optionally, a default set of columns that operations should work with. Here are the most common methods to construct an RDataFrame object: // single file -- all constructors are equivalent; TFile *f = TFile::Open(""file.root"");; TTree *t = f.Get<TTree>(""treeName"");; ; RDataFrame d1(""treeName"", ""file.root"");; RDataFrame d2(""treeName"", f); // same as TTreeReader; RDataFrame d3(*t);; ; // multiple files -- all constructors are equivalent; TChain chain(""myTree"");; chain.Add(""file1.root"");; chain.Add(""file2.root"");; ; RDataFrame d4(""myTree"", {""file1.root"", ""file2.root""});; std::vector<std::string> files = {""file1.root"", ""file2.root""};; RDataFrame d5(""myTree"", files);; RDataFrame d6(""myTre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:13768,Simpl,Simply,13768,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['Simpl'],['Simply']
Usability,"1(const RooArgSet* set1); Int_tentries() const; Int_tindex(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); voidinitialize(const RooNormSetCache& other); virtual TClass*IsA() const; const RooArgSet*lastSet1() const; const RooArgSet*lastSet2() const; const RooNameSet&nameSet1() const; const RooNameSet&nameSet2() const; RooNormSetCache&operator=(const RooNormSetCache&); RooNormSetCache(ULong_t max = 32); RooNormSetCache(const RooNormSetCache&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. ULong_t_max!; RooNameSet_name1!; RooNameSet_name2!; ULong_t_next!; RooNormSetCache::PairIdxMapType_pairToIdx!; RooNormSetCache::PairVectType_pairs!; TNamed*_set2RangeName!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNormSetCache(ULong_t max = 32). ~RooNormSetCache(); Destructor. void clear(); Clear contents. void add(const RooArgSet* set1, const RooArgSet* set2 = 0); Add given pair of RooArgSet pointers to our store. Bool_t autoCache(const RooAbsArg* self, const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0, Bool_t autoRefill = kTRUE); If RooArgSets set1 and set2 or sets with similar contents have; been seen by this cache manager before return kFALSE If not,; return kTRUE. If sets have not been seen and doRefill is true,; update cache reference to current input sets. RooNormSetCache(ULong_t max = 32). Int_t index(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); Match range name first. Bool_t contains(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); { return (index(set1,set2,set2RangeName) >= 0); }. Bool_t containsSet1(const RooArgSet* set1). const RooArgSet* lastSet1() const; { return _pairs.empty()?0:_pairs.back().first; }. const RooArgSet* lastSet2() const; { return _pairs.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNormSetCache.html:2439,clear,clear,2439,root/html602/RooNormSetCache.html,https://root.cern,https://root.cern/root/html602/RooNormSetCache.html,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"1) | image height | image width; # - Batch Layout : batch size | number of channels | image size = (height*width); ; # Then one add Convolutional layers and MaxPool layers.; ; # - For Convolutional layer the option string has to be:; # - CONV | number of units | filter height | filter width | stride height | stride width | padding height | paddig; # width | activation function; ; # - note in this case we are using a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; # conv layer equal to the input; ; # - note we use after the first convolutional layer a batch normalization layer. This seems to help significantly the; # convergence; ; # - For the MaxPool layer:; # - MAXPOOL | pool height | pool width | stride height | stride width; ; # The RESHAPE layer is needed to flatten the output before the Dense layer; ; # Note that to run the CNN is required to have CPU or GPU support; ; ; if useTMVACNN:; # Training strategies.; trainingString1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0""; ); trainingString1 += "",MaxEpochs="" + str(max_epochs); ; ## New DL (CNN); cnnMethodName = ""TMVA_CNN_CPU""; cnnOptions = ""CPU""; # use GPU if available; if hasGPU:; cnnOptions = ""GPU""; cnnMethodName = ""TMVA_CNN_GPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; cnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIER"",; InputLayout=""1|16|16"",; Layout=""CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR"",; TrainingStrategy=trainingString1,; Architecture=cnnOptions,; ); ; ; ### Book Convolutional Neural Network in Keras using a generated model; ; ; if usePyTorchCNN:; ROOT.Info(""TMVA_CNN_Classification"", ""Using Convolutional PyTorch Model""); pyTorchFileName = str(ROOT.gROOT.GetTutorialDir());",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:12081,Learn,LearningRate,12081,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['Learn'],['LearningRate']
Usability,"1)) / 2 + j ; Definition at line 166 of file CholeskyDecomp.h. ◆ Invert() [2/2]. template<class F , unsigned N> . template<class M > . bool ROOT::Math::CholeskyDecomp< F, N >::Invert ; (; M & ; m); const. inline . place the inverse into m ; This is the method to use with an SMatrix.; Returnsif the decomposition was successful ; Definition at line 149 of file CholeskyDecomp.h. ◆ ok(). template<class F , unsigned N> . bool ROOT::Math::CholeskyDecomp< F, N >::ok ; (; ); const. inline . returns true if decomposition was successful ; Returnstrue if decomposition was successful ; Definition at line 123 of file CholeskyDecomp.h. ◆ operator bool(). template<class F , unsigned N> . ROOT::Math::CholeskyDecomp< F, N >::operator bool ; (; ); const. inline . returns true if decomposition was successful ; Returnstrue if decomposition was successful ; Definition at line 126 of file CholeskyDecomp.h. ◆ Solve(). template<class F , unsigned N> . template<class V > . bool ROOT::Math::CholeskyDecomp< F, N >::Solve ; (; V & ; rhs); const. inline . solves a linear system for the given right hand side ; Note that you can use both SVector classes and plain arrays for rhs. (Make sure that the sizes match!). It will work with any vector implementing the operator [i]; Returnsif the decomposition was successful ; Definition at line 136 of file CholeskyDecomp.h. Member Data Documentation. ◆ fL. template<class F , unsigned N> . F ROOT::Math::CholeskyDecomp< F, N >::fL[N *(N+1)/2]. private . lower triangular matrix L ; lower triangular matrix L, packed storage, with diagonal elements pre-inverted ; Definition at line 82 of file CholeskyDecomp.h. ◆ fOk. template<class F , unsigned N> . bool ROOT::Math::CholeskyDecomp< F, N >::fOk. private . flag indicating a successful decomposition ; Definition at line 84 of file CholeskyDecomp.h. math/smatrix/inc/Math/CholeskyDecomp.h. ROOTMathCholeskyDecomp. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html:7648,Guid,Guide,7648,doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,1,['Guid'],['Guide']
Usability,"1); virtual Bool_tAdd(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual Bool_tAdd(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidAddDirectory(Bool_t add = kTRUE); static Bool_tAddDirectoryStatus(); virtual Double_tAndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tAndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); virtual Double_tChi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tChi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tChisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* f1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:18266,Clear,Clear,18266,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['Clear'],['Clear']
Usability,"1); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidDrawFocusHilite(Int_t onoff); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidGotFocus(); virtual voidLostFocus(); voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGColorPalette&operator=(const TGColorPalette&); TGColorPalette(const TGColorPalette&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGColorPalette.html:14535,Clear,ClearFlags,14535,root/html602/TGColorPalette.html,https://root.cern,https://root.cern/root/html602/TGColorPalette.html,2,['Clear'],['ClearFlags']
Usability,"1, 0.7100883, 0.6938808, 0.7363682,; 0.7032954, 0.6029015, 0.5600163, 0.7477068, 1.188785, 1.938228, 2.602717,; 3.472962, 4.465014, 5.177035, ], dtype=np.float32,); # fmt: on; ; # The histogram are filled with bins defined in the array x.; h = ROOT.TH1F(""h"", ""Example of several fits in subranges"", n_x, 85, 134); h.SetMaximum(7); ; for i, x_i in enumerate(x):; h.SetBinContent(i + 1, x[i]); ; # Define the parameter array for the total function.; par = np.zeros(9); ; # Three TF1 objects are created, one for each subrange.; g1 = ROOT.TF1(""g1"", ""gaus"", 85, 95); g2 = ROOT.TF1(""g2"", ""gaus"", 98, 108); g3 = ROOT.TF1(""g3"", ""gaus"", 110, 121); ; # The total is the sum of the three, each has three parameters.; total = ROOT.TF1(""total"", ""gaus(0)+gaus(3)+gaus(6)"", 85, 125); total.SetLineColor(2); ; # The canvas that the histograms and fit functions are drawn on.; c = ROOT.TCanvas(""multifit"", ""multifit"", 800, 400); ; # Fit each function and add it to the list of functions. By default, TH1::Fit(); # fits the function on the defined histogram range. You can specify the ""R""; # option in the second parameter of TH1::Fit() to restrict the fit to the range; # specified in the TF1 constructor. Alternatively, you can also specify the; # range in the call to TH1::Fit(), which we demonstrate here with the 3rd; # Gaussian. The ""+"" option needs to be added to the later fits to not replace; # existing fitted functions in the histogram.; h.Fit(g1, ""R""); h.Fit(g2, ""R+""); h.Fit(g3, ""+"", """", 110, 121);; ; # Get the parameters from the fit.; g1.GetParameters(par[:3]); g2.GetParameters(par[3:6]); g3.GetParameters(par[6:]); ; print(par); ; # Use the parameters on the sum.; total.SetParameters(par); ; h.Draw(); h.Fit(total, ""R+""); ; # Save the plot for later inspection.; c.SaveAs(""multifit.png""); AuthorsJonas Rembser, Rene Brun (C++ version) ; Definition in file multifit.py. tutorialsfitmultifit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/multifit_8py.html:4456,Guid,Guide,4456,doc/master/multifit_8py.html,https://root.cern,https://root.cern/doc/master/multifit_8py.html,1,['Guid'],['Guide']
Usability,"1, Float_t phi2);  TUBS shape ""simplified"" constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape normal constructor. ;  ;  ~TTUBS () override;  TUBS shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetPhi1 () const;  ; virtual Float_t GetPhi2 () const;  ; TClass * IsA () const override;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; virtual Float_t GetAspectRatio () const;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_t ndiv);  Set number of divisions used to draw this tube. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTUBS.html:1961,simpl,simplified,1961,doc/master/classTTUBS.html,https://root.cern,https://root.cern/doc/master/classTTUBS.html,3,['simpl'],['simplified']
Usability,"1, Option_t *option="""") constTGeoVolume; CheckShape(Int_t testNo, Int_t nsamples=10000, Option_t *option="""")TGeoVolume; CheckShapes()TGeoVolume; Class()TGeoVolumestatic; Class_Name()TGeoVolumestatic; Class_Version()TGeoVolumeinlinestatic; ClassName() constTObjectvirtual; CleanAll()TGeoVolume; Clear(Option_t *option="""") overrideTNamedvirtual; ClearNodes()TGeoVolumeinline; ClearShape()TGeoVolume; ClearThreadData() constTGeoVolumevirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneNodesAndConnect(TGeoVolume *newmother) constTGeoVolume; CloneVolume() constTGeoVolumevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Contains(const Double_t *point) constTGeoVolumeinline; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; CountNodes(Int_t nlevels=1000, Int_t option=0)TGeoVolume; CreateDummyMedium()TGeoVolumestatic; CreateThreadData(Int_t nthreads)TGeoVolumevirtual; DeclFileName()TGeoVolumeinlinestatic; Delete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume-members.html:1239,Clear,Clear,1239,doc/master/classTGeoVolume-members.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume-members.html,4,['Clear'],"['Clear', 'ClearNodes', 'ClearShape', 'ClearThreadData']"
Usability,"1, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCountNodes(TGeoVolume* vol, Int_t level) const; virtual Int_tCountVisibleNodes(); virtual voidDefaultAngles(); virtual voidDefault",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPainter.html:1672,Clear,Clear,1672,root/html528/TGeoPainter.html,https://root.cern,https://root.cern/root/html528/TGeoPainter.html,1,['Clear'],['Clear']
Usability,"1, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual Int_tCountVisibleNodes(); virtual voidDefaultAngles(); virtual voidDefaultColors(); virtual voidTObject::Delete(Option_t* opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualGeoPainter.html:1674,Clear,Clear,1674,root/html528/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html528/TVirtualGeoPainter.html,1,['Clear'],['Clear']
Usability,"1, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); virtual voidCheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCountNodes(TGeoVolume* vol, Int_t level)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPainter.html:1762,Clear,Clear,1762,root/html530/TGeoPainter.html,https://root.cern,https://root.cern/root/html530/TGeoPainter.html,3,['Clear'],['Clear']
Usability,"1, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); virtual voidCheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual Int_tCountVisibleNodes(); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualGeoPainter.html:1764,Clear,Clear,1764,root/html530/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html530/TVirtualGeoPainter.html,3,['Clear'],['Clear']
Usability,"1, Option_t* option = """")MENU ; voidTGeoNode::CheckShapes(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTGeoNode::CountDaughters(Bool_t unique_volumes = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoNode::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGeoNode::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidTGeoNode::DrawOnly(Option_t* option = """"); voidTGeoNode::DrawOverlaps(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoNode::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeMatrix.html:899,Clear,Clear,899,root/html528/TGeoNodeMatrix.html,https://root.cern,https://root.cern/root/html528/TGeoNodeMatrix.html,4,['Clear'],['Clear']
Usability,"1, VI2, VI3, VI4 >::printArgs ; (; std::ostream & ; os); const. inlineoverridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 234 of file RooCFunction4Binding.h. ◆ Streamer(). template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . void RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . void RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 262 of file RooCFunction4Binding.h. Member Data Documentation. ◆ func. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >::func. protected . Definition at line 249 of file RooCFunction4Binding.h. ◆ w. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooRealProxy RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >::w. protected . Definition at line 253 of file RooCFunction4Binding.h. ◆ x. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooRealProxy RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >::x. protected . Definition at line 250 of file RooCFunction4Binding.h. ◆ y. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooRealProxy RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >::y. protected . Definition at line 251 of file RooCFunction4Binding.h. ◆ z. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooRealProxy RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >::z. protected . Definition at line 252 of file RooCFunction4Binding.h. roofit/roofit/inc/RooCFunction4Binding.h. RooCFunction4Binding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4Binding.html:65683,Guid,Guide,65683,doc/master/classRooCFunction4Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4Binding.html,1,['Guid'],['Guide']
Usability,"1,1]; : Create parameter interval for parameter 1 : [-10,10]; : Create parameter interval for parameter 2 : [-10,10]; : Create parameter interval for parameter 3 : [-10,10]; : Create parameter interval for parameter 4 : [-10,10]; : User-defined formula string : ""(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3""; : TFormula-compatible formula string: ""[0]+[1]*[5]+[2]*[6]+[3]*[7]+[4]*[8]""; Factory : Booking method: ␛[1mMLPBNN␛[0m; : ; MLPBNN : [dataset] : Create Transformation ""N"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'myvar1' <---> Output : variable 'myvar1'; : Input : variable 'myvar2' <---> Output : variable 'myvar2'; : Input : variable 'var3' <---> Output : variable 'var3'; : Input : variable 'var4' <---> Output : variable 'var4'; MLPBNN : Building Network. ; : Initializing weights; Factory : Booking method: ␛[1mDNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:WeightInitialization=XAVIERUNIFORM:Layout=TANH|128,TANH|128,TANH|128,LINEAR:TrainingStrategy=LearningRate=1e-2,Momentum=0.9,ConvergenceSteps=20,BatchSize=100,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,DropConfig=0.0+0.5+0.5+0.5:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:WeightInitialization=XAVIERUNIFORM:Layout=TANH|128,TANH|128,TANH|128,LINEAR:TrainingStrategy=LearningRate=1e-2,Momentum=0.9,ConvergenceSteps=20,BatchSize=100,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,DropConfig=0.0+0.5+0.5+0.5:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""N"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-tran",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:5842,Learn,LearningRate,5842,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Learn'],['LearningRate']
Usability,"1,A2: Original axis limits ; [in]BinLow,BinHigh: Optimized axis limits. They should be initialized by the calling method for instance to 0. ; [out]nold: Original number of divisions. ; [out]nbins: Optimized number of divisions. ; [out]BinWidth: Optimized bin width. It should be initialized by the calling method for instance to 0. ; [in]option: ""T"" means Time axis. . Definition at line 184 of file THLimitsFinder.cxx. ◆ OptimizeLimits(). void THLimitsFinder::OptimizeLimits ; (; Int_t ; nbins, . Int_t & ; newbins, . Double_t & ; xmin, . Double_t & ; xmax, . Bool_t ; isInteger . ). static . Optimize axis limits. ; When isInter=kTRUE, the function makes an integer binwidth and recompute the number of bins accordingly. ; Definition at line 367 of file THLimitsFinder.cxx. ◆ SetLimitsFinder(). void THLimitsFinder::SetLimitsFinder ; (; THLimitsFinder * ; finder). static . This static function can be used to specify a finder derived from THLimitsFinder. ; The finder may redefine the functions FindGoodLimits. Note that the redefined functions may call THLimitsFinder::FindGoodLimits. ; Definition at line 165 of file THLimitsFinder.cxx. ◆ Streamer(). void THLimitsFinder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TProofLimitsFinder. ◆ StreamerNVirtual(). void THLimitsFinder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 46 of file THLimitsFinder.h. Member Data Documentation. ◆ fgLimitsFinder. THLimitsFinder * THLimitsFinder::fgLimitsFinder = nullptr. staticprotected . ! Pointer to hist limits finder ; Definition at line 31 of file THLimitsFinder.h. Libraries for THLimitsFinder:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THLimitsFinder.h; hist/hist/src/THLimitsFinder.cxx. THLimitsFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHLimitsFinder.html:16548,Guid,Guide,16548,doc/master/classTHLimitsFinder.html,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html,1,['Guid'],['Guide']
Usability,"1.)THnBase; AddBinContent(const Int_t *idx, Double_t v=1.)THninline; AddBinContent(Long64_t bin, Double_t v=1.) overrideTHninlinevirtual; AddBinError2(Long64_t bin, Double_t e2) overrideTHninlinevirtual; AddInternal(const THnBase *h, Double_t c, Bool_t rebinned)THnBaseprotected; AddToTObjectTable(TObject *)TObjectprivatestatic; AllocCoordBuf() constTHnprotected; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTHnBasevirtual; CalculateErrors(Bool_t calc=kTRUE)THnBaseinline; CheckConsistency(const THnBase *h, const char *tag) constTHnBaseprotected; CheckedHash()TObjectinline; Class()THnstatic; Class_Name()THnstatic; Class_Version()THninlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneEmpty(const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis) constTHnBaseprotected; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral()THnBase; Copy(TObject &named) const overrideTNamedvirtual; CreateHist(const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis) constTHnBaseprotected; CreateHn(const char *name, const char *title, const TH1 *h1)THninlinestatic; CreateHn(const char *name, const char *title, const THnBase *hn)THninlinestatic; CreateHnAny(const char *name, const char *title, const TH1 *h1, Bool_t sparse, Int_t chunkSize=1024 *16)THnBaseprotectedstatic; CreateHnAny(const char *name, const char *title, const THnBase *hn, Bool_t sparse, Int_t chunkSize=1024 *16)THnBaseprotectedstatic; CreateIter(Bool_t respectAxisRange) const overrideTHnvirtual; DeclFileName()THninlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; Divide(const THnBase *h)THnBase; Divide(const THnBase *h1, const THnBase *h2, Double_t c1=1., Double_t c2=1., Option_t *option="""")THnBase; DoError(int level, const char *location, const char *fmt, va_li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn-members.html:1037,Clear,Clear,1037,doc/master/classTHn-members.html,https://root.cern,https://root.cern/doc/master/classTHn-members.html,1,['Clear'],['Clear']
Usability,"1.0000 1.0000 ]; : myvar2: -0.090751 0.29609 [ -1.0000 1.0000 ]; : var3: 0.059878 0.21436 [ -1.0000 1.0000 ]; : var4: 0.11587 0.24261 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 4 ) Batch size = 100 Loss function = C; Layer 0 DENSE Layer: ( Input = 4 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 128 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh Dropout prob. = 0.5; Layer 2 DENSE Layer: ( Input = 128 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh Dropout prob. = 0.5; Layer 3 DENSE Layer: ( Input = 128 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity Dropout prob. = 0.5; : Using 1600 events for training and 400 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.01 regularization 0 minimum error = 0.699892; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.548477 0.466013 0.191275 0.014698 9061.23 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.431501 0.379356 0.191981 0.0145985 9020.06 0; : 3 | 0.40241 0.379482 0.19151 0.014162 9021.8 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.408996 0.379041 0.192713 0.0146534 8985.76 0; : 5 | 0.41143 0.414316 0.191728 0.014237 9014.55 1; : 6 | 0.385066 0.478603 0.19226 0.0142608 8988.82 2; : 7 | 0.404168 0.388159 0.192259 0.0142353 8987.58 3; : 8 Minimum Test error found - save the configuration ; : 8 | 0.394387 0.377539 0.19273 0.0147168 8988.1 0; : 9 Minimum Test error found - save the configuration ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:47079,Learn,Learning,47079,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Learn'],['Learning']
Usability,"1.3 MnSimplex(const FCNBase&, const MnUserParameterState&,. const MnStrategy&) ###; Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.11.4 operator(); MnSimplex::operator()(unsigned int maxfcn, double tolerance) causes minimization of the \(\mbox{FCN}\) and returns the result in form of a FunctionMinimum. Minimization terminates either when the function has been called (approximately) \(\mbox{maxfcn}\) times, or when the estimated vertical distance to minimum (\(\mbox{EDM}\)) is less than \(\mbox{tolerance*up}\). The default value of \(\mbox{tolerance}\) is \(\mbox{0.1}\). (see [howto:errordef]).; 5.11.5 Parameter interaction; MnSimplex retains the result after each minimization (MnUserParameterStae, see [api:state]) and forwards the interface for parameter interaction.; 5.11.6 SimplexMinimizer(); The SimplexMinimizer() is instantiated using default constructor.; 5.11.7 minimize(const FCNBase&, …); The SimplexMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.12 MnStrategy; [api:strategy] Sets the strategy to be used in calculating first and second derivatives and in certain minimization methods. In general, low values of \(\mbox{level}\) mean fewer function calls and high values mean more reliable minimization. Currently allowed values are 0 (low), 1 (default), and 2 (high).; 5.12.1 MnStrategy(); Default constructor, sets all settings according to \(\mbox{level}\)$ = 1.$; 5.12.2 MnStrategy(unsigned int level); Explicit constructor for predefined settings of desired \(\mbox{level}\) 0 (low), 1 (default), or 2 (high).; 5.12.3 setLowStrategy(), setMediumStrategy(), setHighStrategy(); Methods to set specific strategy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:51702,Simpl,SimplexMinimizer,51702,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['Simpl'],['SimplexMinimizer']
Usability,"1.cxx:1439; TF1::GetParametervirtual Double_t GetParameter(Int_t ipar) constDefinition TF1.h:540; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TSpectrumAdvanced Spectra Processing.Definition TSpectrum.h:18; TSpectrum::Backgroundvirtual TH1 * Background(const TH1 *hist, Int_t niter=20, Option_t *option="""")One-dimensional background estimation function.Definition TSpectrum.cxx:145; TSpectrum::Searchvirtual Int_t Search(const TH1 *hist, Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05)One-dimensional peak search function.Definition TSpectrum.cxx:259; TSpectrum::GetPositionXDouble_t * GetPositionX() constDefinition TSpectrum.h:58; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; c1return c1Definition legend1.C:41; PyTorch_Generate_CNN_Model.fitfit(model, train_loader, val_loader, num_epochs, batch_size, optimizer, criterion, save_best, scheduler)Definition PyTorch_Generate_CNN_Model.py:34; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::GausDouble_t Gaus(Double_t x, Double_t mean=0, Double_t sigma=1, Bool_t norm=kFALSE)Calculates a gaussian function with mean and sigma.Definition TMath.cxx:471; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TMath::TwoPiconstexpr Double_t TwoPi()Definition TMath.h:44; AuthorRene Brun ; Definition in file peaks.C. tutorialsspectrumpeaks.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/peaks_8C.html:8430,Guid,Guide,8430,doc/master/peaks_8C.html,https://root.cern,https://root.cern/doc/master/peaks_8C.html,1,['Guid'],['Guide']
Usability,"1//; 2852/// - kMissingBranch (-5) : Missing branch; 2853/// - kInternalError (-4) : Internal error (could not find the type corresponding to a data type number); 2854/// - kMissingCompiledCollectionProxy (-3) : Missing compiled collection proxy for a compiled collection; 2855/// - kMismatch (-2) : Non-Class Pointer type given does not match the type expected by the branch; 2856/// - kClassMismatch (-1) : Class Pointer type given does not match the type expected by the branch; 2857/// - kMatch (0) : perfect match; 2858/// - kMatchConversion (1) : match with (I/O) conversion; 2859/// - kMatchConversionCollection (2) : match with (I/O) conversion of the content of a collection; 2860/// - kMakeClass (3) : MakeClass mode so we can not check.; 2861/// - kVoidPtr (4) : void* passed so no check was made.; 2862/// - kNoCheck (5) : Underlying TBranch not yet available so no check was made.; 2863/// In addition this can be multiplexed with the two bits:; 2864/// - kNeedEnableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to be in Decomposed Object (aka MakeClass) mode.; 2865/// - kNeedDisableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to not be in Decomposed Object (aka MakeClass) mode.; 2866/// This bits can be masked out by using kDecomposedObjMask; 2867 ; 2868Int_t TTree::CheckBranchAddressType(TBranch* branch, TClass* ptrClass, EDataType datatype, bool isptr); 2869{; 2870 if (GetMakeClass()) {; 2871 // If we are in MakeClass mode so we do not really use classes.; 2872 return kMakeClass;; 2873 }; 2874 ; 2875 // Let's determine what we need!; 2876 TClass* expectedClass = nullptr;; 2877 EDataType expectedType = kOther_t;; 2878 if (0 != branch->GetExpectedType(expectedClass,expectedType) ) {; 2879 // Something went wrong, the warning message has already been issued.; 2880 return kInternalError;; 2881 }; 2882 bool isBranchElement = branch->InheritsFrom( TBranchElement::Class() );; 2883 if (expectedClass && dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:112945,usab,usable,112945,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['usab'],['usable']
Usability,1/2]. RooExpensiveObjectCache::RooExpensiveObjectCache ; (; ). inline . Definition at line 27 of file RooExpensiveObjectCache.h. ◆ RooExpensiveObjectCache() [2/2]. RooExpensiveObjectCache::RooExpensiveObjectCache ; (; const RooExpensiveObjectCache & ; other). inline . Definition at line 28 of file RooExpensiveObjectCache.h. ◆ ~RooExpensiveObjectCache(). RooExpensiveObjectCache::~RooExpensiveObjectCache ; (; ). override . Destructor. ; Definition at line 45 of file RooExpensiveObjectCache.cxx. Member Function Documentation. ◆ Class(). static TClass * RooExpensiveObjectCache::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooExpensiveObjectCache::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooExpensiveObjectCache::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file RooExpensiveObjectCache.h. ◆ clearAll(). void RooExpensiveObjectCache::clearAll ; (; ). Clear all cache elements. ; Definition at line 164 of file RooExpensiveObjectCache.cxx. ◆ clearObj(). bool RooExpensiveObjectCache::clearObj ; (; Int_t ; uniqueID). Clear cache element with given unique ID Retrieve payload object of cache element with given unique ID. ; Definition at line 131 of file RooExpensiveObjectCache.cxx. ◆ DeclFileName(). static const char * RooExpensiveObjectCache::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file RooExpensiveObjectCache.h. ◆ empty(). bool RooExpensiveObjectCache::empty ; (; ); const. inline . Definition at line 44 of file RooExpensiveObjectCache.h. ◆ getObj(). const TObject * RooExpensiveObjectCache::getObj ; (; Int_t ; uniqueID). Retrieve payload object of cache element with given unique ID. ; Definition at line 115 of file RooExpensiveObjectCache.cxx. ◆ importCacheObjects(). void RooExpensiveObjectCache::importCacheObjects ; (; RooExpensiveObj,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExpensiveObjectCache.html:12836,clear,clearAll,12836,doc/master/classRooExpensiveObjectCache.html,https://root.cern,https://root.cern/doc/master/classRooExpensiveObjectCache.html,1,['clear'],['clearAll']
Usability,"1/2]. THYPE::THYPE ; (; ). HYPE shape default constructor. ; Definition at line 34 of file THYPE.cxx. ◆ THYPE() [2/2]. THYPE::THYPE ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmin, . Float_t ; rmax, . Float_t ; dz, . Float_t ; phi . ). HYPE shape normal constructor. ; Definition at line 42 of file THYPE.cxx. ◆ ~THYPE(). THYPE::~THYPE ; (; ). override . HYPE shape default destructor. ; Definition at line 52 of file THYPE.cxx. Member Function Documentation. ◆ Class(). static TClass * THYPE::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * THYPE::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t THYPE::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file THYPE.h. ◆ DeclFileName(). static const char * THYPE::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 41 of file THYPE.h. ◆ GetPhi(). virtual Float_t THYPE::GetPhi ; (; ); const. inlinevirtual . Definition at line 39 of file THYPE.h. ◆ IsA(). TClass * THYPE::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 41 of file THYPE.h. ◆ Streamer(). void THYPE::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void THYPE::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 41 of file THYPE.h. Member Data Documentation. ◆ fPhi. Float_t THYPE::fPhi. protected . Definition at line 31 of file THYPE.h. Libraries for THYPE:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/THYPE.h; graf3d/g3d/src/THYPE.cxx. THYPE. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHYPE.html:20913,Guid,Guide,20913,doc/master/classTHYPE.html,https://root.cern,https://root.cern/doc/master/classTHYPE.html,1,['Guid'],['Guide']
Usability,"10):FitMethod=GA:PopSize=300:Cycles=3:Steps=20:Trim=True:SaveBestGen=1"" );; if (Use[""PDEFoam""]) // PDE-Foam approach; factory->BookMethod( dataloader, TMVA::Types::kPDEFoam, ""PDEFoam"", ""!H:!V:TailCut=0.001:VolFrac=0.0666:nActiveCells=500:nSampl=2000:nBin=5:Nmin=100:Kernel=None:Compress=T"" );; ; ; if (Use[""DL_CPU""]) {; TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; nnOptions.Append("":"");; nnOptions.Append(layoutString);; nnOptions.Append("":"");; nnOptions.Append(trainingStrategyString);; factory->BookMethod(dataloader, TMVA::Types::kDL, ""DL_CPU"", nnOptions);; }; if (Use[""DL_GPU""]) {; TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; nnOptions.Append("":"");; nnOptions.Append(layoutString);; nnOptions.Append("":"");; nnOptions.Append(trainingStrategyString);; factory->BookMethod(dataloader, TMVA::Types::kDL, ""DL_GPU"", nnOptions);; }; ; ; // Train MVAs using the set of training events; factory->TrainAllMethods();; ; // Evaluate all MVAs using the set of test events; factory->TestAllMethods();; ; // Evaluate and compare performance of all configured MVAs; factory->EvaluateAllMethods();; ; // --------------------------------------------------------------; ; // Save the output; outputFile->Close();; ; std::cout << ""==> Wrote root file: "" << outputFile->GetName() << std::endl;; std::cout << ""==> TMVAMulticlass is done!"" << std::endl;; ; delete factory;; delete dataloader;; ; // Launch the GUI fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:36541,Learn,LearningRate,36541,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Learn'],['LearningRate']
Usability,"10,10). Definition at line 5 of file legend1.C. ◆ leg. leg = new TLegend(0.1,0.7,0.48,0.9). Definition at line 34 of file legend1.C. ◆ n. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t n = 20. Definition at line 16 of file legend1.C. ◆ x. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h x. Definition at line 17 of file legend1.C. ◆ y. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h y. Definition at line 17 of file legend1.C. graf2dgrafdocmacroslegend1.C. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/legend1_8C.html:4717,Guid,Guide,4717,doc/v632/legend1_8C.html,https://root.cern,https://root.cern/doc/v632/legend1_8C.html,1,['Guid'],['Guide']
Usability,"1000);  Set tool tip text associated with this box. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaletteAxis.html:13304,Clear,Clear,13304,doc/master/classTPaletteAxis.html,https://root.cern,https://root.cern/doc/master/classTPaletteAxis.html,4,['Clear'],['Clear']
Usability,"1000000000.00000011920929 Classical: 1000000000; }; d#define d(i)Definition RSha256.hxx:102; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvaglob.cxx:176; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; ; Kahan: 1000000000.00000011920929 Classical: 1000000000.00000011920929; DateJuly 2018 ; AuthorsEnrico Guiraud, Danilo Piparo (CERN), Massimo Tumolo (Politecnico di Torino) ; Definition in file df022_useKahan.C. tutorialsdataframedf022_useKahan.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df022__useKahan_8C.html:4307,Guid,Guide,4307,doc/master/df022__useKahan_8C.html,https://root.cern,https://root.cern/doc/master/df022__useKahan_8C.html,1,['Guid'],['Guide']
Usability,"10000000000000001, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); virtual voidCheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCountNodes(TGeoVolume* vol, Int_t level) const; virtual Int_tCountVisibleNodes(); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPainter.html:1712,Clear,Clear,1712,root/html602/TGeoPainter.html,https://root.cern,https://root.cern/root/html602/TGeoPainter.html,2,['Clear'],['Clear']
Usability,"10000000000000001, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); virtual voidCheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualGeoPainter.html:1806,Clear,Clear,1806,root/html602/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html602/TVirtualGeoPainter.html,2,['Clear'],['Clear']
Usability,"10000000000000001, Option_t* option = """")MENU ; voidTGeoNode::CheckShapes(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTGeoNode::CountDaughters(Bool_t unique_volumes = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoNode::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGeoNode::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidTGeoNode::DrawOnly(Option_t* option = """"); voidTGeoNode::DrawOverlaps(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoNode::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidTGeoNode::FillIdArray(Int_t& ifree, Int_t& nodeid, Int_t* array) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNodeMatrix.html:832,Clear,Clear,832,root/html602/TGeoNodeMatrix.html,https://root.cern,https://root.cern/root/html602/TGeoNodeMatrix.html,2,['Clear'],['Clear']
Usability,"100;; 71 j2 += 10;; 72 j3 += 1;; 73 j4 -= 9;; 74 j5 += 9;; 75 y = y-bh-db;; 76 }; 77 return Pat;; 78}; b#define b(i)Definition RSha256.hxx:100; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttPad::SetFrameFillColorvoid SetFrameFillColor(Color_t color=1)Definition TAttPad.h:73; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TPad::SetBorderSizevoid SetBorderSize(Short_t bordersize) overrideDefinition TPad.h:326; TPad::Rangevoid Range(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overrideSet world coordinate system for the pad.Definition TPad.cxx:5331; TStyle::SetHatchesSpacingvoid SetHatchesSpacing(Double_t h)Definition TStyle.h:304; TStyle::SetHatchesLineWidthvoid SetHatchesLineWidth(Int_t l)Definition TStyle.h:303; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; fillpatternsTCanvas * fillpatterns(int w=500, int h=700)Definition fillpatterns.C:23; yDouble_t y[n]Definition legend1.C:17; lTLine lDefinition textangle.C:4. corebasedocmacrosfillpatterns.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fillpatterns_8C_source.html:4270,Guid,Guide,4270,doc/master/fillpatterns_8C_source.html,https://root.cern,https://root.cern/doc/master/fillpatterns_8C_source.html,1,['Guid'],['Guide']
Usability,"1034 if (type.at(type.length()-1) == '*') {; 1035 type.at(type.length()-2) = '*';; 1036 type.erase(type.length()-1);; 1037 }; 1038 prototype += type;; 1039 }; 1040 ; 1041 prototype = ""("" + prototype + "")"";; 1042 return true;; 1043 }; 1044 else {; 1045 ShowWarning(""can't convert Decl to FunctionDecl"","""");; 1046 return false;; 1047 }; 1048}; 1049 ; 1050////////////////////////////////////////////////////////////////////////////////; 1051 ; 1052void RScanner::Scan(const clang::ASTContext &C); 1053{; 1054 fSourceManager = &C.getSourceManager();; 1055 ; 1056// if (fVerboseLevel >= 3) fSelectionRules.PrintSelectionRules();; 1057 ; 1058 if (fVerboseLevel > 0 && fSelectionRules.GetHasFileNameRule()) {; 1059 std::cout<<""File name detected""<<std::endl;; 1060 }; 1061 ; 1062 if (fScanType == EScanType::kTwoPasses); 1063 TraverseDecl(C.getTranslationUnitDecl());; 1064 ; 1065 fFirstPass=false;; 1066 fselectedRecordDecls.clear();; 1067 fSelectedEnums.clear();; 1068 fSelectedTypedefs.clear();; 1069 fSelectedVariables.clear();; 1070 fSelectedFunctions.clear();; 1071 TraverseDecl(C.getTranslationUnitDecl());; 1072 ; 1073 // The RecursiveASTVisitor uses range-based for; we must not modify the AST; 1074 // during iteration / visitation. Instead, buffer the lookups that could; 1075 // potentially create new template specializations, and handle them here:; 1076 AddDelayedAnnotatedRecordDecls();; 1077}; 1078 ; 1079 ; 1080////////////////////////////////////////////////////////////////////////////////; 1081/// Set the callback to the RecordDecl and return the previous one.; 1082 ; 1083RScanner::DeclCallback RScanner::SetRecordDeclCallback(RScanner::DeclCallback callback); 1084{; 1085 DeclCallback old = fRecordDeclCallback;; 1086 fRecordDeclCallback = callback;; 1087 return old;; 1088}; IntToStrstd::string IntToStr(int num)Definition Scanner.cxx:161; APIntToLonglong APIntToLong(const llvm::APInt &num)Definition Scanner.cxx:147; gInterpcling::Interpreter * gInterp; AddSpacestd::string AddSpa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Scanner_8cxx_source.html:36815,clear,clear,36815,doc/master/Scanner_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Scanner_8cxx_source.html,1,['clear'],['clear']
Usability,"103| DefineSlotEntry() | Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see [here](\ref helper-cols). |; 104| Filter() | Filter rows based on user-defined conditions. |; 105| Range() | Filter rows based on entry number (single-thread only). |; 106| Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; 107| RedefineSlot() | Overwrite the value and/or type of an existing column. See DefineSlot() for more information. |; 108| RedefineSlotEntry() | Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. |; 109| Vary() | Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). |; 110 ; 111 ; 112### Actions; 113Actions aggregate data into a result. Each one is described in more detail in the reference guide.; 114 ; 115In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; 116 ; 117Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to; 118produce many different results in one event loop. Instant actions trigger the event loop instantly.; 119 ; 120 ; 121| **Lazy action** | **Description** |; 122|------------------|-----------------|; 123| Aggregate() | Execute a user-defined accumulation operation on the processed column values. |; 124| Book() | Book execution of a custom action using a user-defined helper object. |; 125| Cache() | Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). |; 126| Count() | Return the number of events processed. Useful e.g. to get a quick count of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:6700,guid,guide,6700,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['guid'],['guide']
Usability,"107 of file TBranchProxyDescriptor.cxx. ◆ OutputDecl(). void TBranchProxyDescriptor::OutputDecl ; (; FILE * ; hf, . int ; offset, . UInt_t ; maxVarname . ). Output the declaration corresponding to this proxy. ; Definition at line 115 of file TBranchProxyDescriptor.cxx. ◆ OutputInit(). void TBranchProxyDescriptor::OutputInit ; (; FILE * ; hf, . int ; offset, . UInt_t ; maxVarname, . const char * ; prefix . ). Output the initialization corresponding to this proxy. ; Definition at line 123 of file TBranchProxyDescriptor.cxx. ◆ Streamer(). void ROOT::Internal::TBranchProxyDescriptor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::Internal::TBranchProxyDescriptor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file TBranchProxyDescriptor.h. Member Data Documentation. ◆ fBranchIsSkipped. bool ROOT::Internal::TBranchProxyDescriptor::fBranchIsSkipped. private . Definition at line 25 of file TBranchProxyDescriptor.h. ◆ fBranchName. TString ROOT::Internal::TBranchProxyDescriptor::fBranchName. private . Definition at line 23 of file TBranchProxyDescriptor.h. ◆ fDataName. TString ROOT::Internal::TBranchProxyDescriptor::fDataName. private . Definition at line 22 of file TBranchProxyDescriptor.h. ◆ fIsLeafList. bool ROOT::Internal::TBranchProxyDescriptor::fIsLeafList. private . Definition at line 26 of file TBranchProxyDescriptor.h. ◆ fIsSplit. bool ROOT::Internal::TBranchProxyDescriptor::fIsSplit. private . Definition at line 24 of file TBranchProxyDescriptor.h. Libraries for ROOT::Internal::TBranchProxyDescriptor:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TBranchProxyDescriptor.h; tree/treeplayer/src/TBranchProxyDescriptor.cxx. ROOTInternalTBranchProxyDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:16375,Guid,Guide,16375,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,1,['Guid'],['Guide']
Usability,"1098 return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; 1099}; 1100~~~; 1101 ; 1102A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; 1103converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; 1104~~~{.cpp}; 1105// a function that conditionally adds a Range to an RDataFrame node.; 1106RNode MaybeAddRange(RNode df, bool mustAddRange); 1107{; 1108 return mustAddRange ? df.Range(1) : df;; 1109}; 1110// use as :; 1111ROOT::RDataFrame df(10);; 1112auto maybeRangedDF = MaybeAddRange(df, true);; 1113~~~; 1114 ; 1115The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; 1116loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`.; 1117 ; 1118\anchor RDFCollections; 1119### Storing RDataFrame objects in collections; 1120 ; 1121ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:; 1122 ; 1123~~~{.cpp}; 1124std::vector<ROOT::RDF::RNode> dfs;; 1125dfs.emplace_back(ROOT::RDataFrame(10));; 1126dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; 1127~~~; 1128 ; 1129\anchor callbacks; 1130### Executing callbacks every N events; 1131It's possible to schedule execution of arbitrary functions (callbacks) during the event loop.; 1132Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running,; 1133drawing a partially-filled histogram every time a certain number of new entries is processed, or; 1134displaying a progress bar while the event loop runs.; 1135 ; 1136For example one can draw an up-to-date version of a result histogram every 100 entries like this:; 1137~~~{.cpp}; 1138auto h = df.Histo1D(""x"");; 1139TCanvas c(""c"",""x hist"");; 1140h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:65576,simpl,simple,65576,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,"111; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::IsHighlightvirtual Bool_t IsHighlight() constDefinition TH1.h:338; TH1::FindBinvirtual Int_t FindBin(Double_t x, Double_t y=0, Double_t z=0)Return Global bin number corresponding to x,y,z.Definition TH1.cxx:3672; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::GetSelectedRowsvirtual Long64_t GetSelectedRows()Definition TTree.h:553; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlHisto3_8C.html:7324,simpl,simple,7324,doc/master/hlHisto3_8C.html,https://root.cern,https://root.cern/doc/master/hlHisto3_8C.html,1,['simpl'],['simple']
Usability,"1138 return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; 1139}; 1140~~~; 1141 ; 1142A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; 1143converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; 1144~~~{.cpp}; 1145// a function that conditionally adds a Range to an RDataFrame node.; 1146RNode MaybeAddRange(RNode df, bool mustAddRange); 1147{; 1148 return mustAddRange ? df.Range(1) : df;; 1149}; 1150// use as :; 1151ROOT::RDataFrame df(10);; 1152auto maybeRangedDF = MaybeAddRange(df, true);; 1153~~~; 1154 ; 1155The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; 1156loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`.; 1157 ; 1158\anchor RDFCollections; 1159### Storing RDataFrame objects in collections; 1160 ; 1161ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:; 1162 ; 1163~~~{.cpp}; 1164std::vector<ROOT::RDF::RNode> dfs;; 1165dfs.emplace_back(ROOT::RDataFrame(10));; 1166dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; 1167~~~; 1168 ; 1169\anchor callbacks; 1170### Executing callbacks every N events; 1171It's possible to schedule execution of arbitrary functions (callbacks) during the event loop.; 1172Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running,; 1173drawing a partially-filled histogram every time a certain number of new entries is processed, or; 1174displaying a progress bar while the event loop runs.; 1175 ; 1176For example one can draw an up-to-date version of a result histogram every 100 entries like this:; 1177~~~{.cpp}; 1178auto h = df.Histo1D(""x"");; 1179TCanvas c(""c"",""x hist"");; 1180h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:67256,simpl,simple,67256,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,"11437 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11438 zaxis->SetRange(binz,binz2);; 11439 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11440 if (nbins>1 && rect2[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11441 xx[0] = xaxis->GetXmin();; 11442 xx[1] = yaxis->GetXmax();; 11443 xx[2] = zaxis->GetBinCenter(binz);; 11444 view->WCtoNDC(xx,u);; 11445 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11446 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11447 rect1[4].SetX(rect1[0].GetX());; 11448 rect1[4].SetY(rect1[0].GetY());; 11449 xx[0] = xaxis->GetXmax();; 11450 view->WCtoNDC(xx,u);; 11451 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11452 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11453 xx[1] = yaxis->GetXmin();; 11454 view->WCtoNDC(xx,u);; 11455 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11456 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11457 xx[0] = xaxis->GetXmin();; 11458 view->WCtoNDC(xx,u);; 11459 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11460 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11461 gVirtualX->DrawPolyLine(5,rect1);; 11462 if (nbins>1) {; 11463 xx[0] = xaxis->GetXmin();; 11464 xx[1] = yaxis->GetXmax();; 11465 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11466 view->WCtoNDC(xx,u);; 11467 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11468 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11469 rect2[4].SetX(rect2[0].GetX());; 11470 rect2[4].SetY(rect2[0].GetY());; 11471 xx[0] = xaxis->GetXmax();; 11472 view->WCtoNDC(xx,u);; 11473 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11474 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11475 xx[1] = yaxis->GetXmin();; 11476 view->WCtoNDC(xx,u);; 11477 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11478 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11479 xx[0] = xaxis->GetXmin();; 11480 view->WCtoNDC(xx,u);; 11481 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11482 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11483 gVirtualX->DrawPolyLine(5,re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:416112,ux,uxmin,416112,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"11508 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11509 zaxis->SetRange(binz,binz2);; 11510 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11511 if (nbins>1 && rect2[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11512 xx[0] = xaxis->GetXmin();; 11513 xx[1] = yaxis->GetXmax();; 11514 xx[2] = zaxis->GetBinCenter(binz);; 11515 view->WCtoNDC(xx,u);; 11516 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11517 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11518 rect1[4].SetX(rect1[0].GetX());; 11519 rect1[4].SetY(rect1[0].GetY());; 11520 xx[0] = xaxis->GetXmax();; 11521 view->WCtoNDC(xx,u);; 11522 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11523 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11524 xx[1] = yaxis->GetXmin();; 11525 view->WCtoNDC(xx,u);; 11526 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11527 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11528 xx[0] = xaxis->GetXmin();; 11529 view->WCtoNDC(xx,u);; 11530 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11531 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11532 gVirtualX->DrawPolyLine(5,rect1);; 11533 if (nbins>1) {; 11534 xx[0] = xaxis->GetXmin();; 11535 xx[1] = yaxis->GetXmax();; 11536 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11537 view->WCtoNDC(xx,u);; 11538 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11539 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11540 rect2[4].SetX(rect2[0].GetX());; 11541 rect2[4].SetY(rect2[0].GetY());; 11542 xx[0] = xaxis->GetXmax();; 11543 view->WCtoNDC(xx,u);; 11544 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11545 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11546 xx[1] = yaxis->GetXmin();; 11547 view->WCtoNDC(xx,u);; 11548 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11549 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11550 xx[0] = xaxis->GetXmin();; 11551 view->WCtoNDC(xx,u);; 11552 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11553 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11554 gVirtualX->DrawPolyLine(5,re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:419013,ux,uxmin,419013,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"11578 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11579 yaxis->SetRange(biny,biny2);; 11580 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11581 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11582 xx[0] = xaxis->GetXmin();; 11583 xx[2] = zaxis->GetXmax();; 11584 xx[1] = yaxis->GetBinCenter(biny);; 11585 view->WCtoNDC(xx,u);; 11586 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11587 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11588 rect1[4].SetX(rect1[0].GetX());; 11589 rect1[4].SetY(rect1[0].GetY());; 11590 xx[0] = xaxis->GetXmax();; 11591 view->WCtoNDC(xx,u);; 11592 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11593 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11594 xx[2] = zaxis->GetXmin();; 11595 view->WCtoNDC(xx,u);; 11596 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11597 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11598 xx[0] = xaxis->GetXmin();; 11599 view->WCtoNDC(xx,u);; 11600 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11601 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11602 gVirtualX->DrawPolyLine(5,rect1);; 11603 if (nbins>1) {; 11604 xx[0] = xaxis->GetXmin();; 11605 xx[2] = zaxis->GetXmax();; 11606 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11607 view->WCtoNDC(xx,u);; 11608 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11609 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11610 rect2[4].SetX(rect2[0].GetX());; 11611 rect2[4].SetY(rect2[0].GetY());; 11612 xx[0] = xaxis->GetXmax();; 11613 view->WCtoNDC(xx,u);; 11614 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11615 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11616 xx[2] = zaxis->GetXmin();; 11617 view->WCtoNDC(xx,u);; 11618 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11619 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11620 xx[0] = xaxis->GetXmin();; 11621 view->WCtoNDC(xx,u);; 11622 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11623 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11624 gVirtualX->DrawPolyLine(5,re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:421906,ux,uxmin,421906,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"1161 ; 1162////////////////////////////////////////////////////////////////////////////////; 1163/// Paint highlight point as TMarker object (open circle); 1164 ; 1165void TGraphPainter::PaintHighlightPoint(TGraph *theGraph, Option_t * /*option*/); 1166{; 1167 // call from PaintGraphSimple; 1168 ; 1169 if ((!theGraph->IsHighlight()) || (gHighlightGraph != theGraph)) return;; 1170 ; 1171 Double_t hx, hy;; 1172 if (theGraph->GetPoint(gHighlightPoint, hx, hy) == -1) {; 1173 // special case, e.g. after interactive remove last point; 1174 if (gHighlightMarker) gHighlightMarker.reset(nullptr);; 1175 return;; 1176 }; 1177 // testing specific possibility (after zoom, draw with ""same"", log, etc.); 1178 Double_t uxmin = gPad->GetUxmin();; 1179 Double_t uxmax = gPad->GetUxmax();; 1180 Double_t uymin = gPad->GetUymin();; 1181 Double_t uymax = gPad->GetUymax();; 1182 if (gPad->GetLogx()) {; 1183 uxmin = TMath::Power(10.0, uxmin);; 1184 uxmax = TMath::Power(10.0, uxmax);; 1185 }; 1186 if (gPad->GetLogy()) {; 1187 uymin = TMath::Power(10.0, uymin);; 1188 uymax = TMath::Power(10.0, uymax);; 1189 }; 1190 if ((hx < uxmin) || (hx > uxmax)) return;; 1191 if ((hy < uymin) || (hy > uymax)) return;; 1192 ; 1193 if (!gHighlightMarker) {; 1194 gHighlightMarker = std::make_unique<TMarker>(hx, hy, 24);; 1195 gHighlightMarker->SetBit(kCannotPick);; 1196 }; 1197 gHighlightMarker->SetX(hx);; 1198 gHighlightMarker->SetY(hy);; 1199 gHighlightMarker->SetMarkerSize(theGraph->GetMarkerSize()*2.0);; 1200 if (gHighlightMarker->GetMarkerSize() < 1.0) gHighlightMarker->SetMarkerSize(1.0); // always visible; 1201 gHighlightMarker->SetMarkerColor(theGraph->GetMarkerColor());; 1202 gHighlightMarker->Paint();; 1203 // Info(""PaintHighlightPoint"", ""graph: %p\tpoint: %d"",; 1204 // (void *)gHighlightGraph, gHighlightPoint);; 1205}; 1206 ; 1207 ; 1208////////////////////////////////////////////////////////////////////////////////; 1209/// Paint a any kind of TGraph; 1210 ; 1211void TGraphPainter::PaintHelper(TGra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:43580,ux,uxmax,43580,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['ux'],['uxmax']
Usability,"11648 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11649 yaxis->SetRange(biny,biny2);; 11650 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11651 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11652 xx[0] = xaxis->GetXmin();; 11653 xx[2] = zaxis->GetXmax();; 11654 xx[1] = yaxis->GetBinCenter(biny);; 11655 view->WCtoNDC(xx,u);; 11656 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11657 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11658 rect1[4].SetX(rect1[0].GetX());; 11659 rect1[4].SetY(rect1[0].GetY());; 11660 xx[0] = xaxis->GetXmax();; 11661 view->WCtoNDC(xx,u);; 11662 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11663 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11664 xx[2] = zaxis->GetXmin();; 11665 view->WCtoNDC(xx,u);; 11666 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11667 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11668 xx[0] = xaxis->GetXmin();; 11669 view->WCtoNDC(xx,u);; 11670 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11671 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11672 gVirtualX->DrawPolyLine(5,rect1);; 11673 if (nbins>1) {; 11674 xx[0] = xaxis->GetXmin();; 11675 xx[2] = zaxis->GetXmax();; 11676 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11677 view->WCtoNDC(xx,u);; 11678 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11679 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11680 rect2[4].SetX(rect2[0].GetX());; 11681 rect2[4].SetY(rect2[0].GetY());; 11682 xx[0] = xaxis->GetXmax();; 11683 view->WCtoNDC(xx,u);; 11684 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11685 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11686 xx[2] = zaxis->GetXmin();; 11687 view->WCtoNDC(xx,u);; 11688 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11689 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11690 xx[0] = xaxis->GetXmin();; 11691 view->WCtoNDC(xx,u);; 11692 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11693 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11694 gVirtualX->DrawPolyLine(5,re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:424799,ux,uxmin,424799,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"11718 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11719 xaxis->SetRange(binx,binx2);; 11720 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11721 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11722 xx[2] = zaxis->GetXmin();; 11723 xx[1] = yaxis->GetXmax();; 11724 xx[0] = xaxis->GetBinCenter(binx);; 11725 view->WCtoNDC(xx,u);; 11726 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11727 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11728 rect1[4].SetX(rect1[0].GetX());; 11729 rect1[4].SetY(rect1[0].GetY());; 11730 xx[2] = zaxis->GetXmax();; 11731 view->WCtoNDC(xx,u);; 11732 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11733 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11734 xx[1] = yaxis->GetXmin();; 11735 view->WCtoNDC(xx,u);; 11736 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11737 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11738 xx[2] = zaxis->GetXmin();; 11739 view->WCtoNDC(xx,u);; 11740 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11741 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11742 gVirtualX->DrawPolyLine(5,rect1);; 11743 if (nbins>1) {; 11744 xx[2] = zaxis->GetXmin();; 11745 xx[1] = yaxis->GetXmax();; 11746 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11747 view->WCtoNDC(xx,u);; 11748 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11749 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11750 rect2[4].SetX(rect2[0].GetX());; 11751 rect2[4].SetY(rect2[0].GetY());; 11752 xx[2] = zaxis->GetXmax();; 11753 view->WCtoNDC(xx,u);; 11754 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11755 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11756 xx[1] = yaxis->GetXmin();; 11757 view->WCtoNDC(xx,u);; 11758 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11759 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11760 xx[2] = zaxis->GetXmin();; 11761 view->WCtoNDC(xx,u);; 11762 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11763 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11764 gVirtualX->DrawPolyLine(5,re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:427692,ux,uxmin,427692,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"11788 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11789 xaxis->SetRange(binx,binx2);; 11790 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11791 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11792 xx[2] = zaxis->GetXmin();; 11793 xx[1] = yaxis->GetXmax();; 11794 xx[0] = xaxis->GetBinCenter(binx);; 11795 view->WCtoNDC(xx,u);; 11796 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11797 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11798 rect1[4].SetX(rect1[0].GetX());; 11799 rect1[4].SetY(rect1[0].GetY());; 11800 xx[2] = zaxis->GetXmax();; 11801 view->WCtoNDC(xx,u);; 11802 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11803 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11804 xx[1] = yaxis->GetXmin();; 11805 view->WCtoNDC(xx,u);; 11806 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11807 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11808 xx[2] = zaxis->GetXmin();; 11809 view->WCtoNDC(xx,u);; 11810 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11811 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11812 gVirtualX->DrawPolyLine(5,rect1);; 11813 if (nbins>1) {; 11814 xx[2] = zaxis->GetXmin();; 11815 xx[1] = yaxis->GetXmax();; 11816 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11817 view->WCtoNDC(xx,u);; 11818 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11819 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11820 rect2[4].SetX(rect2[0].GetX());; 11821 rect2[4].SetY(rect2[0].GetY());; 11822 xx[2] = zaxis->GetXmax();; 11823 view->WCtoNDC(xx,u);; 11824 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11825 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11826 xx[1] = yaxis->GetXmin();; 11827 view->WCtoNDC(xx,u);; 11828 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11829 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11830 xx[2] = zaxis->GetXmin();; 11831 view->WCtoNDC(xx,u);; 11832 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11833 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11834 gVirtualX->DrawPolyLine(5,re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:430585,ux,uxmin,430585,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"119; ROOT::Math::Fabs::applystatic T apply(const T &rhs)Definition UnaryOperators.h:121; ROOT::Math::MinusUnary Minus Operation Class.Definition UnaryOperators.h:44; ROOT::Math::Minus::applystatic T apply(const T &rhs)Definition UnaryOperators.h:46; ROOT::Math::SMatrixSMatrix: a generic fixed size D1 x D2 Matrix class.Definition SMatrix.h:101; ROOT::Math::SVectorSVector: a generic fixed size Vector class.Definition SVector.h:75; ROOT::Math::SqrUnary Square Operation Class.Definition UnaryOperators.h:194; ROOT::Math::Sqr::applystatic T apply(const T &rhs)Definition UnaryOperators.h:196; ROOT::Math::SqrtUnary Square Root Operation Class.Definition UnaryOperators.h:269; ROOT::Math::Sqrt::applystatic T apply(const T &rhs)Definition UnaryOperators.h:271; ROOT::Math::UnaryOpUnaryOperation class A class representing unary operators in the parse tree.Definition Expression.h:361; ROOT::Math::VecExprExpression wrapper class for Vector objects.Definition Expression.h:64; R; MathNamespace for new Math classes and functions.; ROOT::Math::sqrVecExpr< UnaryOp< Sqr< T >, VecExpr< A, T, D >, T >, T, D > sqr(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:206; ROOT::Math::operator-DisplacementVector2D< CoordSystem1, U > operator-(DisplacementVector2D< CoordSystem1, U > v1, DisplacementVector2D< CoordSystem2, U > const &v2)Difference between two DisplacementVector2D vectors.Definition DisplacementVector2D.h:453; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOT::Math::fabsVecExpr< UnaryOp< Fabs< T >, VecExpr< A, T, D >, T >, T, D > fabs(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:131; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathsmatrixincMathUnaryOperators.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/UnaryOperators_8h_source.html:14011,Guid,Guide,14011,doc/master/UnaryOperators_8h_source.html,https://root.cern,https://root.cern/doc/master/UnaryOperators_8h_source.html,1,['Guid'],['Guide']
Usability,"11::AllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualX::BeginModalSessionFor(Window_t window); virtual voidTGX11::Bell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidTGX11::ChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidTGX11::ChangeGC(GContext_t gc, GCValues_t* gval); virtual voidTGX11::ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidTGX11::ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidTGX11::ChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tTGX11::CheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGX11::ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGX11::ClearWindow(); virtual voidTGX11::ClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTGX11::CloseDisplay(); virtual voidTGX11::ClosePixmap(); virtual voidTGX11::CloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGX11::ConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidTGX11::ConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTGX11::CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidTGX11::CopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidTGX11::CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tTGX11::CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); virtual Cursor_tTGX11::CreateCursor(ECursor cursor); virtual GContext_tTGX11::CreateGC(Drawable_t id, GCV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGX11TTF.html:1936,Clear,ClearWindow,1936,root/html534/TGX11TTF.html,https://root.cern,https://root.cern/root/html534/TGX11TTF.html,3,['Clear'],['ClearWindow']
Usability,"1216 if (line1[0].GetX()) gVirtualX->DrawPolyLine(2,line1);; 11217 if (nbins>1 && line1[0].GetX()) {; 11218 gVirtualX->DrawPolyLine(2,line2);; 11219 gVirtualX->DrawPolyLine(2,line3);; 11220 gVirtualX->DrawPolyLine(2,line4);; 11221 gVirtualX->DrawPolyLine(5,endface1);; 11222 gVirtualX->DrawPolyLine(5,endface2);; 11223 }; 11224 xx[0]=xaxis->GetBinCenter(binx);; 11225 xx[2] = zaxis->GetBinCenter(binz);; 11226 xx[1] = yaxis->GetXmin();; 11227 view->WCtoNDC(xx,u);; 11228 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11229 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11230 xx[1] = yaxis->GetXmax();; 11231 view->WCtoNDC(xx,u);; 11232 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11233 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11234 gVirtualX->DrawPolyLine(2,line1);; 11235 if (nbins>1) {; 11236 xx[1] = yaxis->GetXmin();; 11237 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11238 xx[0] = xaxis->GetBinCenter(binx);; 11239 view->WCtoNDC(xx,u);; 11240 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11241 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11242 xx[1] = yaxis->GetXmax();; 11243 view->WCtoNDC(xx,u);; 11244 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11245 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11246 ; 11247 xx[1] = yaxis->GetXmin();; 11248 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11249 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11250 view->WCtoNDC(xx,u);; 11251 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11252 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11253 xx[1] = yaxis->GetXmax();; 11254 view->WCtoNDC(xx,u);; 11255 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11256 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11257 ; 11258 xx[1] = yaxis->GetXmin();; 11259 xx[2] = zaxis->GetBinCenter(binz);; 11260 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11261 view->WCtoNDC(xx,u);; 11262 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11263 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11264 xx[1] = yaxis->GetXmax();; 11265 view->WCtoN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:407180,ux,uxmin,407180,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"1264 ; 1265 break;; 1266 ; 1267 case kMouseEnter:; 1268 // mouse enters canvas; 1269 if (!fDoubleBuffer) FeedbackMode(kTRUE);; 1270 break;; 1271 ; 1272 case kMouseLeave:; 1273 // mouse leaves canvas; 1274 {; 1275 // force popdown of tooltips; 1276 TObject *sobj = fSelected;; 1277 TPad *spad = fSelectedPad;; 1278 fSelected = nullptr;; 1279 fSelectedPad = nullptr;; 1280 EnterLeave(prevSelPad, prevSelObj);; 1281 fSelected = sobj;; 1282 fSelectedPad = spad;; 1283 if (!fDoubleBuffer) FeedbackMode(kFALSE);; 1284 }; 1285 break;; 1286 ; 1287 case kButton1Double:; 1288 // triggered on the second button down within 350ms and within; 1289 // 3x3 pixels of the first button down, button up finishes action; 1290 ; 1291 case kButton1Down:; 1292 // find pad in which input occurred; 1293 pad = Pick(px, py, prevSelObj);; 1294 if (!pad) return;; 1295 ; 1296 gPad = pad; // don't use cd() because we won't draw in pad; 1297 // we will only use its coordinate system; 1298 ; 1299 if (fSelected) {; 1300 FeedbackMode(kTRUE); // to draw in rubberband mode; 1301 fSelected->ExecuteEvent(event, px, py);; 1302 ; 1303 RunAutoExec();; 1304 }; 1305 ; 1306 break;; 1307 ; 1308 case kArrowKeyPress:; 1309 case kArrowKeyRelease:; 1310 case kButton1Motion:; 1311 case kButton1ShiftMotion: //8 == kButton1Motion + shift modifier; 1312 if (fSelected) {; 1313 gPad = fSelectedPad;; 1314 ; 1315 fSelected->ExecuteEvent(event, px, py);; 1316 if (!IsWeb()); 1317 gVirtualX->Update();; 1318 if (fSelected && !fSelected->InheritsFrom(TAxis::Class())) {; 1319 Bool_t resize = kFALSE;; 1320 if (fSelected->InheritsFrom(TBox::Class())); 1321 resize = ((TBox*)fSelected)->IsBeingResized();; 1322 if (fSelected->InheritsFrom(TVirtualPad::Class())); 1323 resize = ((TVirtualPad*)fSelected)->IsBeingResized();; 1324 ; 1325 if ((!resize && TestBit(kMoveOpaque)) || (resize && TestBit(kResizeOpaque))) {; 1326 gPad = fPadSave;; 1327 Update();; 1328 FeedbackMode(kTRUE);; 1329 }; 1330 }; 1331 ; 1332 RunAutoExec();; 1333 }; 1334 ; 1335 bre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:41441,Feedback,FeedbackMode,41441,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Feedback'],['FeedbackMode']
Usability,"1339 ; 1340void RGeomDescription::ProduceSearchData(); 1341{; 1342 TLockGuard lock(fMutex);; 1343 ; 1344 if (fSearch.empty() || !fSearchJson.empty()); 1345 return;; 1346 ; 1347 std::string hjson;; 1348 ; 1349 SearchVisibles(fSearch, hjson, fSearchJson);; 1350 ; 1351 (void)hjson; // not used here; 1352}; 1353 ; 1354/////////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406///////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:41623,clear,clear,41623,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"1362 if (rwymin == rwymax) rwymax += 1.;; 1363 dx = 0.1*(rwxmax-rwxmin);; 1364 dy = 0.1*(rwymax-rwymin);; 1365 uxmin = rwxmin - dx;; 1366 uxmax = rwxmax + dx;; 1367 minimum = rwymin - dy;; 1368 maximum = rwymax + dy;; 1369 }; 1370 if (theGraph->GetMinimum() != -1111) rwymin = minimum = theGraph->GetMinimum();; 1371 if (theGraph->GetMaximum() != -1111) rwymax = maximum = theGraph->GetMaximum();; 1372 if (uxmin < 0 && rwxmin >= 0) uxmin = 0.9*rwxmin;; 1373 if (uxmax > 0 && rwxmax <= 0) {; 1374 if (gPad->GetLogx()) uxmax = 1.1*rwxmax;; 1375 else uxmax = 0;; 1376 }; 1377 if (minimum < 0 && rwymin >= 0) minimum = 0.9*rwymin;; 1378 if (maximum > 0 && rwymax <= 0) {; 1379 //if(gPad->GetLogy()) maximum = 1.1*rwymax;; 1380 //else maximum = 0;; 1381 }; 1382 if (minimum <= 0 && gPad->GetLogy()) minimum = 0.001*maximum;; 1383 if (uxmin <= 0 && gPad->GetLogx()) {; 1384 if (uxmax > 1000) uxmin = 1;; 1385 else uxmin = 0.001*uxmax;; 1386 }; 1387 rwymin = minimum;; 1388 rwymax = maximum;; 1389 ; 1390 // Create a temporary histogram and fill each bin with the; 1391 // function value.; 1392 char chopth[8] = "" "";; 1393 if (strstr(chopt,""x+"")) strncat(chopth, ""x+"",3);; 1394 if (strstr(chopt,""y+"")) strncat(chopth, ""y+"",3);; 1395 if (optionIAxis) strncat(chopth, ""A"",2);; 1396 if (!theGraph->GetHistogram()) {; 1397 // the graph is created with at least as many bins as there are; 1398 // points to permit zooming on the full range.; 1399 rwxmin = uxmin;; 1400 rwxmax = uxmax;; 1401 npt = 100;; 1402 if (theNpoints > npt) npt = theNpoints;; 1403 TH1F *h = new TH1F(TString::Format(""%s_h"",GetName()),GetTitle(),npt,rwxmin,rwxmax);; 1404 theGraph->SetHistogram(h);; 1405 if (!theGraph->GetHistogram()) return;; 1406 theGraph->GetHistogram()->SetMinimum(rwymin);; 1407 theGraph->GetHistogram()->SetMaximum(rwymax);; 1408 theGraph->GetHistogram()->GetYaxis()->SetLimits(rwymin,rwymax);; 1409 theGraph->GetHistogram()->SetBit(TH1::kNoStats);; 1410 theGraph->GetHistogram()->SetDirectory(nullptr);; 1411 theGra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:51163,ux,uxmax,51163,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['ux'],['uxmax']
Usability,"14 ; 1715 } else if (extended) {; 1716 ; 1717 // Extended mode, set contents to Poisson(pdf*nEvents); 1718 double w = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1719 hist->set(w,sqrt(w)) ;; 1720 ; 1721 } else {; 1722 ; 1723 // Regular mode, fill array of weights with Poisson(pdf*nEvents), but to not fill; 1724 // histogram yet.; 1725 if (hist->weight()>histMax) {; 1726 histMax = hist->weight() ;; 1727 }; 1728 histOut[i] = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1729 histOutSum += histOut[i] ;; 1730 }; 1731 }; 1732 ; 1733 ; 1734 if (!expectedData && !extended) {; 1735 ; 1736 // Second pass for regular mode - Trim/Extend dataset to exact number of entries; 1737 ; 1738 // Calculate difference between what is generated so far and what is requested; 1739 Int_t nEvtExtra = std::abs(Int_t(nEvents)-histOutSum) ;; 1740 Int_t wgt = (histOutSum>nEvents) ? -1 : 1 ;; 1741 ; 1742 // Perform simple binned accept/reject procedure to get to exact event count; 1743 std::size_t counter = 0;; 1744 bool havePrintedInfo = false;; 1745 while(nEvtExtra>0) {; 1746 ; 1747 Int_t ibinRand = RooRandom::randomGenerator()->Integer(hist->numEntries()) ;; 1748 hist->get(ibinRand) ;; 1749 double ranY = RooRandom::randomGenerator()->Uniform(histMax) ;; 1750 ; 1751 if (ranY<hist->weight()) {; 1752 if (wgt==1) {; 1753 histOut[ibinRand]++ ;; 1754 } else {; 1755 // If weight is negative, prior bin content must be at least 1; 1756 if (histOut[ibinRand]>0) {; 1757 histOut[ibinRand]-- ;; 1758 } else {; 1759 continue ;; 1760 }; 1761 }; 1762 nEvtExtra-- ;; 1763 }; 1764 ; 1765 if ((counter++ > 10*nEvents || nEvents > 1.E7) && !havePrintedInfo) {; 1766 havePrintedInfo = true;; 1767 coutP(Generation) << ""RooAbsPdf::generateBinned("" << GetName() << "") Performing costly accept/reject sampling. If this takes too long, use ""; 1768 << ""extended mode to speed up the process."" << std::endl;; 1769 }; 1770 }; 1771 ; 1772 // Transfer working array to histogram; 1773 for (int ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:84334,simpl,simple,84334,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['simpl'],['simple']
Usability,"14 if (fgGarbageCollection && fgGarbageStack == 0 && fgEmptyingGarbage == kFALSE) {; 715 fgEmptyingGarbage = kTRUE;; 716 fgGarbageCollection->Delete();; 717 fgEmptyingGarbage = kFALSE;; 718 SafeDelete(fgGarbageCollection);; 719 }; 720}; 721 ; 722////////////////////////////////////////////////////////////////////////////////; 723/// Add to the list of things to be cleaned up.; 724 ; 725void TCollection::GarbageCollect(TObject *obj); 726{; 727 {; 728 R__LOCKGUARD2(gCollectionMutex);; 729 if (fgGarbageCollection) {; 730 if (!fgEmptyingGarbage) {; 731 fgGarbageCollection->Add(obj);; 732 return;; 733 }; 734 }; 735 }; 736 delete obj;; 737}; 738 ; 739////////////////////////////////////////////////////////////////////////////////; 740/// Set whether this collection is the owner (enable==true); 741/// of its content. If it is the owner of its contents,; 742/// these objects will be deleted whenever the collection itself; 743/// is deleted. The objects might also be deleted or destructed when Clear; 744/// is called (depending on the collection).; 745 ; 746void TCollection::SetOwner(Bool_t enable); 747{; 748 if (enable); 749 SetBit(kIsOwner);; 750 else; 751 ResetBit(kIsOwner);; 752}; 753 ; 754////////////////////////////////////////////////////////////////////////////////; 755/// Set this collection to use a RW lock upon access, making it thread safe.; 756/// Return the previous state.; 757///; 758/// Note: To test whether the usage is enabled do:; 759/// collection->TestBit(TCollection::kUseRWLock);; 760 ; 761bool TCollection::UseRWLock(Bool_t enable); 762{; 763 bool prev = TestBit(TCollection::kUseRWLock);; 764 if (enable) {; 765 SetBit(TCollection::kUseRWLock);; 766 } else {; 767 ResetBit(TCollection::kUseRWLock);; 768 }; 769 return prev;; 770}; 771 ; 772////////////////////////////////////////////////////////////////////////////////; 773/// Copy a TIter. This involves allocating a new TIterator of the right; 774/// sub class and assigning it with the original.; 775 ; 77",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8cxx_source.html:24895,Clear,Clear,24895,doc/master/TCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8cxx_source.html,1,['Clear'],['Clear']
Usability,"146 of file MethodBase.cxx. ◆ ~IPythonInteractive(). TMVA::IPythonInteractive::~IPythonInteractive ; (; ). standard destructor ; Definition at line 154 of file MethodBase.cxx. Member Function Documentation. ◆ AddPoint() [1/2]. void TMVA::IPythonInteractive::AddPoint ; (; Double_t ; x, . Double_t ; y1, . Double_t ; y2 . ). This function is used only in 2 TGraph case, and it will add new data points to graphs. ; Parameters. [in]xthe x coordinate ; [in]y1the y coordinate for the first TGraph ; [in]y2the y coordinate for the second TGraph . Definition at line 207 of file MethodBase.cxx. ◆ AddPoint() [2/2]. void TMVA::IPythonInteractive::AddPoint ; (; std::vector< Double_t > & ; dat). This function can add data points to as many TGraphs as we have. ; Parameters. [in]datvector of data points. The dat[0] contains the x coordinate, dat[1] contains the y coordinate for first TGraph, dat[2] for second, ... . Definition at line 223 of file MethodBase.cxx. ◆ ClearGraphs(). void TMVA::IPythonInteractive::ClearGraphs ; (; ). This function sets the point number to 0 for all graphs. ; Definition at line 193 of file MethodBase.cxx. ◆ Get(). TMultiGraph * TMVA::IPythonInteractive::Get ; (; ). inline . Definition at line 102 of file MethodBase.h. ◆ Init(). void TMVA::IPythonInteractive::Init ; (; std::vector< TString > & ; graphTitles). This function gets some title and it creates a TGraph for every title. ; It also sets up the style for every TGraph. All graphs are added to a single TMultiGraph.; Parameters. [in]graphTitlesvector of titles . Definition at line 169 of file MethodBase.cxx. ◆ NotInitialized(). bool TMVA::IPythonInteractive::NotInitialized ; (; ). inline . Definition at line 103 of file MethodBase.h. Member Data Documentation. ◆ fGraphs. std::vector<TGraph*> TMVA::IPythonInteractive::fGraphs. private . Definition at line 106 of file MethodBase.h. ◆ fIndex. Int_t TMVA::IPythonInteractive::fIndex. private . Definition at line 108 of file MethodBase.h. ◆ fMultiGraph. TMultiG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IPythonInteractive.html:2731,Clear,ClearGraphs,2731,doc/master/classTMVA_1_1IPythonInteractive.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPythonInteractive.html,1,['Clear'],['ClearGraphs']
Usability,"1468 of file MethodMLP.cxx. ◆ UpdateSynapses(). void TMVA::MethodMLP::UpdateSynapses ; (; ). private . update synapse error fields and adjust the weights (if in sequential mode) ; Definition at line 1412 of file MethodMLP.cxx. Member Data Documentation. ◆ fBatchSize. Int_t TMVA::MethodMLP::fBatchSize. private . batch size, only matters if in batch learning mode ; Definition at line 192 of file MethodMLP.h. ◆ fBPMode. EBPTrainingMode TMVA::MethodMLP::fBPMode. private . backprop learning mode (sequential or batch) ; Definition at line 190 of file MethodMLP.h. ◆ fBpModeS. TString TMVA::MethodMLP::fBpModeS. private . backprop learning mode option string (sequential or batch) ; Definition at line 191 of file MethodMLP.h. ◆ fCalculateErrors. bool TMVA::MethodMLP::fCalculateErrors. private . compute inverse hessian matrix at the end of the training ; Definition at line 165 of file MethodMLP.h. ◆ fDecayRate. Double_t TMVA::MethodMLP::fDecayRate. private . decay rate for above learning rate ; Definition at line 189 of file MethodMLP.h. ◆ fDeviationsFromTargets. std::vector<std::pair<Float_t,Float_t> >* TMVA::MethodMLP::fDeviationsFromTargets. private . deviation from the targets, event weight ; Definition at line 204 of file MethodMLP.h. ◆ fEpochMon. Bool_t TMVA::MethodMLP::fEpochMon. private . create and fill epoch-wise monitoring histograms (makes outputfile big!) ; Definition at line 194 of file MethodMLP.h. ◆ fGA_nsteps. Int_t TMVA::MethodMLP::fGA_nsteps. private . GA settings: number of steps. ; Definition at line 197 of file MethodMLP.h. ◆ fGA_preCalc. Int_t TMVA::MethodMLP::fGA_preCalc. private . GA settings: number of pre-calc steps. ; Definition at line 198 of file MethodMLP.h. ◆ fGA_SC_factor. Double_t TMVA::MethodMLP::fGA_SC_factor. private . GA settings: SC_factor. ; Definition at line 201 of file MethodMLP.h. ◆ fGA_SC_rate. Int_t TMVA::MethodMLP::fGA_SC_rate. private . GA settings: SC_rate. ; Definition at line 200 of file MethodMLP.h. ◆ fGA_SC_steps. Int_t TMVA:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:50462,learn,learning,50462,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['learn'],['learning']
Usability,"15 auto elem_root = Browsable::RProvider::Browse(rootfold);; 116 if (elem_root); 117 comp->Add(std::make_shared<Browsable::RWrapper>(""root"", elem_root));; 118 ; 119 std::unique_ptr<Browsable::RHolder> rootfiles = std::make_unique<Browsable::TObjectHolder>(gROOT->GetListOfFiles(), kFALSE);; 120 auto elem_files = Browsable::RProvider::Browse(rootfiles);; 121 if (elem_files) {; 122 auto files = std::make_shared<Browsable::RWrapper>(""ROOT Files"", elem_files);; 123 files->SetExpandByDefault(true);; 124 comp->Add(files);; 125 // if there are any open files, make them visible by default; 126 if (elem_files->GetNumChilds() > 0); 127 seldir = {};; 128 }; 129 ; 130 SetTopElement(comp);; 131 ; 132 SetWorkingPath(seldir);; 133}; 134 ; 135/////////////////////////////////////////////////////////////////////; 136/// Reset all data correspondent to last request; 137 ; 138void RBrowserData::ResetLastRequestData(bool with_element); 139{; 140 fLastAllChilds = false;; 141 fLastSortedItems.clear();; 142 fLastSortMethod.clear();; 143 fLastItems.clear();; 144 if (with_element) {; 145 fLastPath.clear();; 146 fLastElement.reset();; 147 }; 148}; 149 ; 150/////////////////////////////////////////////////////////////////////////; 151/// Decompose path to elements; 152/// Returns array of names for each element in the path, first element either ""/"" or "".""; 153/// If returned array empty - it is error; 154 ; 155Browsable::RElementPath_t RBrowserData::DecomposePath(const std::string &strpath, bool relative_to_work_element); 156{; 157 Browsable::RElementPath_t arr;; 158 if (relative_to_work_element) arr = fWorkingPath;; 159 ; 160 if (strpath.empty()); 161 return arr;; 162 ; 163 auto arr2 = Browsable::RElement::ParsePath(strpath);; 164 arr.insert(arr.end(), arr2.begin(), arr2.end());; 165 return arr;; 166}; 167 ; 168/////////////////////////////////////////////////////////////////////////; 169/// Process browser request; 170 ; 171bool RBrowserData::ProcessBrowserRequest(const RBrowserRequest &requ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBrowserData_8cxx_source.html:4542,clear,clear,4542,doc/master/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RBrowserData_8cxx_source.html,2,['clear'],['clear']
Usability,"159///; 2160/// \param[in] name is the original name; 2161/// \param[out] filename the url or filename to be opened or matched; 2162/// \param[out] treename the treename, which may be found in a url fragment section; 2163/// as a trailing part of the name (deprecated).; 2164/// If not found this will be empty.; 2165/// Exception: a fragment containing the '=' character is _not_; 2166/// interpreted as a treename; 2167/// \param[out] query is the url query section, including the leading question; 2168/// mark. If not found or the query section is only followed by; 2169/// a fragment this will be empty.; 2170/// \param[out] suffix the portion of name which was removed to from filename.; 2171 ; 2172void TChain::ParseTreeFilename(const char *name, TString &filename, TString &treename, TString &query,; 2173 TString &suffix) const; 2174{; 2175 Ssiz_t pIdx = kNPOS;; 2176 filename.Clear();; 2177 treename.Clear();; 2178 query.Clear();; 2179 suffix.Clear();; 2180 ; 2181 // General case; 2182 TUrl url(name, true);; 2183 filename = (strcmp(url.GetProtocol(), ""file"")) ? url.GetUrl() : url.GetFileAndOptions();; 2184 ; 2185 TString fn = url.GetFile();; 2186 // Extract query, if any; 2187 if (url.GetOptions() && (strlen(url.GetOptions()) > 0)); 2188 query.Form(""?%s"", url.GetOptions());; 2189 // The treename can be passed as anchor; 2190 const char *anchor = url.GetAnchor();; 2191 if (anchor && anchor[0] != '\0') {; 2192 // Support ""?#tree_name"" and ""?query#tree_name""; 2193 // ""#tree_name"" (no '?' is for tar archives); 2194 // If the treename would contain a '=', treat the anchor as part of the query instead. This makes sure; 2195 // that Davix parameters are passed.; 2196 if (!query.IsNull() || strstr(name, ""?#"")) {; 2197 if (strstr(anchor, ""="")) {; 2198 query.Append(""#"");; 2199 query.Append(anchor);; 2200 } else {; 2201 treename = anchor;; 2202 }; 2203 } else {; 2204 // The anchor is part of the file name; 2205 fn = url.GetFileAndOptions();; 2206 }; 2207 }; 2208 // Suffix; 2209 suf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:78660,Clear,Clear,78660,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['Clear'],['Clear']
Usability,"1627 of file TGeoManager.cxx. ◆ ClearAttributes(). void TGeoManager::ClearAttributes ; (; ). Reset all attributes to default ones. ; Default attributes for visualization are those defined before closing the geometry. ; Definition at line 1455 of file TGeoManager.cxx. ◆ ClearNavigators(). void TGeoManager::ClearNavigators ; (; ). Clear all navigators. ; Definition at line 881 of file TGeoManager.cxx. ◆ ClearOverlaps(). void TGeoManager::ClearOverlaps ; (; ). Clear the list of overlaps. ; Definition at line 1605 of file TGeoManager.cxx. ◆ ClearPhysicalNodes(). void TGeoManager::ClearPhysicalNodes ; (; Bool_t ; mustdelete = kFALSE). Clear the current list of physical nodes, so that we can start over with a new list. ; If MUSTDELETE is true, delete previous nodes. ; Definition at line 3542 of file TGeoManager.cxx. ◆ ClearShape(). void TGeoManager::ClearShape ; (; const TGeoShape * ; shape). Remove a shape from the list of shapes. ; Definition at line 1617 of file TGeoManager.cxx. ◆ ClearThreadData(). void TGeoManager::ClearThreadData ; (; ); const. Definition at line 953 of file TGeoManager.cxx. ◆ ClearThreadsMap(). void TGeoManager::ClearThreadsMap ; (; ). static . Clear the current map of threads. ; This will be filled again by the calling threads via ThreadId calls. ; Definition at line 984 of file TGeoManager.cxx. ◆ ClearTracks(). void TGeoManager::ClearTracks ; (; ). inline . Definition at line 415 of file TGeoManager.h. ◆ CloseGeometry(). void TGeoManager::CloseGeometry ; (; Option_t * ; option = ""d""). Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-time shapes)building the cache manager, voxelizing all volumes, counting the total number of physical nodes and registering the manager class to the browser. ; Definition at line 1480 of file TGeoManager.cxx. ◆ ConvertReflections(). void TGeoManager::ConvertReflections ; (; ). Convert all reflections in geometry to normal rotations + reflected shapes. ; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:78545,Clear,ClearThreadData,78545,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['ClearThreadData']
Usability,"174 Bool_t IsFolder() const override;; 175 Bool_t IsGrayscale();; 176 Bool_t IsRetained() const override { return fRetained; }; 177 Bool_t IsWeb() const override;; 178 void ls(Option_t *option="""") const override;; 179 void MoveOpaque(Int_t set=1);; 180 Bool_t OpaqueMoving() const override { return TestBit(kMoveOpaque); }; 181 Bool_t OpaqueResizing() const override { return TestBit(kResizeOpaque); }; 182 void Paint(Option_t *option="""") override;; 183 TPad *Pick(Int_t px, Int_t py, TObjLink *&pickobj) override { return TPad::Pick(px, py, pickobj); }; 184 virtual TPad *Pick(Int_t px, Int_t py, TObject *prevSelObj);; 185 virtual void Picked(TPad *selpad, TObject *selected, Int_t event); // *SIGNAL*; 186 virtual void Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y); // *SIGNAL*; 187 virtual void ProcessedEvent(Int_t event, Int_t x, Int_t y, TObject *selected); // *SIGNAL*; 188 virtual void Selected(TVirtualPad *pad, TObject *obj, Int_t event); // *SIGNAL*; 189 virtual void Cleared(TVirtualPad *pad); // *SIGNAL*; 190 void Closed() override; // *SIGNAL*; 191 void RaiseWindow();; 192 void ResetDrawn() { fDrawn = kFALSE; }; 193 void ResetUpdated() { fUpdated = kFALSE; }; 194 virtual void Resize(Option_t *option="""");; 195 void ResizeOpaque(Int_t set=1);; 196 void SaveSource(const char *filename="""", Option_t *option="""");; 197 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 198 void SetCursor(ECursor cursor) override;; 199 void SetDoubleBuffer(Int_t mode=1) override;; 200 void SetName(const char *name="""") override;; 201 void SetFixedAspectRatio(Bool_t fixed = kTRUE) override; // *TOGGLE*; 202 void SetGrayscale(Bool_t set = kTRUE); // *TOGGLE* *GETTER=IsGrayscale; 203 void SetWindowPosition(Int_t x, Int_t y);; 204 void SetWindowSize(UInt_t ww, UInt_t wh);; 205 void SetCanvasImp(TCanvasImp *i) { fCanvasImp = i; }; 206 void SetCanvasSize(UInt_t ww, UInt_t wh) override; // *MENU*; 207 void SetHighLightColor(Color_t col) { fHighLightColor = col; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:9003,Clear,Cleared,9003,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,1,['Clear'],['Cleared']
Usability,"1746 }; 1747}; 1748 ; 1749////////////////////////////////////////////////////////////////////////////////; 1750 ; 1751namespace {; 1752 Int_t ReadRulesContent(FILE *f); 1753 {; 1754 // Read a class.rules file which contains one rule per line with comment; 1755 // starting with a #; 1756 // Returns the number of rules loaded.; 1757 // Returns -1 in case of error.; 1758 ; 1759 R__ASSERT(f!=nullptr);; 1760 TString rule(1024);; 1761 int c, state = 0;; 1762 Int_t count = 0;; 1763 ; 1764 while ((c = fgetc(f)) != EOF) {; 1765 if (c == 13) // ignore CR; 1766 continue;; 1767 if (c == '\n') {; 1768 if (state != 3) {; 1769 state = 0;; 1770 if (rule.Length() > 0) {; 1771 if (TClass::AddRule(rule)) {; 1772 ++count;; 1773 }; 1774 rule.Clear();; 1775 }; 1776 }; 1777 continue;; 1778 }; 1779 switch (state) {; 1780 case 0: // start of line; 1781 switch (c) {; 1782 case ' ':; 1783 case '\t':; 1784 break;; 1785 case '#':; 1786 state = 1;; 1787 break;; 1788 default:; 1789 state = 2;; 1790 break;; 1791 }; 1792 break;; 1793 ; 1794 case 1: // comment; 1795 break;; 1796 ; 1797 case 2: // rule; 1798 switch (c) {; 1799 case '\\':; 1800 state = 3; // Continuation request; 1801 default:; 1802 break;; 1803 }; 1804 break;; 1805 }; 1806 switch (state) {; 1807 case 2:; 1808 rule.Append(c);; 1809 break;; 1810 }; 1811 }; 1812 return count;; 1813 }; 1814}; 1815 ; 1816////////////////////////////////////////////////////////////////////////////////; 1817/// Read the class.rules files from the default location:.; 1818/// $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules); 1819 ; 1820Int_t TClass::ReadRules(); 1821{; 1822 static const char *suffix = ""class.rules"";; 1823 TString sname = suffix;; 1824 gSystem->PrependPathName(TROOT::GetEtcDir(), sname);; 1825 ; 1826 Int_t res = -1;; 1827 ; 1828 FILE * f = fopen(sname,""r"");; 1829 if (f != nullptr) {; 1830 res = ReadRulesContent(f);; 1831 fclose(f);; 1832 } else {; 1833 ::Error(""TClass::ReadRules()"", ""Cannot find rules file %s"", sname.Data());; 1834 }; 183",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:67451,Clear,Clear,67451,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['Clear'],['Clear']
Usability,"18 TString opt = option;; 2619 opt.ToLower();; 2620 ; 2621 if (opt.Contains(""build"")) {; 2622 R__LOCKGUARD(gInterpreterMutex);; 2623 ; 2624 delete [] fComp; fComp = 0;; 2625 delete [] fCompFull; fCompFull= 0;; 2626 delete [] fCompOpt; fCompOpt = 0;; 2627 ; 2628 fNdata = 0;; 2629 fNfulldata = 0;; 2630 fNslots= 0;; 2631 fSize = 0;; 2632 ; 2633 ResetIsCompiled();; 2634 ResetBit(kBuildOldUsed);; 2635 ; 2636 TIter next(fElements);; 2637 while (auto element = (TStreamerElement*)next()) {; 2638 element->SetOffset(0);; 2639 }; 2640 ; 2641 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 2642 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 2643 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 2644 if (fReadText) fReadText->fActions.clear();; 2645 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 2646 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 2647 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 2648 if (fWriteText) fWriteText->fActions.clear();; 2649 }; 2650}; 2651 ; 2652namespace {; 2653 // TMemberInfo; 2654 // Local helper class to be able to compare data member represented by; 2655 // 2 distinct TStreamerInfos; 2656 class TMemberInfo {; 2657 public:; 2658 TClass *fParent;; 2659 TString fName;; 2660 TString fClassName;; 2661 TString fComment;; 2662 Int_t fDataType;; 2663 ; 2664 TMemberInfo(TClass *parent) : fParent(parent) {};; 2665 ; 2666 void SetDataType(Int_t datatype) {; 2667 fDataType = datatype;; 2668 }; 2669 ; 2670 void SetName(const char *name) {; 2671 fName = name;; 2672 }; 2673 void SetClassName(const char *name) {; 2674 fClassName = TClassEdit::ResolveTypedef(TClassEdit::ShortType( name, TClassEdit::kDropStlDefault | TClassEdit::kDropStd ).c_str(),kTRUE);; 2675 }; 2676 void SetComment(const char *title) {; 2677 const char *left = strstr(title,""["");; 2678 if (left) {; 2679 const char *right = strstr(left,""]"");; 2680 if (right) {; 2681 ++left;; 2682 fComment.Append(left,right-left",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:105811,clear,clear,105811,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['clear'],['clear']
Usability,"1813 }; 1814}; 1815 ; 1816////////////////////////////////////////////////////////////////////////////////; 1817 ; 1818namespace {; 1819 Int_t ReadRulesContent(FILE *f); 1820 {; 1821 // Read a class.rules file which contains one rule per line with comment; 1822 // starting with a #; 1823 // Returns the number of rules loaded.; 1824 // Returns -1 in case of error.; 1825 ; 1826 R__ASSERT(f!=nullptr);; 1827 TString rule(1024);; 1828 int c, state = 0;; 1829 Int_t count = 0;; 1830 ; 1831 while ((c = fgetc(f)) != EOF) {; 1832 if (c == 13) // ignore CR; 1833 continue;; 1834 if (c == '\n') {; 1835 if (state != 3) {; 1836 state = 0;; 1837 if (rule.Length() > 0) {; 1838 if (TClass::AddRule(rule)) {; 1839 ++count;; 1840 }; 1841 rule.Clear();; 1842 }; 1843 }; 1844 continue;; 1845 }; 1846 switch (state) {; 1847 case 0: // start of line; 1848 switch (c) {; 1849 case ' ':; 1850 case '\t':; 1851 break;; 1852 case '#':; 1853 state = 1;; 1854 break;; 1855 default:; 1856 state = 2;; 1857 break;; 1858 }; 1859 break;; 1860 ; 1861 case 1: // comment; 1862 break;; 1863 ; 1864 case 2: // rule; 1865 switch (c) {; 1866 case '\\':; 1867 state = 3; // Continuation request; 1868 default:; 1869 break;; 1870 }; 1871 break;; 1872 }; 1873 switch (state) {; 1874 case 2:; 1875 rule.Append(c);; 1876 break;; 1877 }; 1878 }; 1879 return count;; 1880 }; 1881}; 1882 ; 1883////////////////////////////////////////////////////////////////////////////////; 1884/// Read the class.rules files from the default location:.; 1885/// $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules); 1886 ; 1887Int_t TClass::ReadRules(); 1888{; 1889 static const char *suffix = ""class.rules"";; 1890 TString sname = suffix;; 1891 gSystem->PrependPathName(TROOT::GetEtcDir(), sname);; 1892 ; 1893 Int_t res = -1;; 1894 ; 1895 FILE * f = fopen(sname,""r"");; 1896 if (f != nullptr) {; 1897 res = ReadRulesContent(f);; 1898 fclose(f);; 1899 } else {; 1900 ::Error(""TClass::ReadRules()"", ""Cannot find rules file %s"", sname.Data());; 1901 }; 190",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:70202,Clear,Clear,70202,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['Clear'],['Clear']
Usability,"184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( const ROOT::Math::IMultiGenFunction & func);; 189 ; 190 /// same method as before but using any function implementing; 191 /// the operator(), so can be wrapped in a IMultiGenFunction interface; 192 template <class Function>; 193 int AddFunction( Function & f, int ndim) {; 194 // no need to care about lifetime of wfunc. It will be cloned inside AddFunction; 195 WrappedMultiFunction<Function &> wfunc(f, ndim);; 196 return AddFunction(wfunc);; 197 }; 198 ; 199 /**; 200 return the number of sunctions set in the class.; 201 The number must be equal to the dimension of the functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 218 ; 219 /**; 220 Find the root starting from the point X;; 221 Use the number of iteration and tolerance if given otherwise use; 222 default parameter values which can be defined by; 223 the static method SetDefault...; 224 */; 225 bool Solve(const double * x, int maxIter = 0, double absTol = 0, double relTol = 0);; 226 ; 227 /// Return number of iterations; 228 int Iterations() const {; 229 return fIter;; 230 }; 231 ; 232 /// Return the status of last root finding; 233 int Status() const { return fStatus; }; 234 ; 235 /// Return the algorithm name used for solving; 236 /// Note the name is available only after having called solved; 237 /// Otherwise an empyty string is returned; 238 const char * Name() const;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:8043,clear,clear,8043,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"1866 return false;; 1867 ; 1868 dnode.vis = selected ? 99 : 0;; 1869 vol->SetVisibility(selected);; 1870 if (!dnode.chlds.empty()) {; 1871 if (selected); 1872 dnode.vis = 1; // visibility disabled when any child; 1873 vol->SetVisDaughters(selected);; 1874 }; 1875 ; 1876 int id = 0;; 1877 for (auto &desc : fDesc); 1878 if (GetVolume(id++) == vol); 1879 desc.vis = dnode.vis;; 1880 ; 1881 auto stack = MakeStackByIds(giter.CurrentIds());; 1882 ; 1883 // any change in logical node visibility erase individual physical node settings; 1884 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 1885 if (compare_stacks(iter->stack, stack) == 0) {; 1886 fVisibility.erase(iter);; 1887 break;; 1888 }; 1889 ; 1890 ClearDrawData(); // after change raw data is no longer valid; 1891 ; 1892 return true;; 1893}; 1894 ; 1895/////////////////////////////////////////////////////////////////////////////////; 1896/// Change visibility for specified element; 1897/// Returns true if changes was performed; 1898 ; 1899std::unique_ptr<RGeomNodeInfo> RGeomDescription::MakeNodeInfo(const std::vector<int> &stack); 1900{; 1901 auto path = MakePathByStack(stack);; 1902 ; 1903 TLockGuard lock(fMutex);; 1904 ; 1905 std::unique_ptr<RGeomNodeInfo> res;; 1906 ; 1907 RGeomBrowserIter iter(*this);; 1908 ; 1909 if (iter.Navigate(path)) {; 1910 ; 1911 auto node = fNodes[iter.GetNodeId()];; 1912 ; 1913 auto &desc = fDesc[iter.GetNodeId()];; 1914 ; 1915 res = std::make_unique<RGeomNodeInfo>();; 1916 ; 1917 res->path = path;; 1918 res->node_name = node ? node->GetName() : ""node_name"";; 1919 res->node_type = node ? node->ClassName() : ""no class"";; 1920 ; 1921 auto vol = GetVolume(iter.GetNodeId());; 1922 ; 1923 TGeoShape *shape = vol ? vol->GetShape() : nullptr;; 1924 ; 1925 if (shape) {; 1926 res->shape_name = shape->GetName();; 1927 res->shape_type = shape->ClassName();; 1928 }; 1929 ; 1930 if (shape && desc.CanDisplay()) {; 1931 ; 1932 auto &shape_descr = MakeShapeDescr(shape);; 1933 ; 1934 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:57347,Clear,ClearDrawData,57347,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['Clear'],['ClearDrawData']
Usability,"188 ; 189protected:; 190 Bool_t SetSuspendAutoParsing(Bool_t value) final;; 191 ; 192public: // Public Interface; 193 ; 194 virtual ~TCling();; 195 TCling(const char* name, const char* title, const char* const argv[], void *interpLibHandle);; 196 ; 197 void AddIncludePath(const char* path) final;; 198 void *GetAutoLoadCallBack() const final { return fAutoLoadCallBack; }; 199 void *SetAutoLoadCallBack(void* cb) final { void* prev = fAutoLoadCallBack; fAutoLoadCallBack = cb; return prev; }; 200 Int_t AutoLoad(const char *classname, Bool_t knowDictNotLoaded = kFALSE) final;; 201 Int_t AutoLoad(const std::type_info& typeinfo, Bool_t knowDictNotLoaded = kFALSE) final;; 202 Int_t AutoParse(const char* cls) final;; 203 void* LazyFunctionCreatorAutoload(const std::string& mangled_name);; 204 bool LibraryLoadingFailed(const std::string&, const std::string&, bool, bool);; 205 Bool_t IsAutoLoadNamespaceCandidate(const clang::NamespaceDecl* nsDecl);; 206 void ClearFileBusy() final;; 207 void ClearStack() final; // Delete existing temporary values; 208 Bool_t Declare(const char* code) final;; 209 void EndOfLineAction() final;; 210 TClass *GetClass(const std::type_info& typeinfo, Bool_t load) const final;; 211 Int_t GetExitCode() const final { return fExitCode; }; 212 TEnv* GetMapfile() const final { return fMapfile; }; 213 Int_t GetMore() const final;; 214 TClass *GenerateTClass(const char *classname, Bool_t emulation, Bool_t silent = kFALSE) final;; 215 TClass *GenerateTClass(ClassInfo_t *classinfo, Bool_t silent = kFALSE) final;; 216 Int_t GenerateDictionary(const char* classes, const char* includes = """", const char* options = nullptr) final;; 217 char* GetPrompt() final { return fPrompt; }; 218 const char* GetSharedLibs() final;; 219 const char* GetClassSharedLibs(const char* cls, bool skipCore = true) final;; 220 const char* GetSharedLibDeps(const char* lib, bool tryDyld = false) final;; 221 const char* GetIncludePath() final;; 222 virtual const char* GetSTLIncludePath() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:8380,Clear,ClearStack,8380,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['Clear'],['ClearStack']
Usability,"19 ; 720////////////////////////////////////////////////////////////////////////////////; 721/// To read a TObject* from the file.; 722///; 723/// The object associated to this key is read from the file into memory; 724/// Once the key structure is read (via Streamer) the class identifier; 725/// of the object is known.; 726/// Using the class identifier we find the TClass object for this class.; 727/// A TClass object contains a full description (i.e. dictionary) of the; 728/// associated class. In particular the TClass object can create a new; 729/// object of the class type it describes. This new object now calls its; 730/// Streamer function to rebuilt itself.; 731///; 732/// Use TKey::ReadObjectAny to read any object non-derived from TObject; 733///; 734/// ### Note; 735/// A C style cast can only be used in the case where the final class; 736/// of this object derives from TObject as a first inheritance, otherwise; 737/// one must use a dynamic_cast.; 738///; 739/// #### Example1: simplified case; 740/// ~~~{.cpp}; 741/// class MyClass : public TObject, public AnotherClass; 742/// ~~~; 743/// then on return, one get away with using:; 744/// ~~~{.cpp}; 745/// MyClass *obj = (MyClass*)key->ReadObj();; 746/// ~~~; 747///; 748/// #### Example2: Usual case (recommended unless performance is critical); 749/// ~~~{.cpp}; 750/// MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; 751/// ~~~; 752/// which support also the more complex inheritance like:; 753/// ~~~{.cpp}; 754/// class MyClass : public AnotherClass, public TObject; 755/// ~~~; 756///; 757/// Of course, `dynamic_cast<>` can also be used in the example 1.; 758 ; 759TObject *TKey::ReadObj(); 760{; 761 TClass *cl = TClass::GetClass(fClassName.Data());; 762 if (!cl) {; 763 Error(""ReadObj"", ""Unknown class %s"", fClassName.Data());; 764 return 0;; 765 }; 766 if (!cl->IsTObject()) {; 767 // in principle user should call TKey::ReadObjectAny!; 768 return (TObject*)ReadObjectAny(0);; 769 }; 770 ; 771 TBufferFile ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:26671,simpl,simplified,26671,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['simpl'],['simplified']
Usability,"1; TGeoVolume::SetFindervoid SetFinder(TGeoPatternFinder *finder)Definition TGeoVolume.h:244; TGeoVolume::GetNdaughtersInt_t GetNdaughters() constDefinition TGeoVolume.h:362; TGeoVolume::IsValidBool_t IsValid() constDefinition TGeoVolume.h:154; TGeoVolume::Grabvoid Grab()Definition TGeoVolume.h:136; TGeoVolume::CheckGeometryvoid CheckGeometry(Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) constShoot nrays with random directions from starting point (startx, starty, startz) in the reference fram...Definition TGeoVolume.cxx:588; TGeoVolume::SelectVolumevoid SelectVolume(Bool_t clear=kFALSE)Select this volume as matching an arbitrary criteria.Definition TGeoVolume.cxx:2325; TGeoVolume::GetPointerNameconst char * GetPointerName() constProvide a pointer name containing uid.Definition TGeoVolume.cxx:1792; TGeoVolume::Classstatic TClass * Class(); TGeoVolume::GetNodesTObjArray * GetNodes()Definition TGeoVolume.h:169; TGeoVolume::ClearShapevoid ClearShape()Clear the shape of this volume from the list held by the current manager.Definition TGeoVolume.cxx:668; TGeoVolume::SetFWExtensionvoid SetFWExtension(TGeoExtension *ext)Connect framework defined extension to the volume.Definition TGeoVolume.cxx:1498; TGeoVolume::VisibleDaughtersvoid VisibleDaughters(Bool_t vis=kTRUE)set visibility for daughtersDefinition TGeoVolume.cxx:2453; TGeoVolume::FindOverlapsvoid FindOverlaps() constloop all nodes marked as overlaps and find overlapping brothersDefinition TGeoVolume.cxx:2227; TGeoVolume::AddNodeOverlapvirtual void AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:1044; TGeoVolume::GetNodeTGeoNode * GetNode(const char *name) constget the pointer to a daughter nodeDefinition TGeoVolume.cxx:2193; TGeoVolume::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overridecompute the closest distance of approach from point px,py to this volumeDefinitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:146754,Clear,ClearShapevoid,146754,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,3,['Clear'],"['Clear', 'ClearShape', 'ClearShapevoid']"
Usability,"1Bool_t TGenCollectionProxy::Value::IsValid(); 512{; 513 ; 514 ; 515 return fSize != std::string::npos;; 516}; 517 ; 518void TGenCollectionProxy::Value::DeleteItem(void* ptr); 519{; 520 // Delete an item.; 521 ; 522 if ( ptr && fCase&kIsPointer ) {; 523 if ( fDelete ) {; 524 (*fDelete)(ptr);; 525 }; 526 else if ( fType ) {; 527 fType->Destructor(ptr);; 528 }; 529 else {; 530 ::operator delete(ptr);; 531 }; 532 }; 533}; 534 ; 535/**; 536 \class TGenCollectionProxy TGenCollectionProxy.cxx; 537 \ingroup IO; 538 ; 539 Proxy around an arbitrary container, which implements basic; 540 functionality and iteration.; 541 ; 542 The purpose of this implementation; 543 is to shield any generated dictionary implementation from the; 544 underlying streamer/proxy implementation and only expose; 545 the creation functions.; 546 ; 547 In particular this is used to implement splitting and abstract; 548 element access of any container. Access to compiled code is necessary; 549 to implement the abstract iteration sequence and functionality like; 550 size(), clear(), resize(). resize() may be a void operation.; 551*/; 552 ; 553////////////////////////////////////////////////////////////////////////////////; 554/// Build a proxy for an emulated container.; 555 ; 556TGenCollectionProxy::TGenCollectionProxy(const TGenCollectionProxy& copy); 557 : TVirtualCollectionProxy(copy.fClass),; 558 fTypeinfo(copy.fTypeinfo); 559{; 560 fEnv = 0;; 561 fName = copy.fName;; 562 fPointers = copy.fPointers;; 563 fSTL_type = copy.fSTL_type;; 564 fSize.call = copy.fSize.call;; 565 fNext.call = copy.fNext.call;; 566 fFirst.call = copy.fFirst.call;; 567 fClear.call = copy.fClear.call;; 568 fResize = copy.fResize;; 569 fDestruct = copy.fDestruct;; 570 fConstruct = copy.fConstruct;; 571 fFeed = copy.fFeed;; 572 fCollect = copy.fCollect;; 573 fCreateEnv.call = copy.fCreateEnv.call;; 574 fValOffset = copy.fValOffset;; 575 fValDiff = copy.fValDiff;; 576 fValue = copy.fValue.load(std::memory_order_relaxed) ? new Val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:16499,clear,clear,16499,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['clear'],['clear']
Usability,"1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genpdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:Fitting -- RooAbsPdf::fitTo(genpdf_over_genpdf_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_genpdf_over_genpdf_Int[x]_genpdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(genpdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(genpdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:Fitting -- RooAbsPdf::fitTo(g2_over_g2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_g2_over_g2_Int[x]_g1Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 2551.39, estimated distance to minimum: 4.39288e-06; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; mean2 1.0010e+02 +/- 1.98e+00; sigma 3.1172e+00 +/- 7.12e-02; ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf103_interprfuncs.C. tutorialsroofitrf103_interprfuncs.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf103__interprfuncs_8C.html:7972,Guid,Guide,7972,doc/master/rf103__interprfuncs_8C.html,https://root.cern,https://root.cern/doc/master/rf103__interprfuncs_8C.html,1,['Guid'],['Guide']
Usability,"1F * hst11 = new TH1F(""hst11"", """", 20, -10, 10);; hst11->Sumw2();; hst11->FillRandom(""gaus"", 1000);; hst11->SetFillColor(kViolet);; hst11->SetLineColor(kViolet);. TH1F * hst12 = new TH1F(""hst12"", """", 20, -10, 10);; hst12->FillRandom(""gaus"", 500);; hst12->SetFillColor(kBlue);; hst12->SetLineColor(kBlue);. THStack st1(""st1"", ""st1"");; st1.Add(hst11);; st1.Add(hst12);. cst1->cd(1); st1.Draw();; cst1->cd(2); st1.Draw(""hist"");. return cst1;; }; Drawing of 3D implicit functions; 3D implicit functions (TF3) can be drawn the following way:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",600,400);; TF3 *f3 = new TF3(""f3"",""sin(x*x+y*y+z*z-36)"",-2,2,-2,2,-2,2);; f3->SetClippingBoxOn(0,0,0);; f3->SetFillColor(30);; f3->SetLineColor(15);; f3->Draw(""FBBB"");; return c2;; }; Associated functions drawing; An associated function is created by TH1::Fit. More than on fitted; function can be associated with one histogram (see TH1::Fit).; A TF1 object f1 can be added to the list of associated; functions of an histogram h without calling TH1::Fit; simply doing:. h->GetListOfFunctions()->Add(f1);. or. h->GetListOfFunctions()->Add(f1,someoption);. To retrieve a function by name from this list, do:. TF1 *f1 = (TF1*)h->GetListOfFunctions()->FindObject(name);. or. TF1 *f1 = h->GetFunction(name);. Associated functions are automatically painted when an histogram is drawn.; To avoid the painting of the associated functions the option HIST; should be added to the list of the options used to paint the histogram.; Drawing using OpenGL; The class TGLHistPainter allows to paint data set using the OpenGL 3D; graphics library. The plotting options start with GL keyword.; In addition, in order to inform canvases that OpenGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. ""GLLEGO""; Draw a l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:68520,simpl,simply,68520,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,1,['simpl'],['simply']
Usability,"1F( 's1', 'This is the first signal', 100, -4, 4 ); s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); total.Sumw2() # this makes sure that the sum of squares of weights will be stored; ; # Set canvas/frame attributes.; total.SetMarkerStyle( 21 ); total.SetMarkerSize( 0.7 ); main.SetFillColor( 16 ); s1.SetFillColor( 42 ); s2.SetFillColor( 46 ); ; # Initialize random number generator.; gRandom.SetSeed(); gauss, landau = gRandom.Gaus, gRandom.Landau; ; # for speed, bind and cache the Fill member functions; histos = [ 'total', 'main', 's1', 's2' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly; kUPDATE = 500; for i in range( 10000 ):; # Generate random values.; xmain = gauss( -1, 1.5 ); xs1 = gauss( -0.5, 0.5 ); xs2 = landau( 1, 0.15 ); mainFill( xmain ); ; # Fill histograms.; s1Fill( xs1, 0.3 ); s2Fill( xs2, 0.2 ); totalFill( xmain ); totalFill( xs1, 0.3 ); totalFill( xs2, 0.2 ); ; # Update display every kUPDATE events.; if i and (i%kUPDATE) == 0 :; if i == kUPDATE :; total.Draw( 'e1p' ); main.Draw( 'same' ); s1.Draw( 'same' ); s2.Draw( 'same' ); c1.Update(); slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); slider.SetFillColor( 46 ); ; if slider:; slider.SetRange( 0, float(i) / 10000. ); ; c1.Modified(); c1.Update(); ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; # Done, finalized and trigger an update.; slider.SetRange( 0, 1 ); total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; c1.Modified(); c1.Update(); ; gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; AuthorWim Lavrijsen ; Definition in file hsum.py. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsum_8py.html:2598,Guid,Guide,2598,doc/master/hsum_8py.html,https://root.cern,https://root.cern/doc/master/hsum_8py.html,1,['Guid'],['Guide']
Usability,"1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:2879,feedback,feedback,2879,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,"1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/ConfInterval.h>. Inheritance diagram for RooStats::ConfInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ConfInterval(). RooStats::ConfInterval::ConfInterval ; (; const char * ; name = nullptr). inlineexplicit . constructor given name and title ; Definition at line 40 of file ConfInterval.h. Member Function Documentation. ◆ CheckParameters(). virtual bool RooStats::ConfInterval::CheckParameters ; (; const RooArgSet & ; ); const. pure virtual . check if parameters are correct (i.e. they are the POI of this interval) ; Implemented in RooStats::LikelihoodInterval, RooStats::PointSetInterval, RooStats::SimpleInterval, and RooStats::MCMCInterval. ◆ Class(). static TClass * RooStats::ConfInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::ConfInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::ConfInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 67 of file ConfInterval.h. ◆ ConfidenceLevel(). virtual double RooStats::ConfInterval::ConfidenceLevel ; (; ); const. pure virtual . return confidence level ; Implemented in RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ DeclFileName(). static const char * RooStats::ConfInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 67 of file ConfInterval.h. ◆ GetParameters(). virtual RooArgS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html:13041,Simpl,SimpleInterval,13041,doc/master/classRooStats_1_1ConfInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"1[1].SetX(line2[0].GetX());; 11157 endface1[1].SetY(line2[0].GetY());; 11158 endface1[2].SetX(line3[0].GetX());; 11159 endface1[2].SetY(line3[0].GetY());; 11160 endface1[3].SetX(line4[0].GetX());; 11161 endface1[3].SetY(line4[0].GetY());; 11162 endface1[4].SetX(line1[0].GetX());; 11163 endface1[4].SetY(line1[0].GetY());; 11164 ; 11165 endface2[0].SetX(line1[1].GetX());; 11166 endface2[0].SetY(line1[1].GetY());; 11167 endface2[1].SetX(line2[1].GetX());; 11168 endface2[1].SetY(line2[1].GetY());; 11169 endface2[2].SetX(line3[1].GetX());; 11170 endface2[2].SetY(line3[1].GetY());; 11171 endface2[3].SetX(line4[1].GetX());; 11172 endface2[3].SetY(line4[1].GetY());; 11173 endface2[4].SetX(line1[1].GetX());; 11174 endface2[4].SetY(line1[1].GetY());; 11175 ; 11176 gVirtualX->DrawPolyLine(2,line2);; 11177 gVirtualX->DrawPolyLine(2,line3);; 11178 gVirtualX->DrawPolyLine(2,line4);; 11179 gVirtualX->DrawPolyLine(5,endface1);; 11180 gVirtualX->DrawPolyLine(5,endface2);; 11181 }; 11182 c->Clear();; 11183 c->cd();; 11184 TH1 *hp = h3->Project3D(""x"");; 11185 yaxis->SetRange(firstY,lastY);; 11186 zaxis->SetRange(firstZ,lastZ);; 11187 if (hp) {; 11188 hp->SetFillColor(38);; 11189 if (nbins == 1); 11190 hp->SetTitle(TString::Format(""ProjectionX of biny=%d [y=%.1f..%.1f] binz=%d [z=%.1f..%.1f]"", biny, yaxis->GetBinLowEdge(biny), yaxis->GetBinUpEdge(biny),; 11191 binz, zaxis->GetBinLowEdge(binz), zaxis->GetBinUpEdge(binz)));; 11192 else {; 11193 hp->SetTitle(TString::Format(""ProjectionX, biny=[%d,%d] [y=%.1f..%.1f], binz=[%d,%d] [z=%.1f..%.1f]"", biny, biny2, yaxis->GetBinLowEdge(biny), yaxis->GetBinUpEdge(biny2),; 11194 binz, binz2, zaxis->GetBinLowEdge(binz), zaxis->GetBinUpEdge(binz2) ) );; 11195 }; 11196 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11197 hp->SetYTitle(""Number of Entries"");; 11198 hp->Draw(fShowOption.Data());; 11199 }; 11200 }; 11201 break;; 11202 ; 11203 case 2:; 11204 // ""y""; 11205 {; 11206 Int_t firstX = xaxis->GetFirst();; 11207 Int_t lastX = xaxis->GetLast();; 11208",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:404735,Clear,Clear,404735,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"1[1].SetX(line2[0].GetX());; 11272 endface1[1].SetY(line2[0].GetY());; 11273 endface1[2].SetX(line3[0].GetX());; 11274 endface1[2].SetY(line3[0].GetY());; 11275 endface1[3].SetX(line4[0].GetX());; 11276 endface1[3].SetY(line4[0].GetY());; 11277 endface1[4].SetX(line1[0].GetX());; 11278 endface1[4].SetY(line1[0].GetY());; 11279 ; 11280 endface2[0].SetX(line1[1].GetX());; 11281 endface2[0].SetY(line1[1].GetY());; 11282 endface2[1].SetX(line2[1].GetX());; 11283 endface2[1].SetY(line2[1].GetY());; 11284 endface2[2].SetX(line3[1].GetX());; 11285 endface2[2].SetY(line3[1].GetY());; 11286 endface2[3].SetX(line4[1].GetX());; 11287 endface2[3].SetY(line4[1].GetY());; 11288 endface2[4].SetX(line1[1].GetX());; 11289 endface2[4].SetY(line1[1].GetY());; 11290 ; 11291 gVirtualX->DrawPolyLine(2,line2);; 11292 gVirtualX->DrawPolyLine(2,line3);; 11293 gVirtualX->DrawPolyLine(2,line4);; 11294 gVirtualX->DrawPolyLine(5,endface1);; 11295 gVirtualX->DrawPolyLine(5,endface2);; 11296 }; 11297 c->Clear();; 11298 c->cd();; 11299 TH1 *hp = h3->Project3D(""y"");; 11300 xaxis->SetRange(firstX,lastX);; 11301 zaxis->SetRange(firstZ,lastZ);; 11302 if (hp) {; 11303 hp->SetFillColor(38);; 11304 if (nbins == 1); 11305 hp->SetTitle(TString::Format(""ProjectionY of binx=%d [x=%.1f..%.1f] binz=%d [z=%.1f..%.1f]"", binx, xaxis->GetBinLowEdge(binx), xaxis->GetBinUpEdge(binx),; 11306 binz, zaxis->GetBinLowEdge(binz), zaxis->GetBinUpEdge(binz)));; 11307 else; 11308 hp->SetTitle(TString::Format(""ProjectionY, binx=[%d,%d] [x=%.1f..%.1f], binz=[%d,%d] [z=%.1f..%.1f]"", binx, binx2, xaxis->GetBinLowEdge(binx), xaxis->GetBinUpEdge(binx2),; 11309 binz, binz2, zaxis->GetBinLowEdge(binz), zaxis->GetBinUpEdge(binz2) ) );; 11310 hp->SetXTitle(fH->GetYaxis()->GetTitle());; 11311 hp->SetYTitle(""Number of Entries"");; 11312 hp->Draw(fShowOption.Data());; 11313 }; 11314 }; 11315 break;; 11316 ; 11317 case 3:; 11318 // ""z""; 11319 {; 11320 Int_t firstX = xaxis->GetFirst();; 11321 Int_t lastX = xaxis->GetLast();; 11322 Int_t binx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:409394,Clear,Clear,409394,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"1[1].SetX(line2[0].GetX());; 11386 endface1[1].SetY(line2[0].GetY());; 11387 endface1[2].SetX(line3[0].GetX());; 11388 endface1[2].SetY(line3[0].GetY());; 11389 endface1[3].SetX(line4[0].GetX());; 11390 endface1[3].SetY(line4[0].GetY());; 11391 endface1[4].SetX(line1[0].GetX());; 11392 endface1[4].SetY(line1[0].GetY());; 11393 ; 11394 endface2[0].SetX(line1[1].GetX());; 11395 endface2[0].SetY(line1[1].GetY());; 11396 endface2[1].SetX(line2[1].GetX());; 11397 endface2[1].SetY(line2[1].GetY());; 11398 endface2[2].SetX(line3[1].GetX());; 11399 endface2[2].SetY(line3[1].GetY());; 11400 endface2[3].SetX(line4[1].GetX());; 11401 endface2[3].SetY(line4[1].GetY());; 11402 endface2[4].SetX(line1[1].GetX());; 11403 endface2[4].SetY(line1[1].GetY());; 11404 ; 11405 gVirtualX->DrawPolyLine(2,line2);; 11406 gVirtualX->DrawPolyLine(2,line3);; 11407 gVirtualX->DrawPolyLine(2,line4);; 11408 gVirtualX->DrawPolyLine(5,endface1);; 11409 gVirtualX->DrawPolyLine(5,endface2);; 11410 }; 11411 c->Clear();; 11412 c->cd();; 11413 TH1 *hp = h3->Project3D(""z"");; 11414 xaxis->SetRange(firstX,lastX);; 11415 yaxis->SetRange(firstY,lastY);; 11416 if (hp) {; 11417 hp->SetFillColor(38);; 11418 if (nbins == 1); 11419 hp->SetTitle(TString::Format(""ProjectionZ of binx=%d [x=%.1f..%.1f] biny=%d [y=%.1f..%.1f]"", binx, xaxis->GetBinLowEdge(binx), xaxis->GetBinUpEdge(binx),; 11420 biny, yaxis->GetBinLowEdge(biny), yaxis->GetBinUpEdge(biny)));; 11421 else; 11422 hp->SetTitle(TString::Format(""ProjectionZ, binx=[%d,%d] [x=%.1f..%.1f], biny=[%d,%d] [y=%.1f..%.1f]"", binx, binx2, xaxis->GetBinLowEdge(binx), xaxis->GetBinUpEdge(binx2),; 11423 biny, biny2, yaxis->GetBinLowEdge(biny), yaxis->GetBinUpEdge(biny2) ) );; 11424 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11425 hp->SetYTitle(""Number of Entries"");; 11426 hp->Draw(fShowOption.Data());; 11427 }; 11428 }; 11429 break;; 11430 ; 11431 case 4:; 11432 // ""xy""; 11433 {; 11434 Int_t first = zaxis->GetFirst();; 11435 Int_t last = zaxis->GetLast();; 11436 Int_t binz ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:414044,Clear,Clear,414044,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"1] INFO:Fitting -- RooAbsPdf::fitTo(extmodel) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_extmodel_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: -15500.6, estimated distance to minimum: 0.000427967; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; N 4.4939e+03 +/- 6.70e+01; alpha -4.8258e-02 +/- 8.32e-04; ; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) only plotting range 'fit_nll_extmodel_modelData_LEFT,fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_extmodel_modelData_LEFT,fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html:16747,Clear,Clear,16747,doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,2,['Clear'],['Clear']
Usability,"1bias0bcast, tensor_dense_1bias0bcast + 64, tensor_dense_1Dense);; BLAS::sgemm_(&op_2_transB, &op_2_transA, &op_2_n, &op_2_m, &op_2_k, &op_2_alpha, tensor_dense_1kernel0, &op_2_ldb, tensor_activationRelu0, &op_2_lda, &op_2_beta, tensor_dense_1Dense, &op_2_n);; ; //------ RELU; for (int id = 0; id < 64 ; id++){; tensor_dense_1Relu0[id] = ((tensor_dense_1Dense[id] > 0 )? tensor_dense_1Dense[id] : 0);; }; ; //--------- Gemm; char op_4_transA = 'n';; char op_4_transB = 'n';; int op_4_m = 4;; int op_4_n = 8;; int op_4_k = 16;; float op_4_alpha = 1;; float op_4_beta = 1;; int op_4_lda = 16;; int op_4_ldb = 8;; std::copy(tensor_dense_2bias0bcast, tensor_dense_2bias0bcast + 32, tensor_dense_2Dense);; BLAS::sgemm_(&op_4_transB, &op_4_transA, &op_4_n, &op_4_m, &op_4_k, &op_4_alpha, tensor_dense_2kernel0, &op_4_ldb, tensor_dense_1Relu0, &op_4_lda, &op_4_beta, tensor_dense_2Dense, &op_4_n);; ; //------ RELU; for (int id = 0; id < 32 ; id++){; tensor_dense_2Relu0[id] = ((tensor_dense_2Dense[id] > 0 )? tensor_dense_2Dense[id] : 0);; }; ; //--------- Gemm; char op_6_transA = 'n';; char op_6_transB = 'n';; int op_6_m = 4;; int op_6_n = 4;; int op_6_k = 8;; float op_6_alpha = 1;; float op_6_beta = 1;; int op_6_lda = 8;; int op_6_ldb = 4;; std::copy(tensor_dense_3bias0bcast, tensor_dense_3bias0bcast + 16, tensor_dense_3BiasAdd0);; BLAS::sgemm_(&op_6_transB, &op_6_transA, &op_6_n, &op_6_m, &op_6_k, &op_6_alpha, tensor_dense_3kernel0, &op_6_ldb, tensor_dense_2Relu0, &op_6_lda, &op_6_beta, tensor_dense_3BiasAdd0, &op_6_n);; ; //------ RELU; for (int id = 0; id < 16 ; id++){; tensor_re_luRelu0[id] = ((tensor_dense_3BiasAdd0[id] > 0 )? tensor_dense_3BiasAdd0[id] : 0);; }; return fTensor_re_luRelu0;; }; }; // end of Session; } //TMVA_SOFIE_KerasModel; ; #endif // ROOT_TMVA_SOFIE_KERASMODEL; AuthorSanjiban Sengupta ; Definition in file TMVA_SOFIE_Keras.C. tutorialstmvaTMVA_SOFIE_Keras.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Keras_8C.html:18917,Guid,Guide,18917,doc/master/TMVA__SOFIE__Keras_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Keras_8C.html,1,['Guid'],['Guide']
Usability,"1namespace Internal {; 32 using ScalarBackend = vecCore::backend::Scalar;; 33#ifdef VECCORE_ENABLE_VC; 34 using VectorBackend = vecCore::backend::VcVector;; 35#else; 36 using VectorBackend = vecCore::backend::Scalar;; 37#endif; 38}; 39 using Float_v = typename Internal::VectorBackend::Float_v;; 40 using Double_v = typename Internal::VectorBackend::Double_v;; 41 using Int_v = typename Internal::VectorBackend::Int_v;; 42 using Int32_v = typename Internal::VectorBackend::Int32_v;; 43 using UInt_v = typename Internal::VectorBackend::UInt_v;; 44 using UInt32_v = typename Internal::VectorBackend::UInt32_v;; 45}; 46 ; 47#else // R__HAS_VECCORE; 48 ; 49// We do not have explicit vectorisation support enabled. Fall back to regular ROOT types.; 50 ; 51#include ""RtypesCore.h""; 52 ; 53namespace ROOT {; 54 using Float_v = Float_t;; 55 using Double_v = Double_t;; 56 using Int_v = Int_t;; 57 using Int32_v = Int_t; // FIXME: Should we introduce Int32_t in RtypesCore.h?; 58 using UInt_v = UInt_t;; 59 using UInt32_v = UInt_t; // FIXME: Should we introduce UInt32_t in RtypesCore.h?; 60}; 61#endif; 62 ; 63#endif // ROOT_Math_VecTypes; RtypesCore.h; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; double; int; unsigned int; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::UInt_vUInt_t UInt_vDefinition Types.h:58; ROOT::Int32_vInt_t Int32_vDefinition Types.h:57; ROOT::UInt32_vUInt_t UInt32_vDefinition Types.h:59; ROOT::Int_vInt_t Int_vDefinition Types.h:56; ROOT::Double_vDouble_t Double_vDefinition Types.h:55; ROOT::Float_vFloat_t Float_vDefinition Types.h:54. mathmathcoreincMathTypes.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:08:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/math_2mathcore_2inc_2Math_2Types_8h_source.html:2856,Guid,Guide,2856,doc/v632/math_2mathcore_2inc_2Math_2Types_8h_source.html,https://root.cern,https://root.cern/doc/v632/math_2mathcore_2inc_2Math_2Types_8h_source.html,1,['Guid'],['Guide']
Usability,"2 * Rsq_ij ] ]; r5 = sum_i [ M1_mi * H_ni ]; r6 = sum_i [ M1_ni * H_mi ]. calculate contributions containing matrices F and G; r0,r1,r2. void SetTauError(Double_t delta_tau); set uncertainty on tau. void GetDeltaSysSource(TH1* hist_delta, const char* source, const Int_t* binMap = 0); calculate systematic shift from a given source; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(). void GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0); get correlated shift induced by a background source; delta: output shift vector histogram; source: name of background source; binMap: see method GetEmatrix(); see PrepareSysError(). void GetDeltaSysTau(TH1* delta, const Int_t* binMap = 0); calculate systematic shift from tau variation; ematrix: output; binMap: see method GetEmatrix(). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given source; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given background scale error; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in regularisation parameter; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in input vector alone; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:25103,clear,clearEmat,25103,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,9,['clear'],"['clear', 'clearEmat']"
Usability,"2 ; 1323 CollectNodes(drawing, all_nodes);; 1324 ; 1325 return MakeDrawingJson(drawing, has_shape);; 1326}; 1327 ; 1328/////////////////////////////////////////////////////////////////////; 1329/// Check if there is draw data available; 1330 ; 1331bool RGeomDescription::HasDrawData() const; 1332{; 1333 TLockGuard lock(fMutex);; 1334 return (fDrawJson.length() > 0) && (fDrawIdCut > 0);; 1335}; 1336 ; 1337/////////////////////////////////////////////////////////////////////; 1338/// Produces search data if necessary; 1339 ; 1340void RGeomDescription::ProduceSearchData(); 1341{; 1342 TLockGuard lock(fMutex);; 1343 ; 1344 if (fSearch.empty() || !fSearchJson.empty()); 1345 return;; 1346 ; 1347 std::string hjson;; 1348 ; 1349 SearchVisibles(fSearch, hjson, fSearchJson);; 1350 ; 1351 (void)hjson; // not used here; 1352}; 1353 ; 1354/////////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:41438,Clear,Clear,41438,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['Clear'],['Clear']
Usability,"2 namespace Math {; 53 ; 54 template <class T, unsigned int D>; 55 class SVector;; 56 ; 57#ifdef XXX; 58//==============================================================================; 59// SMatrix * SVector; 60//==============================================================================; 61template <class T, unsigned int D1, unsigned int D2, class R>; 62SVector<T,D1> operator*(const SMatrix<T,D1,D2,R>& rhs, const SVector<T,D2>& lhs); 63{; 64 SVector<T,D1> tmp;; 65 for(unsigned int i=0; i<D1; ++i) {; 66 const unsigned int rpos = i*D2;; 67 for(unsigned int j=0; j<D2; ++j) {; 68 tmp[i] += rhs.apply(rpos+j) * lhs.apply(j);; 69 }; 70 }; 71 return tmp;; 72}; 73#endif; 74 ; 75 ; 76// matrix-vector product:; 77// use apply(i) function for matrices. Tested (11/05/06) with using (i,j) but; 78// performances are slightly worse (not clear why); 79 ; 80//==============================================================================; 81// meta_row_dot; 82//==============================================================================; 83template <unsigned int I>; 84struct meta_row_dot {; 85 template <class A, class B>; 86 static inline typename A::value_type f(const A& lhs, const B& rhs,; 87 const unsigned int offset) {; 88 return lhs.apply(offset+I) * rhs.apply(I) + meta_row_dot<I-1>::f(lhs,rhs,offset);; 89 }; 90};; 91 ; 92 ; 93//==============================================================================; 94// meta_row_dot<0>; 95//==============================================================================; 96template <>; 97struct meta_row_dot<0> {; 98 template <class A, class B>; 99 static inline typename A::value_type f(const A& lhs, const B& rhs,; 100 const unsigned int offset) {; 101 return lhs.apply(offset) * rhs.apply(0);; 102 }; 103};; 104 ; 105//==============================================================================; 106// VectorMatrixRowOp; 107//==============================================================================; 108template <class Matrix, cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MatrixFunctions_8h_source.html:2536,clear,clear,2536,doc/master/MatrixFunctions_8h_source.html,https://root.cern,https://root.cern/doc/master/MatrixFunctions_8h_source.html,1,['clear'],['clear']
Usability,"2 of file TBtree.h. ◆ After(). TObject * TBtree::After ; (; const TObject * ; obj); const. overridevirtual . Cannot use this method since B-tree decides order. ; Implements TSeqCollection.; Definition at line 228 of file TBtree.cxx. ◆ At(). TObject * TBtree::At ; (; Int_t ; idx); const. inlineoverridevirtual . Implements TSeqCollection.; Definition at line 369 of file TBtree.h. ◆ Before(). TObject * TBtree::Before ; (; const TObject * ; obj); const. overridevirtual . May not use this method since B-tree decides order. ; Implements TSeqCollection.; Definition at line 237 of file TBtree.cxx. ◆ Class(). static TClass * TBtree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBtree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBtree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 100 of file TBtree.h. ◆ Clear(). void TBtree::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from B-tree. ; Does NOT delete objects unless the TBtree is the owner (set via SetOwner()). ; Implements TCollection.; Definition at line 247 of file TBtree.cxx. ◆ DeclFileName(). static const char * TBtree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 100 of file TBtree.h. ◆ DecrNofKeys(). void TBtree::DecrNofKeys ; (; ). inlineprotected . Definition at line 61 of file TBtree.h. ◆ Delete(). void TBtree::Delete ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from B-tree AND delete all heap based objects. ; Implements TCollection.; Definition at line 260 of file TBtree.cxx. ◆ FindObject() [1/2]. TObject * TBtree::FindObject ; (; const char * ; name); const. overridevirtual . Find object using its name (see object's GetName()). ; Requires sequential search of complete tree till object is found. ; Reimplemented from TObject.; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBtree.html:28234,Clear,Clear,28234,doc/master/classTBtree.html,https://root.cern,https://root.cern/doc/master/classTBtree.html,1,['Clear'],['Clear']
Usability,"2 of file TSQLStructure.cxx. ◆ ClassDefOverride(). TSQLTableData::ClassDefOverride ; (; TSQLTableData ; , . 1 ;  . ). ◆ DefineSQLName(). TString TSQLTableData::DefineSQLName ; (; const char * ; fullname). protected . produce suitable name for column, taking into account length limitation ; Definition at line 234 of file TSQLStructure.cxx. ◆ GetColumn(). const char * TSQLTableData::GetColumn ; (; Int_t ; n). return column value ; Definition at line 300 of file TSQLStructure.cxx. ◆ GetNumColumns(). Int_t TSQLTableData::GetNumColumns ; (; ). returns number of columns in provided set ; Definition at line 292 of file TSQLStructure.cxx. ◆ HasSQLName(). Bool_t TSQLTableData::HasSQLName ; (; const char * ; sqlname). protected . checks if columns list already has that sql name ; Definition at line 274 of file TSQLStructure.cxx. ◆ IsNumeric(). Bool_t TSQLTableData::IsNumeric ; (; Int_t ; n). identifies if column has numeric value ; Definition at line 308 of file TSQLStructure.cxx. ◆ TakeColInfos(). TObjArray * TSQLTableData::TakeColInfos ; (; ). take ownership over colinfos ; Definition at line 316 of file TSQLStructure.cxx. Member Data Documentation. ◆ fColInfos. TObjArray* TSQLTableData::fColInfos {nullptr}. protected . ! array with TSQLClassColumnInfo, used later for TSQLClassInfo ; Definition at line 65 of file TSQLStructure.h. ◆ fColumns. TObjArray TSQLTableData::fColumns. protected . ! collection of columns ; Definition at line 64 of file TSQLStructure.h. ◆ fFile. TSQLFile* TSQLTableData::fFile {nullptr}. protected . ! ; Definition at line 62 of file TSQLStructure.h. ◆ fInfo. TSQLClassInfo* TSQLTableData::fInfo {nullptr}. protected . ! ; Definition at line 63 of file TSQLStructure.h. Libraries for TSQLTableData:. [legend]; The documentation for this class was generated from the following files:; io/sql/inc/TSQLStructure.h; io/sql/src/TSQLStructure.cxx. TSQLTableData. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableData.html:13549,Guid,Guide,13549,doc/master/classTSQLTableData.html,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html,1,['Guid'],['Guide']
Usability,"2 void CheckMatrix();; 173 ; 174public:; 175 TGeoRotation();; 176 TGeoRotation(const TGeoRotation &other);; 177 TGeoRotation(const TGeoMatrix &other);; 178 TGeoRotation(const char *name);; 179 // TGeoRotation(const char *name, Double_t *matrix) ;; 180 TGeoRotation(const char *name, Double_t phi, Double_t theta, Double_t psi);; 181 TGeoRotation(const char *name, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3,; 182 Double_t phi3);; 183 ~TGeoRotation() override {}; 184 ; 185 TGeoRotation &operator=(const TGeoRotation &other) { return TGeoRotation::operator=((TGeoMatrix &)other); }; 186 TGeoRotation &operator=(const TGeoMatrix &other);; 187 TGeoRotation &operator*=(const TGeoRotation &other);; 188 TGeoRotation operator*(const TGeoRotation &other) const;; 189 TGeoHMatrix operator*(const TGeoMatrix &right) const;; 190 Bool_t operator==(const TGeoRotation &other) const;; 191 ; 192 Bool_t IsValid() const;; 193 TGeoHMatrix Inverse() const override;; 194 void Clear(Option_t *option = """") override;; 195 Double_t Determinant() const;; 196 void FastRotZ(const Double_t *sincos);; 197 void GetAngles(Double_t &theta1, Double_t &phi1, Double_t &theta2, Double_t &phi2, Double_t &theta3,; 198 Double_t &phi3) const;; 199 void GetAngles(Double_t &phi, Double_t &theta, Double_t &psi) const;; 200 Double_t GetPhiRotation(Bool_t fixX = kFALSE) const;; 201 void LocalToMaster(const Double_t *local, Double_t *master) const override;; 202 void LocalToMasterVect(const Double_t *local, Double_t *master) const override; 203 {; 204 TGeoRotation::LocalToMaster(local, master);; 205 }; 206 void LocalToMasterBomb(const Double_t *local, Double_t *master) const override; 207 {; 208 TGeoRotation::LocalToMaster(local, master);; 209 }; 210 TGeoMatrix *MakeClone() const override;; 211 void MasterToLocal(const Double_t *master, Double_t *local) const override;; 212 void MasterToLocalVect(const Double_t *master, Double_t *local) const override; 213 {; 214 TGeoRotation::MasterTo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h_source.html:9016,Clear,Clear,9016,doc/master/TGeoMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h_source.html,1,['Clear'],['Clear']
Usability,"2"" : the Delaunay triangles are painted with color levels.; 749/// - ""P"" : Draw a marker at each vertex; 750/// - ""P0"" : Draw a circle at each vertex. Each circle background is white.; 751/// - ""PCOL"" : Draw a marker at each vertex. The color of each marker is; 752/// defined according to its Z position.; 753/// - ""CONT"" : Draw contours; 754/// - ""LINE"" : Draw a 3D polyline; 755///; 756/// A TGraph2D can be also drawn with ANY options valid to draw a 2D histogram.; 757///; 758/// When a TGraph2D is drawn with one of the 2D histogram drawing option,; 759/// a intermediate 2D histogram is filled using the Delaunay triangles; 760/// technique to interpolate the data set.; 761 ; 762void TGraph2D::Draw(Option_t *option); 763{; 764 TString opt = option;; 765 opt.ToLower();; 766 if (gPad) {; 767 if (!gPad->IsEditable()) gROOT->MakeDefCanvas();; 768 if (!opt.Contains(""same"")) {; 769 //the following statement is necessary in case one attempts to draw; 770 //a temporary histogram already in the current pad; 771 if (TestBit(kCanDelete)) gPad->GetListOfPrimitives()->Remove(this);; 772 gPad->Clear();; 773 }; 774 }; 775 AppendPad(opt.Data());; 776}; 777 ; 778 ; 779////////////////////////////////////////////////////////////////////////////////; 780/// Executes action corresponding to one event; 781 ; 782void TGraph2D::ExecuteEvent(Int_t event, Int_t px, Int_t py); 783{; 784 if (fHistogram) fHistogram->ExecuteEvent(event, px, py);; 785}; 786 ; 787 ; 788////////////////////////////////////////////////////////////////////////////////; 789/// search object named name in the list of functions; 790 ; 791TObject *TGraph2D::FindObject(const char *name) const; 792{; 793 if (fFunctions) return fFunctions->FindObject(name);; 794 return nullptr;; 795}; 796 ; 797 ; 798////////////////////////////////////////////////////////////////////////////////; 799/// search object obj in the list of functions; 800 ; 801TObject *TGraph2D::FindObject(const TObject *obj) const; 802{; 803 if (fFunctions) retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:25301,Clear,Clear,25301,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['Clear'],['Clear']
Usability,"2) code = code | 0x8;; 908 return code;; 909}; 910 ; 911////////////////////////////////////////////////////////////////////////////////; 912/// Clip polygon using the Sutherland-Hodgman algorithm.; 913///; 914/// \param[in] n Number of points in the polygon to; 915/// be clipped; 916/// \param[in] x,y Polygon x[n], y[n] do be clipped vertices; 917/// \param[in] xclipl,yclipb,xclipr,yclipt Clipping boundary; 918/// \param[out] nn Number of points in xc and yc; 919/// \param[out] xc,yc Clipped polygon vertices. The Int_t; 920/// returned by this function is; 921/// the number of points in the clipped; 922/// polygon. These vectors must; 923/// be allocated by the calling function.; 924/// A size of 2*n for each is; 925/// enough.; 926///; 927/// Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer; 928/// strategy: It solves a series of simple and identical problems that, when; 929/// combined, solve the overall problem. The simple problem is to clip a polygon; 930/// against a single infinite clip edge. Four clip edges, each defining one boundary; 931/// of the clip rectangle, successively clip a polygon against a clip rectangle.; 932///; 933/// Steps of Sutherland-Hodgman's polygon-clipping algorithm:; 934///; 935/// * Polygons can be clipped against each edge of the window one at a time.; 936/// Windows/edge intersections, if any, are easy to find since the X or Y coordinates; 937/// are already known.; 938/// * Vertices which are kept after clipping against one window edge are saved for; 939/// clipping against the remaining edges.; 940/// * Note that the number of vertices usually changes and will often increases.; 941///; 942/// The clip boundary determines a visible and invisible region. The edges from; 943/// vertex i to vertex i+1 can be one of four types:; 944///; 945/// * Case 1 : Wholly inside visible region - save endpoint; 946/// * Case 2 : Exit visible region - save the intersection; 947/// * Case 3 : Wholly outside visible regi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:29154,simpl,simple,29154,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['simpl'],['simple']
Usability,"2, Float_t arrowsize=0, Option_t *option="""")Draw this arrow with new coordinates.Definition TArrow.cxx:135; TArrow::Drawvoid Draw(Option_t *option="""") overrideDraw this arrow with its current attributes.Definition TArrow.cxx:120; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h:22; c1return c1Definition legend1.C:41; t1auto * t1Definition textangle.C:20; AuthorRene Brun ; Definition in file eval.C. tutorialsgraphicseval.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/eval_8C.html:3466,Guid,Guide,3466,doc/master/eval_8C.html,https://root.cern,https://root.cern/doc/master/eval_8C.html,1,['Guid'],['Guide']
Usability,"2, data, y);; 2.3 Resetting the formula; 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points. –Example: TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; e#define e(i)Definition RSha256.hxx:103; TLinearFitter::Evalvirtual Int_t Eval()Perform the fit and evaluate the parameters Returns 0 if the fit is ok, 1 if there are errors.Definition TLinearFitter.cxx:874; TLinearFitter::AssignDatavirtual void AssignData(Int_t npoints, Int_t xncols, Double_t *x, Double_t *y, Double_t *e=nullptr)This function is to use when you already have all the data in arrays and don't want to copy them into...Definition TLinearFitter.cxx:583; 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a different formula. 3.Accessing the fit results; 3.1 There are methods in the fitter to access all relevant information:; –GetParameters, GetCovarianceMatrix, etc –the t-values of parameters and their significance can be reached by GetParTValue() and GetParSignificance() methods; 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points which do not appear to follow the characteristic distribution of the rest of the data. These may reflect genuine properties of the underlying phenomenon(variable), or be due to measurement errors or anomalies which shouldn't be modelled. (StatSoft electronic textbook); Even a single gross outlier can greatly influence the results of least- squares fitting procedure, and in this case use of robust(resistant) methods is recommended.; The ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:6218,clear,cleared,6218,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['clear'],['cleared']
Usability,"2,3 and 4 dimensions with their transformations) is not anymore part of MathCore, but is built as a separate library. MathCore contains instead now classes which were originally part of libCore. These include:. TMath : namespace with mathematical functions and basic function algorithms.; TComplex: class for complex numbers.; Random classes: base class TRandom and the derived classes TRandom1, TRandom2 and TRandom3, implementing the pseudo-random number generators.; Other classes, such as; TKDTree for partitioning the data using a kd-Tree and TKDTreeBinning for binning data using a kdTree; ROOT::Math::GoFTest for goodness of fit tests . Modules;  Fitting and Parameter Estimation;  Classes used for fitting (regression analysis) and estimation of parameter values given a data sample. ;  ;  Interface classes for Random number generation;  Pseudo-random numbers generator classes and for generation of random number distributions. ;  ;  Goodness of Fit Tests;  Classical one-dimensional goodness of git tests for unbinned data. ;  ;  Function Classes and Interfaces;  Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods for describing function classes. ;  ;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ;  ;  Special functions;  Special mathematical functions. ;  . Files; file  RFit.hxx;  . Classes; class  ROOT::Math::Delaunay2D;  Class to generate a Delaunay triangulation of a 2D set of points. More...;  ; class  TKDTreeBinning;  <- TKDTreeBinning - A class providing multidimensional binning -> More...;  ; class  TStatistic;  Statistical variable, defined by its mean and variance (RMS). More...;  . ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/group__MathCore.html:3378,Guid,Guide,3378,doc/v632/group__MathCore.html,https://root.cern,https://root.cern/doc/v632/group__MathCore.html,1,['Guid'],['Guide']
Usability,"2,p->par3,p->par4,p->par5,p->par6,p->par7,p->par8);\; }\; \; void _NAME3_(TGWin32,klass,Proxy)::method(type1 par1,type2 par2,type3 par3,type4 par4,type5 par5,type6 par6,type7 par7,type8 par8)\; {\; DEBUG_PROFILE_PROXY_START(method)\; struct tmp {\; type1 par1; type2 par2; type3 par3; type4 par4; type5 par5; type6 par6; type7 par7; type8 par8;\; tmp(type1 par1,type2 par2,type3 par3,type4 par4,type5 par5,type6 par6,type7 par7,type8 par8):par1(par1),par2(par2),par3(par3),par4(par4),par5(par5),par6(par6),par7(par7),par8(par8) {}\; };\; fParam = new tmp(par1,par2,par3,par4,par5,par6,par7,par8);\; fCallBack = &_NAME4_(p2,klass,method,par1);\; Bool_t batch = ForwardCallBack(sync);\; par1 = ((tmp*)fParam)->par1;\; par2 = ((tmp*)fParam)->par2;\; par3 = ((tmp*)fParam)->par3;\; par4 = ((tmp*)fParam)->par4;\; par5 = ((tmp*)fParam)->par5;\; par6 = ((tmp*)fParam)->par6;\; par7 = ((tmp*)fParam)->par7;\; par8 = ((tmp*)fParam)->par8;\; if (!batch) delete fParam;\; DEBUG_PROFILE_PROXY_STOP(method)\; }. Definition at line 384 of file TGWin32ProxyDefs.h. ◆ VOID_METHOD_ARG9. #define VOID_METHOD_ARG9; (;  ; klass, .  ; method, .  ; type1, .  ; par1, .  ; type2, .  ; par2, .  ; type3, .  ; par3, .  ; type4, .  ; par4, .  ; type5, .  ; par5, .  ; type6, .  ; par6, .  ; type7, .  ; par7, .  ; type8, .  ; par8, .  ; type9, .  ; par9, .  ; sync . ). Definition at line 417 of file TGWin32ProxyDefs.h. Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkDebugProfile ; kDebugTrace . Definition at line 38 of file TGWin32ProxyDefs.h. Variable Documentation. ◆ gDebugProxy. int gDebugProxy = 0. static . Definition at line 36 of file TGWin32ProxyDefs.h. ◆ total. unsigned int total = 0. static . Definition at line 40 of file TGWin32ProxyDefs.h. ◆ total_time. double total_time = 0. static . Definition at line 41 of file TGWin32ProxyDefs.h. graf2dwin32gdkincTGWin32ProxyDefs.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32ProxyDefs_8h.html:30679,Guid,Guide,30679,doc/master/TGWin32ProxyDefs_8h.html,https://root.cern,https://root.cern/doc/master/TGWin32ProxyDefs_8h.html,1,['Guid'],['Guide']
Usability,"2-dimensional background estimation, smoothing, deconvolution, peak search and fitting, and orthogonal transformations.; RooFit is a complete toolkit for fitting and data analysis modeling (see the RooFit User Guide at ftp://root.cern.ch/root/doc/RooFit_Users_Manual_2.07-29.pdf); TSplot to disentangle signal from background via an extended maximum likelihood fit and with a tool to access the quality and validity of the fit producing distributions for the control variables. (see M. Pivk and F.R. Le Diberder, Nucl. Inst. Meth.A 555, 356-369, 2005).; 13.14.3 Multi-variate Analysis Classes; TMultiLayerPerceptron is a Neural Network class (see for more details the chapter “Neural Networks”).; TPrincipal provides the Principal Component Analysis.; TRobustEstimator is a robust method for minimum covariance determinant estimator (MCD).; TMVA is a package for multivariate data analysis (see https://github.com/root-project/root/blob/master/documentation/tmva/UsersGuide/TMVAUsersGuide.pdf the User’s Guide).; 14 Linear Algebra in ROOT; The linear algebra package is supposed to give a complete environment in ROOT to perform calculations like equation solving and eigenvalue decompositions. Most calculations are performed in double precision. For backward compatibility, some classes are also provided in single precision like TMatrixF, TMatrixFSym and TVectorF. Copy constructors exist to transform these into their double precision equivalent, thereby allowing easy access to decomposition and eigenvalue classes, only available in double precision.; The choice was made not to provide the less frequently used complex matrix classes. If necessary, users can always reformulate the calculation in 2 parts, a real one and an imaginary part. Although, a linear equation involving complex numbers will take about a factor of 8 more computations, the alternative of introducing a set of complex classes in this non-template library would create a major maintenance challenge.; Another choice was t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:768044,Guid,Guide,768044,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Guid'],['Guide']
Usability,"2.259, p0=6.404e-10, ; prevFCN = 26.37493074 p0=6.286e-10, ; prevFCN = 26.37493074 p0=1.367e-14, s=0.2103, ; prevFCN = 26.3749307 s=0.2103, ; prevFCN = 26.37493077 f=0.2654, m=2.259, s=0.2103, ; prevFCN = 26.37493101 m=2.259, p0=1.589e-08, ; prevFCN = 26.37493123 p0=1.367e-14, s=0.2104, ; prevFCN = 26.37493103 f=0.2652, m=2.259, p0=1.589e-08, s=0.2103, ; prevFCN = 26.37493099 p0=1.367e-14, s=0.2104, ; prevFCN = 26.37493085 m=2.259, p0=1.589e-08, ; prevFCN = 26.37493105 p0=1.367e-14, s=0.2103, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; All Message streams; [0] MinLevel = PROGRESS Topic = Generation Minimization Plotting Fitting Integration LinkStateMgmt Eval Caching Optimization ObjectHandling InputArguments Tracing Contents DataHandling NumericIntegration FastEvaluations ; [1] MinLevel = INFO Topic = Minimization Plotting Fitting Eval Caching ObjectHandling InputArguments DataHandling NumericIntegration ; [2] MinLevel = INFO Topic = HistFactory ; [3] MinLevel = DEBUG Topic = LinkStateMgmt ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x5588a5f9db10,g): adding server x(0x7fff8734d4f0) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x5588a5f9db10,g): adding server m(0x7fff8734b8d8) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x5588a5f9db10,g): adding server s(0x7fff8734bcc0) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x5588a5f9db10,g): adding server x(0x7fff8734d4f0) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x5588a5f9db10,g): adding server m(0x7fff8734b8d8) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x5588a5f9db10,g): adding server s(0x7fff8734bcc0) for value ; RooGaussian::g[ x=x mean=m sigma=s ] = 8.804e-26; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf506_msgservice.C. tutorialsroofitrf506_msgservice.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8C.html:30027,Guid,Guide,30027,doc/master/rf506__msgservice_8C.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8C.html,1,['Guid'],['Guide']
Usability,"2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C H1 analysis example expressed in terms of TTreeReader ;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  hsimpleProxyDriver.C This is the driver of the hsimpleProxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  temperature.CThis tutorial illustrates how to use the highlight mode with trees ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but usin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:168489,simpl,simplest,168489,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simplest']
Usability,2/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 141 of file TVirtualRWMutex.h. ◆ ~TWriteLockGuard(). ROOT::TWriteLockGuard::~TWriteLockGuard ; (; ). inline . Definition at line 145 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TWriteLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TWriteLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TWriteLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 147 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TWriteLockGuard::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 147 of file TVirtualRWMutex.h. ◆ IsA(). TClass * ROOT::TWriteLockGuard::IsA ; (; ); const. inline . ReturnsTClass describing current object ; Definition at line 147 of file TVirtualRWMutex.h. ◆ operator=(). TWriteLockGuard & ROOT::TWriteLockGuard::operator= ; (; const TWriteLockGuard & ; ). privatedelete . ◆ Streamer(). void ROOT::TWriteLockGuard::Streamer ; (; TBuffer & ; ). ◆ StreamerNVirtual(). void ROOT::TWriteLockGuard::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 147 of file TVirtualRWMutex.h. Member Data Documentation. ◆ fHint. TVirtualRWMutex::Hint_t* ROOT::TWriteLockGuard::fHint. private . Definition at line 135 of file TVirtualRWMutex.h. ◆ fMutex. TVirtualRWMutex* const ROOT::TWriteLockGuard::fMutex. private . Definition at line 134 of file TVirtualRWMutex.h. Libraries for ROOT::TWriteLockGuard:. [legend]; The documentation for this class was generated from the following file:; core/base/inc/TVirtualRWMutex.h. ROOTTWriteLockGuard. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:01 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TWriteLockGuard.html:3141,Guid,Guide,3141,doc/master/classROOT_1_1TWriteLockGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TWriteLockGuard.html,1,['Guid'],['Guide']
Usability,"2/2]. TMVA::CrossEntropy::CrossEntropy ; (; const CrossEntropy & ; g). inline . Definition at line 51 of file CrossEntropy.h. ◆ ~CrossEntropy(). virtual TMVA::CrossEntropy::~CrossEntropy ; (; ). inlinevirtual . Definition at line 54 of file CrossEntropy.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::CrossEntropy::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::CrossEntropy::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::CrossEntropy::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file CrossEntropy.h. ◆ DeclFileName(). static const char * TMVA::CrossEntropy::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file CrossEntropy.h. ◆ GetSeparationIndex(). Double_t TMVA::CrossEntropy::GetSeparationIndex ; (; const Double_t ; s, . const Double_t ; b . ). virtual . Cross Entropy defined as: ; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b) . Implements TMVA::SeparationBase.; Definition at line 47 of file CrossEntropy.cxx. ◆ IsA(). virtual TClass * TMVA::CrossEntropy::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::SeparationBase.; Definition at line 61 of file CrossEntropy.h. ◆ Streamer(). virtual void TMVA::CrossEntropy::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::SeparationBase. ◆ StreamerNVirtual(). void TMVA::CrossEntropy::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file CrossEntropy.h. Libraries for TMVA::CrossEntropy:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/CrossEntropy.h; tmva/tmva/src/CrossEntropy.cxx. TMVACrossEntropy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html:4136,Guid,Guide,4136,doc/master/classTMVA_1_1CrossEntropy.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html,1,['Guid'],['Guide']
Usability,"20 */; 221 BinData::BinData(const BinData &rhs); 222 : FitData(rhs),; 223 fDataPtr(nullptr),; 224 fDataErrorPtr(nullptr), fDataErrorHighPtr(nullptr), fDataErrorLowPtr(nullptr),; 225 fpTmpCoordErrorVector(nullptr), fpTmpBinEdgeVector(nullptr); 226 {; 227 *this = rhs;; 228 }; 229 ; 230 BinData & BinData::operator= ( const BinData & rhs ); 231 {; 232 FitData::operator=( rhs );; 233 ; 234 if ( fpTmpBinEdgeVector ); 235 {; 236 assert(HasBinEdges());; 237 ; 238 delete[] fpTmpBinEdgeVector;; 239 fpTmpBinEdgeVector= nullptr;; 240 }; 241 ; 242 if ( fpTmpCoordErrorVector ); 243 {; 244 delete[] fpTmpCoordErrorVector;; 245 fpTmpCoordErrorVector = nullptr;; 246 }; 247 ; 248 fDataPtr = nullptr;; 249 fDataErrorPtr= fDataErrorHighPtr= fDataErrorLowPtr= nullptr;; 250 ; 251 fErrorType = rhs.fErrorType;; 252 fRefVolume = rhs.fRefVolume;; 253 fBinEdge = rhs.fBinEdge;; 254 ; 255 if ( fWrapped ); 256 {; 257 fData.clear();; 258 fCoordErrors.clear();; 259 fDataError.clear();; 260 fDataErrorHigh.clear();; 261 fDataErrorLow.clear();; 262 ; 263 fDataPtr = rhs.fDataPtr;; 264 fCoordErrorsPtr = rhs.fCoordErrorsPtr;; 265 fDataErrorPtr = rhs.fDataErrorPtr;; 266 fDataErrorHighPtr = rhs.fDataErrorHighPtr;; 267 fDataErrorLowPtr = rhs.fDataErrorLowPtr;; 268 }; 269 else; 270 {; 271 // copy data vector and set correct pointer; 272 fData = rhs.fData;; 273 if ( !fData.empty() ); 274 fDataPtr = &fData.front();; 275 ; 276 // copy coordinate errors and set correct pointers; 277 fCoordErrors = rhs.fCoordErrors;; 278 if (!fCoordErrors.empty()) {; 279 assert(kCoordError == fErrorType || kAsymError == fErrorType);; 280 fCoordErrorsPtr.resize(fDim);; 281 for (unsigned int i = 0; i < fDim; i++) {; 282 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 283 }; 284 }; 285 // copy data error; 286 fDataError = rhs.fDataError;; 287 if (!fDataError.empty()) {; 288 assert(kValueError == fErrorType || kCoordError == fErrorType);; 289 fDataErrorPtr = &fDataError.front();; 290 }; 291 // copy ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:7186,clear,clear,7186,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"20 xx[0] = xaxis->GetXmax();; 11521 view->WCtoNDC(xx,u);; 11522 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11523 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11524 xx[1] = yaxis->GetXmin();; 11525 view->WCtoNDC(xx,u);; 11526 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11527 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11528 xx[0] = xaxis->GetXmin();; 11529 view->WCtoNDC(xx,u);; 11530 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11531 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11532 gVirtualX->DrawPolyLine(5,rect1);; 11533 if (nbins>1) {; 11534 xx[0] = xaxis->GetXmin();; 11535 xx[1] = yaxis->GetXmax();; 11536 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11537 view->WCtoNDC(xx,u);; 11538 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11539 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11540 rect2[4].SetX(rect2[0].GetX());; 11541 rect2[4].SetY(rect2[0].GetY());; 11542 xx[0] = xaxis->GetXmax();; 11543 view->WCtoNDC(xx,u);; 11544 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11545 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11546 xx[1] = yaxis->GetXmin();; 11547 view->WCtoNDC(xx,u);; 11548 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11549 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11550 xx[0] = xaxis->GetXmin();; 11551 view->WCtoNDC(xx,u);; 11552 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11553 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11554 gVirtualX->DrawPolyLine(5,rect2);; 11555 }; 11556 c->Clear();; 11557 c->cd();; 11558 TH2 *hp = (TH2*)h3->Project3D(""yx"");; 11559 zaxis->SetRange(first,last);; 11560 if (hp) {; 11561 hp->SetFillColor(38);; 11562 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYX of binz=%d [z=%.1f..%.f]"", binz,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz)));; 11563 else hp->SetTitle(TString::Format(""ProjectionYX, binz=[%d,%d] [z=%.1f..%.1f]"", binz,binz2,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz2)));; 11564 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11565 hp->SetYTitle(fH->GetYax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:419575,ux,uxmin,419575,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"202 of file IFunction.h. ◆ Gradient(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::Gradient ; (; const T * ; x, . T * ; grad . ); const. inlinevirtual . Evaluate all the vector of function derivatives (gradient) at a point x. ; Derived classes must re-implement it if more efficient than evaluating one at a time ; Definition at line 177 of file IFunction.h. ◆ GradientWithPrevResult(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::GradientWithPrevResult ; (; const T * ; x, . T * ; grad, . T * ; previous_grad, . T * ; previous_g2, . T * ; previous_gstep . ); const. inlinevirtual . In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ; The previous_* arrays can also be used to return second derivative and step size so that these can be passed forward again as well at the call site, if necessary. ; Definition at line 188 of file IFunction.h. ◆ HasGradient(). template<class T > . bool ROOT::Math::IGradientFunctionMultiDimTempl< T >::HasGradient ; (; ); const. inlinevirtual . Reimplemented from ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Definition at line 220 of file IFunction.h. ◆ NDim(). template<class T > . virtual unsigned int ROOT::Math::IBaseFunctionMultiDimTempl< T >::NDim ; (; ); const. virtual . Retrieve the dimension of the function. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Reimplemented in ROOT::Math::MinimTransformFunction, ROOT::Math::MultiNumGradFunction, and ROOT::Math::LSResidualFunc< Func >. ◆ returnsInMinuit2ParameterSpace(). template<class T > . virtual bool ROOT::Math::IGradientFunctionMultiDimTempl< T >::returnsInMinuit2ParameterSpace ; (; ); const. inlinevirtual . Definition at line 222 of file IFunction.h. math/mathcore/inc/Math/IFunction.h. ROOTMathIGradientFunctionMultiDimTempl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html:8559,Guid,Guide,8559,doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,1,['Guid'],['Guide']
Usability,"2068 ; 2069 RGeomBrowserIter giter(*this);; 2070 ; 2071 if (!giter.Navigate(path)); 2072 return false;; 2073 ; 2074 auto stack = MakeStackByIds(giter.CurrentIds());; 2075 ; 2076 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 2077 if (compare_stacks(iter->stack, stack) == 0) {; 2078 fVisibility.erase(iter);; 2079 ClearDrawData();; 2080 return true;; 2081 }; 2082 ; 2083 return false;; 2084}; 2085 ; 2086/////////////////////////////////////////////////////////////////////////////////; 2087/// Reset all custom visibility settings; 2088 ; 2089bool RGeomDescription::ClearAllPhysVisibility(); 2090{; 2091 TLockGuard lock(fMutex);; 2092 ; 2093 if (fVisibility.empty()); 2094 return false;; 2095 ; 2096 fVisibility.clear();; 2097 ClearDrawData();; 2098 return true;; 2099}; 2100 ; 2101/////////////////////////////////////////////////////////////////////////////////; 2102/// Change configuration by client; 2103/// Returns true if any parameter was really changed; 2104 ; 2105bool RGeomDescription::ChangeConfiguration(const std::string &json); 2106{; 2107 auto cfg = TBufferJSON::FromJSON<RGeomConfig>(json);; 2108 if (!cfg); 2109 return false;; 2110 ; 2111 TLockGuard lock(fMutex);; 2112 ; 2113 auto json1 = TBufferJSON::ToJSON(cfg.get());; 2114 auto json2 = TBufferJSON::ToJSON(&fCfg);; 2115 ; 2116 if (json1 == json2); 2117 return false;; 2118 ; 2119 fCfg = *cfg; // use assign; 2120 ; 2121 ClearDrawData();; 2122 ; 2123 return true;; 2124}; 2125 ; 2126/////////////////////////////////////////////////////////////////////////////////; 2127/// Change search query and belongs to it json string; 2128/// Returns true if any parameter was really changed; 2129 ; 2130bool RGeomDescription::SetSearch(const std::string &query, const std::string &json); 2131{; 2132 TLockGuard lock(fMutex);; 2133 ; 2134 bool changed = (fSearch != query) || (fSearchJson != json);; 2135 fSearch = query;; 2136 fSearchJson = json;; 2137 return changed;; 2138}; 2139 ; 2140/////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:63203,clear,clear,63203,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,4,"['Clear', 'clear']","['ClearDrawData', 'clear']"
Usability,21 of file RooMomentMorphFunc.cxx. ◆ sumFunc() [2/2]. const RooAbsReal * RooMomentMorphFunc::sumFunc ; (; const RooArgSet * ; nset); const. Definition at line 333 of file RooMomentMorphFunc.cxx. ◆ useHorizontalMorphing(). void RooMomentMorphFunc::useHorizontalMorphing ; (; bool ; val). inline . Definition at line 46 of file RooMomentMorphFunc.h. Friends And Related Symbol Documentation. ◆ CacheElem. friend class CacheElem. friend . Current normalization set. ; Definition at line 83 of file RooMomentMorphFunc.h. Member Data Documentation. ◆ _cacheMgr. RooObjCacheManager RooMomentMorphFunc::_cacheMgr. mutableprotected . Definition at line 80 of file RooMomentMorphFunc.h. ◆ _curNormSet. RooArgSet* RooMomentMorphFunc::_curNormSet = nullptr. mutableprotected . The cache manager. ; Definition at line 81 of file RooMomentMorphFunc.h. ◆ _M. TMatrixD* RooMomentMorphFunc::_M = nullptr. mutableprotected . Definition at line 99 of file RooMomentMorphFunc.h. ◆ _mref. TVectorD* RooMomentMorphFunc::_mref = nullptr. mutableprotected . Definition at line 97 of file RooMomentMorphFunc.h. ◆ _pdfList. RooListProxy RooMomentMorphFunc::_pdfList. protected . Definition at line 96 of file RooMomentMorphFunc.h. ◆ _setting. Setting RooMomentMorphFunc::_setting. protected . Definition at line 101 of file RooMomentMorphFunc.h. ◆ _useHorizMorph. bool RooMomentMorphFunc::_useHorizMorph = true. protected . Definition at line 103 of file RooMomentMorphFunc.h. ◆ _varList. RooSetProxy RooMomentMorphFunc::_varList. protected . Definition at line 95 of file RooMomentMorphFunc.h. ◆ m. RooRealProxy RooMomentMorphFunc::m. protected . Definition at line 94 of file RooMomentMorphFunc.h. Libraries for RooMomentMorphFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooMomentMorphFunc.h; roofit/roofit/src/RooMomentMorphFunc.cxx. RooMomentMorphFunc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFunc.html:68785,Guid,Guide,68785,doc/master/classRooMomentMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFunc.html,1,['Guid'],['Guide']
Usability,"21, 0.80, ""#sqrt{{s}} = 13 TeV, {:.2f} fb^{{-1}}"".format(lumi * args.lumi_scale / 1000.0)); ; # Save the plot; c.SaveAs(""df105_WBosonAnalysis.png""); print(""Saved figure to df105_WBosonAnalysis.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; int; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; RangeTa Range(0, 0, 1, 1); Run on data corresponding to 0.01 fb^-1 ...; Saved figure to df105_WBosonAnalysis.png; DateMarch 2020 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df105_WBosonAnalysis.py. tutorialsdataframedf105_WBosonAnalysis.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html:10140,Guid,Guide,10140,doc/master/df105__WBosonAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html,1,['Guid'],['Guide']
Usability,"21, const char *title="""", Option_t *option="""") overrideTPadvirtual; cd(Int_t subpadnumber=0) overrideTCanvasvirtual; ChangedBy(const char *method)TQObjectinlinevirtual; CheckConnectArgs(TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot)TQObjectprotectedstatic; CheckedHash()TObjectinline; Class()TCanvasstatic; Class_Name()TCanvasstatic; Class_Version()TCanvasinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTCanvasvirtual; Cleared(TVirtualPad *pad)TCanvasvirtual; ClearPadSave()TCanvasinline; Clip(Float_t *x, Float_t *y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt)TPadvirtual; Clip(Double_t *x, Double_t *y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt) overrideTPadvirtual; ClippingCode(Double_t x, Double_t y, Double_t xcl1, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas-members.html:1599,Clear,Clear,1599,doc/master/classTCanvas-members.html,https://root.cern,https://root.cern/doc/master/classTCanvas-members.html,3,['Clear'],"['Clear', 'ClearPadSave', 'Cleared']"
Usability,"21, const char *title="""", Option_t *option="""") overrideTPadvirtual; cd(Int_t subpadnumber=0) overrideTPadvirtual; ChangedBy(const char *method)TQObjectinlinevirtual; CheckConnectArgs(TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot)TQObjectprotectedstatic; CheckedHash()TObjectinline; Class()TPadstatic; Class_Name()TPadstatic; Class_Version()TPadinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTPadvirtual; Clip(Float_t *x, Float_t *y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt)TPadvirtual; Clip(Double_t *x, Double_t *y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt) overrideTPadvirtual; ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2)TPadvirtual; ClipPolygon(Int_t n, Double_t *x, Double_t *y, Int_t nn, Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad-members.html:1555,Clear,Clear,1555,doc/master/classTPad-members.html,https://root.cern,https://root.cern/doc/master/classTPad-members.html,1,['Clear'],['Clear']
Usability,"21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24#include ""TNamed.h""; 25#include ""TClass.h""; 26#include ""TUUID.h""; 27#include <atomic>; 28 ; 29#ifdef R__LESS_INCLUDES; 30class TList;; 31#else; 32#include ""TList.h""; 33#include ""TBuffer.h""; 34// #include ""TDatime.h""; 35#endif; 36 ; 37class TBrowser;; 38class TKey;; 39class TFile;; 40namespace ROOT {; 41namespace Internal {; 42 struct TDirectoryAtomicAdapter;; 43}}; 44 ; 45class TDirectory : public TNamed {; 46public:; 47 ; 48/** \class TContext; 49\ingroup Base; 50 ; 51TDirectory::TContext keeps track and restore the current directory.; 52With this tool C++ exceptions will be guaranteed to properly restore the; 53current directory pointer.; 54 ; 55For example code like:; 56 ; 57~~~ {.cpp}; 58 TDirectory *sav = gDirectory;; 59 mydirectory->cd();; 60 if (...) {; 61 ....; 62 sav->cd();; 63 return;; 64 } else if (...) {; 65 ....; 66 sav->cd();; 67 return;; 68 }; 69 sav->cd;; 70 return;; 71~~~; 72 ; 73can be replaced with the simpler and exception safe:; 74 ; 75~~~ {.cpp}; 76 TDirectory::TContext context(gDirectory, mydirectory);; 77 if (...) {; 78 ....; 79 return;; 80 } else if (...) {; 81 ....; 82 return;; 83 }; 84 return;; 85~~~; 86 ; 87*/; 88 ; 89 class TContext {; 90 private:; 91 std::atomic<TDirectory*> fDirectory{nullptr}; //! Pointer to the previous current directory.; 92 std::atomic<bool> fActiveDestructor{false}; //! Set to true during the destructor execution; 93 std::atomic<bool> fDirectoryWait{false}; //! Set to true if a TDirectory might still access this object.; 94 TContext *fPrevious{nullptr}; //! Pointer to the next TContext in the implied list of context pointing to fPrevious.; 95 TContext *fNext{nullptr}; //! Pointer to the next TContext in the implied list of context pointing to fPrevious.; 96 ; 97 TContext(TContext&) = delete;; 98 TContext& operator=(TContext&) = delete;; 99 ; 100 void CdNull();; 101 friend class TDirectory;; 102 ; 103 void RegisterCurrentDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8h_source.html:1876,simpl,simpler,1876,doc/master/TDirectory_8h_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8h_source.html,1,['simpl'],['simpler']
Usability,"21// TODO: see also imagemagick's C++ interface for RColor operations!; 22// https://www.imagemagick.org/api/magick++-classes.php; 23 ; 24/** \class RColor; 25\ingroup GpadROOT7; 26\brief The color class; 27\author Axel Naumann <axel@cern.ch>; 28\author Sergey Linev <S.Linev@gsi.de>; 29\date 2017-09-26; 30\warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; 31*/; 32 ; 33class RColor {; 34 ; 35 using RGB_t = std::array<uint8_t, 3>;; 36 ; 37private:; 38 ; 39 std::string fColor; ///< string representation of color; 40 ; 41 static std::string toHex(uint8_t v);; 42 ; 43 static std::vector<uint8_t> ConvertNameToRGB(const std::string &name);; 44 ; 45 bool SetRGBHex(const std::string &hex);; 46 bool SetAlphaHex(const std::string &hex);; 47 ; 48public:; 49 ; 50 RColor() = default;; 51 ; 52 /** Construct color with provided r,g,b values */; 53 RColor(uint8_t r, uint8_t g, uint8_t b) { SetRGB(r, g, b); }; 54 ; 55 /** Construct color with provided r,g,b and alpha values */; 56 RColor(uint8_t r, uint8_t g, uint8_t b, float alpha); 57 {; 58 SetRGBA(r, g, b, alpha);; 59 }; 60 ; 61 /** Construct color with provided RGB_t value */; 62 RColor(const RGB_t &rgb) { SetRGB(rgb[0], rgb[1], rgb[2]); };; 63 ; 64 /** Construct color with provided string */; 65 RColor(const std::string &color) { SetColor(color); };; 66 ; 67 /** Construct color with provided ordinal value */; 68 RColor(float ordinal) { SetOrdinal(ordinal); };; 69 ; 70 /** Returns true if color is empty */; 71 bool IsEmpty() const { return fColor.empty(); }; 72 ; 73 bool IsRGB() const;; 74 bool IsRGBA() const;; 75 bool IsName() const;; 76 bool IsAuto() const;; 77 bool IsOrdinal() const;; 78 ; 79 /** Set r/g/b components of color */; 80 void SetRGB(const RGB_t &rgb) { SetRGB(rgb[0], rgb[1], rgb[2]); }; 81 ; 82 /** Set r/g/b components of color */; 83 void SetRGB(uint8_t r, uint8_t g, uint8_t b);; 84 ; 85 /** Set r/g/b/a components of color, a is integer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RColor_8hxx_source.html:1196,Feedback,Feedback,1196,doc/master/RColor_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RColor_8hxx_source.html,1,['Feedback'],['Feedback']
Usability,"2108 void* dyLibHandle = dlopen(dyLibName.c_str(), RTLD_LAZY | RTLD_GLOBAL);; 2109 if (dyLibHandle) {; 2110 fRegisterModuleDyLibs.push_back(dyLibHandle);; 2111 wasDlopened = true;; 2112 } else {; 2113 PrintDlError(dyLibName.c_str(), modulename);; 2114 }; 2115 }; 2116 } // if (!lateRegistration); 2117 ; 2118 if (hasHeaderParsingOnDemand && fwdDeclsCode){; 2119 // We now parse the forward declarations. All the classes are then modified; 2120 // in order for them to have an external lexical storage.; 2121 std::string fwdDeclsCodeLessEnums;; 2122 {; 2123 // Search for enum forward decls and only declare them if no; 2124 // declaration exists yet.; 2125 std::string fwdDeclsLine;; 2126 std::istringstream fwdDeclsCodeStr(fwdDeclsCode);; 2127 std::vector<std::string> scopes;; 2128 while (std::getline(fwdDeclsCodeStr, fwdDeclsLine)) {; 2129 const auto enumPos = fwdDeclsLine.find(""enum __attribute__((annotate(\"""");; 2130 // We check if the line contains a fwd declaration of an enum; 2131 if (enumPos != std::string::npos) {; 2132 // We clear the scopes which we may have carried from a previous iteration; 2133 scopes.clear();; 2134 // We check if the enum is not in a scope. If yes, save its name; 2135 // and the names of the enclosing scopes.; 2136 if (enumPos != 0) {; 2137 // it's enclosed in namespaces. We need to understand what they are; 2138 auto nsPos = fwdDeclsLine.find(""namespace"");; 2139 R__ASSERT(nsPos < enumPos && ""Inconsistent enum and enclosing scope parsing!"");; 2140 while (nsPos < enumPos && nsPos != std::string::npos) {; 2141 // we have a namespace, let's put it in the collection of scopes; 2142 const auto nsNameStart = nsPos + 10;; 2143 const auto nsNameEnd = fwdDeclsLine.find('{', nsNameStart);; 2144 const auto nsName = fwdDeclsLine.substr(nsNameStart, nsNameEnd - nsNameStart);; 2145 scopes.push_back(nsName);; 2146 nsPos = fwdDeclsLine.find(""namespace"", nsNameEnd);; 2147 }; 2148 }; 2149 clang::DeclContext* DC = nullptr;; 2150 for (auto &&aScope: scopes) {; 2151",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:81805,clear,clear,81805,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['clear'],['clear']
Usability,"22////////////////////////////////////////////////////////////////////////////////; 3523/// Refresh physical nodes to reflect the actual geometry paths after alignment; 3524/// was applied. Optionally locks physical nodes (default).; 3525 ; 3526void TGeoManager::RefreshPhysicalNodes(Bool_t lock); 3527{; 3528 TIter next(gGeoManager->GetListOfPhysicalNodes());; 3529 TGeoPhysicalNode *pn;; 3530 while ((pn = (TGeoPhysicalNode *)next())); 3531 pn->Refresh();; 3532 if (fParallelWorld && fParallelWorld->IsClosed()); 3533 fParallelWorld->RefreshPhysicalNodes();; 3534 if (lock); 3535 LockGeometry();; 3536}; 3537 ; 3538////////////////////////////////////////////////////////////////////////////////; 3539/// Clear the current list of physical nodes, so that we can start over with a new list.; 3540/// If MUSTDELETE is true, delete previous nodes.; 3541 ; 3542void TGeoManager::ClearPhysicalNodes(Bool_t mustdelete); 3543{; 3544 if (mustdelete); 3545 fPhysicalNodes->Delete();; 3546 else; 3547 fPhysicalNodes->Clear();; 3548}; 3549 ; 3550////////////////////////////////////////////////////////////////////////////////; 3551/// Make an assembly of volumes.; 3552 ; 3553TGeoVolumeAssembly *TGeoManager::MakeVolumeAssembly(const char *name); 3554{; 3555 return TGeoBuilder::Instance(this)->MakeVolumeAssembly(name);; 3556}; 3557 ; 3558////////////////////////////////////////////////////////////////////////////////; 3559/// Make a TGeoVolumeMulti handling a list of volumes.; 3560 ; 3561TGeoVolumeMulti *TGeoManager::MakeVolumeMulti(const char *name, TGeoMedium *medium); 3562{; 3563 return TGeoBuilder::Instance(this)->MakeVolumeMulti(name, medium);; 3564}; 3565 ; 3566////////////////////////////////////////////////////////////////////////////////; 3567/// Set type of exploding view (see TGeoPainter::SetExplodedView()); 3568 ; 3569void TGeoManager::SetExplodedView(Int_t ibomb); 3570{; 3571 if ((ibomb >= 0) && (ibomb < 4)); 3572 fExplodedView = ibomb;; 3573 if (fPainter); 3574 fPainter->SetExplod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:129689,Clear,ClearPhysicalNodes,129689,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,2,['Clear'],"['Clear', 'ClearPhysicalNodes']"
Usability,"23 class IFitterTarget;; 24 class Interval;; 25}; 26 ; 27namespace ROOT {; 28 namespace Math {; 29 ; 30 ; 31//_______________________________________________________________________________; 32/*; 33 structure containing the parameters of the genetic minimizer; 34 */; 35struct GeneticMinimizerParameters {; 36 ; 37 Int_t fPopSize;; 38 Int_t fNsteps;; 39 Int_t fCycles;; 40 Int_t fSC_steps;; 41 Int_t fSC_rate;; 42 Double_t fSC_factor;; 43 Double_t fConvCrit;; 44 Int_t fSeed;; 45 ; 46 ; 47 // constructor with default value; 48 GeneticMinimizerParameters();; 49};; 50 ; 51 ; 52 ; 53//_______________________________________________________________________________; 54/**; 55 GeneticMinimizer; 56 ; 57 Minimizer class based on the Gentic algorithm implemented in TMVA; 58 ; 59 @ingroup MultiMin; 60*/; 61class GeneticMinimizer: public ROOT::Math::Minimizer {; 62 ; 63public:; 64 ; 65 //GeneticMinimizer (int = 0);; 66 GeneticMinimizer (int i = 0);; 67 ~GeneticMinimizer () override;; 68 ; 69 void Clear() override;; 70 using ROOT::Math::Minimizer::SetFunction;; 71 void SetFunction(const ROOT::Math::IMultiGenFunction & func) override;; 72 ; 73 bool SetLimitedVariable(unsigned int , const std::string& , double , double , double, double) override;; 74 bool SetVariable(unsigned int ivar, const std::string & name, double val, double step) override;; 75 bool SetFixedVariable(unsigned int ivar , const std::string & name , double val) override;; 76 ; 77 bool Minimize() override;; 78 double MinValue() const override;; 79 double Edm() const override;; 80 const double * X() const override;; 81 const double * MinGradient() const override;; 82 unsigned int NCalls() const override;; 83 ; 84 unsigned int NDim() const override;; 85 unsigned int NFree() const override;; 86 ; 87 bool ProvidesError() const override;; 88 const double * Errors() const override;; 89 ; 90 double CovMatrix(unsigned int i, unsigned int j) const override;; 91 ; 92 void SetParameters(const GeneticMinimizerParameters & params",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneticMinimizer_8h_source.html:1727,Clear,Clear,1727,doc/master/GeneticMinimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneticMinimizer_8h_source.html,1,['Clear'],['Clear']
Usability,"230 of file THnChain.cxx. ◆ ProjectionAny(). TObject * THnChain::ProjectionAny ; (; Int_t ; ndim, . const Int_t * ; dim, . Option_t * ; option = """" . ); const. private . Projects all histograms in the chain. ; See THnBase::Projection for parameters and their semantics. ; Definition at line 71 of file THnChain.cxx. ◆ ProjectionND(). THnBase * THnChain::ProjectionND ; (; Int_t ; ndim, . const Int_t * ; dim, . Option_t * ; option = """" . ); const. See THnBase::Projection for the intended behavior. ; Definition at line 246 of file THnChain.cxx. ◆ ReadHistogram(). THnBase * THnChain::ReadHistogram ; (; const char * ; fileName); const. private . Retrieve a histogram from a file. ; Parameters. fileNamepath of the file to read. . Definition at line 137 of file THnChain.cxx. ◆ SetupAxes(). void THnChain::SetupAxes ; (; THnBase & ; hs); const. private . Copy the properties of all axes to a histogram. ; Parameters. hshistogram whose axes should be updated . Definition at line 157 of file THnChain.cxx. ◆ Streamer(). void THnChain::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void THnChain::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 83 of file THnChain.h. Member Data Documentation. ◆ fAxes. std::vector<TAxis*> THnChain::fAxes. private . the list of histogram axes ; Definition at line 73 of file THnChain.h. ◆ fFiles. std::vector<std::string> THnChain::fFiles. private . a list of files to extract the histogram from ; Definition at line 72 of file THnChain.h. ◆ fName. std::string THnChain::fName. private . name of the histogram ; Definition at line 70 of file THnChain.h. Libraries for THnChain:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THnChain.h; hist/hist/src/THnChain.cxx. THnChain. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnChain.html:16770,Guid,Guide,16770,doc/master/classTHnChain.html,https://root.cern,https://root.cern/doc/master/classTHnChain.html,1,['Guid'],['Guide']
Usability,"230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system files. ; Definition at line 294 of file TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user seen so far. ; Definition at line 306 of file TTabCom.cxx. ◆ Complete(). Int_t TTabCom::Complete ; (; const TRegexp & ; re, . const TSeqCollection * ; pListOfCandidates, . const char ; appendage[], . std::ostream & ; out, . TString::ECaseCompare ; cmp = TString::kExact . ). private . [private] ; Definition at line 1163 of file TTabCom.cxx. ◆ CopyMatch(). void TTabCom::CopyMatch ; (; char * ; dest, . int ; dest_len, . const char * ; localName, . const char * ; appendage = nullptr, . const char * ; fullName = nullptr . ); const. private . [private] ; Definition at line 1415 of file TTabCom.cxx. ◆ DeclFileName(). static const char * TTabCom::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file TTabCom.h. ◆ DetermineClass(). TString TTabCom::DetermineClass ; (; const char ; varName[]). static . [static utility function]///////////////////////////// ; returns empty string on failure. ot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:10651,Clear,ClearUsers,10651,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearUsers']
Usability,"2344 }; 2345 }; 2346 subbranch->fOnfileObject = fOnfileObject;; 2347 lastbranch = subbranch;; 2348 }; 2349 }; 2350 if (toplevel) {; 2351 SetBit(kOwnOnfileObj);; 2352 if (lastbranch != this); 2353 lastbranch->ResetBit(kOwnOnfileObj);; 2354 } else {; 2355 lastbranch->SetBit(kOwnOnfileObj);; 2356 }; 2357 };; 2358 if (GetID() > -1) {; 2359 // We are *not* a top-level branch.; 2360 std::string s(GetName());; 2361 size_t pos = s.rfind('.');; 2362 if (pos != std::string::npos) {; 2363 s = s.substr(pos+1);; 2364 }; 2365 while ((pos = s.rfind('[')) != std::string::npos) {; 2366 s = s.substr(0, pos);; 2367 }; 2368 int offset = 0;; 2369 TStreamerElement* elt = fInfo->GetStreamerElement(s.c_str(), offset);; 2370 if (elt && offset!=TStreamerInfo::kMissing) {; 2371 size_t ndata = fInfo->GetNelement();; 2372 fNewIDs.clear();; 2373 for (size_t i = 0; i < ndata; ++i) {; 2374 if (fInfo->GetElement(i) == elt) {; 2375 if (elt->TestBit (TStreamerElement::kCache); 2376 && (i+1) < ndata; 2377 && s == fInfo->GetElement(i)->GetName()); 2378 {; 2379 // If the TStreamerElement we found is storing the information in the; 2380 // cache and is a repeater, we need to use the real one (the next one).; 2381 // (At least until the cache/repeat mechanism is properly handle by; 2382 // ReadLeaves).; 2383 // fID = i+1;; 2384 fID = i;; 2385 if (fType != 2) {; 2386 if (elt->TestBit(TStreamerElement::kRepeat)) {; 2387 fNewIDs.push_back(fID+1);; 2388 fNewIDs.back().fElement = fInfo->GetElement(i+1);; 2389 fNewIDs.back().fInfo = fInfo;; 2390 } else if (fInfo->GetElement(i+1)->TestBit(TStreamerElement::kWrite)) {; 2391 fNewIDs.push_back(fID+1);; 2392 fNewIDs.back().fElement = fInfo->GetElement(i+1);; 2393 fNewIDs.back().fInfo = fInfo;; 2394 }; 2395 }; 2396 } else {; 2397 fID = i;; 2398 }; 2399 if (elt->TestBit (TStreamerElement::kCache)) {; 2400 SetBit(TBranchElement::kCache);; 2401 }; 2402 break;; 2403 }; 2404 }; 2405 for (size_t i = fID+1+(fNewIDs.size()); i < ndata; ++i) {; 2406 TStreamerElement *nextel =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:84840,clear,clear,84840,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['clear'],['clear']
Usability,"24 xx[1] = yaxis->GetXmin();; 11525 view->WCtoNDC(xx,u);; 11526 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11527 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11528 xx[0] = xaxis->GetXmin();; 11529 view->WCtoNDC(xx,u);; 11530 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11531 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11532 gVirtualX->DrawPolyLine(5,rect1);; 11533 if (nbins>1) {; 11534 xx[0] = xaxis->GetXmin();; 11535 xx[1] = yaxis->GetXmax();; 11536 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11537 view->WCtoNDC(xx,u);; 11538 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11539 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11540 rect2[4].SetX(rect2[0].GetX());; 11541 rect2[4].SetY(rect2[0].GetY());; 11542 xx[0] = xaxis->GetXmax();; 11543 view->WCtoNDC(xx,u);; 11544 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11545 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11546 xx[1] = yaxis->GetXmin();; 11547 view->WCtoNDC(xx,u);; 11548 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11549 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11550 xx[0] = xaxis->GetXmin();; 11551 view->WCtoNDC(xx,u);; 11552 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11553 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11554 gVirtualX->DrawPolyLine(5,rect2);; 11555 }; 11556 c->Clear();; 11557 c->cd();; 11558 TH2 *hp = (TH2*)h3->Project3D(""yx"");; 11559 zaxis->SetRange(first,last);; 11560 if (hp) {; 11561 hp->SetFillColor(38);; 11562 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYX of binz=%d [z=%.1f..%.f]"", binz,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz)));; 11563 else hp->SetTitle(TString::Format(""ProjectionYX, binz=[%d,%d] [z=%.1f..%.1f]"", binz,binz2,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz2)));; 11564 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11565 hp->SetYTitle(fH->GetYaxis()->GetTitle());; 11566 hp->SetZTitle(""Number of Entries"");; 11567 hp->Draw(fShowOption.Data());; 11568 }; 11569 }; 11570 break;; 11571 ; 11572 case 6:; 11573 // ""xz"";",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:419744,ux,uxmin,419744,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"243 puts(""Unable to allocate memory for segment polygons !"");; 244 return;; 245 }; 246 }; 247 else{; 248 if((segs[seg].polys = (polygon **) realloc(segs[seg].polys,; 249 (segs[seg].numPolys + 1) * sizeof(polygon *))) == NULL){; 250 puts(""Unable to allocate memory for segment polygons !"");; 251 return;; 252 }; 253 }; 254 segs[seg].polys[segs[seg].numPolys] = &(polys[currPoly]);; 255 segs[seg].numPolys++;; 256 }; 257 }; 258 }; 259}; 260 ; 261#endif; 262 ; c#define c(i)Definition RSha256.hxx:101; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; qfloat * qDefinition THbookFile.cxx:89; segssegment * segsDefinition X3DBuffer.c:23; currSegint currSegDefinition X3DBuffer.c:18; polyspolygon * polysDefinition X3DBuffer.c:24; AllocateX3DBufferint AllocateX3DBuffer()Definition X3DBuffer.c:27; pointspoint * pointsDefinition X3DBuffer.c:22; currPointint currPointDefinition X3DBuffer.c:17; gVarSize3DSize3D gVarSize3DDefinition X3DBuffer.c:9; colorsColor * colorsDefinition X3DBuffer.c:21; gFuncSize3DSize3D * gFuncSize3D()Definition X3DBuffer.c:10; currPolyint currPolyDefinition X3DBuffer.c:19; FillX3DBuffervoid FillX3DBuffer(X3DBuffer *buff)Definition X3DBuffer.c:142; X3DBuffer.h; gSize3D#define gSize3DDefinition X3DBuffer.h:40; realloc#define reallocDefinition civetweb.c:1538; free#define freeDefinition civetweb.c:1539; calloc#define callocDefinition civetweb.c:1537; nconst Int_t nDefinition legend1.C:16; _x3d_data_Definition X3DBuffer.h:15; _x3d_data_::pointsfloat * pointsDefinition X3DBuffer.h:19; _x3d_data_::numSegsint numSegsDefinition X3DBuffer.h:17; _x3d_data_::numPolysint numPolysDefinition X3DBuffer.h:18; _x3d_data_::numPointsint numPointsDefinition X3DBuffer.h:16; _x3d_data_::segsint * segsDefinition X3DBuffer.h:20; _x3d_data_::polysint * polysDefinition X3DBuffer.h:21; _x3d_sizeof_Definition X3DBuffer.h:24. graf3dg3dsrcX3DBuffer.c. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/X3DBuffer_8c_source.html:9381,Guid,Guide,9381,doc/master/X3DBuffer_8c_source.html,https://root.cern,https://root.cern/doc/master/X3DBuffer_8c_source.html,1,['Guid'],['Guide']
Usability,"2498; TStatistic::HashULong_t Hash() const overrideReturn hash value for this object.Definition TStatistic.h:53. Reimplemented from TObject.; Definition at line 53 of file TStatistic.h. ◆ IsA(). TClass * TStatistic::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 77 of file TStatistic.h. ◆ ls(). void TStatistic::ls ; (; Option_t * ; option = """"); const. inlineoverridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 75 of file TStatistic.h. ◆ Merge(). Int_t TStatistic::Merge ; (; TCollection * ; in). Merge implementation of TStatistic. ; Parameters. [in]inOther TStatistic objects to be added to the current one. The function merges the statistics of all objects together to form a new one. Merging quantities is done via simple addition for the following class data members:; number of entries fN; the sum of weights fW; the sum of squared weights fW2; the sum of (value*weight) fM. The sum of squared (value*weight) pairs fM2 is updated using the same formula as in TStatistic::Fill() function.; The minimum(maximum) is updated by checking that the minimum(maximum) of the next TStatistic object in the queue is either less(greater) than the current minimum(maximum). ; Definition at line 137 of file TStatistic.cxx. ◆ Print(). void TStatistic::Print ; (; Option_t * ; = """"); const. overridevirtual . Print the content of the object. ; Prints the statistics held by the object in one line. These include the mean, mean error, RMS, the total number of values, the minimum and the maximum. ; Reimplemented from TObject.; Definition at line 115 of file TStatistic.cxx. ◆ Streamer(). void TStatistic::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TStatistic::StreamerNVirtual ; (; TBuffer & ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatistic.html:17098,simpl,simple,17098,doc/master/classTStatistic.html,https://root.cern,https://root.cern/doc/master/classTStatistic.html,1,['simpl'],['simple']
Usability,"25 +1.000 +0.884; : m_wwbb: +0.415 +0.547 +0.085 +0.557 +0.447 +0.884 +1.000; : ----------------------------------------------------------------; DataSetFactory : [dataset] : ; : ; Factory : Booking method: ␛[1mDNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:WeightInitialization=XAVIER:InputLayout=1|1|7:BatchLayout=1|128|7:Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=20,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:WeightInitialization=XAVIER:InputLayout=1|1|7:BatchLayout=1|128|7:Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=20,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|1|7"" [The Layout of the input]; : BatchLayout: ""1|128|7"" [The Layout of the batch]; : Layout: ""DENSE|64|TANH,DENSE|64|TA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:11103,Learn,LearningRate,11103,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Learn'],['LearningRate']
Usability,"25 +1.000 +0.884; : m_wwbb: +0.415 +0.547 +0.085 +0.557 +0.447 +0.884 +1.000; : ----------------------------------------------------------------; DataSetFactory : [dataset] : ; : ; Factory : Booking method: ␛[1mDNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:WeightInitialization=XAVIER:InputLayout=1|1|7:BatchLayout=1|128|7:Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=30,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:WeightInitialization=XAVIER:InputLayout=1|1|7:BatchLayout=1|128|7:Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=30,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|1|7"" [The Layout of the input]; : BatchLayout: ""1|128|7"" [The Layout of the batch]; : Layout: ""DENSE|64|TANH,DENSE|64|TA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:11090,Learn,LearningRate,11090,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"267 }; 268 if (xmlform) {; 269 if (fCode.Length()) {; 270 out += ""\n<![CDATA[ { "" + fCode + "" ]]>\n "";; 271 } else if (fReadFuncPtr) {; 272 // Can we guess?; 273 // out += ""code=\"" + nameof(fReadFuncPtr) + ""\"" "";; 274 } else if (fReadRawFuncPtr) {; 275 // Can we guess?; 276 // out += ""code=\"" + nameof(fReadRawFuncPtr) + ""\"" "";; 277 }; 278 } else {; 279 if (fCode.Length()) {; 280 out += ""code=\""{"" + fCode + ""}\"" "";; 281 } else if (fReadFuncPtr) {; 282 // Can we guess?; 283 // out += ""code=\"" + nameof(fReadFuncPtr) + ""\"" "";; 284 } else if (fReadRawFuncPtr) {; 285 // Can we guess?; 286 // out += ""code=\"" + nameof(fReadRawFuncPtr) + ""\"" "";; 287 }; 288 }; 289 if (xmlform) {; 290 out += end;; 291 }; 292}; 293 ; 294////////////////////////////////////////////////////////////////////////////////; 295/// Zero out this rule object.; 296 ; 297void TSchemaRule::Clear( const char * /* option */); 298{; 299 fVersion.Clear();; 300 fChecksum.Clear();; 301 fSourceClass.Clear();; 302 fTarget.Clear();; 303 fSource.Clear();; 304 fInclude.Clear();; 305 fCode.Clear();; 306 fAttributes.Clear();; 307 fReadRawFuncPtr = nullptr;; 308 fReadFuncPtr = nullptr;; 309 fRuleType = kNone;; 310 delete fVersionVect; fVersionVect = nullptr;; 311 delete fChecksumVect; fChecksumVect = nullptr;; 312 delete fTargetVect; fTargetVect = nullptr;; 313 delete fSourceVect; fSourceVect = nullptr;; 314 delete fIncludeVect; fIncludeVect = nullptr;; 315}; 316 ; 317////////////////////////////////////////////////////////////////////////////////; 318/// Set the content fot this object from the rule; 319/// See TClass::AddRule for details on the syntax.; 320 ; 321Bool_t TSchemaRule::SetFromRule( const char *rule ); 322{; 323 //-----------------------------------------------------------------------; 324 // Parse the rule and check it's validity; 325 /////////////////////////////////////////////////////////////////////////////; 326 ; 327 ROOT::Internal::MembersMap_t rule_values;; 328 ; 329 std::string error_string;; 330 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:9514,Clear,Clear,9514,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['Clear'],['Clear']
Usability,"28 xx[0] = xaxis->GetXmin();; 11529 view->WCtoNDC(xx,u);; 11530 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11531 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11532 gVirtualX->DrawPolyLine(5,rect1);; 11533 if (nbins>1) {; 11534 xx[0] = xaxis->GetXmin();; 11535 xx[1] = yaxis->GetXmax();; 11536 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11537 view->WCtoNDC(xx,u);; 11538 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11539 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11540 rect2[4].SetX(rect2[0].GetX());; 11541 rect2[4].SetY(rect2[0].GetY());; 11542 xx[0] = xaxis->GetXmax();; 11543 view->WCtoNDC(xx,u);; 11544 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11545 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11546 xx[1] = yaxis->GetXmin();; 11547 view->WCtoNDC(xx,u);; 11548 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11549 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11550 xx[0] = xaxis->GetXmin();; 11551 view->WCtoNDC(xx,u);; 11552 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11553 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11554 gVirtualX->DrawPolyLine(5,rect2);; 11555 }; 11556 c->Clear();; 11557 c->cd();; 11558 TH2 *hp = (TH2*)h3->Project3D(""yx"");; 11559 zaxis->SetRange(first,last);; 11560 if (hp) {; 11561 hp->SetFillColor(38);; 11562 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYX of binz=%d [z=%.1f..%.f]"", binz,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz)));; 11563 else hp->SetTitle(TString::Format(""ProjectionYX, binz=[%d,%d] [z=%.1f..%.1f]"", binz,binz2,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz2)));; 11564 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11565 hp->SetYTitle(fH->GetYaxis()->GetTitle());; 11566 hp->SetZTitle(""Number of Entries"");; 11567 hp->Draw(fShowOption.Data());; 11568 }; 11569 }; 11570 break;; 11571 ; 11572 case 6:; 11573 // ""xz""; 11574 {; 11575 Int_t first = yaxis->GetFirst();; 11576 Int_t last = yaxis->GetLast();; 11577 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11578 I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:419913,ux,uxmin,419913,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,29 of file TGSpeedo.h. ◆ fLabel1. TString TGSpeedo::fLabel1. protected . main label (first line) ; Definition at line 34 of file TGSpeedo.h. ◆ fLabel2. TString TGSpeedo::fLabel2. protected . main label (second line) ; Definition at line 35 of file TGSpeedo.h. ◆ fMeanMark. Bool_t TGSpeedo::fMeanMark. protected . kTRUE if mean mark is active ; Definition at line 47 of file TGSpeedo.h. ◆ fMeanVal. Float_t TGSpeedo::fMeanVal. protected . mean value mark ; Definition at line 40 of file TGSpeedo.h. ◆ fPeakMark. Bool_t TGSpeedo::fPeakMark. protected . kTRUE if peak mark is active ; Definition at line 46 of file TGSpeedo.h. ◆ fPeakVal. Float_t TGSpeedo::fPeakVal. protected . maximum peak mark ; Definition at line 39 of file TGSpeedo.h. ◆ fPicName. TString TGSpeedo::fPicName. protected . name of picture used as background ; Definition at line 33 of file TGSpeedo.h. ◆ fScaleMax. Float_t TGSpeedo::fScaleMax. protected . needle min and max scale ; Definition at line 42 of file TGSpeedo.h. ◆ fScaleMin. Float_t TGSpeedo::fScaleMin. protected . Definition at line 42 of file TGSpeedo.h. ◆ fTextFS. FontStruct_t TGSpeedo::fTextFS. protected . Definition at line 31 of file TGSpeedo.h. ◆ fThreshold. Float_t TGSpeedo::fThreshold[3]. protected . glowing thresholds ; Definition at line 43 of file TGSpeedo.h. ◆ fThresholdActive. Bool_t TGSpeedo::fThresholdActive. protected . kTRUE if glowing thresholds are active ; Definition at line 45 of file TGSpeedo.h. ◆ fThresholdColor. EGlowColor TGSpeedo::fThresholdColor[3]. protected . glowing threshold colors ; Definition at line 44 of file TGSpeedo.h. ◆ fValue. Float_t TGSpeedo::fValue. protected . needle angle and corresponding value ; Definition at line 38 of file TGSpeedo.h. Libraries for TGSpeedo:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGSpeedo.h; gui/gui/src/TGSpeedo.cxx. TGSpeedo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSpeedo.html:42934,Guid,Guide,42934,doc/master/classTGSpeedo.html,https://root.cern,https://root.cern/doc/master/classTGSpeedo.html,1,['Guid'],['Guide']
Usability,"29 of file TGTextView.cxx. ◆ AddLineFast(). void TGTextView::AddLineFast ; (; const char * ; string). virtual . Add a line of text to the view widget. ; Fast version. Use it if you are going to add several lines, than call Update(). ; Definition at line 251 of file TGTextView.cxx. ◆ AddText(). void TGTextView::AddText ; (; TGText * ; text). virtual . Add text to the view widget. ; Definition at line 208 of file TGTextView.cxx. ◆ AdjustWidth(). void TGTextView::AdjustWidth ; (; ). virtual . Adjust widget width to longest line. ; Definition at line 1312 of file TGTextView.cxx. ◆ Class(). static TClass * TGTextView::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTextView::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTextView::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 141 of file TGTextView.h. ◆ Clear(). void TGTextView::Clear ; (; Option_t * ; = """"). overridevirtual . Clear text view widget. ; Reimplemented from TObject.; Definition at line 430 of file TGTextView.cxx. ◆ Clicked(). virtual void TGTextView::Clicked ; (; const char * ; word). inlinevirtual . Definition at line 138 of file TGTextView.h. ◆ Copy() [1/2]. Bool_t TGTextView::Copy ; (; ). virtual . Copy selected text to clipboard. ; Reimplemented in TGTextEdit.; Definition at line 486 of file TGTextView.cxx. ◆ Copy() [2/2]. void TGTextView::Copy ; (; TObject & ; object); const. inlineoverrideprotectedvirtual . Copy this to obj. ; Reimplemented from TObject.; Definition at line 54 of file TGTextView.h. ◆ DataChanged(). virtual void TGTextView::DataChanged ; (; ). inlinevirtual . Definition at line 135 of file TGTextView.h. ◆ DataDropped(). virtual void TGTextView::DataDropped ; (; const char * ; fname). inlinevirtual . Definition at line 136 of file TGTextView.h. ◆ DeclFileName(). static const char * TGTextView::DeclFileName ; (; ). inlinestatic . Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextView.html:43119,Clear,Clear,43119,doc/master/classTGTextView.html,https://root.cern,https://root.cern/doc/master/classTGTextView.html,1,['Clear'],['Clear']
Usability,"2; TGraphDelaunay::fXNDouble_t * fXN! fGraph2D vectors normalized of size fNpointsDefinition TGraphDelaunay.h:45; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; bool; double; int; Interpolate#define Interpolate(a, x, b, y)Definition geom.c:179; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; f1TF1 * f1Definition legend1.C:11; c2return c2Definition legend2.C:14; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::IsInsideBool_t IsInside(T xp, T yp, Int_t np, T *x, T *y)Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in array...Definition TMath.h:1233; TMath::ATan2Double_t ATan2(Double_t y, Double_t x)Returns the principal value of the arc tangent of y/x, expressed in radians.Definition TMath.h:646; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TMath::TwoPiconstexpr Double_t TwoPi()Definition TMath.h:44; v@ vDefinition rootcling_impl.cxx:3699; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; t1auto * t1Definition textangle.C:20. histhistsrcTGraphDelaunay.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphDelaunay_8cxx_source.html:41576,Guid,Guide,41576,doc/master/TGraphDelaunay_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphDelaunay_8cxx_source.html,1,['Guid'],['Guide']
Usability,"2=0.21, const char *title="""", Option_t *option="""") overrideBuild a legend from the graphical objects in the pad.Definition TPad.cxx:555; TPad::Pickvirtual TPad * Pick(Int_t px, Int_t py, TObjLink *&pickobj)Search for an object at pixel position px,py.Definition TPad.cxx:4657; TPad::Updatevoid Update() overrideUpdate pad.Definition TPad.cxx:2935; TPad::SetNumbervirtual void SetNumber(Int_t number)Definition TPad.h:342; TPad::fNumberInt_t fNumberpad number identifierDefinition TPad.h:88; TPad::PaintFillAreaNDCvoid PaintFillAreaNDC(Int_t n, Double_t *x, Double_t *y, Option_t *option="""") overridePaint fill area in CurrentPad NDC coordinates.Definition TPad.cxx:4065; TPad::PixeltoXDouble_t PixeltoX(Int_t px) overrideConvert pixel to X coordinate.Definition TPad.cxx:7388; TPad::SetPhivoid SetPhi(Double_t phi=30) overrideDefinition TPad.h:360; TPad::fAbsPixeltoXkDouble_t fAbsPixeltoXkConversion coefficient for absolute pixel to X World.Definition TPad.h:55; TPad::Clearvoid Clear(Option_t *option="""") overrideDelete all pad primitives.Definition TPad.cxx:722; TPad::YtoPixelInt_t YtoPixel(Double_t y) const overrideConvert Y coordinate to pixel.Definition TPad.cxx:7510; TPad::GetTickxInt_t GetTickx() const overrideDefinition TPad.h:238; TPad::PaintLinevoid PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overridePaint line in CurrentPad World coordinates.Definition TPad.cxx:4313; TPad::GetGLDeviceInt_t GetGLDevice() overrideGet GL device.Definition TPad.cxx:7238; TPad::fAspectRatioDouble_t fAspectRatioratio of w/h in case of fixed ratioDefinition TPad.h:82; TPad::RecordPavevirtual void RecordPave(const TObject *obj)Emit RecordPave() signal.Definition TPad.cxx:7246; TPad::PaintBorderPSvoid PaintBorderPS(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) overridePaint a frame border with Postscript.Definition TPad.cxx:3740; TPad::fUymaxDouble_t fUymaxMaximum value on the Y axis.Definition TPad.h:77; TPad::SetLogyvoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:44856,Clear,Clearvoid,44856,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"2>> . ROOT::Math::Expr< ExprType, T, D, D2, R1 >::Expr ; (; const ExprType & ; rhs). inline . Definition at line 143 of file Expression.h. ◆ ~Expr(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . ROOT::Math::Expr< ExprType, T, D, D2, R1 >::~Expr ; (; ). inline . Definition at line 147 of file Expression.h. Member Function Documentation. ◆ apply(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . T ROOT::Math::Expr< ExprType, T, D, D2, R1 >::apply ; (; unsigned int ; i); const. inline . Definition at line 150 of file Expression.h. ◆ IsInUse(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . bool ROOT::Math::Expr< ExprType, T, D, D2, R1 >::IsInUse ; (; const T * ; p); const. inline . function to determine if any use operand is being used (has same memory address) ; Definition at line 161 of file Expression.h. ◆ operator()(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . T ROOT::Math::Expr< ExprType, T, D, D2, R1 >::operator() ; (; unsigned int ; i, . unsigned ; j . ); const. inline . Definition at line 153 of file Expression.h. ◆ print(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . std::ostream & ROOT::Math::Expr< ExprType, T, D, D2, R1 >::print ; (; std::ostream & ; os); const. inline . used by operator<<() simplify to use apply(i,j) ; Definition at line 184 of file Expression.h. Member Data Documentation. ◆ rhs_. template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . ExprType ROOT::Math::Expr< ExprType, T, D, D2, R1 >::rhs_. private . Definition at line 203 of file Expression.h. math/smatrix/inc/Math/Expression.h. ROOTMathExpr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Expr.html:3232,simpl,simplify,3232,doc/master/classROOT_1_1Math_1_1Expr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Expr.html,2,"['Guid', 'simpl']","['Guide', 'simplify']"
Usability,"2F(""hp"",""Parabolic"", 180, -180, 180, 181, -90.5, 90.5);; TH2F *hw = new TH2F(""hw"",""Mollweide"", 180, -180, 180, 181, -90.5, 90.5);; ; TString dat = gROOT->GetTutorialDir();; dat.Append(""/graphics/earth.dat"");; dat.ReplaceAll(""/./"",""/"");; ; ifstream in;; in.open(dat.Data());; Float_t x,y;; while (1) {; in >> x >> y;; if (!in.good()) break;; ha->Fill(x,y, 1);; hm->Fill(x,y, 1);; hs->Fill(x,y, 1);; hp->Fill(x,y, 1);; hw->Fill(x,y, 1);; }; in.close();; ; c1->cd(1); ha->Draw(""aitoff"");; c1->cd(2); hm->Draw(""mercator"");; c1->cd(3); hs->Draw(""sinusoidal"");; c1->cd(4); hp->Draw(""parabolic"");; c1->cd(5); hw->Draw(""mollweide"");; ; return c1;; }; Float_tfloat Float_tDefinition RtypesCore.h:57; gROOT#define gROOTDefinition TROOT.h:406; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TStyle::SetOptTitlevoid SetOptTitle(Int_t tit=1)Definition TStyle.h:334; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; AuthorOlivier Couet (from an original macro sent by Ernst-Jan Buis) ; Definition in file earth.C. tutorialsgraphicsearth.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/earth_8C.html:2861,Guid,Guide,2861,doc/master/earth_8C.html,https://root.cern,https://root.cern/doc/master/earth_8C.html,1,['Guid'],['Guide']
Usability,"2Poly) ;  th2polyEurope.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it ;  th2polyHoneycomb.CThis tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly), fill it and draw it using GL ;  th2polyUSA.CThis tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using GL ;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  httpaccess.CThis program demonstrates access control to the THttpServer with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ;  rose_image.C Display image in a new canvas and pad ;  trans_graph.C Demonstrates how to access and manipulate ARGB pixel values of an image +.. ;  ► io;  copyFiles.C Example of script showing how to copy all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:124951,simpl,simple,124951,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['simpl'],['simple']
Usability,"2Poly, TProfile3D, TScatter, TSpline, TSpline3, TSpline5, TVirtualFitter, TSpectrum, TSpectrum2, TSpectrum2Fit, TSpectrum3, TSpectrumFit, TSpectrumTransform, TSpectrum2Painter, TUnfoldBinning, TUnfoldBinningXML, TStreamerInfo, TSQLFile, TXMLFile, TRandom, TRandom1, TRandom2, TRandom3, TRandomGen< Engine >, TNeuron, TParticleClassPDG, TParticlePDG, TRootSniffer, TNetFile, TNetSystem, TNetFileStager, TParallelMergingFile, TPServerSocket, TPSocket, TS3WebFile, TServerSocket, TSocket, TSQLColumnInfo, TSQLMonitoringWriter, TSQLTableInfo, TSSLSocket, TUDPSocket, TWebFile, TWebSystem, TNetXNGFile, TNetXNGSystem, TPackMgr, TProof, TProofChain, TProofCondor, TProofLite, TProofLog, TProofLogElem, TProofMgr, TProofDesc, TProofMgrLite, TProofOutputFile, TProofQueryResult, TProofSuperMaster, TProofPerfAnalysis, TProofVectorContainer< T >, TProofVectorContainer< TProofDrawListOfGraphs::Point3D_t >, TProofVectorContainer< TProofDrawListOfPolyMarkers3D::Point4D_t >, TProofMonSender, TProofMonSenderSQL, TStatus, RooWorkspace::WSDir, RooStats::ToyMCStudy, RooStats::ToyMCPayload, RooStats::UpperLimitMCSModule, ROOT::Experimental::XRooFit::xRooBrowser, ROOT::Experimental::XRooFit::xRooNode, TVirtualBranchBrowsable, TNonSplitBrowsable, TNtuple, TNtupleD, TQueryResult, TTree, TTreeSQL, TVirtualIndex, TTreeFormula, TTreeIndex, TParallelCoord, TParallelCoordRange, and TParallelCoordVar. ◆ StreamerNVirtual(). void TNamed::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TNamed.h. Member Data Documentation. ◆ fName. TString TNamed::fName. protected . Definition at line 32 of file TNamed.h. ◆ fTitle. TString TNamed::fTitle. protected . Definition at line 33 of file TNamed.h. Libraries for TNamed:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TNamed.h; core/base/src/TNamed.cxx. TNamed. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNamed.html:28784,Guid,Guide,28784,doc/master/classTNamed.html,https://root.cern,https://root.cern/doc/master/classTNamed.html,1,['Guid'],['Guide']
Usability,"2Poly.h. ◆ GetOverflowContent(). Double_t TProfile2Poly::GetOverflowContent ; (; Int_t ; idx). inline . Definition at line 99 of file TProfile2Poly.h. ◆ GetOverflowRegionFromCoordinates(). Int_t TProfile2Poly::GetOverflowRegionFromCoordinates ; (; Double_t ; x, . Double_t ; y . ). protected . The overflow regions are calculated by considering x, y coordinates. ; The Middle bin at -5 contains all the TProfile2Poly bins.; -0 -1 -2; ________; -1: |__|__|__|; -4: |__|__|__|; -7: |__|__|__|. Definition at line 493 of file TProfile2Poly.cxx. ◆ GetStats(). void TProfile2Poly::GetStats ; (; Double_t * ; stats); const. overridevirtual . Fill the array stats from the contents of this profile. ; The array stats must be correctly dimensioned in the calling program. stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2. If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range is specified, the function recomputes these quantities from the bin contents in the current axis range. ; Reimplemented from TH2Poly.; Definition at line 433 of file TProfile2Poly.cxx. ◆ IsA(). TClass * TProfile2Poly::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH2Poly.; Definition at line 115 of file TProfile2Poly.h. ◆ Merge() [1/2]. Long64_t TProfile2Poly::Merge ; (; const std::vector< TProfile2Poly * > & ; list). Merge. ; Definition at line 246 of file TProfile2Poly.cxx. ◆ Merge() [2/2]. Long64_t TProfile2Poly::Merge ; (; TCollection * ; in). overridevirtual . Merge. ; Reimplemented from TH2Poly.; Definition at line 230 of file TProfile2Poly.cxx. ◆ OverflowIdxToArrayIdx(). Int_t TProfile2Poly::OverflowIdxToArrayIdx ; (; Int_t ; val). inlineprotected . Definition at line 112 of file TProfile2Poly.h. ◆ PrintOverflowRegions(). void TProfile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2Poly.html:69597,simpl,simply,69597,doc/master/classTProfile2Poly.html,https://root.cern,https://root.cern/doc/master/classTProfile2Poly.html,1,['simpl'],['simply']
Usability,"2VirtualXProxy.cxx:168; TGraphErrors.h; TLegend.h; TMath.h; TRandom.h; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::GetFunctionTF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TGraph.cxx:1416; TGraph::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)Fit this graph with function with name fname.Definition TGraph.cxx:1254; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; leglegDefinition legend1.C:34; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; AuthorAnna Kreshuk ; Definition in file fitLinear.C. tutorialsfitfitLinear.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitLinear_8C.html:6039,Guid,Guide,6039,doc/master/fitLinear_8C.html,https://root.cern,https://root.cern/doc/master/fitLinear_8C.html,1,['Guid'],['Guide']
Usability,2]. RooStats::ToyMCPayload::ToyMCPayload ; (; ). inline . Definition at line 73 of file ToyMCStudy.h. ◆ ToyMCPayload() [2/2]. RooStats::ToyMCPayload::ToyMCPayload ; (; RooDataSet * ; sd). inline . Definition at line 78 of file ToyMCStudy.h. Member Function Documentation. ◆ Class(). static TClass * RooStats::ToyMCPayload::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::ToyMCPayload::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::ToyMCPayload::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 89 of file ToyMCStudy.h. ◆ DeclFileName(). static const char * RooStats::ToyMCPayload::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 89 of file ToyMCStudy.h. ◆ GetSamplingDistributions(). RooDataSet * RooStats::ToyMCPayload::GetSamplingDistributions ; (; ). inline . Definition at line 80 of file ToyMCStudy.h. ◆ IsA(). TClass * RooStats::ToyMCPayload::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 89 of file ToyMCStudy.h. ◆ Streamer(). void RooStats::ToyMCPayload::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void RooStats::ToyMCPayload::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file ToyMCStudy.h. Member Data Documentation. ◆ fDataSet. RooDataSet* RooStats::ToyMCPayload::fDataSet. private . Definition at line 86 of file ToyMCStudy.h. Libraries for RooStats::ToyMCPayload:. [legend]; The documentation for this class was generated from the following file:; roofit/roostats/inc/RooStats/ToyMCStudy.h. RooStatsToyMCPayload. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:57 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ToyMCPayload.html:13211,Guid,Guide,13211,doc/master/classRooStats_1_1ToyMCPayload.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ToyMCPayload.html,1,['Guid'],['Guide']
Usability,"2f,%4.2f)"",x,y));; }; }; ; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; kBlue@ kBlueDefinition Rtypes.h:66; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; gPad#define gPadDefinition TVirtualPad.h:308; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TGraph.h:126; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; drawtextvoid drawtext(double x, double y, int f, const char *s)Definition fonts.C:1; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; exDouble_t ex[n]Definition legend1.C:17; lTLine lDefinition textangle.C:4; AuthorOlivier Couet ; Definition in file graphtext.C. tutorialsgraphsgraphtext.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphtext_8C.html:3093,Guid,Guide,3093,doc/master/graphtext_8C.html,https://root.cern,https://root.cern/doc/master/graphtext_8C.html,1,['Guid'],['Guide']
Usability,"3 +/- 0.0124078 ; ; #include <TCanvas.h>; #include <TCutG.h>; #include <TH2F.h>; #include <TProfile.h>; #include <TRandom.h>; ; void fit2d(); {; // generate a 2-d histogram using a TCutG; const int n = 6;; float x[n] = {0.092,0.83,0.94,0.81,0.12,0.1};; float y[n] = {0.71,9.4,9,8,0.3,0.71};; TCutG *cut = new TCutG(""cut"",n,x,y);; TH2F *h2 = new TH2F(""h2"",""h2"",40,0,1,40,0,10);; float u,v;; for (int i=0;i<100000;i++) {; u = gRandom->Rndm();; v = 10*gRandom->Rndm();; if (cut->IsInside(u,v)) h2->Fill(u,v);; }; TCanvas *c1 = new TCanvas(""c1"",""show profile"",600,900);; c1->Divide(1,2);; c1->cd(1);; h2->Draw();; c1->cd(2);; ; //use a TProfile to convert the 2-d to 1-d problem; TProfile *prof = h2->ProfileX();; prof->Fit(""pol1"");; }; ; TCanvas.h; TCutG.h; TH2F.h; TProfile.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TCanvasThe Canvas class.Definition TCanvas.h:23; TCutGGraphical cut class.Definition TCutG.h:20; TGraph::IsInsidevirtual Int_t IsInside(Double_t x, Double_t y) constReturn 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise.Definition TGraph.cxx:1841; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TProfileProfile Histogram.Definition TProfile.h:32; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; v@ vDefinition rootcling_impl.cxx:3699; AuthorRene Brun ; Definition in file fit2d.C. tutorialsfitfit2d.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fit2d_8C.html:2325,Guid,Guide,2325,doc/master/fit2d_8C.html,https://root.cern,https://root.cern/doc/master/fit2d_8C.html,1,['Guid'],['Guide']
Usability,"3 ; 254 std::vector<std::pair<const char *, const char *>> &GetDelayedAddClassAlternate(); 255 {; 256 static std::vector<std::pair<const char *, const char *>> delayedAddClassAlternate;; 257 return delayedAddClassAlternate;; 258 }; 259}; 260 ; 261////////////////////////////////////////////////////////////////////////////////; 262/// TClassTable is a singleton (i.e. only one can exist per application).; 263 ; 264TClassTable::TClassTable(); 265{; 266 if (gClassTable) return;; 267 ; 268 fgSize = 1009; //this is the result of (int)TMath::NextPrime(1000);; 269 fgTable = new TClassRec* [fgSize];; 270 fgAlternate = new TClassAlt* [fgSize];; 271 fgIdMap = new IdMap_t;; 272 memset(fgTable, 0, fgSize * sizeof(TClassRec*));; 273 memset(fgAlternate, 0, fgSize * sizeof(TClassAlt*));; 274 gClassTable = this;; 275 ; 276 for (auto &&r : GetDelayedAddClass()) {; 277 AddClass(r->fName, r->fId, *r->fInfo, r->fDict, r->fBits);; 278 };; 279 GetDelayedAddClass().clear();; 280 ; 281 for (auto &&r : GetDelayedAddClassAlternate()) {; 282 AddAlternate(r.first, r.second);; 283 }; 284 GetDelayedAddClassAlternate().clear();; 285}; 286 ; 287////////////////////////////////////////////////////////////////////////////////; 288/// TClassTable singleton is deleted in Terminate().; 289 ; 290TClassTable::~TClassTable(); 291{; 292 // Try to avoid spurious warning from memory leak checkers.; 293 if (gClassTable != this) return;; 294 ; 295 for (UInt_t i = 0; i < fgSize; i++) {; 296 delete fgTable[i]; // Will delete all the elements in the chain.; 297 }; 298 delete [] fgTable; fgTable = nullptr;; 299 delete [] fgSortedTable; fgSortedTable = nullptr;; 300 delete fgIdMap; fgIdMap = nullptr;; 301}; 302 ; 303////////////////////////////////////////////////////////////////////////////////; 304/// Return true fs the table exist.; 305/// If the table does not exist but the delayed list does, then; 306/// create the table and return true.; 307 ; 308inline Bool_t TClassTable::CheckClassTableInit(); 309{; 310 // Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:8256,clear,clear,8256,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,2,['clear'],['clear']
Usability,"3 of file RooFormulaVar.h. ◆ translate(). void RooFormulaVar::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 316 of file RooFormulaVar.cxx. ◆ writeToStream(). void RooFormulaVar::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to given stream. ; Reimplemented from RooAbsReal.; Definition at line 223 of file RooFormulaVar.cxx. Member Data Documentation. ◆ _actualVars. RooListProxy RooFormulaVar::_actualVars. private . Actual parameters used by formula engine. ; Definition at line 88 of file RooFormulaVar.h. ◆ _formExpr. TString RooFormulaVar::_formExpr. private . Formula expression string. ; Definition at line 91 of file RooFormulaVar.h. ◆ _formula. RooFormula* RooFormulaVar::_formula = nullptr. mutableprivate . ! Formula engine ; Definition at line 89 of file RooFormulaVar.h. ◆ _nset. RooArgSet* RooFormulaVar::_nset {nullptr}. mutableprivate . ! Normalization set to be passed along to contents ; Definition at line 90 of file RooFormulaVar.h. Libraries for RooFormulaVar:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooFormulaVar.h; roofit/roofitcore/src/RooFormulaVar.cxx. RooFormulaVar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormulaVar.html:71890,Guid,Guide,71890,doc/master/classRooFormulaVar.html,https://root.cern,https://root.cern/doc/master/classRooFormulaVar.html,1,['Guid'],['Guide']
Usability,"3 return obj;; 2794}; 2795 ; 2796////////////////////////////////////////////////////////////////////////////////; 2797/// Perform the automatic addition of the histogram to the given directory; 2798///; 2799/// Note this function is called in place when the semantic requires; 2800/// this object to be added to a directory (I.e. when being read from; 2801/// a TKey or being Cloned); 2802 ; 2803void TH1::DirectoryAutoAdd(TDirectory *dir); 2804{; 2805 Bool_t addStatus = TH1::AddDirectoryStatus();; 2806 if (addStatus) {; 2807 SetDirectory(dir);; 2808 if (dir) {; 2809 ResetBit(kCanDelete);; 2810 }; 2811 }; 2812}; 2813 ; 2814////////////////////////////////////////////////////////////////////////////////; 2815/// Compute distance from point px,py to a line.; 2816///; 2817/// Compute the closest distance of approach from point px,py to elements; 2818/// of a histogram.; 2819/// The distance is computed in pixels units.; 2820///; 2821/// #### Algorithm:; 2822/// Currently, this simple model computes the distance from the mouse; 2823/// to the histogram contour only.; 2824 ; 2825Int_t TH1::DistancetoPrimitive(Int_t px, Int_t py); 2826{; 2827 if (!fPainter) return 9999;; 2828 return fPainter->DistancetoPrimitive(px,py);; 2829}; 2830 ; 2831////////////////////////////////////////////////////////////////////////////////; 2832/// Performs the operation: `this = this/(c1*f1)`; 2833/// if errors are defined (see TH1::Sumw2), errors are also recalculated.; 2834///; 2835/// Only bins inside the function range are recomputed.; 2836/// IMPORTANT NOTE: If you intend to use the errors of this histogram later; 2837/// you should call Sumw2 before making this operation.; 2838/// This is particularly important if you fit the histogram after TH1::Divide; 2839///; 2840/// The function return kFALSE if the divide operation failed; 2841 ; 2842Bool_t TH1::Divide(TF1 *f1, Double_t c1); 2843{; 2844 if (!f1) {; 2845 Error(""Divide"",""Attempt to divide by a non-existing function"");; 2846 return kFALS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:112111,simpl,simple,112111,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['simpl'],['simple']
Usability,"3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetLabelSizevoid SetLabelSize(Float_t size=0.04, Option_t *axis=""X"")Set size of axis labels.Definition TStyle.cxx:1444; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; xDouble_t x[n]Definition legend1.C:17; TMath::GausDouble_t Gaus(Double_t x, Double_t mean=0, Double_t sigma=1, Bool_t norm=kFALSE)Calculates a gaussian function with mean and sigma.Definition TMath.cxx:471; TMath::LandauDouble_t Landau(Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE)The LANDAU function.Definition TMath.cxx:492; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; lTLine lDefinition textangle.C:4; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; AuthorsH.Pernegger, Markus Friedl ; Definition in file langaus.C. tutorialsfitlangaus.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/langaus_8C.html:11302,Guid,Guide,11302,doc/master/langaus_8C.html,https://root.cern,https://root.cern/doc/master/langaus_8C.html,1,['Guid'],['Guide']
Usability,3 {; 634 binVolume *= ( xup[j] - xlow[j] );; 635 }; 636 ; 637 // store the minimum bin volume found as reference for future normalizations; 638 if ( fNPoints == 1 ); 639 fRefVolume = binVolume;; 640 else if ( binVolume < fRefVolume ); 641 fRefVolume = binVolume;; 642 }; 643 ; 644 ; 645 void BinData::InitDataVector (); 646 {; 647 fData.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 648 fDataPtr = fData.empty() ? nullptr : &fData.front();; 649 }; 650 ; 651 void BinData::InitializeErrors(); 652 {; 653 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 654 kAsymError == fErrorType || kNoError == fErrorType );; 655 ; 656 if ( fpTmpCoordErrorVector ); 657 {; 658 delete[] fpTmpCoordErrorVector;; 659 fpTmpCoordErrorVector = nullptr;; 660 }; 661 ; 662 if ( kNoError == fErrorType ); 663 {; 664 fCoordErrors.clear();; 665 fCoordErrorsPtr.clear();; 666 ; 667 fDataErrorHigh.clear();; 668 fDataErrorHighPtr = nullptr;; 669 ; 670 fDataErrorLow.clear();; 671 fDataErrorLowPtr = nullptr;; 672 ; 673 fDataError.clear();; 674 fDataErrorPtr = nullptr;; 675 ; 676 return;; 677 }; 678 ; 679 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 680 {; 681 fCoordErrorsPtr.resize( fDim );; 682 fCoordErrors.resize( fDim );; 683 for( unsigned int i=0; i < fDim; i++ ); 684 {; 685 fCoordErrors[i].resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 686 ; 687 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 688 }; 689 ; 690 fpTmpCoordErrorVector = new double[fDim];; 691 }; 692 else; 693 {; 694 fCoordErrors.clear();; 695 fCoordErrorsPtr.clear();; 696 }; 697 ; 698 if ( kValueError == fErrorType || kCoordError == fErrorType ); 699 {; 700 fDataError.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 701 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 702 ; 703 fDataErrorHigh.clear();; 704 fDataErrorHighPtr = nullptr;; 705 fDataErrorLow.clear();; 706 fDataErrorLowPtr = nullptr;; 707 }; 708 else if ( fErr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:20564,clear,clear,20564,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"3 };; 2444 ; 2445 template <typename To>; 2446 struct ConvertBasicType<BitsMarker, To, Generic> {; 2447 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config); 2448 {; 2449 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2450 ; 2451 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2452 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2453 Int_t nvalues = proxy->Size();; 2454 ; 2455 UInt_t *items_storage = new UInt_t[nvalues];; 2456 UInt_t *items = items_storage;; 2457 ; 2458 const Int_t offset = config->fOffset;; 2459 Next_t next = loopconfig->fNext;; 2460 ; 2461 char iterator[TVirtualCollectionProxy::fgIteratorArenaSize];; 2462 void *iter = loopconfig->fCopyIterator(&iterator,start);; 2463 void *addr;; 2464 while( (addr = next(iter,end)) ) {; 2465 buf >> (*items);; 2466 if (((*items) & kIsReferenced) != 0) {; 2467 HandleReferencedTObject(buf, addr, config);; 2468 }; 2469 To *x = (To*)( ((char*)addr) + offset );; 2470 *x = (To)(*items);; 2471 ++items;; 2472 }; 2473 if (iter != &iterator[0]) {; 2474 loopconfig->fDeleteIterator(iter);; 2475 }; 2476 ; 2477 delete [] items_storage;; 2478 return 0;; 2479 }; 2480 };; 2481 ; 2482 template <typename From, typename To, template <typename F, typename T> class Converter >; 2483 struct ConvertBasicType<WithFactorMarker<From>,To,Converter > {; 2484 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config); 2485 {; 2486 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2487 ; 2488 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2489 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2490 Int_t nvalues = proxy->Size();; 2491 ; 2492 TConfSTLWithFactor *conf = (TConfSTLWithFactor *)config;; 2493 ; 2494 From *items = new From[nvalues];; 2495 buf.ReadFastArrayWithFactor(items, n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:100364,Simpl,Simple,100364,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; TH1F *he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he4->Fill(gRandom->Gaus(0,1));; he4->SetFillColor(kRed);; he4->GetXaxis()->SetRange(40,48);; ce4->cd(1);; he4->Draw(""E4"");; ce4->cd(2);; TH1F *he3 = (TH1F*)he4->DrawClone(""E3"");; he3->SetTitle(""Distribution drawn option E3"");; return ce4;; }; 2D histograms can be drawn with error bars as shown is the following example:. Picture; Source. {; TCanvas *c2e = new TCanvas(""c2e"",""c2e"",600,400);; TH2F *h2e = new TH2F(""h2e"",""TH2 drawn with option E"",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2e->Fill(px,5*py);; }; h2e->Draw(""E"");; return c2e;; }; The bar chart option; The option ""B"" allows to draw simple vertical bar charts.; The bar width is controlled with TH1::SetBarWidth(),; and the bar offset wihtin the bin, with TH1::SetBarOffset().; These two settings are useful to draw several histograms on the; same plot as shown in the following example:. Picture; Source. {; int i;; const Int_t nx = 8;; char *os_X[nx] = {""8"",""32"",""128"",""512"",""2048"",""8192"",""32768"",""131072""};; float d_35_0[nx] = {0.75, -3.30, -0.92, 0.10, 0.08, -1.69, -1.29, -2.37};; float d_35_1[nx] = {1.01, -3.02, -0.65, 0.37, 0.34, -1.42, -1.02, -2.10};. TCanvas *cb = new TCanvas(""cb"",""cb"",600,400);; cb->SetGrid();. gStyle->SetHistMinimumZero();. TH1F *h1b = new TH1F(""h1b"",""Option B example"",nx,0,nx);; h1b->SetFillColor(4);; h1b->SetBarWidth(0.4);; h1b->SetBarOffset(0.1);; h1b->SetStats(0);; h1b->SetMinimum(-5);; h1b->SetMaximum(5);. for (i=1; i<=nx; i++) {; h1b->Fill(os_X[i-1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:21662,simpl,simple,21662,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,2,['simpl'],['simple']
Usability,"3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; TH1F *he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he4->Fill(gRandom->Gaus(0,1));; he4->SetFillColor(kRed);; he4->GetXaxis()->SetRange(40,48);; ce4->cd(1);; he4->Draw(""E4"");; ce4->cd(2);; TH1F *he3 = (TH1F*)he4->DrawClone(""E3"");; he3->SetTitle(""Distribution drawn option E3"");; return ce4;; }; 2D histograms can be drawn with error bars as shown is the following example:. Picture; Source. {; TCanvas *c2e = new TCanvas(""c2e"",""c2e"",600,400);; TH2F *h2e = new TH2F(""h2e"",""TH2 drawn with option E"",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2e->Fill(px,5*py);; }; h2e->Draw(""E"");; return c2e;; }; The bar chart option; The option ""B"" allows to draw simple vertical bar charts.; The bar width is controlled with TH1::SetBarWidth(),; and the bar offset wihtin the bin, with TH1::SetBarOffset().; These two settings are useful to draw several histograms on the; same plot as shown in the following example:. Picture; Source. {; int i;; const Int_t nx = 8;; string os_X[nx] = {""8"",""32"",""128"",""512"",""2048"",""8192"",""32768"",""131072""};; float d_35_0[nx] = {0.75, -3.30, -0.92, 0.10, 0.08, -1.69, -1.29, -2.37};; float d_35_1[nx] = {1.01, -3.02, -0.65, 0.37, 0.34, -1.42, -1.02, -2.10};. TCanvas *cb = new TCanvas(""cb"",""cb"",600,400);; cb->SetGrid();. gStyle->SetHistMinimumZero();. TH1F *h1b = new TH1F(""h1b"",""Option B example"",nx,0,nx);; h1b->SetFillColor(4);; h1b->SetBarWidth(0.4);; h1b->SetBarOffset(0.1);; h1b->SetStats(0);; h1b->SetMinimum(-5);; h1b->SetMaximum(5);. for (i=1; i<=nx; i++) {; h1b->SetBinConten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THistPainter.html:21838,simpl,simple,21838,root/html604/THistPainter.html,https://root.cern,https://root.cern/root/html604/THistPainter.html,1,['simpl'],['simple']
