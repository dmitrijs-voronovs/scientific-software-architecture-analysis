quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,ts; 204/411 Test #183: isapt2 ........................... Passed 123.56 sec; Start 207: gibbs; 205/411 Test #103: dcft-grad1 ....................... Passed 1178.23 sec; Start 208: matrix1; 206/411 Test #208: matrix1 .......................... Passed 0.63 sec; Start 209: mcscf1; 207/411 Test #209: mcscf1 ........................... Passed 1.56 sec; Start 210: mcscf2; 208/411 Test #210: mcscf2 ........................... Passed 1.68 sec; Start 211: mcscf3; 209/411 Test #211: mcscf3 ........................... Passed 0.79 sec; Start 212: mints1; 210/411 Test #212: mints1 ........................... Passed 0.71 sec; Start 213: mints2; 211/411 Test #213: mints2 ........................... Passed 2.69 sec; Start 214: mints3; 212/411 Test #214: mints3 ........................... Passed 1.19 sec; Start 215: mints4; 213/411 Test #215: mints4 ........................... Passed 0.68 sec; Start 216: mints5; 214/411 Test #200: fnocc2 ........................... Passed 52.96 sec; Start 217: mints6; 215/411 Test #216: mints5 ........................... Passed 1.11 sec; Start 218: mints8; 216/411 Test #217: mints6 ........................... Passed 11.95 sec; Start 219: mints-benchmark; 217/411 Test #207: gibbs ............................ Passed 26.16 sec; Start 220: mints-helper; 218/411 Test #206: ghosts ........................... Passed 33.06 sec; Start 221: mints9; 219/411 Test #220: mints-helper ..................... Passed 1.84 sec; Start 222: mints10; 220/411 Test #218: mints8 ........................... Passed 16.42 sec; Start 223: molden1; 221/411 Test #221: mints9 ........................... Passed 2.04 sec; Start 224: molden2; 222/411 Test #222: mints10 .......................... Passed 2.32 sec; Start 225: mom; 223/411 Test #225: mom .............................. Passed 3.45 sec; Start 226: mp2-1; 224/411 Test #223: molden1 .......................... Passed 4.95 sec; Start 227: mp2-def2; 225/411 Test #224: molden2 .......................... Passed 4.83 sec; Start 228,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:19852,Test,Test,19852,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,tting .................. Passed 75.23 sec; Start 126: dfccsd-t-grad1; 116/411 Test #389: python-pubchem ................... Passed 59.41 sec; Start 148: dfomp3-grad1; 117/411 Test #250: omp2-5 ........................... Passed 68.60 sec; Start 54: cc38; 118/411 Test #82: cc9a ............................. Passed 46.42 sec; Start 125: dfccsd-grad1; 119/411 Test #32: cc17 ............................. Passed 33.17 sec; Start 276: opt11; 120/411 Test #113: dcft7 ............................ Passed 384.47 sec; Start 162: dft-grad-meta; 121/411 Test #84: cdomp2-2 ......................... Passed 50.72 sec; Start 237: nbody-he-cluster; 122/411 Test #297: pubchem1 ......................... Passed 59.76 sec; Start 170: dft1-alt; 123/411 Test #100: ci-property ...................... Passed 58.63 sec; Start 72: cc54; 124/411 Test #148: dfomp3-grad1 ..................... Passed 39.18 sec; Start 22: cc11; 125/411 Test #12: cbs-parser ....................... Passed 66.53 sec; Start 51: cc35; 126/411 Test #126: dfccsd-t-grad1 ................... Passed 49.75 sec; Start 62: cc45; 127/411 Test #21: cc10 ............................. Passed 61.98 sec; Start 348: sapt-compare; 128/411 Test #54: cc38 ............................. Passed 49.31 sec; Start 245: ocepa3; 129/411 Test #80: cc8c ............................. Passed 66.72 sec; Start 49: cc33; 130/411 Test #125: dfccsd-grad1 ..................... Passed 58.61 sec; Start 299: pywrap-alias; 131/411 Test #72: cc54 ............................. Passed 35.14 sec; Start 37: cc22; 132/411 Test #62: cc45 ............................. Passed 27.12 sec; Start 23: cc12; 133/411 Test #276: opt11 ............................ Passed 62.61 sec; Start 150: dfomp2p5-1; 134/411 Test #162: dft-grad-meta .................... Passed 49.92 sec; Start 92: ci-multi; 135/411 Test #51: cc35 ............................. Passed 44.56 sec; Start 273: opt7; 136/411 Test #170: dft1-alt ......................... Passed 53.15 sec; Start 152: dfomp2p5-grad1; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:11905,Test,Test,11905,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,tting; 210/411 Test #204: frac-ip-fitting .................. Passed 53.22 sec; Start 206: ghosts; 211/411 Test #206: ghosts ........................... Passed 26.73 sec; Start 207: gibbs; 212/411 Test #207: gibbs ............................ Passed 10.83 sec; Start 208: matrix1; 213/411 Test #208: matrix1 .......................... Passed 0.68 sec; Start 209: mcscf1; 214/411 Test #209: mcscf1 ........................... Passed 0.86 sec; Start 210: mcscf2; 215/411 Test #210: mcscf2 ........................... Passed 1.47 sec; Start 211: mcscf3; 216/411 Test #211: mcscf3 ........................... Passed 0.80 sec; Start 212: mints1; 217/411 Test #212: mints1 ........................... Passed 0.59 sec; Start 213: mints2; 218/411 Test #213: mints2 ........................... Passed 2.46 sec; Start 214: mints3; 219/411 Test #214: mints3 ........................... Passed 1.16 sec; Start 215: mints4; 220/411 Test #215: mints4 ........................... Passed 0.65 sec; Start 216: mints5; 221/411 Test #216: mints5 ........................... Passed 0.68 sec; Start 217: mints6; 222/411 Test #217: mints6 ........................... Passed 9.90 sec; Start 218: mints8; 223/411 Test #218: mints8 ........................... Passed 12.53 sec; Start 219: mints-benchmark; 224/411 Test #219: mints-benchmark .................. Passed 33.55 sec; Start 220: mints-helper; 225/411 Test #220: mints-helper ..................... Passed 1.48 sec; Start 221: mints9; 226/411 Test #221: mints9 ........................... Passed 1.78 sec; Start 222: mints10; 227/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 223: molden1; 228/411 Test #223: molden1 .......................... Passed 1.79 sec; Start 224: molden2; 229/411 Test #224: molden2 .......................... Passed 1.44 sec; Start 225: mom; 230/411 Test #225: mom .............................. Passed 2.09 sec; Start 226: mp2-1; 231/411 Test #226: mp2-1 ............................ Passed 2.16 sec; Start 227: mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:20095,Test,Test,20095,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.16 sec; Start 216: mints4; 391/412 Test #240: numpy-array-interface ............ Passed 0.92 sec; Start 209: matrix1; 392/412 Test #379: mints12 .......................... Passed 1.36 sec; Start 410: skeletonscf; 393/412 Test #310: pywrap-molecule .................. Passed 1.27 sec; Start 176: docs-dft; 394/412 Test #335: scf3 ............................. Passed 1.28 sec; Start 365: options1; 395/412 Test #383: psi4numpy-rhf .................... Passed 1.16 sec; Start 403: json-schema-1-throws; 396/412 Test #212: mcscf3 ........................... Passed 1.28 sec; Start 88: cepa1; 397/412 Test #217: mints5 ........................... Passed 1.25 sec; 398/412 Test #175: docs-bases ....................... Passed 0.78 sec; 399/412 Test #210: mcscf1 ........................... Passed 1.26 sec; 400/412 Test #397: python-memdfjk ................... Passed 1.51 sec; 401/412 Test #213: mints1 ........................... Passed 0.96 sec; 402/412 Test #209: matrix1 .......................... Passed 0.64 sec; 403/412 Test #216: mints4 ........................... Passed 0.73 sec; 404/412 Test #403: json-schema-1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:36882,Test,Test,36882,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,tu3-h2o-opt ...................... Passed 10.36 sec; Start 357: tu4-h2o-freq; 351/411 Test #356: scf-response1 .................... Passed 4.52 sec; Start 358: tu5-sapt; 352/411 Test #348: sapt-compare ..................... Passed 51.91 sec; Start 359: tu6-cp-ne2; 353/411 Test #357: tu4-h2o-freq ..................... Passed 21.08 sec; Start 360: x2c1; 354/411 Test #358: tu5-sapt ......................... Passed 23.18 sec; Start 361: x2c2; 355/411 Test #361: x2c2 ............................. Passed 2.81 sec; Start 362: x2c3; 356/411 Test #362: x2c3 ............................. Passed 3.13 sec; Start 363: zaptn-nh2; 357/411 Test #363: zaptn-nh2 ........................ Passed 6.27 sec; Start 364: options1; 358/411 Test #364: options1 ......................... Passed 0.62 sec; Start 365: cubeprop-esp; 359/411 Test #365: cubeprop-esp ..................... Passed 10.11 sec; Start 366: dft-smoke; 360/411 Test #366: dft-smoke ........................ Passed 16.22 sec; Start 367: scf-hess1; 361/411 Test #367: scf-hess1 ........................ Passed 12.20 sec; Start 368: scf-freq1; 362/411 Test #347: sapt-dft2 ........................ Passed 122.60 sec; Start 369: dft-jk; 363/411 Test #368: scf-freq1 ........................ Passed 14.57 sec; Start 370: scf-coverage; 364/411 Test #369: dft-jk ........................... Passed 12.68 sec; Start 371: dft-custom-dhdf; 365/411 Test #360: x2c1 ............................. Passed 72.91 sec; Start 372: dft-custom-hybrid; 366/411 Test #370: scf-coverage ..................... Passed 8.99 sec; Start 373: dft-custom-mgga; 367/411 Test #372: dft-custom-hybrid ................ Passed 13.00 sec; Start 374: dft-custom-gga; 368/411 Test #374: dft-custom-gga ................... Passed 30.24 sec; Start 375: pywrap-bfs; 369/411 Test #375: pywrap-bfs ....................... Passed 24.13 sec; Start 376: pywrap-align; 370/411 Test #376: pywrap-align ..................... Passed 3.39 sec; Start 377: pywrap-align-chiral; 371/411 Test #377: pyw,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:33551,Test,Test,33551,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,tu3-h2o-opt ...................... Passed 17.01 sec; Start 192: fcidump; 298/412 Test #95: cisd-h2o+-1 ...................... Passed 18.65 sec; Start 86: cepa0-grad1; 299/412 Test #285: props1 ........................... Passed 17.14 sec; Start 254: omp2p5-1; 300/412 Test #272: opt5 ............................. Passed 15.94 sec; Start 258: omp3-1; 301/412 Test #226: mom .............................. Passed 16.17 sec; Start 364: zaptn-nh2; 302/412 Test #371: scf-coverage ..................... Passed 17.88 sec; Start 96: cisd-h2o+-2; 303/412 Test #187: fci-h2o-2 ........................ Passed 20.39 sec; Start 122: dfccdl1; 304/412 Test #86: cepa0-grad1 ...................... Passed 15.78 sec; Start 270: opt3; 305/412 Test #192: fcidump .......................... Passed 17.80 sec; Start 100: cisd-sp-2; 306/412 Test #254: omp2p5-1 ......................... Passed 17.69 sec; Start 142: dfomp2-3; 307/412 Test #258: omp3-1 ........................... Passed 15.85 sec; Start 224: molden1; 308/412 Test #364: zaptn-nh2 ........................ Passed 16.44 sec; Start 225: molden2; 309/412 Test #122: dfccdl1 .......................... Passed 16.03 sec; Start 386: psi4numpy-fci; 310/412 Test #96: cisd-h2o+-2 ...................... Passed 18.81 sec; Start 328: scf-guess-read1; 311/412 Test #270: opt3 ............................. Passed 17.42 sec; Start 263: omp3-grad1; 312/412 Test #100: cisd-sp-2 ........................ Passed 18.93 sec; Start 214: mints2; 313/412 Test #142: dfomp2-3 ......................... Passed 15.59 sec; Start 97: cisd-h2o-clpse; 314/412 Test #224: molden1 .......................... Passed 16.53 sec; Start 233: mp2p5-grad2; 315/412 Test #225: molden2 .......................... Passed 15.70 sec; Start 398: json-v11-energy; 316/412 Test #328: scf-guess-read1 .................. Passed 16.21 sec; Start 247: omp2-1; 317/412 Test #386: psi4numpy-fci .................... Passed 17.08 sec; Start 6: ao-casscf-sp; 318/412 Test #263: omp3-grad1 ................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:28689,Test,Test,28689,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,tu3-h2o-opt ...................... Passed 2.13 sec; Start 356: scf-response1; 357/411 Test #356: scf-response1 .................... Passed 2.20 sec; Start 357: tu4-h2o-freq; 358/411 Test #357: tu4-h2o-freq ..................... Passed 7.10 sec; Start 358: tu5-sapt; 359/411 Test #358: tu5-sapt ......................... Passed 18.53 sec; Start 359: tu6-cp-ne2; 360/411 Test #359: tu6-cp-ne2 ....................... Passed 26.31 sec; Start 360: x2c1; 361/411 Test #360: x2c1 ............................. Passed 5.86 sec; Start 361: x2c2; 362/411 Test #361: x2c2 ............................. Passed 1.73 sec; Start 362: x2c3; 363/411 Test #362: x2c3 ............................. Passed 1.67 sec; Start 363: zaptn-nh2; 364/411 Test #363: zaptn-nh2 ........................ Passed 2.99 sec; Start 364: options1; 365/411 Test #364: options1 ......................... Passed 0.67 sec; Start 365: cubeprop-esp; 366/411 Test #365: cubeprop-esp ..................... Passed 8.94 sec; Start 366: dft-smoke; 367/411 Test #366: dft-smoke ........................ Passed 11.42 sec; Start 367: scf-hess1; 368/411 Test #367: scf-hess1 ........................ Passed 6.01 sec; Start 368: scf-freq1; 369/411 Test #368: scf-freq1 ........................ Passed 7.94 sec; Start 369: dft-jk; 370/411 Test #369: dft-jk ........................... Passed 9.26 sec; Start 370: scf-coverage; 371/411 Test #370: scf-coverage ..................... Passed 2.64 sec; Start 371: dft-custom-dhdf; 372/411 Test #371: dft-custom-dhdf .................. Passed 70.66 sec; Start 372: dft-custom-hybrid; 373/411 Test #372: dft-custom-hybrid ................ Passed 9.61 sec; Start 373: dft-custom-mgga; 374/411 Test #373: dft-custom-mgga .................. Passed 152.10 sec; Start 374: dft-custom-gga; 375/411 Test #374: dft-custom-gga ................... Passed 25.40 sec; Start 375: pywrap-bfs; 376/411 Test #375: pywrap-bfs ....................... Passed 24.76 sec; Start 376: pywrap-align; 377/411 Test #376: pywrap-align ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:33786,Test,Test,33786,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,tu3-h2o-opt ...................... Passed 2.38 sec; Start 356: scf-response1; 357/411 Test #356: scf-response1 .................... Passed 2.12 sec; Start 357: tu4-h2o-freq; 358/411 Test #357: tu4-h2o-freq ..................... Passed 5.68 sec; Start 358: tu5-sapt; 359/411 Test #358: tu5-sapt ......................... Passed 18.96 sec; Start 359: tu6-cp-ne2; 360/411 Test #359: tu6-cp-ne2 ....................... Passed 21.60 sec; Start 360: x2c1; 361/411 Test #360: x2c1 ............................. Passed 5.53 sec; Start 361: x2c2; 362/411 Test #361: x2c2 ............................. Passed 1.63 sec; Start 362: x2c3; 363/411 Test #362: x2c3 ............................. Passed 1.69 sec; Start 363: zaptn-nh2; 364/411 Test #363: zaptn-nh2 ........................ Passed 2.10 sec; Start 364: options1; 365/411 Test #364: options1 ......................... Passed 0.66 sec; Start 365: cubeprop-esp; 366/411 Test #365: cubeprop-esp ..................... Passed 7.93 sec; Start 366: dft-smoke; 367/411 Test #366: dft-smoke ........................ Passed 12.12 sec; Start 367: scf-hess1; 368/411 Test #367: scf-hess1 ........................ Passed 5.76 sec; Start 368: scf-freq1; 369/411 Test #368: scf-freq1 ........................ Passed 6.73 sec; Start 369: dft-jk; 370/411 Test #369: dft-jk ........................... Passed 8.47 sec; Start 370: scf-coverage; 371/411 Test #370: scf-coverage ..................... Passed 2.89 sec; Start 371: dft-custom-dhdf; 372/411 Test #371: dft-custom-dhdf .................. Passed 75.42 sec; Start 372: dft-custom-hybrid; 373/411 Test #372: dft-custom-hybrid ................ Passed 8.58 sec; Start 373: dft-custom-mgga; 374/411 Test #373: dft-custom-mgga .................. Passed 157.12 sec; Start 374: dft-custom-gga; 375/411 Test #374: dft-custom-gga ................... Passed 23.71 sec; Start 375: pywrap-bfs; 376/411 Test #375: pywrap-bfs ....................... Passed 21.31 sec; Start 376: pywrap-align; 377/411 Test #376: pywrap-align ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:33757,Test,Test,33757,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,tu3-h2o-opt ...................... Passed 3.24 sec; Start 357: tu4-h2o-freq; 343/411 Test #337: scf6 ............................. Passed 39.47 sec; Start 358: tu5-sapt; 344/411 Test #356: scf-response1 .................... Passed 2.66 sec; Start 359: tu6-cp-ne2; 345/411 Test #350: dft-custom ....................... Passed 13.31 sec; Start 360: x2c1; 346/411 Test #346: sapt-dft1 ........................ Passed 23.57 sec; Start 361: x2c2; 347/411 Test #342: soscf-dft ........................ Passed 32.76 sec; Start 362: x2c3; 348/411 Test #361: x2c2 ............................. Passed 3.88 sec; Start 363: zaptn-nh2; 349/411 Test #362: x2c3 ............................. Passed 2.58 sec; Start 364: options1; 350/411 Test #364: options1 ......................... Passed 0.57 sec; Start 365: cubeprop-esp; 351/411 Test #363: zaptn-nh2 ........................ Passed 4.29 sec; Start 366: dft-smoke; 352/411 Test #357: tu4-h2o-freq ..................... Passed 19.40 sec; Start 367: scf-hess1; 353/411 Test #365: cubeprop-esp ..................... Passed 9.89 sec; Start 368: scf-freq1; 354/411 Test #358: tu5-sapt ......................... Passed 22.14 sec; Start 369: dft-jk; 355/411 Test #348: sapt-compare ..................... Passed 45.09 sec; Start 370: scf-coverage; 356/411 Test #367: scf-hess1 ........................ Passed 12.39 sec; Start 371: dft-custom-dhdf; 357/411 Test #366: dft-smoke ........................ Passed 17.18 sec; Start 372: dft-custom-hybrid; 358/411 Test #369: dft-jk ........................... Passed 12.09 sec; Start 373: dft-custom-mgga; 359/411 Test #368: scf-freq1 ........................ Passed 15.41 sec; Start 374: dft-custom-gga; 360/411 Test #370: scf-coverage ..................... Passed 7.06 sec; Start 375: pywrap-bfs; 361/411 Test #372: dft-custom-hybrid ................ Passed 11.49 sec; Start 376: pywrap-align; 362/411 Test #360: x2c1 ............................. Passed 44.48 sec; Start 377: pywrap-align-chiral; 363/411 Test #376: pywrap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:32959,Test,Test,32959,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,tu4-h2o-freq ..................... Passed 38.41 sec; Start 198: freq-isotope1; 242/412 Test #369: scf-freq1 ........................ Passed 38.75 sec; Start 91: cepa1; 243/412 Test #370: dft-jk ........................... Passed 42.37 sec; Start 99: cisd-sp; 244/412 Test #102: cubeprop ......................... Passed 42.67 sec; Start 342: soscf-ref; 245/412 Test #91: cepa1 ............................ Passed 38.08 sec; Start 336: scf4; 246/412 Test #269: opt2-fd .......................... Passed 43.27 sec; Start 242: ocepa-grad1; 247/412 Test #198: freq-isotope1 .................... Passed 42.81 sec; Start 271: opt4; 248/412 Test #378: pywrap-align-chiral .............. Passed 78.39 sec; Start 9: castup2; 249/412 Test #394: python-3-index-transforms ........ Passed 45.94 sec; Start 366: cubeprop-esp; 250/412 Test #342: soscf-ref ........................ Passed 32.05 sec; Start 368: scf-hess1; 251/412 Test #99: cisd-sp .......................... Passed 36.86 sec; Start 133: dfmp2-4; 252/412 Test #242: ocepa-grad1 ...................... Passed 27.84 sec; Start 123: dfccd-grad1; 253/412 Test #336: scf4 ............................. Passed 31.98 sec; Start 120: dfcasscf-sp; 254/412 Test #9: castup2 .......................... Passed 30.20 sec; Start 15: cbs-xtpl-freq; 255/412 Test #271: opt4 ............................. Passed 34.21 sec; Start 230: mp2-grad2; 256/412 Test #366: cubeprop-esp ..................... Passed 34.97 sec; Start 10: castup3; 257/412 Test #123: dfccd-grad1 ...................... Passed 27.12 sec; Start 199: freq-isotope2; 258/412 Test #133: dfmp2-4 .......................... Passed 28.66 sec; Start 227: mp2-1; 259/412 Test #120: dfcasscf-sp ...................... Passed 24.10 sec; Start 94: cisd-h2o+-0; 260/412 Test #368: scf-hess1 ........................ Passed 33.66 sec; Start 296: psithon1; 261/412 Test #230: mp2-grad2 ........................ Passed 22.64 sec; Start 181: fsapt-terms; 262/412 Test #15: cbs-xtpl-freq .................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:23467,Test,Test,23467,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,tu5-sapt ......................... Passed 23.06 sec; Start 267: opt2; 165/411 Test #172: dft3 ............................. Passed 26.14 sec; Start 290: psimrcc-ccsd_t-4; 166/411 Test #151: dfomp2p5-2 ....................... Passed 71.41 sec; Start 176: extern1; 167/411 Test #322: sapt-dft-lrc ..................... Passed 20.32 sec; Start 177: extern2; 168/411 Test #81: cc9 .............................. Passed 69.76 sec; Start 247: omp2-2; 169/411 Test #313: rasscf-sp ........................ Passed 73.93 sec; Start 80: cc8c; 170/411 Test #71: cc53 ............................. Passed 60.75 sec; Start 48: cc32; 171/411 Test #315: sapt1 ............................ Passed 19.99 sec; Start 165: dft-grad2; 172/411 Test #277: opt12 ............................ Passed 26.40 sec; Start 169: dft-vv10; 173/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 19.99 sec; Start 194: fd-freq-gradient; 174/411 Test #79: cc8b ............................. Passed 60.66 sec; Start 321: sapt-dft-api; 175/411 Test #267: opt2 ............................. Passed 25.68 sec; Start 303: pywrap-checkrun-convcrit; 176/411 Test #272: opt6 ............................. Passed 28.86 sec; Start 254: omp2p5-2; 177/411 Test #176: extern1 .......................... Passed 21.76 sec; Start 238: nbody-intermediates; 178/411 Test #282: opt-irc-3 ........................ Passed 33.40 sec; Start 296: psithon2; 179/411 Test #78: cc8a ............................. Passed 64.33 sec; Start 54: cc38; 180/411 Test #165: dft-grad2 ........................ Passed 16.70 sec; Start 142: dfomp2-4; 181/411 Test #140: dfomp2-2 ......................... Passed 56.04 sec; Start 51: cc35; 182/411 Test #177: extern2 .......................... Passed 30.48 sec; Start 218: mints8; 183/411 Test #48: cc32 ............................. Passed 25.58 sec; Start 324: sapt8; 184/411 Test #321: sapt-dft-api ..................... Passed 17.62 sec; Start 146: dfomp3-1; 185/411 Test #169: dft-vv10 ......................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:16466,Test,Test,16466,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,tu5-sapt; 84/401 Test #20: cc1 .............................. Passed 39.63 sec; Start 132: dfmp2-ecp; 85/401 Test #26: cc13b ............................ Passed 45.75 sec; Start 197: fnocc3; 86/401 Test #52: cc36 ............................. Passed 12.26 sec; Start 121: dfccd-grad1; 87/401 Test #100: cubeprop ......................... Passed 8.71 sec; Start 76: cc8; 88/401 Test #298: pywrap-cbs1 ...................... Passed 92.27 sec; Start 172: extern1; 89/401 Test #353: tu5-sapt ......................... Passed 9.35 sec; Start 196: fnocc2; 90/401 Test #91: ci-multi ......................... Passed 17.40 sec; Start 195: fnocc1; 91/401 Test #197: fnocc3 ........................... Passed 9.24 sec; Start 311: sapt1; 92/401 Test #132: dfmp2-ecp ........................ Passed 10.33 sec; Start 148: dfomp3-grad2; 93/401 Test #121: dfccd-grad1 ...................... Passed 6.11 sec; Start 32: cc17; 94/401 Test #83: cdomp2-2 ......................... Passed 16.79 sec; Start 352: tu4-h2o-freq; 95/401 Test #195: fnocc1 ........................... Passed 8.09 sec; Start 390: python-3-index-transforms; 96/401 Test #311: sapt1 ............................ Passed 9.43 sec; Start 106: dcft1; 97/401 Test #238: ocepa-grad2 ...................... Passed 49.33 sec; Start 14: cbs-xtpl-energy; 98/401 Test #172: extern1 .......................... Passed 15.83 sec; Start 362: scf-hess1; 99/401 Test #390: python-3-index-transforms ........ Passed 6.02 sec; Start 126: dfccsdt1; 100/401 Test #352: tu4-h2o-freq ..................... Passed 12.54 sec; Start 33: cc18; 101/401 Test #126: dfccsdt1 ......................... Passed 3.87 sec; Start 7: casscf-sp; 102/401 Test #76: cc8 .............................. Passed 23.26 sec; Start 176: fsapt-terms; 103/401 Test #14: cbs-xtpl-energy .................. Passed 7.95 sec; Start 286: psimrcc-ccsd_t-4; 104/401 Test #362: scf-hess1 ........................ Passed 7.64 sec; Start 120: dfccdl1; 105/401 Test #32: cc17 ............................. Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:8840,Test,Test,8840,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,tup3 .......................... Passed 3.78 sec; Start 11: cbs-delta-energy; 25/411 Test #11: cbs-delta-energy ................. Passed 23.24 sec; Start 12: cbs-parser; 26/411 Test #12: cbs-parser ....................... Passed 12.37 sec; Start 13: cbs-xtpl-alpha; 27/411 Test #13: cbs-xtpl-alpha ................... Passed 59.71 sec; Start 14: cbs-xtpl-energy; 28/411 Test #14: cbs-xtpl-energy .................. Passed 8.36 sec; Start 15: cbs-xtpl-freq; 29/411 Test #15: cbs-xtpl-freq .................... Passed 5.43 sec; Start 16: cbs-xtpl-gradient; 30/411 Test #16: cbs-xtpl-gradient ................ Passed 12.13 sec; Start 17: cbs-xtpl-opt; 31/411 Test #17: cbs-xtpl-opt ..................... Passed 32.38 sec; Start 19: cbs-xtpl-wrapper; 32/411 Test #19: cbs-xtpl-wrapper ................. Passed 37.42 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 6.42 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 3.59 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 3.22 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 3.59 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 18.49 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 7.05 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 9.49 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 15.84 sec; Start 29: cc14; 41/411 Test #29: cc14 ............................. Passed 22.66 sec; Start 30: cc15; 42/411 Test #30: cc15 ............................. Passed 5.86 sec; Start 31: cc16; 43/411 Test #31: cc16 ............................. Passed 13.43 sec; Start 32: cc17; 44/411 Test #32: cc17 ............................. Passed 6.00 sec; Start 33: cc18; 45/411 Test #33: cc18 ............................. Passed 7.69 sec; Start 34: cc19; 46/411 Test #34: cc19 ............................. Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:3257,Test,Test,3257,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,tup3 .......................... Passed 4.07 sec; Start 11: cbs-delta-energy; 25/411 Test #11: cbs-delta-energy ................. Passed 28.35 sec; Start 12: cbs-parser; 26/411 Test #12: cbs-parser ....................... Passed 10.90 sec; Start 13: cbs-xtpl-alpha; 27/411 Test #13: cbs-xtpl-alpha ................... Passed 73.68 sec; Start 14: cbs-xtpl-energy; 28/411 Test #14: cbs-xtpl-energy .................. Passed 8.11 sec; Start 15: cbs-xtpl-freq; 29/411 Test #15: cbs-xtpl-freq .................... Passed 6.02 sec; Start 16: cbs-xtpl-gradient; 30/411 Test #16: cbs-xtpl-gradient ................ Passed 11.17 sec; Start 17: cbs-xtpl-opt; 31/411 Test #17: cbs-xtpl-opt ..................... Passed 33.93 sec; Start 19: cbs-xtpl-wrapper; 32/411 Test #19: cbs-xtpl-wrapper ................. Passed 39.62 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 8.61 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 4.22 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 4.24 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 4.36 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 21.72 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 8.83 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 11.97 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 18.77 sec; Start 29: cc14; 41/411 Test #29: cc14 ............................. Passed 29.63 sec; Start 30: cc15; 42/411 Test #30: cc15 ............................. Passed 8.11 sec; Start 31: cc16; 43/411 Test #31: cc16 ............................. Passed 19.24 sec; Start 32: cc17; 44/411 Test #32: cc17 ............................. Passed 6.65 sec; Start 33: cc18; 45/411 Test #33: cc18 ............................. Passed 7.33 sec; Start 34: cc19; 46/411 Test #34: cc19 ............................. Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:3277,Test,Test,3277,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,tup3 .......................... Passed 4.98 sec; Start 83: cdomp2-1; 265/411 Test #7: casscf-sp ........................ Passed 9.17 sec; Start 4: casscf-semi; 266/411 Test #197: freq-isotope1 .................... Passed 8.69 sec; Start 139: dfomp2-1; 267/411 Test #192: fd-freq-energy ................... Passed 7.20 sec; Start 117: dfcasscf-sa-sp; 268/411 Test #83: cdomp2-1 ......................... Passed 5.26 sec; Start 185: fci-h2o; 269/411 Test #329: scf-guess-read2 .................. Passed 5.94 sec; Start 86: cepa0-grad2; 270/411 Test #4: casscf-semi ...................... Passed 4.06 sec; Start 186: fci-h2o-2; 271/411 Test #139: dfomp2-1 ......................... Passed 4.23 sec; Start 184: fci-dipole; 272/411 Test #9: castup2 .......................... Passed 7.67 sec; Start 93: cisd-h2o+-0; 273/411 Test #117: dfcasscf-sa-sp ................... Passed 4.15 sec; Start 251: omp2-grad1; 274/411 Test #251: omp2-grad1 ....................... Passed 1.29 sec; Start 339: scf-property; 275/411 Test #86: cepa0-grad2 ...................... Passed 1.91 sec; Start 141: dfomp2-3; 276/411 Test #141: dfomp2-3 ......................... Passed 1.85 sec; Start 370: scf-coverage; 277/411 Test #93: cisd-h2o+-0 ...................... Passed 3.91 sec; Start 99: cisd-sp-2; 278/411 Test #185: fci-h2o .......................... Passed 6.04 sec; Start 171: dft2; 279/411 Test #339: scf-property ..................... Passed 4.12 sec; Start 331: scf1; 280/411 Test #186: fci-h2o-2 ........................ Passed 5.93 sec; Start 179: fsapt2; 281/411 Test #184: fci-dipole ....................... Passed 5.96 sec; Start 108: dcft2; 282/411 Test #370: scf-coverage ..................... Passed 2.67 sec; Start 94: cisd-h2o+-1; 283/411 Test #108: dcft2 ............................ Passed 1.25 sec; Start 246: omp2-1; 284/411 Test #99: cisd-sp-2 ........................ Passed 4.22 sec; Start 95: cisd-h2o+-2; 285/411 Test #246: omp2-1 ........................... Passed 1.31 sec; Start 243: ocepa1;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:25534,Test,Test,25534,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,"turb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:3521,test,tests,3521,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['test'],['tests']
Testability,ty ..................... Passed 2.61 sec; Start 343: stability1; 312/411 Test #93: cisd-h2o+-0 ...................... Passed 4.03 sec; Start 351: dft-reference; 313/411 Test #380: psi4numpy-cphf ................... Passed 1.40 sec; Start 225: mom; 314/411 Test #283: opt-freeze-coords ................ Passed 3.69 sec; Start 231: mp2p5-grad1; 315/411 Test #95: cisd-h2o+-2 ...................... Passed 4.18 sec; Start 294: psimrcc-sp1; 316/411 Test #251: omp2-grad1 ....................... Passed 5.09 sec; Start 118: dfcasscf-fzc-sp; 317/411 Test #228: mp2-grad1 ........................ Passed 3.74 sec; Start 243: ocepa1; 318/411 Test #231: mp2p5-grad1 ...................... Passed 2.43 sec; Start 257: omp3-1; 319/411 Test #343: stability1 ....................... Passed 3.80 sec; Start 399: json-schema-1-energy; 320/411 Test #225: mom .............................. Passed 3.48 sec; Start 362: x2c3; 321/411 Test #351: dft-reference .................... Passed 3.74 sec; Start 284: props1; 322/411 Test #294: psimrcc-sp1 ...................... Passed 4.56 sec; Start 295: psithon1; 323/411 Test #362: x2c3 ............................. Passed 3.16 sec; Start 388: python-curve; 324/411 Test #118: dfcasscf-fzc-sp .................. Passed 4.55 sec; Start 327: scf-guess-read1; 325/411 Test #399: json-schema-1-energy ............. Passed 3.99 sec; Start 121: dfccdl1; 326/411 Test #257: omp3-1 ........................... Passed 4.41 sec; Start 377: pywrap-align-chiral; 327/411 Test #284: props1 ........................... Passed 5.03 sec; Start 4: casscf-semi; 328/411 Test #243: ocepa1 ........................... Passed 6.83 sec; Start 246: omp2-1; 329/411 Test #327: scf-guess-read1 .................. Passed 2.70 sec; Start 363: zaptn-nh2; 330/411 Test #377: pywrap-align-chiral .............. Passed 3.07 sec; Start 314: sad1; 331/411 Test #388: python-curve ..................... Passed 4.00 sec; Start 253: omp2p5-1; 332/411 Test #121: dfccdl1 .......................... Passed 4.11 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:30017,Test,Test,30017,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,ty ..................... Passed 4.57 sec; Start 375: mints12; 309/401 Test #206: mcscf2 ........................... Passed 2.91 sec; Start 381: psi4numpy-rhf-hessian; 310/401 Test #261: opt1 ............................. Passed 7.13 sec; Start 395: json-v11_gradient; 311/401 Test #156: dft-grac ......................... Passed 3.35 sec; Start 209: mints2; 312/401 Test #287: psimrcc-fd-freq1 ................. Passed 19.71 sec; Start 218: mints10; 313/401 Test #397: json-schema_0_ghost .............. Passed 1.66 sec; Start 119: dfccd1; 314/401 Test #153: dfrasscf-sp ...................... Passed 13.21 sec; Start 394: json-v11_energy; 315/401 Test #116: dfcasscf-sa-sp ................... Passed 5.80 sec; Start 210: mints3; 316/401 Test #375: mints12 .......................... Passed 1.26 sec; Start 329: scf2; 317/401 Test #388: python-mints2 .................... Passed 2.93 sec; Start 184: fci-tdm; 318/401 Test #4: casscf-semi ...................... Passed 10.57 sec; Start 92: cisd-h2o+-0; 319/401 Test #253: omp3-1 ........................... Passed 6.72 sec; Start 247: omp2-grad1; 320/401 Test #216: mints-helper ..................... Passed 2.11 sec; Start 133: dfmp2-grad1; 321/401 Test #5: casscf-sa-sp ..................... Passed 16.54 sec; Start 387: python-mints9; 322/401 Test #220: molden2 .......................... Passed 11.87 sec; Start 341: dfep2-2; 323/401 Test #395: json-v11_gradient ................ Passed 1.97 sec; Start 118: dfcasscf-sp; 324/401 Test #239: ocepa1 ........................... Passed 13.48 sec; Start 396: json-schema_0_energy; 325/401 Test #210: mints3 ........................... Passed 1.41 sec; Start 357: x2c3; 326/401 Test #340: dfep2-1 .......................... Passed 4.62 sec; Start 122: dfccsd1; 327/401 Test #339: stability1 ....................... Passed 5.55 sec; Start 392: python-mints13; 328/401 Test #219: molden1 .......................... Passed 8.53 sec; Start 304: pywrap-db3; 329/401 Test #227: mp2p5-grad1 ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:30204,Test,Test,30204,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,ty ..................... Passed 4.60 sec; Start 3: casscf-fzc-sp; 240/411 Test #99: cisd-sp-2 ........................ Passed 4.60 sec; Start 198: freq-isotope2; 241/411 Test #21: cc10 ............................. Passed 32.92 sec; Start 84: cdomp2-2; 242/411 Test #187: fci-h2o-fzcv ..................... Passed 3.84 sec; Start 392: python-cc54; 243/411 Test #254: omp2p5-2 ......................... Passed 12.79 sec; Start 78: cc8a; 244/411 Test #198: freq-isotope2 .................... Passed 10.53 sec; Start 125: dfccsd-grad1; 245/411 Test #9: castup2 .......................... Passed 12.44 sec; Start 329: scf-guess-read2; 246/411 Test #329: scf-guess-read2 .................. Passed 6.98 sec; Start 94: cisd-h2o+-1; 247/411 Test #3: casscf-fzc-sp .................... Passed 18.71 sec; Start 142: dfomp2-4; 248/411 Test #79: cc8b ............................. Passed 28.79 sec; Start 126: dfccsd-t-grad1; 249/411 Test #94: cisd-h2o+-1 ...................... Passed 5.15 sec; Start 22: cc11; 250/411 Test #54: cc38 ............................. Passed 29.55 sec; Start 95: cisd-h2o+-2; 251/411 Test #392: python-cc54 ...................... Passed 28.18 sec; Start 295: psithon1; 252/411 Test #84: cdomp2-2 ......................... Passed 30.82 sec; Start 294: psimrcc-sp1; 253/411 Test #95: cisd-h2o+-2 ...................... Passed 5.19 sec; Start 310: rasci-c2-active; 254/411 Test #294: psimrcc-sp1 ...................... Passed 3.91 sec; Start 72: cc54; 255/411 Test #125: dfccsd-grad1 ..................... Passed 29.42 sec; Start 331: scf1; 256/411 Test #295: psithon1 ......................... Passed 9.42 sec; Start 62: cc45; 257/411 Test #310: rasci-c2-active .................. Passed 7.42 sec; Start 6: ao-casscf-sp; 258/411 Test #78: cc8a ............................. Passed 36.32 sec; Start 132: dfmp2-4; 259/411 Test #142: dfomp2-4 ......................... Passed 24.29 sec; Start 152: dfomp2p5-grad1; 260/411 Test #126: dfccsd-t-grad1 ................... Passed 22.19 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:23371,Test,Test,23371,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,ty ..................... Passed 6.15 sec; Start 340: soscf-large; 326/411 Test #335: scf4 ............................. Passed 13.02 sec; Start 341: soscf-ref; 327/411 Test #326: scf-ecp .......................... Passed 30.68 sec; Start 342: soscf-dft; 328/411 Test #338: scf7 ............................. Passed 16.23 sec; Start 343: stability1; 329/411 Test #343: stability1 ....................... Passed 2.42 sec; Start 344: dfep2-1; 330/411 Test #319: sapt5 ............................ Passed 75.45 sec; Start 345: dfep2-2; 331/411 Test #317: sapt3 ............................ Passed 76.62 sec; Start 346: sapt-dft1; 332/411 Test #344: dfep2-1 .......................... Passed 4.52 sec; Start 347: sapt-dft2; 333/411 Test #345: dfep2-2 .......................... Passed 2.12 sec; Start 348: sapt-compare; 334/411 Test #340: soscf-large ...................... Passed 15.89 sec; Start 349: sapt-sf1; 335/411 Test #341: soscf-ref ........................ Passed 14.83 sec; Start 350: dft-custom; 336/411 Test #336: scf5 ............................. Passed 32.53 sec; Start 351: dft-reference; 337/411 Test #349: sapt-sf1 ......................... Passed 5.59 sec; Start 352: stability2; 338/411 Test #352: stability2 ....................... Passed 1.67 sec; Start 353: tu1-h2o-energy; 339/411 Test #351: dft-reference .................... Passed 3.51 sec; Start 354: tu2-ch2-energy; 340/411 Test #353: tu1-h2o-energy ................... Passed 1.42 sec; Start 355: tu3-h2o-opt; 341/411 Test #354: tu2-ch2-energy ................... Passed 1.23 sec; Start 356: scf-response1; 342/411 Test #355: tu3-h2o-opt ...................... Passed 3.24 sec; Start 357: tu4-h2o-freq; 343/411 Test #337: scf6 ............................. Passed 39.47 sec; Start 358: tu5-sapt; 344/411 Test #356: scf-response1 .................... Passed 2.66 sec; Start 359: tu6-cp-ne2; 345/411 Test #350: dft-custom ....................... Passed 13.31 sec; Start 360: x2c1; 346/411 Test #346: sapt-dft1 ................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:31361,Test,Test,31361,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,"u1-h2o-energy ................... Passed 1.26 sec; Start 209: mcscf1; 393/411 Test #352: stability2 ....................... Passed 1.16 sec; Start 211: mcscf3; 394/411 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 409: skeletonscf; 395/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; Start 174: docs-bases; 397/411 Test #354: tu2-ch2-energy ................... Passed 0.86 sec; Start 216: mints5; 398/411 Test #334: scf3 ............................. Passed 0.73 sec; Start 208: matrix1; 399/411 Test #209: mcscf1 ........................... Passed 0.69 sec; Start 212: mints1; 400/411 Test #211: mcscf3 ........................... Passed 0.67 sec; Start 364: options1; 401/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 402: json-schema-1-throws; 402/411 Test #175: docs-dft ......................... Passed 0.59 sec; Start 215: mints4; 403/411 Test #174: docs-bases ....................... Passed 0.53 sec; Start 87: cepa1; 404/411 Test #216: mints5 ........................... Passed 0.58 sec; 405/411 Test #208: matrix1 .......................... Passed 0.54 sec; 406/411 Test #212: mints1 ........................... Passed 0.55 sec; 407/411 Test #364: options1 ......................... Passed 0.56 sec; 408/411 Test #402: json-schema-1-throws ............. Passed 0.55 sec; 409/411 Test #215: mints4 ........................... Passed 0.52 sec; 410/411 Test #87: cepa1 ............................ Passed 1.39 sec; 411/411 Test #318: sapt4 ............................ Passed 2011.89 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 67.22 sec*proc (2 tests); autotest = 804.67 sec*proc (26 tests); cart = 11287.07 sec*proc (123 tests); cas = 50.10 sec*proc (1 test); casscf = 57.38 sec*proc (11 tests); cbs = 901.95 sec*proc (10 tests); cc = 3510.91 sec*proc (65 tests); cdomp2 = 32.39 sec*proc (2 tests)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:37664,Test,Test,37664,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,u1-h2o-energy; 359/412 Test #382: psi4numpy-dfmp2 .................. Passed 24.00 sec; Start 331: scf-bs; 360/412 Test #406: skeleton ......................... Passed 23.35 sec; Start 103: decontract; 361/412 Test #353: stability2 ....................... Passed 23.10 sec; Start 223: mints10; 362/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 23.62 sec; Start 221: mints-helper; 363/412 Test #408: skeletondfmp2 .................... Passed 22.75 sec; Start 411: skeletonsointegrals; 364/412 Test #8: castup1 .......................... Passed 23.16 sec; Start 355: tu2-ch2-energy; 365/412 Test #391: python-mints9 .................... Passed 24.17 sec; Start 381: psi4numpy-cphf; 366/412 Test #189: fci-tdm .......................... Passed 23.11 sec; Start 401: json-schema-1-ghost; 367/412 Test #211: mcscf2 ........................... Passed 23.47 sec; Start 384: psi4numpy-rhf-gradient; 368/412 Test #350: sapt-sf1 ......................... Passed 22.50 sec; Start 397: python-memdfjk; 369/412 Test #396: python-mints13 ................... Passed 23.34 sec; Start 215: mints3; 370/412 Test #404: json-schema-1-gradient ........... Passed 23.57 sec; Start 379: mints12; 371/412 Test #407: skeletonaointegrals .............. Passed 22.71 sec; Start 405: json-schema-1-properties; 372/412 Test #299: pubchem2 ......................... Passed 22.82 sec; Start 335: scf3; 373/412 Test #331: scf-bs ........................... Passed 22.57 sec; Start 388: python-energy; 374/412 Test #223: mints10 .......................... Passed 22.74 sec; Start 310: pywrap-molecule; 375/412 Test #354: tu1-h2o-energy ................... Passed 23.10 sec; Start 383: psi4numpy-rhf; 376/412 Test #103: decontract ....................... Passed 23.29 sec; Start 210: mcscf1; 377/412 Test #411: skeletonsointegrals .............. Passed 22.95 sec; Start 410: skeletonscf; 378/412 Test #381: psi4numpy-cphf ................... Passed 23.03 sec; Start 212: mcscf3; 379/412 Test #355: tu2-ch2-energy ...........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:34848,Test,Test,34848,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,u1-h2o-energy; 370/412 Test #331: scf-bs ........................... Passed 2.33 sec; Start 103: decontract; 371/412 Test #355: tu2-ch2-energy ................... Passed 1.51 sec; Start 288: psimrcc-ccsd_t-1; 372/412 Test #353: stability2 ....................... Passed 2.45 sec; Start 381: psi4numpy-cphf; 373/412 Test #224: molden1 .......................... Passed 14.30 sec; Start 405: json-schema-1-properties; 374/412 Test #222: mints9 ........................... Passed 1.97 sec; Start 401: json-schema-1-ghost; 375/412 Test #211: mcscf2 ........................... Passed 2.51 sec; Start 397: python-memdfjk; 376/412 Test #411: skeletonsointegrals .............. Passed 1.93 sec; Start 299: pubchem2; 377/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.52 sec; Start 388: python-energy; 378/412 Test #221: mints-helper ..................... Passed 1.67 sec; Start 399: json-v11-gradient; 379/412 Test #223: mints10 .......................... Passed 2.18 sec; Start 335: scf3; 380/412 Test #396: python-mints13 ................... Passed 1.96 sec; Start 212: mcscf3; 381/412 Test #363: x2c3 ............................. Passed 3.02 sec; Start 379: mints12; 382/412 Test #354: tu1-h2o-energy ................... Passed 1.83 sec; Start 310: pywrap-molecule; 383/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 210: mcscf1; 384/412 Test #397: python-memdfjk ................... Passed 0.98 sec; Start 217: mints5; 385/412 Test #4: casscf-semi ...................... Passed 15.97 sec; Start 383: psi4numpy-rhf; 386/412 Test #103: decontract ....................... Passed 1.76 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.26 sec; Start 213: mints1; 388/412 Test #405: json-schema-1-properties ......... Passed 1.52 sec; Start 175: docs-bases; 389/412 Test #388: python-energy .................... Passed 1.01 sec; Start 309: pywrap-db3; 390/412 Test #335: scf3 ............................. Passed 0.79 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:35778,Test,Test,35778,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,u2-ch2-energy ................... Passed 1.17 sec; Start 356: scf-response1; 342/411 Test #356: scf-response1 .................... Passed 2.45 sec; Start 357: tu4-h2o-freq; 343/411 Test #350: dft-custom ....................... Passed 13.99 sec; Start 358: tu5-sapt; 344/411 Test #355: tu3-h2o-opt ...................... Passed 3.92 sec; Start 359: tu6-cp-ne2; 345/411 Test #346: sapt-dft1 ........................ Passed 22.50 sec; Start 360: x2c1; 346/411 Test #342: soscf-dft ........................ Passed 33.42 sec; Start 361: x2c2; 347/411 Test #357: tu4-h2o-freq ..................... Passed 10.29 sec; Start 362: x2c3; 348/411 Test #361: x2c2 ............................. Passed 2.36 sec; Start 363: zaptn-nh2; 349/411 Test #362: x2c3 ............................. Passed 2.84 sec; Start 364: options1; 350/411 Test #364: options1 ......................... Passed 0.60 sec; Start 365: cubeprop-esp; 351/411 Test #363: zaptn-nh2 ........................ Passed 3.28 sec; Start 366: dft-smoke; 352/411 Test #358: tu5-sapt ......................... Passed 20.65 sec; Start 367: scf-hess1; 353/411 Test #365: cubeprop-esp ..................... Passed 8.73 sec; Start 368: scf-freq1; 354/411 Test #348: sapt-compare ..................... Passed 42.97 sec; Start 369: dft-jk; 355/411 Test #366: dft-smoke ........................ Passed 14.19 sec; Start 370: scf-coverage; 356/411 Test #360: x2c1 ............................. Passed 24.30 sec; Start 371: dft-custom-dhdf; 357/411 Test #367: scf-hess1 ........................ Passed 8.55 sec; Start 372: dft-custom-hybrid; 358/411 Test #368: scf-freq1 ........................ Passed 10.99 sec; Start 373: dft-custom-mgga; 359/411 Test #370: scf-coverage ..................... Passed 6.20 sec; Start 374: dft-custom-gga; 360/411 Test #369: dft-jk ........................... Passed 10.99 sec; Start 375: pywrap-bfs; 361/411 Test #372: dft-custom-hybrid ................ Passed 9.77 sec; Start 376: pywrap-align; 362/411 Test #376: pywrap-align ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:32802,Test,Test,32802,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,u3-h2o-opt ...................... Passed 3.20 sec; Start 357: tu4-h2o-freq; 351/411 Test #356: scf-response1 .................... Passed 2.17 sec; Start 358: tu5-sapt; 352/411 Test #357: tu4-h2o-freq ..................... Passed 10.43 sec; Start 359: tu6-cp-ne2; 353/411 Test #348: sapt-compare ..................... Passed 44.39 sec; Start 360: x2c1; 354/411 Test #358: tu5-sapt ......................... Passed 17.87 sec; Start 361: x2c2; 355/411 Test #361: x2c2 ............................. Passed 3.90 sec; Start 362: x2c3; 356/411 Test #362: x2c3 ............................. Passed 2.47 sec; Start 363: zaptn-nh2; 357/411 Test #363: zaptn-nh2 ........................ Passed 2.31 sec; Start 364: options1; 358/411 Test #364: options1 ......................... Passed 0.59 sec; Start 365: cubeprop-esp; 359/411 Test #305: pywrap-checkrun-rohf ............. Passed 280.55 sec; Start 366: dft-smoke; 360/411 Test #360: x2c1 ............................. Passed 18.65 sec; Start 367: scf-hess1; 361/411 Test #365: cubeprop-esp ..................... Passed 8.43 sec; Start 368: scf-freq1; 362/411 Test #367: scf-hess1 ........................ Passed 7.55 sec; Start 369: dft-jk; 363/411 Test #366: dft-smoke ........................ Passed 13.03 sec; Start 370: scf-coverage; 364/411 Test #368: scf-freq1 ........................ Passed 12.10 sec; Start 371: dft-custom-dhdf; 365/411 Test #370: scf-coverage ..................... Passed 5.55 sec; Start 372: dft-custom-hybrid; 366/411 Test #369: dft-jk ........................... Passed 11.38 sec; Start 373: dft-custom-mgga; 367/411 Test #372: dft-custom-hybrid ................ Passed 10.46 sec; Start 374: dft-custom-gga; 368/411 Test #347: sapt-dft2 ........................ Passed 119.34 sec; Start 375: pywrap-bfs; 369/411 Test #359: tu6-cp-ne2 ....................... Passed 78.43 sec; Start 376: pywrap-align; 370/411 Test #374: dft-custom-gga ................... Passed 29.24 sec; Start 377: pywrap-align-chiral; 371/411 Test #306: pywrap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:33551,Test,Test,33551,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,u4-h2o-freq ..................... Passed 13.90 sec; Start 8: castup1; 70/415 Test #201: freq-isotope2 .................... Passed 11.36 sec; Start 369: tu5-sapt; 71/415 Test #172: dft-vv10 ......................... Passed 16.42 sec; Start 160: dfrasscf-sp; 72/415 Test #357: sapt-dft1 ........................ Passed 14.97 sec; Start 292: opt-freeze-coords; 73/415 Test #293: opt-full-hess-every .............. Passed 15.99 sec; Start 305: psithon1; 74/415 Test #8: castup1 .......................... Passed 4.90 sec; Start 137: dfmp2-grad1; 75/415 Test #266: omp3-1 ........................... Passed 10.08 sec; Start 376: cubeprop-esp; 76/415 Test #274: opt1 ............................. Passed 11.75 sec; Start 325: sapt1; 77/415 Test #226: molden1 .......................... Passed 14.09 sec; Start 378: scf-hess1; 78/415 Test #227: molden2 .......................... Passed 12.71 sec; Start 239: mpn-bh; 79/415 Test #292: opt-freeze-coords ................ Passed 8.13 sec; Start 234: mp2p5-grad1; 80/415 Test #334: sapt8 ............................ Passed 16.61 sec; Start 123: dfccd1; 81/415 Test #369: tu5-sapt ......................... Passed 12.10 sec; Start 120: dfcasscf-sa-sp; 82/415 Test #376: cubeprop-esp ..................... Passed 7.51 sec; Start 404: python-3-index-transforms; 83/415 Test #137: dfmp2-grad1 ...................... Passed 9.29 sec; Start 119: ao-dfcasscf-sp; 84/415 Test #160: dfrasscf-sp ...................... Passed 14.00 sec; Start 122: dfcasscf-sp; 85/415 Test #305: psithon1 ......................... Passed 14.10 sec; Start 408: json-v11-energy; 86/415 Test #239: mpn-bh ........................... Passed 7.27 sec; Start 351: soscf-large; 87/415 Test #120: dfcasscf-sa-sp ................... Passed 6.28 sec; Start 121: dfcasscf-fzc-sp; 88/415 Test #234: mp2p5-grad1 ...................... Passed 7.74 sec; Start 95: cisd-h2o+-0; 89/415 Test #404: python-3-index-transforms ........ Passed 6.88 sec; Start 187: fci-dipole; 90/415 Test #123: dfccd1 .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:7786,Test,Test,7786,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,ub.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6982,test,tests,6982,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,ub.com/psi4/psi4/pull/470/files#diff-7 (2); > - _M_ psi4/share/psi4/fsapt/copy_pymol2.py; > https://github.com/psi4/psi4/pull/470/files#diff-8 (2); > - _D_ psi4/share/psi4/fsapt/pymol2/VD.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-9 (0); > - _M_ psi4/src/read_options.cc; > https://github.com/psi4/psi4/pull/470/files#diff-10 (6); > - _A_ samples/dkh/placeholder; > https://github.com/psi4/psi4/pull/470/files#diff-11 (1); > - _A_ samples/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-12 (71); > - _A_ samples/fsapt-diff1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-13 (71); > - _A_ samples/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-14 (71); > - _A_ samples/fsapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-15 (71); > - _A_ samples/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-16 (56); > - _A_ samples/fsapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:3208,test,test,3208,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['test']
Testability,ub.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10314,test,tests,10314,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,ubchem1 ......................... Passed 59.95 sec; Start 276: opt8; 125/413 Test #278: opt11 ............................ Passed 50.91 sec; Start 152: dfomp2p5-1; 126/413 Test #164: dft-grad-meta .................... Passed 52.34 sec; Start 108: dcft-grad4; 127/413 Test #202: fnocc2 ........................... Passed 58.30 sec; Start 196: fd-freq-gradient; 128/413 Test #154: dfomp2p5-grad1 ................... Passed 45.22 sec; Start 51: cc34; 129/413 Test #55: cc38 ............................. Passed 43.34 sec; Start 254: omp2-grad2; 130/413 Test #239: nbody-he-cluster ................. Passed 61.13 sec; Start 127: dfccsd-grad1; 131/413 Test #276: opt8 ............................. Passed 40.80 sec; Start 53: cc36; 132/413 Test #38: cc22 ............................. Passed 52.17 sec; Start 2: adc2; 133/413 Test #52: cc35 ............................. Passed 54.66 sec; Start 172: dft1-alt; 134/413 Test #51: cc34 ............................. Passed 32.38 sec; Start 301: pywrap-alias; 135/413 Test #108: dcft-grad4 ....................... Passed 43.35 sec; Start 221: mints-benchmark; 136/413 Test #152: dfomp2p5-1 ....................... Passed 45.46 sec; Start 266: opt-lindep-change; 137/413 Test #128: dfccsd-t-grad1 ................... Passed 69.23 sec; Start 22: cc10; 138/413 Test #53: cc36 ............................. Passed 20.23 sec; Start 23: cc11; 139/413 Test #254: omp2-grad2 ....................... Passed 41.63 sec; Start 54: cc37; 140/413 Test #196: fd-freq-gradient ................. Passed 47.07 sec; Start 12: cbs-parser; 141/413 Test #127: dfccsd-grad1 ..................... Passed 37.30 sec; Start 279: opt12; 142/413 Test #2: adc2 ............................. Passed 37.54 sec; Start 111: dcft3; 143/413 Test #266: opt-lindep-change ................ Passed 28.24 sec; Start 350: sapt-compare; 144/413 Test #318: sapt2 ............................ Passed 331.13 sec; Start 198: fd-gradient; 145/413 Test #221: mints-benchmark .................. Passed 43.57 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:12751,Test,Test,12751,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,ubchem2; 338/401 Test #281: props2 ........................... Passed 7.99 sec; Start 297: pywrap-basis; 339/401 Test #294: pubchem2 ......................... Passed 1.46 sec; Start 299: pywrap-checkrun-convcrit; 340/401 Test #269: opt7 ............................. Passed 30.82 sec; Start 300: pywrap-checkrun-rhf; 341/401 Test #144: dfomp2-grad3 ..................... Passed 181.03 sec; Start 301: pywrap-checkrun-rohf; 342/401 Test #278: opt-irc-3 ........................ Passed 19.25 sec; Start 302: pywrap-checkrun-uhf; 343/401 Test #297: pywrap-basis ..................... Passed 9.99 sec; Start 304: pywrap-db3; 344/401 Test #304: pywrap-db3 ....................... Passed 0.90 sec; Start 306: rasci-c2-active; 345/401 Test #299: pywrap-checkrun-convcrit ......... Passed 10.69 sec; Start 307: rasci-h2o; 346/401 Test #292: psithon2 ......................... Passed 14.67 sec; Start 308: rasci-ne; 347/401 Test #109: dcft4 ............................ Passed 254.77 sec; Start 313: sapt3; 348/401 Test #307: rasci-h2o ........................ Passed 2.60 sec; Start 315: sapt5; 349/401 Test #306: rasci-c2-active .................. Passed 5.21 sec; Start 316: sapt6; 350/401 Test #272: opt11 ............................ Passed 36.20 sec; Start 317: sapt-dft-api; 351/401 Test #293: pubchem1 ......................... Passed 23.07 sec; Start 318: sapt-dft-lrc; 352/401 Test #313: sapt3 ............................ Passed 12.75 sec; Start 319: sapt7; 353/401 Test #317: sapt-dft-api ..................... Passed 9.24 sec; Start 322: scf-ecp; 354/401 Test #318: sapt-dft-lrc ..................... Passed 11.33 sec; Start 325: scf-guess-read2; 355/401 Test #315: sapt5 ............................ Passed 23.94 sec; Start 331: scf4; 356/401 Test #325: scf-guess-read2 .................. Passed 5.67 sec; Start 333: scf6; 357/401 Test #308: rasci-ne ......................... Passed 30.14 sec; Start 334: scf7; 358/401 Test #319: sapt7 ............................ Passed 22.59 sec; Start 337: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:32521,Test,Test,32521,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,"ubdir where `pcmsolver.inp`-->`@pcmsolver.inp`. . Note that the changes in this PR would have only influenced psiapi mode, not psithon, since most of the pcm_helper fn is just repeated from inputparser. I'm not sure whether @raimis is trying to run psithon or psiapi — looks like the latter in intent and the former in practice. Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'scf', ref_wfn = <psi4.core.Wavefunction object at 0x7fa9d0ef4af0>, reference = ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-353769977:1267,test,tests,1267,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977,1,['test'],['tests']
Testability,"ube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mavx' -D CMAKE_VERBOSE_MAKEFILE=ON -D HDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so -D Boost_CHRONO_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_chrono.so",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:2693,log,log,2693,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['log'],['log']
Testability,"ubeprop-esp .....................***Failed 6.53 sec; 399/401 Test #18: cbs-xtpl-func .................... Passed 1096.76 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 2039.20 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.03 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 61.70 sec*proc (2 tests); autotest = 1698.69 sec*proc (25 tests); cart = 9530.61 sec*proc (123 tests); cas = 29.65 sec*proc (1 test); casscf = 157.01 sec*proc (11 tests); cbs = 2162.96 sec*proc (10 tests); cc = 9085.75 sec*proc (64 tests); cdomp2 = 59.27 sec*proc (2 tests); cepa = 203.58 sec*proc (7 tests); ci = 83.42 sec*proc (8 tests); cisd = 109.67 sec*proc (7 tests); cookbook = 222.55 sec*proc (1 test); cubeprop = 14.38 sec*proc (2 tests); dcft = 3348.62 sec*proc (13 tests); df = 1824.24 sec*proc (38 tests); dfccd = 3.69 sec*proc (1 test); dfccd-grad = 13.83 sec*proc (1 test); dfccdl = 8.06 sec*proc (1 test); dfccsd = 4.58 sec*proc (1 test); dfccsd-grad = 43.20 sec*proc (1 test); dfccsd-t-grad = 38.87 sec*proc (1 test); dfccsdat = 20.44 sec*proc (1 test); dfccsdl = 4.62 sec*proc (1 test); dfccsdt = 10.41 sec*proc (1 test); dfep2 = 7.13 sec*proc (2 tests); dfmp2 = 121.95 sec*proc (11 tests); dfomp2 = 943.08 sec*proc (7 tests); dfomp2.5 = 233.40 sec*proc (4 tests); dfomp3 = 229.00 sec*proc (4 tests); dfscf = 28.93 sec*proc (1 test); dft = 5629.04 sec*proc (26 tests); docs = 1.78 sec*proc (2 tests); ecp = 57.50 sec*proc (2 tests); fci = 7.32 sec*proc (2 tests); fcidump = 6.32 sec*proc (1 test); findif = 698.00 sec*proc (5 tests); fnocc = 141.78 sec*proc (4 tests); freq = 1043.60 sec*proc (6 tests); gradient = 1568.40 sec*proc (16 tests); json = 19.71 sec*proc (8 tests); longtests = 933.44 sec*proc (5 tests); mcscf = 5.98 sec*proc (3 tests); minitests = 44.49 sec*proc (3 tests); mints = 40.79 sec*proc (14 tests); misc = 369.08 sec*proc (16 tests); mp2 = 283.13 sec*proc (13 tests); nbody = 73.23 sec*proc (2 tests); numpy = 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:38082,test,test,38082,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['test'],['test']
Testability,ubeprop; 83/401 Test #50: cc34 ............................. Passed 15.42 sec; Start 353: tu5-sapt; 84/401 Test #20: cc1 .............................. Passed 39.63 sec; Start 132: dfmp2-ecp; 85/401 Test #26: cc13b ............................ Passed 45.75 sec; Start 197: fnocc3; 86/401 Test #52: cc36 ............................. Passed 12.26 sec; Start 121: dfccd-grad1; 87/401 Test #100: cubeprop ......................... Passed 8.71 sec; Start 76: cc8; 88/401 Test #298: pywrap-cbs1 ...................... Passed 92.27 sec; Start 172: extern1; 89/401 Test #353: tu5-sapt ......................... Passed 9.35 sec; Start 196: fnocc2; 90/401 Test #91: ci-multi ......................... Passed 17.40 sec; Start 195: fnocc1; 91/401 Test #197: fnocc3 ........................... Passed 9.24 sec; Start 311: sapt1; 92/401 Test #132: dfmp2-ecp ........................ Passed 10.33 sec; Start 148: dfomp3-grad2; 93/401 Test #121: dfccd-grad1 ...................... Passed 6.11 sec; Start 32: cc17; 94/401 Test #83: cdomp2-2 ......................... Passed 16.79 sec; Start 352: tu4-h2o-freq; 95/401 Test #195: fnocc1 ........................... Passed 8.09 sec; Start 390: python-3-index-transforms; 96/401 Test #311: sapt1 ............................ Passed 9.43 sec; Start 106: dcft1; 97/401 Test #238: ocepa-grad2 ...................... Passed 49.33 sec; Start 14: cbs-xtpl-energy; 98/401 Test #172: extern1 .......................... Passed 15.83 sec; Start 362: scf-hess1; 99/401 Test #390: python-3-index-transforms ........ Passed 6.02 sec; Start 126: dfccsdt1; 100/401 Test #352: tu4-h2o-freq ..................... Passed 12.54 sec; Start 33: cc18; 101/401 Test #126: dfccsdt1 ......................... Passed 3.87 sec; Start 7: casscf-sp; 102/401 Test #76: cc8 .............................. Passed 23.26 sec; Start 176: fsapt-terms; 103/401 Test #14: cbs-xtpl-energy .................. Passed 7.95 sec; Start 286: psimrcc-ccsd_t-4; 104/401 Test #362: scf-hess1 ........................ Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:8745,Test,Test,8745,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,"ue with `method_algorithm_type(mtd).keyword` and `method_algorithm_type(mtd).now`, respectively. This helps clean up proc.py and allows the controlling keyword to be linked for each method in the generated tables.; - [x] in proc.py, ; - [x] select_* functions have been made more boilerplate and elsewhere-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to a working method -- do you need to tweak aefc or uhf/rohf or is this method nowhere in psi or have you misspelled it? Now, the ManagedMethodsError exception has been reworked to return current conditions data (to be caught and reformatted) and the error message itself (usually not seen directly) has been reworked to provide more conditions and a link to the table row in the docs where one can see what _would_ run. Back at driver_util.py, these errors are reformatted according to whether managed or plain method, whether deriv isn't available at all or just not demanded deriv, e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:8921,log,logic,8921,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['log'],['logic']
Testability,uess-read2; 323/411 Test #323: sapt7 ............................ Passed 32.01 sec; Start 330: scf-bs; 324/411 Test #329: scf-guess-read2 .................. Passed 6.31 sec; Start 331: scf1; 325/411 Test #330: scf-bs ........................... Passed 1.24 sec; Start 332: scf-occ; 326/411 Test #332: scf-occ .......................... Passed 4.44 sec; Start 333: scf2; 327/411 Test #331: scf1 ............................. Passed 5.69 sec; Start 334: scf3; 328/411 Test #333: scf2 ............................. Passed 2.02 sec; Start 335: scf4; 329/411 Test #334: scf3 ............................. Passed 1.22 sec; Start 336: scf5; 330/411 Test #335: scf4 ............................. Passed 13.62 sec; Start 337: scf6; 331/411 Test #326: scf-ecp .......................... Passed 33.42 sec; Start 338: scf7; 332/411 Test #338: scf7 ............................. Passed 16.76 sec; Start 339: scf-property; 333/411 Test #339: scf-property ..................... Passed 4.82 sec; Start 340: soscf-large; 334/411 Test #336: scf5 ............................. Passed 41.72 sec; Start 341: soscf-ref; 335/411 Test #340: soscf-large ...................... Passed 14.28 sec; Start 342: soscf-dft; 336/411 Test #341: soscf-ref ........................ Passed 9.33 sec; Start 343: stability1; 337/411 Test #337: scf6 ............................. Passed 38.63 sec; Start 344: dfep2-1; 338/411 Test #343: stability1 ....................... Passed 2.90 sec; Start 345: dfep2-2; 339/411 Test #344: dfep2-1 .......................... Passed 3.24 sec; Start 346: sapt-dft1; 340/411 Test #345: dfep2-2 .......................... Passed 1.96 sec; Start 347: sapt-dft2; 341/411 Test #320: sapt6 ............................ Passed 154.12 sec; Start 348: sapt-compare; 342/411 Test #342: soscf-dft ........................ Passed 32.16 sec; Start 349: sapt-sf1; 343/411 Test #346: sapt-dft1 ........................ Passed 26.36 sec; Start 350: dft-custom; 344/411 Test #349: sapt-sf1 ......................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:31015,Test,Test,31015,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,uess-read2; 323/411 Test #323: sapt7 ............................ Passed 35.22 sec; Start 330: scf-bs; 324/411 Test #329: scf-guess-read2 .................. Passed 8.70 sec; Start 331: scf1; 325/411 Test #330: scf-bs ........................... Passed 4.28 sec; Start 332: scf-occ; 326/411 Test #332: scf-occ .......................... Passed 4.04 sec; Start 333: scf2; 327/411 Test #331: scf1 ............................. Passed 7.71 sec; Start 334: scf3; 328/411 Test #333: scf2 ............................. Passed 2.64 sec; Start 335: scf4; 329/411 Test #334: scf3 ............................. Passed 1.41 sec; Start 336: scf5; 330/411 Test #326: scf-ecp .......................... Passed 35.82 sec; Start 337: scf6; 331/411 Test #335: scf4 ............................. Passed 26.29 sec; Start 338: scf7; 332/411 Test #338: scf7 ............................. Passed 20.85 sec; Start 339: scf-property; 333/411 Test #339: scf-property ..................... Passed 6.97 sec; Start 340: soscf-large; 334/411 Test #336: scf5 ............................. Passed 60.32 sec; Start 341: soscf-ref; 335/411 Test #320: sapt6 ............................ Passed 167.24 sec; Start 342: soscf-dft; 336/411 Test #340: soscf-large ...................... Passed 14.26 sec; Start 343: stability1; 337/411 Test #343: stability1 ....................... Passed 5.25 sec; Start 344: dfep2-1; 338/411 Test #337: scf6 ............................. Passed 72.37 sec; Start 345: dfep2-2; 339/411 Test #344: dfep2-1 .......................... Passed 3.50 sec; Start 346: sapt-dft1; 340/411 Test #345: dfep2-2 .......................... Passed 2.09 sec; Start 347: sapt-dft2; 341/411 Test #341: soscf-ref ........................ Passed 18.07 sec; Start 348: sapt-compare; 342/411 Test #342: soscf-dft ........................ Passed 32.35 sec; Start 349: sapt-sf1; 343/411 Test #349: sapt-sf1 ......................... Passed 2.84 sec; Start 350: dft-custom; 344/411 Test #346: sapt-dft1 ........................ Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:31001,Test,Test,31001,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,uess-read2; 323/411 Test #329: scf-guess-read2 .................. Passed 7.83 sec; Start 330: scf-bs; 324/411 Test #330: scf-bs ........................... Passed 1.66 sec; Start 331: scf1; 325/411 Test #323: sapt7 ............................ Passed 34.07 sec; Start 332: scf-occ; 326/411 Test #331: scf1 ............................. Passed 6.42 sec; Start 333: scf2; 327/411 Test #332: scf-occ .......................... Passed 4.39 sec; Start 334: scf3; 328/411 Test #326: scf-ecp .......................... Passed 32.04 sec; Start 335: scf4; 329/411 Test #334: scf3 ............................. Passed 1.45 sec; Start 336: scf5; 330/411 Test #333: scf2 ............................. Passed 1.93 sec; Start 337: scf6; 331/411 Test #335: scf4 ............................. Passed 10.69 sec; Start 338: scf7; 332/411 Test #338: scf7 ............................. Passed 14.81 sec; Start 339: scf-property; 333/411 Test #339: scf-property ..................... Passed 5.25 sec; Start 340: soscf-large; 334/411 Test #336: scf5 ............................. Passed 37.10 sec; Start 341: soscf-ref; 335/411 Test #337: scf6 ............................. Passed 38.68 sec; Start 342: soscf-dft; 336/411 Test #340: soscf-large ...................... Passed 14.82 sec; Start 343: stability1; 337/411 Test #343: stability1 ....................... Passed 3.78 sec; Start 344: dfep2-1; 338/411 Test #341: soscf-ref ........................ Passed 12.15 sec; Start 345: dfep2-2; 339/411 Test #345: dfep2-2 .......................... Passed 2.11 sec; Start 346: sapt-dft1; 340/411 Test #320: sapt6 ............................ Passed 158.81 sec; Start 347: sapt-dft2; 341/411 Test #344: dfep2-1 .......................... Passed 3.37 sec; Start 348: sapt-compare; 342/411 Test #342: soscf-dft ........................ Passed 31.87 sec; Start 349: sapt-sf1; 343/411 Test #349: sapt-sf1 ......................... Passed 1.22 sec; Start 350: dft-custom; 344/411 Test #346: sapt-dft1 ........................ Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:30999,Test,Test,30999,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,"ugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:989,test,test,989,https://psicode.org,https://github.com/psi4/psi4/pull/2549,2,['test'],['test']
Testability,"uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day. thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge. I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547:945,test,test,945,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547,1,['test'],['test']
Testability,"uild; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Core; 401: ---------------------------------------------------------; 401: ; 401: ==> Geometry <==; 401: ; 401: Molecular point group: c2v; 401: Full point group: C2v; 401: ; 401: Geometry (in Bohr), charge = 0, multiplicity = 1:; 401: ; 401: Center X Y Z Mass ; 401: ------------ ----------------- ----------------- ----------------- -----------------; 401: O 0.000000000000 0.000000000000 -0.129476941194 15.99491",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:1291,Test,Test,1291,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Test'],['Test']
Testability,"ulation. Meanwhile, one notable benefit of the CompositeJK class is that, for DFT calculations that use non-hybrid functionals, composite methods can be used to specify an algorithm specifically optimized for J matrix construction, in contrast to general algorithms which need to also account for the K matrix. Since non-hybrid DFT calculations only require the J matrix, CompositeJK can lead to speedups in such cases. But in those cases where only the J algorithm is needed, the current `SCF_TYPE` specification for CompositeJK has a problem - the composite K algorithm that must be specified, is unnecessary and unused. . This PR allows for the specification of CompositeJK algorithms via _only_ the J algorithm for cases such as non-hybrid DFT, where only the J matrix is needed. If CompositeJK is called without a K algorithm in cases where a K algorithm is needed, such as HF or hybrid DFT, an exception is thrown. Additionally, if the `J_algo+K_algo` `SCF_TYPE` specification for CompositeJK is used in conjunction with a non-hybrid functional, a note is given to the user, letting them know that the K algorithm won't be used. ## User API & Changelog headlines; - [X] Adds a new `SCF_TYPE` option, `DFDIRJ`, for usage in non-hybrid DFT calculations. ## Dev notes & details; - [X] Adjusts the CompositeJK class so that it can be called and used with _only_ the J algorithm as the `SCF_TYPE` keyword. This can be useful in non-hybrid DFT calculations, where the K matrix is unnecessary.; - [X] If only a J algorithm is specified in cases where a K matrix is required, the code throws an exception.; - [x] If the old CompositeJK `SCF_TYPE` notation is used when the K matrix is not required, a note is given to the user. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3001:2086,Test,Tests,2086,https://psicode.org,https://github.com/psi4/psi4/pull/3001,3,"['Test', 'test']","['Tests', 'tests']"
Testability,ule ........................ Passed 316.28 sec; Start 98: cisd-opt-fd; 33/412 Test #32: cc16 ............................. Passed 277.18 sec; Start 47: cc30; 34/412 Test #387: cookbook-rohf-orb-rot ............ Passed 373.24 sec; Start 159: dfscf-bz2; 35/412 Test #111: dcft4 ............................ Passed 1816.21 sec; Start 105: dcft-grad2; 36/412 Test #59: cc41 ............................. Passed 136.95 sec; Start 348: sapt-dft2; 37/412 Test #48: cc31 ............................. Passed 161.28 sec; Start 75: cc5a; 38/412 Test #374: dft-custom-mgga .................. Passed 194.81 sec; Start 303: pywrap-cbs1; 39/412 Test #47: cc30 ............................. Passed 74.35 sec; Start 184: isapt2; 40/412 Test #61: cc43 ............................. Passed 122.03 sec; Start 92: cepa-module; 41/412 Test #321: sapt6 ............................ Passed 175.33 sec; Start 155: dft-grad-lr2; 42/412 Test #11: cbs-delta-energy ................. Passed 277.51 sec; Start 169: dft1; 43/412 Test #196: fd-freq-gradient-large ........... Passed 312.40 sec; Start 260: omp3-3; 44/412 Test #159: dfscf-bz2 ........................ Passed 150.66 sec; Start 27: cc13b; 45/412 Test #98: cisd-opt-fd ...................... Passed 165.52 sec; Start 26: cc13a; 46/412 Test #105: dcft-grad2 ....................... Passed 142.01 sec; Start 114: dcft7; 47/412 Test #348: sapt-dft2 ........................ Passed 127.97 sec; Start 206: frac-traverse; 48/412 Test #75: cc5a ............................. Passed 116.05 sec; Start 317: sapt2; 49/412 Test #184: isapt2 ........................... Passed 121.27 sec; Start 319: sapt4; 50/412 Test #303: pywrap-cbs1 ...................... Passed 132.02 sec; Start 326: scf-bz2; 51/412 Test #155: dft-grad-lr2 ..................... Passed 112.86 sec; Start 262: omp3-5; 52/412 Test #92: cepa-module ...................... Passed 134.25 sec; Start 372: dft-custom-dhdf; 53/412 Test #27: cc13b ............................ Passed 61.84 sec; Start 281: opt-irc-1; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:4373,Test,Test,4373,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,ull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18906,test,tests,18906,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,ull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20281,test,tests,20281,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,ull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5702,test,tests,5702,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,ull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9034,test,tests,9034,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,ult[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rh,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9631,test,tests,9631,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,ulti ......................... Passed 40.23 sec; Start 52: cc35; 147/412 Test #134: dfmp2-ecp ........................ Passed 35.02 sec; Start 275: opt8; 148/412 Test #324: sapt7 ............................ Passed 33.88 sec; Start 126: dfccsd-grad1; 149/412 Test #195: fd-freq-gradient ................. Passed 42.38 sec; Start 253: omp2-grad2; 150/412 Test #127: dfccsd-t-grad1 ................... Passed 31.06 sec; Start 197: fd-gradient; 151/412 Test #12: cbs-parser ....................... Passed 51.49 sec; Start 361: x2c1; 152/412 Test #149: dfomp3-grad1 ..................... Passed 26.78 sec; Start 53: cc36; 153/412 Test #130: dfmp2-1 .......................... Passed 34.73 sec; Start 327: scf-ecp; 154/412 Test #201: fnocc2 ........................... Passed 46.22 sec; Start 265: opt-lindep-change; 155/412 Test #50: cc33 ............................. Passed 20.35 sec; Start 393: python-cc54; 156/412 Test #343: soscf-dft ........................ Passed 32.64 sec; Start 153: dfomp2p5-grad1; 157/412 Test #52: cc35 ............................. Passed 23.72 sec; Start 147: dfomp3-1; 158/412 Test #207: ghosts ........................... Passed 35.49 sec; Start 174: dft-omega; 159/412 Test #375: dft-custom-gga ................... Passed 32.72 sec; Start 376: pywrap-bfs; 160/412 Test #34: cc18 ............................. Passed 33.40 sec; Start 160: dft-b2plyp; 161/412 Test #275: opt8 ............................. Passed 33.48 sec; Start 23: cc11; 162/412 Test #53: cc36 ............................. Passed 23.85 sec; Start 63: cc45; 163/412 Test #126: dfccsd-grad1 ..................... Passed 31.96 sec; Start 268: opt2; 164/412 Test #327: scf-ecp .......................... Passed 28.53 sec; Start 167: dft-psivar; 165/412 Test #265: opt-lindep-change ................ Passed 26.45 sec; Start 129: dfccsdat1; 166/412 Test #253: omp2-grad2 ....................... Passed 32.18 sec; Start 16: cbs-xtpl-gradient; 167/412 Test #197: fd-gradient ...................... Passed 34.58,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:14809,Test,Test,14809,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,ulti ......................... Passed 43.92 sec; Start 167: dft-psivar; 149/412 Test #1: adc1 ............................. Passed 25.17 sec; Start 126: dfccsd-grad1; 150/412 Test #79: cc8a ............................. Passed 67.28 sec; Start 197: fd-gradient; 151/412 Test #160: dft-b2plyp ....................... Passed 25.44 sec; Start 153: dfomp2p5-grad1; 152/412 Test #53: cc36 ............................. Passed 27.67 sec; Start 91: cepa1; 153/412 Test #174: dft-omega ........................ Passed 26.66 sec; Start 50: cc33; 154/412 Test #129: dfccsdat1 ........................ Passed 26.53 sec; Start 164: dft-freq; 155/412 Test #7: casscf-sp ........................ Passed 37.16 sec; Start 347: sapt-dft1; 156/412 Test #127: dfccsd-t-grad1 ................... Passed 53.28 sec; Start 190: fci-tdm-2; 157/412 Test #167: dft-psivar ....................... Passed 26.97 sec; Start 72: cc53; 158/412 Test #152: dfomp2p5-2 ....................... Passed 110.98 sec; Start 149: dfomp3-grad1; 159/412 Test #12: cbs-parser ....................... Passed 92.18 sec; Start 34: cc18; 160/412 Test #164: dft-freq ......................... Passed 27.12 sec; Start 85: cdomp2-2; 161/412 Test #91: cepa1 ............................ Passed 33.32 sec; Start 359: tu5-sapt; 162/412 Test #57: cc4 .............................. Passed 63.11 sec; Start 248: omp2-2; 163/412 Test #190: fci-tdm-2 ........................ Passed 25.72 sec; Start 173: dft3; 164/412 Test #197: fd-gradient ...................... Passed 42.33 sec; Start 123: dfccd-grad1; 165/412 Test #347: sapt-dft1 ........................ Passed 28.00 sec; Start 323: sapt-dft-lrc; 166/412 Test #50: cc33 ............................. Passed 49.28 sec; Start 64: cc46; 167/412 Test #153: dfomp2p5-grad1 ................... Passed 51.79 sec; Start 74: cc55; 168/412 Test #359: tu5-sapt ......................... Passed 22.94 sec; Start 273: opt6; 169/412 Test #323: sapt-dft-lrc ..................... Passed 21.56 sec; Start 291: psimrcc-c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:15021,Test,Test,15021,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,ulti ......................... Passed 44.95 sec; Start 127: dfccsd-t-grad1; 147/412 Test #134: dfmp2-ecp ........................ Passed 36.78 sec; Start 393: python-cc54; 148/412 Test #207: ghosts ........................... Passed 35.32 sec; Start 1: adc1; 149/412 Test #361: x2c1 ............................. Passed 46.39 sec; Start 126: dfccsd-grad1; 150/412 Test #21: cc1 .............................. Passed 99.11 sec; Start 253: omp2-grad2; 151/412 Test #130: dfmp2-1 .......................... Passed 35.03 sec; Start 51: cc34; 152/412 Test #324: sapt7 ............................ Passed 34.89 sec; Start 23: cc11; 153/412 Test #343: soscf-dft ........................ Passed 33.26 sec; Start 149: dfomp3-grad1; 154/412 Test #153: dfomp2p5-grad1 ................... Passed 35.49 sec; Start 327: scf-ecp; 155/412 Test #375: dft-custom-gga ................... Passed 33.27 sec; Start 52: cc35; 156/412 Test #1: adc1 ............................. Passed 25.98 sec; Start 265: opt-lindep-change; 157/412 Test #197: fd-gradient ...................... Passed 36.17 sec; Start 63: cc45; 158/412 Test #275: opt8 ............................. Passed 37.31 sec; Start 283: opt-irc-3; 159/412 Test #34: cc18 ............................. Passed 40.58 sec; Start 53: cc36; 160/412 Test #126: dfccsd-grad1 ..................... Passed 38.81 sec; Start 16: cbs-xtpl-gradient; 161/412 Test #127: dfccsd-t-grad1 ................... Passed 46.08 sec; Start 50: cc33; 162/412 Test #51: cc34 ............................. Passed 34.83 sec; Start 174: dft-omega; 163/412 Test #393: python-cc54 ...................... Passed 51.11 sec; Start 147: dfomp3-1; 164/412 Test #253: omp2-grad2 ....................... Passed 42.59 sec; Start 167: dft-psivar; 165/412 Test #265: opt-lindep-change ................ Passed 27.76 sec; Start 376: pywrap-bfs; 166/412 Test #327: scf-ecp .......................... Passed 33.21 sec; Start 173: dft3; 167/412 Test #52: cc35 ............................. Passed 38.54 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:14800,Test,Test,14800,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,ulti; 150/413 Test #254: omp2-grad2 ....................... Passed 36.93 sec; Start 362: x2c1; 151/413 Test #127: dfccsd-grad1 ..................... Passed 40.30 sec; Start 339: scf6; 152/413 Test #108: dcft-grad4 ....................... Passed 40.75 sec; Start 49: cc32; 153/413 Test #338: scf5 ............................. Passed 41.28 sec; Start 73: cc54; 154/413 Test #24: cc12 ............................. Passed 33.78 sec; Start 2: adc2; 155/413 Test #276: opt8 ............................. Passed 35.88 sec; Start 133: dfmp2-3; 156/413 Test #350: sapt-compare ..................... Passed 45.30 sec; Start 51: cc34; 157/413 Test #198: fd-gradient ...................... Passed 35.36 sec; Start 314: rasci-ne; 158/413 Test #309: pywrap-db1 ....................... Passed 43.56 sec; Start 16: cbs-xtpl-gradient; 159/413 Test #54: cc37 ............................. Passed 33.76 sec; Start 325: sapt7; 160/413 Test #111: dcft3 ............................ Passed 34.81 sec; Start 135: dfmp2-ecp; 161/413 Test #49: cc32 ............................. Passed 23.42 sec; Start 284: opt-irc-3; 162/413 Test #221: mints-benchmark .................. Passed 40.78 sec; Start 131: dfmp2-1; 163/413 Test #51: cc34 ............................. Passed 19.31 sec; Start 376: dft-custom-gga; 164/413 Test #93: ci-multi ......................... Passed 41.19 sec; Start 130: dfccsdat1; 165/413 Test #73: cc54 ............................. Passed 28.42 sec; Start 208: ghosts; 166/413 Test #362: x2c1 ............................. Passed 42.25 sec; Start 344: soscf-dft; 167/413 Test #339: scf6 ............................. Passed 39.32 sec; Start 53: cc36; 168/413 Test #130: dfccsdat1 ........................ Passed 8.87 sec; Start 256: omp2p5-2; 169/413 Test #16: cbs-xtpl-gradient ................ Passed 24.28 sec; Start 266: opt-lindep-change; 170/413 Test #53: cc36 ............................. Passed 6.31 sec; Start 328: scf-ecp; 171/413 Test #256: omp2p5-2 ......................... Passed 8.70 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:15147,Test,Test,15147,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,ummary:; adc = 62.10 sec*proc (2 tests); autotest = 3142.09 sec*proc (26 tests); cart = 16551.08 sec*proc (123 tests); cas = 28.56 sec*proc (1 test); casscf = 215.89 sec*proc (11 tests); cbs = 5376.02 sec*proc (12 tests); cc = 17865.62 sec*proc (65 tests); cdomp2 = 102.86 sec*proc (2 tests); cepa = 362.38 sec*proc (7 tests); ci = 100.54 sec*proc (8 tests); cisd = 147.55 sec*proc (7 tests); cookbook = 443.85 sec*proc (1 test); cubeprop = 24.72 sec*proc (3 tests); dcft = 5201.52 sec*proc (13 tests); df = 3130.41 sec*proc (38 tests); dfccd = 7.27 sec*proc (1 test); dfccd-grad = 29.83 sec*proc (1 test); dfccdl = 4.85 sec*proc (1 test); dfccsd = 16.21 sec*proc (1 test); dfccsd-grad = 94.95 sec*proc (1 test); dfccsd-t-grad = 103.60 sec*proc (1 test); dfccsdat = 43.70 sec*proc (1 test); dfccsdl = 19.45 sec*proc (1 test); dfccsdt = 14.17 sec*proc (1 test); dfep2 = 6.02 sec*proc (2 tests); dfmp2 = 184.52 sec*proc (11 tests); dfomp2 = 1710.82 sec*proc (7 tests); dfomp2.5 = 342.31 sec*proc (4 tests); dfomp3 = 402.50 sec*proc (4 tests); dfscf = 31.82 sec*proc (1 test); dft = 751.03 sec*proc (27 tests); docs = 2.03 sec*proc (2 tests); ecp = 66.38 sec*proc (2 tests); fci = 12.84 sec*proc (2 tests); fcidump = 7.22 sec*proc (1 test); findif = 1626.84 sec*proc (5 tests); fnocc = 231.32 sec*proc (4 tests); freq = 1688.13 sec*proc (7 tests); gradient = 3618.28 sec*proc (21 tests); hessian = 405.24 sec*proc (1 test); json = 20.27 sec*proc (8 tests); longtests = 1495.12 sec*proc (5 tests); mcscf = 10.16 sec*proc (3 tests); minitests = 37.91 sec*proc (3 tests); mints = 45.42 sec*proc (14 tests); misc = 411.66 sec*proc (16 tests); mp2 = 346.75 sec*proc (13 tests); nbody = 982.55 sec*proc (8 tests); numpy = 1.09 sec*proc (1 test); ocepa = 1107.57 sec*proc (6 tests); omp = 1366.11 sec*proc (18 tests); opt = 1412.96 sec*proc (23 tests); prop = 4.22 sec*proc (1 test); properties = 124.70 sec*proc (10 tests); psi = 48757.61 sec*proc (414 tests); psi4numpy = 23.92 sec*proc (6 tests); psimrcc = ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:39899,test,tests,39899,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['test'],['tests']
Testability,ummary:; addon = 189.28 sec*proc (3 tests); cart = 2407.47 sec*proc (55 tests); cas = 138.78 sec*proc (1 test); casscf = 84.46 sec*proc (11 tests); cbs = 262.77 sec*proc (9 tests); cc = 775.63 sec*proc (13 tests); cdomp2 = 41.72 sec*proc (2 tests); ci = 147.62 sec*proc (2 tests); cisd = 6.82 sec*proc (1 test); cubeprop = 28.89 sec*proc (2 tests); d2ints = 58.89 sec*proc (7 tests); dct = 22.51 sec*proc (3 tests); df = 324.56 sec*proc (15 tests); dfccd = 5.11 sec*proc (1 test); dfccsd = 7.31 sec*proc (1 test); dfccsd-grad = 14.46 sec*proc (1 test); dfccsd-t-grad = 13.06 sec*proc (1 test); dfccsdl = 7.10 sec*proc (1 test); dfep2 = 10.99 sec*proc (2 tests); dfmp2 = 198.00 sec*proc (6 tests); dfomp2 = 6.63 sec*proc (1 test); dfomp3 = 66.77 sec*proc (2 tests); dft = 110.67 sec*proc (5 tests); dftd3 = 50.87 sec*proc (1 test); dftd4 = 138.41 sec*proc (2 tests); direct-scf = 4.26 sec*proc (1 test); eom = 26.13 sec*proc (2 tests); extern = 145.89 sec*proc (6 tests); fcidump = 3.94 sec*proc (1 test); findif = 217.30 sec*proc (11 tests); fnocc = 214.81 sec*proc (4 tests); freq = 119.90 sec*proc (9 tests); fsapt = 680.95 sec*proc (7 tests); gradient = 7.40 sec*proc (2 tests); json = 6.72 sec*proc (2 tests); mcscf = 2.04 sec*proc (1 test); minitests = 10.99 sec*proc (2 tests); mints = 14.50 sec*proc (6 tests); misc = 48.60 sec*proc (8 tests); mp2 = 11.54 sec*proc (3 tests); nbody = 140.71 sec*proc (2 tests); noc1 = 1576.77 sec*proc (45 tests); numpy = 1.88 sec*proc (1 test); olccd = 11.77 sec*proc (2 tests); omp = 19.01 sec*proc (4 tests); opt = 18.56 sec*proc (3 tests); properties = 234.60 sec*proc (11 tests); psi = 7147.73 sec*proc (184 tests); psi4numpy = 11.43 sec*proc (4 tests); psimrcc = 19.16 sec*proc (5 tests); python = 164.19 sec*proc (10 tests); pywrap = 102.12 sec*proc (5 tests); quicktests = 7213.94 sec*proc (185 tests); sapt = 2255.37 sec*proc (14 tests); scf = 2018.25 sec*proc (36 tests); smoketests = 1345.56 sec*proc (16 tests); stability = 14.22 sec*proc (3 tests);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:18548,test,test,18548,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['test'],['test']
Testability,umpy-array-interface ............ Passed 0.65 sec; Start 388: python-curve; 303/411 Test #120: dfccd1 ........................... Passed 1.64 sec; Start 253: omp2p5-1; 304/411 Test #3: casscf-fzc-sp .................... Passed 3.57 sec; Start 119: dfcasscf-sp; 305/411 Test #88: cepa2 ............................ Passed 2.64 sec; Start 130: dfmp2-2; 306/411 Test #137: dfmp2-grad4 ...................... Passed 3.41 sec; Start 139: dfomp2-1; 307/411 Test #253: omp2p5-1 ......................... Passed 1.33 sec; Start 136: dfmp2-grad3; 308/411 Test #391: python-mints2 .................... Passed 2.45 sec; Start 284: props1; 309/411 Test #388: python-curve ..................... Passed 2.06 sec; Start 116: ao-dfcasscf-sp; 310/411 Test #119: dfcasscf-sp ...................... Passed 1.71 sec; Start 135: dfmp2-grad2; 311/411 Test #235: mp2-property ..................... Passed 2.60 sec; Start 225: mom; 312/411 Test #130: dfmp2-2 .......................... Passed 1.55 sec; Start 213: mints2; 313/411 Test #136: dfmp2-grad3 ...................... Passed 1.73 sec; Start 397: json-v11-energy; 314/411 Test #139: dfomp2-1 ......................... Passed 1.95 sec; Start 363: zaptn-nh2; 315/411 Test #116: ao-dfcasscf-sp ................... Passed 2.81 sec; Start 201: fnocc3; 316/411 Test #284: props1 ........................... Passed 3.35 sec; Start 224: molden2; 317/411 Test #135: dfmp2-grad2 ...................... Passed 3.18 sec; Start 289: psimrcc-ccsd_t-3; 318/411 Test #213: mints2 ........................... Passed 2.95 sec; Start 343: stability1; 319/411 Test #225: mom .............................. Passed 3.26 sec; Start 121: dfccdl1; 320/411 Test #397: json-v11-energy .................. Passed 2.69 sec; Start 226: mp2-1; 321/411 Test #363: zaptn-nh2 ........................ Passed 2.93 sec; Start 85: cepa0-grad1; 322/411 Test #224: molden2 .......................... Passed 2.15 sec; Start 251: omp2-grad1; 323/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.87 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:29132,Test,Test,29132,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,umpy-array-interface ............ Passed 0.70 sec; Start 240: ocepa-freq1; 238/411 Test #238: nbody-intermediates .............. Passed 21.93 sec; Start 241: ocepa-grad1; 239/411 Test #241: ocepa-grad1 ...................... Passed 14.34 sec; Start 242: ocepa-grad2; 240/411 Test #237: nbody-he-cluster ................. Passed 55.34 sec; Start 243: ocepa1; 241/411 Test #243: ocepa1 ........................... Passed 11.48 sec; Start 244: ocepa2; 242/411 Test #230: mp2-module ....................... Passed 96.52 sec; Start 245: ocepa3; 243/411 Test #162: dft-grad-lr3 ..................... Passed 434.63 sec; Start 246: omp2-1; 244/411 Test #110: dcft4 ............................ Passed 1010.33 sec; Start 247: omp2-2; 245/411 Test #246: omp2-1 ........................... Passed 11.08 sec; Start 248: omp2-3; 246/411 Test #247: omp2-2 ........................... Passed 30.77 sec; Start 249: omp2-4; 247/411 Test #248: omp2-3 ........................... Passed 40.15 sec; Start 250: omp2-5; 248/411 Test #242: ocepa-grad2 ...................... Passed 96.09 sec; Start 251: omp2-grad1; 249/411 Test #245: ocepa3 ........................... Passed 61.30 sec; Start 252: omp2-grad2; 250/411 Test #251: omp2-grad1 ....................... Passed 6.31 sec; Start 253: omp2p5-1; 251/411 Test #253: omp2p5-1 ......................... Passed 8.30 sec; Start 254: omp2p5-2; 252/411 Test #145: dfomp2-grad3 ..................... Passed 779.29 sec; Start 255: omp2p5-grad1; 253/411 Test #255: omp2p5-grad1 ..................... Passed 9.64 sec; Start 256: omp2p5-grad2; 254/411 Test #244: ocepa2 ........................... Passed 93.86 sec; Start 257: omp3-1; 255/411 Test #257: omp3-1 ........................... Passed 4.62 sec; Start 258: omp3-2; 256/411 Test #254: omp2p5-2 ......................... Passed 20.69 sec; Start 259: omp3-3; 257/411 Test #252: omp2-grad2 ....................... Passed 34.44 sec; Start 260: omp3-4; 258/411 Test #258: omp3-2 ........................... Passed 23.68 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:22927,Test,Test,22927,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,umpy-array-interface ............ Passed 0.72 sec; Start 240: ocepa-freq1; 238/411 Test #238: nbody-intermediates .............. Passed 26.47 sec; Start 241: ocepa-grad1; 239/411 Test #155: dft-grad-lr3 ..................... Passed 418.11 sec; Start 242: ocepa-grad2; 240/411 Test #241: ocepa-grad1 ...................... Passed 22.49 sec; Start 243: ocepa1; 241/411 Test #237: nbody-he-cluster ................. Passed 59.84 sec; Start 244: ocepa2; 242/411 Test #243: ocepa1 ........................... Passed 10.32 sec; Start 245: ocepa3; 243/411 Test #110: dcft4 ............................ Passed 1172.39 sec; Start 246: omp2-1; 244/411 Test #246: omp2-1 ........................... Passed 6.44 sec; Start 247: omp2-2; 245/411 Test #230: mp2-module ....................... Passed 128.44 sec; Start 248: omp2-3; 246/411 Test #245: ocepa3 ........................... Passed 50.93 sec; Start 249: omp2-4; 247/411 Test #247: omp2-2 ........................... Passed 15.51 sec; Start 250: omp2-5; 248/411 Test #242: ocepa-grad2 ...................... Passed 86.23 sec; Start 251: omp2-grad1; 249/411 Test #248: omp2-3 ........................... Passed 16.19 sec; Start 252: omp2-grad2; 250/411 Test #251: omp2-grad1 ....................... Passed 3.71 sec; Start 253: omp2p5-1; 251/411 Test #244: ocepa2 ........................... Passed 69.91 sec; Start 254: omp2p5-2; 252/411 Test #253: omp2p5-1 ......................... Passed 3.33 sec; Start 255: omp2p5-grad1; 253/411 Test #255: omp2p5-grad1 ..................... Passed 10.27 sec; Start 256: omp2p5-grad2; 254/411 Test #254: omp2p5-2 ......................... Passed 21.90 sec; Start 257: omp3-1; 255/411 Test #257: omp3-1 ........................... Passed 4.39 sec; Start 258: omp3-2; 256/411 Test #252: omp2-grad2 ....................... Passed 31.33 sec; Start 259: omp3-3; 257/411 Test #249: omp2-4 ........................... Passed 54.33 sec; Start 260: omp3-4; 258/411 Test #250: omp2-5 ........................... Passed 62.81 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:22943,Test,Test,22943,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,"umpy-array-interface ............ Passed 15.57 sec; 406/412 Test #309: pywrap-db3 ....................... Passed 14.49 sec; 407/412 Test #209: matrix1 .......................... Passed 15.24 sec; 408/412 Test #176: docs-dft ......................... Passed 16.24 sec; 409/412 Test #365: options1 ......................... Passed 13.68 sec; 410/412 Test #403: json-schema-1-throws ............. Passed 13.62 sec; 411/412 Test #88: cepa1 ............................ Passed 16.51 sec; 412/412 Test #319: sapt4 ............................ Passed 1885.78 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 85.75 sec*proc (2 tests); autotest = 1081.30 sec*proc (26 tests); cart = 14263.36 sec*proc (123 tests); cas = 59.52 sec*proc (1 test); casscf = 245.49 sec*proc (11 tests); cbs = 978.44 sec*proc (11 tests); cc = 5456.09 sec*proc (65 tests); cdomp2 = 39.91 sec*proc (2 tests); cepa = 180.93 sec*proc (7 tests); ci = 233.38 sec*proc (8 tests); cisd = 294.07 sec*proc (7 tests); cookbook = 58.33 sec*proc (1 test); cubeprop = 77.64 sec*proc (2 tests); dcft = 2278.61 sec*proc (13 tests); df = 1624.44 sec*proc (38 tests); dfccd = 16.01 sec*proc (1 test); dfccd-grad = 27.12 sec*proc (1 test); dfccdl = 16.03 sec*proc (1 test); dfccsd = 16.85 sec*proc (1 test); dfccsd-grad = 16.86 sec*proc (1 test); dfccsd-t-grad = 21.71 sec*proc (1 test); dfccsdat = 46.01 sec*proc (1 test); dfccsdl = 16.94 sec*proc (1 test); dfccsdt = 17.32 sec*proc (1 test); dfep2 = 34.66 sec*proc (2 tests); dfmp2 = 299.94 sec*proc (11 tests); dfomp2 = 703.06 sec*proc (7 tests); dfomp2.5 = 80.33 sec*proc (4 tests); dfomp3 = 113.97 sec*proc (4 tests); dfscf = 159.76 sec*proc (1 test); dft = 1825.64 sec*proc (27 tests); docs = 30.71 sec*proc (2 tests); ecp = 76.81 sec*proc (2 tests); fci = 39.98 sec*proc (2 tests); fcidump = 17.80 sec*proc (1 test); findif = 893.74 sec*proc (5 tests); fnocc = 137.05 sec*proc (4 tests); freq = 902.68 sec*proc (6 tests); gradient = 1170.66 sec*proc (16 tests); jso",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:39047,test,tests,39047,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['test'],['tests']
Testability,umpy-dfmp2 .................. Passed 1.48 sec; Start 130: dfmp2-2; 353/411 Test #355: tu3-h2o-opt ...................... Passed 3.07 sec; Start 356: scf-response1; 354/411 Test #221: mints9 ........................... Passed 1.85 sec; Start 8: castup1; 355/411 Test #345: dfep2-2 .......................... Passed 1.93 sec; Start 395: python-mints13; 356/411 Test #407: skeletondfmp2 .................... Passed 1.37 sec; Start 222: mints10; 357/411 Test #401: json-schema-1-orient ............. Passed 1.61 sec; Start 188: fci-tdm; 358/411 Test #157: dft-grac ......................... Passed 1.74 sec; Start 332: scf-occ; 359/411 Test #130: dfmp2-2 .......................... Passed 1.46 sec; Start 96: cisd-h2o-clpse; 360/411 Test #8: castup1 .......................... Passed 1.19 sec; Start 405: skeleton; 361/411 Test #188: fci-tdm .......................... Passed 0.74 sec; Start 361: x2c2; 362/411 Test #222: mints10 .......................... Passed 1.17 sec; Start 403: json-schema-1-gradient; 363/411 Test #356: scf-response1 .................... Passed 2.11 sec; Start 390: python-mints9; 364/411 Test #395: python-mints13 ................... Passed 1.89 sec; Start 209: mcscf1; 365/411 Test #332: scf-occ .......................... Passed 1.41 sec; Start 383: psi4numpy-rhf-gradient; 366/411 Test #96: cisd-h2o-clpse ................... Passed 1.08 sec; Start 352: stability2; 367/411 Test #405: skeleton ......................... Passed 0.91 sec; Start 102: decontract; 368/411 Test #361: x2c2 ............................. Passed 1.71 sec; Start 311: rasci-h2o; 369/411 Test #209: mcscf1 ........................... Passed 1.19 sec; Start 287: psimrcc-ccsd_t-1; 370/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.30 sec; Start 298: pubchem2; 371/411 Test #403: json-schema-1-gradient ........... Passed 1.78 sec; Start 211: mcscf3; 372/411 Test #352: stability2 ....................... Passed 1.36 sec; Start 333: scf2; 373/411 Test #390: python-mints9 ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:33906,Test,Test,33906,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,umpy-fci; 371/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.52 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #385: psi4numpy-fci .................... Passed 4.41 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.33 sec; Start 388: python-curve; 374/411 Test #240: ocepa-freq1 ...................... Passed 431.50 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 3.42 sec; Start 390: python-mints9; 376/411 Test #375: pywrap-bfs ....................... Passed 25.37 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 1.87 sec; Start 392: python-cc54; 378/411 Test #391: python-mints2 .................... Passed 2.43 sec; Start 393: python-3-index-transforms; 379/411 Test #374: dft-custom-gga ................... Passed 30.91 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.82 sec; Start 396: python-memdfjk; 381/411 Test #178: fsapt1 ........................... Passed 2162.17 sec; Start 397: json-v11-energy; 382/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 398: json-v11-gradient; 383/411 Test #320: sapt6 ............................ Passed 163.49 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.11 sec; Start 400: json-schema-1-ghost; 385/411 Test #397: json-v11-energy .................. Passed 3.25 sec; Start 401: json-schema-1-orient; 386/411 Test #400: json-schema-1-ghost .............. Passed 1.15 sec; Start 402: json-schema-1-throws; 387/411 Test #402: json-schema-1-throws ............. Passed 0.58 sec; Start 403: json-schema-1-gradient; 388/411 Test #393: python-3-index-transforms ........ Passed 10.07 sec; Start 404: json-schema-1-properties; 389/411 Test #399: json-schema-1-energy ............. Passed 3.30 sec; Start 405: skeleton; 390/411 Test #403: json-schema-1-gradient ........... Passed 1.63 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:35718,Test,Test,35718,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,"umpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1772,test,tests,1772,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,1,['test'],['tests']
Testability,un-rohf ............. Passed 1087.82 sec; Start 156: dft-grad-lr3; 6/412 Test #39: cc23 ............................. Passed 1252.44 sec; Start 228: mp2-def2; 7/412 Test #37: cc21 ............................. Passed 1273.54 sec; Start 30: cc14; 8/412 Test #41: cc25 ............................. Passed 1338.20 sec; Start 179: fsapt1; 9/412 Test #395: python-vibanalysis ............... Passed 1362.17 sec; Start 112: dcft5; 10/412 Test #156: dft-grad-lr3 ..................... Passed 428.34 sec; Start 29: cc13d; 11/412 Test #307: pywrap-checkrun-uhf .............. Passed 1529.35 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #305: pywrap-checkrun-rhf .............. Passed 1560.06 sec; Start 360: tu6-cp-ne2; 13/412 Test #146: dfomp2-grad3 ..................... Passed 1580.99 sec; Start 183: isapt1; 14/412 Test #46: cc3 .............................. Passed 1614.45 sec; Start 387: cookbook-rohf-orb-rot; 15/412 Test #301: pywrap-all ....................... Passed 1620.63 sec; Start 45: cc29; 16/412 Test #104: dcft-grad1 ....................... Passed 1653.03 sec; Start 380: cc-module; 17/412 Test #228: mp2-def2 ......................... Passed 409.78 sec; Start 71: cc52; 18/412 Test #25: cc13 ............................. Passed 772.82 sec; Start 32: cc16; 19/412 Test #112: dcft5 ............................ Passed 535.41 sec; Start 282: opt-irc-2; 20/412 Test #30: cc14 ............................. Passed 624.07 sec; Start 11: cbs-delta-energy; 21/412 Test #42: cc26 ............................. Passed 1000.31 sec; Start 113: dcft6; 22/412 Test #71: cc52 ............................. Passed 310.04 sec; Start 18: cbs-xtpl-func; 23/412 Test #183: isapt1 ........................... Passed 405.79 sec; Start 182: fsapt-allterms; 24/412 Test #45: cc29 ............................. Passed 367.98 sec; Start 194: fd-freq-energy-large; 25/412 Test #115: dcft8 ............................ Passed 1028.74 sec; Start 196: fd-freq-gradient-large; 26/412 Test #29: cc13d ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:1861,Test,Test,1861,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,"unc .................... Passed 1324.01 sec; 411/412 Test #179: fsapt1 ........................... Passed 2063.95 sec; 412/412 Test #319: sapt4 ............................ Passed 1882.34 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 70.71 sec*proc (2 tests); autotest = 2082.78 sec*proc (26 tests); cart = 20353.66 sec*proc (123 tests); cas = 63.78 sec*proc (1 test); casscf = 115.98 sec*proc (11 tests); cbs = 2564.15 sec*proc (11 tests); cc = 14415.83 sec*proc (65 tests); cdomp2 = 86.58 sec*proc (2 tests); cepa = 188.90 sec*proc (7 tests); ci = 123.31 sec*proc (8 tests); cisd = 200.90 sec*proc (7 tests); cookbook = 373.24 sec*proc (1 test); cubeprop = 21.39 sec*proc (2 tests); dcft = 5267.53 sec*proc (13 tests); df = 2450.70 sec*proc (38 tests); dfccd = 5.30 sec*proc (1 test); dfccd-grad = 18.35 sec*proc (1 test); dfccdl = 4.43 sec*proc (1 test); dfccsd = 11.22 sec*proc (1 test); dfccsd-grad = 38.81 sec*proc (1 test); dfccsd-t-grad = 46.08 sec*proc (1 test); dfccsdat = 18.08 sec*proc (1 test); dfccsdl = 12.77 sec*proc (1 test); dfccsdt = 8.61 sec*proc (1 test); dfep2 = 6.28 sec*proc (2 tests); dfmp2 = 177.01 sec*proc (11 tests); dfomp2 = 1556.95 sec*proc (7 tests); dfomp2.5 = 142.03 sec*proc (4 tests); dfomp3 = 178.00 sec*proc (4 tests); dfscf = 150.66 sec*proc (1 test); dft = 1457.60 sec*proc (27 tests); docs = 1.47 sec*proc (2 tests); ecp = 69.99 sec*proc (2 tests); fci = 12.53 sec*proc (2 tests); fcidump = 5.16 sec*proc (1 test); findif = 1019.26 sec*proc (5 tests); fnocc = 143.05 sec*proc (4 tests); freq = 1272.87 sec*proc (6 tests); gradient = 2551.58 sec*proc (16 tests); json = 15.79 sec*proc (8 tests); longtests = 3724.28 sec*proc (5 tests); mcscf = 4.46 sec*proc (3 tests); minitests = 80.09 sec*proc (4 tests); mints = 90.36 sec*proc (14 tests); misc = 538.13 sec*proc (16 tests); mp2 = 556.27 sec*proc (13 tests); nbody = 88.86 sec*proc (2 tests); numpy = 0.92 sec*proc (1 test); ocepa = 945.84 sec*proc (6 tests); omp = 639.27 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:39292,test,test,39292,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['test'],['test']
Testability,"unction ............. Passed 1.03 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 55.73 sec*proc (2 tests); autotest = 374.25 sec*proc (26 tests); cart = 8218.29 sec*proc (123 tests); cas = 41.71 sec*proc (1 test); casscf = 36.15 sec*proc (11 tests); cbs = 546.91 sec*proc (10 tests); cc = 1151.91 sec*proc (65 tests); cdomp2 = 5.24 sec*proc (2 tests); cepa = 30.36 sec*proc (7 tests); ci = 79.29 sec*proc (8 tests); cisd = 117.44 sec*proc (7 tests); cookbook = 18.93 sec*proc (1 test); cubeprop = 16.42 sec*proc (2 tests); dcft = 560.31 sec*proc (13 tests); df = 370.25 sec*proc (38 tests); dfccd = 1.39 sec*proc (1 test); dfccd-grad = 2.01 sec*proc (1 test); dfccdl = 1.41 sec*proc (1 test); dfccsd = 1.55 sec*proc (1 test); dfccsd-grad = 3.50 sec*proc (1 test); dfccsd-t-grad = 3.85 sec*proc (1 test); dfccsdat = 2.57 sec*proc (1 test); dfccsdl = 1.64 sec*proc (1 test); dfccsdt = 1.99 sec*proc (1 test); dfep2 = 4.64 sec*proc (2 tests); dfmp2 = 93.43 sec*proc (11 tests); dfomp2 = 61.41 sec*proc (7 tests); dfomp2.5 = 19.21 sec*proc (4 tests); dfomp3 = 18.74 sec*proc (4 tests); dfscf = 120.49 sec*proc (1 test); dft = 1158.52 sec*proc (27 tests); docs = 1.35 sec*proc (2 tests); ecp = 31.03 sec*proc (2 tests); fci = 9.12 sec*proc (2 tests); fcidump = 2.13 sec*proc (1 test); findif = 682.89 sec*proc (5 tests); fnocc = 31.56 sec*proc (4 tests); freq = 541.69 sec*proc (6 tests); gradient = 135.87 sec*proc (16 tests); json = 10.69 sec*proc (8 tests); longtests = 3093.86 sec*proc (5 tests); mcscf = 3.13 sec*proc (3 tests); minitests = 50.90 sec*proc (4 tests); mints = 69.69 sec*proc (14 tests); misc = 340.45 sec*proc (16 tests); mp2 = 408.77 sec*proc (13 tests); nbody = 35.02 sec*proc (2 tests); numpy = 0.74 sec*proc (1 test); ocepa = 87.26 sec*proc (6 tests); omp = 109.60 sec*proc (18 tests); opt = 1008.97 sec*proc (21 tests); plug = 7.54 sec*proc (7 tests); prop = 2.12 sec*proc (1 test); properties = 102.82 sec*proc (10 tests); psi = 13769.08 sec*proc (",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:39152,test,tests,39152,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['test'],['tests']
Testability,unction; 373/411 Test #229: mp2-grad2 ........................ Passed 1.37 sec; Start 220: mints-helper; 374/411 Test #298: pubchem2 ......................... Passed 1.45 sec; Start 222: mints10; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.09 sec; Start 309: pywrap-molecule; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.18 sec; Start 404: json-schema-1-properties; 377/411 Test #411: skeletonwavefunction ............. Passed 0.97 sec; Start 406: skeletonaointegrals; 378/411 Test #398: json-v11-gradient ................ Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.10 sec; Start 334: scf3; 392/411 Test #353: tu1-h2o-energy ................... Passed 1.26 sec; Start 209: mcscf1; 393/411 Test #352: stability2 ....................... Passed 1.16 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:35804,Test,Test,35804,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,undefined symbol error when running test.in,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/issues/675,1,['test'],['test']
Testability,"ung/freebsd-ports/science/psi4/work/psi4-1.6.1/tests/cc1/input.dat"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/testresults.log"" ""/disk-samsung/freebsd-ports/science/psi4/work/psi4-1.6.1"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/tests/cc1/output.dat"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/stage/bin/psi4"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/stage/share/psi4"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/stage/lib/""; Directory: /disk-samsung/freebsd-ports/science/psi4/work/.build/tests/cc1; ""cc1"" start time: Aug 14 22:19 PDT; Output:; ----------------------------------------------------------; Command ['/disk-samsung/freebsd-ports/science/psi4/work/.build/stage/bin/psi4', '/disk-samsung/freebsd-ports/science/psi4/work/psi4-1.6.1/tests/cc1/input.dat', '/disk-samsung/freebsd-ports/science/psi4/work/.build/tests/cc1/output.dat', '-l', '/disk-samsung/freebsd-ports/science/psi4/work/.build/stage/share/psi4'] execution failed: Permission denied; <end of output>; Test time = 0.14 sec; ----------------------------------------------------------; Test Failed.; ""cc1"" end time: Aug 14 22:19 PDT; ""cc1"" time elapsed: 00:00:00; ----------------------------------------------------------. 24/488 Testing: cc10; 24/488 Test: cc10; Command: ""/usr/local/bin/python3.9"" ""/disk-samsung/freebsd-ports/science/psi4/work/psi4-1.6.1/tests/runtest.py"" ""/disk-samsung/freebsd-ports/science/psi4/work/psi4-1.6.1/tests/cc10/input.dat"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/testresults.log"" ""/disk-samsung/freebsd-ports/science/psi4/work/psi4-1.6.1"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/tests/cc10/output.dat"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/stage/bin/psi4"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/stage/share/psi4"" ""/disk-samsung/freebsd-ports/science/psi4/work/.build/stage/lib/""; Directory: /disk-samsung/freebsd-ports/science/psi4/work/.build/tests/cc10; ""cc10"" start time: Aug ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2685:1285,Test,Test,1285,https://psicode.org,https://github.com/psi4/psi4/issues/2685,1,['Test'],['Test']
Testability,up2 .......................... Passed 15.56 sec; Start 15: cbs-xtpl-freq; 254/412 Test #199: freq-isotope2 .................... Passed 15.99 sec; Start 368: scf-hess1; 255/412 Test #10: castup3 .......................... Passed 16.79 sec; Start 227: mp2-1; 256/412 Test #3: casscf-fzc-sp .................... Passed 14.47 sec; Start 133: dfmp2-4; 257/412 Test #158: dfrasscf-sp ...................... Passed 14.90 sec; Start 89: cepa2; 258/412 Test #296: psithon1 ......................... Passed 16.17 sec; Start 125: dfccsdl1; 259/412 Test #271: opt4 ............................. Passed 20.97 sec; Start 256: omp2p5-grad1; 260/412 Test #15: cbs-xtpl-freq .................... Passed 19.08 sec; Start 366: cubeprop-esp; 261/412 Test #227: mp2-1 ............................ Passed 17.39 sec; Start 140: dfomp2-1; 262/412 Test #368: scf-hess1 ........................ Passed 20.68 sec; Start 87: cepa0-grad2; 263/412 Test #89: cepa2 ............................ Passed 15.60 sec; Start 109: dcft2; 264/412 Test #133: dfmp2-4 .......................... Passed 20.55 sec; Start 84: cdomp2-1; 265/412 Test #125: dfccsdl1 ......................... Passed 15.16 sec; Start 244: ocepa1; 266/412 Test #256: omp2p5-grad1 ..................... Passed 15.65 sec; Start 136: dfmp2-grad2; 267/412 Test #140: dfomp2-1 ......................... Passed 15.04 sec; Start 138: dfmp2-grad4; 268/412 Test #109: dcft2 ............................ Passed 14.47 sec; Start 124: dfccsd1; 269/412 Test #87: cepa0-grad2 ...................... Passed 15.61 sec; Start 128: dfccsdt1; 270/412 Test #366: cubeprop-esp ..................... Passed 22.04 sec; Start 191: fci-coverage; 271/412 Test #84: cdomp2-1 ......................... Passed 16.25 sec; Start 4: casscf-semi; 272/412 Test #244: ocepa1 ........................... Passed 15.66 sec; Start 330: scf-guess-read2; 273/412 Test #136: dfmp2-grad2 ...................... Passed 15.20 sec; Start 162: dft-ghost; 274/412 Test #138: dfmp2-grad4 ...................... Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:24571,Test,Test,24571,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,upcast-custom-basis .......... Passed 2.47 sec; Start 334: scf2; 349/412 Test #315: sad1 ............................. Passed 2.76 sec; Start 357: scf-response1; 350/412 Test #350: sapt-sf1 ......................... Passed 1.66 sec; Start 409: skeletonmointegrals; 351/412 Test #407: skeletonaointegrals .............. Passed 1.54 sec; Start 362: x2c2; 352/412 Test #385: psi4numpy-rhf-hessian ............ Passed 3.38 sec; Start 363: x2c3; 353/412 Test #290: psimrcc-ccsd_t-3 ................. Passed 2.33 sec; Start 161: dft-grac; 354/412 Test #406: skeleton ......................... Passed 1.46 sec; Start 189: fci-tdm; 355/412 Test #346: dfep2-2 .......................... Passed 2.56 sec; Start 211: mcscf2; 356/412 Test #214: mints2 ........................... Passed 2.90 sec; Start 353: stability2; 357/412 Test #408: skeletondfmp2 .................... Passed 1.70 sec; Start 382: psi4numpy-dfmp2; 358/412 Test #8: castup1 .......................... Passed 1.72 sec; Start 331: scf-bs; 359/412 Test #289: psimrcc-ccsd_t-2 ................. Passed 2.32 sec; Start 299: pubchem2; 360/412 Test #97: cisd-h2o-clpse ................... Passed 1.62 sec; Start 404: json-schema-1-gradient; 361/412 Test #409: skeletonmointegrals .............. Passed 1.49 sec; Start 288: psimrcc-ccsd_t-1; 362/412 Test #334: scf2 ............................. Passed 1.76 sec; Start 223: mints10; 363/412 Test #189: fci-tdm .......................... Passed 1.78 sec; Start 391: python-mints9; 364/412 Test #161: dft-grac ......................... Passed 1.88 sec; Start 222: mints9; 365/412 Test #362: x2c2 ............................. Passed 2.13 sec; Start 396: python-mints13; 366/412 Test #357: scf-response1 .................... Passed 2.24 sec; Start 411: skeletonsointegrals; 367/412 Test #211: mcscf2 ........................... Passed 1.93 sec; Start 354: tu1-h2o-energy; 368/412 Test #353: stability2 ....................... Passed 1.90 sec; Start 103: decontract; 369/412 Test #331: scf-bs ...........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:33710,Test,Test,33710,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,upcoming changes:. - [x] formatting request; - [x] modifying tests; - [x] NL_DISPERSION_PARAMETERS name; - [x] partially avoiding EmpiricalDispersion,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-385183176:61,test,tests,61,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-385183176,1,['test'],['tests']
Testability,"uple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:1087,test,test,1087,https://psicode.org,https://github.com/psi4/psi4/pull/2446,1,['test'],['test']
Testability,"urce, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870:1065,test,testresults,1065,https://psicode.org,https://github.com/psi4/psi4/issues/1870,1,['test'],['testresults']
Testability,"urpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] If you call `psi4.set_output_file()` (note that this is the usual fancy one, not the low-level `psi4.core.set_output_file()`), that file will have a psi4 header so suitable for cclib parsing. closes #2893; - [x] Sometimes you don't want psi4 managing the logging. Added a `inherit_loglevel` to exe and set_output_file so that psi4 doesn't tamper with loglevel. @bennybp request. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] we always had `set_output_file` and `print_header` separate, but I'm guessing that that was originally b/c former in C++ and latter in Py. Now that we have the former in python to set up logging, too, it's reasonable to combine them, I think. Note that in exe, we do need to set up threads & mem first so that header stats are as correct as possible.; - [x] I set it up so that the header prints whenever a new file is opened. seemed reasonable. had to rewire core.cc calls to take notice of ""stdout"". Any problem with that?; - [x] `-o stdout` now gets a logging file `stdout.log` bug? feature?; - [x] a plain `import psi4; psi4.energy()` is still going to print to screen w/o header. `import psi4; set_output_file(""asdf""); psi4.energy()` newly has a header. DDD calcs still have repetitive header, but it's no worse that before. ## Questions; - [x] @AlexHeide, does removing those two `root` lines in `psi4.__init__.py` mess up your optking logging?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932:1059,log,logging,1059,https://psicode.org,https://github.com/psi4/psi4/pull/2932,1,['log'],['logging']
Testability,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:1995,Test,Tests,1995,https://psicode.org,https://github.com/psi4/psi4/pull/2132,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"us GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_E",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1312,TEST,TEST,1312,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['TEST'],['TEST']
Testability,"uster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:7499,test,tests,7499,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['test'],['tests']
Testability,uster; 109/412 Test #393: python-cc54 ...................... Passed 54.46 sec; Start 67: cc49; 110/412 Test #262: omp3-5 ........................... Passed 128.11 sec; Start 274: opt7; 111/412 Test #2: adc2 ............................. Passed 42.65 sec; Start 143: dfomp2-4; 112/412 Test #303: pywrap-cbs1 ...................... Passed 211.04 sec; Start 69: cc50; 113/412 Test #107: dcft-grad4 ....................... Passed 45.68 sec; Start 250: omp2-4; 114/412 Test #361: x2c1 ............................. Passed 82.35 sec; Start 313: rasci-ne; 115/412 Test #245: ocepa2 ........................... Passed 113.03 sec; Start 324: sapt7; 116/412 Test #68: cc4a ............................. Passed 71.90 sec; Start 134: dfmp2-ecp; 117/412 Test #238: nbody-he-cluster ................. Passed 58.29 sec; Start 130: dfmp2-1; 118/412 Test #65: cc47 ............................. Passed 69.48 sec; Start 80: cc8b; 119/412 Test #35: cc19 ............................. Passed 71.41 sec; Start 108: dcft1; 120/412 Test #60: cc42 ............................. Passed 90.67 sec; Start 338: scf6; 121/412 Test #67: cc49 ............................. Passed 66.95 sec; Start 207: ghosts; 122/412 Test #300: pywrap-alias ..................... Passed 91.22 sec; Start 337: scf5; 123/412 Test #143: dfomp2-4 ......................... Passed 43.57 sec; Start 66: cc48; 124/412 Test #274: opt7 ............................. Passed 53.71 sec; Start 343: soscf-dft; 125/412 Test #324: sapt7 ............................ Passed 35.25 sec; Start 141: dfomp2-2; 126/412 Test #313: rasci-ne ......................... Passed 40.47 sec; Start 56: cc39; 127/412 Test #69: cc50 ............................. Passed 52.28 sec; Start 375: dft-custom-gga; 128/412 Test #134: dfmp2-ecp ........................ Passed 36.52 sec; Start 152: dfomp2p5-2; 129/412 Test #21: cc1 .............................. Passed 100.25 sec; Start 195: fd-freq-gradient; 130/412 Test #130: dfmp2-1 .......................... Passed 35.57 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:11423,Test,Test,11423,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,uster; 116/411 Test #206: ghosts ........................... Passed 37.33 sec; Start 64: cc47; 117/411 Test #34: cc19 ............................. Passed 105.53 sec; Start 151: dfomp2p5-2; 118/411 Test #73: cc55 ............................. Passed 109.40 sec; Start 55: cc39; 119/411 Test #63: cc46 ............................. Passed 85.23 sec; Start 323: sapt7; 120/411 Test #237: nbody-he-cluster ................. Passed 65.52 sec; Start 67: cc4a; 121/411 Test #323: sapt7 ............................ Passed 32.27 sec; Start 129: dfmp2-1; 122/411 Test #64: cc47 ............................. Passed 86.29 sec; Start 276: opt11; 123/411 Test #261: omp3-5 ........................... Passed 157.82 sec; Start 106: dcft-grad4; 124/411 Test #256: omp2p5-grad2 ..................... Passed 106.36 sec; Start 78: cc8a; 125/411 Test #55: cc39 ............................. Passed 61.61 sec; Start 273: opt7; 126/411 Test #129: dfmp2-1 .......................... Passed 33.05 sec; Start 80: cc8c; 127/411 Test #151: dfomp2p5-2 ....................... Passed 82.30 sec; Start 360: x2c1; 128/411 Test #67: cc4a ............................. Passed 45.28 sec; Start 337: scf6; 129/411 Test #106: dcft-grad4 ....................... Passed 39.15 sec; Start 1: adc1; 130/411 Test #276: opt11 ............................ Passed 56.48 sec; Start 56: cc4; 131/411 Test #78: cc8a ............................. Passed 47.51 sec; Start 342: soscf-dft; 132/411 Test #337: scf6 ............................. Passed 35.45 sec; Start 374: dft-custom-gga; 133/411 Test #360: x2c1 ............................. Passed 37.74 sec; Start 71: cc53; 134/411 Test #80: cc8c ............................. Passed 43.04 sec; Start 263: omp3-grad2; 135/411 Test #273: opt7 ............................. Passed 48.34 sec; Start 49: cc33; 136/411 Test #1: adc1 ............................. Passed 24.91 sec; Start 336: scf5; 137/411 Test #342: soscf-dft ........................ Passed 32.27 sec; Start 20: cc1; 138/411 Test #374,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:11885,Test,Test,11885,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,ustom-dhdf .................. Passed 101.66 sec; Start 70: cc51; 62/412 Test #194: fd-freq-energy-large ............. Passed 554.36 sec; Start 19: cbs-xtpl-nbody; 63/412 Test #31: cc15 ............................. Passed 28.61 sec; Start 318: sapt3; 64/412 Test #76: cc6 .............................. Passed 69.60 sec; Start 108: dcft1; 65/412 Test #326: scf-bz2 .......................... Passed 138.38 sec; Start 293: psimrcc-fd-freq2; 66/412 Test #108: dcft1 ............................ Passed 21.44 sec; Start 193: fd-freq-energy; 67/412 Test #182: fsapt-allterms ................... Passed 599.68 sec; Start 320: sapt5; 68/412 Test #19: cbs-xtpl-nbody ................... Passed 51.30 sec; Start 157: dfomp2p5-grad2; 69/412 Test #280: opt14 ............................ Passed 85.55 sec; Start 150: dfomp3-grad2; 70/412 Test #70: cc51 ............................. Passed 72.72 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 79.59 sec; Start 245: ocepa2; 72/412 Test #206: frac-traverse .................... Passed 233.30 sec; Start 261: omp3-4; 73/412 Test #318: sapt3 ............................ Passed 83.47 sec; Start 251: omp2-5; 74/412 Test #157: dfomp2p5-grad2 ................... Passed 32.79 sec; Start 20: cbs-xtpl-wrapper; 75/412 Test #150: dfomp3-grad2 ..................... Passed 42.64 sec; Start 62: cc44; 76/412 Test #193: fd-freq-energy ................... Passed 70.15 sec; Start 243: ocepa-grad2; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.91 sec; Start 205: frac-ip-fitting; 78/412 Test #320: sapt5 ............................ Passed 79.17 sec; Start 264: omp3-grad2; 79/412 Test #44: cc28 ............................. Passed 53.16 sec; Start 250: omp2-4; 80/412 Test #245: ocepa2 ........................... Passed 62.18 sec; Start 58: cc40; 81/412 Test #261: omp3-4 ........................... Passed 58.04 sec; Start 65: cc47; 82/412 Test #251: omp2-5 ........................... Passed 49.94 sec; Start 168: dft,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:7029,Test,Test,7029,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,ustom-gga ................... Passed 32.62 sec; Start 166: dft-psivar; 176/411 Test #342: soscf-dft ........................ Passed 31.45 sec; Start 90: cepa1; 177/411 Test #196: fd-gradient ...................... Passed 28.19 sec; Start 128: dfccsdat1; 178/411 Test #89: cepa3 ............................ Passed 11.27 sec; Start 346: sapt-dft1; 179/411 Test #258: omp3-2 ........................... Passed 18.17 sec; Start 163: dft-freq; 180/411 Test #326: scf-ecp .......................... Passed 28.23 sec; Start 194: fd-freq-gradient; 181/411 Test #90: cepa1 ............................ Passed 8.51 sec; Start 122: dfccd-grad1; 182/411 Test #274: opt8 ............................. Passed 32.60 sec; Start 277: opt12; 183/411 Test #1: adc1 ............................. Passed 23.32 sec; Start 7: casscf-sp; 184/411 Test #128: dfccsdat1 ........................ Passed 13.69 sec; Start 172: dft3; 185/411 Test #272: opt6 ............................. Passed 23.73 sec; Start 138: dfmp2-grad5; 186/411 Test #122: dfccd-grad1 ...................... Passed 7.89 sec; Start 238: nbody-intermediates; 187/411 Test #375: pywrap-bfs ....................... Passed 24.75 sec; Start 189: fci-tdm-2; 188/411 Test #264: opt-lindep-change ................ Passed 27.59 sec; Start 248: omp2-3; 189/411 Test #173: dft-omega ........................ Passed 25.76 sec; Start 105: dcft-grad3; 190/411 Test #159: dft-b2plyp ....................... Passed 24.94 sec; Start 267: opt2; 191/411 Test #7: casscf-sp ........................ Passed 7.94 sec; Start 202: fnocc4; 192/411 Test #166: dft-psivar ....................... Passed 24.34 sec; Start 358: tu5-sapt; 193/411 Test #194: fd-freq-gradient ................. Passed 15.52 sec; Start 275: opt9; 194/411 Test #248: omp2-3 ........................... Passed 7.76 sec; Start 282: opt-irc-3; 195/411 Test #138: dfmp2-grad5 ...................... Passed 11.58 sec; Start 322: sapt-dft-lrc; 196/411 Test #346: sapt-dft1 ........................ Passed 23.02 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:17437,Test,Test,17437,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,"ustom-mgga .................. Passed 166.49 sec; 410/411 Test #318: sapt4 ............................ Passed 1938.21 sec; 411/411 Test #178: fsapt1 ........................... Passed 2049.77 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 65.93 sec*proc (2 tests); autotest = 1184.25 sec*proc (26 tests); cart = 12809.92 sec*proc (123 tests); cas = 66.32 sec*proc (1 test); casscf = 84.85 sec*proc (11 tests); cbs = 1299.63 sec*proc (10 tests); cc = 4877.58 sec*proc (65 tests); cdomp2 = 87.04 sec*proc (2 tests); cepa = 237.74 sec*proc (7 tests); ci = 124.43 sec*proc (8 tests); cisd = 192.72 sec*proc (7 tests); cookbook = 74.81 sec*proc (1 test); cubeprop = 21.02 sec*proc (2 tests); dcft = 2168.02 sec*proc (13 tests); df = 1323.98 sec*proc (38 tests); dfccd = 1.99 sec*proc (1 test); dfccd-grad = 11.53 sec*proc (1 test); dfccdl = 2.32 sec*proc (1 test); dfccsd = 6.96 sec*proc (1 test); dfccsd-grad = 23.04 sec*proc (1 test); dfccsd-t-grad = 20.20 sec*proc (1 test); dfccsdat = 13.07 sec*proc (1 test); dfccsdl = 9.39 sec*proc (1 test); dfccsdt = 5.62 sec*proc (1 test); dfep2 = 5.95 sec*proc (2 tests); dfmp2 = 144.08 sec*proc (11 tests); dfomp2 = 610.26 sec*proc (7 tests); dfomp2.5 = 93.44 sec*proc (4 tests); dfomp3 = 106.67 sec*proc (4 tests); dfscf = 143.01 sec*proc (1 test); dft = 1409.77 sec*proc (27 tests); docs = 1.24 sec*proc (2 tests); ecp = 41.60 sec*proc (2 tests); fci = 13.45 sec*proc (2 tests); fcidump = 9.42 sec*proc (1 test); findif = 895.26 sec*proc (5 tests); fnocc = 124.54 sec*proc (4 tests); freq = 968.32 sec*proc (6 tests); gradient = 1118.69 sec*proc (16 tests); json = 18.01 sec*proc (8 tests); longtests = 3642.49 sec*proc (5 tests); mcscf = 5.05 sec*proc (3 tests); minitests = 64.06 sec*proc (4 tests); mints = 89.98 sec*proc (14 tests); misc = 563.82 sec*proc (16 tests); mp2 = 676.55 sec*proc (13 tests); nbody = 107.79 sec*proc (2 tests); numpy = 0.80 sec*proc (1 test); ocepa = 691.29 sec*proc (6 tests); omp = 863.37 sec*pro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:39168,test,test,39168,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['test'],['test']
Testability,"ut.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT {; -> 1393	 _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < size(), ""vector[] index out of bounds"");; 1394	 return this->__begin_[__n];; 1395	}; 1396	; Target 0: (python) stopped.; (lldb) bt; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); * frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; frame #1: 0x00000001196d0a7c core.cpython-312-darwin.so`psi::BasisSet::update_l2_shells(this=0x00000001013e5128, embed_normalization=true) at basisset.cc:876:80; ```; - [x] For now GHA has both Intel and Silicon runners, so might as well test both. The Eco runners are also running ctest quick for now to get some regular testing in since those aren't covered by Azure. ; - [x] add adcc and forte tests to smoke. forte not tested in ecosystem yet.; - [x] fix docs GHA by forgiving FixedSize; - [x] fix docs again by restraining sphinx<8 b/c of an interaction with documenting pydantic v1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:2731,test,test,2731,https://psicode.org,https://github.com/psi4/psi4/pull/3194,7,"['Test', 'test']","['Tests', 'test', 'tested', 'testing', 'tests']"
Testability,"ut>; Test time = 132.94 sec; ----------------------------------------------------------; Test Failed.; ""sapt4"" end time: Feb 15 13:15 CET; ""sapt4"" time elapsed: 00:02:12; ----------------------------------------------------------. ```. For `pywrap-opt-sowreap`:. ```; 255/305 Testing: pywrap-opt-sowreap; 255/305 Test: pywrap-opt-sowreap; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/pywrap-opt-sowreap/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""true"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap; ""pywrap-opt-sowreap"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat; Traceback (most recent call last):; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 127, in <module>; main(*sys.argv[1:]); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 106, in main; files_list,master_in,master_out= sowList(first_output); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 31, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:3369,test,tests,3369,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['test'],['tests']
Testability,"utdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; =========================================================================================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8014,Test,TestComparisonError,8014,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['Test'],['TestComparisonError']
Testability,v ..................... Passed 7.43 sec; Start 271: opt3; 320/413 Test #404: json-schema-1-throws ............. Passed 0.63 sec; Start 235: mp3-grad1; 321/413 Test #255: omp2p5-1 ......................... Passed 6.33 sec; Start 119: dfcasscf-sa-sp; 322/413 Test #406: json-schema-1-properties ......... Passed 1.25 sec; Start 386: psi4numpy-rhf-hessian; 323/413 Test #408: skeletonaointegrals .............. Passed 1.34 sec; Start 341: scf-property; 324/413 Test #231: mp2-grad2 ........................ Passed 3.52 sec; Start 86: cepa0-grad1; 325/413 Test #410: skeletonmointegrals .............. Passed 1.84 sec; Start 181: fsapt2; 326/413 Test #259: omp3-1 ........................... Passed 4.50 sec; Start 286: props1; 327/413 Test #192: fci-coverage ..................... Passed 8.25 sec; Start 227: mom; 328/413 Test #273: opt5 ............................. Passed 3.85 sec; Start 173: dft2; 329/413 Test #226: molden2 .......................... Passed 5.27 sec; Start 412: skeletonsointegrals; 330/413 Test #312: rasci-c2-active .................. Passed 5.68 sec; Start 118: ao-dfcasscf-sp; 331/413 Test #235: mp3-grad1 ........................ Passed 3.04 sec; Start 357: tu3-h2o-opt; 332/413 Test #86: cepa0-grad1 ...................... Passed 2.73 sec; Start 413: skeletonwavefunction; 333/413 Test #386: psi4numpy-rhf-hessian ............ Passed 3.40 sec; Start 230: mp2-grad1; 334/413 Test #412: skeletonsointegrals .............. Passed 1.68 sec; Start 383: psi4numpy-dfmp2; 335/413 Test #271: opt3 ............................. Passed 4.53 sec; Start 237: mp2-property; 336/413 Test #333: scf1 ............................. Passed 4.97 sec; Start 365: zaptn-nh2; 337/413 Test #119: dfcasscf-sa-sp ................... Passed 4.83 sec; Start 346: dfep2-1; 338/413 Test #413: skeletonwavefunction ............. Passed 1.70 sec; Start 138: dfmp2-grad3; 339/413 Test #286: props1 ........................... Passed 3.90 sec; Start 6: ao-casscf-sp; 340/413 Test #227: mom ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:31068,Test,Test,31068,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,v/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c SKIPPED [ 59%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED [ 72%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]; ============================================================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:2741,test,tests,2741,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['test'],['tests']
Testability,v11-energy .................. Passed 2.11 sec; Start 161: dft-grac; 343/412 Test #364: zaptn-nh2 ........................ Passed 3.07 sec; Start 362: x2c2; 344/412 Test #204: frac ............................. Passed 2.10 sec; Start 363: x2c3; 345/412 Test #272: opt5 ............................. Passed 2.19 sec; Start 117: ao-dfcasscf-sp; 346/412 Test #402: json-schema-1-orient ............. Passed 2.12 sec; Start 8: castup1; 347/412 Test #222: mints9 ........................... Passed 2.38 sec; Start 247: omp2-1; 348/412 Test #289: psimrcc-ccsd_t-2 ................. Passed 1.96 sec; Start 97: cisd-h2o-clpse; 349/412 Test #121: dfccd1 ........................... Passed 2.49 sec; Start 329: scf-upcast-custom-basis; 350/412 Test #235: mp3-grad2 ........................ Passed 2.65 sec; Start 229: mp2-grad1; 351/412 Test #396: python-mints13 ................... Passed 2.26 sec; Start 299: pubchem2; 352/412 Test #161: dft-grac ......................... Passed 1.98 sec; Start 211: mcscf2; 353/412 Test #333: scf-occ .......................... Passed 2.58 sec; Start 331: scf-bs; 354/412 Test #362: x2c2 ............................. Passed 2.41 sec; Start 404: json-schema-1-gradient; 355/412 Test #234: mp3-grad1 ........................ Passed 2.93 sec; Start 408: skeletondfmp2; 356/412 Test #86: cepa0-grad1 ...................... Passed 3.26 sec; Start 288: psimrcc-ccsd_t-1; 357/412 Test #363: x2c3 ............................. Passed 2.63 sec; Start 103: decontract; 358/412 Test #400: json-schema-1-energy ............. Passed 4.01 sec; Start 350: sapt-sf1; 359/412 Test #8: castup1 .......................... Passed 2.80 sec; Start 221: mints-helper; 360/412 Test #329: scf-upcast-custom-basis .......... Passed 2.62 sec; Start 381: psi4numpy-cphf; 361/412 Test #299: pubchem2 ......................... Passed 2.35 sec; Start 354: tu1-h2o-energy; 362/412 Test #117: ao-dfcasscf-sp ................... Passed 3.58 sec; Start 379: mints12; 363/412 Test #97: cisd-h2o-clpse .........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:33118,Test,Test,33118,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,"v11-gradient ................ Passed 1.11 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 2.00 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.09 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.55 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.65 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.32 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.08 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.10 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 1.17 sec; Start 407: skeletondfmp2; 407/411 Test #407: skeletondfmp2 .................... Passed 1.29 sec; Start 408: skeletonmointegrals; 408/411 Test #408: skeletonmointegrals .............. Passed 1.22 sec; Start 409: skeletonscf; 409/411 Test #409: skeletonscf ...................... Passed 0.72 sec; Start 410: skeletonsointegrals; 410/411 Test #410: skeletonsointegrals .............. Passed 1.01 sec; Start 411: skeletonwavefunction; 411/411 Test #411: skeletonwavefunction ............. Passed 1.03 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 55.73 sec*proc (2 tests); autotest = 374.25 sec*proc (26 tests); cart = 8218.29 sec*proc (123 tests); cas = 41.71 sec*proc (1 test); casscf = 36.15 sec*proc (11 tests); cbs = 546.91 sec*proc (10 tests); cc = 1151.91 sec*proc (65 tests); cdomp2 = 5.24 sec*proc (2 tests); cepa = 30.36 sec*proc (7 tests); ci = 79.29 sec*proc (8 tests); cisd = 117.44 sec*proc (7 tests); cookbook = 18.93 sec*proc (1 test); cubeprop = 16.42 sec*proc (2 tests); dcft = 560.31 sec*proc (13 tests); df = 370.25 sec*proc (38 tests); dfccd = 1.39 sec*proc (1 test); dfccd-grad =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:37828,Test,Test,37828,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,"v11-gradient ................ Passed 1.15 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 1.84 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.05 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.49 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.45 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.90 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.11 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 0.98 sec; Start 407: skeletondfmp2; 407/411 Test #407: skeletondfmp2 .................... Passed 1.33 sec; Start 408: skeletonmointegrals; 408/411 Test #408: skeletonmointegrals .............. Passed 1.07 sec; Start 409: skeletonscf; 409/411 Test #409: skeletonscf ...................... Passed 0.68 sec; Start 410: skeletonsointegrals; 410/411 Test #410: skeletonsointegrals .............. Passed 1.01 sec; Start 411: skeletonwavefunction; 411/411 Test #411: skeletonwavefunction ............. Passed 0.95 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 59.40 sec*proc (2 tests); autotest = 413.88 sec*proc (26 tests); cart = 8685.75 sec*proc (123 tests); cas = 42.49 sec*proc (1 test); casscf = 39.18 sec*proc (11 tests); cbs = 636.82 sec*proc (10 tests); cc = 1337.69 sec*proc (65 tests); cdomp2 = 6.18 sec*proc (2 tests); cepa = 34.84 sec*proc (7 tests); ci = 81.27 sec*proc (8 tests); cisd = 132.02 sec*proc (7 tests); cookbook = 33.29 sec*proc (1 test); cubeprop = 17.72 sec*proc (2 tests); dcft = 859.31 sec*proc (13 tests); df = 444.10 sec*proc (38 tests); dfccd = 1.41 sec*proc (1 test); dfccd-grad =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:37857,Test,Test,37857,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,v2rdm_casscf-v2rdm tests failing,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/905:19,test,tests,19,https://psicode.org,https://github.com/psi4/psi4/issues/905,1,['test'],['tests']
Testability,"v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmark",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:3247,test,tests,3247,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['test'],['tests']
Testability,"various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1321,TEST,TEST,1321,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['TEST'],['TEST']
Testability,vcrit ......... Passed 16.70 sec; Start 37: cc22; 184/411 Test #138: dfmp2-grad5 ...................... Passed 14.87 sec; Start 290: psimrcc-ccsd_t-4; 185/411 Test #128: dfccsdat1 ........................ Passed 9.43 sec; Start 165: dft-grad2; 186/411 Test #194: fd-freq-gradient ................. Passed 17.08 sec; Start 392: python-cc54; 187/411 Test #177: extern2 .......................... Passed 18.26 sec; Start 238: nbody-intermediates; 188/411 Test #37: cc22 ............................. Passed 12.78 sec; Start 160: dft-grad-lr1; 189/411 Test #315: sapt1 ............................ Passed 17.58 sec; Start 313: rasscf-sp; 190/411 Test #392: python-cc54 ...................... Passed 11.33 sec; Start 77: cc8; 191/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.21 sec; Start 321: sapt-dft-api; 192/411 Test #282: opt-irc-3 ........................ Passed 23.31 sec; Start 109: dcft3; 193/411 Test #165: dft-grad2 ........................ Passed 16.00 sec; Start 258: omp3-2; 194/411 Test #313: rasscf-sp ........................ Passed 11.33 sec; Start 50: cc34; 195/411 Test #238: nbody-intermediates .............. Passed 15.14 sec; Start 62: cc45; 196/411 Test #160: dft-grad-lr1 ..................... Passed 16.44 sec; Start 89: cepa3; 197/411 Test #321: sapt-dft-api ..................... Passed 15.73 sec; Start 275: opt9; 198/411 Test #109: dcft3 ............................ Passed 16.50 sec; Start 169: dft-vv10; 199/411 Test #50: cc34 ............................. Passed 14.31 sec; Start 218: mints8; 200/411 Test #258: omp3-2 ........................... Passed 18.14 sec; Start 52: cc36; 201/411 Test #62: cc45 ............................. Passed 17.06 sec; Start 350: dft-custom; 202/411 Test #89: cepa3 ............................ Passed 15.33 sec; Start 53: cc37; 203/411 Test #77: cc8 .............................. Passed 26.32 sec; Start 48: cc32; 204/411 Test #169: dft-vv10 ......................... Passed 15.55 sec; Start 296: psithon2; 205/411 Test #21,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:18124,Test,Test,18124,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:5552,Test,Test,5552,https://psicode.org,https://github.com/psi4/psi4/issues/2178,2,['Test'],['Test']
Testability,ve; 382/411 Test #385: psi4numpy-fci .................... Passed 4.83 sec; Start 389: python-pubchem; 383/411 Test #375: pywrap-bfs ....................... Passed 24.54 sec; Start 390: python-mints9; 384/411 Test #388: python-curve ..................... Passed 3.58 sec; Start 391: python-mints2; 385/411 Test #390: python-mints9 .................... Passed 1.95 sec; Start 392: python-cc54; 386/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 393: python-3-index-transforms; 387/411 Test #304: pywrap-checkrun-rhf .............. Passed 379.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.90 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 1.11 sec; Start 397: json-v11-energy; 390/411 Test #392: python-cc54 ...................... Passed 8.91 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 9.59 sec; Start 399: json-schema-1-energy; 392/411 Test #397: json-v11-energy .................. Passed 4.11 sec; Start 400: json-schema-1-ghost; 393/411 Test #398: json-v11-gradient ................ Passed 2.70 sec; Start 401: json-schema-1-orient; 394/411 Test #400: json-schema-1-ghost .............. Passed 1.16 sec; Start 402: json-schema-1-throws; 395/411 Test #402: json-schema-1-throws ............. Passed 0.55 sec; Start 403: json-schema-1-gradient; 396/411 Test #401: json-schema-1-orient ............. Passed 2.34 sec; Start 404: json-schema-1-properties; 397/411 Test #399: json-schema-1-energy ............. Passed 2.80 sec; Start 405: skeleton; 398/411 Test #403: json-schema-1-gradient ........... Passed 1.54 sec; Start 406: skeletonaointegrals; 399/411 Test #404: json-schema-1-properties ......... Passed 1.27 sec; Start 407: skeletondfmp2; 400/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 408: skeletonmointegrals; 401/411 Test #406: skeletonaointegrals .............. Passed 1.33 sec; Start 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:36615,Test,Test,36615,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,"vefunction; 404/411 Test #408: skeletonmointegrals .............. Passed 1.54 sec; 405/411 Test #410: skeletonsointegrals .............. Passed 1.33 sec; 406/411 Test #411: skeletonwavefunction ............. Passed 1.22 sec; 407/411 Test #379: cc-module ........................ Passed 171.95 sec; 408/411 Test #306: pywrap-checkrun-uhf .............. Passed 713.66 sec; 409/411 Test #386: cookbook-rohf-orb-rot ............ Passed 161.04 sec; 410/411 Test #300: pywrap-all ....................... Passed 782.90 sec; 411/411 Test #304: pywrap-checkrun-rhf .............. Passed 743.15 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 69.47 sec*proc (2 tests); autotest = 2116.22 sec*proc (26 tests); cart = 16612.59 sec*proc (123 tests); cas = 62.15 sec*proc (1 test); casscf = 157.07 sec*proc (11 tests); cbs = 2510.55 sec*proc (10 tests); cc = 10612.98 sec*proc (65 tests); cdomp2 = 81.08 sec*proc (2 tests); cepa = 296.50 sec*proc (7 tests); ci = 125.30 sec*proc (8 tests); cisd = 203.11 sec*proc (7 tests); cookbook = 161.04 sec*proc (1 test); cubeprop = 22.05 sec*proc (2 tests); dcft = 3092.73 sec*proc (13 tests); df = 1676.00 sec*proc (38 tests); dfccd = 5.43 sec*proc (1 test); dfccd-grad = 23.87 sec*proc (1 test); dfccdl = 5.84 sec*proc (1 test); dfccsd = 12.87 sec*proc (1 test); dfccsd-grad = 48.16 sec*proc (1 test); dfccsd-t-grad = 58.36 sec*proc (1 test); dfccsdat = 27.90 sec*proc (1 test); dfccsdl = 18.85 sec*proc (1 test); dfccsdt = 20.66 sec*proc (1 test); dfep2 = 6.65 sec*proc (2 tests); dfmp2 = 160.87 sec*proc (11 tests); dfomp2 = 668.52 sec*proc (7 tests); dfomp2.5 = 158.90 sec*proc (4 tests); dfomp3 = 194.44 sec*proc (4 tests); dfscf = 140.97 sec*proc (1 test); dft = 1440.34 sec*proc (27 tests); docs = 1.27 sec*proc (2 tests); ecp = 46.88 sec*proc (2 tests); fci = 17.32 sec*proc (2 tests); fcidump = 6.53 sec*proc (1 test); findif = 938.98 sec*proc (5 tests); fnocc = 129.35 sec*proc (4 tests); freq = 994.16 sec*proc (6 tests); gradient =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:38819,test,tests,38819,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['test'],['tests']
Testability,"ver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest control",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:2664,test,tests,2664,https://psicode.org,https://github.com/psi4/psi4/pull/627,2,['test'],['tests']
Testability,"ver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.`. Hence, in my high throughput script I provided a placeholder in this field if the DDX_SOLVENT_EPSILON option is selected:. ```; #check if dialetric constant is specified or not; if settings.ddx_settings.epsilon is not None:; print('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Required option 'DDX_SOLVENT' is missing.""); elif solvent not in pyddx.data.solvent_epsilon:; raise ValidationError(""Unknown solvent {solvent}.""); else:; solvent_epsilon = pyddx.data.solvent_epsilon[solvent]; ```; I have built a minimal worked example of the problem below where the issue is again r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:1484,test,testcase,1484,https://psicode.org,https://github.com/psi4/psi4/issues/3119,1,['test'],['testcase']
Testability,verage ..................... Passed 2.67 sec; Start 94: cisd-h2o+-1; 283/411 Test #108: dcft2 ............................ Passed 1.25 sec; Start 246: omp2-1; 284/411 Test #99: cisd-sp-2 ........................ Passed 4.22 sec; Start 95: cisd-h2o+-2; 285/411 Test #246: omp2-1 ........................... Passed 1.31 sec; Start 243: ocepa1; 286/411 Test #331: scf1 ............................. Passed 3.74 sec; Start 376: pywrap-align; 287/411 Test #171: dft2 ............................. Passed 4.47 sec; Start 241: ocepa-grad1; 288/411 Test #94: cisd-h2o+-1 ...................... Passed 4.05 sec; Start 120: dfccd1; 289/411 Test #243: ocepa1 ........................... Passed 1.92 sec; Start 136: dfmp2-grad3; 290/411 Test #179: fsapt2 ........................... Passed 4.94 sec; Start 388: python-curve; 291/411 Test #120: dfccd1 ........................... Passed 1.95 sec; Start 3: casscf-fzc-sp; 292/411 Test #241: ocepa-grad1 ...................... Passed 2.87 sec; Start 257: omp3-1; 293/411 Test #95: cisd-h2o+-2 ...................... Passed 4.13 sec; Start 187: fci-h2o-fzcv; 294/411 Test #376: pywrap-align ..................... Passed 3.29 sec; Start 294: psimrcc-sp1; 295/411 Test #136: dfmp2-grad3 ...................... Passed 2.32 sec; Start 235: mp2-property; 296/411 Test #388: python-curve ..................... Passed 2.19 sec; Start 119: dfcasscf-sp; 297/411 Test #257: omp3-1 ........................... Passed 2.31 sec; Start 201: fnocc3; 298/411 Test #3: casscf-fzc-sp .................... Passed 3.65 sec; Start 6: ao-casscf-sp; 299/411 Test #119: dfcasscf-sp ...................... Passed 2.88 sec; Start 191: fcidump; 300/411 Test #235: mp2-property ..................... Passed 3.35 sec; Start 363: zaptn-nh2; 301/411 Test #294: psimrcc-sp1 ...................... Passed 4.02 sec; Start 116: ao-dfcasscf-sp; 302/411 Test #187: fci-h2o-fzcv ..................... Passed 4.43 sec; Start 377: pywrap-align-chiral; 303/411 Test #201: fnocc3 ........................... ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:27190,Test,Test,27190,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,verage ..................... Passed 7.87 sec; Start 196: fd-gradient; 195/411 Test #168: dft1 ............................. Passed 106.60 sec; Start 197: freq-isotope1; 196/411 Test #192: fd-freq-energy ................... Passed 11.70 sec; Start 198: freq-isotope2; 197/411 Test #189: fci-tdm-2 ........................ Passed 24.01 sec; Start 199: fnocc1; 198/411 Test #198: freq-isotope2 .................... Passed 10.11 sec; Start 200: fnocc2; 199/411 Test #197: freq-isotope1 .................... Passed 17.28 sec; Start 201: fnocc3; 200/411 Test #194: fd-freq-gradient ................. Passed 26.25 sec; Start 202: fnocc4; 201/411 Test #199: fnocc1 ........................... Passed 21.50 sec; Start 203: frac; 202/411 Test #203: frac ............................. Passed 5.66 sec; Start 204: frac-ip-fitting; 203/411 Test #196: fd-gradient ...................... Passed 40.24 sec; Start 206: ghosts; 204/411 Test #201: fnocc3 ........................... Passed 24.13 sec; Start 207: gibbs; 205/411 Test #202: fnocc4 ........................... Passed 28.77 sec; Start 208: matrix1; 206/411 Test #208: matrix1 .......................... Passed 0.55 sec; Start 209: mcscf1; 207/411 Test #209: mcscf1 ........................... Passed 1.10 sec; Start 210: mcscf2; 208/411 Test #210: mcscf2 ........................... Passed 1.64 sec; Start 211: mcscf3; 209/411 Test #211: mcscf3 ........................... Passed 0.97 sec; Start 212: mints1; 210/411 Test #212: mints1 ........................... Passed 0.62 sec; Start 213: mints2; 211/411 Test #213: mints2 ........................... Passed 3.17 sec; Start 214: mints3; 212/411 Test #214: mints3 ........................... Passed 1.12 sec; Start 215: mints4; 213/411 Test #215: mints4 ........................... Passed 0.58 sec; Start 216: mints5; 214/411 Test #207: gibbs ............................ Passed 21.62 sec; Start 217: mints6; 215/411 Test #216: mints5 ........................... Passed 0.65 sec; Start 218: mints8; 216/411 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:18932,Test,Test,18932,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,"version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given arguments:. ""VERSION_LESS"" ""4.9"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:168 (include). -- Configuring incomplete, errors occurred!; See also ""/media/BIGdisk/psi4/objdir/CMakeFiles/CMakeOutput.log"".; (p4dev35) termo@Ubuntu16:/media/BIGdisk/psi4$ cmake --version; cmake version 3.9.4. CMake suite maintained and supported by Kitware (kitware.com/cmake).; (p4dev35) termo@Ubuntu16:/media/BIGdisk/psi4$ git describe; v1.2rc1. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:5453,log,log,5453,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,1,['log'],['log']
Testability,version: Rev {master} 0d10de8. After entering the SOSCF psi4 exists with a segmentation fault. It prints the soscf header if soscf_print true. Occurs e.g. when I run soscf1 test case with PBE instead of HF. I don't know if SOSCF should work with DFT or not.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/256:173,test,test,173,https://psicode.org,https://github.com/psi4/psi4/issues/256,1,['test'],['test']
Testability,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1570,test,testing,1570,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,1,['test'],['testing']
Testability,vv10 ......................... Passed 16.95 sec; Start 177: extern1; 173/412 Test #176: docs-dft ......................... Passed 0.74 sec; Start 178: extern2; 174/412 Test #115: dcft8 ............................ Passed 244.85 sec; Start 180: fsapt2; 175/412 Test #173: dft3 ............................. Passed 24.08 sec; Start 181: fsapt-terms; 176/412 Test #177: extern1 .......................... Passed 17.94 sec; Start 184: isapt2; 177/412 Test #155: dft-grad-lr2 ..................... Passed 103.74 sec; Start 185: fci-dipole; 178/412 Test #180: fsapt2 ........................... Passed 5.38 sec; Start 186: fci-h2o; 179/412 Test #178: extern2 .......................... Passed 21.09 sec; Start 187: fci-h2o-2; 180/412 Test #174: dft-omega ........................ Passed 26.95 sec; Start 188: fci-h2o-fzcv; 181/412 Test #181: fsapt-terms ...................... Passed 8.42 sec; Start 189: fci-tdm; 182/412 Test #185: fci-dipole ....................... Passed 8.93 sec; Start 190: fci-tdm-2; 183/412 Test #189: fci-tdm .......................... Passed 2.19 sec; Start 191: fci-coverage; 184/412 Test #186: fci-h2o .......................... Passed 8.29 sec; Start 192: fcidump; 185/412 Test #187: fci-h2o-2 ........................ Passed 7.49 sec; Start 193: fd-freq-energy; 186/412 Test #188: fci-h2o-fzcv ..................... Passed 5.93 sec; Start 195: fd-freq-gradient; 187/412 Test #192: fcidump .......................... Passed 5.07 sec; Start 197: fd-gradient; 188/412 Test #191: fci-coverage ..................... Passed 6.32 sec; Start 198: freq-isotope1; 189/412 Test #171: dft1-alt ......................... Passed 50.08 sec; Start 199: freq-isotope2; 190/412 Test #168: dft-b3lyp ........................ Passed 69.27 sec; Start 200: fnocc1; 191/412 Test #199: freq-isotope2 .................... Passed 9.58 sec; Start 201: fnocc2; 192/412 Test #198: freq-isotope1 .................... Passed 13.94 sec; Start 202: fnocc3; 193/412 Test #190: fci-tdm-2 .......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:17024,Test,Test,17024,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,vv10 ......................... Passed 17.26 sec; Start 177: extern2; 173/411 Test #159: dft-grad-meta .................... Passed 53.57 sec; Start 179: fsapt2; 174/411 Test #179: fsapt2 ........................... Passed 5.01 sec; Start 180: fsapt-terms; 175/411 Test #172: dft3 ............................. Passed 20.79 sec; Start 183: isapt2; 176/411 Test #176: extern1 .......................... Passed 15.25 sec; Start 184: fci-dipole; 177/411 Test #180: fsapt-terms ...................... Passed 8.95 sec; Start 185: fci-h2o; 178/411 Test #173: dft-omega ........................ Passed 25.66 sec; Start 186: fci-h2o-2; 179/411 Test #177: extern2 .......................... Passed 22.17 sec; Start 187: fci-h2o-fzcv; 180/411 Test #184: fci-dipole ....................... Passed 7.88 sec; Start 188: fci-tdm; 181/411 Test #188: fci-tdm .......................... Passed 1.50 sec; Start 189: fci-tdm-2; 182/411 Test #187: fci-h2o-fzcv ..................... Passed 5.59 sec; Start 190: fci-coverage; 183/411 Test #185: fci-h2o .......................... Passed 6.73 sec; Start 191: fcidump; 184/411 Test #186: fci-h2o-2 ........................ Passed 7.05 sec; Start 192: fd-freq-energy; 185/411 Test #191: fcidump .......................... Passed 3.44 sec; Start 194: fd-freq-gradient; 186/411 Test #190: fci-coverage ..................... Passed 3.57 sec; Start 196: fd-gradient; 187/411 Test #170: dft1-alt ......................... Passed 48.60 sec; Start 197: freq-isotope1; 188/411 Test #192: fd-freq-energy ................... Passed 8.97 sec; Start 198: freq-isotope2; 189/411 Test #198: freq-isotope2 .................... Passed 5.22 sec; Start 199: fnocc1; 190/411 Test #189: fci-tdm-2 ........................ Passed 21.94 sec; Start 200: fnocc2; 191/411 Test #197: freq-isotope1 .................... Passed 9.99 sec; Start 201: fnocc3; 192/411 Test #167: dft-b3lyp ........................ Passed 69.37 sec; Start 202: fnocc4; 193/411 Test #194: fd-freq-gradient ................. Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:17043,Test,Test,17043,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,"w (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons fro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:1428,test,testing,1428,https://psicode.org,https://github.com/psi4/psi4/pull/2454,2,['test'],"['testing', 'tests']"
Testability,"w modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, cloud, basic, furo, and pydata. beware that some modern themes take a looong time to build (e.g., 40m instead of 5m) and increase the docs size 10-fold. at least one culprit is trying to put the whole TOC in the sidebar (incl. 1400 options), so there's stuff to be solved to try to transition themes.; - [x] I thought https://sphinx-tabs.readthedocs.io/en/latest/ would be a nice way to show psithon/psiapi/qcschema syntax, so I added that requirement to the docs build along with a quick example. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:1793,log,logic,1793,https://psicode.org,https://github.com/psi4/psi4/pull/3053,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"w/o reinvestigating, this is my memory of what's going on:. props2 is a Cartesian-with-variable geometry (y-coord gets updated in a loop) with _no explicit_ freeze com/orient. System is a cation so origin of *poles matters. Test ref values are computed at COM. For a long time this was fine b/c in the absence of user forbidding it, molecule was moved to COM & std orientation and computed==expected. But there's a deep pit that both users and developers can fall into wrt scanning over coordinates of a Cartesian system -- values you're updating aren't in same coord sys as values being specified. Results can be jarring. So DGAS fixed with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L3110-L3117 . This fills the pitfall, but now the props2 case doesn't get moved to COM, so computed != expected. That is, until psi4/psi4#808 where we explictly instruct moving to COM so that test passes again. Naturally, a Z-Mat molecule would always go to COM and wouldn't have this distinction. This is all perfectly logical. Trouble is consistency btwn Cart/ZMat and what users will be least confused by.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332296506:224,Test,Test,224,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332296506,3,"['Test', 'log', 'test']","['Test', 'logical', 'test']"
Testability,"was there some symmetry in the other cubeprop tests that didn't see the bad index transpose? or is the problem present in the test cubes and just no one looked at them? By all means add another cubeprop test if it spans more testing space, but probably not otherwise. Do we need new reference cubes for the existing tests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/951#issuecomment-380174200:46,test,tests,46,https://psicode.org,https://github.com/psi4/psi4/pull/951#issuecomment-380174200,5,['test'],"['test', 'testing', 'tests']"
Testability,wavefunction ............. Passed 1.56 sec; Start 7: casscf-sp; 265/413 Test #326: sapt8 ............................ Passed 15.51 sec; Start 374: dft-custom-hybrid; 266/413 Test #293: psimrcc-fd-freq1 ................. Passed 18.54 sec; Start 337: scf4; 267/413 Test #219: mints6 ........................... Passed 13.03 sec; Start 386: psi4numpy-rhf-hessian; 268/413 Test #367: cubeprop-esp ..................... Passed 9.70 sec; Start 287: props2; 269/413 Test #270: opt2-fd .......................... Passed 9.87 sec; Start 371: dft-jk; 270/413 Test #340: scf7 ............................. Passed 13.04 sec; Start 362: x2c1; 271/413 Test #352: dft-custom ....................... Passed 15.15 sec; Start 89: cepa2; 272/413 Test #386: psi4numpy-rhf-hessian ............ Passed 3.15 sec; Start 383: psi4numpy-dfmp2; 273/413 Test #14: cbs-xtpl-energy .................. Passed 12.31 sec; Start 125: dfccsd1; 274/413 Test #383: psi4numpy-dfmp2 .................. Passed 1.89 sec; Start 370: scf-freq1; 275/413 Test #288: props3 ........................... Passed 13.44 sec; Start 5: casscf-sa-sp; 276/413 Test #359: tu4-h2o-freq ..................... Passed 11.03 sec; Start 228: mp2-1; 277/413 Test #374: dft-custom-hybrid ................ Passed 10.39 sec; Start 95: cisd-h2o+-1; 278/413 Test #337: scf4 ............................. Passed 9.69 sec; Start 99: cisd-sp; 279/413 Test #125: dfccsd1 .......................... Passed 9.09 sec; Start 385: psi4numpy-rhf-gradient; 280/413 Test #371: dft-jk ........................... Passed 11.19 sec; Start 200: freq-isotope2; 281/413 Test #95: cisd-h2o+-1 ...................... Passed 5.07 sec; Start 126: dfccsdl1; 282/413 Test #287: props2 ........................... Passed 14.44 sec; Start 296: psimrcc-sp1; 283/413 Test #385: psi4numpy-rhf-gradient ........... Passed 2.08 sec; Start 96: cisd-h2o+-2; 284/413 Test #89: cepa2 ............................ Passed 12.98 sec; Start 369: scf-hess1; 285/413 Test #370: scf-freq1 ......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:25970,Test,Test,25970,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,"wavefunction ............. Passed 3.89 sec; 406/411 Test #359: tu6-cp-ne2 ....................... Passed 418.72 sec; 407/411 Test #379: cc-module ........................ Passed 363.33 sec; 408/411 Test #300: pywrap-all ....................... Passed 888.77 sec; 409/411 Test #306: pywrap-checkrun-uhf .............. Passed 840.06 sec; 410/411 Test #386: cookbook-rohf-orb-rot ............ Passed 392.68 sec; 411/411 Test #304: pywrap-checkrun-rhf .............. Passed 856.50 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 74.17 sec*proc (2 tests); autotest = 2335.09 sec*proc (26 tests); cart = 18260.17 sec*proc (123 tests); cas = 63.79 sec*proc (1 test); casscf = 108.38 sec*proc (11 tests); cbs = 1185.86 sec*proc (10 tests); cc = 11652.87 sec*proc (65 tests); cdomp2 = 65.07 sec*proc (2 tests); cepa = 275.55 sec*proc (7 tests); ci = 145.71 sec*proc (8 tests); cisd = 217.60 sec*proc (7 tests); cookbook = 392.68 sec*proc (1 test); cubeprop = 20.57 sec*proc (2 tests); dcft = 3928.91 sec*proc (13 tests); df = 2256.10 sec*proc (38 tests); dfccd = 3.98 sec*proc (1 test); dfccd-grad = 27.33 sec*proc (1 test); dfccdl = 3.46 sec*proc (1 test); dfccsd = 6.58 sec*proc (1 test); dfccsd-grad = 77.74 sec*proc (1 test); dfccsd-t-grad = 71.93 sec*proc (1 test); dfccsdat = 32.02 sec*proc (1 test); dfccsdl = 20.44 sec*proc (1 test); dfccsdt = 27.22 sec*proc (1 test); dfep2 = 5.48 sec*proc (2 tests); dfmp2 = 152.42 sec*proc (11 tests); dfomp2 = 1078.80 sec*proc (7 tests); dfomp2.5 = 248.49 sec*proc (4 tests); dfomp3 = 259.57 sec*proc (4 tests); dfscf = 136.88 sec*proc (1 test); dft = 1423.98 sec*proc (27 tests); docs = 1.14 sec*proc (2 tests); ecp = 44.39 sec*proc (2 tests); fci = 16.37 sec*proc (2 tests); fcidump = 16.54 sec*proc (1 test); findif = 1027.21 sec*proc (5 tests); fnocc = 247.46 sec*proc (4 tests); freq = 949.55 sec*proc (6 tests); gradient = 1810.70 sec*proc (16 tests); json = 24.20 sec*proc (8 tests); longtests = 3935.60 sec*proc (5 tests); mcsc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:38912,test,tests,38912,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['test'],['tests']
Testability,wb97X-V with density threshold of 1e-10 stops before printing the first SCF/SAD energy in the SCF iteration output. I dont have access to gcc5 and I cannot reproduce the error otherwise for now. e.g.:; https://dev.azure.com/psi4/psi4/_build/results?buildId=2170&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=801,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1943:267,log,logs,267,https://psicode.org,https://github.com/psi4/psi4/issues/1943,1,['log'],['logs']
Testability,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:41,test,tests,41,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,10,['test'],['tests']
Testability,"what should be happening here in the CI is that we've got a mixture of; * Libint, from conda psi4, built with Intel 2019 compilers, not calling MKL; * numpy, from conda defaults, built with GCC, calling MKL; * psi4, built on Azure with GCC or Clang, calling MKL; * MKL, distributed from conda but built by Intel with ? compilers (we'll assume Intel). My local tests with the reported `MKL_CBWR` are the same as the bullets except psi4 was build with Intel 2019.4 compilers. To test, I've solely been switching out MKL package with `conda install mkl=2019.4` or `=2020.1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633695142:360,test,tests,360,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633695142,2,['test'],"['test', 'tests']"
Testability,"where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-pa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:2723,test,tests,2723,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['test'],['tests']
Testability,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2515:1594,test,tests,1594,https://psicode.org,https://github.com/psi4/psi4/pull/2515,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"whoa, poltype needs a lot of software! the segfault you posted is not in my power to interpret. do you have access to the file or commands poltype is submitting to psi4? I suspect a bad interaction among software libraries. does `psi4 --test` run ok (that is, no failures)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761235033:237,test,test,237,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761235033,1,['test'],['test']
Testability,"will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1636,test,test,1636,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['test'],['test']
Testability,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004:924,log,log,924,https://psicode.org,https://github.com/psi4/psi4/issues/1004,1,['log'],['log']
Testability,work with @shannonhouck on plugin https://github.com/mayhallgroup/psi4fockci. check; - [ ] build; - [ ] tests; - [ ] docs; - [ ] conda,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1838:104,test,tests,104,https://psicode.org,https://github.com/psi4/psi4/issues/1838,1,['test'],['tests']
Testability,"would a `psi4.core.clean_options()` between the two work sessions be helpful in the meantime?. a more targeted but confusing way would be with the ""revoke"" commands https://github.com/psi4/psi4/blob/master/tests/pywrap-checkrun-convcrit/input.dat#L53-L55 but not recommended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1182560668:206,test,tests,206,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1182560668,1,['test'],['tests']
Testability,wrap-align ..................... Passed 3.35 sec; Start 310: rasci-c2-active; 298/411 Test #265: opt1 ............................. Passed 6.06 sec; Start 223: molden1; 299/411 Test #93: cisd-h2o+-0 ...................... Passed 5.64 sec; Start 344: dfep2-1; 300/411 Test #332: scf-occ .......................... Passed 4.06 sec; Start 294: psimrcc-sp1; 301/411 Test #329: scf-guess-read2 .................. Passed 8.60 sec; Start 339: scf-property; 302/411 Test #99: cisd-sp-2 ........................ Passed 6.28 sec; Start 331: scf1; 303/411 Test #295: psithon1 ......................... Passed 9.58 sec; Start 257: omp3-1; 304/411 Test #399: json-schema-1-energy ............. Passed 4.57 sec; Start 234: mp3-grad2; 305/411 Test #187: fci-h2o-fzcv ..................... Passed 6.68 sec; Start 225: mom; 306/411 Test #118: dfcasscf-fzc-sp .................. Passed 6.60 sec; Start 351: dft-reference; 307/411 Test #283: opt-freeze-coords ................ Passed 9.08 sec; Start 251: omp2-grad1; 308/411 Test #117: dfcasscf-sa-sp ................... Passed 8.74 sec; Start 85: cepa0-grad1; 309/411 Test #344: dfep2-1 .......................... Passed 5.97 sec; Start 284: props1; 310/411 Test #370: scf-coverage ..................... Passed 10.94 sec; Start 235: mp2-property; 311/411 Test #191: fcidump .......................... Passed 10.01 sec; Start 262: omp3-grad1; 312/411 Test #310: rasci-c2-active .................. Passed 8.92 sec; Start 119: dfcasscf-sp; 313/411 Test #351: dft-reference .................... Passed 4.00 sec; Start 121: dfccdl1; 314/411 Test #294: psimrcc-sp1 ...................... Passed 6.86 sec; Start 271: opt5; 315/411 Test #339: scf-property ..................... Passed 6.97 sec; Start 377: pywrap-align-chiral; 316/411 Test #331: scf1 ............................. Passed 6.73 sec; Start 229: mp2-grad2; 317/411 Test #225: mom .............................. Passed 5.38 sec; Start 232: mp2p5-grad2; 318/411 Test #223: molden1 .......................... Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:28877,Test,Test,28877,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,wrap-align-chiral .............. Passed 3.44 sec; Start 236: mp2-property; 311/412 Test #345: dfep2-1 .......................... Passed 5.13 sec; Start 344: stability1; 312/412 Test #226: mom .............................. Passed 5.93 sec; Start 356: tu3-h2o-opt; 313/412 Test #352: dft-reference .................... Passed 5.16 sec; Start 315: sad1; 314/412 Test #6: ao-casscf-sp ..................... Passed 6.69 sec; Start 224: molden1; 315/412 Test #284: opt-freeze-coords ................ Passed 7.06 sec; Start 230: mp2-grad2; 316/412 Test #285: props1 ........................... Passed 6.49 sec; Start 312: rasci-h2o; 317/412 Test #131: dfmp2-2 .......................... Passed 2.63 sec; Start 233: mp2p5-grad2; 318/412 Test #392: python-mints2 .................... Passed 2.92 sec; Start 214: mints2; 319/412 Test #119: dfcasscf-fzc-sp .................. Passed 3.42 sec; Start 232: mp2p5-grad1; 320/412 Test #385: psi4numpy-rhf-hessian ............ Passed 3.44 sec; Start 346: dfep2-2; 321/412 Test #236: mp2-property ..................... Passed 3.14 sec; Start 357: scf-response1; 322/412 Test #191: fci-coverage ..................... Passed 5.22 sec; Start 328: scf-guess-read1; 323/412 Test #192: fcidump .......................... Passed 5.35 sec; Start 389: python-curve; 324/412 Test #312: rasci-h2o ........................ Passed 2.29 sec; Start 364: zaptn-nh2; 325/412 Test #344: stability1 ....................... Passed 4.29 sec; Start 290: psimrcc-ccsd_t-3; 326/412 Test #356: tu3-h2o-opt ...................... Passed 4.25 sec; Start 334: scf2; 327/412 Test #346: dfep2-2 .......................... Passed 2.31 sec; Start 391: python-mints9; 328/412 Test #328: scf-guess-read1 .................. Passed 1.82 sec; Start 382: psi4numpy-dfmp2; 329/412 Test #315: sad1 ............................. Passed 3.68 sec; Start 398: json-v11-energy; 330/412 Test #214: mints2 ........................... Passed 2.86 sec; Start 204: frac; 331/412 Test #357: scf-response1 ..............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:30094,Test,Test,30094,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,wrap-cbs1 ...................... Passed 201.06 sec; Start 43: cc28; 71/411 Test #115: dcft9 ............................ Passed 163.68 sec; Start 104: dcft-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 73.44 sec; Start 230: mp2-module; 73/411 Test #61: cc44 ............................. Passed 90.14 sec; Start 19: cbs-xtpl-wrapper; 74/411 Test #46: cc30 ............................. Passed 123.09 sec; Start 159: dft-grad-meta; 75/411 Test #43: cc28 ............................. Passed 112.18 sec; Start 57: cc40; 76/411 Test #17: cbs-xtpl-opt ..................... Passed 138.99 sec; Start 297: pubchem1; 77/411 Test #19: cbs-xtpl-wrapper ................. Passed 90.48 sec; Start 389: python-pubchem; 78/411 Test #159: dft-grad-meta .................... Passed 52.62 sec; Start 100: ci-property; 79/411 Test #230: mp2-module ....................... Passed 122.41 sec; Start 65: cc48; 80/411 Test #18: cbs-xtpl-func .................... Passed 2286.51 sec; Start 2: adc2; 81/411 Test #297: pubchem1 ......................... Passed 56.65 sec; Start 11: cbs-delta-energy; 82/411 Test #104: dcft-grad2 ....................... Passed 167.43 sec; Start 59: cc42; 83/411 Test #389: python-pubchem ................... Passed 54.35 sec; Start 259: omp3-3; 84/411 Test #100: ci-property ...................... Passed 59.03 sec; Start 81: cc9; 85/411 Test #57: cc40 ............................. Passed 93.38 sec; Start 170: dft1-alt; 86/411 Test #2: adc2 ............................. Passed 41.64 sec; Start 149: dfomp3-grad2; 87/411 Test #65: cc48 ............................. Passed 82.20 sec; Start 153: dfomp2p5-grad2; 88/411 Test #59: cc42 ............................. Passed 68.05 sec; Start 79: cc8b; 89/411 Test #170: dft1-alt ......................... Passed 52.00 sec; Start 107: dcft1; 90/411 Test #81: cc9 .............................. Passed 71.95 sec; Start 27: cc13c; 91/411 Test #259: omp3-3 ........................... Passed 132.47 sec; Start 30: cc15; 92/411 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:7689,Test,Test,7689,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,"wrap-cbs1; 50/401 Test #72: cc55 ............................. Passed 24.10 sec; Start 79: cc8c; 51/401 Test #81: cc9a ............................. Passed 25.08 sec; Start 288: psimrcc-fd-freq2; 52/401 Test #80: cc9 .............................. Passed 21.90 sec; Start 99: ci-property; 53/401 Test #70: cc53 ............................. Passed 19.97 sec; Start 23: cc12; 54/401 Test #11: cbs-delta-energy ................. Passed 127.44 sec; Start 37: cc22; 55/401 Test #54: cc38 ............................. Passed 18.35 sec; Start 65: cc49; 56/401 Test #78: cc8b ............................. Passed 23.61 sec; Start 30: cc15; 57/401 Test #332: scf5 ............................. Passed 32.95 sec; Start 21: cc10; 58/401 Test #77: cc8a ............................. Passed 30.77 sec; Start 16: cbs-xtpl-gradient; 59/401 Test #23: cc12 ............................. Passed 20.30 sec; Start 295: pywrap-alias; 60/401 Test #37: cc22 ............................. Passed 20.74 sec; Start 22: cc11; 61/401 Test #79: cc8c ............................. Passed 26.19 sec; Start 165: dft-vv10; 62/401 Test #99: ci-property ...................... Passed 24.29 sec; Start 71: cc54; 63/401 Test #43: cc28 ............................. Passed 46.96 sec; Start 26: cc13b; 64/401 Test #65: cc49 ............................. Passed 35.49 sec; Start 128: dfmp2-1; 65/401 Test #21: cc10 ............................. Passed 24.70 sec; Start 20: cc1; 66/401 Test #165: dft-vv10 ......................... Passed 17.48 sec; Start 62: cc45; 67/401 Test #288: psimrcc-fd-freq2 ................. Passed 40.23 sec; Start 56: cc4; 68/401 Test #16: cbs-xtpl-gradient ................ Passed 23.44 sec; Start 342: sapt-dft1; 69/401 Test #71: cc54 ............................. Passed 19.27 sec; Start 361: dft-smoke; 70/401 Test #22: cc11 ............................. Passed 22.05 sec; Start 203: gibbs; 71/401 Test #128: dfmp2-1 .......................... Passed 12.65 sec; Start 376: cc-module,; 72/401 Test #62: cc45 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:5782,Test,Test,5782,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,wrap-checkrun-convcrit ......... Passed 22.03 sec; Start 376: pywrap-bfs; 189/412 Test #273: opt6 ............................. Passed 27.17 sec; Start 173: dft3; 190/412 Test #268: opt2 ............................. Passed 26.58 sec; Start 160: dft-b2plyp; 191/412 Test #38: cc22 ............................. Passed 23.04 sec; Start 278: opt12; 192/412 Test #178: extern2 .......................... Passed 26.28 sec; Start 347: sapt-dft1; 193/412 Test #167: dft-psivar ....................... Passed 35.83 sec; Start 164: dft-freq; 194/412 Test #173: dft3 ............................. Passed 29.49 sec; Start 200: fnocc1; 195/412 Test #376: pywrap-bfs ....................... Passed 36.43 sec; Start 144: dfomp2-grad1; 196/412 Test #278: opt12 ............................ Passed 21.45 sec; Start 249: omp2-3; 197/412 Test #160: dft-b2plyp ....................... Passed 32.77 sec; Start 190: fci-tdm-2; 198/412 Test #200: fnocc1 ........................... Passed 10.69 sec; Start 359: tu5-sapt; 199/412 Test #347: sapt-dft1 ........................ Passed 25.29 sec; Start 151: dfomp2p5-1; 200/412 Test #144: dfomp2-grad1 ..................... Passed 18.47 sec; Start 54: cc37; 201/412 Test #151: dfomp2p5-1 ....................... Passed 11.42 sec; Start 24: cc12; 202/412 Test #164: dft-freq ......................... Passed 28.43 sec; Start 323: sapt-dft-lrc; 203/412 Test #249: omp2-3 ........................... Passed 21.19 sec; Start 292: psimrcc-fd-freq1; 204/412 Test #190: fci-tdm-2 ........................ Passed 31.40 sec; Start 170: dft-vv10; 205/412 Test #359: tu5-sapt ......................... Passed 30.09 sec; Start 291: psimrcc-ccsd_t-4; 206/412 Test #54: cc37 ............................. Passed 24.98 sec; Start 239: nbody-intermediates; 207/412 Test #24: cc12 ............................. Passed 23.79 sec; Start 139: dfmp2-grad5; 208/412 Test #292: psimrcc-fd-freq1 ................. Passed 24.32 sec; Start 276: opt9; 209/412 Test #323: sapt-dft-lrc ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:18475,Test,Test,18475,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,"wrap-checkrun-rhf .............. Passed 230.50 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 1997.14 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.02 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 52.87 sec*proc (2 tests); autotest = 974.60 sec*proc (25 tests); cart = 5503.53 sec*proc (123 tests); cas = 24.29 sec*proc (1 test); casscf = 80.51 sec*proc (11 tests); cbs = 1351.37 sec*proc (10 tests); cc = 3972.16 sec*proc (64 tests); cdomp2 = 26.61 sec*proc (2 tests); cepa = 116.08 sec*proc (7 tests); ci = 68.29 sec*proc (8 tests); cisd = 82.46 sec*proc (7 tests); cookbook = 107.12 sec*proc (1 test); cubeprop = 17.29 sec*proc (2 tests); dcft = 1551.98 sec*proc (13 tests); df = 720.18 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.11 sec*proc (1 test); dfccdl = 2.42 sec*proc (1 test); dfccsd = 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 te",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:38143,test,test,38143,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['test'],['test']
Testability,"wrap-checkrun-rhf .............. Passed 385.47 sec; 412/412 Test #179: fsapt1 ........................... Passed 2170.07 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 108.50 sec*proc (2 tests); autotest = 2062.88 sec*proc (26 tests); cart = 16305.41 sec*proc (123 tests); cas = 58.41 sec*proc (1 test); casscf = 103.21 sec*proc (11 tests); cbs = 1826.17 sec*proc (11 tests); cc = 9278.45 sec*proc (65 tests); cdomp2 = 58.18 sec*proc (2 tests); cepa = 179.64 sec*proc (7 tests); ci = 118.89 sec*proc (8 tests); cisd = 183.70 sec*proc (7 tests); cookbook = 136.41 sec*proc (1 test); cubeprop = 21.80 sec*proc (2 tests); dcft = 2471.58 sec*proc (13 tests); df = 1452.90 sec*proc (38 tests); dfccd = 4.04 sec*proc (1 test); dfccd-grad = 9.99 sec*proc (1 test); dfccdl = 3.66 sec*proc (1 test); dfccsd = 6.21 sec*proc (1 test); dfccsd-grad = 32.53 sec*proc (1 test); dfccsd-t-grad = 34.47 sec*proc (1 test); dfccsdat = 24.65 sec*proc (1 test); dfccsdl = 6.27 sec*proc (1 test); dfccsdt = 11.08 sec*proc (1 test); dfep2 = 5.96 sec*proc (2 tests); dfmp2 = 175.93 sec*proc (11 tests); dfomp2 = 589.68 sec*proc (7 tests); dfomp2.5 = 145.34 sec*proc (4 tests); dfomp3 = 183.40 sec*proc (4 tests); dfscf = 147.05 sec*proc (1 test); dft = 1465.58 sec*proc (27 tests); docs = 1.67 sec*proc (2 tests); ecp = 66.44 sec*proc (2 tests); fci = 13.42 sec*proc (2 tests); fcidump = 5.07 sec*proc (1 test); findif = 1073.96 sec*proc (5 tests); fnocc = 85.57 sec*proc (4 tests); freq = 1129.60 sec*proc (6 tests); gradient = 1094.61 sec*proc (16 tests); json = 20.15 sec*proc (8 tests); longtests = 3964.53 sec*proc (5 tests); mcscf = 4.60 sec*proc (3 tests); minitests = 77.74 sec*proc (4 tests); mints = 94.33 sec*proc (14 tests); misc = 558.23 sec*proc (16 tests); mp2 = 581.31 sec*proc (13 tests); nbody = 63.49 sec*proc (2 tests); numpy = 1.00 sec*proc (1 test); ocepa = 512.14 sec*proc (6 tests); omp = 668.59 sec*proc (18 tests); opt = 1534.75 sec*proc (21 tests); plug = 17.42 sec*pr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:39347,test,test,39347,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['test'],['test']
Testability,wrap-checkrun-rohf ............. Passed 359.48 sec; Start 25: cc13; 13/412 Test #241: ocepa-freq1 ...................... Passed 402.21 sec; Start 30: cc14; 14/412 Test #39: cc23 ............................. Passed 487.99 sec; Start 13: cbs-xtpl-alpha; 15/412 Test #42: cc26 ............................. Passed 471.50 sec; Start 156: dft-grad-lr3; 16/412 Test #40: cc24 ............................. Passed 560.40 sec; Start 29: cc13d; 17/412 Test #115: dcft8 ............................ Passed 391.75 sec; Start 112: dcft5; 18/412 Test #25: cc13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passed 283.21 sec; Start 360: tu6-cp-ne2; 20/412 Test #13: cbs-xtpl-alpha ................... Passed 280.85 sec; Start 179: fsapt1; 21/412 Test #36: cc2 .............................. Passed 443.73 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #29: cc13d ............................ Passed 66.58 sec; Start 380: cc-module; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 75.72 sec; Start 45: cc29; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 66.55 sec; Start 183: isapt1; 25/412 Test #380: cc-module ........................ Passed 44.91 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 141.21 sec; Start 11: cbs-delta-energy; 27/412 Test #45: cc29 ............................. Passed 106.00 sec; Start 71: cc52; 28/412 Test #32: cc16 ............................. Passed 96.05 sec; Start 282: opt-irc-2; 29/412 Test #11: cbs-delta-energy ................. Passed 76.41 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.85 sec; Start 18: cbs-xtpl-func; 31/412 Test #282: opt-irc-2 ........................ Passed 104.33 sec; Start 182: fsapt-allterms; 32/412 Test #113: dcft6 ............................ Passed 130.50 sec; Start 194: fd-freq-energy-large; 33/412 Test #395: python-vibanalysis ............... Passed 734.63 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:2332,Test,Test,2332,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,"wrap-db3 ....................... Passed 0.78 sec; Start 123: dfccdl1; 392/413 Test #121: dfcasscf-sp ...................... Passed 4.24 sec; Start 6: ao-casscf-sp; 393/413 Test #313: rasci-h2o ........................ Passed 2.32 sec; Start 311: pywrap-molecule; 394/413 Test #122: dfccd1 ........................... Passed 3.58 sec; Start 210: matrix1; 395/413 Test #211: mcscf1 ........................... Passed 1.18 sec; Start 162: dft-grac; 396/413 Test #176: docs-bases ....................... Passed 0.64 sec; Start 88: cepa1; 397/413 Test #330: scf-upcast-custom-basis .......... Passed 2.28 sec; Start 103: cubeprop-frontier; 398/413 Test #8: castup1 .......................... Passed 2.22 sec; 399/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.07 sec; 400/413 Test #210: matrix1 .......................... Passed 0.69 sec; 401/413 Test #132: dfmp2-2 .......................... Passed 2.57 sec; 402/413 Test #173: dft2 ............................. Passed 5.31 sec; 403/413 Test #136: dfmp2-grad1 ...................... Passed 3.52 sec; 404/413 Test #311: pywrap-molecule .................. Passed 1.32 sec; 405/413 Test #162: dft-grac ......................... Passed 2.27 sec; 406/413 Test #103: cubeprop-frontier ................ Passed 2.05 sec; 407/413 Test #123: dfccdl1 .......................... Passed 3.82 sec; 408/413 Test #381: cc-module ........................ Passed 199.69 sec; 409/413 Test #6: ao-casscf-sp ..................... Passed 5.19 sec; 410/413 Test #88: cepa1 ............................ Passed 7.42 sec; 411/413 Test #9: castup2 .......................... Passed 9.37 sec; 412/413 Test #18: cbs-xtpl-func .................... Passed 1715.47 sec; 413/413 Test #320: sapt4 ............................ Passed 1667.29 sec. 100% tests passed, 0 tests failed out of 413. Label Time Summary:; adc = 63.93 sec*proc (2 tests); autotest = 2243.46 sec*proc (26 tests); cart = 19628.65 sec*proc (123 tests); cas = 55.52 sec*proc (1 test); casscf = 136.00 sec*p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:37820,Test,Test,37820,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,"wrap-db3 ....................... Passed 0.83 sec; 406/412 Test #176: docs-dft ......................... Passed 0.68 sec; 407/412 Test #365: options1 ......................... Passed 0.69 sec; 408/412 Test #410: skeletonscf ...................... Passed 0.77 sec; 409/412 Test #88: cepa1 ............................ Passed 3.01 sec; 410/412 Test #18: cbs-xtpl-func .................... Passed 1324.01 sec; 411/412 Test #179: fsapt1 ........................... Passed 2063.95 sec; 412/412 Test #319: sapt4 ............................ Passed 1882.34 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 70.71 sec*proc (2 tests); autotest = 2082.78 sec*proc (26 tests); cart = 20353.66 sec*proc (123 tests); cas = 63.78 sec*proc (1 test); casscf = 115.98 sec*proc (11 tests); cbs = 2564.15 sec*proc (11 tests); cc = 14415.83 sec*proc (65 tests); cdomp2 = 86.58 sec*proc (2 tests); cepa = 188.90 sec*proc (7 tests); ci = 123.31 sec*proc (8 tests); cisd = 200.90 sec*proc (7 tests); cookbook = 373.24 sec*proc (1 test); cubeprop = 21.39 sec*proc (2 tests); dcft = 5267.53 sec*proc (13 tests); df = 2450.70 sec*proc (38 tests); dfccd = 5.30 sec*proc (1 test); dfccd-grad = 18.35 sec*proc (1 test); dfccdl = 4.43 sec*proc (1 test); dfccsd = 11.22 sec*proc (1 test); dfccsd-grad = 38.81 sec*proc (1 test); dfccsd-t-grad = 46.08 sec*proc (1 test); dfccsdat = 18.08 sec*proc (1 test); dfccsdl = 12.77 sec*proc (1 test); dfccsdt = 8.61 sec*proc (1 test); dfep2 = 6.28 sec*proc (2 tests); dfmp2 = 177.01 sec*proc (11 tests); dfomp2 = 1556.95 sec*proc (7 tests); dfomp2.5 = 142.03 sec*proc (4 tests); dfomp3 = 178.00 sec*proc (4 tests); dfscf = 150.66 sec*proc (1 test); dft = 1457.60 sec*proc (27 tests); docs = 1.47 sec*proc (2 tests); ecp = 69.99 sec*proc (2 tests); fci = 12.53 sec*proc (2 tests); fcidump = 5.16 sec*proc (1 test); findif = 1019.26 sec*proc (5 tests); fnocc = 143.05 sec*proc (4 tests); freq = 1272.87 sec*proc (6 tests); gradient = 2551.58 sec*proc (16 tests); json",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:38930,test,tests,38930,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['test'],['tests']
Testability,wrap-db3; 389/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 2.26 sec; Start 211: mcscf1; 390/413 Test #138: dfmp2-grad3 ...................... Passed 4.40 sec; Start 176: docs-bases; 391/413 Test #310: pywrap-db3 ....................... Passed 0.78 sec; Start 123: dfccdl1; 392/413 Test #121: dfcasscf-sp ...................... Passed 4.24 sec; Start 6: ao-casscf-sp; 393/413 Test #313: rasci-h2o ........................ Passed 2.32 sec; Start 311: pywrap-molecule; 394/413 Test #122: dfccd1 ........................... Passed 3.58 sec; Start 210: matrix1; 395/413 Test #211: mcscf1 ........................... Passed 1.18 sec; Start 162: dft-grac; 396/413 Test #176: docs-bases ....................... Passed 0.64 sec; Start 88: cepa1; 397/413 Test #330: scf-upcast-custom-basis .......... Passed 2.28 sec; Start 103: cubeprop-frontier; 398/413 Test #8: castup1 .......................... Passed 2.22 sec; 399/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.07 sec; 400/413 Test #210: matrix1 .......................... Passed 0.69 sec; 401/413 Test #132: dfmp2-2 .......................... Passed 2.57 sec; 402/413 Test #173: dft2 ............................. Passed 5.31 sec; 403/413 Test #136: dfmp2-grad1 ...................... Passed 3.52 sec; 404/413 Test #311: pywrap-molecule .................. Passed 1.32 sec; 405/413 Test #162: dft-grac ......................... Passed 2.27 sec; 406/413 Test #103: cubeprop-frontier ................ Passed 2.05 sec; 407/413 Test #123: dfccdl1 .......................... Passed 3.82 sec; 408/413 Test #381: cc-module ........................ Passed 199.69 sec; 409/413 Test #6: ao-casscf-sp ..................... Passed 5.19 sec; 410/413 Test #88: cepa1 ............................ Passed 7.42 sec; 411/413 Test #9: castup2 .......................... Passed 9.37 sec; 412/413 Test #18: cbs-xtpl-func .................... Passed 1715.47 sec; 413/413 Test #320: sapt4 ............................ Passed 1667.29 sec. 100% tests pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:37607,Test,Test,37607,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,wrap-molecule .................. Passed 1.03 sec; Start 310: rasci-c2-active; 299/411 Test #310: rasci-c2-active .................. Passed 7.15 sec; Start 311: rasci-h2o; 300/411 Test #280: opt-irc-1 ........................ Passed 113.20 sec; Start 312: rasci-ne; 301/411 Test #311: rasci-h2o ........................ Passed 2.14 sec; Start 313: rasscf-sp; 302/411 Test #103: dcft-grad1 ....................... Passed 694.99 sec; Start 314: sad1; 303/411 Test #314: sad1 ............................. Passed 4.30 sec; Start 315: sapt1; 304/411 Test #307: pywrap-db1 ....................... Passed 43.56 sec; Start 317: sapt3; 305/411 Test #313: rasscf-sp ........................ Passed 18.30 sec; Start 319: sapt5; 306/411 Test #299: pywrap-alias ..................... Passed 96.68 sec; Start 320: sapt6; 307/411 Test #315: sapt1 ............................ Passed 18.51 sec; Start 321: sapt-dft-api; 308/411 Test #312: rasci-ne ......................... Passed 34.65 sec; Start 322: sapt-dft-lrc; 309/411 Test #302: pywrap-cbs1 ...................... Passed 113.59 sec; Start 323: sapt7; 310/411 Test #321: sapt-dft-api ..................... Passed 19.65 sec; Start 324: sapt8; 311/411 Test #322: sapt-dft-lrc ..................... Passed 21.96 sec; Start 326: scf-ecp; 312/411 Test #324: sapt8 ............................ Passed 14.45 sec; Start 327: scf-guess-read1; 313/411 Test #327: scf-guess-read1 .................. Passed 2.09 sec; Start 328: scf-upcast-custom-basis; 314/411 Test #328: scf-upcast-custom-basis .......... Passed 2.57 sec; Start 329: scf-guess-read2; 315/411 Test #162: dft-grad-lr3 ..................... Passed 457.07 sec; Start 330: scf-bs; 316/411 Test #330: scf-bs ........................... Passed 2.31 sec; Start 331: scf1; 317/411 Test #281: opt-irc-2 ........................ Passed 181.13 sec; Start 332: scf-occ; 318/411 Test #329: scf-guess-read2 .................. Passed 8.37 sec; Start 333: scf2; 319/411 Test #331: scf1 ............................. Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:28849,Test,Test,28849,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,"wrap-molecule .................. Passed 1.32 sec; 405/413 Test #162: dft-grac ......................... Passed 2.27 sec; 406/413 Test #103: cubeprop-frontier ................ Passed 2.05 sec; 407/413 Test #123: dfccdl1 .......................... Passed 3.82 sec; 408/413 Test #381: cc-module ........................ Passed 199.69 sec; 409/413 Test #6: ao-casscf-sp ..................... Passed 5.19 sec; 410/413 Test #88: cepa1 ............................ Passed 7.42 sec; 411/413 Test #9: castup2 .......................... Passed 9.37 sec; 412/413 Test #18: cbs-xtpl-func .................... Passed 1715.47 sec; 413/413 Test #320: sapt4 ............................ Passed 1667.29 sec. 100% tests passed, 0 tests failed out of 413. Label Time Summary:; adc = 63.93 sec*proc (2 tests); autotest = 2243.46 sec*proc (26 tests); cart = 19628.65 sec*proc (123 tests); cas = 55.52 sec*proc (1 test); casscf = 136.00 sec*proc (11 tests); cbs = 2995.42 sec*proc (11 tests); cc = 16264.56 sec*proc (65 tests); cdomp2 = 44.95 sec*proc (2 tests); cepa = 273.82 sec*proc (7 tests); ci = 112.43 sec*proc (8 tests); cisd = 194.15 sec*proc (7 tests); cookbook = 255.11 sec*proc (1 test); cubeprop = 22.22 sec*proc (3 tests); dcft = 5487.46 sec*proc (13 tests); df = 2798.80 sec*proc (38 tests); dfccd = 3.58 sec*proc (1 test); dfccd-grad = 19.08 sec*proc (1 test); dfccdl = 3.82 sec*proc (1 test); dfccsd = 9.09 sec*proc (1 test); dfccsd-grad = 37.30 sec*proc (1 test); dfccsd-t-grad = 69.23 sec*proc (1 test); dfccsdat = 40.48 sec*proc (1 test); dfccsdl = 16.34 sec*proc (1 test); dfccsdt = 13.79 sec*proc (1 test); dfep2 = 6.01 sec*proc (2 tests); dfmp2 = 180.70 sec*proc (11 tests); dfomp2 = 1691.18 sec*proc (7 tests); dfomp2.5 = 230.29 sec*proc (4 tests); dfomp3 = 245.73 sec*proc (4 tests); dfscf = 131.53 sec*proc (1 test); dft = 1423.44 sec*proc (27 tests); docs = 1.42 sec*proc (2 tests); ecp = 65.92 sec*proc (2 tests); fci = 13.01 sec*proc (2 tests); fcidump = 6.38 sec*proc (1 test); findif = 982.4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:38902,test,tests,38902,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['test'],['tests']
Testability,wrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Start 23: cc10; 152/415 Test #211: matrix1 .......................... Passed 1.16 sec; Start 24: cc11; 153/415 Test #10: castup3 .......................... Passed 13.51 sec; Start 25: cc12; 154/415 Test #9: castup2 .......................... Passed 13.71 sec; Start 26: cc13; 155/415 Test #1: adc1 ............................. Passed 24.99 sec; Start 29: cc13c; 156/415 Test #2: adc2 ............................. Passed 37.11 sec; Start 30: cc13d; 157/415 Test #24: cc11 ............................. Passed 50.15 sec; Start 31: cc14; 158/415 Test #23: cc10 ............................. Passed 71.48 sec; Start 33: cc16; 159/415 Test #25: cc12 ............................. Passed 71.24 sec; Start 36: cc19; 160/415 Test #20: cbs-xtpl-wrapper ................. Passed 94.08 sec; Start 37: cc2; 161/415 Test #12: cbs-parser ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:14445,Test,Test,14445,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,wrap-molecule; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.18 sec; Start 404: json-schema-1-properties; 377/411 Test #411: skeletonwavefunction ............. Passed 0.97 sec; Start 406: skeletonaointegrals; 378/411 Test #398: json-v11-gradient ................ Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.10 sec; Start 334: scf3; 392/411 Test #353: tu1-h2o-energy ................... Passed 1.26 sec; Start 209: mcscf1; 393/411 Test #352: stability2 ....................... Passed 1.16 sec; Start 211: mcscf3; 394/411 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 409: skeletonscf; 395/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:36084,Test,Test,36084,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,wrapper ................. Passed 37.42 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 6.42 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 3.59 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 3.22 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 3.59 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 18.49 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 7.05 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 9.49 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 15.84 sec; Start 29: cc14; 41/411 Test #29: cc14 ............................. Passed 22.66 sec; Start 30: cc15; 42/411 Test #30: cc15 ............................. Passed 5.86 sec; Start 31: cc16; 43/411 Test #31: cc16 ............................. Passed 13.43 sec; Start 32: cc17; 44/411 Test #32: cc17 ............................. Passed 6.00 sec; Start 33: cc18; 45/411 Test #33: cc18 ............................. Passed 7.69 sec; Start 34: cc19; 46/411 Test #34: cc19 ............................. Passed 11.80 sec; Start 35: cc2; 47/411 Test #35: cc2 .............................. Passed 31.59 sec; Start 36: cc21; 48/411 Test #36: cc21 ............................. Passed 26.46 sec; Start 37: cc22; 49/411 Test #37: cc22 ............................. Passed 3.51 sec; Start 38: cc23; 50/411 Test #38: cc23 ............................. Passed 30.16 sec; Start 39: cc24; 51/411 Test #39: cc24 ............................. Passed 35.50 sec; Start 40: cc25; 52/411 Test #40: cc25 ............................. Passed 28.09 sec; Start 41: cc26; 53/411 Test #41: cc26 ............................. Passed 29.13 sec; Start 42: cc27; 54/411 Test #42: cc27 ............................. Passed 26.29 sec; Start 43: cc28; 55/411 Test #43: cc28 ............................. Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:4029,Test,Test,4029,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:2781,log,log,2781,https://psicode.org,https://github.com/psi4/psi4/issues/2572,4,['log'],['log']
Testability,x-transforms ........ Passed 10.40 sec; Start 133: dfmp2-4; 250/412 Test #158: dfrasscf-sp ...................... Passed 8.78 sec; Start 136: dfmp2-grad2; 251/412 Test #89: cepa2 ............................ Passed 12.51 sec; Start 15: cbs-xtpl-freq; 252/412 Test #140: dfomp2-1 ......................... Passed 10.48 sec; Start 102: cubeprop; 253/412 Test #151: dfomp2p5-1 ....................... Passed 24.75 sec; Start 366: cubeprop-esp; 254/412 Test #227: mp2-1 ............................ Passed 10.58 sec; Start 4: casscf-semi; 255/412 Test #10: castup3 .......................... Passed 11.31 sec; Start 87: cepa0-grad2; 256/412 Test #54: cc37 ............................. Passed 17.38 sec; Start 125: dfccsdl1; 257/412 Test #38: cc22 ............................. Passed 24.75 sec; Start 368: scf-hess1; 258/412 Test #99: cisd-sp .......................... Passed 10.88 sec; Start 256: omp2p5-grad1; 259/412 Test #271: opt4 ............................. Passed 9.26 sec; Start 296: psithon1; 260/412 Test #9: castup2 .......................... Passed 11.25 sec; Start 181: fsapt-terms; 261/412 Test #136: dfmp2-grad2 ...................... Passed 7.61 sec; Start 244: ocepa1; 262/412 Test #133: dfmp2-4 .......................... Passed 8.97 sec; Start 263: omp3-grad1; 263/412 Test #51: cc34 ............................. Passed 19.29 sec; Start 162: dft-ghost; 264/412 Test #15: cbs-xtpl-freq .................... Passed 8.51 sec; Start 371: scf-coverage; 265/412 Test #4: casscf-semi ...................... Passed 7.58 sec; Start 199: freq-isotope2; 266/412 Test #87: cepa0-grad2 ...................... Passed 7.42 sec; Start 311: rasci-c2-active; 267/412 Test #256: omp2p5-grad1 ..................... Passed 7.89 sec; Start 120: dfcasscf-sp; 268/412 Test #366: cubeprop-esp ..................... Passed 9.71 sec; Start 185: fci-dipole; 269/412 Test #102: cubeprop ......................... Passed 10.29 sec; Start 186: fci-h2o; 270/412 Test #125: dfccsdl1 ......................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:24383,Test,Test,24383,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,x-transforms ........ Passed 10.43 sec; Start 227: mp2-1; 243/412 Test #373: dft-custom-hybrid ................ Passed 13.48 sec; Start 109: dcft2; 244/412 Test #102: cubeprop ......................... Passed 11.81 sec; Start 336: scf4; 245/412 Test #269: opt2-fd .......................... Passed 13.50 sec; Start 368: scf-hess1; 246/412 Test #99: cisd-sp .......................... Passed 13.54 sec; Start 9: castup2; 247/412 Test #200: fnocc1 ........................... Passed 20.84 sec; Start 366: cubeprop-esp; 248/412 Test #342: soscf-ref ........................ Passed 15.51 sec; Start 123: dfccd-grad1; 249/412 Test #128: dfccsdt1 ......................... Passed 8.98 sec; Start 199: freq-isotope2; 250/412 Test #267: opt1-fd .......................... Passed 17.28 sec; Start 386: psi4numpy-fci; 251/412 Test #144: dfomp2-grad1 ..................... Passed 21.27 sec; Start 256: omp2p5-grad1; 252/412 Test #140: dfomp2-1 ......................... Passed 9.85 sec; Start 15: cbs-xtpl-freq; 253/412 Test #242: ocepa-grad1 ...................... Passed 15.68 sec; Start 185: fci-dipole; 254/412 Test #202: fnocc3 ........................... Passed 22.03 sec; Start 133: dfmp2-4; 255/412 Test #271: opt4 ............................. Passed 10.07 sec; Start 181: fsapt-terms; 256/412 Test #227: mp2-1 ............................ Passed 10.06 sec; Start 10: castup3; 257/412 Test #109: dcft2 ............................ Passed 9.00 sec; Start 162: dft-ghost; 258/412 Test #386: psi4numpy-fci .................... Passed 5.38 sec; Start 186: fci-h2o; 259/412 Test #366: cubeprop-esp ..................... Passed 9.16 sec; Start 6: ao-casscf-sp; 260/412 Test #368: scf-hess1 ........................ Passed 9.70 sec; Start 136: dfmp2-grad2; 261/412 Test #336: scf4 ............................. Passed 11.36 sec; Start 138: dfmp2-grad4; 262/412 Test #256: omp2p5-grad1 ..................... Passed 6.75 sec; Start 142: dfomp2-3; 263/412 Test #9: castup2 .......................... Passed 10.67 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:23755,Test,Test,23755,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,x-transforms ........ Passed 12.40 sec; Start 366: cubeprop-esp; 254/412 Test #296: psithon1 ......................... Passed 10.55 sec; Start 125: dfccsdl1; 255/412 Test #271: opt4 ............................. Passed 10.22 sec; Start 254: omp2p5-1; 256/412 Test #227: mp2-1 ............................ Passed 10.20 sec; Start 124: dfccsd1; 257/412 Test #191: fci-coverage ..................... Passed 7.94 sec; Start 225: molden2; 258/412 Test #336: scf4 ............................. Passed 13.35 sec; Start 263: omp3-grad1; 259/412 Test #140: dfomp2-1 ......................... Passed 9.80 sec; Start 199: freq-isotope2; 260/412 Test #128: dfccsdt1 ......................... Passed 8.61 sec; Start 224: molden1; 261/412 Test #368: scf-hess1 ........................ Passed 11.09 sec; Start 138: dfmp2-grad4; 262/412 Test #4: casscf-semi ...................... Passed 9.22 sec; Start 15: cbs-xtpl-freq; 263/412 Test #254: omp2p5-1 ......................... Passed 7.65 sec; Start 133: dfmp2-4; 264/412 Test #366: cubeprop-esp ..................... Passed 9.64 sec; Start 10: castup3; 265/412 Test #9: castup2 .......................... Passed 16.02 sec; Start 181: fsapt-terms; 266/412 Test #225: molden2 .......................... Passed 7.78 sec; Start 330: scf-guess-read2; 267/412 Test #263: omp3-grad1 ....................... Passed 7.71 sec; Start 162: dft-ghost; 268/412 Test #109: dcft2 ............................ Passed 14.06 sec; Start 185: fci-dipole; 269/412 Test #224: molden1 .......................... Passed 7.55 sec; Start 233: mp2p5-grad2; 270/412 Test #125: dfccsdl1 ......................... Passed 12.77 sec; Start 256: omp2p5-grad1; 271/412 Test #199: freq-isotope2 .................... Passed 9.75 sec; Start 270: opt3; 272/412 Test #124: dfccsd1 .......................... Passed 11.22 sec; Start 186: fci-h2o; 273/412 Test #123: dfccd-grad1 ...................... Passed 18.35 sec; Start 386: psi4numpy-fci; 274/412 Test #330: scf-guess-read2 .................. Passed 6,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:24762,Test,Test,24762,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,"x-transforms; 173/185 Test #505: python-3-index-transforms ........ Passed 56.49 sec; Start 506: python-mints13; 174/185 Test #506: python-mints13 ................... Passed 2.17 sec; Start 507: python-mints14; 175/185 Test #507: python-mints14 ................... Passed 2.67 sec; Start 508: python-cc-amps; 176/185 Test #508: python-cc-amps ................... Passed 31.08 sec; Start 509: python-databases; 177/185 Test #509: python-databases ................. Passed 50.67 sec; Start 510: json-schema-1-energy; 178/185 Test #510: json-schema-1-energy ............. Passed 3.74 sec; Start 514: json-schema-1-gradient; 179/185 Test #514: json-schema-1-gradient ........... Passed 2.98 sec; Start 518: dftd3-energy; 180/185 Test #518: dftd3-energy ..................... Passed 50.87 sec; Start 523: sapt0-d; 181/185 Test #523: sapt0-d .......................... Passed 440.00 sec; Start 524: fsapt-d; 182/185 Test #524: fsapt-d .......................... Passed 542.90 sec; Start 525: fsaptd-terms; 183/185 Test #525: fsaptd-terms .....................***Failed 17.57 sec; Start 526: dftd4-energy; 184/185 Test #526: dftd4-energy ..................... Passed 129.00 sec; Start 527: dftd4-r2scan; 185/185 Test #527: dftd4-r2scan .....................***Failed 9.40 sec. 95% tests passed, 9 tests failed out of 185. Label Time Summary:; addon = 189.28 sec*proc (3 tests); cart = 2407.47 sec*proc (55 tests); cas = 138.78 sec*proc (1 test); casscf = 84.46 sec*proc (11 tests); cbs = 262.77 sec*proc (9 tests); cc = 775.63 sec*proc (13 tests); cdomp2 = 41.72 sec*proc (2 tests); ci = 147.62 sec*proc (2 tests); cisd = 6.82 sec*proc (1 test); cubeprop = 28.89 sec*proc (2 tests); d2ints = 58.89 sec*proc (7 tests); dct = 22.51 sec*proc (3 tests); df = 324.56 sec*proc (15 tests); dfccd = 5.11 sec*proc (1 test); dfccsd = 7.31 sec*proc (1 test); dfccsd-grad = 14.46 sec*proc (1 test); dfccsd-t-grad = 13.06 sec*proc (1 test); dfccsdl = 7.10 sec*proc (1 test); dfep2 = 10.99 sec*proc (2 tests); dfmp2 = 198",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:17231,Test,Test,17231,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['Test'],['Test']
Testability,x1; 198/411 Test #208: matrix1 .......................... Passed 0.55 sec; Start 209: mcscf1; 199/411 Test #209: mcscf1 ........................... Passed 0.92 sec; Start 210: mcscf2; 200/411 Test #210: mcscf2 ........................... Passed 1.44 sec; Start 211: mcscf3; 201/411 Test #196: fd-gradient ...................... Passed 25.19 sec; Start 212: mints1; 202/411 Test #211: mcscf3 ........................... Passed 1.15 sec; Start 213: mints2; 203/411 Test #161: dft-grad-lr2 ..................... Passed 96.78 sec; Start 214: mints3; 204/411 Test #212: mints1 ........................... Passed 0.68 sec; Start 215: mints4; 205/411 Test #215: mints4 ........................... Passed 0.56 sec; Start 216: mints5; 206/411 Test #214: mints3 ........................... Passed 1.08 sec; Start 217: mints6; 207/411 Test #216: mints5 ........................... Passed 0.62 sec; Start 218: mints8; 208/411 Test #213: mints2 ........................... Passed 2.95 sec; Start 219: mints-benchmark; 209/411 Test #202: fnocc4 ........................... Passed 19.45 sec; Start 220: mints-helper; 210/411 Test #200: fnocc2 ........................... Passed 23.63 sec; Start 221: mints9; 211/411 Test #220: mints-helper ..................... Passed 1.29 sec; Start 222: mints10; 212/411 Test #221: mints9 ........................... Passed 2.01 sec; Start 223: molden1; 213/411 Test #222: mints10 .......................... Passed 2.04 sec; Start 224: molden2; 214/411 Test #207: gibbs ............................ Passed 16.26 sec; Start 225: mom; 215/411 Test #217: mints6 ........................... Passed 12.58 sec; Start 226: mp2-1; 216/411 Test #223: molden1 .......................... Passed 2.95 sec; Start 227: mp2-def2; 217/411 Test #224: molden2 .......................... Passed 2.82 sec; Start 228: mp2-grad1; 218/411 Test #225: mom .............................. Passed 3.13 sec; Start 229: mp2-grad2; 219/411 Test #218: mints8 ........................... Passed 15.91 sec; Start 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:19377,benchmark,benchmark,19377,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,2,"['Test', 'benchmark']","['Test', 'benchmark']"
Testability,x1; 206/411 Test #208: matrix1 .......................... Passed 0.55 sec; Start 209: mcscf1; 207/411 Test #209: mcscf1 ........................... Passed 0.98 sec; Start 210: mcscf2; 208/411 Test #200: fnocc2 ........................... Passed 53.28 sec; Start 211: mcscf3; 209/411 Test #210: mcscf2 ........................... Passed 1.72 sec; Start 212: mints1; 210/411 Test #212: mints1 ........................... Passed 0.52 sec; Start 213: mints2; 211/411 Test #211: mcscf3 ........................... Passed 1.10 sec; Start 214: mints3; 212/411 Test #214: mints3 ........................... Passed 1.03 sec; Start 215: mints4; 213/411 Test #215: mints4 ........................... Passed 0.51 sec; Start 216: mints5; 214/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 217: mints6; 215/411 Test #213: mints2 ........................... Passed 3.45 sec; Start 218: mints8; 216/411 Test #207: gibbs ............................ Passed 20.68 sec; Start 219: mints-benchmark; 217/411 Test #217: mints6 ........................... Passed 12.24 sec; Start 220: mints-helper; 218/411 Test #220: mints-helper ..................... Passed 1.95 sec; Start 221: mints9; 219/411 Test #221: mints9 ........................... Passed 1.96 sec; Start 222: mints10; 220/411 Test #218: mints8 ........................... Passed 17.33 sec; Start 223: molden1; 221/411 Test #222: mints10 .......................... Passed 2.31 sec; Start 224: molden2; 222/411 Test #206: ghosts ........................... Passed 35.46 sec; Start 225: mom; 223/411 Test #224: molden2 .......................... Passed 4.76 sec; Start 226: mp2-1; 224/411 Test #223: molden1 .......................... Passed 5.33 sec; Start 227: mp2-def2; 225/411 Test #225: mom .............................. Passed 4.07 sec; Start 228: mp2-grad1; 226/411 Test #228: mp2-grad1 ........................ Passed 3.01 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.82 sec; Start 230,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:20007,benchmark,benchmark,20007,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,2,"['Test', 'benchmark']","['Test', 'benchmark']"
Testability,x1; 206/411 Test #208: matrix1 .......................... Passed 0.55 sec; Start 209: mcscf1; 207/411 Test #209: mcscf1 ........................... Passed 1.10 sec; Start 210: mcscf2; 208/411 Test #210: mcscf2 ........................... Passed 1.64 sec; Start 211: mcscf3; 209/411 Test #211: mcscf3 ........................... Passed 0.97 sec; Start 212: mints1; 210/411 Test #212: mints1 ........................... Passed 0.62 sec; Start 213: mints2; 211/411 Test #213: mints2 ........................... Passed 3.17 sec; Start 214: mints3; 212/411 Test #214: mints3 ........................... Passed 1.12 sec; Start 215: mints4; 213/411 Test #215: mints4 ........................... Passed 0.58 sec; Start 216: mints5; 214/411 Test #207: gibbs ............................ Passed 21.62 sec; Start 217: mints6; 215/411 Test #216: mints5 ........................... Passed 0.65 sec; Start 218: mints8; 216/411 Test #200: fnocc2 ........................... Passed 54.94 sec; Start 219: mints-benchmark; 217/411 Test #206: ghosts ........................... Passed 34.38 sec; Start 220: mints-helper; 218/411 Test #220: mints-helper ..................... Passed 1.34 sec; Start 221: mints9; 219/411 Test #221: mints9 ........................... Passed 2.00 sec; Start 222: mints10; 220/411 Test #222: mints10 .......................... Passed 1.63 sec; Start 223: molden1; 221/411 Test #217: mints6 ........................... Passed 16.04 sec; Start 224: molden2; 222/411 Test #218: mints8 ........................... Passed 18.09 sec; Start 225: mom; 223/411 Test #223: molden1 .......................... Passed 5.30 sec; Start 226: mp2-1; 224/411 Test #225: mom .............................. Passed 3.92 sec; Start 227: mp2-def2; 225/411 Test #224: molden2 .......................... Passed 6.41 sec; Start 228: mp2-grad1; 226/411 Test #228: mp2-grad1 ........................ Passed 4.16 sec; Start 229: mp2-grad2; 227/411 Test #226: mp2-1 ............................ Passed 12.01 sec; Start 23,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:20006,benchmark,benchmark,20006,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,2,"['Test', 'benchmark']","['Test', 'benchmark']"
Testability,x1; 206/411 Test #208: matrix1 .......................... Passed 0.63 sec; Start 209: mcscf1; 207/411 Test #209: mcscf1 ........................... Passed 1.56 sec; Start 210: mcscf2; 208/411 Test #210: mcscf2 ........................... Passed 1.68 sec; Start 211: mcscf3; 209/411 Test #211: mcscf3 ........................... Passed 0.79 sec; Start 212: mints1; 210/411 Test #212: mints1 ........................... Passed 0.71 sec; Start 213: mints2; 211/411 Test #213: mints2 ........................... Passed 2.69 sec; Start 214: mints3; 212/411 Test #214: mints3 ........................... Passed 1.19 sec; Start 215: mints4; 213/411 Test #215: mints4 ........................... Passed 0.68 sec; Start 216: mints5; 214/411 Test #200: fnocc2 ........................... Passed 52.96 sec; Start 217: mints6; 215/411 Test #216: mints5 ........................... Passed 1.11 sec; Start 218: mints8; 216/411 Test #217: mints6 ........................... Passed 11.95 sec; Start 219: mints-benchmark; 217/411 Test #207: gibbs ............................ Passed 26.16 sec; Start 220: mints-helper; 218/411 Test #206: ghosts ........................... Passed 33.06 sec; Start 221: mints9; 219/411 Test #220: mints-helper ..................... Passed 1.84 sec; Start 222: mints10; 220/411 Test #218: mints8 ........................... Passed 16.42 sec; Start 223: molden1; 221/411 Test #221: mints9 ........................... Passed 2.04 sec; Start 224: molden2; 222/411 Test #222: mints10 .......................... Passed 2.32 sec; Start 225: mom; 223/411 Test #225: mom .............................. Passed 3.45 sec; Start 226: mp2-1; 224/411 Test #223: molden1 .......................... Passed 4.95 sec; Start 227: mp2-def2; 225/411 Test #224: molden2 .......................... Passed 4.83 sec; Start 228: mp2-grad1; 226/411 Test #228: mp2-grad1 ........................ Passed 1.97 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.77 sec; Start 23,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:20023,benchmark,benchmark,20023,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,2,"['Test', 'benchmark']","['Test', 'benchmark']"
Testability,x2c test added,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/141:4,test,test,4,https://psicode.org,https://github.com/psi4/psi4/pull/141,1,['test'],['test']
Testability,"x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:2873,test,test,2873,https://psicode.org,https://github.com/psi4/psi4/pull/627,2,['test'],['test']
Testability,"x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Tests. ![grid_osc](https://user-images.githubusercontent.com/1648640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old BS to newBS + ``ROBUST``: 2.9E-06 au; * MAD old BS to newBS + ``TREUTLER``: 4.5E-05; * (newBS) MAD ``NONE`` to ``ROBUST`` pruning: 1.4E-10 au; * (newBS) MAD ``NONE`` to ``TREUTLER`` pruning: 4.6E-05 au. ----; **timings** (speed ups); * benzene dimer : `ROBUST=1.16`; `TREUTLER=1.22`; PBE/aug-cc-pVTZ with grid (434,75); 16 Threads; . * C60 fullerene (C2h) : `ROBUST=1.33`; `TREUTLER=1.36`; PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; . ----; **tough case**; Molecule 35 from the MB16-43 ('mindless benchmarking') benchmark set. Mode",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:3287,benchmark,benchmark,3287,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['benchmark'],['benchmark']
Testability,"x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Tests. ![grid_osc](https://user-images.githubusercontent.com/1648640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:2231,test,testing,2231,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['test'],['testing']
Testability,"x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Tests. ![grid_osc](https://user-images.githubusercontent.com/1648640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:2633,benchmark,benchmarks,2633,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['benchmark'],['benchmarks']
Testability,"x_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: !\n! truncated \\UXXXXXXXX escape !\n! !\n!----------------------------------------------------------------------------------!\n\n'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228:3176,log,logger,3176,https://psicode.org,https://github.com/psi4/psi4/issues/2228,1,['log'],['logger']
Testability,"xception::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the corre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:21919,test,tests,21919,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['test'],['tests']
Testability,xcitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_exci,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:4003,test,tests,4003,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['test'],['tests']
Testability,"xing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to `TwoBodyAOInt`, `initialize_sieve`, which allows for manual initialization of screening variables via `create_sieve_pair_info()` needed for JK builds.; - [X] Uses the above function to fix combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` which were broken.; - [X] Updates the `test_comprehensive_jk_screening.py` and `test_erisieve.py` test to account for the previously-described fixes. ## Questions; -[] Should we keep the `initialize_sieve` name? I named it as such, because it is basically a light wrapper to manually call `create_sieve_pair_info`. But the name of ""sieve"" might be objectionable. ## Checklist; - [X] ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:1642,test,test,1642,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['test'],['test']
Testability,"xperimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old BS to newBS + ``ROBUST``: 2.9E-06 au; * MAD old BS to newBS + ``TREUTLER``: 4.5E-05; * (newBS) MAD ``NONE`` to ``ROBUST`` pruning: 1.4E-10 au; * (newBS) MAD ``NONE`` to ``TREUTLER`` pruning: 4.6E-05 au. ----; **timings** (speed ups); * benzene dimer : `ROBUST=1.16`; `TREUTLER=1.22`; PBE/aug-cc-pVTZ with grid (434,75); 16 Threads; . * C60 fullerene (C2h) : `ROBUST=1.33`; `TREUTLER=1.36`; PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; . ----; **tough case**; Molecule 35 from the MB16-43 ('mindless benchmarking') benchmark set. Modelling following reaction:; `2x 35 + 20x H2 -> 2x LIH + 4x BH4 + 4x CH4 + O2 + 4x AlH4 + 2x SiH4 + P2 + CL2`; In essence, a diverse inorganic, main group chemistry reaction.; level of theory: PBE/def2-TZVP with (434,85) grid.; link to input file: https://gist.github.com/hokru/408873d71efb522f7de1f0cfe0cf9da0. _reaction energy_ ; * dev. old BS to new BS: -0.0011 kcal/mol ; * (newBS) `NONE` to `ROBUST`: -0.0003 kcal/mol; * (newBS) `NONE` to `TREUTLER`: 0.94978 kcal/mol (0.5 % of a reaction energy of 188 kcal/mol !); * speed-ups: `ROBUST=1.33 `; `TREULTER=1.36`. _absolute energy molecule 35_; * dev. old BS to new BS: 3.41e-07; * (newBS) `NONE` to `ROBUST`: 4.93e-07; * (newBS) `NONE` to `TREUTLER`: 1.46E-04. _gradient energy molecule 35_; * (newBS) MAD `NONE` to `ROBUST`: ~ 1E-7; * (newBS) MAD `NONE` to `TREUTLER`: ~ 1E-05. _grid point reduction molecue 35_; * ``ROBUST = 30.9 %``; * ``TREUTLER = 45.8 %``",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:4227,benchmark,benchmarking,4227,https://psicode.org,https://github.com/psi4/psi4/pull/1591,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,xtern2 .......................... Passed 37.34 sec; Start 249: omp2-3; 192/412 Test #129: dfccsdat1 ........................ Passed 40.97 sec; Start 38: cc22; 193/412 Test #323: sapt-dft-lrc ..................... Passed 23.16 sec; Start 292: psimrcc-fd-freq1; 194/412 Test #291: psimrcc-ccsd_t-4 ................. Passed 19.77 sec; Start 54: cc37; 195/412 Test #208: gibbs ............................ Passed 46.18 sec; Start 316: sapt1; 196/412 Test #144: dfomp2-grad1 ..................... Passed 34.46 sec; Start 151: dfomp2p5-1; 197/412 Test #248: omp2-2 ........................... Passed 45.93 sec; Start 24: cc12; 198/412 Test #259: omp3-2 ........................... Passed 44.46 sec; Start 177: extern1; 199/412 Test #7: casscf-sp ........................ Passed 59.09 sec; Start 239: nbody-intermediates; 200/412 Test #110: dcft3 ............................ Passed 51.48 sec; Start 170: dft-vv10; 201/412 Test #202: fnocc3 ........................... Passed 45.04 sec; Start 297: psithon2; 202/412 Test #200: fnocc1 ........................... Passed 38.26 sec; Start 322: sapt-dft-api; 203/412 Test #249: omp2-3 ........................... Passed 36.69 sec; Start 276: opt9; 204/412 Test #292: psimrcc-fd-freq1 ................. Passed 26.87 sec; Start 139: dfmp2-grad5; 205/412 Test #316: sapt1 ............................ Passed 18.67 sec; Start 302: pywrap-basis; 206/412 Test #38: cc22 ............................. Passed 46.75 sec; Start 154: dft-grad-lr1; 207/412 Test #54: cc37 ............................. Passed 30.27 sec; Start 166: dft-grad2; 208/412 Test #22: cc10 ............................. Passed 55.62 sec; Start 106: dcft-grad3; 209/412 Test #177: extern1 .......................... Passed 20.63 sec; Start 255: omp2p5-2; 210/412 Test #239: nbody-intermediates .............. Passed 22.97 sec; Start 5: casscf-sa-sp; 211/412 Test #322: sapt-dft-api ..................... Passed 18.13 sec; Start 325: sapt8; 212/412 Test #297: psithon2 ......................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:18988,Test,Test,18988,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,xtpl-alpha ................... Passed 179.59 sec; Start 388: cookbook-rohf-orb-rot; 26/413 Test #113: dcft5 ............................ Passed 229.73 sec; Start 322: sapt6; 27/413 Test #114: dcft6 ............................ Passed 160.14 sec; Start 283: opt-irc-2; 28/413 Test #112: dcft4 ............................ Passed 1041.80 sec; Start 59: cc41; 29/413 Test #388: cookbook-rohf-orb-rot ............ Passed 58.96 sec; Start 381: cc-module; 30/413 Test #361: tu6-cp-ne2 ....................... Passed 77.19 sec; Start 98: cisd-opt-fd; 31/413 Test #59: cc41 ............................. Passed 45.99 sec; Start 71: cc52; 32/413 Test #381: cc-module ........................ Passed 37.48 sec; Start 61: cc43; 33/413 Test #157: dft-grad-lr3 ..................... Passed 445.74 sec; Start 160: dfscf-bz2; 34/413 Test #61: cc43 ............................. Passed 19.60 sec; Start 304: pywrap-cbs1; 35/413 Test #283: opt-irc-2 ........................ Passed 112.82 sec; Start 92: cepa-module; 36/413 Test #304: pywrap-cbs1 ...................... Passed 29.80 sec; Start 28: cc13c; 37/413 Test #71: cc52 ............................. Passed 73.61 sec; Start 106: dcft-grad2; 38/413 Test #229: mp2-def2 ......................... Passed 421.03 sec; Start 349: sapt-dft2; 39/413 Test #322: sapt6 ............................ Passed 160.75 sec; Start 263: omp3-5; 40/413 Test #375: dft-custom-mgga .................. Passed 184.16 sec; Start 185: isapt2; 41/413 Test #28: cc13c ............................ Passed 24.58 sec; Start 27: cc13b; 42/413 Test #92: cepa-module ...................... Passed 37.99 sec; Start 117: dcft9; 43/413 Test #106: dcft-grad2 ....................... Passed 36.33 sec; Start 261: omp3-3; 44/413 Test #27: cc13b ............................ Passed 18.33 sec; Start 262: omp3-4; 45/413 Test #263: omp3-5 ........................... Passed 29.67 sec; Start 76: cc6; 46/413 Test #98: cisd-opt-fd ...................... Passed 125.67 sec; Start 146: dfomp2-grad2; 47/413 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:3719,Test,Test,3719,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,xtpl-energy .................. Passed 13.29 sec; Start 9: castup2; 248/412 Test #358: tu4-h2o-freq ..................... Passed 15.20 sec; Start 271: opt4; 249/412 Test #394: python-3-index-transforms ........ Passed 10.40 sec; Start 133: dfmp2-4; 250/412 Test #158: dfrasscf-sp ...................... Passed 8.78 sec; Start 136: dfmp2-grad2; 251/412 Test #89: cepa2 ............................ Passed 12.51 sec; Start 15: cbs-xtpl-freq; 252/412 Test #140: dfomp2-1 ......................... Passed 10.48 sec; Start 102: cubeprop; 253/412 Test #151: dfomp2p5-1 ....................... Passed 24.75 sec; Start 366: cubeprop-esp; 254/412 Test #227: mp2-1 ............................ Passed 10.58 sec; Start 4: casscf-semi; 255/412 Test #10: castup3 .......................... Passed 11.31 sec; Start 87: cepa0-grad2; 256/412 Test #54: cc37 ............................. Passed 17.38 sec; Start 125: dfccsdl1; 257/412 Test #38: cc22 ............................. Passed 24.75 sec; Start 368: scf-hess1; 258/412 Test #99: cisd-sp .......................... Passed 10.88 sec; Start 256: omp2p5-grad1; 259/412 Test #271: opt4 ............................. Passed 9.26 sec; Start 296: psithon1; 260/412 Test #9: castup2 .......................... Passed 11.25 sec; Start 181: fsapt-terms; 261/412 Test #136: dfmp2-grad2 ...................... Passed 7.61 sec; Start 244: ocepa1; 262/412 Test #133: dfmp2-4 .......................... Passed 8.97 sec; Start 263: omp3-grad1; 263/412 Test #51: cc34 ............................. Passed 19.29 sec; Start 162: dft-ghost; 264/412 Test #15: cbs-xtpl-freq .................... Passed 8.51 sec; Start 371: scf-coverage; 265/412 Test #4: casscf-semi ...................... Passed 7.58 sec; Start 199: freq-isotope2; 266/412 Test #87: cepa0-grad2 ...................... Passed 7.42 sec; Start 311: rasci-c2-active; 267/412 Test #256: omp2p5-grad1 ..................... Passed 7.89 sec; Start 120: dfcasscf-sp; 268/412 Test #366: cubeprop-esp ..................... Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:24195,Test,Test,24195,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,xtpl-gradient ................ Passed 10.97 sec; Start 22: cc11; 190/411 Test #165: dft-grad2 ........................ Passed 16.52 sec; Start 301: pywrap-basis; 191/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.30 sec; Start 160: dft-grad-lr1; 192/411 Test #62: cc45 ............................. Passed 6.45 sec; Start 202: fnocc4; 193/411 Test #22: cc11 ............................. Passed 7.17 sec; Start 392: python-cc54; 194/411 Test #267: opt2 ............................. Passed 16.01 sec; Start 143: dfomp2-grad1; 195/411 Test #321: sapt-dft-api ..................... Passed 16.61 sec; Start 277: opt12; 196/411 Test #143: dfomp2-grad1 ..................... Passed 4.35 sec; Start 105: dcft-grad3; 197/411 Test #392: python-cc54 ...................... Passed 6.40 sec; Start 247: omp2-2; 198/411 Test #301: pywrap-basis ..................... Passed 13.95 sec; Start 350: dft-custom; 199/411 Test #160: dft-grad-lr1 ..................... Passed 16.31 sec; Start 282: opt-irc-3; 200/411 Test #247: omp2-2 ........................... Passed 5.32 sec; Start 169: dft-vv10; 201/411 Test #202: fnocc4 ........................... Passed 15.16 sec; Start 89: cepa3; 202/411 Test #105: dcft-grad3 ....................... Passed 10.18 sec; Start 138: dfmp2-grad5; 203/411 Test #350: dft-custom ....................... Passed 11.78 sec; Start 200: fnocc2; 204/411 Test #277: opt12 ............................ Passed 15.67 sec; Start 218: mints8; 205/411 Test #89: cepa3 ............................ Passed 5.42 sec; Start 238: nbody-intermediates; 206/411 Test #138: dfmp2-grad5 ...................... Passed 9.49 sec; Start 324: sapt8; 207/411 Test #169: dft-vv10 ......................... Passed 13.69 sec; Start 366: dft-smoke; 208/411 Test #282: opt-irc-3 ........................ Passed 14.84 sec; Start 128: dfccsdat1; 209/411 Test #128: dfccsdat1 ........................ Passed 2.98 sec; Start 164: dft-grad1; 210/411 Test #200: fnocc2 ........................... Passed 11.20 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:18553,Test,Test,18553,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,xtpl-opt ..................... Passed 44.69 sec; Start 170: dft1-alt; 83/411 Test #244: ocepa2 ........................... Passed 20.83 sec; Start 242: ocepa-grad2; 84/411 Test #100: ci-property ...................... Passed 45.67 sec; Start 153: dfomp2p5-grad2; 85/411 Test #389: python-pubchem ................... Passed 45.96 sec; Start 260: omp3-4; 86/411 Test #242: ocepa-grad2 ...................... Passed 16.91 sec; Start 2: adc2; 87/411 Test #153: dfomp2p5-grad2 ................... Passed 15.19 sec; Start 57: cc40; 88/411 Test #159: dft-grad-meta .................... Passed 48.81 sec; Start 249: omp2-4; 89/411 Test #260: omp3-4 ........................... Passed 19.43 sec; Start 151: dfomp2p5-2; 90/411 Test #297: pubchem1 ......................... Passed 45.74 sec; Start 299: pywrap-alias; 91/411 Test #170: dft1-alt ......................... Passed 42.06 sec; Start 219: mints-benchmark; 92/411 Test #57: cc40 ............................. Passed 20.87 sec; Start 237: nbody-he-cluster; 93/411 Test #151: dfomp2p5-2 ....................... Passed 13.25 sec; Start 348: sapt-compare; 94/411 Test #249: omp2-4 ........................... Passed 20.17 sec; Start 261: omp3-5; 95/411 Test #178: fsapt1 ........................... Passed 1845.18 sec; Start 107: dcft1; 96/411 Test #2: adc2 ............................. Passed 30.67 sec; Start 250: omp2-5; 97/411 Test #299: pywrap-alias ..................... Passed 26.27 sec; Start 59: cc42; 98/411 Test #107: dcft1 ............................ Passed 19.00 sec; Start 65: cc48; 99/411 Test #250: omp2-5 ........................... Passed 28.24 sec; Start 200: fnocc2; 100/411 Test #261: omp3-5 ........................... Passed 32.62 sec; Start 66: cc49; 101/411 Test #237: nbody-he-cluster ................. Passed 37.15 sec; Start 131: dfmp2-3; 102/411 Test #219: mints-benchmark .................. Passed 39.00 sec; Start 307: pywrap-db1; 103/411 Test #59: cc42 ............................. Passed 21.57 sec; Start 276: opt11; 104/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:8861,Test,Test,8861,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,xtpl-opt; 62/411 Test #41: cc26 ............................. Passed 280.38 sec; Start 29: cc14; 63/411 Test #19: cbs-xtpl-wrapper ................. Passed 77.77 sec; Start 42: cc27; 64/411 Test #74: cc5a ............................. Passed 97.39 sec; Start 276: opt11; 65/411 Test #318: sapt4 ............................ Passed 1909.66 sec; Start 47: cc31; 66/411 Test #276: opt11 ............................ Passed 105.52 sec; Start 273: opt7; 67/411 Test #17: cbs-xtpl-opt ..................... Passed 206.55 sec; Start 36: cc21; 68/411 Test #273: opt7 ............................. Passed 91.44 sec; Start 206: ghosts; 69/411 Test #110: dcft4 ............................ Passed 800.05 sec; Start 312: rasci-ne; 70/411 Test #206: ghosts ........................... Passed 33.57 sec; Start 359: tu6-cp-ne2; 71/411 Test #312: rasci-ne ......................... Passed 35.28 sec; Start 11: cbs-delta-energy; 72/411 Test #47: cc31 ............................. Passed 436.66 sec; Start 323: sapt7; 73/411 Test #323: sapt7 ............................ Passed 36.88 sec; Start 76: cc7; 74/411 Test #38: cc23 ............................. Passed 950.03 sec; Start 342: soscf-dft; 75/411 Test #342: soscf-dft ........................ Passed 35.67 sec; Start 129: dfmp2-1; 76/411 Test #129: dfmp2-1 .......................... Passed 36.11 sec; Start 237: nbody-he-cluster; 77/411 Test #29: cc14 ............................. Passed 989.95 sec; Start 31: cc16; 78/411 Test #40: cc25 ............................. Passed 1076.69 sec; Start 374: dft-custom-gga; 79/411 Test #237: nbody-he-cluster ................. Passed 88.19 sec; Start 259: omp3-3; 80/411 Test #374: dft-custom-gga ................... Passed 62.74 sec; Start 43: cc28; 81/411 Test #359: tu6-cp-ne2 ....................... Passed 858.79 sec; Start 106: dcft-grad4; 82/411 Test #106: dcft-grad4 ....................... Passed 51.14 sec; Start 264: opt-lindep-change; 83/411 Test #11: cbs-delta-energy ................. Passed 899.20 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:6988,Test,Test,6988,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,y ................. Passed 43.01 sec; Start 280: opt-irc-1; 84/411 Test #244: ocepa2 ........................... Passed 23.63 sec; Start 249: omp2-4; 85/411 Test #204: frac-ip-fitting .................. Passed 60.44 sec; Start 17: cbs-xtpl-opt; 86/411 Test #147: dfomp3-2 ......................... Passed 8.76 sec; Start 260: omp3-4; 87/411 Test #249: omp2-4 ........................... Passed 17.12 sec; Start 242: ocepa-grad2; 88/411 Test #260: omp3-4 ........................... Passed 18.29 sec; Start 100: ci-property; 89/411 Test #230: mp2-module ....................... Passed 43.19 sec; Start 299: pywrap-alias; 90/411 Test #242: ocepa-grad2 ...................... Passed 17.13 sec; Start 389: python-pubchem; 91/411 Test #19: cbs-xtpl-wrapper ................. Passed 43.72 sec; Start 159: dft-grad-meta; 92/411 Test #299: pywrap-alias ..................... Passed 17.75 sec; Start 313: rasscf-sp; 93/411 Test #17: cbs-xtpl-opt ..................... Passed 43.78 sec; Start 256: omp2p5-grad2; 94/411 Test #313: rasscf-sp ........................ Passed 6.08 sec; Start 46: cc30; 95/411 Test #280: opt-irc-1 ........................ Passed 59.45 sec; Start 297: pubchem1; 96/411 Test #256: omp2p5-grad2 ..................... Passed 10.51 sec; Start 57: cc40; 97/411 Test #100: ci-property ...................... Passed 45.85 sec; Start 59: cc42; 98/411 Test #46: cc30 ............................. Passed 20.77 sec; Start 261: omp3-5; 99/411 Test #57: cc40 ............................. Passed 11.83 sec; Start 2: adc2; 100/411 Test #389: python-pubchem ................... Passed 48.90 sec; Start 65: cc48; 101/411 Test #59: cc42 ............................. Passed 13.57 sec; Start 337: scf6; 102/411 Test #261: omp3-5 ........................... Passed 16.37 sec; Start 170: dft1-alt; 103/411 Test #159: dft-grad-meta .................... Passed 50.55 sec; Start 107: dcft1; 104/411 Test #107: dcft1 ............................ Passed 7.05 sec; Start 79: cc8b; 105/411 Test #65: cc48 ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:8880,Test,Test,8880,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,y ................... Passed 1.19 sec; Start 327: scf-guess-read1; 341/404 Test #116: ao-dfcasscf-sp ................... Passed 1.73 sec; Start 99: cisd-sp-2; 342/404 Test #8: castup1 .......................... Passed 1.29 sec; Start 95: cisd-h2o+-2; 343/404 Test #314: sad1 ............................. Passed 2.13 sec; Start 130: dfmp2-2; 344/404 Test #203: frac ............................. Passed 1.81 sec; Start 345: dfep2-2; 345/404 Test #93: cisd-h2o+-0 ...................... Passed 2.21 sec; Start 96: cisd-h2o-clpse; 346/404 Test #118: dfcasscf-fzc-sp .................. Passed 1.34 sec; Start 231: mp2p5-grad1; 347/404 Test #94: cisd-h2o+-1 ...................... Passed 1.65 sec; Start 356: scf-response1; 348/404 Test #327: scf-guess-read1 .................. Passed 1.34 sec; Start 362: x2c3; 349/404 Test #130: dfmp2-2 .......................... Passed 1.52 sec; Start 354: tu2-ch2-energy; 350/404 Test #99: cisd-sp-2 ........................ Passed 1.72 sec; Start 187: fci-h2o-fzcv; 351/404 Test #95: cisd-h2o+-2 ...................... Passed 1.68 sec; Start 228: mp2-grad1; 352/404 Test #96: cisd-h2o-clpse ................... Passed 1.12 sec; Start 330: scf-bs; 353/404 Test #345: dfep2-2 .......................... Passed 1.68 sec; Start 361: x2c2; 354/404 Test #231: mp2p5-grad1 ...................... Passed 1.32 sec; Start 403: json-schema-1-gradient; 355/404 Test #354: tu2-ch2-energy ................... Passed 0.81 sec; Start 221: mints9; 356/404 Test #356: scf-response1 .................... Passed 1.27 sec; Start 390: python-mints9; 357/404 Test #330: scf-bs ........................... Passed 0.89 sec; Start 395: python-mints13; 358/404 Test #362: x2c3 ............................. Passed 1.59 sec; Start 311: rasci-h2o; 359/404 Test #228: mp2-grad1 ........................ Passed 1.22 sec; Start 222: mints10; 360/404 Test #403: json-schema-1-gradient ........... Passed 1.26 sec; Start 349: sapt-sf1; 361/404 Test #187: fci-h2o-fzcv ..................... Passed 1.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:32601,Test,Test,32601,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,y .................... Passed 0.79 sec; Start 214: mints3; 388/411 Test #222: mints10 .......................... Passed 1.23 sec; Start 396: python-memdfjk; 389/411 Test #220: mints-helper ..................... Passed 1.06 sec; Start 334: scf3; 390/411 Test #209: mcscf1 ........................... Passed 0.64 sec; Start 382: psi4numpy-rhf; 391/411 Test #378: mints12 .......................... Passed 1.21 sec; Start 211: mcscf3; 392/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 308: pywrap-db3; 393/411 Test #334: scf3 ............................. Passed 0.74 sec; Start 212: mints1; 394/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 239: numpy-array-interface; 395/411 Test #214: mints3 ........................... Passed 1.07 sec; Start 409: skeletonscf; 396/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 216: mints5; 397/411 Test #211: mcscf3 ........................... Passed 0.69 sec; Start 364: options1; 398/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 175: docs-dft; 399/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 402: json-schema-1-throws; 400/411 Test #212: mints1 ........................... Passed 0.55 sec; Start 174: docs-bases; 401/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 215: mints4; 402/411 Test #239: numpy-array-interface ............ Passed 0.62 sec; Start 208: matrix1; 403/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 87: cepa1; 404/411 Test #364: options1 ......................... Passed 0.57 sec; 405/411 Test #175: docs-dft ......................... Passed 0.60 sec; 406/411 Test #402: json-schema-1-throws ............. Passed 0.56 sec; 407/411 Test #174: docs-bases ....................... Passed 0.53 sec; 408/411 Test #215: mints4 ........................... Passed 0.51 sec; 409/411 Test #208: matrix1 .......................... Passed 0.51 sec; 410/411 Test #87: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:37230,Test,Test,37230,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,y ..................... Passed 2.76 sec; Start 153: dfrasscf-sp; 144/401 Test #339: stability1 ....................... Passed 4.10 sec; Start 387: python-mints9; 145/401 Test #388: python-mints2 .................... Passed 3.43 sec; Start 392: python-mints13; 146/401 Test #387: python-mints9 .................... Passed 1.99 sec; Start 187: fcidump; 147/401 Test #392: python-mints13 ................... Passed 1.77 sec; Start 341: dfep2-2; 148/401 Test #355: x2c1 ............................. Passed 30.74 sec; Start 394: json-v11_energy; 149/401 Test #385: python-curve ..................... Passed 4.68 sec; Start 92: cisd-h2o+-0; 150/401 Test #350: tu3-h2o-opt ...................... Passed 5.00 sec; Start 357: x2c3; 151/401 Test #341: dfep2-2 .......................... Passed 2.07 sec; Start 247: omp2-grad1; 152/401 Test #145: dfomp3-1 ......................... Passed 13.90 sec; Start 138: dfomp2-1; 153/401 Test #153: dfrasscf-sp ...................... Passed 6.26 sec; Start 328: scf-occ; 154/401 Test #357: x2c3 ............................. Passed 2.03 sec; Start 356: x2c2; 155/401 Test #309: rasscf-sp ........................ Passed 18.23 sec; Start 133: dfmp2-grad1; 156/401 Test #92: cisd-h2o+-0 ...................... Passed 2.47 sec; Start 396: json-schema_0_energy; 157/401 Test #394: json-v11_energy .................. Passed 2.58 sec; Start 324: scf-upcast-custom-basis; 158/401 Test #124: dfccsd-grad1 ..................... Passed 22.59 sec; Start 118: dfcasscf-sp; 159/401 Test #187: fcidump .......................... Passed 3.69 sec; Start 8: castup1; 160/401 Test #328: scf-occ .......................... Passed 1.79 sec; Start 220: molden2; 161/401 Test #356: x2c2 ............................. Passed 1.69 sec; Start 239: ocepa1; 162/401 Test #247: omp2-grad1 ....................... Passed 2.44 sec; Start 323: scf-guess-read1; 163/401 Test #324: scf-upcast-custom-basis .......... Passed 1.58 sec; Start 351: scf-response1; 164/401 Test #8: castup1 ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:14365,Test,Test,14365,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,y ..................... Passed 21.32 sec; Start 137: dfmp2-grad3; 270/412 Test #181: fsapt-terms ...................... Passed 28.50 sec; Start 89: cepa2; 271/412 Test #158: dfrasscf-sp ...................... Passed 19.91 sec; Start 256: omp2p5-grad1; 272/412 Test #3: casscf-fzc-sp .................... Passed 20.64 sec; Start 138: dfmp2-grad4; 273/412 Test #332: scf1 ............................. Passed 22.53 sec; Start 125: dfccsdl1; 274/412 Test #172: dft2 ............................. Passed 23.07 sec; Start 84: cdomp2-1; 275/412 Test #137: dfmp2-grad3 ...................... Passed 19.93 sec; Start 87: cepa0-grad2; 276/412 Test #162: dft-ghost ........................ Passed 26.64 sec; Start 186: fci-h2o; 277/412 Test #89: cepa2 ............................ Passed 20.93 sec; Start 188: fci-h2o-fzcv; 278/412 Test #256: omp2p5-grad1 ..................... Passed 18.42 sec; Start 140: dfomp2-1; 279/412 Test #138: dfmp2-grad4 ...................... Passed 17.64 sec; Start 128: dfccsdt1; 280/412 Test #125: dfccsdl1 ......................... Passed 16.94 sec; Start 244: ocepa1; 281/412 Test #84: cdomp2-1 ......................... Passed 16.99 sec; Start 330: scf-guess-read2; 282/412 Test #87: cepa0-grad2 ...................... Passed 17.34 sec; Start 124: dfccsd1; 283/412 Test #188: fci-h2o-fzcv ..................... Passed 19.59 sec; Start 266: opt1; 284/412 Test #186: fci-h2o .......................... Passed 20.89 sec; Start 136: dfmp2-grad2; 285/412 Test #140: dfomp2-1 ......................... Passed 17.12 sec; Start 109: dcft2; 286/412 Test #128: dfccsdt1 ......................... Passed 17.32 sec; Start 180: fsapt2; 287/412 Test #244: ocepa1 ........................... Passed 17.21 sec; Start 185: fci-dipole; 288/412 Test #330: scf-guess-read2 .................. Passed 18.12 sec; Start 191: fci-coverage; 289/412 Test #124: dfccsd1 .......................... Passed 16.85 sec; Start 4: casscf-semi; 290/412 Test #136: dfmp2-grad2 ...................... Passed 16.64 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:26090,Test,Test,26090,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,y ...................... Passed 138.78 sec; Start 104: cubeprop; 28/185 Test #104: cubeprop ......................... Passed 11.86 sec; Start 106: decontract; 29/185 Test #106: decontract ....................... Passed 2.88 sec; Start 108: dct-grad2; 30/185 Test #108: dct-grad2 ........................ Passed 14.27 sec; Start 111: dct1; 31/185 Test #111: dct1 ............................. Passed 5.03 sec; Start 113: dct3; 32/185 Test #113: dct3 ............................. Passed 3.21 sec; Start 123: ao-dfcasscf-sp; 33/185 Test #123: ao-dfcasscf-sp ................... Passed 3.04 sec; Start 124: density-screen-1; 34/185 Test #124: density-screen-1 ................. Passed 2.89 sec; Start 126: dfcasscf-sa-sp; 35/185 Test #126: dfcasscf-sa-sp ................... Passed 24.45 sec; Start 127: dfcasscf-fzc-sp; 36/185 Test #127: dfcasscf-fzc-sp .................. Passed 4.55 sec; Start 128: dfcasscf-sp; 37/185 Test #128: dfcasscf-sp ...................... Passed 5.25 sec; Start 129: dfccd1; 38/185 Test #129: dfccd1 ........................... Passed 5.11 sec; Start 132: dfccsd1; 39/185 Test #132: dfccsd1 .......................... Passed 7.31 sec; Start 133: dfccsdl1; 40/185 Test #133: dfccsdl1 ......................... Passed 7.10 sec; Start 134: dfccsd-grad1; 41/185 Test #134: dfccsd-grad1 ..................... Passed 14.46 sec; Start 135: dfccsd-t-grad1; 42/185 Test #135: dfccsd-t-grad1 ................... Passed 13.06 sec; Start 138: dfmp2-1; 43/185 Test #138: dfmp2-1 .......................... Passed 74.50 sec; Start 143: dfmp2-fc; 44/185 Test #143: dfmp2-fc ......................... Passed 66.21 sec; Start 144: dfmp2-freq1; 45/185 Test #144: dfmp2-freq1 ...................... Passed 23.80 sec; Start 145: dfmp2-freq2; 46/185 Test #145: dfmp2-freq2 ...................... Passed 24.30 sec; Start 150: dfmp2-grad1; 47/185 Test #150: dfmp2-grad1 ...................... Passed 4.33 sec; Start 155: dfomp2-1; 48/185 Test #155: dfomp2-1 ......................... Passed 6.63 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:3479,Test,Test,3479,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['Test'],['Test']
Testability,"y 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== Address 0x18 is not stack'd, malloc'd or (recently) free'd; ==98805== ; ==98805== ; ==98805== Process terminating with default action of signal 11 (SIGSEGV); ==98805== Access not within mapped region at address 0x18; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805==",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:2572,test,test,2572,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['test'],['test']
Testability,y FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ___________________________________________________________________,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:4668,test,tests,4668,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['test'],['tests']
Testability,y FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ================================================,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:4501,test,tests,4501,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['test'],['tests']
Testability,"y harsh.; - [x] Mark diagonalizer functions `C_DSPEV(...)` and `C_DSYEV(...)` as `PSI_API`, to serve as a potential replacement for the lost functionality. Other LAPACK functions are already `PSI_API`, so this should not be any more burden Psi4-side. ### Archival; - [x] Add `ael.cc` to [psi4attic](https://github.com/psi4/psi4attic) **(merged https://github.com/psi4/psi4attic/pull/1)**; - [ ] Add `Wabei_RHF_FT2_a.cc` to [psi4attic](https://github.com/psi4/psi4attic). ### TODO; - [ ] Rework the remaining `Matrix::diagonalize` to only take references, and rework all callers to only pass references, eliminating pointer arguments. May touch: `dct/dct_memory.cc`, `libmints/cdsalclist.cc`, `libmints/molecule.cc`, ...; - [ ] `adc/prepare_tensors.cc` is now the only remaining caller of the Davidson solver in `libqt`. It has exactly one call site, and the solver is not `PSI_API`. Candidate for future cleanup. ## Questions; - [ ] Question1. ## Checklist; - [x] No new features; - [x] Almost the entire test suite passes, sans MRCC due to unrelated issues. Some runtime-loaded plugins are not covered.; ```; ========================================================================================================== short test summary info ==========================================================================================================; > FAILED ../tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > FAILED ../tests/pytests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; > FAILED ../tests/mrcc/optfreq/test_input.py::test_mrcc_optfreq - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > =========================================================================== 3 failed, 3726 passed, 173 skipped, 219",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:6267,test,test,6267,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['test'],['test']
Testability,"y loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplemen",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:2078,test,tests,2078,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['test'],['tests']
Testability,"y that can be accessed by plugins. One example is `psi::outfile`. Steps to recreate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805==",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:1045,test,test,1045,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['test'],['test']
Testability,"y the Intel-atop-GNU flags.) It'll be a `conda install psi4/label/dev::psi4-dev -c conda-forge` access. Thoughts on improving it?; 7. Those `devtools/*/*buildrun*yaml` env specs are semi-auto-generated from the ecosystem GHA. Are they handy enough to maintain and promote, even though they don't come with `cmake` lines?; 8. Any other build tools to support other workflows wanted? It's easier to set them up all at once. ### Psi4 Conda Packages at Present with Channels. Built psi4 packages are slightly off-topic, but I thought this could be a handy reference for the more exotic ones. Note that these don't have as many addons as previous `-c psi4` packages did. See https://github.com/orgs/psi4/projects/2 for the conda-forge progress tracker. * `linux-64`; * `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge` (GNU compilers, AM5 L2, MKL, all pythons); * `conda install psi4/label/dev::psi4 -c psi4/label/testing -c conda-forge` (Intel compilers, AM7 L2, MKL, even pythons); * `conda install psi4/label/testing::psi4=1.8a2=py310hfdeccc3_2 libblas=*=*<mkl|openblas|etc> -c conda-forge/label/libint_dev -c conda-forge` (GNU compilers, AM5 L2, choose-your-own BLAS/LAPACK https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation (add `libopenblas=*=*openmp*` with openblas), py310, not quite v1.8); * `win-64`; * `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge` (clang-cl compilers, AM5 L2 (w/o Hessian integrals, so it'll fall back to findif and some tests will fail unless exclude `d2ints` label), MKL, all pythons); * `osx-64`; * `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge` (Clang compilers, AM5 L2, MKL, all pythons); * `osx-arm64` ; * `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge` (Clang compilers, AM5 L2, OpenBLAS, all pythons); * `conda install psi4 libblas=*=*accelerate -c conda-forge/label/libint_dev -c conda-forge` (Clang compilers, AM5 L2, Acellerate BLAS, all pythons)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:6106,test,tests,6106,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['test'],['tests']
Testability,"y-array-interface ............ Passed 0.72 sec; 402/411 Test #174: docs-bases ....................... Passed 0.62 sec; 403/411 Test #175: docs-dft ......................... Passed 0.68 sec; 404/411 Test #215: mints4 ........................... Passed 0.63 sec; 405/411 Test #208: matrix1 .......................... Passed 0.56 sec; 406/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; 407/411 Test #402: json-schema-1-throws ............. Passed 0.54 sec; 408/411 Test #364: options1 ......................... Passed 0.58 sec; 409/411 Test #87: cepa1 ............................ Passed 1.69 sec; 410/411 Test #18: cbs-xtpl-func .................... Passed 1416.82 sec; 411/411 Test #318: sapt4 ............................ Passed 1680.10 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 56.67 sec*proc (2 tests); autotest = 2018.64 sec*proc (26 tests); cart = 19448.39 sec*proc (123 tests); cas = 58.63 sec*proc (1 test); casscf = 130.95 sec*proc (11 tests); cbs = 2775.51 sec*proc (10 tests); cc = 15156.58 sec*proc (65 tests); cdomp2 = 67.70 sec*proc (2 tests); cepa = 222.04 sec*proc (7 tests); ci = 109.70 sec*proc (8 tests); cisd = 189.39 sec*proc (7 tests); cookbook = 200.39 sec*proc (1 test); cubeprop = 18.11 sec*proc (2 tests); dcft = 5366.23 sec*proc (13 tests); df = 2660.25 sec*proc (38 tests); dfccd = 3.65 sec*proc (1 test); dfccd-grad = 7.89 sec*proc (1 test); dfccdl = 5.38 sec*proc (1 test); dfccsd = 2.50 sec*proc (1 test); dfccsd-grad = 58.61 sec*proc (1 test); dfccsd-t-grad = 49.75 sec*proc (1 test); dfccsdat = 13.69 sec*proc (1 test); dfccsdl = 5.69 sec*proc (1 test); dfccsdt = 12.58 sec*proc (1 test); dfep2 = 7.96 sec*proc (2 tests); dfmp2 = 181.37 sec*proc (11 tests); dfomp2 = 1655.18 sec*proc (7 tests); dfomp2.5 = 182.29 sec*proc (4 tests); dfomp3 = 257.66 sec*proc (4 tests); dfscf = 135.99 sec*proc (1 test); dft = 1395.19 sec*proc (27 tests); docs = 1.30 sec*proc (2 tests); ecp = 63.18 sec*proc (2 tests); fci = 14.46 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:38632,test,tests,38632,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['test'],['tests']
Testability,y-cphf ................... Passed 2.44 sec; Start 123: dfccdl1; 360/413 Test #358: scf-response1 .................... Passed 3.50 sec; Start 354: stability2; 361/413 Test #364: x2c3 ............................. Passed 3.89 sec; Start 224: mints10; 362/413 Test #121: dfcasscf-sp ...................... Passed 7.51 sec; Start 380: mints12; 363/413 Test #138: dfmp2-grad3 ...................... Passed 8.40 sec; Start 384: psi4numpy-rhf; 364/413 Test #97: cisd-h2o-clpse ................... Passed 3.90 sec; Start 104: decontract; 365/413 Test #334: scf-occ .......................... Passed 4.00 sec; Start 190: fci-tdm; 366/413 Test #6: ao-casscf-sp ..................... Passed 8.67 sec; Start 290: psimrcc-ccsd_t-2; 367/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 2.63 sec; Start 355: tu1-h2o-energy; 368/413 Test #345: stability1 ....................... Passed 4.39 sec; Start 223: mints9; 369/413 Test #136: dfmp2-grad1 ...................... Passed 8.06 sec; Start 222: mints-helper; 370/413 Test #122: dfccd1 ........................... Passed 6.37 sec; Start 351: sapt-sf1; 371/413 Test #384: psi4numpy-rhf .................... Passed 1.01 sec; Start 347: dfep2-2; 372/413 Test #380: mints12 .......................... Passed 1.28 sec; Start 332: scf-bs; 373/413 Test #354: stability2 ....................... Passed 2.35 sec; Start 216: mints3; 374/413 Test #224: mints10 .......................... Passed 2.23 sec; Start 289: psimrcc-ccsd_t-1; 375/413 Test #190: fci-tdm .......................... Passed 1.59 sec; Start 329: scf-guess-read1; 376/413 Test #355: tu1-h2o-energy ................... Passed 1.51 sec; Start 336: scf3; 377/413 Test #222: mints-helper ..................... Passed 1.51 sec; Start 132: dfmp2-2; 378/413 Test #104: decontract ....................... Passed 1.91 sec; Start 356: tu2-ch2-energy; 379/413 Test #123: dfccdl1 .......................... Passed 3.74 sec; Start 300: pubchem2; 380/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.87 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:34846,Test,Test,34846,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,y-dfmp2 .................. Passed 2.25 sec; Start 385: psi4numpy-rhf-gradient; 347/413 Test #411: skeletonscf ...................... Passed 1.24 sec; Start 363: x2c2; 348/413 Test #365: zaptn-nh2 ........................ Passed 2.63 sec; Start 295: psimrcc-pt2; 349/413 Test #173: dft2 ............................. Passed 5.66 sec; Start 335: scf2; 350/413 Test #237: mp2-property ..................... Passed 3.56 sec; Start 122: dfccd1; 351/413 Test #385: psi4numpy-rhf-gradient ........... Passed 2.87 sec; Start 358: scf-response1; 352/413 Test #353: dft-reference .................... Passed 3.50 sec; Start 364: x2c3; 353/413 Test #316: sad1 ............................. Passed 4.29 sec; Start 345: stability1; 354/413 Test #215: mints2 ........................... Passed 4.28 sec; Start 382: psi4numpy-cphf; 355/413 Test #346: dfep2-1 .......................... Passed 4.74 sec; Start 334: scf-occ; 356/413 Test #295: psimrcc-pt2 ...................... Passed 2.50 sec; Start 97: cisd-h2o-clpse; 357/413 Test #363: x2c2 ............................. Passed 4.48 sec; Start 291: psimrcc-ccsd_t-3; 358/413 Test #335: scf2 ............................. Passed 4.02 sec; Start 120: dfcasscf-fzc-sp; 359/413 Test #382: psi4numpy-cphf ................... Passed 2.44 sec; Start 123: dfccdl1; 360/413 Test #358: scf-response1 .................... Passed 3.50 sec; Start 354: stability2; 361/413 Test #364: x2c3 ............................. Passed 3.89 sec; Start 224: mints10; 362/413 Test #121: dfcasscf-sp ...................... Passed 7.51 sec; Start 380: mints12; 363/413 Test #138: dfmp2-grad3 ...................... Passed 8.40 sec; Start 384: psi4numpy-rhf; 364/413 Test #97: cisd-h2o-clpse ................... Passed 3.90 sec; Start 104: decontract; 365/413 Test #334: scf-occ .......................... Passed 4.00 sec; Start 190: fci-tdm; 366/413 Test #6: ao-casscf-sp ..................... Passed 8.67 sec; Start 290: psimrcc-ccsd_t-2; 367/413 Test #291: psimrcc-ccsd_t-3 ...............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:33617,Test,Test,33617,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,y-he-cluster ................. Passed 44.71 sec; Start 251: omp2-5; 241/412 Test #248: omp2-2 ........................... Passed 17.52 sec; Start 252: omp2-grad1; 242/412 Test #252: omp2-grad1 ....................... Passed 5.77 sec; Start 253: omp2-grad2; 243/412 Test #249: omp2-3 ........................... Passed 21.31 sec; Start 254: omp2p5-1; 244/412 Test #254: omp2p5-1 ......................... Passed 6.32 sec; Start 255: omp2p5-2; 245/412 Test #246: ocepa3 ........................... Passed 39.21 sec; Start 256: omp2p5-grad1; 246/412 Test #243: ocepa-grad2 ...................... Passed 60.31 sec; Start 257: omp2p5-grad2; 247/412 Test #256: omp2p5-grad1 ..................... Passed 9.20 sec; Start 258: omp3-1; 248/412 Test #231: mp2-module ....................... Passed 76.66 sec; Start 259: omp3-2; 249/412 Test #258: omp3-1 ........................... Passed 4.81 sec; Start 260: omp3-3; 250/412 Test #255: omp2p5-2 ......................... Passed 18.39 sec; Start 261: omp3-4; 251/412 Test #253: omp2-grad2 ....................... Passed 31.07 sec; Start 262: omp3-5; 252/412 Test #245: ocepa2 ........................... Passed 63.94 sec; Start 263: omp3-grad1; 253/412 Test #259: omp3-2 ........................... Passed 21.31 sec; Start 264: omp3-grad2; 254/412 Test #263: omp3-grad1 ....................... Passed 6.60 sec; Start 265: opt-lindep-change; 255/412 Test #251: omp2-5 ........................... Passed 63.46 sec; Start 266: opt1; 256/412 Test #266: opt1 ............................. Passed 5.06 sec; Start 267: opt1-fd; 257/412 Test #250: omp2-4 ........................... Passed 73.74 sec; Start 268: opt2; 258/412 Test #265: opt-lindep-change ................ Passed 29.03 sec; Start 269: opt2-fd; 259/412 Test #257: omp2p5-grad2 ..................... Passed 55.95 sec; Start 270: opt3; 260/412 Test #270: opt3 ............................. Passed 6.31 sec; Start 271: opt4; 261/412 Test #267: opt1-fd .......................... Passed 12.63 sec; Start 272:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:23353,Test,Test,23353,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,y-intermediates .............. Passed 11.06 sec; Start 286: props3; 212/411 Test #218: mints8 ........................... Passed 14.21 sec; Start 194: fd-freq-gradient; 213/411 Test #324: sapt8 ............................ Passed 12.21 sec; Start 335: scf4; 214/411 Test #366: dft-smoke ........................ Passed 11.20 sec; Start 207: gibbs; 215/411 Test #164: dft-grad1 ........................ Passed 13.20 sec; Start 5: casscf-sa-sp; 216/411 Test #335: scf4 ............................. Passed 6.98 sec; Start 14: cbs-xtpl-energy; 217/411 Test #286: props3 ........................... Passed 12.80 sec; Start 372: dft-custom-hybrid; 218/411 Test #340: soscf-large ...................... Passed 14.19 sec; Start 275: opt9; 219/411 Test #194: fd-freq-gradient ................. Passed 12.13 sec; Start 133: dfmp2-ecp; 220/411 Test #207: gibbs ............................ Passed 11.18 sec; Start 23: cc12; 221/411 Test #5: casscf-sa-sp ..................... Passed 7.38 sec; Start 217: mints6; 222/411 Test #23: cc12 ............................. Passed 3.81 sec; Start 368: scf-freq1; 223/411 Test #372: dft-custom-hybrid ................ Passed 8.36 sec; Start 369: dft-jk; 224/411 Test #14: cbs-xtpl-energy .................. Passed 8.78 sec; Start 296: psithon2; 225/411 Test #275: opt9 ............................. Passed 9.31 sec; Start 122: dfccd-grad1; 226/411 Test #133: dfmp2-ecp ........................ Passed 10.55 sec; Start 154: dfrasscf-sp; 227/411 Test #122: dfccd-grad1 ...................... Passed 2.71 sec; Start 341: soscf-ref; 228/411 Test #154: dfrasscf-sp ...................... Passed 2.65 sec; Start 177: extern2; 229/411 Test #368: scf-freq1 ........................ Passed 7.99 sec; Start 52: cc36; 230/411 Test #217: mints6 ........................... Passed 11.46 sec; Start 176: extern1; 231/411 Test #369: dft-jk ........................... Passed 9.92 sec; Start 285: props2; 232/411 Test #341: soscf-ref ........................ Passed 6.33 sec; Start 48: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:20605,Test,Test,20605,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,y-intermediates .............. Passed 18.39 sec; Start 219: mints8; 208/412 Test #322: sapt-dft-api ..................... Passed 17.60 sec; Start 90: cepa3; 209/412 Test #255: omp2p5-2 ......................... Passed 17.27 sec; Start 87: cepa0-grad2; 210/412 Test #177: extern1 .......................... Passed 16.72 sec; Start 341: soscf-large; 211/412 Test #166: dft-grad2 ........................ Passed 17.52 sec; Start 292: psimrcc-fd-freq1; 212/412 Test #248: omp2-2 ........................... Passed 17.21 sec; Start 14: cbs-xtpl-energy; 213/412 Test #5: casscf-sa-sp ..................... Passed 14.38 sec; Start 89: cepa2; 214/412 Test #87: cepa0-grad2 ...................... Passed 8.28 sec; Start 339: scf7; 215/412 Test #154: dft-grad-lr1 ..................... Passed 17.73 sec; Start 91: cepa1; 216/412 Test #106: dcft-grad3 ....................... Passed 18.05 sec; Start 358: tu4-h2o-freq; 217/412 Test #325: sapt8 ............................ Passed 16.07 sec; Start 7: casscf-sp; 218/412 Test #170: dft-vv10 ......................... Passed 18.36 sec; Start 286: props2; 219/412 Test #90: cepa3 ............................ Passed 15.49 sec; Start 367: dft-smoke; 220/412 Test #219: mints8 ........................... Passed 16.29 sec; Start 165: dft-grad1; 221/412 Test #302: pywrap-basis ..................... Passed 17.34 sec; Start 351: dft-custom; 222/412 Test #89: cepa2 ............................ Passed 11.16 sec; Start 287: props3; 223/412 Test #341: soscf-large ...................... Passed 15.61 sec; Start 198: freq-isotope1; 224/412 Test #14: cbs-xtpl-energy .................. Passed 12.53 sec; Start 369: scf-freq1; 225/412 Test #151: dfomp2p5-1 ....................... Passed 21.88 sec; Start 370: dft-jk; 226/412 Test #292: psimrcc-fd-freq1 ................. Passed 17.57 sec; Start 84: cdomp2-1; 227/412 Test #358: tu4-h2o-freq ..................... Passed 12.87 sec; Start 200: fnocc1; 228/412 Test #339: scf7 ............................. Passed 15.12 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:20476,Test,Test,20476,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,y-rhf-gradient; 380/412 Test #223: mints10 .......................... Passed 16.21 sec; Start 355: tu2-ch2-energy; 381/412 Test #354: tu1-h2o-energy ................... Passed 16.19 sec; Start 397: python-memdfjk; 382/412 Test #411: skeletonsointegrals .............. Passed 15.60 sec; Start 215: mints3; 383/412 Test #221: mints-helper ..................... Passed 15.41 sec; Start 405: json-schema-1-properties; 384/412 Test #103: decontract ....................... Passed 15.43 sec; Start 399: json-v11-gradient; 385/412 Test #381: psi4numpy-cphf ................... Passed 14.94 sec; Start 401: json-schema-1-ghost; 386/412 Test #384: psi4numpy-rhf-gradient ........... Passed 14.67 sec; Start 379: mints12; 387/412 Test #355: tu2-ch2-energy ................... Passed 14.64 sec; Start 310: pywrap-molecule; 388/412 Test #397: python-memdfjk ................... Passed 14.35 sec; Start 388: python-energy; 389/412 Test #405: json-schema-1-properties ......... Passed 14.49 sec; Start 335: scf3; 390/412 Test #215: mints3 ........................... Passed 15.09 sec; Start 217: mints5; 391/412 Test #399: json-v11-gradient ................ Passed 14.86 sec; Start 212: mcscf3; 392/412 Test #379: mints12 .......................... Passed 14.63 sec; Start 383: psi4numpy-rhf; 393/412 Test #401: json-schema-1-ghost .............. Passed 15.23 sec; Start 210: mcscf1; 394/412 Test #310: pywrap-molecule .................. Passed 14.37 sec; Start 240: numpy-array-interface; 395/412 Test #388: python-energy .................... Passed 14.64 sec; Start 213: mints1; 396/412 Test #335: scf3 ............................. Passed 14.09 sec; Start 309: pywrap-db3; 397/412 Test #217: mints5 ........................... Passed 14.04 sec; Start 175: docs-bases; 398/412 Test #212: mcscf3 ........................... Passed 13.97 sec; Start 216: mints4; 399/412 Test #210: mcscf1 ........................... Passed 13.81 sec; Start 410: skeletonscf; 400/412 Test #383: psi4numpy-rhf .................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:36619,Test,Test,36619,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,"y. odd_nre_start = 25.7790014493 # Q-Chem; odd_e_start = -139.1749807824 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; odd_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; odd_g_start.set(zip(*contents)); odd_rmsg_start = 0.058156. # optimized reference should be same as norm, but in practice is this. odd_nre_opt = 33.838291620; odd_e_opt = -139.301327453; odd_rmsg_opt = 0.0422103431176. # should be able to pass starting gradient at new geometry, then zero grad final structure. test_odd_start(oddz) # works; #test_zero_grad(oddz) # should work; test_badodd_grad(oddz) # works b/c I'm testing against the bad results. # qu-est-ce que c-est? By RMS Force the optimization looks to proceed ; # nicely. But look at that final gradient with unmoveable large gradient; # components. It's not orientation, as input is zmat and it's the same with cartesian ; # coordinates in a couple orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416; # -139.174980786; # 0.0581560524872; # Optimizer: Optimization complete!; # opt; # 33.8382916197; # -139.301327453; # 0.0422103431176; #gradient = [; # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; # [ 0.00215",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:6574,test,testing,6574,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['test'],['testing']
Testability,y1 ....................... Passed 3.47 sec; Start 136: dfmp2-grad1; 384/413 Test #213: mcscf3 ........................... Passed 1.21 sec; Start 132: dfmp2-2; 385/413 Test #329: scf-guess-read1 .................. Passed 2.22 sec; Start 330: scf-upcast-custom-basis; 386/413 Test #137: dfmp2-grad2 ...................... Passed 9.94 sec; Start 9: castup2; 387/413 Test #212: mcscf2 ........................... Passed 1.62 sec; Start 8: castup1; 388/413 Test #87: cepa0-grad2 ...................... Passed 7.35 sec; Start 310: pywrap-db3; 389/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 2.26 sec; Start 211: mcscf1; 390/413 Test #138: dfmp2-grad3 ...................... Passed 4.40 sec; Start 176: docs-bases; 391/413 Test #310: pywrap-db3 ....................... Passed 0.78 sec; Start 123: dfccdl1; 392/413 Test #121: dfcasscf-sp ...................... Passed 4.24 sec; Start 6: ao-casscf-sp; 393/413 Test #313: rasci-h2o ........................ Passed 2.32 sec; Start 311: pywrap-molecule; 394/413 Test #122: dfccd1 ........................... Passed 3.58 sec; Start 210: matrix1; 395/413 Test #211: mcscf1 ........................... Passed 1.18 sec; Start 162: dft-grac; 396/413 Test #176: docs-bases ....................... Passed 0.64 sec; Start 88: cepa1; 397/413 Test #330: scf-upcast-custom-basis .......... Passed 2.28 sec; Start 103: cubeprop-frontier; 398/413 Test #8: castup1 .......................... Passed 2.22 sec; 399/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.07 sec; 400/413 Test #210: matrix1 .......................... Passed 0.69 sec; 401/413 Test #132: dfmp2-2 .......................... Passed 2.57 sec; 402/413 Test #173: dft2 ............................. Passed 5.31 sec; 403/413 Test #136: dfmp2-grad1 ...................... Passed 3.52 sec; 404/413 Test #311: pywrap-molecule .................. Passed 1.32 sec; 405/413 Test #162: dft-grac ......................... Passed 2.27 sec; 406/413 Test #103: cubeprop-frontier ................ Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:37095,Test,Test,37095,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,y1 ....................... Passed 4.10 sec; Start 387: python-mints9; 145/401 Test #388: python-mints2 .................... Passed 3.43 sec; Start 392: python-mints13; 146/401 Test #387: python-mints9 .................... Passed 1.99 sec; Start 187: fcidump; 147/401 Test #392: python-mints13 ................... Passed 1.77 sec; Start 341: dfep2-2; 148/401 Test #355: x2c1 ............................. Passed 30.74 sec; Start 394: json-v11_energy; 149/401 Test #385: python-curve ..................... Passed 4.68 sec; Start 92: cisd-h2o+-0; 150/401 Test #350: tu3-h2o-opt ...................... Passed 5.00 sec; Start 357: x2c3; 151/401 Test #341: dfep2-2 .......................... Passed 2.07 sec; Start 247: omp2-grad1; 152/401 Test #145: dfomp3-1 ......................... Passed 13.90 sec; Start 138: dfomp2-1; 153/401 Test #153: dfrasscf-sp ...................... Passed 6.26 sec; Start 328: scf-occ; 154/401 Test #357: x2c3 ............................. Passed 2.03 sec; Start 356: x2c2; 155/401 Test #309: rasscf-sp ........................ Passed 18.23 sec; Start 133: dfmp2-grad1; 156/401 Test #92: cisd-h2o+-0 ...................... Passed 2.47 sec; Start 396: json-schema_0_energy; 157/401 Test #394: json-v11_energy .................. Passed 2.58 sec; Start 324: scf-upcast-custom-basis; 158/401 Test #124: dfccsd-grad1 ..................... Passed 22.59 sec; Start 118: dfcasscf-sp; 159/401 Test #187: fcidump .......................... Passed 3.69 sec; Start 8: castup1; 160/401 Test #328: scf-occ .......................... Passed 1.79 sec; Start 220: molden2; 161/401 Test #356: x2c2 ............................. Passed 1.69 sec; Start 239: ocepa1; 162/401 Test #247: omp2-grad1 ....................... Passed 2.44 sec; Start 323: scf-guess-read1; 163/401 Test #324: scf-upcast-custom-basis .......... Passed 1.58 sec; Start 351: scf-response1; 164/401 Test #8: castup1 .......................... Passed 1.40 sec; Start 253: omp3-1; 165/401 Test #396: json-schema_0_energy .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:14453,Test,Test,14453,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,y1 ....................... Passed 4.29 sec; Start 290: psimrcc-ccsd_t-3; 326/412 Test #356: tu3-h2o-opt ...................... Passed 4.25 sec; Start 334: scf2; 327/412 Test #346: dfep2-2 .......................... Passed 2.31 sec; Start 391: python-mints9; 328/412 Test #328: scf-guess-read1 .................. Passed 1.82 sec; Start 382: psi4numpy-dfmp2; 329/412 Test #315: sad1 ............................. Passed 3.68 sec; Start 398: json-v11-energy; 330/412 Test #214: mints2 ........................... Passed 2.86 sec; Start 204: frac; 331/412 Test #357: scf-response1 .................... Passed 2.98 sec; Start 272: opt5; 332/412 Test #230: mp2-grad2 ........................ Passed 4.46 sec; Start 235: mp3-grad2; 333/412 Test #224: molden1 .......................... Passed 4.52 sec; Start 121: dfccd1; 334/412 Test #232: mp2p5-grad1 ...................... Passed 3.80 sec; Start 222: mints9; 335/412 Test #3: casscf-fzc-sp .................... Passed 11.19 sec; Start 402: json-schema-1-orient; 336/412 Test #334: scf2 ............................. Passed 1.78 sec; Start 86: cepa0-grad1; 337/412 Test #389: python-curve ..................... Passed 3.41 sec; Start 289: psimrcc-ccsd_t-2; 338/412 Test #233: mp2p5-grad2 ...................... Passed 4.60 sec; Start 396: python-mints13; 339/412 Test #382: psi4numpy-dfmp2 .................. Passed 1.89 sec; Start 234: mp3-grad1; 340/412 Test #290: psimrcc-ccsd_t-3 ................. Passed 2.51 sec; Start 333: scf-occ; 341/412 Test #391: python-mints9 .................... Passed 2.22 sec; Start 400: json-schema-1-energy; 342/412 Test #398: json-v11-energy .................. Passed 2.11 sec; Start 161: dft-grac; 343/412 Test #364: zaptn-nh2 ........................ Passed 3.07 sec; Start 362: x2c2; 344/412 Test #204: frac ............................. Passed 2.10 sec; Start 363: x2c3; 345/412 Test #272: opt5 ............................. Passed 2.19 sec; Start 117: ao-dfcasscf-sp; 346/412 Test #402: json-schema-1-orient ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:31514,Test,Test,31514,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,y2 ....................... Passed 1.80 sec; Start 208: mints1; 192/401 Test #379: psi4numpy-rhf .................... Passed 0.87 sec; Start 284: psimrcc-ccsd_t-2; 193/401 Test #235: numpy-array-interface ............ Passed 0.63 sec; Start 285: psimrcc-ccsd_t-3; 194/401 Test #205: mcscf1 ........................... Passed 0.84 sec; Start 283: psimrcc-ccsd_t-1; 195/401 Test #204: matrix1 .......................... Passed 0.67 sec; Start 289: psimrcc-pt2; 196/401 Test #101: decontract ....................... Passed 1.36 sec; Start 1: adc1; 197/401 Test #208: mints1 ........................... Passed 0.58 sec; Start 2: adc2; 198/401 Test #384: python-energy .................... Passed 0.78 sec; Start 9: castup2; 199/401 Test #359: options1 ......................... Passed 0.67 sec; Start 10: castup3; 200/401 Test #122: dfccsd1 .......................... Passed 3.17 sec; Start 12: cbs-parser; 201/401 Test #123: dfccsdl1 ......................... Passed 3.14 sec; Start 13: cbs-xtpl-alpha; 202/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 1.29 sec; Start 17: cbs-xtpl-opt; 203/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 1.20 sec; Start 19: cbs-xtpl-wrapper; 204/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 1.39 sec; Start 84: cepa0-grad1; 205/401 Test #289: psimrcc-pt2 ...................... Passed 1.11 sec; Start 85: cepa0-grad2; 206/401 Test #290: psimrcc-sp1 ...................... Passed 2.98 sec; Start 86: cepa1; 207/401 Test #84: cepa0-grad1 ...................... Passed 2.32 sec; Start 87: cepa2; 208/401 Test #85: cepa0-grad2 ...................... Passed 4.19 sec; Start 88: cepa3; 209/401 Test #9: castup2 .......................... Passed 8.52 sec; Start 89: cepa1; 210/401 Test #10: castup3 .......................... Passed 8.84 sec; Start 90: cepa-module; 211/401 Test #86: cepa1 ............................ Passed 9.10 sec; Start 93: cisd-h2o+-1; 212/401 Test #93: cisd-h2o+-1 ...................... Passed 2.99 sec; Start 94: cisd-h,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:18920,Test,Test,18920,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,y::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5147,test,tests,5147,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['test'],['tests']
Testability,y; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 102.18 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 343.62 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 156.55 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 100.99 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 43.84 sec; Start 33: cc18; 38/411 Test #28: cc13d ............................ Passed 259.61 sec; Start 34: cc19; 39/411 Test #24: cc13 ............................. Passed 319.22 sec; Start 35: cc2; 40/411 Test #33: cc18 ............................. Passed 55.96 sec; Start 36: cc21; 41/411 Test #34: cc19 ............................. Passed 61.97 sec; Start 37: cc22; 42/411 Test #37: cc22 ............................. Passed 50.38 sec; Start 38: cc23; 43/411 Test #31: cc16 ............................. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:3149,Test,Test,3149,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,y; 375/412 Test #331: scf-bs ........................... Passed 16.05 sec; Start 411: skeletonsointegrals; 376/412 Test #222: mints9 ........................... Passed 17.85 sec; Start 221: mints-helper; 377/412 Test #396: python-mints13 ................... Passed 17.11 sec; Start 103: decontract; 378/412 Test #404: json-schema-1-gradient ........... Passed 16.61 sec; Start 381: psi4numpy-cphf; 379/412 Test #299: pubchem2 ......................... Passed 17.11 sec; Start 215: mints3; 380/412 Test #223: mints10 .......................... Passed 16.49 sec; Start 384: psi4numpy-rhf-gradient; 381/412 Test #354: tu1-h2o-energy ................... Passed 18.71 sec; Start 401: json-schema-1-ghost; 382/412 Test #411: skeletonsointegrals .............. Passed 17.04 sec; Start 355: tu2-ch2-energy; 383/412 Test #221: mints-helper ..................... Passed 17.55 sec; Start 399: json-v11-gradient; 384/412 Test #103: decontract ....................... Passed 16.77 sec; Start 397: python-memdfjk; 385/412 Test #381: psi4numpy-cphf ................... Passed 17.48 sec; Start 405: json-schema-1-properties; 386/412 Test #215: mints3 ........................... Passed 17.22 sec; Start 379: mints12; 387/412 Test #384: psi4numpy-rhf-gradient ........... Passed 16.81 sec; Start 388: python-energy; 388/412 Test #355: tu2-ch2-energy ................... Passed 16.29 sec; Start 310: pywrap-molecule; 389/412 Test #399: json-v11-gradient ................ Passed 16.02 sec; Start 383: psi4numpy-rhf; 390/412 Test #401: json-schema-1-ghost .............. Passed 16.97 sec; Start 335: scf3; 391/412 Test #397: python-memdfjk ................... Passed 16.57 sec; Start 217: mints5; 392/412 Test #405: json-schema-1-properties ......... Passed 15.81 sec; Start 212: mcscf3; 393/412 Test #379: mints12 .......................... Passed 16.68 sec; Start 210: mcscf1; 394/412 Test #388: python-energy .................... Passed 15.79 sec; Start 213: mints1; 395/412 Test #310: pywrap-molecule ...............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:36133,Test,Test,36133,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,y; 381/411 Test #387: python-energy .................... Passed 0.86 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 4.75 sec; Start 389: python-pubchem; 383/411 Test #359: tu6-cp-ne2 ....................... Passed 240.77 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.89 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 2.96 sec; Start 392: python-cc54; 386/411 Test #389: python-pubchem ................... Passed 50.14 sec; Start 393: python-3-index-transforms; 387/411 Test #373: dft-custom-mgga .................. Passed 175.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.81 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.95 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.53 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 10.54 sec; Start 399: json-schema-1-energy; 392/411 Test #398: json-v11-gradient ................ Passed 2.05 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 1.58 sec; Start 401: json-schema-1-orient; 394/411 Test #399: json-schema-1-energy ............. Passed 4.08 sec; Start 402: json-schema-1-throws; 395/411 Test #401: json-schema-1-orient ............. Passed 2.72 sec; Start 403: json-schema-1-gradient; 396/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.76 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.78 sec; Start 406: skeletonaointegrals; 399/411 Test #392: python-cc54 ...................... Passed 25.14 sec; Start 407: skeletondfmp2; 400/411 Test #405: skeleton ......................... Passed 1.92 sec; Start 408:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:36513,Test,Test,36513,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,y; 65/413 Test #75: cc5a ............................. Passed 94.50 sec; Start 281: opt14; 66/413 Test #307: pywrap-checkrun-rohf ............. Passed 509.19 sec; Start 109: dcft1; 67/413 Test #64: cc46 ............................. Passed 66.16 sec; Start 153: dfomp2p5-2; 68/413 Test #308: pywrap-checkrun-uhf .............. Passed 711.32 sec; Start 57: cc4; 69/413 Test #280: opt13 ............................ Passed 715.73 sec; Start 258: omp2p5-grad2; 70/413 Test #70: cc51 ............................. Passed 106.95 sec; Start 144: dfomp2-4; 71/413 Test #252: omp2-5 ........................... Passed 99.66 sec; Start 158: dfomp2p5-grad2; 72/413 Test #244: ocepa-grad2 ...................... Passed 93.25 sec; Start 21: cc1; 73/413 Test #80: cc8b ............................. Passed 77.16 sec; Start 67: cc49; 74/413 Test #246: ocepa2 ........................... Passed 81.77 sec; Start 79: cc8a; 75/413 Test #57: cc4 .............................. Passed 41.82 sec; Start 373: dft-custom-dhdf; 76/413 Test #180: fsapt1 ........................... Passed 1757.68 sec; Start 82: cc9; 77/413 Test #19: cbs-xtpl-nbody ................... Passed 91.35 sec; Start 81: cc8c; 78/413 Test #232: mp2-module ....................... Passed 103.88 sec; Start 26: cc13a; 79/413 Test #170: dft1 ............................. Passed 106.31 sec; Start 115: dcft7; 80/413 Test #153: dfomp2p5-2 ....................... Passed 59.14 sec; Start 207: frac-traverse; 81/413 Test #92: cepa-module ...................... Passed 187.69 sec; Start 318: sapt2; 82/413 Test #281: opt14 ............................ Passed 80.55 sec; Start 320: sapt4; 83/413 Test #109: dcft1 ............................ Passed 68.38 sec; Start 327: scf-bz2; 84/413 Test #258: omp2p5-grad2 ..................... Passed 64.16 sec; Start 265: omp3-grad2; 85/413 Test #144: dfomp2-4 ......................... Passed 62.74 sec; Start 142: dfomp2-2; 86/413 Test #67: cc49 ............................. Passed 54.95 sec; Start 83: cc9a; 87/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:7316,Test,Test,7316,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,y_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10379,test,tests,10379,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,"yes, I don't think there's anything testing things which end up in `extras` on the return, so I'll make a quick test. . while I can accept the windows ctest fail, the failed `test_psi4_qcschema->test_psi4_scfproperty` for linux is a bit concerning. not really sure why it's trying to calculate SCF rotations when it's not in `function_kwargs`. it works fine when putting the properties list directly into the `model` of an `AtomicInput`, so it might be an issue in `qcng.util.model_wrapper` when translating the json data? I'll dig into it",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-790268893:36,test,testing,36,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-790268893,2,['test'],"['test', 'testing']"
Testability,"yes, py3.6+. At the moment, it's probably still buildable with py35, but there were some testing instabilities, so we dropped it for packaging. Dropped py27 after v1.2. [This line](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L167) was supposed to be catching such things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1565#issuecomment-469312912:89,test,testing,89,https://psicode.org,https://github.com/psi4/psi4/issues/1565#issuecomment-469312912,1,['test'],['testing']
Testability,"you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Individual classes may need to access signatures of the specific subclass they have. Instead, subclasses now have a specific subclass for their `potential_` attribute if applicable. An abstract method has been added to the HF base class to get the potential when the subclass doesn't change the method signature.; - [x] RV::compute_Vx_full now exists alongside RV::compute_Vx. The former needs to exist so we can have a flag to control the spin-integration. The latter needs to exist to not break polymorphism when we don't need that flag.; - [x] A new function has been created to make a UKS version of an RKS functional.; - [x] If a triplet is requested, `compute_functional` will build a UKS functional, compute for that, and cannibalize the pieces to get the properly triplet spin-integrated quantity.; - [x] Ability to do `DAXPBY` added.; - [x] Updated a bad test value. ## Checklist; - [x] `test_tdscf_excitations.py` passes. All 70 of the tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:4121,test,test,4121,https://psicode.org,https://github.com/psi4/psi4/pull/2885,2,['test'],"['test', 'tests']"
Testability,"you're right. it's hitting [this logic](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L802) which didn't have aux-basis-sets-derived-from-orbital-basis-sets in mind when it was derived. two solutions:. a) forget envvar `PSIPATH`. instead, put the `ano-rcc.gbs` in the same directory as the input file. `.` is in the search path.; b) edit `libraryPath` to `basisPath` [here](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L811) and remake (and possibly re-install) to copy into right place. Without write access, (a) is probably the way to go. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487691447:33,log,logic,33,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487691447,1,['log'],['logic']
Testability,yp; 42/401 Test #44: cc29 ............................. Passed 150.02 sec; Start 233: nbody-he-cluster; 43/401 Test #29: cc14 ............................. Passed 290.28 sec; Start 46: cc30; 44/401 Test #31: cc16 ............................. Passed 204.91 sec; Start 143: dfomp2-grad2; 45/401 Test #114: dcft9 ............................ Passed 101.63 sec; Start 57: cc40; 46/401 Test #366: dft-custom-dhdf .................. Passed 49.28 sec; Start 257: omp3-5; 47/401 Test #301: pywrap-checkrun-rohf ............. Passed 555.72 sec; Start 272: opt11; 48/401 Test #69: cc52 ............................. Passed 122.20 sec; Start 68: cc51; 49/401 Test #163: dft-b3lyp ........................ Passed 36.67 sec; Start 256: omp3-4; 50/401 Test #24: cc13 ............................. Passed 251.21 sec; Start 246: omp2-5; 51/401 Test #12: cbs-parser ....................... Passed 50.44 sec; Start 64: cc48; 52/401 Test #61: cc44 ............................. Passed 62.83 sec; Start 73: cc5a; 53/401 Test #233: nbody-he-cluster ................. Passed 47.19 sec; Start 240: ocepa2; 54/401 Test #58: cc41 ............................. Passed 109.69 sec; Start 333: scf6; 55/401 Test #272: opt11 ............................ Passed 51.45 sec; Start 245: omp2-4; 56/401 Test #28: cc13d ............................ Passed 217.30 sec; Start 369: dft-custom-gga; 57/401 Test #57: cc40 ............................. Passed 61.45 sec; Start 269: opt7; 58/401 Test #46: cc30 ............................. Passed 67.91 sec; Start 308: rasci-ne; 59/401 Test #255: omp3-3 ........................... Passed 75.64 sec; Start 2: adc2; 60/401 Test #27: cc13c ............................ Passed 98.63 sec; Start 67: cc50; 61/401 Test #68: cc51 ............................. Passed 51.83 sec; Start 154: dfscf-bz2; 62/401 Test #143: dfomp2-grad2 ..................... Passed 80.96 sec; Start 259: omp3-grad2; 63/401 Test #369: dft-custom-gga ................... Passed 31.17 sec; Start 146: dfomp3-2; 64/401 Test ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:5563,Test,Test,5563,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,"ytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1392,test,tests,1392,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['test'],['tests']
Testability,ytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2211,test,tests,2211,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,ytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15621,test,tests,15621,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,ytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pyte,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15521,test,tests,15521,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,ytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15421,test,tests,15421,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,ytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14823,test,tests,14823,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,ython-3-index-transforms ........ Passed 12.36 sec; Start 399: json-v11-gradient; 384/412 Test #399: json-v11-gradient ................ Passed 1.56 sec; Start 400: json-schema-1-energy; 385/412 Test #398: json-v11-energy .................. Passed 4.06 sec; Start 401: json-schema-1-ghost; 386/412 Test #401: json-schema-1-ghost .............. Passed 1.76 sec; Start 402: json-schema-1-orient; 387/412 Test #402: json-schema-1-orient ............. Passed 2.50 sec; Start 403: json-schema-1-throws; 388/412 Test #400: json-schema-1-energy ............. Passed 5.58 sec; Start 404: json-schema-1-gradient; 389/412 Test #403: json-schema-1-throws ............. Passed 0.67 sec; Start 405: json-schema-1-properties; 390/412 Test #404: json-schema-1-gradient ........... Passed 2.22 sec; Start 406: skeleton; 391/412 Test #405: json-schema-1-properties ......... Passed 1.81 sec; Start 407: skeletonaointegrals; 392/412 Test #407: skeletonaointegrals .............. Passed 3.33 sec; Start 408: skeletondfmp2; 393/412 Test #406: skeleton ......................... Passed 3.87 sec; Start 409: skeletonmointegrals; 394/412 Test #393: python-cc54 ...................... Passed 28.49 sec; Start 410: skeletonscf; 395/412 Test #410: skeletonscf ...................... Passed 0.68 sec; Start 411: skeletonsointegrals; 396/412 Test #408: skeletondfmp2 .................... Passed 2.47 sec; Start 412: skeletonwavefunction; 397/412 Test #409: skeletonmointegrals .............. Passed 2.26 sec; 398/412 Test #411: skeletonsointegrals .............. Passed 1.98 sec; 399/412 Test #412: skeletonwavefunction ............. Passed 2.83 sec; 400/412 Test #348: sapt-dft2 ........................ Passed 127.79 sec; 401/412 Test #372: dft-custom-dhdf .................. Passed 94.42 sec; 402/412 Test #306: pywrap-checkrun-rohf ............. Passed 288.21 sec; 403/412 Test #390: python-pubchem ................... Passed 69.31 sec; 404/412 Test #360: tu6-cp-ne2 ....................... Passed 164.40 sec; 405/412 Test #38,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:36915,Test,Test,36915,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,"ython-cc54 ...................... Passed 26.83 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 1.29 sec; Start 401: json-schema-1-orient; 394/411 Test #401: json-schema-1-orient ............. Passed 2.53 sec; Start 402: json-schema-1-throws; 395/411 Test #399: json-schema-1-energy ............. Passed 4.07 sec; Start 403: json-schema-1-gradient; 396/411 Test #402: json-schema-1-throws ............. Passed 0.62 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.92 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.48 sec; Start 406: skeletonaointegrals; 399/411 Test #405: skeleton ......................... Passed 1.51 sec; Start 407: skeletondfmp2; 400/411 Test #406: skeletonaointegrals .............. Passed 1.67 sec; Start 408: skeletonmointegrals; 401/411 Test #407: skeletondfmp2 .................... Passed 1.70 sec; Start 409: skeletonscf; 402/411 Test #408: skeletonmointegrals .............. Passed 1.95 sec; Start 410: skeletonsointegrals; 403/411 Test #409: skeletonscf ...................... Passed 0.67 sec; Start 411: skeletonwavefunction; 404/411 Test #389: python-pubchem ................... Passed 54.34 sec; 405/411 Test #411: skeletonwavefunction ............. Passed 1.69 sec; 406/411 Test #410: skeletonsointegrals .............. Passed 1.93 sec; 407/411 Test #379: cc-module ........................ Passed 152.05 sec; 408/411 Test #386: cookbook-rohf-orb-rot ............ Passed 141.29 sec; 409/411 Test #306: pywrap-checkrun-uhf .............. Passed 657.98 sec; 410/411 Test #300: pywrap-all ....................... Passed 734.22 sec; 411/411 Test #304: pywrap-checkrun-rhf .............. Passed 705.00 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 72.03 sec*proc (2 tests); autotest = 2537.36 sec*proc (26 tests); cart = 17832.09 sec*proc (123 tests); cas = 68.01 sec*proc (1 test); casscf = 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:37617,Test,Test,37617,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,ython-cc54 ...................... Passed 49.72 sec; Start 260: omp2-grad1; 58/415 Test #386: pywrap-bfs ....................... Passed 24.47 sec; Start 368: tu4-h2o-freq; 59/415 Test #323: rasscf-sp ........................ Passed 37.57 sec; Start 103: cubeprop; 60/415 Test #205: fnocc4 ........................... Passed 22.18 sec; Start 293: opt-full-hess-every; 61/415 Test #6: ao-casscf-sp ..................... Passed 5.22 sec; Start 357: sapt-dft1; 62/415 Test #377: dft-smoke ........................ Passed 22.20 sec; Start 201: freq-isotope2; 63/415 Test #252: ocepa1 ........................... Passed 8.85 sec; Start 194: fcidump; 64/415 Test #260: omp2-grad1 ....................... Passed 9.57 sec; Start 266: omp3-1; 65/415 Test #132: dfmp2-1 .......................... Passed 16.83 sec; Start 334: sapt8; 66/415 Test #194: fcidump .......................... Passed 7.22 sec; Start 226: molden1; 67/415 Test #142: dfomp2-1 ......................... Passed 12.15 sec; Start 274: opt1; 68/415 Test #103: cubeprop ......................... Passed 12.58 sec; Start 227: molden2; 69/415 Test #368: tu4-h2o-freq ..................... Passed 13.90 sec; Start 8: castup1; 70/415 Test #201: freq-isotope2 .................... Passed 11.36 sec; Start 369: tu5-sapt; 71/415 Test #172: dft-vv10 ......................... Passed 16.42 sec; Start 160: dfrasscf-sp; 72/415 Test #357: sapt-dft1 ........................ Passed 14.97 sec; Start 292: opt-freeze-coords; 73/415 Test #293: opt-full-hess-every .............. Passed 15.99 sec; Start 305: psithon1; 74/415 Test #8: castup1 .......................... Passed 4.90 sec; Start 137: dfmp2-grad1; 75/415 Test #266: omp3-1 ........................... Passed 10.08 sec; Start 376: cubeprop-esp; 76/415 Test #274: opt1 ............................. Passed 11.75 sec; Start 325: sapt1; 77/415 Test #226: molden1 .......................... Passed 14.09 sec; Start 378: scf-hess1; 78/415 Test #227: molden2 .......................... Passed 12.71 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:6672,Test,Test,6672,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,ython-cc54; 143/413 Test #276: opt8 ............................. Passed 42.07 sec; Start 111: dcft3; 144/413 Test #108: dcft-grad4 ....................... Passed 46.24 sec; Start 2: adc2; 145/413 Test #23: cc11 ............................. Passed 48.45 sec; Start 309: pywrap-db1; 146/413 Test #22: cc10 ............................. Passed 62.56 sec; Start 51: cc34; 147/413 Test #254: omp2-grad2 ....................... Passed 47.57 sec; Start 198: fd-gradient; 148/413 Test #221: mints-benchmark .................. Passed 44.46 sec; Start 54: cc37; 149/413 Test #350: sapt-compare ..................... Passed 47.15 sec; Start 338: scf5; 150/413 Test #85: cdomp2-2 ......................... Passed 50.40 sec; Start 24: cc12; 151/413 Test #127: dfccsd-grad1 ..................... Passed 50.32 sec; Start 93: ci-multi; 152/413 Test #111: dcft3 ............................ Passed 36.01 sec; Start 133: dfmp2-3; 153/413 Test #2: adc2 ............................. Passed 35.27 sec; Start 73: cc54; 154/413 Test #51: cc34 ............................. Passed 32.68 sec; Start 284: opt-irc-3; 155/413 Test #148: dfomp3-1 ......................... Passed 60.15 sec; Start 339: scf6; 156/413 Test #309: pywrap-db1 ....................... Passed 45.27 sec; Start 325: sapt7; 157/413 Test #198: fd-gradient ...................... Passed 44.67 sec; Start 266: opt-lindep-change; 158/413 Test #66: cc48 ............................. Passed 106.95 sec; Start 130: dfccsdat1; 159/413 Test #394: python-cc54 ...................... Passed 69.22 sec; Start 314: rasci-ne; 160/413 Test #54: cc37 ............................. Passed 47.11 sec; Start 16: cbs-xtpl-gradient; 161/413 Test #338: scf5 ............................. Passed 50.77 sec; Start 379: pywrap-align-chiral; 162/413 Test #24: cc12 ............................. Passed 43.61 sec; Start 279: opt12; 163/413 Test #284: opt-irc-3 ........................ Passed 31.84 sec; Start 131: dfmp2-1; 164/413 Test #379: pywrap-align-chiral .............. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:14492,Test,Test,14492,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,ython-curve ..................... Passed 2.61 sec; Start 329: scf-guess-read2; 271/404 Test #108: dcft2 ............................ Passed 1.50 sec; Start 269: opt3; 272/404 Test #15: cbs-xtpl-freq .................... Passed 5.56 sec; Start 265: opt1; 273/404 Test #218: mints8 ........................... Passed 5.50 sec; Start 6: ao-casscf-sp; 274/404 Test #137: dfmp2-grad4 ...................... Passed 1.84 sec; Start 171: dft2; 275/404 Test #98: cisd-sp .......................... Passed 2.78 sec; Start 223: molden1; 276/404 Test #269: opt3 ............................. Passed 2.52 sec; Start 180: fsapt-terms; 277/404 Test #329: scf-guess-read2 .................. Passed 2.96 sec; Start 224: molden2; 278/404 Test #265: opt1 ............................. Passed 2.30 sec; Start 190: fci-coverage; 279/404 Test #158: dft-ghost ........................ Passed 5.90 sec; Start 283: opt-freeze-coords; 280/404 Test #6: ao-casscf-sp ..................... Passed 2.75 sec; Start 339: scf-property; 281/404 Test #223: molden1 .......................... Passed 1.19 sec; Start 286: props3; 282/404 Test #224: molden2 .......................... Passed 1.61 sec; Start 400: json-schema-1-ghost; 283/404 Test #190: fci-coverage ..................... Passed 1.78 sec; Start 185: fci-h2o; 284/404 Test #393: python-3-index-transforms ........ Passed 6.24 sec; Start 184: fci-dipole; 285/404 Test #400: json-schema-1-ghost .............. Passed 0.97 sec; Start 340: soscf-large; 286/404 Test #283: opt-freeze-coords ................ Passed 2.80 sec; Start 399: json-schema-1-energy; 287/404 Test #171: dft2 ............................. Passed 4.80 sec; Start 141: dfomp2-3; 288/404 Test #339: scf-property ..................... Passed 3.08 sec; Start 360: x2c1; 289/404 Test #180: fsapt-terms ...................... Passed 4.85 sec; Start 401: json-schema-1-orient; 290/404 Test #399: json-schema-1-energy ............. Passed 1.59 sec; Start 191: fcidump; 291/404 Test #141: dfomp2-3 ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:26020,Test,Test,26020,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,"ython-energy .................... Passed 0.82 sec; Start 382: psi4numpy-rhf; 393/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 334: scf3; 394/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 216: mints5; 395/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 208: matrix1; 396/411 Test #396: python-memdfjk ................... Passed 0.89 sec; Start 308: pywrap-db3; 397/411 Test #175: docs-dft ......................... Passed 0.57 sec; Start 364: options1; 398/411 Test #354: tu2-ch2-energy ................... Passed 0.81 sec; Start 215: mints4; 399/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 409: skeletonscf; 400/411 Test #208: matrix1 .......................... Passed 0.53 sec; Start 212: mints1; 401/411 Test #334: scf3 ............................. Passed 0.70 sec; Start 174: docs-bases; 402/411 Test #216: mints5 ........................... Passed 0.57 sec; Start 402: json-schema-1-throws; 403/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 87: cepa1; 404/411 Test #364: options1 ......................... Passed 0.57 sec; 405/411 Test #215: mints4 ........................... Passed 0.54 sec; 406/411 Test #174: docs-bases ....................... Passed 0.52 sec; 407/411 Test #212: mints1 ........................... Passed 0.55 sec; 408/411 Test #402: json-schema-1-throws ............. Passed 0.52 sec; 409/411 Test #409: skeletonscf ...................... Passed 0.61 sec; 410/411 Test #87: cepa1 ............................ Passed 4.49 sec; 411/411 Test #318: sapt4 ............................ Passed 1705.52 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 53.30 sec*proc (2 tests); autotest = 715.90 sec*proc (26 tests); cart = 10496.39 sec*proc (123 tests); cas = 45.67 sec*proc (1 test); casscf = 97.70 sec*proc (11 tests); cbs = 775.99 sec*proc (10 tests); cc = 3501.05 sec*proc (65 tests); cdomp2 = 18.69 sec*proc (2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:37742,Test,Test,37742,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,"ython-memdfjk ................... Passed 1.06 sec; 399/411 Test #212: mints1 ........................... Passed 0.85 sec; 400/411 Test #409: skeletonscf ...................... Passed 0.69 sec; 401/411 Test #239: numpy-array-interface ............ Passed 0.72 sec; 402/411 Test #174: docs-bases ....................... Passed 0.62 sec; 403/411 Test #175: docs-dft ......................... Passed 0.68 sec; 404/411 Test #215: mints4 ........................... Passed 0.63 sec; 405/411 Test #208: matrix1 .......................... Passed 0.56 sec; 406/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; 407/411 Test #402: json-schema-1-throws ............. Passed 0.54 sec; 408/411 Test #364: options1 ......................... Passed 0.58 sec; 409/411 Test #87: cepa1 ............................ Passed 1.69 sec; 410/411 Test #18: cbs-xtpl-func .................... Passed 1416.82 sec; 411/411 Test #318: sapt4 ............................ Passed 1680.10 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 56.67 sec*proc (2 tests); autotest = 2018.64 sec*proc (26 tests); cart = 19448.39 sec*proc (123 tests); cas = 58.63 sec*proc (1 test); casscf = 130.95 sec*proc (11 tests); cbs = 2775.51 sec*proc (10 tests); cc = 15156.58 sec*proc (65 tests); cdomp2 = 67.70 sec*proc (2 tests); cepa = 222.04 sec*proc (7 tests); ci = 109.70 sec*proc (8 tests); cisd = 189.39 sec*proc (7 tests); cookbook = 200.39 sec*proc (1 test); cubeprop = 18.11 sec*proc (2 tests); dcft = 5366.23 sec*proc (13 tests); df = 2660.25 sec*proc (38 tests); dfccd = 3.65 sec*proc (1 test); dfccd-grad = 7.89 sec*proc (1 test); dfccdl = 5.38 sec*proc (1 test); dfccsd = 2.50 sec*proc (1 test); dfccsd-grad = 58.61 sec*proc (1 test); dfccsd-t-grad = 49.75 sec*proc (1 test); dfccsdat = 13.69 sec*proc (1 test); dfccsdl = 5.69 sec*proc (1 test); dfccsdt = 12.58 sec*proc (1 test); dfep2 = 7.96 sec*proc (2 tests); dfmp2 = 181.37 sec*proc (11 tests); dfomp2 = 1655.18 sec*proc (7 tests); df",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:38400,test,tests,38400,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,2,['test'],['tests']
Testability,ython-pubchem ................... Passed 62.99 sec; Start 239: nbody-he-cluster; 120/413 Test #144: dfomp2-4 ......................... Passed 72.50 sec; Start 55: cc38; 121/413 Test #128: dfccsd-t-grad1 ................... Passed 74.65 sec; Start 278: opt11; 122/413 Test #22: cc10 ............................. Passed 67.33 sec; Start 57: cc4; 123/413 Test #394: python-cc54 ...................... Passed 62.81 sec; Start 101: ci-property; 124/413 Test #150: dfomp3-grad1 ..................... Passed 60.14 sec; Start 23: cc11; 125/413 Test #81: cc8c ............................. Passed 77.74 sec; Start 196: fd-freq-gradient; 126/413 Test #68: cc4a ............................. Passed 74.31 sec; Start 154: dfomp2p5-grad1; 127/413 Test #275: opt7 ............................. Passed 62.91 sec; Start 148: dfomp3-1; 128/413 Test #34: cc18 ............................. Passed 70.30 sec; Start 50: cc33; 129/413 Test #55: cc38 ............................. Passed 54.69 sec; Start 38: cc22; 130/413 Test #239: nbody-he-cluster ................. Passed 61.77 sec; Start 52: cc35; 131/413 Test #299: pubchem1 ......................... Passed 62.13 sec; Start 172: dft1-alt; 132/413 Test #109: dcft1 ............................ Passed 104.14 sec; Start 164: dft-grad-meta; 133/413 Test #278: opt11 ............................ Passed 53.92 sec; Start 33: cc17; 134/413 Test #23: cc11 ............................. Passed 41.50 sec; Start 85: cdomp2-2; 135/413 Test #148: dfomp3-1 ......................... Passed 34.66 sec; Start 63: cc45; 136/413 Test #57: cc4 .............................. Passed 48.48 sec; Start 254: omp2-grad2; 137/413 Test #154: dfomp2p5-grad1 ................... Passed 43.84 sec; Start 152: dfomp2p5-1; 138/413 Test #50: cc33 ............................. Passed 40.84 sec; Start 127: dfccsd-grad1; 139/413 Test #196: fd-freq-gradient ................. Passed 46.68 sec; Start 108: dcft-grad4; 140/413 Test #101: ci-property ...................... Passed 54.46 sec; Start 35,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:12304,Test,Test,12304,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,ython-vibanalysis; Start 174: fsapt1; Start 178: isapt1; Start 18: cbs-xtpl-func; Start 177: fsapt-allterms; Start 189: fd-freq-energy-large; Start 191: fd-freq-gradient-large; Start 274: opt13; Start 25: cc13a; Start 112: dcft7; Start 201: frac-traverse; Start 312: sapt2; Start 314: sapt4; Start 321: scf-bz2; 1/401 Test #312: sapt2 ............................ Passed 83.28 sec; Start 35: cc2; 2/401 Test #201: frac-traverse .................... Passed 108.95 sec; Start 45: cc3; 3/401 Test #321: scf-bz2 .......................... Passed 120.54 sec; Start 44: cc29; 4/401 Test #177: fsapt-allterms ................... Passed 137.88 sec; Start 39: cc24; 5/401 Test #314: sapt4 ............................ Passed 171.80 sec; Start 41: cc26; 6/401 Test #35: cc2 .............................. Passed 99.07 sec; Start 69: cc52; 7/401 Test #44: cc29 ............................. Passed 63.23 sec; Start 38: cc23; 8/401 Test #112: dcft7 ............................ Passed 242.47 sec; Start 40: cc25; 9/401 Test #69: cc52 ............................. Passed 63.01 sec; Start 61: cc44; 10/401 Test #39: cc24 ............................. Passed 117.59 sec; Start 36: cc21; 11/401 Test #25: cc13a ............................ Passed 261.95 sec; Start 75: cc7; 12/401 Test #274: opt13 ............................ Passed 266.64 sec; Start 74: cc6; 13/401 Test #45: cc3 .............................. Passed 162.14 sec; Start 29: cc14; 14/401 Test #41: cc26 ............................. Passed 100.81 sec; Start 42: cc27; 15/401 Test #189: fd-freq-energy-large ............. Passed 277.33 sec; Start 47: cc31; 16/401 Test #191: fd-freq-gradient-large ........... Passed 278.60 sec; Start 68: cc51; 17/401 Test #178: isapt1 ........................... Passed 294.68 sec; Start 296: pywrap-all; 18/401 Test #61: cc44 ............................. Passed 53.08 sec; Start 73: cc5a; 19/401 Test #68: cc51 ............................. Passed 48.46 sec; Start 24: cc13; 20/401 Test #38: cc23 ...............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:1192,Test,Test,1192,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,ython-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 316.06 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 469.47 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 544.74 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 628.02 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 336.73 sec; Start 318: sapt4; 6/411 Test #205: frac-traverse .................... Passed 224.53 sec; Start 325: scf-bz2; 7/411 Test #113: dcft7 ............................ Passed 351.15 sec; Start 1: adc1; 8/411 Test #278: opt13 ............................ Passed 840.66 sec; Start 2: adc2; 9/411 Test #1: adc1 ............................. Passed 25.01 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:1147,Test,Test,1147,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,ython3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c SKIPPED [ 59%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED [ 72%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]; ============================================================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libef,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:2417,test,tests,2417,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['test'],['tests']
Testability,ython3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c SKIPPED [ 59%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED [ 72%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]; ============================================================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:2524,test,tests,2524,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['test'],['tests']
Testability,ywrap-alias ..................... Passed 50.64 sec; Start 310: pywrap-molecule; 299/412 Test #309: pywrap-db3 ....................... Passed 0.91 sec; Start 311: rasci-c2-active; 300/412 Test #310: pywrap-molecule .................. Passed 1.36 sec; Start 312: rasci-h2o; 301/412 Test #311: rasci-c2-active .................. Passed 5.28 sec; Start 313: rasci-ne; 302/412 Test #312: rasci-h2o ........................ Passed 4.37 sec; Start 314: rasscf-sp; 303/412 Test #298: pubchem1 ......................... Passed 61.73 sec; Start 315: sad1; 304/412 Test #293: psimrcc-fd-freq2 ................. Passed 75.37 sec; Start 316: sapt1; 305/412 Test #315: sad1 ............................. Passed 2.92 sec; Start 318: sapt3; 306/412 Test #314: rasscf-sp ........................ Passed 23.61 sec; Start 320: sapt5; 307/412 Test #316: sapt1 ............................ Passed 19.39 sec; Start 321: sapt6; 308/412 Test #308: pywrap-db1 ....................... Passed 44.56 sec; Start 322: sapt-dft-api; 309/412 Test #313: rasci-ne ......................... Passed 40.75 sec; Start 323: sapt-dft-lrc; 310/412 Test #156: dft-grad-lr3 ..................... Passed 473.64 sec; Start 324: sapt7; 311/412 Test #303: pywrap-cbs1 ...................... Passed 101.22 sec; Start 325: sapt8; 312/412 Test #322: sapt-dft-api ..................... Passed 18.65 sec; Start 327: scf-ecp; 313/412 Test #323: sapt-dft-lrc ..................... Passed 20.88 sec; Start 328: scf-guess-read1; 314/412 Test #325: sapt8 ............................ Passed 16.73 sec; Start 329: scf-upcast-custom-basis; 315/412 Test #328: scf-guess-read1 .................. Passed 2.89 sec; Start 330: scf-guess-read2; 316/412 Test #329: scf-upcast-custom-basis .......... Passed 3.07 sec; Start 331: scf-bs; 317/412 Test #331: scf-bs ........................... Passed 2.13 sec; Start 332: scf1; 318/412 Test #330: scf-guess-read2 .................. Passed 7.21 sec; Start 333: scf-occ; 319/412 Test #333: scf-occ ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:28827,Test,Test,28827,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,ywrap-align-chiral .............. Passed 3.28 sec; Start 148: dfomp3-grad1; 265/411 Test #132: dfmp2-4 .......................... Passed 6.32 sec; Start 385: psi4numpy-fci; 266/411 Test #236: mpn-bh ........................... Passed 4.79 sec; Start 53: cc37; 267/411 Test #62: cc45 ............................. Passed 10.83 sec; Start 146: dfomp3-1; 268/411 Test #283: opt-freeze-coords ................ Passed 6.26 sec; Start 235: mp2-property; 269/411 Test #72: cc54 ............................. Passed 16.30 sec; Start 351: dft-reference; 270/411 Test #90: cepa1 ............................ Passed 9.26 sec; Start 370: scf-coverage; 271/411 Test #385: psi4numpy-fci .................... Passed 5.24 sec; Start 344: dfep2-1; 272/411 Test #235: mp2-property ..................... Passed 3.07 sec; Start 269: opt3; 273/411 Test #351: dft-reference .................... Passed 3.10 sec; Start 48: cc32; 274/411 Test #152: dfomp2p5-grad1 ................... Passed 14.38 sec; Start 143: dfomp2-grad1; 275/411 Test #344: dfep2-1 .......................... Passed 3.33 sec; Start 154: dfrasscf-sp; 276/411 Test #269: opt3 ............................. Passed 3.65 sec; Start 109: dcft3; 277/411 Test #370: scf-coverage ..................... Passed 5.60 sec; Start 201: fnocc3; 278/411 Test #53: cc37 ............................. Passed 11.48 sec; Start 213: mints2; 279/411 Test #146: dfomp3-1 ......................... Passed 11.05 sec; Start 128: dfccsdat1; 280/411 Test #148: dfomp3-grad1 ..................... Passed 15.33 sec; Start 265: opt1; 281/411 Test #154: dfrasscf-sp ...................... Passed 5.23 sec; Start 391: python-mints2; 282/411 Test #213: mints2 ........................... Passed 2.62 sec; Start 226: mp2-1; 283/411 Test #48: cc32 ............................. Passed 9.31 sec; Start 284: props1; 284/411 Test #143: dfomp2-grad1 ..................... Passed 7.13 sec; Start 384: psi4numpy-rhf-hessian; 285/411 Test #201: fnocc3 ........................... Passed 5.73 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:25702,Test,Test,25702,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,ywrap-basis; 339/401 Test #294: pubchem2 ......................... Passed 1.46 sec; Start 299: pywrap-checkrun-convcrit; 340/401 Test #269: opt7 ............................. Passed 30.82 sec; Start 300: pywrap-checkrun-rhf; 341/401 Test #144: dfomp2-grad3 ..................... Passed 181.03 sec; Start 301: pywrap-checkrun-rohf; 342/401 Test #278: opt-irc-3 ........................ Passed 19.25 sec; Start 302: pywrap-checkrun-uhf; 343/401 Test #297: pywrap-basis ..................... Passed 9.99 sec; Start 304: pywrap-db3; 344/401 Test #304: pywrap-db3 ....................... Passed 0.90 sec; Start 306: rasci-c2-active; 345/401 Test #299: pywrap-checkrun-convcrit ......... Passed 10.69 sec; Start 307: rasci-h2o; 346/401 Test #292: psithon2 ......................... Passed 14.67 sec; Start 308: rasci-ne; 347/401 Test #109: dcft4 ............................ Passed 254.77 sec; Start 313: sapt3; 348/401 Test #307: rasci-h2o ........................ Passed 2.60 sec; Start 315: sapt5; 349/401 Test #306: rasci-c2-active .................. Passed 5.21 sec; Start 316: sapt6; 350/401 Test #272: opt11 ............................ Passed 36.20 sec; Start 317: sapt-dft-api; 351/401 Test #293: pubchem1 ......................... Passed 23.07 sec; Start 318: sapt-dft-lrc; 352/401 Test #313: sapt3 ............................ Passed 12.75 sec; Start 319: sapt7; 353/401 Test #317: sapt-dft-api ..................... Passed 9.24 sec; Start 322: scf-ecp; 354/401 Test #318: sapt-dft-lrc ..................... Passed 11.33 sec; Start 325: scf-guess-read2; 355/401 Test #315: sapt5 ............................ Passed 23.94 sec; Start 331: scf4; 356/401 Test #325: scf-guess-read2 .................. Passed 5.67 sec; Start 333: scf6; 357/401 Test #308: rasci-ne ......................... Passed 30.14 sec; Start 334: scf7; 358/401 Test #319: sapt7 ............................ Passed 22.59 sec; Start 337: soscf-ref; 359/401 Test #331: scf4 ............................. Passed 9.88 sec; Start 338:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:32610,Test,Test,32610,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,ywrap-cbs1 ...................... Passed 57.75 sec; Start 47: cc30; 53/412 Test #372: dft-custom-dhdf .................. Passed 102.93 sec; Start 92: cepa-module; 54/412 Test #182: fsapt-allterms ................... Passed 579.58 sec; Start 320: sapt5; 55/412 Test #280: opt14 ............................ Passed 94.37 sec; Start 70: cc51; 56/412 Test #194: fd-freq-energy-large ............. Passed 545.92 sec; Start 76: cc6; 57/412 Test #318: sapt3 ............................ Passed 99.92 sec; Start 293: psimrcc-fd-freq2; 58/412 Test #47: cc30 ............................. Passed 48.45 sec; Start 205: frac-ip-fitting; 59/412 Test #326: scf-bz2 .......................... Passed 165.53 sec; Start 168: dft-b3lyp; 60/412 Test #92: cepa-module ...................... Passed 64.56 sec; Start 193: fd-freq-energy; 61/412 Test #281: opt-irc-1 ........................ Passed 86.58 sec; Start 231: mp2-module; 62/412 Test #320: sapt5 ............................ Passed 93.23 sec; Start 17: cbs-xtpl-opt; 63/412 Test #76: cc6 .............................. Passed 75.78 sec; Start 20: cbs-xtpl-wrapper; 64/412 Test #70: cc51 ............................. Passed 87.01 sec; Start 260: omp3-3; 65/412 Test #205: frac-ip-fitting .................. Passed 76.46 sec; Start 390: python-pubchem; 66/412 Test #206: frac-traverse .................... Passed 244.37 sec; Start 62: cc44; 67/412 Test #293: psimrcc-fd-freq2 ................. Passed 85.30 sec; Start 261: omp3-4; 68/412 Test #193: fd-freq-energy ................... Passed 63.85 sec; Start 116: dcft9; 69/412 Test #168: dft-b3lyp ........................ Passed 82.97 sec; Start 298: pubchem1; 70/412 Test #26: cc13a ............................ Passed 316.11 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 82.21 sec; Start 21: cc1; 72/412 Test #20: cbs-xtpl-wrapper ................. Passed 82.20 sec; Start 243: ocepa-grad2; 73/412 Test #390: python-pubchem ................... Passed 77.47 sec; Start 19: cbs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:6223,Test,Test,6223,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,ywrap-checkrun-rhf .............. Passed 1605.76 sec; Start 279: opt13; 17/412 Test #301: pywrap-all ....................... Passed 1667.37 sec; Start 30: cc14; 18/412 Test #241: ocepa-freq1 ...................... Passed 1040.94 sec; Start 113: dcft6; 19/412 Test #29: cc13d ............................ Passed 491.27 sec; Start 374: dft-custom-mgga; 20/412 Test #25: cc13 ............................. Passed 606.44 sec; Start 71: cc52; 21/412 Test #196: fd-freq-gradient-large ........... Passed 319.51 sec; Start 282: opt-irc-2; 22/412 Test #112: dcft5 ............................ Passed 561.65 sec; Start 321: sapt6; 23/412 Test #113: dcft6 ............................ Passed 232.47 sec; Start 360: tu6-cp-ne2; 24/412 Test #374: dft-custom-mgga .................. Passed 192.83 sec; Start 13: cbs-xtpl-alpha; 25/412 Test #77: cc7 .............................. Passed 1301.69 sec; Start 47: cc30; 26/412 Test #179: fsapt1 ........................... Passed 2015.04 sec; Start 159: dfscf-bz2; 27/412 Test #182: fsapt-allterms ................... Passed 571.63 sec; Start 98: cisd-opt-fd; 28/412 Test #111: dcft4 ............................ Passed 2043.29 sec; Start 48: cc31; 29/412 Test #307: pywrap-checkrun-uhf .............. Passed 1620.37 sec; Start 387: cookbook-rohf-orb-rot; 30/412 Test #71: cc52 ............................. Passed 306.40 sec; Start 59: cc41; 31/412 Test #194: fd-freq-energy-large ............. Passed 569.87 sec; Start 32: cc16; 32/412 Test #282: opt-irc-2 ........................ Passed 255.47 sec; Start 380: cc-module; 33/412 Test #321: sapt6 ............................ Passed 178.83 sec; Start 61: cc43; 34/412 Test #47: cc30 ............................. Passed 162.90 sec; Start 348: sapt-dft2; 35/412 Test #159: dfscf-bz2 ........................ Passed 140.15 sec; Start 184: isapt2; 36/412 Test #306: pywrap-checkrun-rohf ............. Passed 1018.83 sec; Start 75: cc5a; 37/412 Test #98: cisd-opt-fd ...................... Passed 177.98 sec; Start 105:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:2892,Test,Test,2892,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,ywrap-checkrun-rhf .............. Passed 413.09 sec; Start 169: dft1; 34/412 Test #30: cc14 ............................. Passed 145.98 sec; Start 282: opt-irc-2; 35/412 Test #115: dcft8 ............................ Passed 187.59 sec; Start 45: cc29; 36/412 Test #306: pywrap-checkrun-rohf ............. Passed 207.51 sec; Start 360: tu6-cp-ne2; 37/412 Test #13: cbs-xtpl-alpha ................... Passed 176.77 sec; Start 380: cc-module; 38/412 Test #155: dft-grad-lr2 ..................... Passed 102.35 sec; Start 71: cc52; 39/412 Test #25: cc13 ............................. Passed 99.79 sec; Start 372: dft-custom-dhdf; 40/412 Test #326: scf-bz2 .......................... Passed 131.36 sec; Start 29: cc13d; 41/412 Test #45: cc29 ............................. Passed 106.33 sec; Start 387: cookbook-rohf-orb-rot; 42/412 Test #380: cc-module ........................ Passed 66.63 sec; Start 280: opt14; 43/412 Test #169: dft1 ............................. Passed 114.16 sec; Start 318: sapt3; 44/412 Test #360: tu6-cp-ne2 ....................... Passed 91.83 sec; Start 11: cbs-delta-energy; 45/412 Test #206: frac-traverse .................... Passed 230.60 sec; Start 70: cc51; 46/412 Test #282: opt-irc-2 ........................ Passed 152.10 sec; Start 168: dft-b3lyp; 47/412 Test #372: dft-custom-dhdf .................. Passed 93.71 sec; Start 320: sapt5; 48/412 Test #71: cc52 ............................. Passed 107.19 sec; Start 293: psimrcc-fd-freq2; 49/412 Test #280: opt14 ............................ Passed 84.19 sec; Start 48: cc31; 50/412 Test #318: sapt3 ............................ Passed 85.71 sec; Start 281: opt-irc-1; 51/412 Test #29: cc13d ............................ Passed 96.43 sec; Start 28: cc13c; 52/412 Test #26: cc13a ............................ Passed 337.24 sec; Start 205: frac-ip-fitting; 53/412 Test #387: cookbook-rohf-orb-rot ............ Passed 106.36 sec; Start 32: cc16; 54/412 Test #70: cc51 ............................. Passed 74.18 sec; Start 11,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:4464,Test,Test,4464,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,"ywrap-checkrun-uhf .............. Passed 713.66 sec; 409/411 Test #386: cookbook-rohf-orb-rot ............ Passed 161.04 sec; 410/411 Test #300: pywrap-all ....................... Passed 782.90 sec; 411/411 Test #304: pywrap-checkrun-rhf .............. Passed 743.15 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 69.47 sec*proc (2 tests); autotest = 2116.22 sec*proc (26 tests); cart = 16612.59 sec*proc (123 tests); cas = 62.15 sec*proc (1 test); casscf = 157.07 sec*proc (11 tests); cbs = 2510.55 sec*proc (10 tests); cc = 10612.98 sec*proc (65 tests); cdomp2 = 81.08 sec*proc (2 tests); cepa = 296.50 sec*proc (7 tests); ci = 125.30 sec*proc (8 tests); cisd = 203.11 sec*proc (7 tests); cookbook = 161.04 sec*proc (1 test); cubeprop = 22.05 sec*proc (2 tests); dcft = 3092.73 sec*proc (13 tests); df = 1676.00 sec*proc (38 tests); dfccd = 5.43 sec*proc (1 test); dfccd-grad = 23.87 sec*proc (1 test); dfccdl = 5.84 sec*proc (1 test); dfccsd = 12.87 sec*proc (1 test); dfccsd-grad = 48.16 sec*proc (1 test); dfccsd-t-grad = 58.36 sec*proc (1 test); dfccsdat = 27.90 sec*proc (1 test); dfccsdl = 18.85 sec*proc (1 test); dfccsdt = 20.66 sec*proc (1 test); dfep2 = 6.65 sec*proc (2 tests); dfmp2 = 160.87 sec*proc (11 tests); dfomp2 = 668.52 sec*proc (7 tests); dfomp2.5 = 158.90 sec*proc (4 tests); dfomp3 = 194.44 sec*proc (4 tests); dfscf = 140.97 sec*proc (1 test); dft = 1440.34 sec*proc (27 tests); docs = 1.27 sec*proc (2 tests); ecp = 46.88 sec*proc (2 tests); fci = 17.32 sec*proc (2 tests); fcidump = 6.53 sec*proc (1 test); findif = 938.98 sec*proc (5 tests); fnocc = 129.35 sec*proc (4 tests); freq = 994.16 sec*proc (6 tests); gradient = 1502.06 sec*proc (16 tests); json = 18.08 sec*proc (8 tests); longtests = 3739.74 sec*proc (5 tests); mcscf = 3.71 sec*proc (3 tests); minitests = 58.58 sec*proc (4 tests); mints = 91.24 sec*proc (14 tests); misc = 538.48 sec*proc (16 tests); mp2 = 635.39 sec*proc (13 tests); nbody = 98.12 sec*proc (2 tests); numpy =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:39135,test,test,39135,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['test'],['test']
Testability,ywrap-db1 ....................... Passed 29.84 sec; Start 155: dfscf-bz2; 128/404 Test #26: cc13b ............................ Passed 18.37 sec; Start 245: ocepa3; 129/404 Test #56: cc4 .............................. Passed 12.64 sec; Start 319: sapt5; 130/404 Test #200: fnocc2 ........................... Passed 17.05 sec; Start 297: pubchem1; 131/404 Test #326: scf-ecp .......................... Passed 24.49 sec; Start 12: cbs-parser; 132/404 Test #245: ocepa3 ........................... Passed 7.38 sec; Start 142: dfomp2-4; 133/404 Test #312: rasci-ne ......................... Passed 30.48 sec; Start 125: dfccsd-grad1; 134/404 Test #374: dft-custom-gga ................... Passed 26.70 sec; Start 51: cc35; 135/404 Test #142: dfomp2-4 ......................... Passed 6.92 sec; Start 196: fd-gradient; 136/404 Test #125: dfccsd-grad1 ..................... Passed 7.22 sec; Start 100: ci-property; 137/404 Test #389: python-pubchem ................... Passed 23.12 sec; Start 126: dfccsd-t-grad1; 138/404 Test #51: cc35 ............................. Passed 8.62 sec; Start 313: rasscf-sp; 139/404 Test #12: cbs-parser ....................... Passed 13.54 sec; Start 33: cc18; 140/404 Test #319: sapt5 ............................ Passed 24.55 sec; Start 348: sapt-compare; 141/404 Test #297: pubchem1 ......................... Passed 22.81 sec; Start 62: cc45; 142/404 Test #126: dfccsd-t-grad1 ................... Passed 10.40 sec; Start 375: pywrap-bfs; 143/404 Test #155: dfscf-bz2 ........................ Passed 31.62 sec; Start 152: dfomp2p5-grad1; 144/404 Test #313: rasscf-sp ........................ Passed 11.43 sec; Start 54: cc38; 145/404 Test #62: cc45 ............................. Passed 7.58 sec; Start 282: opt-irc-3; 146/404 Test #33: cc18 ............................. Passed 14.20 sec; Start 172: dft3; 147/404 Test #152: dfomp2p5-grad1 ................... Passed 5.61 sec; Start 252: omp2-grad2; 148/404 Test #100: ci-property ...................... Passed 21.60 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:12783,Test,Test,12783,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,ywrap-db3 ....................... Passed 0.67 sec; Start 309: pywrap-molecule; 306/411 Test #309: pywrap-molecule .................. Passed 1.15 sec; Start 310: rasci-c2-active; 307/411 Test #310: rasci-c2-active .................. Passed 7.23 sec; Start 311: rasci-h2o; 308/411 Test #311: rasci-h2o ........................ Passed 3.66 sec; Start 312: rasci-ne; 309/411 Test #281: opt-irc-2 ........................ Passed 200.49 sec; Start 313: rasscf-sp; 310/411 Test #307: pywrap-db1 ....................... Passed 44.94 sec; Start 314: sad1; 311/411 Test #314: sad1 ............................. Passed 3.59 sec; Start 315: sapt1; 312/411 Test #315: sapt1 ............................ Passed 20.29 sec; Start 317: sapt3; 313/411 Test #312: rasci-ne ......................... Passed 34.02 sec; Start 319: sapt5; 314/411 Test #313: rasscf-sp ........................ Passed 52.33 sec; Start 320: sapt6; 315/411 Test #302: pywrap-cbs1 ...................... Passed 212.20 sec; Start 321: sapt-dft-api; 316/411 Test #317: sapt3 ............................ Passed 73.42 sec; Start 322: sapt-dft-lrc; 317/411 Test #319: sapt5 ............................ Passed 77.57 sec; Start 323: sapt7; 318/411 Test #321: sapt-dft-api ..................... Passed 19.67 sec; Start 324: sapt8; 319/411 Test #322: sapt-dft-lrc ..................... Passed 20.38 sec; Start 326: scf-ecp; 320/411 Test #324: sapt8 ............................ Passed 18.16 sec; Start 327: scf-guess-read1; 321/411 Test #327: scf-guess-read1 .................. Passed 3.44 sec; Start 328: scf-upcast-custom-basis; 322/411 Test #328: scf-upcast-custom-basis .......... Passed 2.83 sec; Start 329: scf-guess-read2; 323/411 Test #323: sapt7 ............................ Passed 35.22 sec; Start 330: scf-bs; 324/411 Test #329: scf-guess-read2 .................. Passed 8.70 sec; Start 331: scf1; 325/411 Test #330: scf-bs ........................... Passed 4.28 sec; Start 332: scf-occ; 326/411 Test #332: scf-occ .........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:29334,Test,Test,29334,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,ywrap-db3 ....................... Passed 0.81 sec; Start 309: pywrap-molecule; 298/411 Test #309: pywrap-molecule .................. Passed 1.16 sec; Start 310: rasci-c2-active; 299/411 Test #280: opt-irc-1 ........................ Passed 99.47 sec; Start 311: rasci-h2o; 300/411 Test #311: rasci-h2o ........................ Passed 1.42 sec; Start 312: rasci-ne; 301/411 Test #310: rasci-c2-active .................. Passed 4.22 sec; Start 313: rasscf-sp; 302/411 Test #299: pywrap-alias ..................... Passed 60.63 sec; Start 314: sad1; 303/411 Test #292: psimrcc-fd-freq2 ................. Passed 77.97 sec; Start 315: sapt1; 304/411 Test #314: sad1 ............................. Passed 3.59 sec; Start 317: sapt3; 305/411 Test #313: rasscf-sp ........................ Passed 21.47 sec; Start 319: sapt5; 306/411 Test #315: sapt1 ............................ Passed 18.39 sec; Start 320: sapt6; 307/411 Test #307: pywrap-db1 ....................... Passed 41.68 sec; Start 321: sapt-dft-api; 308/411 Test #312: rasci-ne ......................... Passed 36.47 sec; Start 322: sapt-dft-lrc; 309/411 Test #103: dcft-grad1 ....................... Passed 680.14 sec; Start 323: sapt7; 310/411 Test #302: pywrap-cbs1 ...................... Passed 79.68 sec; Start 324: sapt8; 311/411 Test #321: sapt-dft-api ..................... Passed 17.54 sec; Start 326: scf-ecp; 312/411 Test #324: sapt8 ............................ Passed 14.36 sec; Start 327: scf-guess-read1; 313/411 Test #322: sapt-dft-lrc ..................... Passed 19.67 sec; Start 328: scf-upcast-custom-basis; 314/411 Test #327: scf-guess-read1 .................. Passed 1.73 sec; Start 329: scf-guess-read2; 315/411 Test #328: scf-upcast-custom-basis .......... Passed 2.25 sec; Start 330: scf-bs; 316/411 Test #330: scf-bs ........................... Passed 1.13 sec; Start 331: scf1; 317/411 Test #329: scf-guess-read2 .................. Passed 5.42 sec; Start 332: scf-occ; 318/411 Test #331: scf1 ............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:28728,Test,Test,28728,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,"ywrap-db3 ....................... Passed 14.49 sec; 407/412 Test #209: matrix1 .......................... Passed 15.24 sec; 408/412 Test #176: docs-dft ......................... Passed 16.24 sec; 409/412 Test #365: options1 ......................... Passed 13.68 sec; 410/412 Test #403: json-schema-1-throws ............. Passed 13.62 sec; 411/412 Test #88: cepa1 ............................ Passed 16.51 sec; 412/412 Test #319: sapt4 ............................ Passed 1885.78 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 85.75 sec*proc (2 tests); autotest = 1081.30 sec*proc (26 tests); cart = 14263.36 sec*proc (123 tests); cas = 59.52 sec*proc (1 test); casscf = 245.49 sec*proc (11 tests); cbs = 978.44 sec*proc (11 tests); cc = 5456.09 sec*proc (65 tests); cdomp2 = 39.91 sec*proc (2 tests); cepa = 180.93 sec*proc (7 tests); ci = 233.38 sec*proc (8 tests); cisd = 294.07 sec*proc (7 tests); cookbook = 58.33 sec*proc (1 test); cubeprop = 77.64 sec*proc (2 tests); dcft = 2278.61 sec*proc (13 tests); df = 1624.44 sec*proc (38 tests); dfccd = 16.01 sec*proc (1 test); dfccd-grad = 27.12 sec*proc (1 test); dfccdl = 16.03 sec*proc (1 test); dfccsd = 16.85 sec*proc (1 test); dfccsd-grad = 16.86 sec*proc (1 test); dfccsd-t-grad = 21.71 sec*proc (1 test); dfccsdat = 46.01 sec*proc (1 test); dfccsdl = 16.94 sec*proc (1 test); dfccsdt = 17.32 sec*proc (1 test); dfep2 = 34.66 sec*proc (2 tests); dfmp2 = 299.94 sec*proc (11 tests); dfomp2 = 703.06 sec*proc (7 tests); dfomp2.5 = 80.33 sec*proc (4 tests); dfomp3 = 113.97 sec*proc (4 tests); dfscf = 159.76 sec*proc (1 test); dft = 1825.64 sec*proc (27 tests); docs = 30.71 sec*proc (2 tests); ecp = 76.81 sec*proc (2 tests); fci = 39.98 sec*proc (2 tests); fcidump = 17.80 sec*proc (1 test); findif = 893.74 sec*proc (5 tests); fnocc = 137.05 sec*proc (4 tests); freq = 902.68 sec*proc (6 tests); gradient = 1170.66 sec*proc (16 tests); json = 128.43 sec*proc (8 tests); longtests = 3551.47 sec*proc (5 tests); m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:39120,test,tests,39120,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['test'],['tests']
Testability,"ywrap-molecule .................. Passed 1.08 sec; Start 88: cepa1; 398/413 Test #356: tu2-ch2-energy ................... Passed 3.20 sec; 399/413 Test #210: matrix1 .......................... Passed 0.66 sec; 400/413 Test #211: mcscf1 ........................... Passed 2.13 sec; 401/413 Test #212: mcscf2 ........................... Passed 3.62 sec; 402/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 4.39 sec; 403/413 Test #213: mcscf3 ........................... Passed 2.91 sec; 404/413 Test #329: scf-guess-read1 .................. Passed 4.72 sec; 405/413 Test #162: dft-grac ......................... Passed 2.31 sec; 406/413 Test #330: scf-upcast-custom-basis .......... Passed 4.85 sec; 407/413 Test #8: castup1 .......................... Passed 4.98 sec; 408/413 Test #313: rasci-h2o ........................ Passed 5.23 sec; 409/413 Test #132: dfmp2-2 .......................... Passed 5.73 sec; 410/413 Test #88: cepa1 ............................ Passed 3.93 sec; 411/413 Test #18: cbs-xtpl-func .................... Passed 1465.89 sec; 412/413 Test #180: fsapt1 ........................... Passed 1916.37 sec; 413/413 Test #320: sapt4 ............................ Passed 1842.77 sec. 100% tests passed, 0 tests failed out of 413. Label Time Summary:; adc = 73.71 sec*proc (2 tests); autotest = 2032.85 sec*proc (26 tests); cart = 19618.09 sec*proc (123 tests); cas = 54.46 sec*proc (1 test); casscf = 99.80 sec*proc (11 tests); cbs = 2579.77 sec*proc (11 tests); cc = 15643.19 sec*proc (65 tests); cdomp2 = 48.29 sec*proc (2 tests); cepa = 188.77 sec*proc (7 tests); ci = 115.37 sec*proc (8 tests); cisd = 188.24 sec*proc (7 tests); cookbook = 186.42 sec*proc (1 test); cubeprop = 23.39 sec*proc (3 tests); dcft = 5685.84 sec*proc (13 tests); df = 2727.51 sec*proc (38 tests); dfccd = 6.37 sec*proc (1 test); dfccd-grad = 5.73 sec*proc (1 test); dfccdl = 3.74 sec*proc (1 test); dfccsd = 10.80 sec*proc (1 test); dfccsd-grad = 40.30 sec*proc (1 test); dfccsd-t-grad = 74.65 se",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:38373,Test,Test,38373,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,ywrap-molecule .................. Passed 1.17 sec; Start 310: rasci-c2-active; 314/411 Test #310: rasci-c2-active .................. Passed 3.43 sec; Start 311: rasci-h2o; 315/411 Test #311: rasci-h2o ........................ Passed 1.02 sec; Start 312: rasci-ne; 316/411 Test #312: rasci-ne ......................... Passed 26.87 sec; Start 313: rasscf-sp; 317/411 Test #313: rasscf-sp ........................ Passed 2.99 sec; Start 314: sad1; 318/411 Test #314: sad1 ............................. Passed 2.34 sec; Start 315: sapt1; 319/411 Test #315: sapt1 ............................ Passed 15.26 sec; Start 317: sapt3; 320/411 Test #317: sapt3 ............................ Passed 65.42 sec; Start 319: sapt5; 321/411 Test #319: sapt5 ............................ Passed 59.80 sec; Start 320: sapt6; 322/411 Test #320: sapt6 ............................ Passed 124.23 sec; Start 321: sapt-dft-api; 323/411 Test #321: sapt-dft-api ..................... Passed 15.41 sec; Start 322: sapt-dft-lrc; 324/411 Test #322: sapt-dft-lrc ..................... Passed 18.05 sec; Start 323: sapt7; 325/411 Test #323: sapt7 ............................ Passed 28.88 sec; Start 324: sapt8; 326/411 Test #324: sapt8 ............................ Passed 11.64 sec; Start 326: scf-ecp; 327/411 Test #326: scf-ecp .......................... Passed 20.55 sec; Start 327: scf-guess-read1; 328/411 Test #327: scf-guess-read1 .................. Passed 1.55 sec; Start 328: scf-upcast-custom-basis; 329/411 Test #328: scf-upcast-custom-basis .......... Passed 1.40 sec; Start 329: scf-guess-read2; 330/411 Test #329: scf-guess-read2 .................. Passed 3.63 sec; Start 330: scf-bs; 331/411 Test #330: scf-bs ........................... Passed 1.09 sec; Start 331: scf1; 332/411 Test #331: scf1 ............................. Passed 3.69 sec; Start 332: scf-occ; 333/411 Test #332: scf-occ .......................... Passed 1.57 sec; Start 333: scf2; 334/411 Test #333: scf2 ............................. Passed 1.37,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:29751,Test,Test,29751,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,ywrap-molecule .................. Passed 1.23 sec; Start 310: rasci-c2-active; 314/411 Test #310: rasci-c2-active .................. Passed 3.35 sec; Start 311: rasci-h2o; 315/411 Test #311: rasci-h2o ........................ Passed 1.15 sec; Start 312: rasci-ne; 316/411 Test #312: rasci-ne ......................... Passed 30.80 sec; Start 313: rasscf-sp; 317/411 Test #313: rasscf-sp ........................ Passed 3.35 sec; Start 314: sad1; 318/411 Test #314: sad1 ............................. Passed 2.32 sec; Start 315: sapt1; 319/411 Test #315: sapt1 ............................ Passed 16.80 sec; Start 317: sapt3; 320/411 Test #317: sapt3 ............................ Passed 62.76 sec; Start 319: sapt5; 321/411 Test #319: sapt5 ............................ Passed 67.51 sec; Start 320: sapt6; 322/411 Test #320: sapt6 ............................ Passed 144.15 sec; Start 321: sapt-dft-api; 323/411 Test #321: sapt-dft-api ..................... Passed 15.28 sec; Start 322: sapt-dft-lrc; 324/411 Test #322: sapt-dft-lrc ..................... Passed 18.85 sec; Start 323: sapt7; 325/411 Test #323: sapt7 ............................ Passed 28.91 sec; Start 324: sapt8; 326/411 Test #324: sapt8 ............................ Passed 11.95 sec; Start 326: scf-ecp; 327/411 Test #326: scf-ecp .......................... Passed 21.50 sec; Start 327: scf-guess-read1; 328/411 Test #327: scf-guess-read1 .................. Passed 1.43 sec; Start 328: scf-upcast-custom-basis; 329/411 Test #328: scf-upcast-custom-basis .......... Passed 1.66 sec; Start 329: scf-guess-read2; 330/411 Test #329: scf-guess-read2 .................. Passed 3.38 sec; Start 330: scf-bs; 331/411 Test #330: scf-bs ........................... Passed 1.12 sec; Start 331: scf1; 332/411 Test #331: scf1 ............................. Passed 4.00 sec; Start 332: scf-occ; 333/411 Test #332: scf-occ .......................... Passed 1.67 sec; Start 333: scf2; 334/411 Test #333: scf2 ............................. Passed 1.47,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:29780,Test,Test,29780,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,ywrap-molecule; 373/411 Test #401: json-schema-1-orient ............. Passed 2.44 sec; Start 408: skeletonmointegrals; 374/411 Test #403: json-schema-1-gradient ........... Passed 2.11 sec; Start 410: skeletonsointegrals; 375/411 Test #330: scf-bs ........................... Passed 1.83 sec; Start 387: python-energy; 376/411 Test #378: mints12 .......................... Passed 1.28 sec; Start 354: tu2-ch2-energy; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.68 sec; Start 188: fci-tdm; 378/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 411: skeletonwavefunction; 379/411 Test #220: mints-helper ..................... Passed 2.03 sec; Start 349: sapt-sf1; 380/411 Test #398: json-v11-gradient ................ Passed 2.22 sec; Start 396: python-memdfjk; 381/411 Test #209: mcscf1 ........................... Passed 3.10 sec; Start 239: numpy-array-interface; 382/411 Test #405: skeleton ......................... Passed 3.04 sec; Start 211: mcscf3; 383/411 Test #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost .............. Passed 3.33 sec; Start 175: docs-dft; 387/411 Test #404: json-schema-1-properties ......... Passed 3.31 sec; Start 216: mints5; 388/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 364: options1; 389/411 Test #354: tu2-ch2-energy ................... Passed 3.22 sec; Start 409: skeletonscf; 390/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 208: matrix1; 391/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 212: mints1; 392/411 Test #364: options1 ......................... Passed 0.58 sec; Start 215: mints4; 393/411 Test #175: docs-dft ......................... Passed 0.61 sec; Start 174: docs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:36050,Test,Test,36050,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,z] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS V,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6150,test,tests,6150,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['test'],['tests']
Testability,zaptn-nh2 ........................ Passed 2.73 sec; Start 243: omp2-2; 227/401 Test #56: cc4 .............................. Passed 53.51 sec; Start 353: tu5-sapt; 228/401 Test #389: python-cc54 ...................... Passed 45.82 sec; Start 121: dfccd-grad1; 229/401 Test #365: scf-coverage ..................... Passed 8.70 sec; Start 182: fci-h2o-2; 230/401 Test #83: cdomp2-2 ......................... Passed 49.94 sec; Start 250: omp2p5-2; 231/401 Test #320: sapt8 ............................ Passed 17.13 sec; Start 100: cubeprop; 232/401 Test #222: mp2-1 ............................ Passed 12.18 sec; Start 186: fci-coverage; 233/401 Test #195: fnocc1 ........................... Passed 27.92 sec; Start 85: cepa0-grad2; 234/401 Test #106: dcft1 ............................ Passed 89.98 sec; Start 311: sapt1; 235/401 Test #182: fci-h2o-2 ........................ Passed 4.21 sec; Start 145: dfomp3-1; 236/401 Test #32: cc17 ............................. Passed 49.14 sec; Start 181: fci-h2o; 237/401 Test #355: x2c1 ............................. Passed 71.39 sec; Start 258: omp3-grad1; 238/401 Test #148: dfomp3-grad2 ..................... Passed 96.81 sec; Start 14: cbs-xtpl-energy; 239/401 Test #132: dfmp2-ecp ........................ Passed 10.88 sec; Start 346: dft-reference; 240/401 Test #352: tu4-h2o-freq ..................... Passed 15.72 sec; Start 398: json-schema_0_orient; 241/401 Test #20: cc1 .............................. Passed 103.51 sec; Start 362: scf-hess1; 242/401 Test #100: cubeprop ......................... Passed 7.85 sec; Start 140: dfomp2-3; 243/401 Test #353: tu5-sapt ......................... Passed 9.21 sec; Start 198: fnocc4; 244/401 Test #181: fci-h2o .......................... Passed 4.30 sec; Start 82: cdomp2-1; 245/401 Test #398: json-schema_0_orient ............. Passed 2.30 sec; Start 251: omp2p5-grad1; 246/401 Test #186: fci-coverage ..................... Passed 7.95 sec; Start 15: cbs-xtpl-freq; 247/401 Test #346: dft-reference ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:22503,Test,Test,22503,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,zc-sp .................. Passed 2.91 sec; Start 340: scf-property; 307/412 Test #258: omp3-1 ........................... Passed 2.90 sec; Start 285: props1; 308/412 Test #192: fcidump .......................... Passed 3.82 sec; Start 135: dfmp2-grad1; 309/412 Test #180: fsapt2 ........................... Passed 5.27 sec; Start 272: opt5; 310/412 Test #311: rasci-c2-active .................. Passed 5.31 sec; Start 232: mp2p5-grad1; 311/412 Test #389: python-curve ..................... Passed 3.46 sec; Start 86: cepa0-grad1; 312/412 Test #95: cisd-h2o+-1 ...................... Passed 5.74 sec; Start 312: rasci-h2o; 313/412 Test #94: cisd-h2o+-0 ...................... Passed 5.81 sec; Start 398: json-v11-energy; 314/412 Test #266: opt1 ............................. Passed 4.69 sec; Start 121: dfccd1; 315/412 Test #295: psimrcc-sp1 ...................... Passed 4.47 sec; Start 236: mp2-property; 316/412 Test #284: opt-freeze-coords ................ Passed 7.09 sec; Start 392: python-mints2; 317/412 Test #312: rasci-h2o ........................ Passed 3.63 sec; Start 230: mp2-grad2; 318/412 Test #398: json-v11-energy .................. Passed 4.16 sec; Start 406: skeleton; 319/412 Test #236: mp2-property ..................... Passed 3.97 sec; Start 352: dft-reference; 320/412 Test #247: omp2-1 ........................... Passed 7.17 sec; Start 204: frac; 321/412 Test #340: scf-property ..................... Passed 5.94 sec; Start 225: molden2; 322/412 Test #272: opt5 ............................. Passed 5.79 sec; Start 226: mom; 323/412 Test #285: props1 ........................... Passed 6.02 sec; Start 122: dfccdl1; 324/412 Test #237: mpn-bh ........................... Passed 7.07 sec; Start 364: zaptn-nh2; 325/412 Test #120: dfcasscf-sp ...................... Passed 6.93 sec; Start 345: dfep2-1; 326/412 Test #232: mp2p5-grad1 ...................... Passed 6.24 sec; Start 214: mints2; 327/412 Test #392: python-mints2 .................... Passed 3.04 sec; Start 4: cassc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:29772,Test,Test,29772,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,zc-sp .................. Passed 3.26 sec; Start 119: dfcasscf-sp; 115/411 Test #119: dfcasscf-sp ...................... Passed 5.68 sec; Start 120: dfccd1; 116/411 Test #91: cepa-module ...................... Passed 111.91 sec; Start 121: dfccdl1; 117/411 Test #104: dcft-grad2 ....................... Passed 68.01 sec; Start 122: dfccd-grad1; 118/411 Test #120: dfccd1 ........................... Passed 1.99 sec; Start 123: dfccsd1; 119/411 Test #121: dfccdl1 .......................... Passed 2.32 sec; Start 124: dfccsdl1; 120/411 Test #123: dfccsd1 .......................... Passed 6.96 sec; Start 125: dfccsd-grad1; 121/411 Test #122: dfccd-grad1 ...................... Passed 11.53 sec; Start 126: dfccsd-t-grad1; 122/411 Test #124: dfccsdl1 ......................... Passed 9.39 sec; Start 127: dfccsdt1; 123/411 Test #127: dfccsdt1 ......................... Passed 5.62 sec; Start 128: dfccsdat1; 124/411 Test #125: dfccsd-grad1 ..................... Passed 23.04 sec; Start 129: dfmp2-1; 125/411 Test #128: dfccsdat1 ........................ Passed 13.07 sec; Start 130: dfmp2-2; 126/411 Test #126: dfccsd-t-grad1 ................... Passed 20.20 sec; Start 131: dfmp2-3; 127/411 Test #18: cbs-xtpl-func .................... Passed 857.91 sec; Start 132: dfmp2-4; 128/411 Test #130: dfmp2-2 .......................... Passed 2.07 sec; Start 133: dfmp2-ecp; 129/411 Test #115: dcft9 ............................ Passed 54.28 sec; Start 134: dfmp2-grad1; 130/411 Test #45: cc3 .............................. Passed 410.74 sec; Start 135: dfmp2-grad2; 131/411 Test #132: dfmp2-4 .......................... Passed 9.97 sec; Start 136: dfmp2-grad3; 132/411 Test #134: dfmp2-grad1 ...................... Passed 7.59 sec; Start 137: dfmp2-grad4; 133/411 Test #135: dfmp2-grad2 ...................... Passed 6.45 sec; Start 138: dfmp2-grad5; 134/411 Test #136: dfmp2-grad3 ...................... Passed 2.53 sec; Start 139: dfomp2-1; 135/411 Test #133: dfmp2-ecp ........................ Passed 13,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:11551,Test,Test,11551,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,zc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 27.02 sec; Start 24: cc13; 22/411 Test #23: cc12 ............................. Passed 11.49 sec; Start 26: cc13b; 23/411 Test #22: cc11 ............................. Passed 16.46 sec; Start 27: cc13c; 24/411 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1577,Test,Test,1577,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,zcv ..................... Passed 3.84 sec; Start 392: python-cc54; 243/411 Test #254: omp2p5-2 ......................... Passed 12.79 sec; Start 78: cc8a; 244/411 Test #198: freq-isotope2 .................... Passed 10.53 sec; Start 125: dfccsd-grad1; 245/411 Test #9: castup2 .......................... Passed 12.44 sec; Start 329: scf-guess-read2; 246/411 Test #329: scf-guess-read2 .................. Passed 6.98 sec; Start 94: cisd-h2o+-1; 247/411 Test #3: casscf-fzc-sp .................... Passed 18.71 sec; Start 142: dfomp2-4; 248/411 Test #79: cc8b ............................. Passed 28.79 sec; Start 126: dfccsd-t-grad1; 249/411 Test #94: cisd-h2o+-1 ...................... Passed 5.15 sec; Start 22: cc11; 250/411 Test #54: cc38 ............................. Passed 29.55 sec; Start 95: cisd-h2o+-2; 251/411 Test #392: python-cc54 ...................... Passed 28.18 sec; Start 295: psithon1; 252/411 Test #84: cdomp2-2 ......................... Passed 30.82 sec; Start 294: psimrcc-sp1; 253/411 Test #95: cisd-h2o+-2 ...................... Passed 5.19 sec; Start 310: rasci-c2-active; 254/411 Test #294: psimrcc-sp1 ...................... Passed 3.91 sec; Start 72: cc54; 255/411 Test #125: dfccsd-grad1 ..................... Passed 29.42 sec; Start 331: scf1; 256/411 Test #295: psithon1 ......................... Passed 9.42 sec; Start 62: cc45; 257/411 Test #310: rasci-c2-active .................. Passed 7.42 sec; Start 6: ao-casscf-sp; 258/411 Test #78: cc8a ............................. Passed 36.32 sec; Start 132: dfmp2-4; 259/411 Test #142: dfomp2-4 ......................... Passed 24.29 sec; Start 152: dfomp2p5-grad1; 260/411 Test #126: dfccsd-t-grad1 ................... Passed 22.19 sec; Start 377: pywrap-align-chiral; 261/411 Test #22: cc11 ............................. Passed 21.45 sec; Start 90: cepa1; 262/411 Test #331: scf1 ............................. Passed 4.75 sec; Start 236: mpn-bh; 263/411 Test #6: ao-casscf-sp ..................... Passed 4.17 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:23653,Test,Test,23653,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,zcv ..................... Passed 4.96 sec; Start 333: scf1; 307/413 Test #94: cisd-h2o+-0 ...................... Passed 4.41 sec; Start 389: python-energy; 308/413 Test #188: fci-h2o-2 ........................ Passed 6.48 sec; Start 273: opt5; 309/413 Test #398: python-memdfjk ................... Passed 1.04 sec; Start 271: opt3; 310/413 Test #389: python-energy .................... Passed 1.00 sec; Start 231: mp2-grad2; 311/413 Test #248: omp2-1 ........................... Passed 2.94 sec; Start 119: dfcasscf-sa-sp; 312/413 Test #233: mp2p5-grad1 ...................... Passed 2.39 sec; Start 402: json-schema-1-ghost; 313/413 Test #255: omp2p5-1 ......................... Passed 2.99 sec; Start 341: scf-property; 314/413 Test #205: frac ............................. Passed 2.48 sec; Start 181: fsapt2; 315/413 Test #259: omp3-1 ........................... Passed 2.37 sec; Start 138: dfmp2-grad3; 316/413 Test #273: opt5 ............................. Passed 2.08 sec; Start 6: ao-casscf-sp; 317/413 Test #231: mp2-grad2 ........................ Passed 2.00 sec; Start 407: skeleton; 318/413 Test #226: molden2 .......................... Passed 4.08 sec; Start 405: json-schema-1-gradient; 319/413 Test #312: rasci-c2-active .................. Passed 4.10 sec; Start 409: skeletondfmp2; 320/413 Test #296: psimrcc-sp1 ...................... Passed 4.58 sec; Start 235: mp3-grad1; 321/413 Test #402: json-schema-1-ghost .............. Passed 2.29 sec; Start 173: dft2; 322/413 Test #271: opt3 ............................. Passed 3.04 sec; Start 410: skeletonmointegrals; 323/413 Test #138: dfmp2-grad3 ...................... Passed 1.66 sec; Start 386: psi4numpy-rhf-hessian; 324/413 Test #403: json-schema-1-orient ............. Passed 5.06 sec; Start 406: json-schema-1-properties; 325/413 Test #333: scf1 ............................. Passed 4.01 sec; Start 408: skeletonaointegrals; 326/413 Test #407: skeleton ......................... Passed 1.04 sec; Start 286: props1; 327/413 Test #4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:29716,Test,Test,29716,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,"|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 226: mp2-1; Start 228: mp2-grad1; Start 394: python-vibanalysis; Start 300: pywrap-all; Start 103: dcft-grad1; Start 304: pywrap-checkrun-rhf; Start 306: pywrap-checkrun-uhf; Start 162: dft-grad-lr3; 1/411 Test #228: mp2-grad1 ........................ Passed 2.06 sec; Start 110: dcft4; 2/411 Test #226: mp2-1 ............................ Passed 6.34 sec; Start 40: cc25; 3/411 Test #40: cc25 ............................. Passed 153.57 sec; Start 178: fsapt1; 4/411 Test #306: pywrap-checkrun-uhf .............. Passed 204.87 sec; Start 39: cc24; 5/411 Test #304: pywrap-checkrun-rhf .............. Passed 232.62 sec; Start 45: cc3; 6/411 Test #300: pywrap-all ....................... Passed 243.53 sec; Start 38: cc23; 7/411 Test #110: dcft4 ............................ Passed 251.30 sec; Start 35: cc2; 8/411 Test #39: cc24 ............................. Passed 155.32 sec; Start 227: mp2-def2; 9/411 Test #103: dcft-grad1 ....................... Passed 361.43 sec; Start 36: cc21; 10/411 Test #38: cc23 ............................. Passed 142.28 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #35: cc2 .............................. Passed 153.53 sec; Start 41: cc26; 12/411 Test #162: dft-grad-lr3 ..................... Passed 443.69 sec; Start 182: isapt1; 13/411 Test #45: cc3 .............................. Passed 236.97 sec; Start 145: dfomp2-grad3; 14/411 Test #36: cc21 ............................. Passed 148.51 sec; Start 42: cc27; 15/411 Test #305: pywrap-checkrun-rohf ............. Passed 140.52 sec; Start 29: cc14; 16/411 Test #41: cc26 ............................. Passed 135.18 sec; Start 111: dcft5; 17/411 Test #42: cc27 ............................. Passed 101.05 sec; Start 18: cbs-xtpl-func; 18/411 Test #29: cc14 ............................. Passed 87.25 sec; Start 181: fsapt-allterms; 19/411 Test #145: dfomp2-grad3 ..................... Passed 173.53 sec; Start ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:1037,Test,Test,1037,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,"} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2416,TEST,TEST,2416,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['TEST'],['TEST']
Testability,"~/qcta$ pytest -m mrcc /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.9.12, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4, configfile: pytest.ini; collected 4121 items / 4114 deselected / 7 selected. ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_addons.py . [ 14%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py F [ 28%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py F [ 42%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt/test_input.py . [ 57%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt_q_/test_input.py . [ 71%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/optfreq/test_input.py F [ 85%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/rohf_ccsdt_q_/test_input.py . [100%]; .; <snip>; .; ========================================================================================================== short test summary info ==========================================================================================================; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in versio...; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/optfreq/test_input.py::test_mrc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2634:1145,test,tests,1145,https://psicode.org,https://github.com/psi4/psi4/issues/2634,1,['test'],['tests']
Testability,"…on the external point charges of the ExternalPotential. ## Description; Provides a way to get the gradient of the potential between a Wavefunction object and an ExternalPotential object on the external point charges. These gradients are collected and stored in a protected SharedMatrix object of the ExternalPotnetial during the ExternalPotential.computePotentialGradients() routine, and they are accessible through a ExternalPotential.gradient() method which is bound to a corresponding method in the Python API. ## User API & Changelog headlines; - [ ] Given a Wavefunction object with an ExternalPotential for which a gradient call has been made, the corresponding gradient on the embedded point charges represented by the ExternalPotential can be retrieved by calling gradient() on the ExternalField. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087:826,Test,Tests,826,https://psicode.org,https://github.com/psi4/psi4/pull/3087,3,"['Test', 'test']","['Tests', 'tests']"
Testability,👍 A much shorter version (since cc much less widespread than mp2) of https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat would be great! And feel free to do a better job reusing testing code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/714#issuecomment-381769227:110,test,tests,110,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-381769227,2,['test'],"['testing', 'tests']"
Usability,"				 |	 dfh->add_transformation(""Bbs"", ""b1"", ""s1"");; dfh->add_transformation(""Cas"", ""a2"", ""s"");							 |	 dfh->add_transformation(""Cbr"", ""b2"", ""r1"");; dfh->add_transformation(""Cbr"", ""b2"", ""r"");							 |	 dfh->add_transformation(""Cas"", ""a2"", ""s1"");; dfh->add_transformation(""Dar"", ""a"", ""r3"");							 |	 dfh->add_transformation(""Das"", ""a1"", ""s1"");; dfh->add_transformation(""Dbs"", ""b"", ""s3"");							 |	 dfh->add_transformation(""Dbr"", ""b1"", ""r1"");; dfh->add_transformation(""Ear"", ""a4"", ""r"");							 |	 dfh->add_transformation(""Ebs"", ""b2"", ""s1"");; dfh->add_transformation(""Ebs"", ""b4"", ""s"");							 |	 dfh->add_transformation(""Ear"", ""a2"", ""r1"");. dfh->transform();											 dfh->transform();. Cr1.reset();										 |	 C1a.reset();; Cs1.reset();										 |	 C1b.reset();; Ca2.reset();										 |	 C2a.reset();; Cb2.reset();										 |	 C2b.reset();; Cr3.reset();										 |	 Ct_Kr.reset();; Cs3.reset();										 |	 Ct_Ks.reset();; Ca4.reset();										 <; Cb4.reset();										 <; Cs.clear();												 Cs.clear();; dfh->clear_spaces();										 dfh->clear_spaces();. // => Blocking <= //										 // => Blocking <= //. long int overhead = 0L;										 long int overhead = 0L;; overhead += 2L * nT * nr * ns;									 overhead += 2L * nT * nr * ns;; overhead += 2L * na * ns + 2L * nb * nr + 2L * na * nr + 2L * nb * ns;				 overhead += 2L * na * ns + 2L * nb * nr + 2L * na * nr + 2L * nb * ns;; long int rem = doubles_ - overhead;									 long int rem = doubles_ - overhead;. if (rem < 0L) {											 if (rem < 0L) {; throw PSIEXCEPTION(""Too little static memory for DFTSAPT::mp2_terms"");				 throw PSIEXCEPTION(""Too little static memory for DFTSAPT::mp2_terms"");; }													 }. long int cost_a = 2L * nr * nQ + 2L * ns * nQ;							 long int cost_a = 2L * nr * nQ + 2L * ns * nQ;; long int max_a = rem / (2L * cost_a);								 long int max_a = rem / (2L * cost_a);; long int max_b = max_a;										 long int max_b = max_a;; max_a = (max_a > na ? na : max_a);									 max_a = (max_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790:20475,clear,clear,20475,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790,1,['clear'],['clear']
Usability, 	/home/software/miniconda3/lib/python3.6/site-packages/psi4/../../../libstdc++.so.6:; 		ld-linux-x86-64.so.2 (GLIBC_2.3) => /lib64/ld-linux-x86-64.so.2; 		libm.so.6 (GLIBC_2.2.5) => /lib64/libm.so.6; 		libgcc_s.so.1 (GCC_4.2.0) => /home/software/miniconda3/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1; 		libgcc_s.so.1 (GCC_3.3) => /home/software/miniconda3/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1; 		libgcc_s.so.1 (GCC_3.0) => /home/software/miniconda3/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1; 		libc.so.6 (GLIBC_2.3) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.2) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 	/home/software/miniconda3/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1:; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 	/lib64/libc.so.6:; 		ld-linux-x86-64.so.2 (GLIBC_PRIVATE) => /lib64/ld-linux-x86-64.so.2; 		ld-linux-x86-64.so.2 (GLIBC_2.3) => /lib64/ld-linux-x86-64.so.2; 	/home/software/miniconda3/lib/python3.6/site-packages/psi4/../../.././libhdf5.so.101:; 		libdl.so.2 (GLIBC_2.2.5) => /lib64/libdl.so.2; 		libm.so.6 (GLIBC_2.2.5) => /lib64/libm.so.6; 		libpthread.so.0 (GLIBC_2.3.2) => /lib64/libpthread.so.0; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.8) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.4) => /lib64/libc.so.6; 	/home/software/miniconda3/lib/python3.6/site-packages/psi4/../../.././libz.so.1:; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 	/lib64/librt.so.1:; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libpthread.so.0 (GLIBC_PRIVATE) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.3.2) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_PRIVATE) => /lib64/libc.so.6`. Clearing the envvars didn't seem to help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404292355:14922,Clear,Clearing,14922,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404292355,1,['Clear'],['Clearing']
Usability," -0.887365 ( 0, 0) 7AX 8AX; >; > * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB; >; > * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA; >; > * 4 0.206936 ( 2, 2) 8AX 9AX; >; > * 5 0.015212 ( 1, 1) 7AX 9AX; >; > * 6 0.000000 ( 1, 0) 7AX 8AB 9AA; >; > * 7 0.000000 ( 0, 1) 7AX 8AA 9AB; >; > * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX; >; > * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX; >; >; > ------------------------------; > ------------------------------; >; > As you can see, there is typically the same kind of sign for some; > determinants sharing a similar coefficient. For example, for the; > groundstate we have : -0.691216 ( 0, 1) 7AX 8AA 9AB and -0.691216 ( 1, 0); > 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these; > determinants should present opposite signs. To check this, I used a; > personal code to build up from scratch the frozen core Hamiltonian; > associated to the (4,3) active space. I used for this the resulting; > Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this; > Hamiltonian gives the following two lowest states expressed in the active; > space :; > | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; > | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩; > - 0.887|111100⟩; > (NB : the HF determinant is |111100⟩ ); >; > With this diagonalization, we clearly find same coefficients but with; > opposite signs. As a double check, I also computed the energy of these; > states and obtained :; > E_0 = -93.93144865003578 Ha; > E_1 = -93.90255033754423 Ha; >; > Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do; > you have a clue why such a pb arises in the Psi4 output ?; >; > Thanks a lot for you answer; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2008>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5UPLCBFDRNHBMTEAXTSGD4ZDANCNFSM4RPGPFOQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:4305,clear,clearly,4305,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['clear'],['clearly']
Usability," 1.0, Cocc0A->pointer()[0], na, &Dp[0][0], na + nb, 0.0, ; VAbr.reset();										 |	 D_Ni_a->pointer()[0], na + nb);; VRas.reset();										 |	 C_DGEMM('N', 'N', nn, na + nb, nb, 1.0, Cocc0B->pointer()[0], nb, &Dp[na][0], na + nb, 0.0,; VSbr.reset();										 |	 D_Ni_b->pointer()[0], na + nb);; 												 >; 												 >	 // Make JK's; 												 >	 jk_ = JK::build_JK(primary_, reference_->get_basisset(""DF_BASIS_SCF""), options_, false, doub; 												 >	 jk_->set_memory(doubles_);; 												 >	 jk_->set_do_J(true);; 												 >	 jk_->set_do_K(true);; 												 >	 jk_->initialize();; 												 >	 jk_->print_header();; 												 >; 												 >	 std::vector<SharedMatrix>& Cl = jk_->C_left();; 												 >	 std::vector<SharedMatrix>& Cr = jk_->C_right();; 												 >	 const std::vector<SharedMatrix>& J = jk_->J();; 												 >	 const std::vector<SharedMatrix>& K = jk_->K();; 												 >; 												 >	 Cl.clear();; 												 >	 Cr.clear();; 												 >	 Cl.push_back(Cocc0AB);; 												 >	 Cr.push_back(D_Ni_a);; 												 >	 Cl.push_back(Cocc0AB);; 												 >	 Cr.push_back(D_Ni_b);; 												 >	 jk_->compute();; 												 >	 ; 												 >	 std::shared_ptr<Matrix> J_D_ia = J[0];; 												 >	 std::shared_ptr<Matrix> K_D_ia = K[0];; 												 >; 												 >	 std::shared_ptr<Matrix> J_D_ib = J[1];; 												 >	 std::shared_ptr<Matrix> K_D_ib = K[1];; 												 >; 												 >	 // Finish D_ia and D_ib transformation to make tilded C's; 												 >	 auto D_ia = Matrix::doublet(Cocc0AB, D_Ni_a, false, true);; 												 >	 auto D_ib = Matrix::doublet(Cocc0AB, D_Ni_b, false, true);; 												 >	 ; 												 >	 auto Ct_Kr = Matrix::triplet(D_ib, S, Cvir0A, false, false, false);; 												 >	 Ct_Kr->scale(-1);; 												 >	 Ct_Kr->add(Cvir0A);; 												 >	 auto Ct_Ks = Matrix::triplet(D_ia, S, Cvir0B, false, false, false);; 												 >	 Ct_Ks->scale(-1);; 												 >	 Ct",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790:12784,clear,clear,12784,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790,1,['clear'],['clear']
Usability," >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440; C 1.799700 -1.078640 2.675676; C 0.806556 -0.463011 0.561006; O 3.881939 -2.228505 2.721026; Br -0.697406 0.294370 2.866925; H 4.856028 -1.495441 -0.288527; H 4.492277 -3.085465 0.426246; H 3.750214 -2.627370 -1.105706; H 5.701654 -1.973847 3.666076; H 4.602203 -0.560418 3.705314; H 5.446916 -0.996749 2.196547; H 1.908587 -1.015574 -1.198747; H 1.775186 -1.100057 3.762739; H 0.006619 -0.004988 -0.014918; }; set dft_radial_points 99; set dft_spherical_points 590; set dft_grid_name SG1; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ENE=energy(""wB97M-V""); ```. I'm running with a slightly old commit from 09/19 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827:1720,simpl,simply,1720,https://psicode.org,https://github.com/psi4/psi4/issues/827,1,['simpl'],['simply']
Usability," Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:2282,simpl,simple,2282,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['simpl'],['simple']
Usability," Current Design; * Many of the problems with the existing conventional integral gradients are due to the `libtrans` interface between the MO quantities and the AO quantities.; * `libtrans` only recognizes TPDM in `libiwl` format, which is why all codes must use that.; * There is a single `IntegralTransform` call [for all modules](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * The need to assemble a single 1PDM is, superficially, because [`IntegralTransform` is told to expect that](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518). `backtransform_density` was never designed with any other structure in mind.; * Each code has its own density-fitted gradients for the simple reason that nobody tried to design truly general density-fitted gradients for Psi. ## Conventions; Unless otherwise indicated, any mention of ""1PDM"" or ""2PDM"" refers to relaxed quantities, the things you contract against the one-electron and two-electron integral derivatives. ## Interface Proposal; * Backtransformation of two-index quantities no longer requires having the _entire_ matrix assembled. You can backtransform blocks at a time based on occupation, which is what you're more likely to have.; * Either each caller code creates its own integral transformation object and instructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:4285,simpl,simple,4285,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['simpl'],['simple']
Usability," DFJCOSK) or bolted onto the side of already-existing JK classes (as in LinK with DirectJK). Such a layout leaves no flexibility in combining separate J and K algorithms, a problem which will only get worse as new separate J and K algorithms like CFMM are added. Additionally, the scattering of separate J and K build algorithms throughout the JK class in Psi4 in an non-standardized fashion is unfortunate from a code design perspective. The goal of the CompositeJK project is, ultimately, to create a new JK class (_CompositeJK_) that offers a proper framework for combining separate J and K algorithms for use in JK construction. Such a class will provide a home for any new separate J and K algorithm that gets added to Psi4 in the future (such as the in-progress CFMM). Additionally, the CompositeJK class will be designed in such as a way to enable arbitrary combinations of any available separate J and K build algorithm through a single JK subclass. This arbitrary mixing and matching is planned to be accesible in a user-friendly way. DFJLinK is the first step to this process. DFJLinK, itself, is a new JK subclass that combines the integral-direct density fitted J build algorithm from DFJCOSK with the LinK algorithm previously available in DirectJK. LinK was previously available for use in Psi4 via DirectJK, but was always disrecommended due to its combination with a normal DirectJK implementation for J construction. In conjunction with Direct DF-J to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse basis sets are the specialty of Direct DF-J + LinK, and it reflects here, with DFJLinK outperforming the other integral-direct JK opti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:1744,user-friendly,user-friendly,1744,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['user-friendly'],['user-friendly']
Usability," For instance, I tried recently several calculations of this type, and found out having to use different SCF guesses or initial calculations at some other other level simply because the DFT did not converge in Psi4 by default. Having the new level shifting techique from #2216 will help in getting more stable convergence. There are really only two classes of non-convergence: 1) that you had a really crappy orbital guess, which DIIS in Psi4 was not able to minimize but rather started oscillating between two nearly degenerate solutions, or 2) the actual system is so ill behaved that the SCF itself is a bit ill-conditioned and you should use analytical second-order methods to reliably solve the problem. (Of course 1&2 is another possibility in itself.). When I wrote ERKALE as a graduate student I ran across the Hu&Yang paper [J. Chem. Phys. 132, 054109 (2010)](https://doi.org/10.1063/1.3304922) for the ADIIS convergence accelerator. It is simpler than EDIIS, and can be implemented with the same ingredients as usual DIIS: Fock and density matrices. What you need to do is just solve the K-dimensional minimization problem min_{C} E_(ADIIS) for the expansion coefficients C from which you get the extrapolated Fock matrix `F_DIIS = \sum_i c_i F_i`. If I remember correctly, there's a paper that shows that ADIIS and EDIIS are the same method, assuming that you're running at Hartree-Fock level of theory. However, I think the methods are not the same for DFT. With ADIIS+DIIS, you can converge most systems without any kind of problems. The only cases where you get problems are the ones where there really are physical issues with the wave function, like e.g. with flat angular surfaces of the energy, where rotating the orbitals changes the energy only very slowly. These are fundamentally better described by orbital rotation techniques, e.g. the geometric direct minimization method #2214, where you just do everything in terms of orbital rotations. Direct minimization is bound to conve",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:1326,simpl,simpler,1326,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,1,['simpl'],['simpler']
Usability," Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:1202,clear,clear,1202,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,1,['clear'],['clear']
Usability," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748:1273,simpl,simple-test,1273,https://psicode.org,https://github.com/psi4/psi4/issues/748,6,['simpl'],['simple-test']
Usability," a year; or two out of date. Compilers like Intel, that I swear by, only are fully; C++11 compliant with the most recent releases. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 11:19 AM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > Default off seems silly if we report times. The user has a right to know; > how accurate those times are. If 5 seconds really bothers everyone I vote; > for a timing flag that enables/disables all timings. I think that's the; > wrong approach though and it makes more sense to examine the sampling; > parameters of the timer.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:10 AM, ""Rob Parrish"" notifications@github.com wrote:; > ; > > Yeah, it just needs to be turned into a user-option (defaulted off).; > > ; > > -Rob; > > ; > > On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; > > wrote:; > > ; > > > I'm learnimg the world isn't ready for C++11 yet, and I'm in the; > > > process of; > > > phasing it out of my codes. Anyways, my timer relies on Boost. What I do; > > > is ripped right out of the Boost example for how to determine the; > > > uncertainty in their timers, the sampling rate may be a bit high if; > > > there; > > > ends up being 5000000 calls though. I'm not sure what you mean exactly; > > > by; > > > separate thread. The uncertainty in each timer is a hardware feature so; > > > on; > > > a heterogeneous cluster each mpi process needs to sample. This is only; > > > done once at startup.; > > > ; > > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:; > > > ; > > > > @ryanmrichard https://github.com/ryanmrichard any reason the; > > > > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > > > > just do it a in a different thread?; > > > > ; > > > > —; > > > > Reply to this email directly or view it on ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98495103:1248,learn,learnimg,1248,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98495103,1,['learn'],['learnimg']
Usability," been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code.; - [x] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow.; - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes.; - [x] DF and RI calls should soft fa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:2922,clear,clear,2922,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['clear'],['clear']
Usability," const&, char const*, boost::python::api::object const&, char const*) in libboost_python-1_57.a(function.o); ""_PyComplex_ImagAsDouble"", referenced from:; boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyComplex_RealAsDouble"", referenced from:; boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyComplex_Type"", referenced from:; boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::get_pytype() in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::get_slot(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyDict_Clear"", referenced from:; boost::python::detail::dict_base::clear() in libboost_python-1_57.a(dict.o); ""_PyDict_Copy"", referenced from:; boost::python::detail::dict_base::copy() in libboost_python-1_57.a(dict.o); ""_PyDict_GetItem"", referenced from:; boost::python::detail::dict_base::get(boost::python::api::object const&) const in libboost_python-1_57.a(dict.o); boost::python::objects::function::call(_object*, _object*) const in libboost_python-1_57.a(function.o); ""_PyDict_GetItemString"", referenced from:; psi::BasisSet::pyconstruct_auxiliary(boost::shared_ptr<psi::Molecule> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) in libmints.a(basisset.cc.o); ""_PyDict_Items"", referenced from:; boost",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131149225:3323,clear,clear,3323,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225,1,['clear'],['clear']
Usability," did the trick. Moreover, at long last the `intel-openmp` package provides the libiomp5md.lib (import library) and libiomp5md.dll (runtime library) _pair_ needed at buildtime rather than just the latter. So we no longer need to link against the random lib stashed on GH, and the build can be far more self-contained. hooray!; - [x] linux azure (two bottom lanes with new enough py for np v2): np v2 needs qcel v0.28 _and_ it needs pb11 >=2.12 to compile against or you'll get ""atoms too close"". pb11 had been constrained to <2.12 (see below), so that was lifted. bumped qcng to 0.30 for internal builds, too.; - [x] docs: a PR snuck adding a citation to the bibliography w/o citing it, so the strict check failed. commented out for now; - [x] docs: once pb11 no longer restrained to <2.12 (see above), the ""FixedSize"" issue appears (see nitpick-exceptions), and the exceptions formerly emitted as `List` needed `list` counterparts added.; - [x] win azure: headers in np v2 are at `numpy/_core/include` not `numpy/core/include`. We were setting the latter explicitly for this lane, so removed that. Also added `${Python_NumPy_VERSION}` printing for feedback.; - [x] linux eco: dftd4-python now available for py312 (except on windows), so added that back to the package testing.; - [x] cmake: squashed a few warnings by setting policies. it looks like find_package(Boost) for L2 is still needing FindBoost rather than BoostConfig, so that one needs to be OLD for now.; - [x] conda: threading tests weren't running at the conda recipe b/c the trial job hit the block we put in on MemDF in Disk mode. Increased the memory in test_threading so it could run.; - [x] gha: bumped all the actions to the latest version to get rid of node deprecation warnings. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3186:2913,feedback,feedback,2913,https://psicode.org,https://github.com/psi4/psi4/pull/3186,1,['feedback'],['feedback']
Usability," ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have flipped signs, concludes we are near a gradient, and says we are in the range of a minimum - which we are - to trigger the convergence machinery. I will want to test this hypothesis some more, but I suspect the fix will be simply to move the lines I mentioned to inside the size > 3 clause a few lines below.; EDIT2: That fixed the bug. Going to do some testing to trace the bug to this source. I've verified that when the bug does not appear, u_f_q_0 has a consistent direction. The direction changes in the bug cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:2224,simpl,simply,2224,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,1,['simpl'],['simply']
Usability," generated in the course of `energy(""fisapt0-d"")` by this PR or later Psi4 (approx. v1.7.0 Psi4) and script `fsapt.py` released with Psi4 v1.7.0 or later. This is semi-enforced since v1.7 requires v0.26 (`fsapt.py` is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and `fsapt.py` <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped.; - [x] `psi4.core.Molecule.run_dftd3` and `qcdb.Molecule.run_dftd3` don't work with `s-dftd3`. Please file an issue if you really want this capability. `run_gcp` will use classic `gcp` or `mctc-gcp` interchangeably, whichever you have available. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] first look at `_engine_can_do` and observe that compared to good ol' dftd3, s-dftd3 (aka simple-dftd3) _can't_ do d2 and by default does d3 variants with ATM dispersion built in (s9=1.0); - [x] in contrast, mctc-gcp is a drop-in replacement for good ol' gcp (probably b/c I stuck with cmdline and didn't write an elaborate interface on top of it :-); - [x] this goes with https://github.com/MolSSI/QCEngine/pull/385; - [x] I didn't think we could just drop the most popular psi4 addon and demand replacement, so all of dftd3/s-dftd3/gcp/mctc-gcp work with psi4. s-dftd3 and mctc-gcp are preferred if present; - [x] need docs; - [x] status (special qcng = v0.26.0 unreleased at time of writing); - [x] PR psi4 with special qcng and dftd3 and gcp and psi4-channel dftd4 all work; - [x] PR psi4 with special qcng and s-dftd3 and mctc-gcp and c-f-channel dftd4 all work ~except for test_dftd3_mp2d~; - [x] old psi4 with special qcng ~doesn't work at all -- WIP~ now works; - old psi4 running fisapt-d then fsapt.py with special qcng gives wrong answer for emp disp; - run_dftd3 is used a lo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:3321,simpl,simple-,3321,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['simpl'],['simple-']
Usability," longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | _ | 1 | _ | N/A | 1111; _ | _ | 3 | _ | N/A | 3333; _ | _ | _ | 1 | _111 | 1111; _ | _ | _ | 3 | _333 | 1333; _ | _ | 4 | 2 | _222 | 4222. Where the four numbers are extracted from the output file: threads in psi4 header, threads in MintsHelper, threads in SCF header, threads used by JK. The first of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:3311,clear,cleared,3311,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['clear'],['cleared']
Usability," out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965:1208,learn,learned,1208,https://psicode.org,https://github.com/psi4/psi4/pull/965,3,['learn'],['learned']
Usability," stuff that was in `psi4-dev`? I think from PsiCon2022 the answer is yes.; 2. Do you want minimal (build tools & req'd deps) or maximal (+ optional addons) or micro (no build tools, just L2, g2g, libxc, qcng, scipy, pytest) or several of those choices Docker images? (I have one vote for minimal.); 3. Docker images are hefty (~600MB for the built psi4). Can I just push them to a `latest` tag and overwrite old ones, or does there need to be a history?; 4. For Docker of psi4 itself, I'm only doing linux-64 (https://hub.docker.com/r/psi4/psi4/tags). Since docker is usually run VM-like, is that all developers want, or should I be building containers for other arch? Certainly I have the other-arch conda pkgs available -- it's just a matter of figuring out docker from them.; 5. I can build singularity/apptainer images from the Docker images, but I haven't figured out how to upload them yet. _For devs_, are apptainers wanted, or will docker alone do?; 6. I'll probably revive the `psi4-dev` pkg, just because it is simple and durable. (And it's the easiest way to convey the Intel-atop-GNU flags.) It'll be a `conda install psi4/label/dev::psi4-dev -c conda-forge` access. Thoughts on improving it?; 7. Those `devtools/*/*buildrun*yaml` env specs are semi-auto-generated from the ecosystem GHA. Are they handy enough to maintain and promote, even though they don't come with `cmake` lines?; 8. Any other build tools to support other workflows wanted? It's easier to set them up all at once. ### Psi4 Conda Packages at Present with Channels. Built psi4 packages are slightly off-topic, but I thought this could be a handy reference for the more exotic ones. Note that these don't have as many addons as previous `-c psi4` packages did. See https://github.com/orgs/psi4/projects/2 for the conda-forge progress tracker. * `linux-64`; * `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge` (GNU compilers, AM5 L2, MKL, all pythons); * `conda install psi4/label/dev::psi4 -c psi4/labe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:4529,simpl,simple,4529,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['simpl'],['simple']
Usability," the fnocc table is energy (E) only, whereas most are E/G; - [x] [scf](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_scf.rst) the only E/G/H table. this includes HF and some representative DFTs: LSDA, GGA, Hybrid, LRC, DH; - [x] [occ_nonoo](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_occ_nonoo.rst) replaces a hand-generated table, but a broader hand-gen table is also present for (1) method names and (2) in anticipation of FNO.; - [x] [occ_oo](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_occ_oo.rst) replaces a hand-generated table, but a broader hand-gen table is also present for (1) method names. closes #1863 ; - [x] [dfmp2](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_dfmp2.rst) pretty simple, so why not; - [x] Other changes to docs contents:; - [x] instead of detailed capabilities getting lost under notes in the TOC, moving it to a separate page, to be followed by notes.; - [x] the main hand-generated capabilities table in introduction.rst tried to do a lot in specifying allowed refs, types, dertypes, and parallelism, including by specifying exceptions in footnotes. This discouraged updating since it was hard to know what was right w/o extensive testing and/or it was easier to glide over details. The hand-gen table has been replaced to be more general listing maximum capabilities, the parallelism column has been removed, and the complementary auto-gen summary table has been added; - [x] the main hand-generated capabilities table in introduction.rst and the docstring methods table in driver.py (shows up in https://psicode.org/psi4manual/master/energy.html etc.) have been reconciled with the current state of the procedures table. Devs are now admonished to update all three concurrently :-); - [x] Some investigation and searching of CDS's memory and compar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:4177,simpl,simple,4177,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['simpl'],['simple']
Usability," the third column, the parser fails. This is because `psi4/driver/qcdb/libmintsbasissetparser.py` limits the number of replacements of ""D"" with ""e"" to two per line. Is there a particular reason for this limit? Otherwise I'm happy to submit a PR fixing this. Fails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Use",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:1139,guid,guido,1139,https://psicode.org,https://github.com/psi4/psi4/issues/1996,2,['guid'],['guido']
Usability," there's a whole page about the module in the docs. Most modules don't have their own page, so I completely missed it. Now for my more detailed grievances with the `liboptions` page:. I'm sure there are more grievances, but obvious ones:; - The overview uses the passive voice. ""The input is parsed for these options, and defaults are assigned for those keywords not specified by the user."" This would be much clearer written as ""When Psi parses the inputs, Psi assigns each option its user-specified value (if provided) and its default otherwise.""; - ""Array-type options are not available in python."" This is false.; - There's no mention of side effects of the getter functions. This was a major ""gotcha"" for me: getting an SCF option set that to be the active module and interfered with other modules.; - There's no mention of the currently active module mechanism. At all.; - Discussion about _when_ and _which_ options are added is vague. It sounds like the options object only has some options at a time, but it's not clear when these are added/removed.; - `read_globals` appears in a code snippet, but is not described.; - ""The way to do this is to isolate and nullify any changes to options made by the code, the difference between [a] and [c]. "" is unclear.; - ""C-side, there is no concern since options are essentially read-only within the modules."" This is false. DCT for sure changes options in the module.; - ""Py-side is another matter since the driver’s role is to take terse instructions from the user and translate those into instructions to the C++ modules, usually through manipulation of options."" This is vague. The previous two sentences being baffling doesn't help.; - ""In order to preserve effective definition [a]"" What does it mean to preserve a definition? ; - The paragraph containing that sentence needs to explain OptionState. Instead, that's done much later.; - The ""Reading Options in Module"" section doesn't exist.; - There's no mention of type-specific getters/setters",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2405:1119,clear,clear,1119,https://psicode.org,https://github.com/psi4/psi4/issues/2405,1,['clear'],['clear']
Usability," to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:11631,guid,guidance,11631,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['guid'],['guidance']
Usability," type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" mean? I would interpret that as meaning that there is stored, somewhere, a _complete_ list of significant shell pairs. This list is created before the algorithm in Figure 1 starts, so significant in the context of this line refers to the entire list of significant shell pairs, not just the significant shell pairs of a given block. . The second question is this - does ""Loop over all nu's in significant ""ket"" shell pairs"" have the same meaning as it's bra counterpart loop? Admittedly, the answer to this question is not entirely clear to me. However, my immediate hunch is yes. The reason why, is because (nu_max | nu_max)^1/2 is also present in the preselection condition definition. Without an explicit definition of (nu_max | nu_max)^1/2 in the paper, it would have to be guessed that (nu_max | nu_max)^1/2 has an analogous definition to (mu_max | mu_max)^1/2, but for ""ket"" shell pairs. If this were the case, it would imply that the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" would be a pair of loops, one looping over bra shell pair types, and one looping over ket shell pair types. . Again, this is simply my interpretation of the matter. Do let me know what you think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:2675,clear,clear,2675,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867,2,"['clear', 'simpl']","['clear', 'simply']"
Usability," way of initializing it is by creating a `psi4.driver.qmmm.QMMM()` object and then doing the unusual `psi4.set_global_option_python(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Chec",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2515:1100,simpl,simple,1100,https://psicode.org,https://github.com/psi4/psi4/pull/2515,1,['simpl'],['simple']
Usability," what the ""Ways to Add Code"" page is supposed to accomplish. There's nothing unifying these sections together, and even individual sections seem disjointed to me. The easier and more rapid development section feels like one part expositing historical developments and one part trying to sell the new developer on the transition to Python. The Psi4Numpy and plugins sections read like one part overviewing the process of going from equations to code and again like one part trying to sell the new developer on NumPy. The ""incorporating code into Psi4"" section reads like a guide on parceling code into C++ parts and Python parts. 2. Are you expecting the reader to already know about dual-language software and OpenMP? The current documentation is written as if you are, but I didn't know about the first one until after I had started working in Psi, and I still only have a hazy idea on the second. 3. I fear that the strategy of ""mostly the vanilla contributor covenant, but with small additions to emphasize that we value inexperienced devs"" will lead to those small additions not being noticed by the inexperienced devs. When I see something as general as, ""to help us maintain this vibrant; and productive atmosphere,"" my immediate thought is that this is administrative babble and only worth skimming. Having read the covenant, I cannot identify the small additions in there. Might I suggest making an explicit section on new developers and making it very specific to Psi? Something like:; _""The continued maintenance and growth of Psi depends on getting, training, and retaining new developers. This brings in prospective developers with widely varying levels of programming experience, including people learning the basics of theory and programming in quantum chemistry, people learning the basics of C++ or Python, and even people learning programming in general. We accept all this and are committed to training new developers to contribute to the code. In particular, we are willing to...""_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745:1765,learn,learning,1765,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745,3,['learn'],['learning']
Usability,"""Gradient per KS-MO"" does _not_ ""just require exposing it."" First, you need to define it properly. Exact exchange depends on two KS-MOs, not just one, so it isn't clear to me how you'd meaningfully define this as a one KS-MO property. Then, you'd need to implement it, since Psi4 doesn't do this naturally. You'd probably need to decompose the density as a sum of densities for each MO and run the gradient computation on each, so a gradient computation takes #MO's times longer. This should not be the default algorithm. Putting the gradient terms on the wavefunction as array variables seems relatively straightforward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578:163,clear,clear,163,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578,1,['clear'],['clear']
Usability,"""Round-tripping"" of wfn (`psi4.core.Wavefunction` -> `AtomicResult.wavefunction` -> `psi4.core.Wavefunction`) is a definite goal, but you concluded rightly that it does not work now. A needed step is simple round-tripping of `BasisSet`, and my last bout of working on that got to this stage: https://github.com/psi4/psi4/pull/2861 . I'd like to work on this again, but I don't know when. It's fine to leave this open, in my opinion, since this is a question others may have.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2884#issuecomment-1442372972:200,simpl,simple,200,https://psicode.org,https://github.com/psi4/psi4/issues/2884#issuecomment-1442372972,1,['simpl'],['simple']
Usability,"# **Upgrade Guide**; ~~wavefunctions must declare a density fitted basis, even if density fitting is not used. This may be ""bypassed"" by selecting zero as the basis, as in:`wfn.set_basisset(""DF_BASIS_SCF"", core.BasisSet.zero_ao_basis_set())`~~; No longer necessary, per #1014 . # **Bug Fixes**; A bug causing IRCs to converge to the initial transition state was fixed (#882)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-388170219:12,Guid,Guide,12,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-388170219,1,['Guid'],['Guide']
Usability,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:362,feedback,feedback,362,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['feedback'],['feedback']
Usability,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:168,clear,clear,168,https://psicode.org,https://github.com/psi4/psi4/issues/1375,1,['clear'],['clear']
Usability,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8cb0765`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1315/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1315 +/- ##; =========================================; Coverage ? 70.32% ; =========================================; Files ? 1508 ; Lines ? 326837 ; Branches ? 0 ; =========================================; Hits ? 229863 ; Misses ? 96974 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=footer). Last update [8cb0765...ed8cf13](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1315#issuecomment-433574980:170,learn,learn,170,https://psicode.org,https://github.com/psi4/psi4/pull/1315#issuecomment-433574980,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=h1) Report; > Merging [#1671](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=desc) into [master](https://codecov.io/gh/psi4/psi4/commit/7fb7634f7f591a7c53bdf885228731390782df28?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1671/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1671 +/- ##; =======================================; Coverage 70.9% 70.9% ; =======================================; Files 1468 1468 ; Lines 316368 316368 ; =======================================; Hits 224327 224327 ; Misses 92041 92041; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=footer). Last update [7fb7634...b61a16b](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-504721011:948,learn,learn,948,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-504721011,1,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8d6a59d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1676/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1676 +/- ##; =========================================; Coverage ? 71.08% ; =========================================; Files ? 1468 ; Lines ? 315595 ; Branches ? 0 ; =========================================; Hits ? 224354 ; Misses ? 91241 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=footer). Last update [8d6a59d...aeac164](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321:170,learn,learn,170,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321,2,['learn'],['learn']
Usability,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@51ebbbd`). ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=footer). Last update [51ebbbd...410be6f](https://codecov.io/gh/psi4/psi4/compare/51ebbbd3257f39b516004b987f2ca650a036c320...410be6f525e84987e109ad06e4af65f2dbc289f0?el=footer&src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/594#issuecomment-276026020:299,learn,learn,299,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276026020,1,['learn'],['learn']
Usability,"## Description. Configures LGTM properly. In the last cbs() pass, I refined the encoding of ""an SCF is produced in the course of a CCSD"" to ""a HF is produced in the course of a CCSD"". Unfortunately, I only refined it in a first pass that hit mp2, ccsd, ccsd(t), etc., not the lesser used fno-ccsd(t), mp3, cisd, etc. which can also be extrapolated. The alarming result is that if you used the latter, you'd get that the extrapolation of HF between 0 and –300 is –600.; ## Todos; - [x] introduces a `.lgtm` file to define the approval regex and number of approvers.; - [x] Now all methods that are usable in cbs() use the same psivar.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/469:597,usab,usable,597,https://psicode.org,https://github.com/psi4/psi4/pull/469,1,['usab'],['usable']
Usability,"## Description. Get feedback on functional.py oddities and justifiy b3lyp5 fix; ## Todos; - [x] if agreed upon, this will get us B3LYP5 back; - [background](http://forum.psicode.org/t/b3lyp-defect-compatibility-with-gamess-and-gaussian/193); - [deeper background](http://verahill.blogspot.com/2013/06/446-b3lyp-and-wah-confusion.html); ## Questions; - [x] major ?: if you vary the vwn in plain b3lyp superfunctional [here](https://github.com/loriab/psi4/blob/b3lyp35/share/python/functional.py#L1243), it matches other programs' B3LYP3 when `VWN3RPA_C` or `VWN5RPA_C` is used but matches other programs' B3LYP5 when `VWN3_C` or `VWN5_C` is used. Naming-wise, this makes no sense. Anyone have a better justification? This PR keeps default B3LYP at `VWN3RPA_C` and [switches](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R1314) B3LYP5 to `VWN5_C` and re-enables it. So the input file below works, yet that redefinition is disturbing.; - [x] minor ?: why is `wB88_X` being redefined [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R654) when it was just defined up above [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R603). Ok to delete 2nd definition as done in this PR?; - [x] minor ?: why is `bp86d1` building upon b3lyp as [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R2114)? Ok to make it build upon bp86 as done in this PR?; ## Status; - [x] Ready to go. B3LYP3/5 test input. You'll need [this](https://raw.githubusercontent.com/drhaney/psi4/master/share/basis/6-31g_2df_p_.gbs) basis set. ```; # all non-psi4 references from http://forum.psicode.org/t/b3lyp-defect-compatibility-with-gamess-and-gaussian/193. # @jamont conditions. molecule {; 0 1; O; H 1 rOH; H 1 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339:20,feedback,feedback,20,https://psicode.org,https://github.com/psi4/psi4/pull/339,1,['feedback'],['feedback']
Usability,"## Description. In the last `cbs()` pass, I refined the encoding of ""an SCF is produced in the course of a CCSD"" to ""a HF is produced in the course of a CCSD"". Unfortunately, I only refined it in a first pass that hit mp2, ccsd, ccsd(t), etc., not the lesser used fno-ccsd(t), mp3, cisd, etc. which can also be extrapolated. The alarming result is that if you used the latter, you'd get that the extrapolation of HF between 0 and –300 is –600.; ## Todos; - [x] Now all methods that are usable in `cbs()` use the same psivar.; ## Status; - [x] Ready to go whenever but not so pressing as to disrupt the CMakeRewrite branch.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/456:486,usab,usable,486,https://psicode.org,https://github.com/psi4/psi4/pull/456,1,['usab'],['usable']
Usability,"## Description. Increases compatibility with external analysis tools, by providing Gaussian formatted checkpoint file (FCHK) output. Also adds built-in distributed multipole analysis via Stone's GDMA package.; ## Todos; - [x] Add FCHK writer to libmints.; - [x] Incorporate GDMA 2, for distributed multipole analysis.; - [x] Add GDMA options, to prevent user from having to provide a separate input file.; - [x] Put GDMA results in the variables map.; - [x] Add GDMA test case.; - [x] Document FCHK writer and GDMA.; ## Questions; - [x] Although GDMA is released under GPL2, I want to try to contact Anthony Stone to get explicit permission to release his code as a subdirectory of Psi4. I don't think there are any legal problems with including an FCHK writer; I simply followed the [format description](http://www.gaussian.com/g_tech/g_ur/f_formchk.htm) and checked it against some of the GDMA examples. Anybody disagree?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323:764,simpl,simply,764,https://psicode.org,https://github.com/psi4/psi4/pull/323,1,['simpl'],['simply']
Usability,## Description. Just clearing up old changes in a branch; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/375:21,clear,clearing,21,https://psicode.org,https://github.com/psi4/psi4/pull/375,1,['clear'],['clearing']
Usability,"## Description. SCF Gradients are now symmetrized by swiping some code from Andy's Deriv module and placing it in `scfgrad`. Generally we wouldn't want to duplicate code, but there isn't a great way to avoid this at the moment. Discussion in issue #298 for reasoning behind this simple solution.; ## Todos; - [x] SCF Gradient is now symmetrized.; - [x] Fixed the `opt7` convergence tolerance issue the failing cases now does an additional 6 iterations.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/301:279,simpl,simple,279,https://psicode.org,https://github.com/psi4/psi4/pull/301,1,['simpl'],['simple']
Usability,"## Description. The overall goal was to revamp the SCF guess inside Psi to give a bit better convergence and reduce the number of times a user needs to intervene in guess selection. To this end we have improved the speed of SAD, and tweaked default guesses away from CORE. The other half of improving SCF convergence is improving the solver which is delegated to a later date.; ## Todos; - [x] Changed SAD to use DF (default) or a Direct JK object. Reduced computational time of SAD by 50-2000x (yes, really).; - [x] SAD guess is now default for RHF, all RHF test cases pass.; - [x] GWH is now the default for ROHF/UHF, cc11 fails and was switched back to CORE.; - [x] Added fractional occupations via electron smearing across a given row. Preliminary tests show that for something like the HF molecule this works really well, but less so for Benzene. However, for UHF test cases this seems to help things dramatically. Turned off by default.; - [x] Closes #156. Now takes ~3 seconds instead of several hours.; - [x] Add Weigend J fit as a fail over fitting basis sets. While this is only J fit, this appears sufficient for SAD and contains auxiliary basis for atoms through Xenon.; - [x] Add secondary failover to Direct if DF is too angular momentum heavy for compiled `libint`.; ## Questions; - [x] We are not sold on GWH as the default for ROHF and UHF, the general consensus is that it works better than CORE on the average. Feedback is most welcome.; - [x] There may have been stability issues with SAD in the past. Can anyone recall what these were and provide an example?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400:1430,Feedback,Feedback,1430,https://psicode.org,https://github.com/psi4/psi4/pull/400,1,['Feedback'],['Feedback']
Usability,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:303,simpl,simpler,303,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['simpl'],['simpler']
Usability,"## Description. With prompting and help from @SebWouters this PR updates ChemPS2 to v1.7 for DMRG-CASPT2 computations.; ## Todos; - [x] Psi4 now uses ChemPS2 tag 1.7; - [x] ChemPS2 no longer requires GSL, nuked that from CMake; - [x] Fiddled with the CMake a bit to clear up BLAS linking issues; - [x] Names have moved from `dmrgci` to `dmrg-ci` following discussion with @loriab @SebWouters ; - [x] Updated `src/dmrg` to latest version from ChemPS2; - [x] Added CASPT2 test case; - [x] Closes #263, #266, and #384 ; - [ ] Issue #150 is still open, for 1.0 we really need to clean this up. I think the two largest issues are the documentation and the keyword review. I think @loriab and @dgasmith will have to handle the rest.; - [ ] We have been experiencing some linking issues. While this works on my linux box and OS X laptop a few others testing this compilation would be beneficial. May close #264.; ## Questions; - [x] Keywords have moved around to align to the ""plugin"" version of ChemPS2 with a few minor alterations. Please check these out @loriab @kannon92 @SebWouters ; - [x] Do we want to add additional test cases?; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388:266,clear,clear,266,https://psicode.org,https://github.com/psi4/psi4/pull/388,1,['clear'],['clear']
Usability,"## Description. consolidate cube-writing code; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] consolidate three cube-centered pieces of code into one, libcubeprop. history of this in discussions below.; - [x] spruce up some docs, particularly when options text has been copied from read_options into the written docs, which then gets out of sync, and who knows which is right. want to replace these with `.. include:: autodir_options_c/globals__relativistic.rst`` that can't get out of sync; - [x] put in parameter, return, examples docstrings, versionadded (for wfn) for the lesser-used user-facing fns: oeprop, molden, cubeprop and get these into the Psithon Functions chapter of docs, rather than hidden away in the Programmers Manual --> Python Driver section. This is to satisfy the soft fail request for oeprop/molden/cubeprop (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/10?u=loriab for discussion).; - [x] put off until later real standardization of handling oeprop, molden, cubeprop python fns and associated documentation; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/286:912,simpl,simplify-wave-function-passing,912,https://psicode.org,https://github.com/psi4/psi4/pull/286,1,['simpl'],['simplify-wave-function-passing']
Usability,"## Description. plugins from conda binary work; ## Todos; - [x] plugin Makefile.template had turned into 3 files with little differences, so ditched them and moved the configuration in cmake; - [x] updated conda and plugin docs; - [x] updated and condensed capabilities table. some features were getting exhaustively included, others not at all. and references weren't clear wrt energy or grad. so shrunk table, while deferring details to the individual module pages. everyone should look over this.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/370:369,clear,clear,369,https://psicode.org,https://github.com/psi4/psi4/pull/370,1,['clear'],['clear']
Usability,"## Description; #2476 and #2594 indicate a major problem in Psi's SCF code: the simplistic formula `nalphapi = doccpi + soccpi` and `nbetapi = doccpi` is incapable of describing references where there are more beta than alpha orbitals of a given irrep. This occurs in MOM (where we instead use ugly hacks) and in UHF (where we crash). Furthermore, storing all of these irrep quantities is redundant. This PR remedies the situation by only storing `nalphapi` and `nbetapi`. `doccpi` and `soccpi` can be computed from these when needed. The Py-side API is unchanged `doccpi(), soccpi()`, while the C-side API changes from `doccpi_, soccpi_` to `doccpi(), soccpi()`. While we are doing some extra work to compute docc and socc every time they're needed, the computational cost is negligible in comparison to Fock diagonalizations, integral transforms, and tensor contractions. . To prevent scope creep, this PR aims solely to change the wavefunction. **This is a major undertaking and should not be done lightly.** A subsequent PR will fix the linked issues (if not fixed by this PR) and add them as test cases once the fix is confirmed. Obligatory @susilehtola ping. ## Todos; - [x] DOCC and SOCC are now computed rather than stored; - [x] MOM simplified; - [x] Lots of docc/socc replaced with alphapi/betapi where more appropriate; - [x] More auto; - [x] More dimension, fewer raw arrays . ## Checklist; - [x] Passes ctest and pytest (all, except addons). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619:80,simpl,simplistic,80,https://psicode.org,https://github.com/psi4/psi4/pull/2619,2,['simpl'],"['simplified', 'simplistic']"
Usability,"## Description; - [x] fixes #1798 At least make all the def2 orbital and rifit basis sets parseable. These have been read through diff_gbs.py so I know all the elements parse now. Variety of errors found.; - [x] helps #1804 by redirecting def2-*-jkfit specifications toward the universal files. only took about four files to find a satisfactory and minimally disruptive place for a simple map-and-warn :-(; - [x] helps plugins like v2rdm_casscf that are adding internal pb11 by attaching the found Python headers location to the plugin target. This should be merged close to #1804 . This one only hits def2 orbital and RI, while that one hits JFIT and JKFIT, so I think the only conflict should be in the NOTES file. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1806:382,simpl,simple,382,https://psicode.org,https://github.com/psi4/psi4/pull/1806,1,['simpl'],['simple']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] #2775 I guess wasn't up-to-date with master so the combination of it and some intervening changes broke the build. ~Hopefully this fixes it, and the weird L2 error I'm getting locally is nothing.~ An explicit destructor was needed, too. Thanks to https://stackoverflow.com/a/34073221 for guidance.; - [x] Analogous to #2845 for the master docs build should fix that; - [x] A couple old copyrights. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2855:608,guid,guidance,608,https://psicode.org,https://github.com/psi4/psi4/pull/2855,1,['guid'],['guidance']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Nowadays, ctest (quick) followed by pytest (quick) runs a lot of duplicate tests (unless the latter uses ""quick and api""). Let's not do that. This switches Azure to ctest(smoke) followed by pytest (quick).; - before: ; - W: 1h30m; - L: 41-57m; - after:; - W: 1h5m; - L: 34-38m; - In working on dfocc, I found some stdsuite updates that hadn't been ported from qcng to psi4 and some general improvements.; - [x] better check expected vs intended modules. (can catch if the default compute module for a method+circs changes.); - [x] `test_*_default` in stdsuite changed meaning slightly. now PASSED means get final method answer correctly and XFAIL means known NYI. formerly, inputs that got the final method answer correctly but were not able to supply some submethod (like same-spin mp2 for ccsd) also got the XFAIL result.; - [x] have a mini ref file so can add reference data w/o waiting for a new qcengine release; - [x] regex and human-directed error messages to simplify and consolidate NYI methods testing. ## Checklist; - [x] Tests added for any new features; - [x] full stdsuite runs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2632:1154,simpl,simplify,1154,https://psicode.org,https://github.com/psi4/psi4/pull/2632,1,['simpl'],['simplify']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; - [x] Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table below. package | provides | pre-PR | post-PR; ---- | ---- | ---- | ----; D3; `psi4::dftd3` | `bin/dftd3` | preferred | works; `conda-forge::dftd3-python` | `import dftd3` | nyi | preferred; (dep) `conda-forge::simple-dftd3` | `bin/simple-dftd3` |; D4; `psi4::dftd4` | `bin/dftd4`, `import dftd4` | preferred | works; `conda-forge::dftd4-python` | `import dftd4` | nyi | preferred; (dep) `conda-forge::dftd4` | `bin/dftd4` | ; GCP; `psi4::gcp` | `bin/gcp` | preferred | works; `conda-forge::gcp-correction` | `bin/mctc-gcp` | nyi | preferred. - [x] Capabilities changed slightly between `dftd3` and `s-dftd3`. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of `dftd3` or `s-dftd3` engine). That is, `-d3` is still an alias to `-d3zero` which is now an alias to a new extension `-d3zero2b`, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, `s9:=0.0`). When `s-dftd3` is the engine, another set of new extensions, e.g., `-d3atm` alias of `-d3zeroatm` turns on 3-body (`s9=1.0`) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., `energy(""b3lyp-d3atm"")` — and Psi4 will figure out if you have the right engine to do the job.; - [x] Previous to QCEngine v0.26.0 (required by this Psi4 PR), t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:746,simpl,simple-,746,https://psicode.org,https://github.com/psi4/psi4/pull/2791,2,['simpl'],['simple-']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix bug where final findif and nbody quantities are computed and probe-able but not printed or logged.; - [x] update CI for c-f based; - [x] add docs warnings about out-of-dateness for build; - [x] work around windows console not liking strikethrough; - [x] psi4.addons() isn't the definitive word on ecosys availability -- testing.using is -- but it's simpler. This updates the Grimme addons to detect the favored distributions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2959:840,simpl,simpler,840,https://psicode.org,https://github.com/psi4/psi4/pull/2959,1,['simpl'],['simpler']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. #### Review guide; below are the key files for review; * proc.py; * sapt-compare/input.dat; * sapt.rst. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] update various build docs, especially for Libint2 and libecpint; - [x] a coalition including @konpat and @CDSherrill agree that it's better to update the default for elst terms for sapt0 in Ed's code for (1) physics and (2) match the other two sapt codes. this implements that decision. hopefully the docs additions are clear. glad of suggestions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2582:92,guid,guide,92,https://psicode.org,https://github.com/psi4/psi4/pull/2582,2,"['clear', 'guid']","['clear', 'guide']"
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. @lothian, the primary files to look at are procedures/proc.py, cc.rst, preview_capabilities_ccenergy.rst, and (for example) cc13b/input.dat. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Conventional ccsd(t) gradients will now proceed as finite-difference calculations, which are much more memory efficient. If you still want to access the analytic gradients, add `set qc_module ccenergy`. ## Dev notes & details; - [x] the main change is disabling default conv rhf/uhf ccsd(t) analytic gradients through ccenergy in proc.py . they're still accessible by setting `qc_module=ccenergy` explicitly; - [x] changes to tests so that we're still testing the gradients; - [x] changes to the capabilities auto-documentation that starts with stdsuite, gets stored in samples/stdsuite_psi4.txt, and gets processed into docs tables, a viz preview of which are stored in sphinxman/source/.; - [x] simpler docs-building environment!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). closes #2913 . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2943:1091,simpl,simpler,1091,https://psicode.org,https://github.com/psi4/psi4/pull/2943,1,['simpl'],['simpler']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Cleanup to libmints/petitelist to remove manual memory management in favor of `std::vector`. Some of the code was not really clear (use of both `len` and `length` in some of the SO objects). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3026:205,clear,clear,205,https://psicode.org,https://github.com/psi4/psi4/pull/3026,1,['clear'],['clear']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; For some poorly understood confluence of reasons, for some users error messages can _sometimes_ get completely lost when Psi4 exits with a `PSIEXCEPTION`, especially when a PSIO error happens.; This can be observed in recent bug reports, see:. - https://github.com/psi4/psi4/issues/2970; - https://forum.psicode.org/t/sapt0-calculation-crashes-pointer-error/2839. In both of these cases the users were only seeing the error message that has been written to `cerr`, but not the string that `PSIEXCEPTION` should have printed. IIRC when I tried to research this quite a while ago, I have found this may be a bug in some versions of libstdc++. This PR adds a simple workaround: the exception message is also printed to `cerr` in `psio_error`. The only side effect, is that some users, who are currently not affected by the lost message problem, may start getting the same error message twice when a PSIO error happens. Spammy error exits are not great, but PSIO errors are not supposed to happen too often, and when they do loosing the error message is more annoying than having it be duplicated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSIO error messages are now also printed to `cerr`, fixing an issue where (under some circumstances) large parts of the error message would never reach the user, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The same error message that gets passed to `PSIEXCEPTION` is now printed to `cerr` before throwing in `psio_error`. ## Checklist; - [x] There is no easy way to add tests for ""are error messages getting delivered or not?""; - [x] Tests run by the CI ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:736,simpl,simple,736,https://psicode.org,https://github.com/psi4/psi4/pull/2997,1,['simpl'],['simple']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Refactored code in the WaveFunction class as per #2875. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] No changes to user experience. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Removed `nmo_` cache variable in favor of `nmopi_.sum()` to keep things in sync; - [ ] Refactored code to reflect removal of variable. ## Questions; - [ ] Best ways to test this change?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. #2875",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980:323,user experience,user experience,323,https://psicode.org,https://github.com/psi4/psi4/pull/2980,1,['user experience'],['user experience']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Remove c++ optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:437,simpl,simple,437,https://psicode.org,https://github.com/psi4/psi4/pull/2727,1,['simpl'],['simple']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple performance improvement for the DLPNO-MP2 algorithm. For DLPNO-MP2 computations on many-core machines, I see speedups around 20%. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Clone (rather than create from scratch) a `TwoBodyAOInt` for each thread; - [x] More appropriate OMP scheduling. ## Checklist; - [x] DLPNO tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378:80,Simpl,Simple,80,https://psicode.org,https://github.com/psi4/psi4/pull/2378,1,['Simpl'],['Simple']
Usability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple print option change to ensure printing of the final result for the nonapproximated E(20)exch-disp energy. Fixes #2317. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2318:80,Simpl,Simple,80,https://psicode.org,https://github.com/psi4/psi4/pull/2318,1,['Simpl'],['Simple']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Some overloads of `Matrix::diagonalize` in `libmints` are never called anywhere within Psi4, and some more are currently taking pointer arguments. They should be removed, but as discussed in #2693 the entire `Matrix` class is `PSI_API` and Forte is for sure using these diagonalization functions. To keep the promise of not randomly breaking API without fair warning, this PR deprecates said functions but keeps them usable. Call sites within Psi4 are however converted to use non-deprecated overloads, so after 1.7 is out, completing the removal should just be a simple deletion of the deprecated overloads. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] `PSI_API` member function `Matrix::diagonalize(Matrix* eigvectors, Vector* eigvalues, diagonalize_order nMatz = ascending)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` member function `Matrix::diagonalize(SharedMatrix& eigvectors, Vector& eigvalues, diagonalize_order nMatz = ascending)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` member function `Matrix::diagonalize(SharedMatrix& metric, SharedMatrix& eigvectors, std::shared_ptr<Vector>& eigvalues, diagonalize_order nMatz = ascending)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` member function `Matrix::diagonalize(Matrix& eigvectors, Vector& eigvalues, int nMatz = 1)` is now using the `diagonalize_order` enum, like the other overloads: `Matrix::diagonalize(Matrix& eigvectors, Vector& eigvalues, diagonalize_order nMatz = ascending)`. But since `ascending = 1`, this should not cause disruptions. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2738:497,usab,usable,497,https://psicode.org,https://github.com/psi4/psi4/pull/2738,2,"['simpl', 'usab']","['simple', 'usable']"
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The `-H<path>` option for CMake is technically not part of the CMake public interface, it is not documented and was never meant for public use. Since CMake 3.13 there is a proper alternative, `-S<path>`, so Psi4 should use that and stop suggesting users to use `-H<path>`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 no longer suggests users to use the undocumented `-H<path>` CMake option when building from source. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Replace `-H<path>` with `-S<path>` in CMake invokations. ## Questions; - [ ] I have no idea where to make a PR for fixing this in psi4-path-advisor. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2797:567,undo,undocumented,567,https://psicode.org,https://github.com/psi4/psi4/pull/2797,1,['undo'],['undocumented']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; These functions are relics from Psi3 (or before?) and they have many issues, unfortunately one of them is their function signature. Stemming from the awful interface, users of `rsp(...)` and `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. To keep the promise of not randomly breaking API without fair warning, this PR deprecates said functions but keeps them usable. After #2776, `rsp(...)` has no internal callers left. As for `sq_rsp(...)`:. - many former callers of `sq_rsp(...)` have turned out to be unused functions and have been removed; - If #2686 is merged the vast majority of remaining callers are migrated to a new wrapper around DSYEV; - The remaining call sites of `sq_rsp(...)` will all be in `dfocc`, which is not touched for the time being to avoid causing merge conflicts for the many pending PRs for that module. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Added deprecation notices to `rsp(...)` and `sq_rsp(...)`. ## Checklist; - [x] No new features; - [x] Tests pass as per Lori. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2798:471,usab,usable,471,https://psicode.org,https://github.com/psi4/psi4/pull/2798,1,['usab'],['usable']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR reworks and simplifies `libqt/probabil.cc`. Excessive conditionals are removed, sanity checks now throw instead of returning zero, and the `double` kludge is supplanted by `uint64_t`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `factorial` and `combinations` now return `uint64_t` instead of `double`, and take `const uint64_t` instead of `int`; - [x] `factorial` now throws if the result would overflow; - [x] `combinations` now throws if computing n-choose-k is impossible. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2907:100,simpl,simplifies,100,https://psicode.org,https://github.com/psi4/psi4/pull/2907,1,['simpl'],['simplifies']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is the third PR in the `libmoinfo` series, following #3101 and #3155.; Currently, `libmoinfo` is calling the `intvec convert_int_array_to_vector(int n, const int* array)` to initialize some of its `std::vector<int>` members by copying the innards of `Dimension` objects. Unfortunately this is happening through the rather inelegant mechanism of implicitly calling `Dimension::operator const int*() const`, which is set to be removed eventually. This PR replaces all calls of `convert_int_array_to_vector` in `libmoinfo` with simple assignment-initialization. Now, this could in theory lead to a change in behavior, as the former only copies the first `n` elements of the array inside the Dimension object instead of the entire thing, but in practice that does not seem to be happening. As far as I can tell, for trouble to happen it would require an internally inconsistent `Wavefunction` object or `libmoinfo` trying to use only a subset of the irreps. Nevertheless, I have added checks to ensure that any condition that would lead to an unpredictable change in behavior after this PR, results in a crash instead. I don't think it should ever happen, but internal consistency checks are probably not a bad idea anyways. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Replace all calls of `convert_int_array_to_vector` in `libmoinfo` with simple assignment-initialization; - [x] Add internal consistency checks to guard against possible hazards; - [x] Remove now-unused function `MOInfoBase::convert_int_array_to_vector`. ## Questions; - If eve",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3177:610,simpl,simple,610,https://psicode.org,https://github.com/psi4/psi4/pull/3177,1,['simpl'],['simple']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is the variant of DirectJK I mentioned at the end of @davpoolechem's talk at PsiCon last Saturday. The idea is simple: instead of updating the reference every iteration, which is subject to creeping numerical noise, use a fixed reference density and JK matrix for all iterations. I also simplified some of the DirectJK code, and added missing documentation. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Should full formation still happen every N iterations? I don't know if this truly is less susceptible to numerical noise accumulation... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3111:196,simpl,simple,196,https://psicode.org,https://github.com/psi4/psi4/pull/3111,2,['simpl'],"['simple', 'simplified']"
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This updates the Windows Azure for testing and conda build from 2016 to 2022 environment and 11 to 13 llvm. It's definitely needed soonish as 2016 is getting retired. I don't see any reason the llvm change should hurt the broad usability of the conda package, so I'm for trying it in the wild. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2415:308,usab,usability,308,https://psicode.org,https://github.com/psi4/psi4/pull/2415,1,['usab'],['usability']
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `Molecule::clear()` is currently almost a no-op, because it is calling `std::vector::empty()`, which is a getter function that does not modify the object. This PR corrects that. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The `clear()` member function of `PSI_API` class `Molecule` now correctly clears `Molecule::atoms_` and `Molecule::full_atoms_`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Use `std::vector::clear()` instead of `std::vector::empty()` in `Molecule::clear()`. ## Questions; - [ ] What is the user/caller expectation for the state of `Molecule::atoms_` and `Molecule::full_atoms_` after `Molecule::clear()` returns? In `molecule.h` the comment suggests it should be ""zeroed out"": https://github.com/psi4/psi4/blob/61c0b47982ceafd92f567934a29601610fbb1520/psi4/src/psi4/libmints/molecule.h#L137-L138 But that is not what `std::vector::clear()` does, it destructs all elements, leaving the vector with a size of zero. Moreover, the elements of `Molecule::atoms_` and `Molecule::full_atoms_` are `std::shared_ptr`, so what does ""zeroing"" really mean here?. Is the comment misleading as I suspect it is, or do callers of `Molecule::clear()` really expect it to preserve the size of `Molecule::atoms_` and `Molecule::full_atoms_`?. ## Checklist; - [x] No new features; - [ ] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2864:91,clear,clear,91,https://psicode.org,https://github.com/psi4/psi4/pull/2864,8,['clear'],"['clear', 'clears']"
Usability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #2939 . ## User API & Changelog headlines; - [x] fix bug where `optimize(..., engine=""geometric"", molecule=mol)` would not run; - [x] undo some hack fixes and make distributed driver runs through QCFractal ""next"" branch more reliable by making array qcvars shaped numpy arrays. Works with QCFractal >=v0.50beta10. Show examples of using `get_psi_results()` to prepare the results of distributed driver runs in ""normal"" psi4 way. ## Dev notes & details; - [x] In the early days (before ddd entered psi4), all array-like pieces of AtomicResults came back as flat lists, so we had to ""plump"" them into e.g., (nat, 3) for gradient. Then, by the time of v1.6 and QCFractal master v15.8, the AtomicResults preserved all that, so we stopped using the plumper. Now in qcfractal next, they're back to lists again _and_ qcvars have been mingled with other properties, so both separation and plumping are required.; - [x] promote `get_psi_results` as a drop-in replacement after running distributed. It sets up a dummy wfn and qcvariables, just like an internal run, so one doesn't have to deal with picking results off the AtomicResult QCSchema.; - [x] Added labels to tests (mostly findif) so that one can catch all ddd-using tests with `pytest -m ""findif and cbs and nbody""`; - [x] set up a mechanism where can parameterize both pytests and ctests with a snowflake with minimum clutter. ## Questions; - [x] This won't work with current qcf release. I'll ask @bennybp to mint a beta10, then this should work. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review (for review, the 4th commit has the material changes. 3rd are test changes. 1st & 2nd are labeling and syntax.); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2929:221,undo,undo,221,https://psicode.org,https://github.com/psi4/psi4/pull/2929,1,['undo'],['undo']
Usability,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/604:234,guid,guidance,234,https://psicode.org,https://github.com/psi4/psi4/pull/604,1,['guid'],['guidance']
Usability,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:1527,Simpl,Simplified,1527,https://psicode.org,https://github.com/psi4/psi4/pull/1772,1,['Simpl'],['Simplified']
Usability,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1030:198,usab,usable,198,https://psicode.org,https://github.com/psi4/psi4/pull/1030,1,['usab'],['usable']
Usability,"## Description; A pull request aiming to simplify the Psi4 gradients. Doing this ensures dipole perturbations and external potentials are used throughout Psi4 and not just in the SCF and MP2 codes. Also, will either provide basic infrastructure for DFT Hessians or the Hessians themselves. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Potential/Kinetic/Overlap/Perturbation gradients from MintsHelper; * **User-Facing for Release Notes**; - [ ] RKS DFT Hessians. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/839:41,simpl,simplify,41,https://psicode.org,https://github.com/psi4/psi4/pull/839,1,['simpl'],['simplify']
Usability,"## Description; A small, simple companion to https://github.com/psi4/psi4/pull/2833. This updates to the reference output files for the tests that use CompositeJK methods (linK-1, linK-2, linK-3, and scf5), especially notable since the current reference files use `DIRECTDFJ` for composite `SCF_TYPE` methods instead of the current `DFDIRJ`. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Regenerate the reference output files for the tests linK-1, linK-2, linK-3, and scf5. ## Questions; N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2954:25,simpl,simple,25,https://psicode.org,https://github.com/psi4/psi4/pull/2954,1,['simpl'],['simple']
Usability,"## Description; Add a clarifying sentence or two that DETCI doesn't work well for CISD, and will probably run out of memory and crash if it's not a tiny molecule. This is a simple edit of the documentation so I think it should be fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1689:173,simpl,simple,173,https://psicode.org,https://github.com/psi4/psi4/pull/1689,1,['simpl'],['simple']
Usability,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2089:97,guid,guide,97,https://psicode.org,https://github.com/psi4/psi4/pull/2089,2,['guid'],['guide']
Usability,## Description; Addresses issue #548 by appending the process identification (PID) number to file prefixes generated with; the `get_writer_file_prefix` function. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PID is now appended to all file prefixes generated with the `get_writer_file_prefix` function; - [x] Fixes `const` correctness in this function as well as simplifies internal guts; - [x] Now ignores all file extensions (not just `.out` and `.dat`) when determining base file name; * **User-Facing for Release Notes**; - [x] Some (all at the moment) of the generated ASCII file's names now contain the PID. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/549:432,simpl,simplifies,432,https://psicode.org,https://github.com/psi4/psi4/pull/549,1,['simpl'],['simplifies']
Usability,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966:771,feedback,feedback,771,https://psicode.org,https://github.com/psi4/psi4/pull/966,1,['feedback'],['feedback']
Usability,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093:328,simpl,simple,328,https://psicode.org,https://github.com/psi4/psi4/pull/2093,1,['simpl'],['simple']
Usability,"## Description; All the basis set stuff that simply had to be done for 1.1 to be at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/649:45,simpl,simply,45,https://psicode.org,https://github.com/psi4/psi4/pull/649,1,['simpl'],['simply']
Usability,"## Description; As it turns out I need these for an upcoming project so I started looking into them. This was quite a hurdle with @andysim rederiving the equations and worked on this in parallel. In the end a simple line fix in `eribase.cc` would have fixed this. There are quite a few simplifications that were due to desperation of trying to find the error. These can be removed, but I think this enhances the clarity of the GradDFJK code. Happy to go either way. Fixes #867 . Psi4NumPy script can be found [here](https://gist.github.com/dgasmith/999f5a100e38968457898ecb1e2c22fe). ## Todos; - [x] UKS Gradients need re-fixing. Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Enables range-seperated gradients for density fitting JK objects. ## Questions; - [x] @andysim @jturney Are the `eribase.cc` tweaks fine?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1043:209,simpl,simple,209,https://psicode.org,https://github.com/psi4/psi4/pull/1043,2,['simpl'],"['simple', 'simplifications']"
Usability,"## Description; Basic smart SCF solver. Contains a smart_solver class for easy extensibility of convergence aids. This is still WIP, just looking for feedback on my first PR!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Adds smart_solver class that shares data with a wfn object during SCF iterations.; * **User-Facing for Release Notes**; - [ ] With SMART_SCF set to `true`, SOSCF is automatically engaged in case of trailing convergence and the initial oscillations of SAD, GWH, and CORE guesses are damped. . ## Questions; - [ ] Do we want 'macroiterations' i.e. restarting the SCF with different initial conditions to be included in this PR, or another?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Ensure SOSCF exists for current method before turning it on. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135:150,feedback,feedback,150,https://psicode.org,https://github.com/psi4/psi4/pull/1135,1,['feedback'],['feedback']
Usability,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:843,clear,cleared,843,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['clear'],['cleared']
Usability,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289:561,undo,undone,561,https://psicode.org,https://github.com/psi4/psi4/pull/1289,1,['undo'],['undone']
Usability,"## Description; Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. Don't panic -- 55k of the lines added are an output.ref. See #1351 for history and bite-sized extractions. What's left here is the gory core. Because code is moving around, there's no good way to review it. The plain code file is often easier to read than the diff. Below are the 6 key files.; * `driver.py` — mostly deletions. notice that the main e/g/h functions instead of having several layers when you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:869,simpl,simple,869,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['simpl'],['simple']
Usability,"## Description; Clearly what's wrong with 2020 is that Psi4 hasn't acknowledged it. Let's fix that and update the samples, too. Don't bother reading the changes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2059:16,Clear,Clearly,16,https://psicode.org,https://github.com/psi4/psi4/pull/2059,1,['Clear'],['Clearly']
Usability,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2270:261,clear,clear,261,https://psicode.org,https://github.com/psi4/psi4/pull/2270,1,['clear'],['clear']
Usability,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2193:374,Learn,Learned,374,https://psicode.org,https://github.com/psi4/psi4/pull/2193,1,['Learn'],['Learned']
Usability,## Description; Consolidates some code used to get the metric in SAPT. I'll resume cleaning up this code after `DFHelper` is documented. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2649:76,resume,resume,76,https://psicode.org,https://github.com/psi4/psi4/pull/2649,1,['resume'],['resume']
Usability,"## Description; DCT files were not correctly being cleared upon completion. Among other things, the tau matrix was not properly cleared, which led to energy denominator computations for the MP2 guess incorporating the tau matrix when a DC-12 variant was selected. The MP2 guess was not correct. Requesting the attention of @andysim on this. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clears DCT files correctly. ## Checklist; - [x] [All 'dcft' tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1310:51,clear,cleared,51,https://psicode.org,https://github.com/psi4/psi4/pull/1310,3,"['Clear', 'clear']","['Clears', 'cleared']"
Usability,"## Description; Docs still failed even after the last PR. My current suspicion is that the problem is [this line](https://github.com/psi4/psi4/runs/5253940040?check_suite_focus=true#step:9:248), which results when [an over-active Perl scraper thinks ""LEFT-RIGHT"" is a psivar](https://github.com/psi4/psi4/blob/master/doc/sphinxman/document_psivariables.pl#L213-L224). I don't particularly feel like learning enough Perl to implement the regex properly, so we're just going to avoid it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2448:399,learn,learning,399,https://psicode.org,https://github.com/psi4/psi4/pull/2448,1,['learn'],['learning']
Usability,"## Description; Document an undocumented way to supply a custom basis set. Suddenly, some forum posts involving custom basis sets make much more sense. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1739:28,undo,undocumented,28,https://psicode.org,https://github.com/psi4/psi4/pull/1739,1,['undo'],['undocumented']
Usability,"## Description; Does exactly what it says. I tested for correctness not only by comparison to basis sets that are on EMSL, but also by reproducing the G2 energy of SO2 reported by Brown and Barber (DOI: 10.1021/j100020a034) within 2E-5 hartrees. The G2 method requires this basis set. I get the same error margin when I try to reproduce their CO2 energies, so I attribute this to them not having converged their geometry tightly. Many thanks to @loriab for guidance with Psi's basis set parser. ## Status; - [x] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1531:457,guid,guidance,457,https://psicode.org,https://github.com/psi4/psi4/pull/1531,1,['guid'],['guidance']
Usability,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734:547,feedback,feedback,547,https://psicode.org,https://github.com/psi4/psi4/pull/734,1,['feedback'],['feedback']
Usability,"## Description; Enable mp2-d gradients (for dfmp2 only). ## Todos; - [x] interface and test mp2-d findif and analytic gradient code, calling QCEngine and a different version of the `mp2d` executable (was v0.1, now v1.1); - [x] `dashparam.py` moved in QCEngine https://github.com/MolSSI/QCEngine/pull/85 so changes needed to be made here, too; - [x] set disp qcvars on wfn, not core; - [x] separate processing of `_disp_functor` so it can work better with mp2.; - note that mp2d energies follow the ""dft"" pattern in `proc.py`, while gradients follow the ""mp2"" pattern. This is awkward but simplest until dft double-hybrid gradients pave the way.; - [ ] none of this is going to work until aforementioned PR is merged and qcng `v0.7.0` released. ## Checklist; - [x] Tests added for any new features; - [x] full tests is clean locally, except for `dft-pruning`. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661:588,simpl,simplest,588,https://psicode.org,https://github.com/psi4/psi4/pull/1661,1,['simpl'],['simplest']
Usability,## Description; Enhances user experience for DF-CCSD(T) gradients. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] timings for DF-(T) gradient (copied from fnocc module); - [x] corrects ijk count for gradient (full combination instead of unique pairs). ## Checklist; - [x] relevant tests run (dfccsd-t-grad1). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1241:25,user experience,user experience,25,https://psicode.org,https://github.com/psi4/psi4/pull/1241,1,['user experience'],['user experience']
Usability,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952:1115,intuit,intuitive,1115,https://psicode.org,https://github.com/psi4/psi4/pull/952,1,['intuit'],['intuitive']
Usability,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246:259,guid,guidelines,259,https://psicode.org,https://github.com/psi4/psi4/pull/2246,1,['guid'],['guidelines']
Usability,"## Description; Fix the ability to use database computations when open-shell molecules, and thus reference changes, are involved. Because the time at which `molecule` exists, the fix I implemented would be incompatible with reap and sow, so those have been removed. I've simplified the code accordingly. ## Checklist; - [x] `pywrap-db1` and `pywrab-db3` pass. There doesn't seem to be a Ctest tag for wrapper_database. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1583:271,simpl,simplified,271,https://psicode.org,https://github.com/psi4/psi4/pull/1583,1,['simpl'],['simplified']
Usability,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:487,simpl,simplify,487,https://psicode.org,https://github.com/psi4/psi4/pull/554,1,['simpl'],['simplify']
Usability,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520:1112,guid,guidance,1112,https://psicode.org,https://github.com/psi4/psi4/pull/520,1,['guid'],['guidance']
Usability,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/826:501,clear,cleared,501,https://psicode.org,https://github.com/psi4/psi4/pull/826,1,['clear'],['cleared']
Usability,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685:442,simpl,simple,442,https://psicode.org,https://github.com/psi4/psi4/pull/685,1,['simpl'],['simple']
Usability,"## Description; I was browsing some MolSSI-tweeted videos and learned about the `codemeta.json` movement. Didn't sound like a bad idea, so here's a start, reformatted from the 1.1 paper. It potentially needs more authors from psi1-psi3 era. ## Questions; - [ ] Do we want this?. ## Checklist; - [x] I did run it against the schema checker https://github.com/codemeta/codemeta/blob/master/codemeta.jsonld. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1056:62,learn,learned,62,https://psicode.org,https://github.com/psi4/psi4/pull/1056,1,['learn'],['learned']
Usability,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2106:150,simpl,simple,150,https://psicode.org,https://github.com/psi4/psi4/pull/2106,1,['simpl'],['simple']
Usability,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1950:362,guid,guidelines,362,https://psicode.org,https://github.com/psi4/psi4/pull/1950,1,['guid'],['guidelines']
Usability,"## Description; If you look closely, the driver structure and its autodoc are a little weird, as reviewed in #2166. Also, many driver functions are minimally documented or don't take advantage of typing to guide the developer. This PR considers only `driver/p4utils/` directory and fills in docstrings and typing while checking the built docs for maximum info and links. Even when I saw good things to change in code, for this most part, this PR leaves them be and focuses on docstrings. Piece 1 from the ""driver import"" series, #2166 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] add `__all__` to guide `from module import *`. This same effect can be had by `def _functionname` but the PEP https://peps.python.org/pep-0008/#public-and-internal-interfaces still recommends `__all__`.; - [x] a few things actually retired: ; - `PsiImportError`, `CSXError`, `Dftd3Error` -- not used since v1.4 at latest; - `fchkfile_to_string` hidden in fchk.py (just opening and reading a file); - `basname` hidden in python_helpers.py (one-liner); - `format_kwargs_for_input` (as soon as v1.4); - `extract_sowreap_from_output` (as soon as v1.4); - `format_currentstate_for_input` (as soon as v1.4); - `Table` (as soon as v1.4); - `print_stdout` (as soon as v1.4); - `print_stderr` (as soon as v1.4). ## Checklist; - Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2592:206,guid,guide,206,https://psicode.org,https://github.com/psi4/psi4/pull/2592,2,['guid'],['guide']
Usability,"## Description; In some basis sets that contain ECPs, the ""valence"" f-shell is included in the effective core. This seems true for all post-lanthanide/actinide atoms. . In current master, those 60 ECP electrons are always frozen, but in a non-ECP basis with frozen core we'd freeze only 54 of those. The simple solution is to always freeze the 4f electrons (for 6th period) if the shell is full. ## Checklist; - [x] Tests added for any new features; - [x] `ctest -L ecp` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1930:304,simpl,simple,304,https://psicode.org,https://github.com/psi4/psi4/pull/1930,1,['simpl'],['simple']
Usability,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2069:291,user experience,user experience,291,https://psicode.org,https://github.com/psi4/psi4/pull/2069,1,['user experience'],['user experience']
Usability,"## Description; It looks like errors like #2080 happen when `throw` called from within threaded code in C++. From non-threaded code, Pybind11 catches them and turns them into nicely behaved `RuntimeError`s but from threaded, it just segfaults. This PR averts a few, but there could be far more throughout codebase. closes #2080 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cleans up namespace markings in libfock. also adds `namespace psi` into a formerly anonymous namespace; - [x] pre-clears SG0 and SG1 atoms before entering the threaded grid build proper. the non-SG0 and SG1 block had some throws, too, but I couldn't trigger them. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2082:551,clear,clears,551,https://psicode.org,https://github.com/psi4/psi4/pull/2082,1,['clear'],['clears']
Usability,"## Description; Make SCF guess docs less confusing for the casual reader, based on feedback in the Evangelista group. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2881:83,feedback,feedback,83,https://psicode.org,https://github.com/psi4/psi4/pull/2881,1,['feedback'],['feedback']
Usability,"## Description; Make v2rdm_casscf work with psi in the v2.2.2 pybind11 era. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~half~ done adding `PSI_API` to psi where v2rdm wants it; - [x] corresponding v2rdm repo change is https://github.com/loriab/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff. ## Questions; - [x] @jturney, @edeprince3, I intended to finish this, but I'm confused by `C_DDOT`. `core.so` has the symbol that `v2rdm_casscf.so` wants, but the test file complains about DDOT anyway. Maybe there's some more complicated place that `PSI_API` needs to be inserted that I'm not seeing from simple pattern following. So consider this work a start and a puzzle.; ```; >>> ../hrw-qcdb/objdir/stage/usr/local/psi4/bin/psi4 tests/v2rdm3/input.dat ; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK; /home/psilocaluser/miniconda3/envs/idp35p4/bin/python: symbol lookup error: /home/psilocaluser/gits/hrw-qcdb/objdir/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi6C_DDOTEmPdiS0_i; >>> nm v2rdm_casscf.so | grep DDOT; U _ZN3psi6C_DDOTEmPdiS0_i; >>> nm ../hrw-qcdb/objdir/stage/usr/local/psi4/lib/psi4/core.so | grep DDOT; 00000000006013c0 t _ZN3psi6C_DDOTEmPdiS0_i; 00000000017384d0 t _ZN3psi8PSI_DDOTEimSt10shared_ptrINS_6VectorEEiS2_i; ```; - [x] if https://github.com/edeprince3/v2rdm_casscf/pull/26 gets merged quickly, then I should re-point the cmake back to Eugene; - [ ] should we export _all_ lapack in https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libqt/lapack_intfc.cc ?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/955:683,simpl,simple,683,https://psicode.org,https://github.com/psi4/psi4/pull/955,1,['simpl'],['simple']
Usability,## Description; Makes print statement more clearly communicate to user which density matrix is being employed. c closes #1055 ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1068:43,clear,clearly,43,https://psicode.org,https://github.com/psi4/psi4/pull/1068,1,['clear'],['clearly']
Usability,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190:1012,simpl,simplifying,1012,https://psicode.org,https://github.com/psi4/psi4/pull/2190,1,['simpl'],['simplifying']
Usability,"## Description; On Python 3.8.2, I was getting the following warnings; ```; /usr/lib/psi4/driver/qcdb/modelchems.py:95: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:148: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:170: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:192: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/procrouting/proc.py:1249: SyntaxWarning: ""is"" with a literal. Did you mean ""==""?; read_orbitals = core.get_option('SCF', 'GUESS') is ""READ""; ```; after running something like ; ```; #! Sample HF/cc-pVDZ H2O Computation; import psi4; psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'); ```. It looked like two simple fixes. The string formatting was missing a `%` and the comparison could be replaced by `==`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fewer warnings. ## Questions; - [ ] Does this need a test?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1891:1114,simpl,simple,1114,https://psicode.org,https://github.com/psi4/psi4/pull/1891,1,['simpl'],['simple']
Usability,"## Description; Part of the DF Gradient refactor. It's become clear that Rob's implementation of the DF-MP2 gradients can't be generalized without incurring a performance hit, so the scope of the project now is to generalize what `dfocc` does out of `dfocc` so other modules (like `dct`) can use it. The current step of that is to make the procedure independent of `dfocc` globals. While I was at it, I got rid of unneeded headers and did some other minor code cleanup. ## Todos; - [x] Some `dfocc` cleanup. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2049:62,clear,clear,62,https://psicode.org,https://github.com/psi4/psi4/pull/2049,1,['clear'],['clear']
Usability,## Description; Poke master docs build that broke ~12 days ago w/o a clear cause. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2807:69,clear,clear,69,https://psicode.org,https://github.com/psi4/psi4/pull/2807,1,['clear'],['clear']
Usability,## Description; Prints out the name of the missing basis set when a call to Wavefunction::get_basisset(std::string label) fails. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Simply life for developers. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/545:244,Simpl,Simply,244,https://psicode.org,https://github.com/psi4/psi4/pull/545,1,['Simpl'],['Simply']
Usability,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2395:144,simpl,simplifying,144,https://psicode.org,https://github.com/psi4/psi4/pull/2395,1,['simpl'],['simplifying']
Usability,"## Description; Provides users the ability to form a basisset composed of two combined basissets, the two can be combined simply or through use of the complementary auxiliary basis set (CABS) approach of Valeev et al. ## Dev notes & details; - [X ] Uncomments `pyconstruct_combined` in qcdb with minor changes to fit updated python; - [X ] Changes input to `build_ri_space` in OrbitalSpace to require a prebuilt combined `BasisSet` object; - [X ] Changes `build_cabs_space` in OrbitalSpace to use a full SVD; - [X ] Adds pytest `test_orbitalspace.py` to check orthonormality between orbital basis set and CABS; - [X ] Adds updated F12 basissets from the Basis Set Exchange; - [X ] Use of the CABS created works with my F12 plugin giving correct energies. ## Questions; - [ ] Shoud I generalize `_pybuild_basis` aka `BasisSet.build` to work with a list of keys, targets, roles, and other? Or create a new function to more easily access the building of a combined basisset?. ## Checklist; - [X ] `test_orbitalspace.py`; - [X ] Passes quick tests [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982:122,simpl,simply,122,https://psicode.org,https://github.com/psi4/psi4/pull/2982,1,['simpl'],['simply']
Usability,"## Description; Rebase through of qcel v0.4.0 (not yet released). ## Todos; - [x] moved `tests/pytest` to `tests/pytests` so latter can be a module w/o confusing ""import pytest""; - [x] migrated to use which, which_import, parse_version from qcl; - [x] removed alignment code that migrated to QCElemental. - [x] derived testing fns from qcel, rather than scattering and duplicating in psi4/qcdb; * there's two conflicting APIs going on:; * Psi4: `compare_something(expected, computed, significant_digits, label, verbose=1)`; * QCEl: `compare_something(expected, computed, label=None, atol=1.e-6, quiet=False)`; * and there's two sets of fn names:; * Psi4: `compare_integers`, `compare_strings`, `compare_arrays`, `compare_values`, `compare_matrices`; * QCEl: `compare` (for exact comparison scalars or np-castable arrays), `compare_values` (for floating point comparison scalaurs or np-castable arrays), `compare_recursive` (for iterables containing any of the previous); * Basically, now in psi4 or qcdb, you can use the qcel fns and the psi4 fns and the psi4 API or the qcel API. And their failure response is localized in a fn that can be switched out. ; * A few highly specialized comp fns (like `compare_molrecs` have been deprecated or psi4 API deprecated, but there should be enough UpgradeHelper guides to raise a problem and suggest solution.; * EDIT: whether using psi4 or qcel APIs, `label` is no longer required -- it'll default to the calling fn name (or `<module>` in a script). - [x] added link to binder image and fix tutorial cmd that didn't work in binder. ## Questions; - [ ] Someone should look at the old/new `compare_matrices` fns to check that the values comparison is still catching any detailed uses of the `^` operator. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1644:1303,guid,guides,1303,https://psicode.org,https://github.com/psi4/psi4/pull/1644,1,['guid'],['guides']
Usability,"## Description; See #2608 for background. Fixes #2608. Recent emphasis has been on Cfour through QCEngine or QCDB, so the Psi4/Cfour test suite likely hasn't been checked since pre v1.4. Nevertheless, for things like cbs, Psi4/Cfour is still the right choice. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switching away from `molecule = geometry()` in `interface_cfour.py` below isn't strictly necessary, but it helps with some import stuff in a future PR; - [x] The main thing that the distributed driver broke is that non-set basis sets get set as `(auto)`, so the interface needed to learn that was the same as unset. Also, there isn't the continuous storage of qcvars in `P::e`, so those need to be reloaded from ""wfn"".; - [x] interface used to allow gradients with ghost atoms. dropping that here, but I did implement it in qcdb and qcengine.; - [x] it looks like I hacked up the tests until they passed. broadly, this is true, but removed things are singles and same- and opposite-spin energies. harvesting all these values is tested far more extensively and carefully now over at qcdb than here, so I am not discomfited.; - [x] all psi4/cfour tests pass. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2615:649,learn,learn,649,https://psicode.org,https://github.com/psi4/psi4/pull/2615,1,['learn'],['learn']
Usability,"## Description; Sept/Oct 2017 someone fixed up 5-zeta Dunning orbital basis sets for Li/Be. Those were only parts of the relevant publications, so I scraped up the rest. Below is summary. Only reason these didn't get posted 18 mo ago was that I was confused about the deleted Na/Mg from cc-pcv5z-dk.gbs, and I didn't have time to follow up and detangle why. All the same, I have confidence, if not conviction, about these bases, so they may as well be available for use. This file is the guide to what has changed (blue is new, yellow is changed, red is deleted); [basissets_libenamg_PR.pdf](https://github.com/psi4/psi4/files/2903308/basissets_libenamg_PR.pdf). ```; [43] From Peterson alkali paper website: http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html. Added Be to cc-pV6Z (basis-cc-pv6z); Added Na & Mg to cc-pV(X+d)Z X=DTQ5 (basis-cc-pv_xpd_z); Replaced Li, Be, Na, Mg exponents for tight functions for cc-pCVXZ X=DTQ; from ones from EMSL to the ones from Peterson website (corevalence-cc-pcvxz, as separable); Replaced Na & Mg to cc-pCVXZ X=5; (non-separable so deleted from corevalence-cc-pcv5z and added to partial-basis-cc-pcv5z); Replaced Li, Be, Na, Mg exponents for diffuse of aug-cc-pvXZ X=DTQ; from ones from EMSL (lacking citation) to the ones from Peterson website (diffuse-aug-cc-pvxz); Added Na & Mg to diffuse of aug-cc-pVXZ X=5 (Li & Be added in [42]) (diffuse-aug-cc-pv5z); Added Na & Mg to aug-cc-pV(X+d)Z X=DTQ5 (diffuse-aug-cc-pv_xpd_z). Propagated diffuse fns to hold-diffuse-[jun|may|apr|mar]-cc-pv[dtq5]z.gbs and _[dtq5]pd_z; ```. ### Basis sets present now in last commit. If you value your sanity, do not try to comprehend the diff of the last commit. #### Just to show how crazily these basis sets compose, the diff of the basis set progenitors (even including copying to the months) is `+2015 -633` but `36,655 −13,419` for the actual final basis sets. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests clean. ## Status; - [ ] Ready f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1559:488,guid,guide,488,https://psicode.org,https://github.com/psi4/psi4/pull/1559,1,['guid'],['guide']
Usability,"## Description; Set the minimum required C++ standard to C++14. Lower bounds on compilers can be found [here](https://en.cppreference.com/w/cpp/compiler_support#cpp14). Also addresses a bug in the SAPT code that resulted in a double free. ## About the SAPT bug; The Iterator class in SAPT contained an `int *` array that was cleaned up by the class's destructor. Iterator objects are constructed by a builder routine that first creates a local Iterator object, fills it, then returns it by value. The C++98 behavior of this design is problematic; a copy of the local temp Iterator is made and that copy is returned to the caller. When that copy is made, both the local temp and its copy have `int *` pointers that point to the same pool of memory because no deep-copy copy constructor exists for Iterator. Upon returning, the local temp object is destroyed, triggering the memory pointed to by the `int *` to be freed, causing the returned object to point to freed memory which is undefined behavior. When that returned object eventually goes out of scope, it will try to free the memory again, leading to the double free memory error we observed. Because we use C++11 most compilers appear to be able to correctly elide the copy, by implementing move semantics, so we haven't seen this before. The switch to C++14 with GCC5.4 caused consistent segfaults, revealing the issue. The fix is simple; don't use raw `int *`, but `std::vector<int>` instead; the lifetime of these is correctly managed automatically and the various move constructor/copy constructor/destructor can be generated correctly by the compiler. RAII for the win!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix C++14 compliance CMake-side; - [x] Fix memory bug in SAPT code; - [x] Move Travis to Xenial. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398:1388,simpl,simple,1388,https://psicode.org,https://github.com/psi4/psi4/pull/1398,1,['simpl'],['simple']
Usability,"## Description; Simple fix for the SCF plugin template, to work with the new `set_variable` syntax. ## Questions; - [x] What about [these](https://github.com/psi4/psi4/blob/master/psi4/driver/driver_nbody.py#L295-L298)? I only discovered them by grepping the codebase so I have no evidence to suggest they should be changed - it's probably the difference between the `wfn` or `core` namespaces, vs. the `psi4` namespace being used in the plugin snippet. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1680:16,Simpl,Simple,16,https://psicode.org,https://github.com/psi4/psi4/pull/1680,1,['Simpl'],['Simple']
Usability,"## Description; Small improvements to the TDDFT solver. This one should be merged after #1885. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Document; - [x] Handle computation of triplets properly; - [x] Implement transition moments and spectroscopic observables:; - [x] Electric dipole moment, length representation; - [x] Electric dipole moment, velocity representation; - [x] Magnetic dipole moment; - [x] Oscillator strengths, length representation; - [x] Oscillator strengths, velocity representation; - [x] Rotatory strengths, length representation; - [x] Rotatory strengths, velocity representation; - [x] Robustness fix: `states_per_irrep` sometimes fails with an obscure out-of-bounds error.; - [x] Usability fix: verbosity should be slightly higher, to let the user know stuff is being done (currently, only printout is at convergence); - [x] Implement functions to plot electronic absorption (EAS) and eletronic circular dichroism (ECD) spectra; - [x] Remove warning on potential inaccuracy of results.; - [X] Check convergence only against the norm of the residual (`r_tol`). The `e_tol` parameter has been completely removed. ## Follow-up; - The solver stalls when very tight convergence (`r_tol = 1e-8`) is requested. I am not quite sure if this is a fundamental issue with the algorithm. That convergence threshold is insanely tight, I am not even sure if this should be considered a real problem... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814:760,Usab,Usability,760,https://psicode.org,https://github.com/psi4/psi4/pull/1814,1,['Usab'],['Usability']
Usability,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2561:170,resume,resume,170,https://psicode.org,https://github.com/psi4/psi4/pull/2561,1,['resume'],['resume']
Usability,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462:246,feedback,feedback,246,https://psicode.org,https://github.com/psi4/psi4/pull/2462,1,['feedback'],['feedback']
Usability,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/895:724,Simpl,SimpleMatrix,724,https://psicode.org,https://github.com/psi4/psi4/pull/895,2,"['Simpl', 'simpl']","['SimpleMatrix', 'simplification']"
Usability,"## Description; The Hessian code can be cleaned up by using the SCF class's hessian-vector products. To avoid the need to cast pointers inside the orbital response code, this PR specializes the response class for each reference type, and removes some junk symmetry code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Specialize response code by reference; - [x] Simplify dipole derivative handling; - [x] Remove symmetry code from response; - [x] Use the `Hx` functions from the SCF class to solve CPHF. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1550:414,Simpl,Simplify,414,https://psicode.org,https://github.com/psi4/psi4/pull/1550,1,['Simpl'],['Simplify']
Usability,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235:521,Simpl,Simple,521,https://psicode.org,https://github.com/psi4/psi4/pull/1235,1,['Simpl'],['Simple']
Usability,"## Description; The goal of this PR is to expand test coverage of the DFJCOSK and DFJLinK JK subclasses within Psi4 by including their testing within the scf5 test. The scf5 test in Psi4 tests a variety of combinations of SCF_TYPE and SCF reference for singlet and triplet O2. As it were, the COSX and LinK SCF_TYPES were missing from the list of methods analyzed within this test. This PR simply adds COSX and LinK to the list of methods tested in scf5, expanding testing of these two methods beyond what was previously present. NOTE TO REVIEWERS: This PR is a general JK maintenance/cleanup/improvement PR and is independent of the developments occurring regarding CompositeJK and its direct implementation into Psi4. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Adds COSX and LINK to the list of SCF_TYPEs tested in the scf5 test option. ## Questions; - [ ] Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768:390,simpl,simply,390,https://psicode.org,https://github.com/psi4/psi4/pull/2768,2,"['feedback', 'simpl']","['feedback', 'simply']"
Usability,"## Description; The orthogonalization changes in the Cholesky pull #1760 broke `scf-guess-read2`. The problem is that I started to renormalize the overlap matrix before doing the eigendecomposition. However, it turns out that there's no (simple?) way to renormalize **and** still have a symmetric orthogonalizing matrix **X**. . Namely, the natural way to get the right normalization out is that you. 1. normalize `S`: `Snorm = diag(1.0/sqrt(S)) * S * diag(1.0/sqrt(S))`; 2. form `Xnorm` for `Snorm`; 3. form `X = diag(1.0/sqrt(S)) * Xnorm`. Trying to do step 3 in a way that maintains symmetricity of `X` would require much deeper linear algebra, as you need to know how the eigenvalues and eigenvectors change when you balance S to have a unit diagonal. (It may be that some old linear algebra textbooks show how this is done.). Anyway, IMHO there's nothing wrong with having an asymmetric `X`: if you have a linearly dependent basis, this is bound to happen, and so there's no reason to assume `X` is symmetric. All that matters in the end is the number of molecular orbitals you get from `X`, since the SCF (or even the core Hamiltonian) will give you a basis that is different from `X`. The asymmetric `X` revealed a problem in the initialization of the ROHF code, which is now fixed. ROHF should now also work for the case of canonical orthogonalization, I'm not sure why there ever was a stopping clause. A problem was also found in CUHF, which wasn't tested before. For some reason doing the natural orbitals in the alpha orbital basis made the calculation unstable; simply changing to using `X` to find the natural orbitals suddenly fixed everything. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] ROHF orbital guess read-in works; - [x] CUHF orbital guess read-in works; - [x] Orbital orthonormality is tested in the calculation; if the off-diagonal elements of the MO overlap sum to >= 1e-10 then the calculation crashes. ## Questions; - [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1781:238,simpl,simple,238,https://psicode.org,https://github.com/psi4/psi4/pull/1781,1,['simpl'],['simple']
Usability,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2100:341,simpl,simpler,341,https://psicode.org,https://github.com/psi4/psi4/pull/2100,2,"['Simpl', 'simpl']","['Simplifying', 'simpler']"
Usability,"## Description; The purpose of this PR is to integrate with [adc-connect/adcc](https://github.com/adc-connect/adcc/) inside Psi4 and allow Psi4 users to directly run the ADC calculations supported inside adcc. The opposite direction (i.e. using Psi4 SCF results in adcc) is already implemented and working, see the [adcc manual](https://adc-connect.org/calculations.html#general-adc-n-calculations), so this should mainly be an effort of connecting the strings together on the Psi4 side. Currently I am still very much in the planning phase of this PR, thankful for any early pointers or feedback to get me moving in a sensible direction. Since this is my first PR here I still feel a little lost inside the Psi4 source :smile:. My implementation so far hooks into the driver python code of Psi4 and branches out to either `adcc` or the built-in ADC module of Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Get ADC(2) calculation triggered in adcc from Psi4 (see `adcc_examples` subfolder).; - [x] Allow all ADC variants to be run in Psi4; - [x] Proper error handling of Psi4 SCF references not supported in adcc (symmetry, density-fitting, ...); - [x] Integration of adcc installation into Psi4 build system; - Currently adcc can only be installed via `pip`, but we would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:588,feedback,feedback,588,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['feedback'],['feedback']
Usability,"## Description; The resurrection of #2543. This PR refactors my LinK code (#2359) and Zach's semi-numerical K (#2567) code into the CompositeJK framework (to allow mixing and matching of J and K types). The DirectDFJ implementation here is derived from Zach's semi-numerical K PR. This framework is robust and allows for the rapid development of new J/K methods and combinations in the future, and avoids code duplication. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Creates composite JK framework to allow for mixing and matching of different J/K types; - [x] Makes LinK usable with the DirectDFJ algorithm. ## Questions; - [x] To call my LinK code, `SCF_TYPE` is set to `LINK`, should it be `DFJ_LINK` instead?. ## Checklist; - [x] Tests added for any new features; - [x] Passing pytests for COSK (from Zach) and LinK; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:635,usab,usable,635,https://psicode.org,https://github.com/psi4/psi4/pull/2588,1,['usab'],['usable']
Usability,"## Description; There are a few bugs and usability issues with calculations in the presence of a dipole field; this PR will address them. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix and test dipole derivative integrals.; - [x] Add dipole derivative terms to SCF gradients.; - [x] Add dipole derivative terms to MP2 gradients.; - [x] Ensure findif calculations in the presence of a field don't project rotations/translations.; - [x] Add tests for SCF and MP2 gradients.; - [x] Fix nuclear repulsion energies and gradients when a dipole field is present.; - [x] Document method for specifying dipole perturbation. * **User-Facing for Release Notes**; - [x] Improve handling of calculations in the presence of a field. ## Questions; - [x] I don't like the fact that we have to set `perturb_h`, `perturb_with` and `perturb_magnitude`. The biggest problem is that we can only specify x, y, or z perturbations as-is. I propose something like keeping `perturb_h` for easy toggling of the field, but then we should deprecate `dipole_{x,y,z}` in favor of `dipole`. Then an option like `perturb_dipole` or similar that would take a 3-vector to specify the magnitudes would be better. Please weigh in on this. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/668:41,usab,usability,41,https://psicode.org,https://github.com/psi4/psi4/pull/668,1,['usab'],['usability']
Usability,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2451:209,resume,resume,209,https://psicode.org,https://github.com/psi4/psi4/pull/2451,1,['resume'],['resume']
Usability,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/896:540,clear,clearly,540,https://psicode.org,https://github.com/psi4/psi4/pull/896,1,['clear'],['clearly']
Usability,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/810:1305,clear,clearly,1305,https://psicode.org,https://github.com/psi4/psi4/pull/810,1,['clear'],['clearly']
Usability,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:1582,simpl,simple,1582,https://psicode.org,https://github.com/psi4/psi4/pull/1917,1,['simpl'],['simple']
Usability,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2124:848,simpl,simple,848,https://psicode.org,https://github.com/psi4/psi4/pull/2124,1,['simpl'],['simple']
Usability,"## Description; This PR fixes a memory leak that was occurring in the Python-side `qcdb` code. The code meant to modify a _class variable_ but was actually creating and modifying an _instance variable_. Initialization happened many more times than needed, and some memory was not being cleared upon object deletion. The only explanation I have for how this produced a memory leak is that having a class variable and an instance variable with the same name confused the Python garbage collector. I was able to confirm object creation and deletion was occurring roughly as expected. ## Checklist; - [x] Confirmed this change reduces the memory footprint for repeated SCF calls. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2349:286,clear,cleared,286,https://psicode.org,https://github.com/psi4/psi4/pull/2349,1,['clear'],['cleared']
Usability,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2350:329,clear,cleared,329,https://psicode.org,https://github.com/psi4/psi4/pull/2350,1,['clear'],['cleared']
Usability,"## Description; This PR implements a semi-numerical algorithm for computing the exchange (K) matrix as described in [this paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same she",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:356,simpl,simple,356,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['simpl'],['simple']
Usability,"## Description; This PR implements extrapolation of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:475,simpl,simple,475,https://psicode.org,https://github.com/psi4/psi4/pull/2132,1,['simpl'],['simple']
Usability,"## Description; This PR implements the partial Cholesky orthogonalization procedure I've recently described in https://arxiv.org/abs/1911.10372, which can be used to avoid pathological linear dependencies in the basis set. This is the simple version of the algorithm which just hides the pathological functions; the more sophisticated one is already available in ERKALE but it is limited to fixed geometries. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Partial Cholesky decomposition implemented; - [x] Calculation of basis function extents via `r^2` value implemented; - [x] Basis functions sorted so that steep ones get treated first by the decomposition. ## Questions; - [x] How to handle the sorting of basis functions in the presence of symmetry? AFAIK each SO basis functions is a superposition of identical functions on different atoms; this means that the corresponding symmetry-blocked `r^2` values could just be one of these.; - [x] Although matrix.cc already implements pivoted Cholesky, it's also available in LAPACK as `dpstrf()`. Maybe the implementation should be replaced with a call to LAPACK?; - [ ] Would it be possible to make Psi4 drop the irrelevant shells altogether from the basis set to make calculations more efficient? This would need to be done at every geometry... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760:235,simpl,simple,235,https://psicode.org,https://github.com/psi4/psi4/pull/1760,1,['simpl'],['simple']
Usability,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529:104,simpl,simplify,104,https://psicode.org,https://github.com/psi4/psi4/pull/2529,2,['simpl'],"['simplified', 'simplify']"
Usability,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2483:279,simpl,simple,279,https://psicode.org,https://github.com/psi4/psi4/pull/2483,1,['simpl'],['simple']
Usability,## Description; This PR simply adds atom and AO labels to the printing of MO's. . An example of the way it currently looks with this PR: ; ```; ==> Molecular Orbitals <==. 1 2 3 4 5. 1 KR1 s 0.9940785 0.4464603 0.0000000 0.0000000 0.0000000; 2 KR1 s 0.0144528 -1.0568053 0.0000000 0.0000000 0.0000000; 3 KR1 px 0.0000000 0.0000000 0.9928515 0.0000000 0.0000000; 4 KR1 py 0.0000000 0.0000000 0.0000000 0.9928515 0.0000000; 5 KR1 pz 0.0000000 0.0000000 0.0000000 0.0000000 0.9928515; 6 KR1 s -0.0017038 -0.0826135 0.0000000 0.0000000 0.0000000; 7 KR1 px 0.0000000 0.0000000 0.0182476 0.0000000 0.0000000; 8 KR1 py 0.0000000 0.0000000 0.0000000 0.0182476 0.0000000; 9 KR1 pz 0.0000000 0.0000000 0.0000000 0.0000000 0.0182476; 10 KR1 s 0.0002777 0.0113144 0.0000000 0.0000000 0.0000000; 11 KR1 px 0.0000000 0.0000000 -0.0011943 0.0000000 0.0000000; 12 KR1 py 0.0000000 0.0000000 0.0000000 -0.0011943 0.0000000; 13 KR1 pz 0.0000000 0.0000000 0.0000000 0.0000000 -0.0011943; 14 KR1 d 1 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 15 KR1 d 2 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 16 KR1 d 3 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 17 KR1 d 4 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 18 KR1 d 5 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000. Ene -514.2800590 -67.8376091 -62.2184762 -62.2184762 -62.2184762; Sym Ag Ag B1u B3u B2u; Occ 2 2 2 2 2. 6 7 8 9 10. 1 KR1 s 0.1885186 0.0000000 0.0000000 0.0000000 0.0000000; 2 KR1 s -0.5439134 0.0000000 0.0000000 0.0000000 -0.0000000; 3 KR1 px 0.0000000 0.4297751 0.0000000 0.0000000 0.0000000; 4 KR1 py 0.0000000 0.0000000 0.4297751 0.0000000 0.0000000; 5 KR1 pz 0.0000000 0.0000000 0.0000000 0.4297751 0.0000000; 6 KR1 s 1.0767986 0.0000000 0.0000000 0.0000000 0.0000000; 7 KR1 px 0.0000000 -1.0708210 0.0000000 0.0000000 0.0000000; 8 KR1 py 0.0000000 0.0000000 -1.0708210 0.0000000 0.0000000; 9 KR1 pz 0.0000000 0.0000000 0.0000000 -1.0708210 0.0000000; 10 KR1 s 0.0326973 0.0000000 0.0000000 0.0000000 0.0000000; 11 K,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/584:24,simpl,simply,24,https://psicode.org,https://github.com/psi4/psi4/pull/584,1,['simpl'],['simply']
Usability,"## Description; This PR strives to implement an interface of psi4 to the [ddX library](https://github.com/ACoM-Computational-Mathematics/ddX), which implements solvation models (COSMO, PCM, linearised Poisson-Boltzmann) following a domain-decomposition approach. At its current stage I open the PR to get some feedback from devs about the suggested changes and structure and to finalise the upstream python interface of ddX. Note that this PR Is currently deliberately done on top of an outdated master, since any commit after #2388 introduces segfaults (details see below), which so far I have not yet been able to trace down. Any help on that would be much appreciated. ## User API & Changelog headlines; - Implementation of PCM and COSMO solvation models based on the ddx library. ## Dev notes & details; - Introduction of a NumIntHelper class to compute some integrals numerically using a DFT grid; - Introduction of ddx solvation model and new ddx options. ## Reproducer for the mysterious segfault; As part of rebasing against the current master I encountered a really strange segfault. I managed to produce a minimal example, which has really nothing to do with ddx and only adds a python interface to a simple numerical electrostatic integral. See here for a [trimmed-down diff](https://github.com/psi4/psi4/compare/master...mfherbst:psi4:segfault). On my machine checking out this `segfault` branch with `0_configure.sh`, building and running the `mytests/runtests.sh` script gives a segfault inside the numerical integration in the `PCMPotentialInt` class. Note that the code I added *is not even called*, the call to `PCMPotentialInt` happens from the pcm code *which I have not modified*. Now, commenting out; ```c++; PrintIntegralsFunctor printer;; potential_integrals_->compute(printer);; ```; the segfault disappears. I'm getting the weird feeling I'm doing something really stupid here and I just missed it. ## Questions; - [x] Thoughts on the NumIntHelper?; - [x] Is D -> D_cart neede",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:310,feedback,feedback,310,https://psicode.org,https://github.com/psi4/psi4/pull/2767,1,['feedback'],['feedback']
Usability,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401:984,simpl,simple,984,https://psicode.org,https://github.com/psi4/psi4/pull/1401,1,['simpl'],['simple']
Usability,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:502,simpl,simplified,502,https://psicode.org,https://github.com/psi4/psi4/pull/582,1,['simpl'],['simplified']
Usability,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233:450,clear,clear,450,https://psicode.org,https://github.com/psi4/psi4/pull/2233,1,['clear'],['clear']
Usability,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2557:804,clear,clear,804,https://psicode.org,https://github.com/psi4/psi4/pull/2557,1,['clear'],['clear']
Usability,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2449:481,simpl,simplifies,481,https://psicode.org,https://github.com/psi4/psi4/pull/2449,1,['simpl'],['simplifies']
Usability,"## Description; This is a simple aesthetic cleanup to make the printout more systematic. If I define the xc functional inline as e.g.; ```; my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```; the capitalization is inconsistent in the output; ```; => Exchange Functionals <=. 1.0000 XC_lda_x. => Correlation Functionals <=. 1.0000 XC_lda_c_pw; ```; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2218:26,simpl,simple,26,https://psicode.org,https://github.com/psi4/psi4/pull/2218,1,['simpl'],['simple']
Usability,"## Description; This is an _attempt_ to get the docs working again by resolving ""Undocumented input"" warnings from Sphinx. Worst case scenario, Sphinx outputs are a little shorter. Best case scenario, there was some change in Sphinx that causes crashes when this warning occurs, and we can get docs working again. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2418:81,Undo,Undocumented,81,https://psicode.org,https://github.com/psi4/psi4/pull/2418,1,['Undo'],['Undocumented']
Usability,"## Description; This is an intermediary PR to https://github.com/psi4/psi4/pull/3060. Reviews on that PR have made me reconsider some design decisions as implemented in that PR. At the same time, I want to ensure that no end user runs into any hard failures due to broken `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` combinations in v1.9. So this PR goes and simply throws exceptions for every hard failure case as logged in `test_comprehensive_jk_screening.py`. Tests are updated to match, and there's some small refactoring of how JK type + screening exceptions are handled in `jk.cc.` . ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [x] Broken combinations of `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` now throw an exception, instead of running to failure. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3081:355,simpl,simply,355,https://psicode.org,https://github.com/psi4/psi4/pull/3081,1,['simpl'],['simply']
Usability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Create `%PREFIX%\Scripts` -- `conda` stopped doing it automatically.; - [x] Don't package `bin\psi4.bat` -- `conda` learnt to recognize *Python* scripts and generate wrappers for them, i.e. `%PREFIX%\Scripts\psi4.exe`, but it is still needed for local testing.; - [x] Pin LLVM 7.0.1 -- 8.0.0 fails to build the optimized libint. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) -- https://github.com/psi4/psi4/issues/933#issuecomment-494354023. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1648:280,learn,learnt,280,https://psicode.org,https://github.com/psi4/psi4/pull/1648,1,['learn'],['learnt']
Usability,"## Description; This is take one at adding the kinetic energy, potential energy, and virial ratio as psivars, for the purposes of `cc` testing. I'm not confident on how this handles PCM, EFP, PE, and point charges, so putting it up very early for feedback. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Kinetic energy, potential energy, and virial energy are added as Psi variables for fully QM HF and CC computations. The variable names are subject to change. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Standardize `E_h` in docs. ## Checklist; - [ ] Do we want tests for the new psivars now, or in the next PR?. ## Status; - [x] Ready for review; - [x] Ready for merge - need Lori re-review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2769:247,feedback,feedback,247,https://psicode.org,https://github.com/psi4/psi4/pull/2769,1,['feedback'],['feedback']
Usability,"## Description; This pull request replaces the `DFERI` class with `DF_Helper` in DFEP2, MCSCF, SAPT-DFT, FSAPT, and USAPT. . Update 08/16/17: This pull request demolishes all traces of libthce. * **Developer Interest**; - [x] Sparsity utilization in 3-index integral transforms; - [x] Workflows optimized to fit procedure contexts; - [x] Intermediate recycling; - [x] Excellent parallel scaling; - [x] Simple UI including pythonic tensor indexing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742:402,Simpl,Simple,402,https://psicode.org,https://github.com/psi4/psi4/pull/742,1,['Simpl'],['Simple']
Usability,"## Description; This separates all the additional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965:482,learn,learned,482,https://psicode.org,https://github.com/psi4/psi4/pull/965,2,"['learn', 'simpl']","['learned', 'simply']"
Usability,"## Description; This simplifies some CAS machinery and fixes UKS GGA XC derivatives. ## Todos; * **Developer Interest**; - [x] UKS XC derivates are now (likely) correct through GGA's.; - [x] Fixes silly bug where SCF-level linear response would fail if no OEProp quantities were specified. @ashutoshvt brought this issue up.; - [x] Freezes molecular geometry when setting a variable for cartesian coordinates. @loriab please check this out. Closes #759 and closes #59. If we like this we need fix the odd zmat/cart combined cases.; - [x] Adds SAPT midbond functions for @konpat @loriab ; - [x] Fixes HF3C gradients.; - [x] Makes building molecules slightly safer, closes #765. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760:21,simpl,simplifies,21,https://psicode.org,https://github.com/psi4/psi4/pull/760,1,['simpl'],['simplifies']
Usability,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2205:42,undo,undocumented,42,https://psicode.org,https://github.com/psi4/psi4/pull/2205,2,['undo'],['undocumented']
Usability,"## Description; When running a simple RHF calculation and computing cube files, I was experiencing seg faults or orbitals that look like:; ![image](https://user-images.githubusercontent.com/9198329/38570936-0b5815e4-3cbd-11e8-93ce-f7cf4a57b46e.png); after updating my Psi for the first time in a while. After a bit of digging, I think I've tracked the problem--no more seg faults and my orbitals look like:; ![image](https://user-images.githubusercontent.com/9198329/38570995-3f7b156a-3cbd-11e8-8dbd-b8a2423033be.png). Not sure why the cubeprop test (which was passing) didn't catch this. ## Todos; - [X] Fix copy call in points.cc. ## Questions; - [x] Should I add another cubeprop test?. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/951:31,simpl,simple,31,https://psicode.org,https://github.com/psi4/psi4/pull/951,1,['simpl'],['simple']
Usability,"## Description; While looking over the Cholesky decomposition in `dfmp2` so I can steal it for `dct`, I noticed that the relevant code simplifies in 2021. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2248:135,simpl,simplifies,135,https://psicode.org,https://github.com/psi4/psi4/pull/2248,1,['simpl'],['simplifies']
Usability,"## Description; XC quadrature weights can become very small and thus their contributions are negligible. This PR introduces a cutoff for small weights. The grid points with small weights are not included in the final grid. Such a cutoff is a standard procedure in many programs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] expert option `DFT_WEIGHTS_TOLERANCE` keyword (current default `1e-14`).; - [x] small error overview added; - [x] together with pruning ca. 40% faster calculation for C60 compared to `v1.3` :-); - [x] simple test added. ## Questions; - [x] which default value? -> `1e-15` conservative or `1e-14` like in ORCA. ## Checklist; - [x] all `ctest -L dft` pass. ## Status; - [x] Ready for review; - [x] Ready for merge. ------; water dimer (RKS total energy): `PBE/aug-cc-pVTZ (99,520)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 350460 | ; | 1e-30 | 1.36e-12 | 349417 |; | 1e-25 | 1.65e-12 | 348670 |; | 1e-20 | 1.65e-12 | 346918 |; | 1e-18 | 1.68e-12 | 345747 |; | 1e-16 | 1.63e-11 | 340646 |; | 1e-15 | 2.74e-11 | 339647|; | 1e-14 | 5.73e-09 | 335089 |; | 1e-13 | 3.65e-08 | 331285 |; | 1e-12 | 3.18e-07 | 326462 |. c2 sym. C60 isomer (RKS total energy): `PBE/aug-cc-pVDZ (75,302)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 1359000 | ; | 1e-30 -| 3.17e-10| 1229846|; | 1e-25 | -5.34e-10| 1209622|; | 1e-20 | 5.94e-10 |1183674|; | 1e-18 | 5.41e-10 |1171102|; | 1e-16 | -6.25e-10 |1156776|; | 1e-15 | 2.48e-09| 1131228|; | 1e-14 | 3.54e-09| 1123018|; | 1e-13 | 1.25e-07 |1110668 |; | 1e-12 |1.07e-06 |1085824 |. -----. *further timings*; C60 fullerene (C2h) :PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; comparison to `v1.3.1`; * pruning `ROBUST`=1.33 // `1361880/1953000` grid points // dE=2E-11; * pruning `TREUTLER=1.36`// `1064520/1953000` grid points // dE=-4E-05; * pruning `ROBUST` + `screening(1e-14)` = 1.39; `1070388/195",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581:578,simpl,simple,578,https://psicode.org,https://github.com/psi4/psi4/pull/1581,1,['simpl'],['simple']
Usability,"## Description; `new SharedSomething` -> `make_shared` in DFOCC. **REVIEW ONLY SECOND COMMIT** (First commit is #2653). This is PR No. 2 in the mega-dfocc-remp series. ## Todos; - [x] This involves no substantive changes, only syntax. So no review or cursory review fine. It will clear 10k lines of clutter from further PRs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2663:280,clear,clear,280,https://psicode.org,https://github.com/psi4/psi4/pull/2663,1,['clear'],['clear']
Usability,"## Description; add function to reset options state from dictionary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] all the non-optking misc. from #1335 ; - [x] if you call `run_json` from within the same `import psi4` instance (as opposed to `subprocess` of `psi4 --json`), your options are all cleared by the call. Even if you just call something else that does the psi4 json call (like pyoptking), this happens. This is a little function that lets you continue **for global options only**. ```; # collect options; all_options = p4util.prepare_options_for_modules(changedOnly=True, commandsInsteadDict=False). # destroys options; optking_json_dict = optking.run_json_dict(optking_schema). # restore options; p4util.reset_pe_options(all_options); ```. ## Checklist; - [ ] Tests added for any new features; - [x] it worked a month ago. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1417:347,clear,cleared,347,https://psicode.org,https://github.com/psi4/psi4/pull/1417,1,['clear'],['cleared']
Usability,"## Description; set_Ca treats Cb_so_ incorrectly in the same orbs case.; I did not trigger the bug actively, but it looks like a clear bug to me. The bug won't have triggered in any meaningful code, because every algorithm queries same orbs and therefore only uses Ca_so_ if(same_orbs). However it should be fixed regardless. Please review carefully. ## Checklist; - [ ] Tests added for any new features; ctest -L quick ran through without errors. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1128:129,clear,clear,129,https://psicode.org,https://github.com/psi4/psi4/pull/1128,1,['clear'],['clear']
Usability,"## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Revamp comments of `compute_V`, `compute_Vx` up to GGA and `compute_gradient` up to LDA; - [x] I wrote equations for the UKS case and provided guidelines for how to derive the RKS from that.; - [x] The way to review this one is to ask _can I understand where these equations come from and what this code is doing_?; - [x] Independent of #2849, but I can't do any more DFT work until both that PR and this one are in. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2863:383,guid,guidelines,383,https://psicode.org,https://github.com/psi4/psi4/pull/2863,1,['guid'],['guidelines']
Usability,## Todos; - [x] bump qcel and qcng; - [x] new `using('<prog>')` API instead of `using_<prog>` from `qcng.testing`; - there's still a mix of selectors right now. will do a simplification pass after some other branches where I've edited pytests are merged in. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1767:171,simpl,simplification,171,https://psicode.org,https://github.com/psi4/psi4/pull/1767,1,['simpl'],['simplification']
Usability,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/576:540,simpl,simplified,540,https://psicode.org,https://github.com/psi4/psi4/pull/576,1,['simpl'],['simplified']
Usability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes a crash when attempting DFMP2 on systems with too few electrons to support MP2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Massively simplified the DFMP2 validation logic. ## Checklist; - [x] dfmp2 tests pass; - [x] Turned the bug report into a new test case. (Thanks for a clean one, Susi.). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2977:509,simpl,simplified,509,https://psicode.org,https://github.com/psi4/psi4/pull/2977,1,['simpl'],['simplified']
Usability,"### Upgrade Guide. * `property(...)` --> `properties(...)`; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-381256278:12,Guid,Guide,12,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-381256278,1,['Guid'],['Guide']
Usability,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:280,clear,clear,280,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,1,['clear'],['clear']
Usability,#### things we can do after dumping py27 (just to keep track). - [ ] delete all `__future__` statements; - [ ] simplify molutil and qcdb/molecule.py raw_* functions,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-362457407:111,simpl,simplify,111,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-362457407,1,['simpl'],['simplify']
Usability,"%> (-9.29%)` | :arrow_down: |; | [psi4/src/psi4/scfgrad/scf\_grad.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9zY2ZncmFkL3NjZl9ncmFkLmNj) | `95.09% <0.00%> (-1.19%)` | :arrow_down: |; | [psi4/src/psi4/liboptions/liboptions.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJvcHRpb25zL2xpYm9wdGlvbnMuY2M=) | `56.26% <0.00%> (-0.91%)` | :arrow_down: |; | [psi4/src/psi4/libmints/vector.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJtaW50cy92ZWN0b3IuY2M=) | `62.27% <0.00%> (-0.60%)` | :arrow_down: |; | [psi4/src/psi4/libfock/points.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3BvaW50cy5jYw==) | `72.24% <0.00%> (-0.27%)` | :arrow_down: |; | [psi4/src/core.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvY29yZS5jYw==) | `82.19% <0.00%> (-0.25%)` | :arrow_down: |; | [psi4/driver/driver.py](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9kcml2ZXIvZHJpdmVyLnB5) | `79.10% <0.00%> (-0.22%)` | :arrow_down: |; | [psi4/src/psi4/cc/ccenergy/ccenergy.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9jYy9jY2VuZXJneS9jY2VuZXJneS5jYw==) | `67.49% <0.00%> (-0.17%)` | :arrow_down: |; | ... and [99 more](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1443?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1443?src=pr&el=footer). Last update [e273d32...a90a350](https://codecov.io/gh/psi4/psi4/pull/1443?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-507008299:3120,learn,learn,3120,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-507008299,1,['learn'],['learn']
Usability,"'s safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a he",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:8245,simpl,simply,8245,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['simpl'],['simply']
Usability,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:5759,simpl,simpler,5759,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['simpl'],['simpler']
Usability,"('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !---",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:2021,guid,guido,2021,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['guid'],['guido']
Usability,"(r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My input files for cc-pvdz:. **Psi4:**; molecule { ; 0 1 ; N 0.000000 0.000000 0.000000; N 0.000000 0.000000 1.200000; symmetry c1 ; } ; ; set { ; basis cc-pvdz ; guess sad ; reference rhf ; scf_type pk ; root",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033:1193,simpl,simply,1193,https://psicode.org,https://github.com/psi4/psi4/issues/1033,1,['simpl'],['simply']
Usability,"(sorry for the delay, libint2 was a bit challenging to get going.) test doesn't pass locally, for a few reasons. there are a lot of comments already, so I'll list the reasons here, as well as comment on the relevant lines of code. . 1) `""return_output""` key is deprecated in current QCSchema, this makes `AtomicInput` choke. remove line 12 from the test.; 2) when inside `schema_wrapper.py` (which is inside the driver), you don't need to add the prefix `psi4`. `psi4.core.RHF` should be just `core.RHF` on line 594.; 3) question for @loriab : `json_ret` is (once the above are fixed) of type `AtomicResult`, which is not JSON serializable. this is indeed being caught by line 72 of the test (good call). is there a simple `AtomicResult` -> `Dict` translation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074:716,simpl,simple,716,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074,1,['simpl'],['simple']
Usability,(this is a copy over from #1562 so that I can replace test there.). ## Major Points of Interest. * A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135). ## Obtaining. ## New Methods. ## New Methods (beta). ## New External Libraries. - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. ## First Time Contributors. ## Additional Non-Core Contributors to v1.4. ## Performance Optimizations. ## Psi Developer Upgrade Guide. ## Developer Interests. ## Bug Fixes. ## Known Bugs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1768:662,Guid,Guide,662,https://psicode.org,https://github.com/psi4/psi4/issues/1768,1,['Guid'],['Guide']
Usability,")'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:449: undefined reference to `CheMPS2::ConvergenceScheme::setInstruction(int, int, double, int, double)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:481: undefined reference to `CheMPS2::DMRGSCFindices::DMRGSCFindices(int, int, int*, int*, int*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:482: undefined reference to `CheMPS2::DMRGSCFunitary::DMRGSCFunitary(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:484: undefined reference to `CheMPS2::DMRGSCFintegrals::DMRGSCFintegrals(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:485: undefined reference to `CheMPS2::DMRGSCFindices::getDMRGcumulative(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:488: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:488: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:489: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:489: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:490: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:490: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:491: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:491: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:492: undefined reference to `CheMPS2::DMRGSCFwtilde::DMRGSCFwtilde(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:14498,clear,clear,14498,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['clear'],['clear']
Usability,"* Correct that the `pc` basis sets in the library are the segmented forms (https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/NOTES#L84-L96) and also that Psi can't handle general contractions.; * Your `scf_xtpl_halkier_[2,3]` suggestion makes a good deal of sense from a citation and code-reuse point of view. However, IIRC the last char of the function name is used as a check against the number of basis set zetas supplied, which the `[2,3]` would break. I may no claims that `cbs()` is a shining design example. If you want to alias `corl_xtpl_halkier_2 = corl_xtpl_helgaker_2`, it's fine by me. Names should just be as simple as possible since ppl need to remember them to type into an input file.; * Quite right that the `alpha` doesn't get passed through; somehow, there's never been a demand for it. If you want to tackle passing it through, I'd be grateful. I think `cbs_alpha` for the kwarg name would be simplest and `cbs_delta_alpha` if stage (scf/corl/delta/delta2) differentiation is necessary. Can do something like `corl_alpha = kwargs.get('cbs_corl_alpha', kwargs.get('cbs_alpha', None))` before the call to the xtpl fn, then alpha=1.63 if alpha is not None within the xtpl fn.; * Your plan sounds good to me. If you would,; * Write up the docstrings along the lines of those in [this file](https://github.com/qcdb/qcdb/blob/master/qcdb/driver/cbs_helpers.py) which is where these functions are heading next. (I can't cherry-pick to retain commit info between repositories, but I can commit with co-authors, so it shows up on your GH record.); * For the extrapolation of gradients, if you're choosing between `psi4.core.Matrix` operations and `np.ndarray` operations, please prefer the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381446177:636,simpl,simple,636,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381446177,2,['simpl'],"['simple', 'simplest']"
Usability,"* I suspect that what Peter means by separate tests and docs is to issue two comments to the PR? I'm worried ppl will read the last and overlook the former. ; * Sounds like I need to make clearer that the only choice for the samples/ commit is now or later. There are no valid reasons to reject, but it you're going to be editing tests a lot, you might not want a dozen automated commits or to have your remote tampered with while local is in a vulnerable state.; * I'm with keeping the git commands as I suspect many ppl are nervous about `--rebase` and `--force` and need that reassurance. I do wish I could convey that you're done with local, no need for either path. Thanks for the comments! I'll do another round of commit-message tweaking. Eventually we can add linters by the same mechanism, so I think it pays to get clear communication and git sync habits established here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711:188,clear,clearer,188,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711,2,['clear'],"['clear', 'clearer']"
Usability,"**Describe the bug**; I wish to calculate the dipole polarizabilities using psi4 but the way to specify this is not clear. In an energy calculation, I can supply a list of scf properties in the keywords like so . ```python; from qcelemental.models.common_models import Model; from qcelemental.models import AtomicInput, Molecule; import qcengine. mol = Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""); # create the psi4 job; spec = Model(method=""HF"", basis=""3-21g""); task = AtomicInput(; molecule=mol,; driver=""energy"",; keywords={""scf_properties"": [""MBIS_CHARGES""]},; model=spec; ); result = qcengine.compute(input_data=task, raise_error=True, task_config={""ncores"":1}, program=""psi4""); print(result.dict()); ```; but the properties driver requires a more complicated definition of keywords; ```python; from qcelemental.models.common_models import Model; from qcelemental.models import AtomicInput, Molecule; import qcengine. mol = Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""); # create the psi4 job; spec = Model(method=""HF"", basis=""3-21g""); task = AtomicInput(; molecule=mol,; driver=""properties"",; keywords={""function_kwargs"": {""properties"": [""dipole_polarizabilities""]}},; model=spec; ); result = qcengine.compute(input_data=task, raise_error=True, task_config={""ncores"":1}, program=""psi4""); print(result.dict()); ```; would it be possible to make this simpler and remove the need to have `function_kwargs` or even allow the inputs to be the same as all scf properties seem to also be valid inputs for the property calculation?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3129:116,clear,clear,116,https://psicode.org,https://github.com/psi4/psi4/issues/3129,2,"['clear', 'simpl']","['clear', 'simpler']"
Usability,"**Update**. I've completely replaced the C++-based implementation of PE with a light-weight Python-side version.; Further, I had to bump pybind11 to `v.2.2.4` for the CPPE library to work correctly, and I pinned a release version of CPPE in the `ExternalProject`. So I guess this PR will be ready for merge soon. I'm going to add some simple documentation now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-506426047:335,simpl,simple,335,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-506426047,1,['simpl'],['simple']
Usability,"+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in par",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:1632,guid,guido,1632,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['guid'],['guido']
Usability,+1 for REST and JSON simplifications!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507#issuecomment-258978742:21,simpl,simplifications,21,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258978742,1,['simpl'],['simplifications']
Usability,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-200900928:53,simpl,simple,53,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928,1,['simpl'],['simple']
Usability,", ""s1"");; dfh->add_transformation(""Cas"", ""a2"", ""s"");							 |	 dfh->add_transformation(""Cbr"", ""b2"", ""r1"");; dfh->add_transformation(""Cbr"", ""b2"", ""r"");							 |	 dfh->add_transformation(""Cas"", ""a2"", ""s1"");; dfh->add_transformation(""Dar"", ""a"", ""r3"");							 |	 dfh->add_transformation(""Das"", ""a1"", ""s1"");; dfh->add_transformation(""Dbs"", ""b"", ""s3"");							 |	 dfh->add_transformation(""Dbr"", ""b1"", ""r1"");; dfh->add_transformation(""Ear"", ""a4"", ""r"");							 |	 dfh->add_transformation(""Ebs"", ""b2"", ""s1"");; dfh->add_transformation(""Ebs"", ""b4"", ""s"");							 |	 dfh->add_transformation(""Ear"", ""a2"", ""r1"");. dfh->transform();											 dfh->transform();. Cr1.reset();										 |	 C1a.reset();; Cs1.reset();										 |	 C1b.reset();; Ca2.reset();										 |	 C2a.reset();; Cb2.reset();										 |	 C2b.reset();; Cr3.reset();										 |	 Ct_Kr.reset();; Cs3.reset();										 |	 Ct_Ks.reset();; Ca4.reset();										 <; Cb4.reset();										 <; Cs.clear();												 Cs.clear();; dfh->clear_spaces();										 dfh->clear_spaces();. // => Blocking <= //										 // => Blocking <= //. long int overhead = 0L;										 long int overhead = 0L;; overhead += 2L * nT * nr * ns;									 overhead += 2L * nT * nr * ns;; overhead += 2L * na * ns + 2L * nb * nr + 2L * na * nr + 2L * nb * ns;				 overhead += 2L * na * ns + 2L * nb * nr + 2L * na * nr + 2L * nb * ns;; long int rem = doubles_ - overhead;									 long int rem = doubles_ - overhead;. if (rem < 0L) {											 if (rem < 0L) {; throw PSIEXCEPTION(""Too little static memory for DFTSAPT::mp2_terms"");				 throw PSIEXCEPTION(""Too little static memory for DFTSAPT::mp2_terms"");; }													 }. long int cost_a = 2L * nr * nQ + 2L * ns * nQ;							 long int cost_a = 2L * nr * nQ + 2L * ns * nQ;; long int max_a = rem / (2L * cost_a);								 long int max_a = rem / (2L * cost_a);; long int max_b = max_a;										 long int max_b = max_a;; max_a = (max_a > na ? na : max_a);									 max_a = (max_a > na ? na : max_a);; max_b = (max_b > nb ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790:20499,clear,clear,20499,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790,1,['clear'],['clear']
Usability,", but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think of?; - [ ] Currently, X and C functionals can be accessed with `x_functionals()` and `c_functionals()`. Neither of these return XC functionals as these were previously included in C functionals. These simply create a new filtered vector, which isn't efficient or clean. Perhaps these should be removed in favor of filtering from the Python side?; - [ ] GRAC functionals are still split into X and C functionals. The effect of my changes on this needs to be tested, and perhaps the GRAC functionals should be unified. ## Checklist; - [ ] Remove all `TODO`s corresponding to the above questions; - [ ] Double check that I haven't used `x_functionals()` anywhere that I might want XC functionals -- See question 2; - [ ] Double check that I haven't broken GRAC; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I have run all DFT tests on my system, but perhaps you would want to confirm?; - [ ] Edit the tests that use `add_x_functionals` and `add_c_functionals`. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:2202,simpl,simply,2202,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['simpl'],['simply']
Usability,", xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults.; > ; > ```; > ==> E20 Dispersion (MP2) <==; > ; > ; > Disp20 (MP2) -0.37881730 [mEh]; > Exch-Disp20,u 0.02037338 [mEh]; > Scaling Scheme: Disp; > Scaling Factor: 0.707; > ; > SAPT(DFT) Results; > ---------------------------------------------------------------------------------------------------------; > Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > ```. Added the !dHF cases in `sapt-dft1` and `sapt-dft2`. For `sapt-dft-api`, the dHF feature is intrinsically unsupported, because the dHF calculation is not fully contained in the sapt_dft() call; a part of it is in the run_sapt_dft() call. . Added the scaling scheme/factor output lines in the output f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:3316,clear,clear,3316,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['clear'],['clear']
Usability,"- [x] integrate proper (non-WSL) Windows downloads; - [ ] integrate some options like base env/conda env and how-to-update instructions into guide so can retire reST docs; - [ ] reST docs should become like traditional `INSTALL` documents to be read only by ppl who want to build psi from source with their choice of compilers, etc. and who relish details, not by everyday user or dev.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1840:141,guid,guide,141,https://psicode.org,https://github.com/psi4/psi4/issues/1840,1,['guid'],['guide']
Usability,"- `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_C",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:1205,simpl,simpler,1205,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['simpl'],['simpler']
Usability,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:2605,clear,clearly,2605,https://psicode.org,https://github.com/psi4/psi4/issues/1126,2,"['clear', 'simpl']","['clearly', 'simplicity']"
Usability,". The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/psi4/wiki/BestPractices) wiki. There is a lot of copy/paste going on in the preamble of source files. You really should be assembling you includes/typedefs/etc. on a file by file basis to ensure you know what you are including, where it is coming from, and most importantly are only including what you need. The reason the build is so much faster is that I have trimmed many of the unneeded includes.; ### Unified Header Inclusions. All include files are (or should be) relative to root (In practice I missed some, but they are",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:4268,clear,clear,4268,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['clear'],['clear']
Usability,". may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and running tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:1395,clear,clear,1395,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,1,['clear'],['clear']
Usability,.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 hb491cac_4 ; mpc 1.0.1 0 ; mpfr 3.1.2 0 ; nb_conda_kernels 2.1.0 py36_0 conda-forge; nbconvert 5.3.1 py_1 conda-forge; nbformat 4.4.0 py36_0 conda-forge; ncurses 5.9 10 conda-forge; notebook 5.2.1 py36_2 conda-forge; numpy 1.13.3 py36ha12f23b_0 ; openssl 1.0.2l 0 conda-forge; pandoc 2.0.0.1 1 conda-forge; pandocfilters 1.4.1 py36_0 conda-forge; pcmsolver 1.1.10 py36_1 psi4/label/dev; pcre 8.41 hc27e229_1 ; pexpect 4.2.1 py36_0 conda-forge; pickleshare 0.7.4 py36_0 conda-forge; pip 9.0.1 py36_0 conda-forge; prompt_toolkit 1.0.15 py36_0 conda-forge; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; psi4-rt 1.2a1.dev3 py36_0 psi4/label/dev; ptyprocess 0.5.2 py36_0 conda-forge; py 1.5.2 py_0 conda-forge; pygments 2.2.0 py36_0 conda-forge; pyqt 5.6.0 py36h0386399_5 ; pytest 3.2.5 py36_0 conda-forge; python 3.6.3 1 conda-forge; python-dateutil 2.6.1 py36_0 conda-forge; pyzmq 16.0.2 py36_2 conda-forge; qt 5.6.2 5 ; qtconsole 4.3.1 py36h8f73b5b_0 ; readline 6.2 0 conda-forge; setuptools 36.6.0 py36_1 conda-forge; simint 0.7 0 psi4; simplegeneric 0.8.1 py36_0 conda-forge; sip 4.18.1 py36h51ed4ed_2 ; six 1.11.0 py36_1 conda-forge; sqlite 3.13.0 1 conda-forge; terminado 0.6 py36_0 conda-forge; testpath 0.3.1 py36_0 conda-forge; tk 8.5.19 2 conda-forge; tornado 4.5.2 py36_0 conda-forge; traitlets 4.3.2 py36_0 conda-forge; v2rdm_casscf 0.4 py36_1 psi4/label/dev; wcwidth 0.1.7 py36_0 conda-forge; webencodings 0.5 py36_0 conda-forge; wheel 0.30.0 py_1 conda-forge; widgetsnbextension 3.0.2 py36hd01bb71_1 ; xz 5.2.3 0 conda-forge; zeromq 4.2.1 1 conda-forge; zlib 1.2.11 0 conda-forge; ```; Do you have any thoughts?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345317385:3084,simpl,simplegeneric,3084,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385,1,['simpl'],['simplegeneric']
Usability,"/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !---------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:2180,guid,guido,2180,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['guid'],['guido']
Usability,"/dmrg/dmrgscf.cc:488: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:488: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:489: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:489: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:490: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:490: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:491: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:491: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:492: undefined reference to `CheMPS2::DMRGSCFwtilde::DMRGSCFwtilde(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:517: undefined reference to `CheMPS2::Hamiltonian::Hamiltonian(int, int, int const*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:523: undefined reference to `CheMPS2::Problem::Problem(CheMPS2::Hamiltonian const*, int, int, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:524: undefined reference to `CheMPS2::Problem::checkConsistency() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:525: undefined reference to `CheMPS2::Problem::SetupReorderD2h()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:537: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:544: undefined reference to `CheMPS2::DMRGSCFindices::getNirreps() const'; /home/seba/softw",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:15290,clear,clear,15290,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['clear'],['clear']
Usability,"/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating whether this is a consequence of mixing Cartesian and ZMAT coordinates.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325:1811,simpl,simplified,1811,https://psicode.org,https://github.com/psi4/psi4/issues/1325,2,['simpl'],['simplified']
Usability,"0/sqrt(S)) * S * diag(1.0/sqrt(S))`; 2. form `Xnorm` for `Snorm`; 3. form `X = diag(1.0/sqrt(S)) * Xnorm`. Trying to do step 3 in a way that maintains symmetricity of `X` would require much deeper linear algebra, as you need to know how the eigenvalues and eigenvectors change when you balance S to have a unit diagonal. (It may be that some old linear algebra textbooks show how this is done.). Anyway, IMHO there's nothing wrong with having an asymmetric `X`: if you have a linearly dependent basis, this is bound to happen, and so there's no reason to assume `X` is symmetric. All that matters in the end is the number of molecular orbitals you get from `X`, since the SCF (or even the core Hamiltonian) will give you a basis that is different from `X`. The asymmetric `X` revealed a problem in the initialization of the ROHF code, which is now fixed. ROHF should now also work for the case of canonical orthogonalization, I'm not sure why there ever was a stopping clause. A problem was also found in CUHF, which wasn't tested before. For some reason doing the natural orbitals in the alpha orbital basis made the calculation unstable; simply changing to using `X` to find the natural orbitals suddenly fixed everything. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] ROHF orbital guess read-in works; - [x] CUHF orbital guess read-in works; - [x] Orbital orthonormality is tested in the calculation; if the off-diagonal elements of the MO overlap sum to >= 1e-10 then the calculation crashes. ## Questions; - [x] Is this necessary? (It's not, and is removed by the present PR) https://github.com/psi4/psi4/blob/c871e6cc2bff3e4252a19a82c5b49b6e6c6e05de/psi4/src/psi4/libscf_solver/rohf.cc#L113 . ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1781:1575,simpl,simply,1575,https://psicode.org,https://github.com/psi4/psi4/pull/1781,1,['simpl'],['simply']
Usability,"0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kwnames=kwnames@entry=0x0,; kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x00007ffff7a02f4b in PyEval_EvalCode (co=co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8) at Python/ceval.c:524; #17 0x00007ffff7a369e2 in run_mod (arena=0x7ffff7fc42d0, flags=0x7fffffffcf50, locals=0x7ffff7ecd1f8, globals=0x7ffff7ecd1f8, filename=0x7fffeffc0870, mod=0x6440f0) at Python/pythonrun.c:1035; #18 PyRun_FileExFlags (fp=fp@entry=0x67eb60, filename_str=filename_str@entry=0x7ffff7f89110 ""simple.2.py"", start=start@entry=257, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, closeit=closeit@entry=1,; flags=0x7fffffffcf50) at Python/pythonrun.c:988; #19 0x00007ffff7a36b55 in PyRun_SimpleFileExFlags (fp=fp@entry=0x67eb60, filename=<optimized out>, closeit=closeit@entry=1, flags=flags@entry=0x7fffffffcf50) at Python/pythonrun.c:429; #20 0x00007ffff7a36ff3 in PyRun_AnyFileExFlags (fp=fp@entry=0x67eb60, filename=<optimized out>, closeit=closeit@entry=1, flags=flags@entry=0x7fffffffcf50) at Python/pythonrun.c:84; #21 0x00007ffff7a58d27 in pymain_run_file (p_cf=0x7fffffffcf50, filename=0x603520 L""simple.2.py"", fp=0x67eb60) at Modules/main.c:427; #22 pymain_run_filename (cf=0x7fffffffcf50, pymain=0x7fffffffd030) at Modules/main.c:1627; #23 pymain_run_python (pymain=0x7fffffffd030) at Modules/main.c:2877; #24 pymain_main (pymain=pymain@entry=0x7fffffffd030) at Modules/main.c:3038; #25 0x00007ffff7a58fab in _Py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:5377,simpl,simple,5377,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,1,['simpl'],['simple']
Usability,"1 | 2.763; H2O | 89 | 157 | 198 | 2.13 | 2.282; HF | 71 | 116 | 152 | 1.18 | 2.128. ### VTune Analysis for MP2-F12/3C(FIX); Memory consumption is most egregious in the `form_teints` where the allocation of the AO ERI is quite large with the largest AO being (NOBS, NOBS, NRI, NRI) e.g. CH4 would be (125, 125, 364, 364); ![image](https://github.com/psi4/psi4/assets/52012150/7483bfd5-b2ec-4a32-a5a8-1f905d745054). CPU Time all goes back to the `form_teints` function and specifically the `two_body_ao_computer`; ![image](https://github.com/psi4/psi4/assets/52012150/07eedb8d-5e89-4614-a4f3-315a7f669f27). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] MP2-F12 single-point energy. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Computes in-core MP2-F12/3C(FIX) energy; - [X] Computes disk MP2-F12/3C(FIX) energy; - [X] Computes in-core DF-MP2-F12/3C(FIX) energy; - [X] Computes disk DF-MP2-F12/3C(FIX) energy. ## Questions; - [ ] I am unsure if I have done the disk implementation correctly.; - [ ] The max RAM usage for the conventional is quite large. I could use some suggestions on how to get this down.; - [ ] The conventional MP2-F12/3C(FIX) is not as usable as I would like with the high max RAM usage and slow integral computation. DF-MP2-F12/3C(FIX) is recommended over the conventional.; - [ ] This version of DF-MP2-F12/3C(FIX) uses a more robust scheme than ORCA and MPQC for the density-fitting. . ## Checklist; - [x] Documentation; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110:3354,usab,usable,3354,https://psicode.org,https://github.com/psi4/psi4/pull/3110,1,['usab'],['usable']
Usability,"1) Cool. 2) I discussed this with @lothian, who seemed fine with it (it involves no; changes to his code :) So, I think we're settled unless anyone else has; objections. I agree there needs to be some thought about returning SO vs MO densities; --- different quantities will be needed in different circumstances. Your; proposed solution seems reasonable. Probably we should review all the; cases where densities are wanted. On Sat, Nov 12, 2016 at 10:34 AM, Daniel Smith notifications@github.com; wrote:. > @CDSherrill https://github.com/CDSherrill; > 1) It should always be in the SO basis. Apologies this was answered; > elsewhere.; > ; > 2) If we are set on this on I can patch up the CI code and add patch; > notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state; > averaged density depending on user specifications.; > ; > We also need to think about the psi4/driver/driver.py:molden function and; > #504 https://github.com/psi4/psi4/issues/504. properties is now; > guaranteed to return an updated SO basis density; however, the current; > molden function requires a MO density. We could have a simple switch on; > that function that indices if the incoming density is in the AO or MO basis; > and transform accordingly.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260128691, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnGO262FwLyE6w4D5rdgQvLpsDC3ks5q9dxpgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260131914:1122,simpl,simple,1122,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260131914,1,['simpl'],['simple']
Usability,"1. I got this idea when talking to a graduate student who works on orbital solvers the other week. I can do a quick search for anything more ""standard,"" but I'm not expecting it to find anything.; 2. The energy tolerance is problematic in practice. A lot of the instabilities that I've seen are related to ghost atoms involving SAPT, which are prone to very small instabilities.; 3. I don't understand why your procedure is easier to implement. The fourth order could be tricky, but the third order is trivial. We have the first zero, first, and second order terms analytically from the original instability analysis, and we can fit the third order from the ""new SCF energy"" by a simple algebraic expression. Finding the stationary points is equivalent to factoring f'(x), and we already know (x-0) is one of the roots. It's an easy problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926:680,simpl,simple,680,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926,1,['simpl'],['simple']
Usability,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:270,learn,learning,270,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056,2,"['learn', 'simpl']","['learning', 'simpler']"
Usability,"15449; H -0.000000000000 0.769857650400 0.607312215449; }. dft_grids = [ (75, 302), (90, 434), (99, 590) ]; for radial,spherical in dft_grids:; set {; scf_type pk; d_convergence 12; #dft_v2_rho_cutoff 1e-16; dft_spherical_points $spherical; dft_radial_points $radial; points 5; disp_size 1e-4; g_convergence gau_tight; }. method = 'SVWN/def2-svp'. optimize(method); Eener, Ewfn = freq(method, dertype=0, return_wfn=True); Egrad, Gwfn = freq(method, dertype=1, return_wfn=True); Ehess, Hwfn = freq(method, dertype=2, return_wfn=True). Ewfn.frequencies().print_out(); Gwfn.frequencies().print_out(); Hwfn.frequencies().print_out(); ```; This tests the frequencies by 5 point finite differences of energies (which includes full grid weight derivatives, as a result of the displacements each rebuilding their grid), by gradients (which includes only the first order grid weight derivative term) and by analytic Hessians (which has no grid weight derivative term coded up). The results below confirm that the implementation is now correct (well, for water at least):. |Grid | FD type | mode 1 | mode 2 | mode 3 |; |--------|----------|-----------|-----------|----------|; | | Ener | 1559.6255 | 3735.3708 | 3841.9257| ; | 75,302 | Grad | 1560.1514 | 3735.4746 | 3841.8555| ; | | Hess | 1560.1712 | 3735.5120 | 3841.8152| ; | | | | | | ; | | Ener | 1560.2564 | 3735.4425 | 3841.8996| ; | 90,434 | Grad | 1560.1980 | 3735.4777 | 3841.7622| ; | | Hess | 1560.2152 | 3735.5349 | 3841.8257| ; | | | | | |; | | Ener | 1559.9800 | 3735.4104 | 3841.5086| ; | 99,590 | Grad | 1560.2142 | 3735.4799 | 3841.7807| ; | | Hess | 1560.2242 | 3735.5373 | 3841.8279| . It's really not worth adding the grid weight derivatives, on the basis of this simple test. We just need to ensure that users don't run analytic Hessians with tiny grids. There could be a problem with noise if people want to do things like quartic force fields from analytic second derivatives, but those kinds of jobs should be using huge grids anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914:1951,simpl,simple,1951,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914,1,['simpl'],['simple']
Usability,"16279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:1833,guid,guido,1833,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['guid'],['guido']
Usability,39h2804cbe_4 conda-forge; pytables 3.8.0 py39h0da393b_2 conda-forge; python 3.9.10 h38ef502_2_cpython conda-forge; python-constraint 1.4.0 py_0 conda-forge; python-dateutil 2.8.2 pyhd8ed1ab_0 conda-forge; python_abi 3.9 2_cp39 conda-forge; pytraj 2.0.6 pypi_0 pypi; pytz 2021.3 pyhd8ed1ab_0 conda-forge; pyyaml 6.0 py39h5161555_3 conda-forge; pyzmq 22.3.0 py39h02c6a76_1 conda-forge; qcelemental 0.26.0 pyhd8ed1ab_0 conda-forge; qcengine 0.28.1 pyhd8ed1ab_0 conda-forge; qcfractal 0.50 pyh707e725_0 conda-forge; qcfractalcompute 0.50 pyhd8ed1ab_0 conda-forge; qcportal 0.50 pyh7448d05_0 conda-forge; rdkit 2023.03.1 py39hcba3512_0 conda-forge; re2 2023.02.01 hb7217d7_0 conda-forge; readline 8.2 h92ec313_1 conda-forge; reportlab 3.5.68 py39h3fc2f6e_1 conda-forge; requests 2.27.1 pyhd8ed1ab_0 conda-forge; sander 22.0 pypi_0 pypi; scipy 1.9.0 py39h14896cb_0 conda-forge; send2trash 1.8.0 pyhd8ed1ab_0 conda-forge; setproctitle 1.3.2 py39h02fc5c5_1 conda-forge; setuptools 60.9.3 py39h2804cbe_0 conda-forge; simple-dftd3 0.7.0 h702fe85_2 conda-forge; six 1.16.0 pyh6c4a22f_0 conda-forge; smirnoff99frosst 1.1.0 pyh44b312d_0 conda-forge; snappy 1.1.10 h17c5cce_0 conda-forge; sqlalchemy 2.0.21 py39h0f82c59_0 conda-forge; sqlite 3.37.0 h72a2b83_0 conda-forge; stack_data 0.2.0 pyhd8ed1ab_0 conda-forge; tabulate 0.9.0 pyhd8ed1ab_1 conda-forge; tblib 2.0.0 pyhd8ed1ab_0 conda-forge; tblite 0.3.0 h4f5cce7_0 conda-forge; tenacity 8.0.1 pyhd8ed1ab_0 conda-forge; terminado 0.13.1 py39h2804cbe_0 conda-forge; testpath 0.6.0 pyhd8ed1ab_0 conda-forge; tk 8.6.12 he1e0b03_0 conda-forge; toml-f 0.3.1 he18974e_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; tornado 6.1 py39h5161555_2 conda-forge; torsiondrive 1.1.0 pyhd8ed1ab_0 conda-forge; tqdm 4.63.0 pyhd8ed1ab_0 conda-forge; traitlets 5.1.1 pyhd8ed1ab_0 conda-forge; typed-ast 1.5.2 py39h5161555_0 conda-forge; typeguard 2.13.3 pyhd8ed1ab_0 conda-forge; typing-extensions 4.8.0 hd8ed1ab_0 conda-forge; typing_extensions 4.8.0 pyha770c72_0 conda-forg,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:12133,simpl,simple-,12133,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['simpl'],['simple-']
Usability,"9381335 0.00000000000000 -0.00080744525748; 6 -0.00150497205043 -0.00584776113735 -0.00140352222961; 7 -0.00150497205043 0.00584776113735 -0.00140352222961; 8 0.00150497205043 0.00584776113735 -0.00140352222961; 9 0.00150497205043 -0.00584776113735 -0.00140352222961. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759155743061; 2 0.00000000000000 0.00000000000000 0.01575348711316; 3 0.00000000000000 0.00000000000000 -0.01604218334710; 4 -0.00080458046709 0.00000000000000 -0.00083578684600; 5 0.00080458046709 0.00000000000000 -0.00083578684600; 6 -0.00151233457098 -0.00586107718524 -0.00140782187617; 7 -0.00151233457098 0.00586107718524 -0.00140782187617; 8 0.00151233457098 0.00586107718524 -0.00140782187617; 9 0.00151233457098 -0.00586107718524 -0.00140782187617; ```; By disabling [this safety check](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L185) I can make the DF version run, which is clearly wrong:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 -0.34802063969605; 2 0.00000000000000 -0.00000000000000 0.51455817020357; 3 0.00000000000000 0.00000000000000 0.04263207395510; 4 -0.03687141420968 -0.00000000000000 -0.01196133113197; 5 0.03687141420968 0.00000000000000 -0.01196133113197; 6 -0.06383887601370 -0.11505211473982 -0.04636560808797; 7 -0.06383887601370 0.11505211473982 -0.04636560808797; 8 0.06383887601370 0.11505211473982 -0.04636560808797; 9 0.06383887601370 -0.11505211473982 -0.04636560808797. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759612379921; 2 0.00000000000000 0.00000000000000 0.01575853518631; 3 0.00000000000000 0.00000000000000 -0.01609636966124; 4 -0.00080665975793 0.00000000000000 -0.00081633836046; 5 0.00080665975793 0.00000000000000 -0.00081633836046; 6 -0.00151005119180 -0.00585353047813 -0.00140640315084; 7 -0.00151005119180 0.0058535304781",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351422094:1475,clear,clearly,1475,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351422094,1,['clear'],['clearly']
Usability,"; File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !--------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:2321,guid,guido,2321,https://psicode.org,https://github.com/psi4/psi4/issues/1996,2,['guid'],['guido']
Usability,"========= warnings summary =============================================================================; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:599: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:701: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 2700 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 1773 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 92 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 2330 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 2270 warnings; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the releas",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:9675,guid,guidance,9675,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['guid'],['guidance']
Usability,"============================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; =================================== 3950 deselected, 5 warnings, 1 error in 20.79s ====================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:5441,guid,guidance,5441,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,['guid'],['guidance']
Usability,"> 1. Why does the dispersion string need to be expanded? Not opposed just curious. I'm not sure how to handle the dispersion part, actually. It makes sense to keep current ``dashparams``, as the dict-based method seems inconvenient (but not impossible) for implementing functionals that require a lot of tweaks, such as `PWPB95`, and the old method uses dashparams. On the other hand, it makes sense to have the definition of a functional in one place - the dictionary - as opposed to splitting it across files. That means having the dashparams in the functional dictionary, and passing them into `EmpiricalDispersion`. > 2. Im not a fan of the transparent assumptions of what HF alpha and MP2 components should be. Would prefer if we specific them explicitly in other parts of the spec. The spec could (some might say should) simply be ""use LibXC defaults, unless overridden"". > In addition, what happens if someone does a silly operation like mixing multiple HYB functionals?. Fair point. If somebody were to do:; ```; junk = {; ""x_functionals"": {{""HYB_MGGA_X_MN15"": {}, ""HYB_MGGA_M06"": {}}; ...; }; ```; we should probably catch that and crash gracefully, as it's not clear which libxc-provided `ALPHA` should be used for `X_HF`. However, if somebody wants to do something like:. ```; junk = {; ""x_functionals"": {{""HYB_MGGA_X_MN15"": {""alpha"": 0.5}, ""HYB_MGGA_M06"": {""alpha"":0.5}, ""X_HF"":{""alpha"": 0.27}}; ...; }; ```; that should be allowed, and is quite clear: 50% MN15 GGA exchange + 50% M06 GGA exchange + 27% HF exchange. Perhaps we could simply enforce that if ``len(x_functionals) >= 2`` then ``""X_HF"" in x_functionals`` must be true. I'm not sure how this works with range separation. It should be, in theory, possible to combine two range-separated hybrids, with different ``OMEGA``'s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920#issuecomment-366177398:827,simpl,simply,827,https://psicode.org,https://github.com/psi4/psi4/issues/920#issuecomment-366177398,4,"['clear', 'simpl']","['clear', 'simply']"
Usability,"> 2. On the linked issue ([Wrong guess_mix when guess=sad #2410](https://github.com/psi4/psi4/issues/2410)), you said this is a ""tentative"" fix. Does that mean anything besides that the PR isn't accepted yet?. It means I was able to quickly identify the issue and throw together a simple fix, but not to test it ;) I still don't have a working Psi4 compile environment due to the libint2 incompatibility. Once that gets fixed, I'll have to push to get newer versions of Psi4 to compile again in Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2411#issuecomment-1016567123:281,simpl,simple,281,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016567123,1,['simpl'],['simple']
Usability,"> ; > ; > I hope that changes or that at least people can find workarounds. Apple's advertising seems mostly geared towards video editors and photographers, but the chips have great potential for certain scientific computing workloads. I was somewhat interested in the new M1 Max, due to the very high memory BW (~8 channels of DDR4), but that was soon tempered by the discovery that the CPU cores cannot use more than [half of the total BW](https://www.anandtech.com/show/17024/apple-m1-max-performance-review/2) due to some, yet again undocumented, internal bus bottleneck.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956443455:537,undo,undocumented,537,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956443455,1,['undo'],['undocumented']
Usability,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:160,guid,guide,160,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342,1,['guid'],['guide']
Usability,"> ; > ; > One thing I noticed while investigating this a bit: If you run the command `np.show_config()`, you can see that the Numpy binaries from Conda-forge and pypi are built using different BLAS and LAPACK. The Numpy binary on pypi is built using `openblas` and the Conda-forge binary is built using something called `cblas`. I'm not sure what `cblas` is, but this build seems to be much faster for some numpy functionality than the `openblas` build on pypi. Just something interesting that might be of use to M1 users.; > ; > It looks like cblas might be Apple's own BLAS implementation:https://developer.apple.com/documentation/accelerate/blas, but I'm not really sure if this is the case or how it relates to the Accelerate framework. This is beyond my knowledge base. Perhaps someone else knows and can elaborate. `CBLAS` is typically just a wrapper written in C, to provide a ""least common denominator"" interface for the Fortran subroutines making up a typical BLAS implementation. The computational backend beyond that `CBLAS` could be pretty much anything, including OpenBLAS. Apple does not seems to be interested in enabling open source developers to utilize their silicon, to the point where people need to reverse engineer their libraries to find out what [undocumented instructions they use](https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f) to perform fast math operations. I find that rather anti-consumer and anti-competitive, to put it mildly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876:1271,undo,undocumented,1271,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876,1,['undo'],['undocumented']
Usability,"> ; > I was wondering, since you are modifying the class, would you be able to implement these changes as well?. I could look into it, but I have other priorities for the next couple of months. I am also yet to receive any feedback/reviews on the changes pushed so far, so I would prefer to have the commits of this PR to be about refactoring only.; I think adding new features would be better done in a separate PR, after this is merged or rejected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560:223,feedback,feedback,223,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560,1,['feedback'],['feedback']
Usability,"> > > An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?; > ; > > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.; > ; > I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt. OK, you changed my hasty mind on that. What concerns me is that the user may, in some instances, not realize that the default active molecule is the one that optking is acting on and changing. But the upside convenience wins, I agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584:424,intuit,intuitive,424,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584,1,['intuit'],['intuitive']
Usability,"> > @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > > ; > > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place.; > ; > @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already."". Looks like hacky code. I'll send a patch",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633:523,simpl,simple,523,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633,1,['simpl'],['simple']
Usability,"> > @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play.; > ; > Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache.; > ; > https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477; > ; > The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling. That is helpful. I got it in the end by taking the `psi4-path-advisor cmake` command without evaluation, modifying it, and running that. I still think that being explicit in the debug build tips is for the best, given the developer demographic for Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171:57,clear,clear,57,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171,2,['clear'],['clear']
Usability,"> > All right, I disabled SCF_SUBTYPE for SAD guess runs! I went with a pretty basic solution - just adjust the Python driver and force-set SCF_SUBTYPE=AUTO for the guess part of the run. Let me know if this is an acceptable solution.; > ; > Ah, turning it off py-side is simple and great, but there's a better way. The minor trouble with your approach is that it's restoring the value but not the status of whether the user has set it. That latter piece of info is often used to decide whether an option is default or not or whether, once control has returned to the user, to write the option explicitly in subsequent calcs. The usual remedy that you'll see scattered in proc.py are optstash=OptionsState([list o options]) ... do work ... optstash.restore(). So I'd suggest using that or the content manager like https://github.com/psi4/psi4/pull/2926/files#diff-2aec42d854b50db94cde6a3f9d3c665eed11e8f1f083040807d9e4dd4696895aL67-L68 `[""SCF"", ""SCF_SUBTYPE""]` for ""local"" setting. Done and done! This is all great knowledge; thank you!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1524072691:272,simpl,simple,272,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1524072691,1,['simpl'],['simple']
Usability,"> > Are you also zeroing out the diagonal for FMI in the UHF case? I looks like only the Fmi matrix is cleared there.; > ; > Yes, on lines 75-77. Look for the little patch of green _between_ the red. OK, now I see what you're doing. My only suggestion is that you modify the comment under RHF to read:. // This is because the amplitude update in RHF uses the full residual while the ROHF and UHF updates separate out the diagonal contributions from the Fock matrix [cf. Eqs. (1) and (2) of Stanton et al., J. Chem. Phys. 94, 4334-4345 (1991)].",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2703#issuecomment-1227100111:103,clear,cleared,103,https://psicode.org,https://github.com/psi4/psi4/pull/2703#issuecomment-1227100111,1,['clear'],['cleared']
Usability,"> > Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky.; > ; > Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues. That's a good start. To make it more stringent, could somebody do this exercise in QChem and report both the system and the instability eigenvalues? if Psi can reproduce those results, I'll be thrilled. (Please do the same for HF as well, so we can catch prefactor differences between Psi and QChem.) I'd do this myself, but Emory doesn't have QChem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696:123,Simpl,Simple,123,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696,1,['Simpl'],['Simple']
Usability,"> > FWIW, it would be better to have all these functions simply be `atom_at_position`, but that can be for another day.; > ; > Indeed, but I think they are used at a couple of places. My first instinct was to turn it into a function template, but I think these fns are exported to Pyside via pybind right? Not sure how that would handle a C++ template. Templating is overcomplicated. Change the function names where they are called, C-side. In pybind, you specify which function you want to export with a typedef. For example, here is how we specify which of the three signatures for `Localizer::build` to export.; ```; typedef std::shared_ptr<Localizer> (*localizer_with_type)(const std::string&, std::shared_ptr<BasisSet>,; std::shared_ptr<Matrix>);. py::class_<Localizer, std::shared_ptr<Localizer>>(m, ""Localizer"",; ""Class containing orbital localization procedures""); .def_static(""build"", localizer_with_type(&Localizer::build), ""Build the localization scheme"");; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2464#issuecomment-1063057059:57,simpl,simply,57,https://psicode.org,https://github.com/psi4/psi4/pull/2464#issuecomment-1063057059,1,['simpl'],['simply']
Usability,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:342,feedback,feedback,342,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815,1,['feedback'],['feedback']
Usability,"> > So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however.; > ; > > Thoughts?; > ; > Unless the DFJCOSK changes would undo much of this PR, I think a follow-up PR would be best. DFJCOSK won't explicitly undo most of this PR, nicely enough, though it will require some changes to how the computed_shells member functions/variables are handled. Regardless, it won't lead to significant changes in test_erisieve, so a separate PR should work fine. And ultimately, the big point of this PR is to allow testing of density screening in test_erisieve without needing to directly construct and use separate TwoBodyAOInt objects, since the plan is to remove density screening from TwoBodyAOInt entirely. . Thank you for your feedback!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152705815:535,undo,undo,535,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152705815,3,"['feedback', 'undo']","['feedback', 'undo']"
Usability,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:555,clear,clear,555,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129,1,['clear'],['clear']
Usability,"> > Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > > ; > ; > > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > ; > > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > > ; > ; > > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).; > ; > ; > ; > Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR. I could also do both 1 and 2 in this PR, if that makes things easier. Which do y'all prefer (2 then 1, or 1 and 2) @zachglick @JonathonMisiewicz ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035:629,clear,cleared,629,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035,1,['clear'],['cleared']
Usability,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:742,learn,learning,742,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276,2,"['learn', 'simpl']","['learning', 'simply']"
Usability,> @ffangliu What scheme does Terachem use to converge their finite temperature computations?; I think it's the simple scheme with damping,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-497970273:111,simpl,simple,111,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-497970273,1,['simpl'],['simple']
Usability,"> @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > ; > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place. @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697:508,simpl,simple,508,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697,1,['simpl'],['simple']
Usability,"> @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play. Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache. . https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477. The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095:55,clear,clear,55,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095,2,['clear'],['clear']
Usability,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:270,clear,clear,270,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379,1,['clear'],['clear']
Usability,"> After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. Whether ""changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR"" is a definition game. Is the goal of this PR ""implement a linK derivative with atom-blocking"" or ""implement the most efficient linK derivative we can think of""? If it's the former, then it's out-of-scope, and if it's the latter, then it's in-scope. Since you are not implementing the Ochsenfeld algorithm but a derivative thereof, give me a pseudocode version of your linK derivative that tells me _exactly_ what the loops are, what's getting parallelized, whether your screening is atom-based or shell-based, and what integrals you're computing based on your screening. My chief concern is this: It looks to me like you are computing integrals that you already know are insignificant (if the shell pair was screened out, but some other shell pair on the atom pair was not) because you can parallelize more efficiently. Parallelization efficiency is not the primary metric we care about, runtime is. It isn't clear to me how giving ourselves extra work is reducing runtime. If it's more efficient to screen out irrelevant shell pairs but distribute all relevant shell pairs between two atoms to a single thread, go for it: we're not computing extra integrals in that case. But if we distribute all shell pairs between relevant atoms to a single thread... that could be a lot of extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496:1391,clear,clear,1391,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496,1,['clear'],['clear']
Usability,"> All right, I disabled SCF_SUBTYPE for SAD guess runs! I went with a pretty basic solution - just adjust the Python driver and force-set SCF_SUBTYPE=AUTO for the guess part of the run. Let me know if this is an acceptable solution. Ah, turning it off py-side is simple and great, but there's a better way. The minor trouble with your approach is that it's restoring the value but not the status of whether the user has set it. That latter piece of info is often used to decide whether an option is default or not or whether, once control has returned to the user, to write the option explicitly in subsequent calcs. The usual remedy that you'll see scattered in proc.py are optstash=OptionsState([list o options]) ... do work ... optstash.restore(). So I'd suggest using that or the content manager like https://github.com/psi4/psi4/pull/2926/files#diff-2aec42d854b50db94cde6a3f9d3c665eed11e8f1f083040807d9e4dd4696895aL67-L68 `[""SCF"", ""SCF_SUBTYPE""]` for ""local"" setting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1524010298:263,simpl,simple,263,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1524010298,1,['simpl'],['simple']
Usability,"> Are the `Grid` classes used for something other than printing?. `Grid` classes are *only* used for printing. Hence why I moved things to skinnier structs, so that it's clear to future devs that ""nothing goes here but storage"" (and maybe even with a big comment about ""THIS CONTENT IS NOT REFERENCED EXCEPT BY A PRINT"". There's no reasonable way I can see to migrate this into the `MassPoints`. I've been quiet b/c I am hoping the other primary devs will chime in here -- I'm not sure how to move forwards given conflicting desires (and given that the immediate urgency of ""this causes program hangs"" has been fixed).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1292378009:170,clear,clear,170,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1292378009,1,['clear'],['clear']
Usability,"> Are you also zeroing out the diagonal for FMI in the UHF case? I looks like only the Fmi matrix is cleared there. Yes, on lines 75-77. Look for the little patch of green _between_ the red.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2703#issuecomment-1227086053:101,clear,cleared,101,https://psicode.org,https://github.com/psi4/psi4/pull/2703#issuecomment-1227086053,1,['clear'],['cleared']
Usability,"> Are you building Psi4 for packaging or for single-deployment use?. For packaging. > Psi4 does check for external packages . If does, but it falls back on the bundled version when it doesn't find the external package for some reason when it actually exists. There should be a clear way to require to use external packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715965:277,clear,clear,277,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715965,1,['clear'],['clear']
Usability,"> Can I get an estimate on when this will be merged in, so I know when this will no longer be blocking #1872?. @JonathonMisiewicz As soon as I can rebase and undo the MKL 2020.1 experiments. @dgasmith Note that I've added printing the input at the top of schema runs: https://github.com/psi4/psi4/pull/1850/files#diff-a54f9d4707cbe64f08c3df0dfc0c8376R392-R396 opportunity to object. I think @hokru's concerns have been addressed except for the singles/doubles. We're using the same defs as MolSSI (of course, we proposed the defs), and TDC didn't object, so sticking with them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-634147911:158,undo,undo,158,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-634147911,1,['undo'],['undo']
Usability,"> Can you expand a bit on ""not really header-only""? Checking the source code, I only see `hpp` files. Sure. If the armadillo runtime library is to be used, `src/wrapper.cpp` is compiled and; one can simply link against `armadillo`. However, this wrapper can also be switched off. In this case, one needs to link directly against BLAS and LAPACK. The [documentation](http://arma.sourceforge.net/faq.html) explains this in a little more detail in the _Linking_ section. I have never tried to use armadillo without the wrapper to be honest... I'll give it a try.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-445558835:199,simpl,simply,199,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-445558835,1,['simpl'],['simply']
Usability,"> Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it.; > ; > All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc.; > ; > This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in [#2261 (comment)](https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277); > ; > In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified. All fair criticisms, and that clears it up. The code was originally pure C and later modified to fit (nominally) within a C++ framework, hence the structure of the variable declarations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467:887,clear,clears,887,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467,1,['clear'],['clears']
Usability,"> Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky. Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124:114,Simpl,Simple,114,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124,1,['Simpl'],['Simple']
Usability,"> Doing as you suggest indeed improves the results to something reasonable. Just wondering whether this is like a systematic solution. For the specific problem of obtaining a smooth curve that continues a particular SCF energy, using guess read is about as much of a systematic solution as you can have. There are cases where an SCF solution simply ceases to exist along a potential energy curve, associated with near-singularities in the MO hessian. In such a case, no convergence trick can help you. If the ""guess read"" technique doesn't work, try adding `set soscf true`. If that still doesn't work, odds are that the solution ceases to exist. (Note: SOSCF is not implemented for DFT functionals with meta or iterative VV10 components.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901#issuecomment-1473868464:342,simpl,simply,342,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473868464,1,['simpl'],['simply']
Usability,"> Dumping debug information for `libxc`'s purposes sounds good to me. What do you need printed, and where should I put the print statements? (I'm guessing `lbfunctional/LibXCfunctional.cc`.) I'm still learning this part of the codebase. The point-wise density data, i.e. `rhoa rhob sigmaaa sigmaab sigmabb lapla laplb taua taub` for unrestricted and `rho sigma lapl tau` for restricted, where `rho` is density, `sigma` is reduced gradient, `lapl` is density Laplacian, and `tau` is local kinetic energy density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1159839361:201,learn,learning,201,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1159839361,1,['learn'],['learning']
Usability,"> FWIW, it would be better to have all these functions simply be `atom_at_position`, but that can be for another day. Indeed, but I think they are used at a couple of places. My first instinct was to turn it into a function template, but I think these fns are exported to Pyside via pybind right? Not sure how that would handle a C++ template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2464#issuecomment-1063052441:55,simpl,simply,55,https://psicode.org,https://github.com/psi4/psi4/pull/2464#issuecomment-1063052441,1,['simpl'],['simply']
Usability,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:385,clear,clear,385,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:1321,simpl,simple,1321,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104,1,['simpl'],['simple']
Usability,"> I finished about half of the review and then got confused about the ""big picture."" If you're only intending to support point charges, then what happens if a user passes in an external potential object with basis functions attached? I can't find a place in this code that limits the kind of external potentials that can be considered. And why are there lines of code to get and append basis functions from/to the external potential? If you don't intend to support basis function external potentials (and it isn't clear to me if you intend to or not), then there should be a user-friendly error message when a user tries this. And on the topic, what is the technical barrier to including basis function external potentials? Is there a reason why those are being excluded from this PR, if they are?; > ; > I'll need to re-review once changes are made, and this issue of basis function external potentials is clarified. Please see the updated description above. I removes unnecessary code to make this PR specifically for point charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855:514,clear,clear,514,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855,2,"['clear', 'user-friendly']","['clear', 'user-friendly']"
Usability,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:81,simpl,simpler,81,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509,4,"['clear', 'simpl']","['clear', 'clearer', 'simpler']"
Usability,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:341,clear,cleared,341,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585,1,['clear'],['cleared']
Usability,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1145,learn,learning,1145,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470,1,['learn'],['learning']
Usability,"> I looked into this. I believe that this method is responsible for the lack of scaling:; > ; > ; > ; > psi4/psi4/src/psi4/libmints/potentialint.h; > ; > ; > Line 66; > in; > fe246a0; > ; > ; > ; > ; > ; > ; > ; > void PCMPotentialInt::compute(PCMPotentialIntFunctor &functor) { ; > ; > ; > ; > ; > ; > Unfortunately, it won't be trivial to parallelize. This is because of the ObaraSaika-Recurrence object that's touched deep within the nested operations:; > ; > ; > ; > psi4/psi4/src/psi4/libmints/potentialint.h; > ; > ; > Line 147; > in; > fe246a0; > ; > ; > ; > ; > ; > ; > ; > potential_recur_->compute(PA, PB, PC, gamma, am1, am2); ; > ; > ; > ; > ; > ; > The entire method shares this one object, so this line must be executed sequentially, meaning any parallelization must occur in an even more nested region than this one (which would be too nested to improve performance).; > I can think of two possible solutions to this problem:; > ; > Allow the creation of one ObaraSaika-Recurrence object per thread. This would be the simplest to implement, but it would increase the memory cost of the calculation (by a factor of at most num_threads).; > Parallelize the compute method of the ObaraSaika-Recurrence object itself. This could make the ObaraSaika code a little uglier since some of the loops might have to be unrolled, but it wouldn't require significantly more memory.; > ; > I'd be happy to work on this, but I'd like to know if anyone else had any opinions or suggestions. I tried to add openmp parallelism by the first method. Although it did run faster, it consum much more memory. so sad...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-511102993:1033,simpl,simplest,1033,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-511102993,1,['simpl'],['simplest']
Usability,"> I made the requested changes, I am wondering which .rst file I need to put the incfock documentation in. Waiting for expert opinions on incfock :). Waiting for more feedback sounds good to me. Libfock is one of the pieces of the code I don't know as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-900377297:167,feedback,feedback,167,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-900377297,1,['feedback'],['feedback']
Usability,"> I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. No. Use `void xc_func_set_ext_params_name(xc_func_type *p, const char *name, double par);` i.e.; ```; xc_func_set_ext_params_name(func, ""_omega"", value_of_omega);; ```; > Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. I've never seen anyone use that functional. It looks like it uses `GGA_X_FT97_B` and `GGA_C_FT97`. The latter appears to misbehave, https://gitlab.com/libxc/libxc/-/issues/275. > Are any of these now available in v5.1 that I should be activating?; > ; > ```; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4. LDA0 and CAM-LDA0 are introduced in the upcoming 5.1.0. . I can probably also add P86VWN; it's a trivial modification. https://gitlab.com/libxc/libxc/-/issues/277. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4. PBEsol has been in libxc for ages, since version 2.1.0 released in March 2014. I've opened up a ticket on LRC-BOP (https://gitlab.com/libxc/libxc/-/issues/276); it might not make it to the next release. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4. These have also been in libxc for ages, since version 4.0.0 in 2017. `MGGA_X_TAU_HCTH`+`MGGA_C_TAU_HCTH` and `HYB_MGGA_X_TAU_HCTH`+`MGGA_C_HYB_TAU_HCTH`. > SKIPPED [1] ../tests/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459:4,simpl,simplified,4,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459,1,['simpl'],['simplified']
Usability,"> I would keep the ""COSX"" for recognition. That's a good point; ""COSX"" is a fairly well-known algorithm. For consistency throughout the psi4's `libfock` library, I think it would be good to call it ""COSK"" over ""COSX""; all reference to the exchange matrix use the variable ""K"". > This PR implements 2 grids instead of 3? That Turbomole team showed it worked well, just asking. Yes, the SCF is first converged on a small grid (specified by `COSK_RADIAL_POINTS` and `COSK_SPHERICAL_POINTS`). Afterwards, a single iteration is performed on a larger grid (specified by `COSK_RADIAL_POINTS_FINAL` and `COSK_SPHERICAL_POINTS_FINAL`). A good future mini-optimization would be to add a third medium grid, which would be used to converge the SCF after the small grid but before the final grid evaluation. > I am in general for a simple way of setting quadrature grids, psi4-specific named grids. That is a bigger project though. Here it would be enough to have an efficient default and in the manual a suggestion how to make a tight/accurate one. After we gain experience with the psi4 COSX we can make a couple useful defaults. I agree, it would be nice to have named quadrature grids. For now, I'll update the manual with some recommended spherical/radial point values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160:819,simpl,simple,819,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160,1,['simpl'],['simple']
Usability,"> I'd like some confidence that these changes really are essential preparation for work-in-progress in the CDS group that you expect to be submtited soon. Both of these changes are necessary for semi-numerical exchange, which I plan to submit in the next week or two. Because these changes touch important parts of the SCF/JK code but shouldn't change any existing behavior, I thought it would be best to submit them separately. > Can you give me an outline, or a draft PR, of how this responsibility transfer simplifies Incremeental Fock?. Sure, I'll do my best to explain. As you probably know, `JK` objects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approach",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:510,simpl,simplifies,510,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,1,['simpl'],['simplifies']
Usability,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:42,simpl,simplify,42,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966,2,['simpl'],"['simple', 'simplify']"
Usability,"> I'm not really qualified to appraise this, but I don't see any obvious errors. Alas, nobody is fully qualified to appraise this. TDC knows the `cc` code and Lori knows psivars, but densities touch so many parts of the code that we'd need expertise in every single module, which we simply don't have. I won't be free to work on the next PR for a while, so we can leave this open to collect more comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1098334427:283,simpl,simply,283,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1098334427,1,['simpl'],['simply']
Usability,"> I'm not sure how often `oeprop` really gets called directly in an input. There's a very good reason to call `oeprop` directly, thanks to Psi4Numpy: I'm prototyping an electronic structure method, I have its OPDM, and I want to get some properties from it. That said, the reason for calling `oeprop` in this case is much simpler. There's a section in the manual titled ""Evaluation of One-Electron Properties — oeprop()"", so a user who wanted to evaluate one-electron properties used `oeprop`. > the only issue is you may not be confident in _how_ the dipole was calculated - e.g. if you run a CCSD energy calculation, then call `oeprop`, does it form the CCSD density and contract with the dipole integrals?. CCSD energy calls don't solved lambda equations. I would _hope_ that there is no density on the CCSD wavefunction, but I haven't checked. Still, I'm agreed with your bigger point: properties using built-in Psi methods should just go through `properties`. In my view, manual `oeprop` calls should be the province of people who custom-set the density, and it would be good for us to put in a warning to encourage this. I don't have strong feeling on what this distinction means for `psivars`. I think that's for Lori to weigh in on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869199979:322,simpl,simpler,322,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869199979,1,['simpl'],['simpler']
Usability,"> I've tested the mrcc interface within about a year. _But_ I only have the old mrcc (c. 2014) before it learned how to do SCF itself. I fuzzily remember being able to successfully run the tests with a version from a couple years ago, so 2020-22 era MRCC was OK I think, but I remember having to install the patches, otherwise neither Psi4 or Molpro would work with MRCC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542:105,learn,learned,105,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542,1,['learn'],['learned']
Usability,"> In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. > Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. General guidance to for ref values to be from a tightly converged/optimized calc, then loosen the comparison check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:486,guid,guidance,486,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,1,['guid'],['guidance']
Usability,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:340,feedback,feedback,340,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956,1,['feedback'],['feedback']
Usability,"> Is there a reason not to merge this now?. To be clear, this is directed at @hmacdope, since you don't have ""Ready to merge"" checked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1387406900:50,clear,clear,50,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1387406900,1,['clear'],['clear']
Usability,"> Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. On a purely mathematical ground, there is no reason not to allow calculations where some nuclei do not have any basis functions; after all, all that matters is the flexibility of the whole basis set. I would therefore recommend against a hard error here, or there should at least be a flag to control whether an error is raised or not. Not having sufficiently many basis functions to hold the electrons is, however, a major error and should always result in an error termination. Here, Ba is indeed given a 3s3p basis set, which has 12 spatial orbitals and can thereby hold 24 electrons, whereas Ba has 56 electrons. The error `Cannot set element 12 since there are only 12 elements` arises from exactly this; it seems that the size of the fragment basis is not checked, or not checked early enough!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933:111,intuit,intuition,111,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933,1,['intuit'],['intuition']
Usability,"> It would be good for me to write a test case for everything I check as part of DCT and Linear Dependencies #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, right now is a bad time to write the test since Fix GEMM errors in presence of linear dependencies #2232 will change the reference output. In the beginning I may have had (and spoken) dreams of rewriting all the ctests in psiapi for pytest, but I've since been talked down, and the plan is to allow each ctest input.dat to stay where it is and be wrapped in a pytest test (like psi4numpy). There'll have to be extra install steps to position the ctest inputs into the python module directory. Upshot is it's fine to continue choosing psithon or psiapi style for writing new tests, mostly depending on testing style convenience and whether the test would serve as an easy model for users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663:163,clear,clear,163,https://psicode.org,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663,1,['clear'],['clear']
Usability,"> It's a [colon dash](https://en.wikipedia.org/wiki/Compound_point) (well, it has a more amusing name but, to keep things family friendly, I'll allow you to look that up in the Wiki article). I was taught that it should be used for lists when I was young, and it wasn't until I moved to the US that I learned that it's very outdated. Oh yeah, that wiki article is familiar,— maybe we've had this conversation at the uhf file, the rohf file, and now the rhf file. 🤦",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2699#issuecomment-1225905701:301,learn,learned,301,https://psicode.org,https://github.com/psi4/psi4/pull/2699#issuecomment-1225905701,1,['learn'],['learned']
Usability,"> Just checking that the extra precision added https://github.com/psi4/psi4/pull/1510/files didn't get lost. We studied numerical precision and couldn't justify going out to the **17** decimal places reported after #1510: the Python code couldn't reproduce the C++ code out that far. My memory is hazy, but I recall some errors that were normally in the 14th decimal place but could rarely reach to the 12th decimal place, which I suspected were related to the numerical precision of S^(-1/2). This made me want to cut back the number of decimal places to something less fragile. I [checked in](https://github.com/psi4/psi4/issues/1973) about why we had 17 decimal places in the first place, and the person who made the change simply assumed that we had that many decimals of precision. In my judgment, we do not, and it was a mistake to ever report that many decimal places. I _also_ checked that 10 decimal places was enough to keep #1486 fixed. (That was the issue that originally prompted the increased precision in our Molden files.) While the 4 decimal places of the pre-#1486 era had the bug, the 10 decimal places of this PR did not. While we could _maybe_ go out to 11 or 12 decimal places, trying to get 17 decimal places of precision would require an analysis of round-off error in every line of the SCF code. This seems far beyond the scope of the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2229#issuecomment-872543523:727,simpl,simply,727,https://psicode.org,https://github.com/psi4/psi4/pull/2229#issuecomment-872543523,1,['simpl'],['simply']
Usability,"> Looks good, I left some comments. Namely, my biggest concern is about removing the `screening density` keyword and moving `update_density` away from `TwoBodyAOInt`. I think it would make more sense to get it all done in one PR, but that is my personal opinion. Thank you very much for the comments! I do appreciate it. As for your points, my thought was to implement both of these changes in future PRs, maybe as a single future PR, maybe as their own separate ones. I think there's a good argument to be made for making a separate option for density screening in this PR, and I'd be quite willing to do that. But, I do believe that removing update_density should be its own PR, as that PR would consist of removing ALL references to the density matrix from TwoBodyAOInt, and I think it would be easier to review and clearer intent if update_density was separated out in its own PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695#issuecomment-1221095832:819,clear,clearer,819,https://psicode.org,https://github.com/psi4/psi4/pull/2695#issuecomment-1221095832,1,['clear'],['clearer']
Usability,"> Maybe the ANO basis set family would suffer from this? While I do not use them, IIRC they are notorious for having an extremely high number of primitives, and for slowing many integral packages to a glacial pace. You don't even need to go to ANO; just take the cc sets for transition metals. I ran a simple benchmark [here](https://mattermodeling.stackexchange.com/questions/3794/which-software-is-good-with-generally-contracted-basis-sets) for Zn2 with the cc-pVDZ basis set. Zn and Zn2 ran in 19 and 216 seconds of wall time with Psi4, compared to 0.7 and 1.4 seconds with PySCF, respectively.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783485414:302,simpl,simple,302,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783485414,1,['simpl'],['simple']
Usability,"> My vote is to either end or temporarily pause this PR and open a new PR just for swapping out the solid harmonics technology. Of course, @jturney's judgment overrides mine. I do think we can essentially move the methods in the `HarmonicCoefficients` class to `libmints/solidharmonics.cc`. But I agree that would be 2 PRs. In that case, having a separate `libfmm` would be useful, to avoid the clutter already present in `libmints`. Of course, waiting for @jturney's judgement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209843989:42,pause,pause,42,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209843989,1,['pause'],['pause']
Usability,"> Not really. The internal stage directory was a compromise so that developers could continue to never have to type make install and was a prerequisite to them approving the transition from GNUMake to CMake at all. This very difficult to relate to. Why can't they just use a simple script like this:; ```; $ cat ~/bin/make-and-install; #!/bin/sh. make ""$@"" && DESTDIR=`pwd`/stage make install; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325804931:275,simpl,simple,275,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325804931,1,['simpl'],['simple']
Usability,"> Per the last Psi4 call, I'd like to challenge you to think about how much of libcfmm could be factored out of Psi4. Many other codes might be interested in this functionality, too, if it can be made accessible through a simple API. I like your idea, but I think that is something to think about in the future because the rest of `libfmm` is currently entangled with Psi functionalities (like `IntegralFactory`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208511310:222,simpl,simple,222,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208511310,1,['simpl'],['simple']
Usability,"> Re [#2845 (comment)](https://github.com/psi4/psi4/pull/2845#issuecomment-1407771245), yes, perhaps it should be `double`. All it needs is a C double, and I thought Py float was that. Another reading of https://numpy.org/doc/stable/user/basics.types.html isn't helping. Sorry, I wasn't very clear - I meant that other than `np.float`, there's also some `np.double` hanging around, in particular this one:. > ```; > psi4/driver/p4util/numpy_helper.py: ret.nph[n].flat[:] = np.frombuffer(json_data[""data""][n], dtype=np.double); > ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865#issuecomment-1407791731:292,clear,clear,292,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407791731,1,['clear'],['clear']
Usability,"> Simplified test case; > ; > ```; > molecule dimer {; > 0 1; > Ne 0.0 0.0 0.0; > --; > 0 1; > Xe 0.0 0.0 3.0; > }; > ; > set {; > basis def2-svp; > print 2; > }; > ; > set guess core; > Eall = energy('scf'); > ```. I tried this with 1.6, including `ecpint`. _With_ ADIIS on, we are able to find the correct minimum readily. _Without_ ADIIS on, we see oscillatory convergenceat -316 E_h, well above the -457 E_h. ```; molecule LiF {; 1 1; Li 0.000000000 0.000000000 0.000000000; --; -1 1; F 16.000000000 0.000000000 0.000000000; }; set basis cc-pVDZ; set df_scf_guess false; set scf_type direct. energy('scf'); ```. This fails, per Susi's earlier report, with 1.6 and ADIIS off. With ADIIS on, we observe frequent occupation flips, but also no convergence. Tragically, I'm still unconvinced that the ECPs are in good shape.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-1133523511:2,Simpl,Simplified,2,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-1133523511,1,['Simpl'],['Simplified']
Usability,"> So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however. > Thoughts?. Unless the DFJCOSK changes would undo much of this PR, I think a follow-up PR would be best.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152702693:520,undo,undo,520,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152702693,1,['undo'],['undo']
Usability,"> So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions.; > ; > Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; > ; > ```; > SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; > std::shared_ptr<BasisSet> bs3) {; > auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; > return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; > }; > ```; > ; > and it is also revealed in the Python interface, which means that you should be able to call it.; > ; > Hopefully someone else can tell how to fit all the pieces together. thanks for your pointers @susilehtola ! yes, i see this code now and this is a good start. so, what is left is for me to define a `psi4`-compatible `BasisSet` to represent the set of Gaussian auxiliary basis functions that I want (say the 60 different ones used by the paper). . it would be fantastic if anyone could give pointers on this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386:196,learn,learning,196,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386,1,['learn'],['learning']
Usability,"> Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out. I don't have any particular concerns -- I just noticed your paper was on neutrals and the PR intro mentioned ""Not tested with external potentials."".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182:17,feedback,feedback,17,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182,1,['feedback'],['feedback']
Usability,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:538,clear,clear,538,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381,1,['clear'],['clear']
Usability,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1695,clear,clearer,1695,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567,1,['clear'],['clearer']
Usability,"> The conversion to traceless form can be done for any order of multipole, but I'm not really sure it's got a use case at this point. Quadrupoles in traceless form can be useful for force field definitions. Our CFMM code uses very high orders of multipoles, but they're converted to spherical harmonics to work with all the efficient machinery we've developed so that doesn't need the traceless definition. Max and I have traded Slack messages, and we're agreed on adding traceless quadrupoles so those still exist, but not to bother with the other multipoles for the time being. I'll add that to the PR hopefully today. I've been too busy fixing `ambit` to respond to PR feedback here at my usual pace.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485#issuecomment-1075186676:672,feedback,feedback,672,https://psicode.org,https://github.com/psi4/psi4/pull/2485#issuecomment-1075186676,1,['feedback'],['feedback']
Usability,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:968,simpl,simplest,968,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718,1,['simpl'],['simplest']
Usability,"> The internal ""validated"" dictionary is in my view perfectly well documented here:; > ; > https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365. So, just to be clear, that applies for every stage in the entire dict? I thought that only applied to DFT stages because you mentioned it in Sec. 2a). > > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete.; > ; > This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into the separate functions above, it's simpler to interpret both of these branches as an incomplete `cbs_metadata` which then needs to be validated anyway. Then I stand by my comment that the function name and docstring are incomplete in the current version. Neither mentions that the dict needs to be completed (and needs to lose at least one field).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963289886:220,clear,clear,220,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963289886,2,"['clear', 'simpl']","['clear', 'simpler']"
Usability,"> The situation is even worse now: atomic SAD doesn't converge for the last system. :(. but libecpint is still not used. Also, the SAD code isn't really tailored for ECPs... I'm hoping to come up with a Python library for e.g. forming SAD guesses with proper symmetry (which is missing in Psi4), but this is on hold since it's not clear whether the MolSSI's funding will be renewed..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1497#issuecomment-869221610:331,clear,clear,331,https://psicode.org,https://github.com/psi4/psi4/issues/1497#issuecomment-869221610,1,['clear'],['clear']
Usability,"> The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. That's all fair, to be honest, although I agree moreso with your second paragraph below, and what you said about indistinctness between algorithm choice and memory transition choice is applicable for sure.; ; > All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. This is true, and a point I hadn't considered, either. I wouldn't mind taking such a project on, but I would probably save it for after v1.8. > So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553. Will do!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012:206,clear,clear,206,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012,1,['clear'],['clear']
Usability,"> The test that is currently failing is a test in `gcp/pbeh3c/`. This is due to an optking side issue where the `CustomHelper` class being used by optking is not accepting a `psi4.core.Molecule` the type checking was looking for `qcdb.Molecule`. As a backup optking defaulted to psi4's active molecule.; > ; > This is the call. `E = optimize('pbeh3c/def2-msvp', molecule=unopethene)`; > ; > optking takes the molecule here in the driver and uses a default fallback instead: ` opt_object = optking.opt_helper.CustomHelper(molecule, params=optimizer_params)`; > ; > The type check will get changed in optking to include `core.Molecule`. An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655:1045,intuit,intuitive,1045,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655,1,['intuit'],['intuitive']
Usability,"> There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. Interesting. This does not ring a bell for me. I take the question to be ""given a hessian and the current forces (beyond the first step) should you update the hessian with those forces before using them to calculate the step?"" Can you point to the code? IDK, probably best answer is whatever works better in practice and doesn't cause problems. Actually, it's possible I did this because I learned to avoid hessian updating when displacements are very small (or the geometries are very close). Perhaps I didn't want to update hessian until I knew the step size.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139:808,learn,learned,808,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139,1,['learn'],['learned']
Usability,"> This is fantastic Max! I really like the generalized `MultipoleInt` class. I'm good with options (b) and (c). I think that `DipoleInt` and `QuadrupoleInt` classes which function as light wrappers around `MultipoleInt` are more user-friendly than requiring users to pluck the appropriate integrals out of the `MultipoleInt` return.; > ; > Have you done any performance comparisons between the new MD code and the old OS code? I don't know if one is expected to be faster than the other. It would be good to do some simple timings (maybe one low angmom system and one high angmom system?) before completely ditching the OS code. @maxscheurer If you want, I can test CFMM with your new code to see if the multipole calculations are indeed faster. Just let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935:229,user-friendly,user-friendly,229,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935,2,"['simpl', 'user-friendly']","['simple', 'user-friendly']"
Usability,"> To be clear, `AO_core_` controls which subalgorithm is used? If so, that should be mentioned in a comment. That's correct! `AO_core_ = true` means the in-core subalgorithm is used, while `AO_core_ = false` means the out-of-core subalgorithm is used. I added comments to clarify.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2848#issuecomment-1497988883:8,clear,clear,8,https://psicode.org,https://github.com/psi4/psi4/pull/2848#issuecomment-1497988883,1,['clear'],['clear']
Usability,"> Two questions:; > ; > * Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out; > * Why not implement my above suggestion of forming two separate `X` matrices? This would be simple to do. @hokru answered the first part; and while I couldn't say what a ""proper magnitude"" is, my observation was that some of the negative weights were large enough in magnitude to where zeroing them out wouldn't be feasible. For your second part, it's just what was settled on at the Psi4 dev meeting, moreso than anything. On further reflection, though, I can work on your suggestion today, because you're right, it wouldn't be too hard to do what you said.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042:280,simpl,simple,280,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042,1,['simpl'],['simple']
Usability,"> Update your PR description. Behavior changes are not ""minor cleanup"", even if that behavior is as simple as raising an error where there wasn't one before. Done",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488#issuecomment-1074139322:100,simpl,simple,100,https://psicode.org,https://github.com/psi4/psi4/pull/2488#issuecomment-1074139322,1,['simpl'],['simple']
Usability,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:711,simpl,simple,711,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755,1,['simpl'],['simple']
Usability,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:997,undo,undoubtedly,997,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603,1,['undo'],['undoubtedly']
Usability,"> Wow, that's quite the involved method. I found a few comments, but lgtm! Main question is: are unsuitable complications like extern-in-system, charged molecule?, etc. stopped early? Thanks for the contribution!. Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737:229,feedback,feedback,229,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737,1,['feedback'],['feedback']
Usability,"> Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object). Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406:597,clear,cleared,597,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406,1,['clear'],['cleared']
Usability,"> You should not have made those graphs. All you know for sure is that the error is less than 1 micro hartree. You cannot tell the difference between 1.0 e-7 and 1.5 e-7, but people read graphs as if you can tell the difference between your data points.; > ; > This is also why you can't just present graphs. You need to be absolutely sure that your labels are clear, and that somebody who isn't you will be able to figure out what the graph means. If you need to add a sentence to explain them, do so.; > ; > I request additional benchmarks so we can get more precise estimates on how much error these techniques introduce. Can you increase energy convergence to `1e-10`?; > ; > Because this PR isn't coming in until 1.5 anyways, I'm going to turn my attention to other things for a while. Ah, I am learning a lot. Good teachers like you will prepare me well for grad school :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821278069:361,clear,clear,361,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821278069,2,"['clear', 'learn']","['clear', 'learning']"
Usability,"> _If_ we go with Zach's suggestion, then I insist that the code emit a warning when there are negative grid weights with COSX. We're in a case where the original COSX procedure is undefined, and the user should know that, whether our fix is intuitive or not. (I don't know COSX theory well enough to comment on that.). I would agree with this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1503691888:242,intuit,intuitive,242,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1503691888,1,['intuit'],['intuitive']
Usability,"> please post `conda list`, `psi4 --version`, and a full input file. If it's just the pairwise analysis, there was [dftd3/simple-dftd3#35](https://github.com/dftd3/simple-dftd3/issues/35) . I'd have to see your versions to gauge susceptibility. packages in environment at /home/gang/psi4conda:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main ; _openmp_mutex 5.1 1_gnu ; ambit 0.6 py39h53dec33_2 psi4; attrs 22.1.0 py39h06a4308_0 ; blas 1.0 mkl ; brotlipy 0.7.0 py39h27cfd23_1003 ; ca-certificates 2022.10.11 h06a4308_0 ; certifi 2022.9.24 py39h06a4308_0 ; cffi 1.15.1 py39h5eee18b_3 ; charset-normalizer 2.0.4 pyhd3eb1b0_0 ; chemps2 1.8.11 hbe8a562_0 psi4; conda 22.11.1 py39h06a4308_4 ; conda-package-handling 1.9.0 py39h5eee18b_1 ; cryptography 38.0.1 py39h9ce1e76_0 ; dftd3 3.2.1 h84218bc_2 psi4; dftd4 v3.3.0 py39h758d17c_2 psi4; dkh 1.2 h173d85e_2 psi4; flit-core 3.6.0 pyhd3eb1b0_0 ; fockci 0.2.0 pyh681c21d_0 psi4; gau2grid 2.0.7 hd18ef5c_0 psi4; gcp 2.0.2 he991be0_2 psi4; gdma 2.2.6 h0e1e685_6 psi4; hdf5 1.10.6 hb1b8bf9_0 ; idna 3.4 py39h06a4308_0 ; importlib-metadata 4.11.3 py39h06a4308_0 ; importlib_metadata 4.11.3 hd3eb1b0_0 ; importlib_resources 5.2.0 pyhd3eb1b0_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.4.0 h06a4308_3561 ; ld_impl_linux-64 2.38 h1181459_1 ; libecpint 1.0.7 hfebba4c_0 psi4; libefp 1.5.0 h117b10a_4 psi4; libffi 3.4.2 h6a678d5_6 ; libgcc-ng 11.2.0 h1234567_1 ; libgfortran-ng 7.5.0 ha8ba4b0_17 ; libgfortran4 7.5.0 ha8ba4b0_17 ; libgomp 11.2.0 h1234567_1 ; libint2 2.7.1 h2fe1556_15 psi4; libstdcxx-ng 11.2.0 h1234567_1 ; libxc 5.2.3 hfebba4c_0 psi4; mkl 2021.4.0 h06a4308_640 ; mkl-service 2.4.0 py39h7f8727e_0 ; mkl_fft 1.3.1 py39hd3c417c_0 ; mkl_random 1.2.2 py39h51133e4_0 ; mp2d 1.1.0 hfd86e86_0 psi4; msgpack-python 1.0.3 py39hd09550d_0 ; ncurses 6.3 h5eee18b_3 ; networkx 2.8.4 py39h06a4308_0 ; numpy 1.20.0 pypi_0 pypi; openssl 1.1.1s h7f8727e_0 ; optking 0.2.1 pyhbc12335_1 psi4; packaging 21.3 pyhd3eb1b0_0 ; pcmsolver 1.2.1.1 py39h92d4a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028:122,simpl,simple-,122,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028,2,['simpl'],['simple-']
Usability,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:256,simpl,simpler,256,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845,1,['simpl'],['simpler']
Usability,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:14,guid,guided,14,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297,5,['guid'],['guided']
Usability,"> “Total number of huckel orbitals” block is no net change, right?. That is correct; this is probably where the bug originated since I copy-pasted everything to the other blocks too. Just reorganized it the same way so that it's clearer what is happening.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1529#issuecomment-462488862:229,clear,clearer,229,https://psicode.org,https://github.com/psi4/psi4/pull/1529#issuecomment-462488862,1,['clear'],['clearer']
Usability,">> An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way. I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808:415,intuit,intuitive,415,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808,1,['intuit'],['intuitive']
Usability,">> Are there any Python bindings that hit the deprecated fns?. > I don't think so? They are not used in py::class_<Dimension> in export_mints.cc, if there are other places to look for Python bindings let me know and I will check. Looks like export_mints.cc only, so you've got that covered, thanks. >> This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. > Perhaps, but I delayed it because; > 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; > 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024. Sounds fair. Two cycles may be good for the deprecation warning, as plugin devs like clear warnings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600:1015,clear,clear,1015,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600,1,['clear'],['clear']
Usability,"@CDSherrill ; 1) It should always be in the SO basis. Apologies this was answered elsewhere. 2) If we are set on this on I can patch up the CI code and add patch notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state averaged density depending on user specifications. We also need to think about the `psi4/driver/driver.py:molden` function and #504. `properties` is now guaranteed to return an updated SO basis density; however, the current molden function requires a MO density. We could have a simple switch on that function that indices if the incoming density is in the AO or MO basis and transform accordingly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260128691:516,simpl,simple,516,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260128691,1,['simpl'],['simple']
Usability,"@CDSherrill but the auxiliary functions are Coulomb normalized, right? This means ```(P|P)=1```. And yes, it's clear that INTS_TOLERANCE says it has to do with the integrals; my issue is just that what the program prints out and what the input is are two totally different things!. That was why my suggestion was to adjust the documentation so that it also mentions ""screening"", ""threshold"", as well as ""Schwarz"", each of which I tried to grep through the documentation...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1466#issuecomment-452422951:111,clear,clear,111,https://psicode.org,https://github.com/psi4/psi4/issues/1466#issuecomment-452422951,1,['clear'],['clear']
Usability,@CDSherrill the integrals on disk issue is taken care of at the driver level. Looks like there is a simple helper that is called [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L2335),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389197623:100,simpl,simple,100,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389197623,1,['simpl'],['simple']
Usability,"@JonathonMisiewicz As it is currently written it works well when all steps are run by Psi4 in a very controlled manner. In general, we are trying to move the driver towards:; - Generation of a document-based (JSON) structure that contains many inputs to be run.; - Inputs are run in arbitrary ways (queried from databases, computed on different resources, etc); - Jobs are collected and a result is returned. A simple list makes it more difficult to collect jobs in the right order and should only really be used when the order of computations is important. A dictionary offers arbitrary tokenization natively which lends itself well to compute that eventually forms an arbitrary execution graph.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-423530841:411,simpl,simple,411,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-423530841,1,['simpl'],['simple']
Usability,"@JonathonMisiewicz Thanks, that was a good point. I've modified the function somewhat - as opposed to messing with the read-in original contraction coefficients, I've simply disabled the `erd_normalize_shell` call for ECP's (presumably when `self.rpowers` is not just full of `None`'s).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-375698856:167,simpl,simply,167,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-375698856,1,['simpl'],['simply']
Usability,"@JonathonMisiewicz, @jturney and @loriab Thanks for the feedback. I'm going to spend some serious time this week cleaning up the code and get back to you when it's in better shape.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2151#issuecomment-926798539:56,feedback,feedback,56,https://psicode.org,https://github.com/psi4/psi4/pull/2151#issuecomment-926798539,1,['feedback'],['feedback']
Usability,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:518,guid,guide,518,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,1,['guid'],['guide']
Usability,"@TiborGY *Conda* package for *Windows* have to be built with VS 2015 (https://conda.io/docs/user-guide/tutorials/build-windows.html#microsoft-visual-studio). So I'm doing that to avoid compatibility problems and make later deployment easy. @tonigi I hacked a bit `psi::libfilesystem` to compile, but is making a lot of test to segment fault. Yes, I also found `std::experimental::filesystem` and it looks as good option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404166121:97,guid,guide,97,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404166121,1,['guid'],['guide']
Usability,"@TiborGY That's a good idea! False sharing is a reasonable thing to think about. From what I've just now read, it sounds like false sharing occurs when two threads repeatedly write to nearby array elements, invalidating cached values of those elements. In this minimal test case, the threads aren't writing to any shared data, so I don't think false sharing applies here. However, it's something I'll look out for in the actual semi-numerical exchange implementation. @jturney I haven't gotten desperate enough to learn VTune yet, but I'm getting close. @hokru Thank you! The changelog entry would perfectly explain this strange behavior. I'll wait for #2413 before doing any more investigation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1075534869:514,learn,learn,514,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1075534869,1,['learn'],['learn']
Usability,"@amjames Could you modify `ccdensity` so that it writes the AO density to `ref_wfn`'s Da/Db?. @tovrstra Creation of the OPDM is not standardized across the different modules at the moment. Typically, setting `set opdm true` will build the OPDM; however, it is not always clear if `Da` is updated. If @amjames can update the Da/Db attributes for the `cc` modules we may be able guarantee that all Wavefunctions coming from a `property` call have a Da/Db that is associated with the called method. This should be guaranteed for all valid `property` modules besides `cc` at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258843529:271,clear,clear,271,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258843529,1,['clear'],['clear']
Usability,"@amjames Excellent, I have received very positive feedback from other folks so I think I will go ahead and close this. We can always open a new issue if we run into problems, but its been about 6 months of everything working well so I think we are fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117#issuecomment-192512210:50,feedback,feedback,50,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-192512210,1,['feedback'],['feedback']
Usability,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300777718:34,clear,clear,34,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718,1,['clear'],['clear']
Usability,"@amjames That clears up the shared state issue, thank you. I have the growing suspicion that I've been leading you all to nowhere. I'll walk you through what I did from the start. lldb said the error originated from line 362 of dcft_integrals_UHF.cc, so I applied the following:; ```; @ -357,8 +357,14 @@ void DCFTSolver::sort_OOOV_integrals() {; global_dpd_->buf4_sort(&I, PSIF_LIBTRANS_DPD, prqs, ID(""[V,O]""), ID(""[O,O]""), ""MO Ints <VO|OO>"");; global_dpd_->buf4_close(&I);; ; + global_dpd_->buf4_init(&I, PSIF_LIBTRANS_DPD, 0, ID(""[O,O]""), ID(""[O,V]""), ID(""[O>=O]+""), ID(""[O,V]""), 0,; + ""MO Ints (VO|OO)"");; + global_dpd_->buf4_print(&I, ""outfile"", 1);; + global_dpd_->buf4_close(&I);; +; global_dpd_->buf4_init(&I, PSIF_LIBTRANS_DPD, 0, ID(""[V,O]""), ID(""[O,O]""), ID(""[V,O]""), ID(""[O>=O]+""), 0,; ""MO Ints (VO|OO)"");; + global_dpd_->buf4_print(&I, ""outfile"", 1);; global_dpd_->buf4_sort(&I, PSIF_LIBTRANS_DPD, rsqp, ID(""[O,O]""), ID(""[O,V]""), ""MO Ints (OO|OV)"");; global_dpd_->buf4_close(&I);; ```. You can see the results of the print statements as pre.txt and post.txt respectively at https://gist.github.com/JonathonMisiewicz/7d4e3ac7eee98b8dcc94d74f2d60f378. I noticed the row and column indices were transposed but everything else looked fine, suspected the transpose was the problem and checked with @jturney. Maybe there was some miscommunication here? I thought he agreed with me that one of the two codes using the wrong index convention was the problem. Based on what you've been saying about byte counts, it looks like the problem is elsewhere. Maybe the code is supposed to do the transposing? I'll admit that I'm very shaky on reading this code. The only documentation I've been able to find on LIBPSIO is more than 20 years old, and from that, all I can make out about the purpose of LIBPSIO is that it replaced some other I/O system. On second look, it is strange that the non-zero pqnum/rsnum changes from 25 to 26. Is that supposed to happen?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435251377:14,clear,clears,14,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435251377,1,['clear'],['clears']
Usability,"@andysim I checked DOCC compatibility just before I submitted this, and it worked. I'll add a simple DOCC set to the findif test when I fix whatever is causing tests to fail. It'll likely be a few days before I have the time to get those fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-446719821:94,simpl,simple,94,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-446719821,1,['simpl'],['simple']
Usability,"@andysim I see your point. I like *Boost*, but I agree, it is problematic to compile. I'm already using `std::chrono` in some places, but it is a subset of `boost::chrono`. So for the system/user timers, I will conditionally disable them on Windows. For the stack trace, I can also simply disable it on Windows. I looked into `std::libfilesystem`, as @tonigi suggested, but it is C++17 feature, which is not yet supported on MSVC (Visual Studio 2015). It seems that some `psi::filesystem` functions are already dead code. So I will try to come up with some hack!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404110082:282,simpl,simply,282,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404110082,1,['simpl'],['simply']
Usability,"@andysim To be clear I meant the libefp_solver interface, still not quite sure what tokenizer is doing for you in there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235354983:15,clear,clear,15,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235354983,1,['clear'],['clear']
Usability,"@andysim Yes. The 'installed' simint library should have a file `include/simint/vectorization/vector_config.h`. There is also one under the (simint) build directory under `stage`. This should define which vectorization you are using. @loriab Maybe you didn't completely clear out the build directory before switching the vectorization type? I still think that would work, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356793933:270,clear,clear,270,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356793933,1,['clear'],['clear']
Usability,"@andysim no tool, sadly. I think CLion can handle this kind of refactoring, I went with `grep`, `sed`, and squashing compiler warnings. Very tedious and slow going... @loriab I think it's a result of using `sed` and it should make no difference for the compiler. Do we have a style guide for when to use/not use `auto`? Otherwise I followed Meyers' guidelines in ""Effective Modern C++""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1269#issuecomment-429967769:282,guid,guide,282,https://psicode.org,https://github.com/psi4/psi4/pull/1269#issuecomment-429967769,2,['guid'],"['guide', 'guidelines']"
Usability,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-235363935:370,clear,clear,370,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935,1,['clear'],['clear']
Usability,"@bast, could you post the end of the output file for the failed test case `<objdir>/tests/extern1/output.dat`? I'm perplexed as to what went wrong since the end of the test is simply:; ```; total time = 6 seconds = 0.10 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276534257:176,simpl,simply,176,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276534257,1,['simpl'],['simply']
Usability,@bozkaya Does this discussion clear up your questions?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874#issuecomment-352020542:30,clear,clear,30,https://psicode.org,https://github.com/psi4/psi4/issues/874#issuecomment-352020542,1,['clear'],['clear']
Usability,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893:157,clear,clear,157,https://psicode.org,https://github.com/psi4/psi4/issues/893,1,['clear'],['clear']
Usability,"@bozkaya, thanks for all the feedback!. Q1: Good, I'm going the latter route so it behaves just like the DFMP2 module. I just wanted to confirm that it was finishing cleanly in error, and it seems we agree on that. Q2: Ok, just confirming that this was a difference btwn OCC & DFOCC. I'll go ahead and check fc & non-fc independently for df and leave in a commented check for fc w/conv in case you ever get around to that. Q3: Yay! I had tried up-ing the convergence but not the findif scheme. Will do this routinely in future. Thanks for finding the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192934321:29,feedback,feedback,29,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192934321,1,['feedback'],['feedback']
Usability,"@cdsherrill yes 15.0 is recent enough. 14.0 is the minimum for full C; ++11 support based on the internets. On Wed, 2016-02-10 at 13:27 -0800, David Sherrill wrote:. > Fewer compilers working is less of an issue as we push more users; > towards; > the binary distribution. And is only a temporary problem, anyway. Is; > icpc; > 15.0 recent enough to support all the standards we need?; > ; > On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard; > notifications@github.com; > wrote:; > ; > > For me the biggest pro of C++11 is that is reduces the amount of; > > code I; > > have to write/maintain/debug.; > > - Defaulted (and deleted) constructors and assignment operators; > > (mentiond by @dgasmith https://github.com/dgasmith); > > - Liberal use of STL containers and unique_ptr means you should; > > rarely; > > have to write a destructor, and often don't have to write a copy; > > constructor; > > - Constructor delegation; > > ; > > Cons:; > > - Template programming results in nasty compiler error messages that; > > take experience to figure out; > > - Overuse of templates, auto, decltype, etc, can result unreadable; > > code; > > - This can somewhat be fixed in the new PR workflow. Don't accept; > > PRs which are a mess; > > - Some C++11 patterns can be intimidating to people who are still; > > learning basic C++; > > ; > > As more libraries require C++11 (I think Ambit, TiledArray, and; > > Cyclops; > > all do), it should generally be embraced, with some reservations.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > ; > > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182596162:1303,learn,learning,1303,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182596162,1,['learn'],['learning']
Usability,"@dgasmith @robertodr . A simple example:. Without PCM, the working directory does not change:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). #pcm = { ; # Medium { Solvent = Water }; # Cavity { Type = GePol }; #}. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /home/raimis/debug/psi4_PCM; ```. With PCM, the working directory changes:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; ```. A small detail, but it messes up our pipeline.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-351739145:25,simpl,simple,25,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351739145,1,['simpl'],['simple']
Usability,@dgasmith I think this is ready for feedback.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/747#issuecomment-311554557:36,feedback,feedback,36,https://psicode.org,https://github.com/psi4/psi4/pull/747#issuecomment-311554557,1,['feedback'],['feedback']
Usability,"@dgasmith I understand, though my intuition is that the values in our `geometries` dict should be dicts themselves that store properties at that geometry in addition to the geometry. Definitely agreed on porting the C-side code and worrying about the metadata implementation afterwards. I'll get up a PR when I have the geometry generator ported and tested. The coding isn't bad, but my schedule is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-360994628:34,intuit,intuition,34,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-360994628,1,['intuit'],['intuition']
Usability,"@dgasmith well, it's quite a simple matter: if you have a large matrix where a few elements are large while the rest are numerically zero, the RMS norm may be small since it's only looking at the average. The maximum absolute norm, however, picks up this case. Q-Chem appears to have switched to the maximum absolute norm from the RMS norm in version 3.0. It's also the default in GAMESS'94, probably other codes as well. This means that the bigger system you have, the more likely you're going to see problems with the RMS norm, as it will say the wave function has converged even if you have significant residual gradients for a limited set of orbitals. The extreme case is, of course, if you e.g. use ```guess read``` with ```guess_mix true``` with a previously converged calculation. Then only the HOMO-LUMO pair isn't converged, and even in cases where the ground state wave function may have significant symmetry breaking, you might not pick this up since the orbital gradient only has two large elements. I've been running calculations on some small transition metal complexes lately, and there it's quite common to see differences of 1 or 2 orders of magnitude between the RMS and MAX error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-452407959:29,simpl,simple,29,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-452407959,1,['simpl'],['simple']
Usability,"@dgasmith. I think this is a PEBKAC error. I was passing in desymmetrized matrices, which is fine for PK and DF, which both use C1 symmetry under the hood. The fix for `OUT_OF_CORE` is to add symmetry back into the L and R matrices, before calling `jk->compute()`. There's no problem with the JK code, and I'll see if I can add a simple fix for out of core.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-233021414:330,simpl,simple,330,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233021414,1,['simpl'],['simple']
Usability,"@dgasmith: Yes this is ready to go. I just pushed two minor commits that clean existing code so once tests past all can be merged. I think there is potentially more we can do with Slices (merging, getting Slices from MO spaces, which would simplify even further some of the get/set_ commands) but I think that needs some experimentation. Thanks for all the useful feedback!; This also closes issue #723.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-305670159:240,simpl,simplify,240,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305670159,2,"['feedback', 'simpl']","['feedback', 'simplify']"
Usability,"@edeprince3 @jturney @loriab After playing with it I though the very simple Deriv ""binary"" call wrapper was a bit antagonistic to how we are pushing Psi. I removed this and exported the Deriv library so that python side you now do the following:; - Build a deriv object; - Tweak it; - Ask it to compute a gradient. It is a few more lines python side, but now you can have ultimate control over the deriv object in python as well as C++ without adding a bunch of global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/406#issuecomment-226802345:69,simpl,simple,69,https://psicode.org,https://github.com/psi4/psi4/pull/406#issuecomment-226802345,1,['simpl'],['simple']
Usability,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355376217:286,clear,clears,286,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217,1,['clear'],['clears']
Usability,"@evaleev, are you at all interested in accepting into your repository CMake as an alternate build system? We know from @susilehtola that Psi4 can run with libint1 from either your repo with GNUMake or our repo with CMake. Looking over the directory structures (which have un-synced over the years), I _think_ I could arrange CMake alongside your existing build system (CMake files and GNUMake files would just ignore each other) at the cost of a few extra files and a [directory](https://github.com/psi4/libint/tree/master/cmake). Then psi4/libint could be deleted and there would once again be only one source of Libint truth. So if you're interested in CMake now or one day, I'll give it a try and submit a PR. If not, that's fine, and I'll go the simple route and apply your relicensing to psi4/libint. FYI @jturney @andysim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298456904:750,simpl,simple,750,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298456904,1,['simpl'],['simple']
Usability,"@fevangelista Am I clear to eliminate [`transform_tei_so_integrals`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/transform.cc#L145) and other unused integral transformation code I find in `psimrcc`? I'm currently migrating the responsibility of storing memory expenses to the wavefunction, and getting rid of this dead code means less code to be responsible for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-656177024:19,clear,clear,19,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-656177024,1,['clear'],['clear']
Usability,"@hokru a simple example. Rather than having two functions:; ```; float add(float x, float y);; double add(double x, double y);; ```; you can implement one leaving the type as a template parameter:; ```; template <typename T> T add(T x, T y);; ```; then at call site one would write:; ```; float a = add(1.0, 2.0);; ```; and the compiler will instantiate the correct function for the types passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1261#issuecomment-433043047:9,simpl,simple,9,https://psicode.org,https://github.com/psi4/psi4/pull/1261#issuecomment-433043047,1,['simpl'],['simple']
Usability,"@hokru the idea is that the functional would simply specify:; ```; ...; ""dispersion"": {""type"": ""nl"", ""params"": {""b"": X, ""c"": Y}, ""citation"": ""My Tetrahedron Letters Paper""},; ...; ```; The type is obviously up for discussion - `nl == VV10` or `rVV10` etc. The builder would then set all the required parameters. If this gets merged before PR #922 , and there's at least one superfunctional that uses this path, I can fix the other PR to work with this new code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-369515257:45,simpl,simply,45,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-369515257,1,['simpl'],['simply']
Usability,"@hokru, @jturney, @AlexHeide, @susilehtola, @bennybp, and anyone else interested/knowledgeable about containers:. I've got a proof-of-principle building in GHA at https://github.com/psi4/docker-expt . It seems to be successful at building a linux docker container from a conda environment.yaml, uploading it to dockerhub (https://hub.docker.com/repository/docker/psi4/clockbox/general), running smoke tests on the image, building an apptainer from the docker, and doing nothing with the sif file. This is all based on a tutorial https://docs.docker.com/build/ci/github-actions/ (hence the `clockbox`es) and modeled on some files that Ben is using (operational docker file is the `Dockerfile-BPP` one). So far it's gone remarkably smoothly for me not knowing what I'm doing. At this point, other than cleaning up names, what else shall I do to improve it? If anyone wants edit access to the repo to fix it up, just let me know. A few points:; * I think we can stick with just Linux for the v1.8; * Where should the apptainer image be sent?; * Should there be a container for each py version or do ppl not care since layers are independent?. Thanks for any guidance and edits.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951:1155,guid,guidance,1155,https://psicode.org,https://github.com/psi4/psi4/issues/2951,1,['guid'],['guidance']
Usability,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248348353:97,simpl,simply,97,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353,1,['simpl'],['simply']
Usability,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182953987:317,clear,clear,317,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987,1,['clear'],['clear']
Usability,@jturney: I was just working on the test for this. Might wanna undo the merge and let me add the test?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1119#issuecomment-410690234:63,undo,undo,63,https://psicode.org,https://github.com/psi4/psi4/pull/1119#issuecomment-410690234,1,['undo'],['undo']
Usability,"@kannon92 I patched up the changes I suggested and fixed the frozen orbital issue. . Instead of building densities I switched back to the standard Cl/Cr mechanics as this will save you from computing the densities as `D = D I` and instead compute them as `D = Cl * Cr.T`. This will lower the density building step from `nact^2N^3` to `nact^2N^2` as `Cl/Cr` isnt really a Matrix, but a simple column vector. Please review the changes and make sure they look ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-264982081:385,simpl,simple,385,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264982081,1,['simpl'],['simple']
Usability,"@kratman Great. This is fine for now, but it would be nice to get some feedback on that topic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/334#issuecomment-205388501:71,feedback,feedback,71,https://psicode.org,https://github.com/psi4/psi4/pull/334#issuecomment-205388501,1,['feedback'],['feedback']
Usability,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:395,simpl,simple,395,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,1,['simpl'],['simple']
Usability,"@loriab @PeterKraus @andysim Thank you all for valuable advice!. I've computed 9 points as @loriab suggested:; ```; r=[1.08, 1.085, 1.09, 1.095, 1.1, 1.105, 1.11, 1.115, 1.12]; eng=[-108.679699, -108.679654, -108.6794818, -108.679188, -108.6787779, -108.6782569, -108.6776548, -108.6769276, -108.6761047]; ```. Fit now looks much better, as can be seen in the file [fit.pdf](https://github.com/psi4/psi4/files/3082472/fit.pdf). The results:; ```; Equilibrium Energy -108.67970105590722 Hartrees; Gradient 0.00000000002038; Quadratic Force Constant 24.8569214 MDYNE/A; Cubic Force Constant -505.1574283 MDYNE/A**2; Quartic Force Constant 17972.8369840 MDYNE/A**3. re = 1.080957 A check: 1.080957; r0 = 1.089667 A; we = 2454.7194 cm-1; wexe = -10.4449 cm-1; nu = 2475.6093 cm-1; ZPVE(nu) = 1229.9709 cm-1; Be = 2.0606 cm-1; B0 = 2.0278 cm-1; ae = 0.0656 cm-1; De = 0.0000058 cm-1; ```. seem quite good, except `wexe`, `ae` and `De`. Let's take [this paper](https://www.researchgate.net/publication/257738988_Spectroscopic_constants_and_molecular_properties_of_X2Sg_A2Pu_B2Su_and_D2Pg_electronic_states_of_the_N2_ion) as a reference, or let's see a summary of their results compared with results from other publications; ![header](https://user-images.githubusercontent.com/8162544/56172997-1b82fa80-5fec-11e9-970f-cc318f6e422d.png); ![sigmau+_reference](https://user-images.githubusercontent.com/8162544/56172944-fa220e80-5feb-11e9-9dc1-48b50ab25730.png). Apart from `wexe` and `ae`, which are clearly different from the results of the paper, `De` has a value of `0.0000058 cm-1 = 7.1910832e-10 eV`, which is significantly different from the reference results. What am I missing now?. And thank you for your help once more!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483463166:1491,clear,clearly,1491,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483463166,1,['clear'],['clearly']
Usability,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:784,undo,undocumented,784,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,1,['undo'],['undocumented']
Usability,"@loriab Correct: I believe there's a symmetrization step missing. I forget exactly where it was done before, but things like benzene are commonly retrieved with coords that are effectively C1. There's (molecule?) member function somewhere that allows symmetrization to a given tolerance (something really sleazy like 0.01A is needed, IIRC) so it's just a case of calling that. A simple STO-3G optimization could be a good followup step, but that's not essential.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965#issuecomment-382854005:379,simpl,simple,379,https://psicode.org,https://github.com/psi4/psi4/pull/965#issuecomment-382854005,1,['simpl'],['simple']
Usability,"@loriab Could potentially be [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/df_helper.cc#L1335) line. Could you change the schedule to simply `schedule(static)`? Either way we now have a reproducible error that can be fixed, thanks so much!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384625713:160,simpl,simply,160,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384625713,1,['simpl'],['simply']
Usability,@loriab I think if we clean boost::filesystem up now it will make the The Inversion(?) simpler.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235352099:87,simpl,simpler,87,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235352099,1,['simpl'],['simpler']
Usability,"@loriab I'm happy to switch the logic if necessary, and I would love to name it `undead_ghosts`, but the name should probably be strikingly clear at a glance since it's a required arg c-side. `include_ghosts` or `count_ghosts` maybe? . As for uses w/i our control, I'm not convinced we've switched everything that needs it, but the ones I _have_ switched from default I am confident in (current work on `scatter.cc` and the Hessian notwithstanding). If there's others we could ping for the other cases I'm all for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1355#issuecomment-444930702:140,clear,clear,140,https://psicode.org,https://github.com/psi4/psi4/pull/1355#issuecomment-444930702,1,['clear'],['clear']
Usability,@loriab Looks like Pybind11 #1121 is clearing up. Do you have thoughts on getting this or should I tweak up gau2grid to avoid 2.2 features?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347012820:37,clear,clearing,37,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347012820,1,['clear'],['clearing']
Usability,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:52,simpl,simple,52,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015,1,['simpl'],['simple']
Usability,"@loriab The external projects versioning policy is clear, but I am still confused. Am I not doing (1)? It is no problem for me to take care of fixing Psi4 build/test for new PCMSolver version and then let you know _via_ a PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-226109331:51,clear,clear,51,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226109331,1,['clear'],['clear']
Usability,"@loriab after some consideration with @lothian , I think the simplest course of action would be to simply not store the scalar variable. the unit question is somewhat nontrivial, plus there is the issue of scaling the rotation by the molecular weight of the system (which is handled very differently for solvated molecules, but is not accounted for in `ccresponse`). therefore the best way to make sure the user knows what they're getting is to let them compute it themselves from the mixed electric dipole-magnetic dipole response tensor. . following this logic, I also propose removing the scalar electric dipole polarizability, which is also easily computed using the trace of the stored tensor. I would update the new test to reflect this, just want to be sure this is an agreeable solution for everyone before I commit the changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962:61,simpl,simplest,61,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962,2,['simpl'],"['simplest', 'simply']"
Usability,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:1091,simpl,simpler,1091,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345,1,['simpl'],['simpler']
Usability,@loriab that is the only part Im not sure on. Feedback on indexing would be appreciated. I will open an issue for the lack of proper `compare_values` checking in the cc property codes. We also don't have tests for UHF properties I can ask @lothian about references and reference values.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259607756:46,Feedback,Feedback,46,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259607756,1,['Feedback'],['Feedback']
Usability,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-306291837:216,simpl,simply,216,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837,1,['simpl'],['simply']
Usability,"@loriab: Unfortunately, I don't think it's quite as simple as updating only the `tight-cc-pwcvXz.gbs` and `tight-cc-pwcvXz-ri.gbs` in the `primatives/`. The Psi4 `primatives/basis-cc-pvXz.gbs` files also disagree in a couple cases for these elements with the cc-pVXZ basis sets from Peterson's website. For Lithium cc-pVDZ, for example, it looks like we have basis from `T.H. Dunning, Jr. J. Chem. Phys. 90, 1007 (1989)`, but the higher angular momentum shells were updated in `Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011).`. So, in order to add the cc-pwCVXZ bases for Li, Be, Na, and Mg, I'm going to need the tight functions, but also update the `primatives/basis-cc-pvXz.gbs` files, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/727#issuecomment-305862396:52,simpl,simple,52,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305862396,1,['simpl'],['simple']
Usability,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-191759336:163,simpl,simple,163,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336,1,['simpl'],['simple']
Usability,"@psi-rking Just FYI this bug occurs with SCF/DFT or MP2 for a cheaper computation. For me, the primary concern is the symmetry mapping error is fairly generic. I think a bit clearer error message (if possible) would be sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203062097:174,clear,clearer,174,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203062097,1,['clear'],['clearer']
Usability,"@raimis This was working for me fine before, but when I do a clean install now on Windows 10 (1809) with Miniconda3, I get the following error when I try to run a simple test job:. `ValueError: Object arrays cannot be loaded when allow_pickle=False`. Are you seeing this? Happy to discuss on Psi4 Slack if real time discussion would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492353928:163,simpl,simple,163,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492353928,1,['simpl'],['simple']
Usability,"@robashaw I'm really sorry to hear that. You should focus on your health, of course, and I wish you a speedy recovery. I have been able to follow your examples very easily, so getting the library shoehorned into Psi4 is going very well so far. Even without derivatives it will be a big boost for us because of the efficiency gains from screening, so thanks for taking the time to write this and make it available. Thanks also for providing clear examples for me to follow. All the best. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526:440,clear,clear,440,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526,1,['clear'],['clear']
Usability,"@robparrish, any warnings or guidance on the major question above?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-209208010:29,guid,guidance,29,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209208010,1,['guid'],['guidance']
Usability,"@ryanmrichard : I am reading through the guidelines you wrote and I see that for unique_ptr, the C++14 syntax for construction will be:; `std::unique_ptr<Type> MyPtr=std::make_unique<Type>();`; whereas the syntax for shared_ptr is reported as:; `std::shared_ptr<Type> MyPtr=std::make_shared();`; Should it be `make_shared<Type>()` ? Or are the two really different ?. Thanks for these notes, by the way. I'm going to try to apply that to the new PK integral code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-212920383:41,guid,guidelines,41,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-212920383,1,['guid'],['guidelines']
Usability,"@ryanmrichard My changes were mostly to allow GTFock to work on separate processor subgroups. I used libparallel2 (or maybe libparallel) just to create communicators. I did not really try any of the task schedulings. I guess I really only use boost::mpi, but it should be a simple change to just normal MPI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248339239:274,simpl,simple,274,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248339239,1,['simpl'],['simple']
Usability,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:855,guid,guide,855,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,1,['guid'],['guide']
Usability,"@sbembenek18 yes, this issue can either happen at random during the intermediate of solving SCF or by the physics of the ground state solution. If the issue is the latter, then you can't run the calculation with Psi4 at present. Also, I am not sure why you are using Dunning type basis sets for DFT; the pcseg-n or def2 series are much more efficient for SCF level calculations. I was able to converge the system in the def2-SVPD basis; I do not know if it converges in def2-TZVPD or def2-TZVPPD but I expect these solutions to be at least the same quality as the aug-cc-pVTZ result. Maybe the level splitting won't happen, maybe it will; you never know till you try. You may also to try out varying the occupations set by the initial guess, as well as testing other codes. If the calculation ran in version 1.5, the issue is not about the character of the ground state but simply that something has changed in the SCF code. If you fix the right occupations, the master branch should be able to find the same solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594#issuecomment-1149297603:874,simpl,simply,874,https://psicode.org,https://github.com/psi4/psi4/issues/2594#issuecomment-1149297603,1,['simpl'],['simply']
Usability,"@similt I just added options to compute only specific SAPT0 terms (e4070d0024742579a445e084da9dde078310094d). You should be able to use it if you pull Psi4 latest version from Github. I will update the manual shortly, but in the meantime, here is how it works.; The three options are; - sapt0_e10; - sapt0_e20ind; - sapt0_e20disp; If none of these options is specified, SAPT0 proceeds as usual. If one or more of these is specified, only the specified terms are computed. Be aware that the driver will still perform the 3 SCF computations for the monomers and the dimer, and that all preparative work (computing integrals) will always be done.; Also, the \delta_{HF} term is computed from first- and second-order terms, so if some of them are not computed, \delta_{HF} will be wrong. Similarly, exchange scaling is computed from first-order exchange, so it will not be valid if first-order exchange is not computed. However, you can easily compute these terms (see the manual for their definition) from gathering all SAPT0 data from different output files. Simple example to compute only dispersion terms:; molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess sad; sapt0_e20disp true; }. energy('sapt0'). Finally, if redoing the 3 SCF is too much of a hassle, you could write the final orbitals and feed them to the SCF so that they converge in 1 iteration. It's not really ideal but it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-178215766:1057,Simpl,Simple,1057,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-178215766,1,['Simpl'],['Simple']
Usability,"@susilehtola, @robparrish was the original author of the code, but I believe that the integrals are recomputed whenever needed. Rob can correct me if I am wrong. The algorithm is extremely simple and could use much more improvements.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224450826:189,simpl,simple,189,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224450826,1,['simpl'],['simple']
Usability,"@taylor-a-barnes I don't see any special issues in our Azure DevOps internals. Can you post the build log here?. @loriab @raimis Taylor is trying to reproduce Psi builds on his own Azure DevOps dashboard to debug the above issue, but even the simple Azure steps like check python version fail. Any ideas what this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-511528510:243,simpl,simple,243,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511528510,1,['simpl'],['simple']
Usability,"@zachglick this is just about how you calculate a range-separated functional. The point is that when you have a functional that has A% exact exchange at the short-range and B% exact exchange in the long-range, you can evaluate it either as B% full Hartree-Fock exchange and (A-B)% short-range exchange, or as A% full Hartree-Fock exchange and (B-A)% long-range exchange. Psi4 is currently doing it the latter way. My intuition is that the former way of using short-range integrals would be more efficient for screening, since fewer terms can contribute at the short range and the more numerous long-range terms are killed by the range separation, but it might also be that since exchange integrals die off more rapidly in the long range than Coulomb integrals, the evaluating the long-range part is faster than the short-range part. Of course, if you have both long- and short-range exchange, then you anyway have to evaluate the full exact exchange and the speedup isn't going to be mind-blowing. But, some functionals like HSE are short-range-only, and there it might make a difference if you don't have to evaluate the long-range part at all. I guess the optimal implementation would include both and pick on a case by case basis: e.g. if you only have short-range exchange, then just do the short-range part and skip the full exact exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-497468619:417,intuit,intuition,417,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497468619,1,['intuit'],['intuition']
Usability,"A [long-requested feature](http://forum.psicode.org/t/scf-level-shift/938): implement level shifts in Psi4. This is an even simpler to implement than [GDM](#2214). What is needed is to edit the `form_C()` functions in RHF, UHF, and ROHF by replacing e.g.; ```; diagonalize_F(F_, C_, epsilon_);; ```; with the diagonalization of an effective Fock matrix `Feff = F + shift S*Cvirt*Cvirt.T*S` where `shift` is the level shift (should be `0.5` by default), when the DIIS error is larger than the set threshold. This would also make the SCF solver smarter, see #888.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2216:124,simpl,simpler,124,https://psicode.org,https://github.com/psi4/psi4/issues/2216,1,['simpl'],['simpler']
Usability,"A post-DDD project. `normal_modes_write` is currently an option in the `findif` module. Back when all of Psi's hessians were finite difference, this was reasonable. But now, that Psi has RHF/UHF analytic hessians and is getting DFT analytic hessian technology, not all normal mode computations go through finite difference. This option should be moved from the `findif` ""module."". Instigating this issue is a recent [forum issue](http://forum.psicode.org/t/output-molden-normal-modes-file-in-jupyter-notebook/2006/6) where a user thought `normal_modes_write` should be accepted as a keyword argument to `driver.py:frequencies`. I agree. This may guide ideas on where we should move this option _to_.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2055:646,guid,guide,646,https://psicode.org,https://github.com/psi4/psi4/issues/2055,1,['guid'],['guide']
Usability,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552#issuecomment-267762083:2,simpl,simple,2,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083,1,['simpl'],['simple']
Usability,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531:2,simpl,simple,2,https://psicode.org,https://github.com/psi4/psi4/issues/531,1,['simpl'],['simple']
Usability,"AS paper, they have written formulae for their version of the 3-index integrals.; ![image](https://user-images.githubusercontent.com/25001874/223633100-63624cd1-d992-4dbe-84c5-73cdeece4536.png). The exact no. of rows is arbitrary, in the sense it depends on the modeller. In the case of the OrbNet-Equi paper, I checked their uploaded feature file, and it has 60 rows. i.e. the shape for **each atom** comes up to: `(60, num_basis_fn, num_basis_fn)`. ; this agrees with their explanation just below eqn 14, where their choice of `n` (and hence `gamma`) leads to a total of `16 x 1 + 8 x 3 + 4 x 5 = 60` unique functions for their ""auxiliary Gaussian-type basis functions"" in eqn 14. an important detail, is that I just want the matrix for a **single atom for each element**, which is why `num_basis_fn` is just counting all the basis functionsfor 1 atom. and they shouldn't depend on the context of the atom (i.e. what molecule it is part of). . to be extra clear, i've uploaded their published 3-index overlap integral pytorch tensor here: https://drive.google.com/file/d/1aF2QvfL4GTu17W35Rzv7yLo2gI_05Wx5/view?usp=share_link ; it is a dictionary indexed by the element symbols. their basis set is the semi-empirical tight-binding`GFN1-xTB`. for example, hydrogen has 2 basis functions in `GFN1-xTB`, so the shape of their 3-index integral matrix is `(60, 2, 2)`.; ```python; import torch; three_idx_integrals = torch.load(""orbnet2_overlap3idx.pt""); print(three_idx_integrals[""H""].shape); >> torch.Size([60, 2, 2]); ```. I think the best way to go about this would be to just re-implement the formulae for calculating these 3-index integrals, in python (since i'm most familiar with python), but to allow setting the `gamma` parameter so that I can create as many rows as I want for the 1st dimension. This should be easier than trying to change some inner part of `psi4` just to have this functionality. Could anyone give any advice, or point me into some possible reference code to start things of",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892:2114,clear,clear,2114,https://psicode.org,https://github.com/psi4/psi4/issues/2892,1,['clear'],['clear']
Usability,"According to [the forums](http://forum.psicode.org/t/windows-anaconda-nightly-build-failing-on-sapt0-calculations/2353/4), the following simple input file raises `PSIO_ERROR: unit = 193, errval = 8` AKA trying to close file 193 when it's not even open:. ```; memory 4 GB. molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0'); ```. Possibly of importance is that the reporter supplied `-n 10` to the computation, so threading may be involved.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2342:137,simpl,simple,137,https://psicode.org,https://github.com/psi4/psi4/issues/2342,1,['simpl'],['simple']
Usability,"Acknowledged. Two problems, one solved, one not. * First issue is for v1.5 you have to grab a certain libint2 build as described here: https://github.com/psi4/psi4/issues/2593#issuecomment-1145503791 Probably you didn't get to the segfault the ""newest"" L2 would cause because the missing symbol got in the way. :-(; * Second issue is the missing symbol. I've seen it myself with py38. (It can incidentally be solved by preloading `libirc` if you've an Intel installation lying around (`LD_PRELOAD=/psi/gits/software/intel/oneapi/compiler/2021.1.1/linux/compiler/lib/intel64_lin/libirc.so python -c ""import psi4""` is clean), but that's not a worthy solution. But clearly the missing symbol wasn't happening in the earlier issue. Current theories:; * some newer version/build of a package got uploaded in the past week or so that throws off this env; * py37 _did not_ get updated versions of packages on the psi4 channel with the 1.6 release, so it's getting old, compatible versions of some psi4-channel based package and is fine, while py38 and py39 got a fresh package and got broken.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596#issuecomment-1151532059:662,clear,clearly,662,https://psicode.org,https://github.com/psi4/psi4/issues/2596#issuecomment-1151532059,1,['clear'],['clearly']
Usability,"Actually after double checking I was completely wrong on the symmetry; explanation. Sorry for any confusion I caused. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:26 AM, Justin Turney justin.turney@gmail.com; wrote:. > The numbers printed by the sointegral plugin are not the symmetry blocked; > indices but the absolute indices (non-symmetry blocked). The order of the; > absolute indices come directly from the basis set. For your input file the; > the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; > A1 (1s on carbon), so by symmetry this integral does not exist. The; > transformation matrix for obtaining symmetry blocked integrals is obtained; > with:; > ; > // prints the transformation matrix.; > soBasis->petite_list()->sotoao()->print();; > ; > What you probably want to look into is printing the {p,q,r,s}irrep and; > {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; > post-symmetry-blocking-transformation.; > ; > You're right, the difference between absolute and symmetry blocked indices; > could be better explained. With respect to two-electron integrals, Psi; > never reports integrals of value zero to prevent wasting CPU cycles, again; > this could be made clearer.; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com; > wrote:; > ; > > OK, found it. The overlap is zero for those orbitals.; > > ; > > But I was under the impression that sointegrals gave me all unique; > > integrals because of symmetry, including those that are zero due to the; > > overlap. This should be made clearer in the docs.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/68#issuecomment-73901139:1269,clear,clearer,1269,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73901139,2,['clear'],['clearer']
Usability,Actually clear vectors in Molecule,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2864:9,clear,clear,9,https://psicode.org,https://github.com/psi4/psi4/pull/2864,1,['clear'],['clear']
Usability,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301289886:161,simpl,simple,161,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886,1,['simpl'],['simple']
Usability,"Actually, we have CI_TYPE but not CEPA_TYPE now (or will once https://github.com/psi4/psi4/pull/306 merges in), so 5: SCF_TYPE, MP2_TYPE, MP_TYPE, CC_TYPE, CI_TYPE. The first has many algorithms, the others just DF/CD/CONV. There's also a few strays: DCFT_TYPE and OPT_TYPE. For simple calculations, a SCF_TYPE and CORRELATION_TYPE, as you suggest, works. But I'm concerned about targeting a complete options set for composite jobs (e.g., SCF + extrapolated MP2 + CCSD(T) delta correction). There, you might want the first two terms DF and the last CONV. When I started going crazy with _TYPE keywords, I had one for each method (e.g., MP4SDQ_TYPE). The current lineup is a compromise between broad (CORRELATION_TYPE) and specific (LCCD_TYPE), and I think I'd like to see how the use-cases develop along that spectrum. Thanks for thinking about this, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-195060159:279,simpl,simple,279,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-195060159,1,['simpl'],['simple']
Usability,Add simple print statements for scratch directory,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1731:4,simpl,simple,4,https://psicode.org,https://github.com/psi4/psi4/pull/1731,1,['simpl'],['simple']
Usability,Added some rough guidelines to describe the new PR/commit workflow.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254:17,guid,guidelines,17,https://psicode.org,https://github.com/psi4/psi4/pull/254,1,['guid'],['guidelines']
Usability,"Adding `/opt/intel/lib` to envvar `DYLD_LIBRARY_PATH` will probably fix your immediate problem.(The `-DOpenMP_LIBRARY_DIRS` can only influence how the lib gets built, not the runtime env.). A greater concern is that your psi and the numpy you use in running it need to have the same blas (hopefully MKL) libraries and the same threading (omp/iomp5 vs. gomp; gomp *strongly* discouraged), and gcc _really_ wants to link gomp in there. If you do get a working compile, make sure to run a simple test (like tu1) again with multiple threads to make sure it gives the correct answer before declaring victory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614671116:486,simpl,simple,486,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614671116,1,['simpl'],['simple']
Usability,"After discussion with Lori, work on getting this PR through will resume after MQM. We also have a plan to deal with plugin incompatibilities. Feel free to review earlier if you wish.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1163433170:65,resume,resume,65,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1163433170,1,['resume'],['resume']
Usability,"After further investigation, I've learned a few things. First, I was mistaken about the PCG convergence guarantees. Each iteration guarantees that you are closer to the correct solution vector. It does _not_ guarantee that your residual RMS is smaller. For a simple model, just think of z=500x^2+y^2. (1, 0) is closer to the minimum than (0, 10), but (0, 10) gives a smaller value of `z`. In this particular case, you are indeed getting close to the right `x` value, even as your residual increases. Second, when I throw exact MO hessian diagonalization at the problem, they aren't converging well either. The problem is that the MO hessian often has small, negative eigenvalues along the optimization path, causing steps that can be large and energy increasing. While I think this points out a need for more robust convergence algorithms, the behavior I'm seeing does not need an implementation error to be explained. As such, I'm inclined to close this issue and mark an item on the developer wishlist. #2183 is worth separate investigation. @susilehtola, any objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790:34,learn,learned,34,https://psicode.org,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790,2,"['learn', 'simpl']","['learned', 'simple']"
Usability,"After https://github.com/psi4/psi4/issues/86 and https://github.com/psi4/psi4public/issues/110 settled, ; - [ ] create conda package with python 3.4. Should be as simple as changing the `conda-recipe/psi4/meta.yaml` dependencies.; - [ ] add to Psinet's duties by modifying/copying stuff in nightly folder so package built nightly and results sent to testboard",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/111:163,simpl,simple,163,https://psicode.org,https://github.com/psi4/psi4/issues/111,1,['simpl'],['simple']
Usability,"After installing the psi4, I ran a simple test. By looking at the output file, I found that the program seemed to stop after reading the contents of the input file, the program did not stop, but it did not continue and did not report an error. Also, there were no errors during the compilation of psi4, and it's not clear to me what went wrong.; ![1678955019941](https://user-images.githubusercontent.com/99332231/225558169-d53d12b0-5c8b-4f6e-86e7-bb18e630ec4e.jpg)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2900:35,simpl,simple,35,https://psicode.org,https://github.com/psi4/psi4/issues/2900,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"After memory profiling, I've discovered that this PR _improves_ memory efficiency. For my 384 basis function DF-DCT system, memory requirements plummet from 14.0 GB to 7.8 GB. I've run some tests on a single benzene system instead of a two benzene system, and I understand the behavior:. This isn't due to shifting to Python, but shifting how we clear some large arrays. The C-DIIS code uses `clear()`, which [doesn't necessarily de-allocate the memory.](https://www.cplusplus.com/reference/vector/vector/clear/) PyDIIS makes that not our problem. On taking the existing C-side code and forcibly de-allocating the memory, I observe a memory profile indistinguishable from the PyDIIS one. The large change in memory is most likely because C-DIIS was keeping the allocation space for multiple T2 tensors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260:346,clear,clear,346,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260,3,['clear'],['clear']
Usability,"After some deep digging, the source of the `nan`s has been identified!. In the function `compute_numeric_overlap` in DFJCOSK.cc, we have this block of code:; ```; for (size_t p = 0; p < npoints_block; p++) {; for (size_t k = 0; k < nbf_block; k++) {; X_blockp[p][k] = point_values->get(p, k) * std::sqrt(w[p]);; }; }; ```. which is meant to compute a part of the X matrix, as defined in Eq. 2 of [this paper.](https://doi.org/10.1063/1.3646921) Problem is, with a ROBUST grid pruning scheme and 146 spherical points, some of the weights w seem to evaluate as negative. The resulting square-rooting of these weights during computing X_blockp, then, is what leads to the `nan`s that were observed. After some discussion with @hokru, it seems that Psi4 grid weights can indeed be negative as expected behavior, so this is a problem that could show up with other constructed grids fed into COSX. This leaves the question - how do we best handle this? One obvious start is to simply have COSX throw an exception if a grid with negative weights is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376:971,simpl,simply,971,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376,1,['simpl'],['simply']
Usability,"After wading into `size_t` guidance, the dangers of mixed signed/unsigned, and the deeper troubles of #1764 that need changes to the tensor classes, not just the dfocc.h `int`s, and not just the memory estimates, I think the `long long int` serves nicely for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212291824:27,guid,guidance,27,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212291824,1,['guid'],['guidance']
Usability,"Agreed that something needs to happen to make this simpler. I like the syntax for the global option given. Of the three schemes given for local options, I'd prefer scheme 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259730447:51,simpl,simpler,51,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259730447,1,['simpl'],['simpler']
Usability,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:34,clear,clear,34,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787,1,['clear'],['clear']
Usability,"Ah yes, this is an issue. Neither of the three works as one would expect them to work: the first two don't do anything as the fctl stage is not specified, and the third one does a full extrapolation. I'm not sure what the first two cases should return - neither of those requests anything resembling a ""total energy""; ; - aborting with a warning would be in order, ; - or we can do the same as for correlated methods, where the fctl step is implied as a non-extrapolated one with highest. For the third case, this is clearly a bug which I'll work on fixing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-965333017:517,clear,clearly,517,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-965333017,1,['clear'],['clearly']
Usability,"Ah, I run a lot of the CI code that hasn't been touched since Psi3 through clang-format with google style options so that I can read it a bit better. I do wish the ignore white-space option was available online as well. I do like the idea of a style guide for the code, but it isn't particularly high on any list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/372#issuecomment-217654331:250,guid,guide,250,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217654331,1,['guid'],['guide']
Usability,"Ah, I see it now. Just the decimals were not copied correctly in the email. > On Jan 8, 2016, at 5:04 PM, Daniel Smith dgasmith@icloud.com wrote:; > ; > It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?; > ; > > On Jan 8, 2016, at 4:54 PM, ssh2 <notifications@github.com <mailto:notifications@github.com>> wrote:; > > ; > > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170141043:479,learn,learn,479,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170141043,1,['learn'],['learn']
Usability,"Ah, got it. I don't have a good reference unfortunately, but a good rule of thumb is to assume that C++ is not initializing memory for you. Assigning to an entire array can be quite expensive, so it's left to the programmer. Moreover, you may be assigning values to it later, which would render any compiler-assigned initial value moot. The old `init_int_array` and friends were inherited from Psi3: they take care of allocating *and* zeroing the memory for you (using `malloc` and then `memset`) so they made things a little more convenient for the programmer. The modern C++ equivalent is to use `std::vector<int> myVec(nElements);` That simply makes a vector of length `nElements`, which can be passed to any function expecting an `int *` by passing `myVec.data()` or `&myVec[0]`. Note that even this way of constructing a vector doesn't initialize the data at all: to do that you need to either `std::fill(myVec.begin(), myVec.end(), 0);` or, better still, tell the compiler which value to use to construct the vector with `std::vector<int> myVec(nElements, 0);` . You can see in my commit that I only zeroed the first (index 0) element. The reason for that is because the loop over irreps starts from 1 in that code, so indices 1+ are correctly assigned. Index 0 was not being touched, so it retained whatever value resulted from the call to `new` that created the array. I hope this helps - please let me know if there's anything I can clarify at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1534#issuecomment-489816250:640,simpl,simply,640,https://psicode.org,https://github.com/psi4/psi4/pull/1534#issuecomment-489816250,1,['simpl'],['simply']
Usability,"Ah, yes, I'm right (for once). The `ccenergy` timer is stopped on the line I linked. Then the `exit_io` call on the line below attempts to stop it again, triggering the bug. The fix is to delete the line that I linked. It will be good practice to learn the pull request process for anybody who wants to implement it. Also, kudos for the minimal working example in your bug report @TiborGY - it really helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864#issuecomment-612258144:247,learn,learn,247,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-612258144,1,['learn'],['learn']
Usability,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:124,simpl,simple,124,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"Ah, yes, it would require changes to libDIIS. It's not clear to me that it would help, so I agree with removal too - thanks for the clarification",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783#issuecomment-575627958:55,clear,clear,55,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575627958,1,['clear'],['clear']
Usability,"Ahhh. Commenting it out was a bad idea indeed. Thank you for pointing this out @susilehtola. It looks like the simplest way I can enable the functionality I need without breaking other things is to add a new protected variable `persistent_external_potentials_` and associated public methods `push_back_persistent_external_potential()` and `clear_persistent_external_potential()` to the `HF` class. Then the persistent potentials will not be cleared at each iteration. However, then we would have three mechanisms for doing nearly the same thing: `HF::external_potentials_` for dealing with PCM/DDX/PE, `HF::persistent_external_potentials_` for my user-supplied one-electron operators, and the `ExternalPotential` class for external point charges. Perhaps a better strategy would be to extend the `ExternalPotential` capabilities? It does seem to already allow for a diffuse charge density expanded in an auxiliary bases, but I couldn't find an example that uses this option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3228#issuecomment-2391707920:111,simpl,simplest,111,https://psicode.org,https://github.com/psi4/psi4/pull/3228#issuecomment-2391707920,2,"['clear', 'simpl']","['cleared', 'simplest']"
Usability,"Alright I have extended two tests none of the quicktests run through ccdensity but I ran both of these and the passed. The changes don't seem to mess up comparison to output.ref so I didn't change them. . Pending feedback about how to index the roots I have followed what is in place for eom-cc ES energies. . `CC DIPOLE X` is the ground state. `CC ROOT 1 DIPOLE X` is first ES, and so on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260009547:213,feedback,feedback,213,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260009547,1,['feedback'],['feedback']
Usability,"Alrighty, this one should be ready to go now. I tried to cook up a simple test using f orbitals, but they're all too costly; in the end I just added a permutation to the atom ordering in our existing cc-pVDZ water test, because this is enough to reveal the bug. The fact that we've always had a working cc-pVDZ test case shows how subtle the bug is; the affected d components in water must be zero by symmetry. I did have a distorted water in my test suite to check that case, but didn't detect problems. Oh well, live and learn I guess. This should be a trivial review, and it clearly helps to address a couple of high priority tickets, so please have at it whenever you get a chance. Sorry again for the error. Next time you see me, I'll be at a chalkboard, writing ""I will not cut and paste"", à la Bart in the Simpsons opening credits. Except, instead of writing it, I'll be cutting and pasting it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361080182:67,simpl,simple,67,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361080182,3,"['clear', 'learn', 'simpl']","['clearly', 'learn', 'simple']"
Usability,"Ambit's easy, `conda install pyambit -c conda-forge`. There's nothing in psi that actually links to it, so it's fine to simply install psi4 binary and ambit binary into the same env. For CheMPS2, are you wanting to run chemps2 through psi4? That's easy to enable if you're building psi4 from src. But there isn't a good sol'n for using psi4 binary. I'd suggest compiling chemps2 from src if you want chemps2 w/o psi4 linkage. Or wait until we finally re-plugin-ize it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854:120,simpl,simply,120,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854,1,['simpl'],['simply']
Usability,Amend #3043 by allowing a longer hostname and simplifying the code.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3044:46,simpl,simplifying,46,https://psicode.org,https://github.com/psi4/psi4/pull/3044,1,['simpl'],['simplifying']
Usability,"An error which is very high on my to-fix list, but where the fix is very involved. DF-DCT properties as present are not correct. I've tested against my own Python code and the Psi code and found disagreements in the fifth and sixth decimal place between finite difference and analytic properties. I've spoken with the code authors, and we are aware of two sources of disagreement.; 1. For gradients, the RDMs are contracted against the conventional derivative integrals, not the density fitted derivative integrals.; 2. Due to a subtle point in the derivation, the DF-DCT cumulant stationarity conditions are not variational minimization of the energy, as they are in conventional DCT. Accordingly, you're missing a cumulant response term for gradients and other properties. The fix for point 1 will hopefully just be marking the wavefunction as density fitted and leave the contractions to the `Deriv` object. However, DCT at present interferes with RDM processing in `libtrans`, so the fix will be likely be more involved. The fix for point 2 is not clear. I'm aware of three options:; * Change the DF-DCFT stationarity conditions to be variational minimization of the energy; * Change which terms are to be contracted against JKFIT integrals and which against RIFIT integrals, so the stationarity conditions are ""fixed"" automatically; * Add a cumulant response term. (Please don't make me do this.). I favor option B, but it'll take time to see what B does to energies.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579:1052,clear,clear,1052,https://psicode.org,https://github.com/psi4/psi4/issues/1579,1,['clear'],['clear']
Usability,"And here, I learn why it's important to be careful when force-pushing commits after a rebase. CI should be okay after this, though?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2043178677:12,learn,learn,12,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2043178677,1,['learn'],['learn']
Usability,"And if you're testing stuff and playing around, that 5 seconds is also very very annoying. . But again, any reason why simply using `high_resolution_clock` from Boost/C++11 isn't good enough? On most systems, the accuracy will be more then enough for practical purposes. The actual sampling to determine the accuracy can be activated by a user-option?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98495163:119,simpl,simply,119,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98495163,1,['simpl'],['simply']
Usability,"And to be clear, the following works fine. I just don't understand why CMake doesn't do this for me. I blame CMake devs for this btw, not PSI4 friends. ```; cmake .. -DLAPACK=""-framework Accelerate""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-35448161:10,clear,clear,10,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35448161,1,['clear'],['clear']
Usability,Another reason to move molecule parsing py side so can have nicer error messages and exceptions. Potentially also simplify efp initialization being all over the place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/731#issuecomment-306527489:114,simpl,simplify,114,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-306527489,1,['simpl'],['simplify']
Usability,"Apart from #442, the PRs are normally quite small so it's not much work to review them. I think we should have at least three or four signees, especially given that most of the recent PRs have had feedback from many developers anyway. If we start high, we can reduce the demands if it becomes too burdensome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/459#issuecomment-238314013:197,feedback,feedback,197,https://psicode.org,https://github.com/psi4/psi4/issues/459#issuecomment-238314013,1,['feedback'],['feedback']
Usability,"Apologies. I could swear I ran all references at 1.0e-12, but clearly I must have messed them up for sapt-ecp.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-455442557:62,clear,clearly,62,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-455442557,1,['clear'],['clearly']
Usability,"Are we clear to remove those four tests, then?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2234#issuecomment-925838802:7,clear,clear,7,https://psicode.org,https://github.com/psi4/psi4/issues/2234#issuecomment-925838802,1,['clear'],['clear']
Usability,"Are you describing that `c1_deep_copy` on R/U/ROHF wfns are fine b/c https://github.com/psi4/psi4/blob/1ecf33397370ebaa3b2ec14dd276c22519c66ed4/psi4/src/psi4/libscf_solver/rhf.cc#L999-L1002 etc. in the derived classes copy over the orbitals; whereas, `c1_deep_copy` on say, CC, is lacking because those derived wfn classes haven't extended the method?. This makes sense historically since `c1_deep_copy`'s purpose was simply transitioning a symmetry-using SCF wfn into a c1-only post-SCF module. But I can see its deficiencies beyond that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874:418,simpl,simply,418,https://psicode.org,https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874,1,['simpl'],['simply']
Usability,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1551,simpl,simply,1551,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,1,['simpl'],['simply']
Usability,"As a note: a great first step is to simply reproduce the C side procedure Python side. After that transformation we can add more complexities to the code. . -Daniel Smith; Sent from my iPhone. . > On Dec 22, 2017, at 17:31, Lori A. Burns <notifications@github.com> wrote:; > ; > Is something like the attached relevant to what you're talking about, @psi-rking ? form A and form B are two geometries for a system. If useful, I've got Fortran code for finding angles and rotating Hessian accordingly.; > ; > ; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-353685496:36,simpl,simply,36,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-353685496,1,['simpl'],['simply']
Usability,"As for `ghosts_join` versus `zero_ghost`, when you first used the phrase `zero_ghost` @loriab it was immediately clear what it would mean in both cases- you know exactly what you're getting when it's `true` or `false`. I feel like `ghosts_join` takes just a little bit more thought. Maybe I'm just a bit simpler-minded, I'm happy to change it if anyone else thinks `ghosts_join` is more clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/990#issuecomment-389223624:113,clear,clear,113,https://psicode.org,https://github.com/psi4/psi4/pull/990#issuecomment-389223624,3,"['clear', 'simpl']","['clear', 'simpler-minded']"
Usability,"As for sow/reap, I don't know what it's getting replaced with exactly, but I'm determined to do away with it, and the current tech doesn't work in py3 (and won't work w/pyoptking), so I'd say clear it away (from `driver.py` -- leave the stuff in p4util).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-432268177:192,clear,clear,192,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-432268177,1,['clear'],['clear']
Usability,"As it never worked before, it is also not crucial to add this again. For large grids the OpenMP speedup at this place would be nearly perfect, because it parallelizes quite trivially. It would lead to a linear speedup in something like an ESP charge fit (the sample code does thankfully not use this function yet, but a rather very slow write to disk, read from disk cycle, so fallout should be quite minimal). It would be quite simple for me to add threading back to this function if required. The only thing necessary (in my opinion, need to check the code better) would be to make the buffer object in OneBodyAOInt thread-local.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1900#issuecomment-633045614:429,simpl,simple,429,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633045614,1,['simpl'],['simple']
Usability,"As mentioned on Slack (#newdev 2018/03/27), RHF tests with Au+ and Cu+ yield the same total energies in G09 and Psi4 (8 decimals) with both CCSD(T) and HF using the cc-pvdz-PP basis sets. These basis tests both have `0.0` coefficient in the `N+1`th shell. The orbital eigenvalues match as well. Unless we need more testing, I'm satisfied with this - the discrepancy in the ionisation energy is clearly coming from the open-shell part (and likely not from the basis set).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376595463:394,clear,clearly,394,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376595463,1,['clear'],['clearly']
Usability,"Assume I have the electron density represented as the expansion coefficients under an DF auxiliary basis (which come from machine learning prediction). Although the kinetic energy cannot be evaluated without an AO basis, theoretically the Kohn-Sham effective potential has no kinetic term and should be able to be constructed from DF density (assume we are using PBE). Then we might restart the DFT from this effective potential. Is this possible for psi4? And if so, may I have some hints on how to do this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3070:130,learn,learning,130,https://psicode.org,https://github.com/psi4/psi4/issues/3070,1,['learn'],['learning']
Usability,"At the last developers' workshop, we decided to close the longstanding psi4/psi4private repo. However, first we want to make sure we're not losing any good info. The Plan is below. People mentioned need to sign off on the deletion of branches or the closing of issues. - [ ] clear away old branches; - no commits ahead; - [ ] [ccenergy](https://github.com/psi4/psi4private/tree/ccenergy); - [ ] [cctransort](https://github.com/psi4/psi4private/tree/cctransort); - [ ] [rhf_ccsd_t_gradient](https://github.com/psi4/psi4private/tree/rhf_ccsd_t_gradient); - [ ] [ccwavefunction](https://github.com/psi4/psi4private/tree/ccwavefunction); - [ ] [roa](https://github.com/psi4/psi4private/tree/roa); - [ ] [eom_overlap](https://github.com/psi4/psi4private/tree/eom_overlap); - [ ] [optking](https://github.com/psi4/psi4private/tree/optking); - [ ] [ccs](https://github.com/psi4/psi4private/tree/ccs); - [ ] [higher_level_dcft](https://github.com/psi4/psi4private/tree/higher_level_dcft); - [ ] [newbasis](https://github.com/psi4/psi4private/tree/newbasis); - [ ] [broken_code](https://github.com/psi4/psi4private/tree/broken_code); - [ ] [onetep](https://github.com/psi4/psi4private/tree/onetep); - [x] [USAPT](https://github.com/psi4/psi4private/tree/USAPT) @jgonthier ; - [ ] [psi4sofix](https://github.com/psi4/psi4private/tree/psi4sofix) @bennybp; - [ ] [fancy_opts](https://github.com/psi4/psi4private/tree/fancy_opts) @bwb314 ; - [x] [roberto/alt-VPCM](https://github.com/psi4/psi4private/tree/alt-VPCM) @robertodr ; - [x] [VPCM](https://github.com/psi4/psi4private/tree/VPCM) @robertodr ; - [x] [ambit](https://github.com/psi4/psi4private/tree/ambit) @jturney ; - [x] [Rob-pcm](https://github.com/psi4/psi4private/tree/Rob-pcm) @robertodr ; - [ ] [andysim](https://github.com/psi4/psi4private/tree/hessians) @andysim ; - [x] [USAPT_parallel](https://github.com/psi4/psi4private/tree/USAPT_parallel) @jgonthier ; - [x] [PsiAPI](https://github.com/psi4/psi4private/tree/PsiAPI) @ryanmrichard ; - [x] [pc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/508:275,clear,clear,275,https://psicode.org,https://github.com/psi4/psi4/issues/508,1,['clear'],['clear']
Usability,"At the moment there is no publicly accessible MPI routines in Psi4 (they are coming soon) so using MPI is superfluous. Boost MPI will be a requirement in the future when MPI is selected. That being said, it should have automatically compiled for you when the remainder of Boost was compiled. I would simply recommend removing the `--mpi` flag and recompiling (I strongly suggest blowing away your build directory).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201#issuecomment-169689686:300,simpl,simply,300,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169689686,1,['simpl'],['simply']
Usability,"Awesome, that's very clear. Thank you all for the timely and descriptive answers!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827#issuecomment-339771034:21,clear,clear,21,https://psicode.org,https://github.com/psi4/psi4/issues/827#issuecomment-339771034,1,['clear'],['clear']
Usability,"Based on the discussion we had today in the Psi4 dev meeting, it has been decided that the best way to fully solve this issue is simply to have COSX error out when a grid with negative weights is encountered. This is what https://github.com/psi4/psi4/pull/2906 implements, so once that PR is merged into Psi4, this issue can be closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552:129,simpl,simply,129,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552,1,['simpl'],['simply']
Usability,"Based on your writing, I assume you're a student researcher. Posting error messages _like this_ is not a good way to get help. Large input files like this make it difficult for developers to find the actual problem. It's best practice to simplify the input file as much as possible while still making the error clear. Sometimes, doing that can tell _you_ where the problem is. If you don't know how to do this kind of troubleshooting, consult your seniors in your research group or your professor. I've played around with your latest input file and can confirm that you have made a fairly straightforward mistake, but you've discarded important information. As an exercise, please post a _simplified_ input that reproduces your problem, and a _complete_ error message. Once you've done that, I'll update the error message to be more explicit and offer some advice on how to bypass this. (Though once you understand the error, it's fairly straightforward.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955:238,simpl,simplify,238,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955,2,"['clear', 'simpl']","['clear', 'simplify']"
Usability,"Because of the switch from `QMMM()` obj to `embedded_charges` arg (req'd for DDD), all current inputs will break anyway. Upgrade guidance is already in place: https://github.com/psi4/psi4/pull/1351/commits/232d0378f893d619ecf16d95fc59281e948fbb23#diff-6c69f4c34c8ea7d7015fd7abef2e5a88R123 . Since reason can't guide one to a sensible default, I'm against the units of Mol influencing anything outside the `molecule {...}` block. I agree that the `Q X1 Y1 Z1 CHARGE1` is appealing, but I think we want to address this as a whole with all the multipoles. Andy, Daniel, and I got started on this for a day last September, then L2 took over. Schema started over at https://github.com/MolSSI/QCElemental/pull/133 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625894875:129,guid,guidance,129,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625894875,2,['guid'],"['guidance', 'guide']"
Usability,"Before this gets merged, do we want to also do the `set guess file` change in it? It's sort of in the spirit of this PR. That of course requires feedback from the community.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/549#issuecomment-267625682:145,feedback,feedback,145,https://psicode.org,https://github.com/psi4/psi4/pull/549#issuecomment-267625682,1,['feedback'],['feedback']
Usability,"Between the two of you, the two of us are confused about what kinds of tests you want. * Holger asked about correctness tests. Lori hasn't raised the issue. This issue wasn't raised during my earlier ""density to wavefunction"" PRs, so I don't understand why we're doubting its correctness now. This is the same code as I used to bring densities over then. If there is a bug, that's the fault of `occ` and outside the scope of this PR. (And while we _could_ test correctness for the 1RDM, that requires adding occ properties. Which we could do, but is outside the scope of this PR.); * Holger asked if FCHK can be enabled but said that would be for a different PR. Lori says that may be appropriate for this PR. This is a straight contradiction, and we're confused which you want.; * While it's also possible to test `compute_fvpi`, I cannot recall one other case of a simple Pybind requiring a test, so I'm not sure what we'd be testing. Correctness? That this function can be called Python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-767091324:867,simpl,simple,867,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-767091324,1,['simpl'],['simple']
Usability,"But yes, I agree that actually lifting the restriction mentioned in the original issue is either impossible or super tricky. Perhaps just reporting a clear error message when the mol name is not a valid Py identifier is the most friendly thing (e.g. I saw http://stackoverflow.com/a/29586366). Anyways, low priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286911897:150,clear,clear,150,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911897,1,['clear'],['clear']
Usability,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239211359:904,simpl,simple,904,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359,1,['simpl'],['simple']
Usability,"CCQC is currently going through a heavy metals phase, so I want to be clear on how this PR will affect us. 1. If we freeze the 54 electrons of Xenon and then the 4f electrons, wouldn't we be freezing 68 electrons rather than 60?. 2. I think [the comment](https://github.com/psi4/psi4/pull/1930/files#diff-19caeae917feb299f8f5e72bc1e28436R253) would be clearer as `If center is after the inner transition metals, freeze those f electrons too`. As written, the comment doesn't apply to the actinides, and `> 6th period` doesn't apply to the example of Bismuth, which is 6th period. Am I misunderstanding the comment?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1930#issuecomment-643638235:70,clear,clear,70,https://psicode.org,https://github.com/psi4/psi4/pull/1930#issuecomment-643638235,2,['clear'],"['clear', 'clearer']"
Usability,Can we simply replace all ints with a `long long int`? Or should it be more surgical and only touch the compound index files and consciously coerce them to `size_t`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679#issuecomment-511918494:7,simpl,simply,7,https://psicode.org,https://github.com/psi4/psi4/issues/1679#issuecomment-511918494,1,['simpl'],['simply']
Usability,"Can you include a minimal reproducible example, even a water dimer? It isn't clear to me what this code that is acting unexpectedly looks like.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2730#issuecomment-1261263392:77,clear,clear,77,https://psicode.org,https://github.com/psi4/psi4/issues/2730#issuecomment-1261263392,1,['clear'],['clear']
Usability,"Carried forward from [forum request](http://forum.psicode.org/t/calculations-with-custom-basis-sets-run-slower-with-multiple-threads/2461). According to the reporter, upon using a custom gbs file (provided in the issue), increasing the number of threads causes an SCF gradient computation to take _longer_ on a system as simple as water. I haven't reproduced this yet, but this is serious if true.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2559:321,simpl,simple,321,https://psicode.org,https://github.com/psi4/psi4/issues/2559,1,['simpl'],['simple']
Usability,"Carried forward from [forum topic](http://forum.psicode.org/t/cisd-quadrupoles/2464/6?u=jmisiewicz). `properties('cisd')` should probably save property names as `CISD` in addition to `CI`. In this case, it's probably also worth saving as `CI UNRELAXED` and `CISD UNRELAXED`, to make crystal clear that these include no orbital response terms.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2565:291,clear,clear,291,https://psicode.org,https://github.com/psi4/psi4/issues/2565,1,['clear'],['clear']
Usability,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204). Psi currently does not support getting properties with BSSE corrections. This should be a simple matter of taking the properties with each BSSE component and doing the same operation to them you do to get the energies. (Thank you, linearity of derivatives!) There are two parts to this:. 1. `properties` should know to do this. At present, it ignores any BSSE keywords.; 2. When a user passes a wfn computed from BSSE to `OEProp`, it should give the user a clear error message telling it that OEProp is not designed for multi-component property computations. At present, it returns that it can't find the orbitals. While this response is perfectly reasonable, it's opaque.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2196:211,simpl,simple,211,https://psicode.org,https://github.com/psi4/psi4/issues/2196,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"Carried forward from a forum report. Consider the following input file designed to use a custom SCF guess. (And unfortunately, there isn't a much cleaner way to do this.). ```; import numpy as np. memory 4 GB. molecule mymol {; symmetry C1; no_reorient; 0 1; H1 0.00000000 0.00000000 0.00000000; H2 0.00000000 0.00000000 0.60000000; }. set {; basis sto-3g; scf_type pk; reference rhf; maxiter 1; }. mo_coeff = np.array([; [ 3.12018412E-01, 2.77605634E-01, 3.12018412E-01, 2.77605634E-01],; [ 8.82705828E-02, 2.02527493E+00, -8.82705828E-02, -2.02527493E+00],; [ 7.20615388E-01, -6.53699105E-01, 7.20615388E-01, -6.53699105E-01],; [ -1.21367472E+00, 1.40100934E+00, 1.21367472E+00, -1.40100934E+00]; ]).T. try:; energy('scf'); except SCFConvergenceError as e:; scf_wfn = e.wfn; scf_wfn.Ca().from_array(mo_coeff); scf_wfn.to_file(scf_wfn.get_scratch_filename(180)); set guess read; set maxiter 200; energy('scf'); ```. The `set guess read` is ignored because Psi internally set the SCF local option to be read, causing the global option to be ignored. To fix this, first, we'll need to _find_ where Psi is setting this internally. Which seems like a simple enough fix. From there, we'll need to make sure that the setting is only temporary through the use of OptionsStash objects, as done frequently throughout `driver/procrouting.py`. I'm marking this as `new_dev` friendly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2110:1148,simpl,simple,1148,https://psicode.org,https://github.com/psi4/psi4/issues/2110,1,['simpl'],['simple']
Usability,"Carrying forward another case that SOSCF can't get. It can converge to a saddle point on the orbital surface, but not to a minimum. This is yet another case that originates from open-shell SAPT on the forums. We'll need to investigate whether the numerical problem is simply ill-conditioned, or if this means we need to improve open-shell SOSCF. ```; molecule {; 0 3; C 2.146191145 -2.250869610 -0.229432545; H 2.796153988 -3.111981487 -0.362347932; H 1.465215175 -2.173397551 -1.073297820; H 1.533174247 -2.389665597 0.657575818; C 2.900923223 -0.952856733 -0.096839038; O 2.324207776 0.122438123 0.059749704; N 4.251556346 -1.050359417 -0.161457007; H 4.652507974 -1.960893396 -0.290972105; C 5.119798458 0.101611043 -0.052013925; H 4.483304328 0.969911486 0.082770682; H 5.785387965 0.010155845 0.804078956; H 5.714264181 0.231031532 -0.954273112; --; 0 1; O -0.392018453 -0.384718737 0.076071325; H -0.911460851 0.413812040 0.177648774; H 0.524903820 -0.068484694 0.090511364; }. set {; reference uhf; basis jun-cc-pVDZ; maxiter 200; stability_analysis follow; soscf true; soscf_print true; soscf_max_iter 50; soscf_conv 1e-4; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716#issuecomment-546623859:268,simpl,simply,268,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-546623859,1,['simpl'],['simply']
Usability,"Carrying forward from #2201:. Quoth Francesco:; > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly. Quoth Susi:; > This is an inherent drawback of X2C which employs a restricted minimal balance basis. The orbital basis set of non-relativistic theory is the large component set that depicts the electronic part of the relativistic wave function, and the small component set is obtained by acting on the large component with something that looks like `sigma . p` that has the classical three-momentum operator which is essentially nabla. This approach becomes inefficient when the orbital basis is large; this is why four-component codes favor the use of separate basis sets for the small and large components.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868#issuecomment-869207320:267,simpl,simpler,267,https://psicode.org,https://github.com/psi4/psi4/issues/868#issuecomment-869207320,1,['simpl'],['simpler']
Usability,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-291237788:455,guid,guide,455,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788,1,['guid'],['guide']
Usability,Check the output for the water+_homo-4.out in the Psi4 1.4(...) version. **That's the converged energy in PSI4!** Hence this issue. Its clearly converging to some crazy unphysical state. I would not worry if it was just a strange energy... MOM is like that. But this is an impossible energy!. The whole PySCF thing is a different ordeal that probably has to do with some weird reordering in the .fchk writer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692#issuecomment-518740195:136,clear,clearly,136,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518740195,1,['clear'],['clearly']
Usability,Clearly I can't get this working right now and I won't be able to touch this from a useful computer until tomorrow. Sorry.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1270784896:0,Clear,Clearly,0,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1270784896,1,['Clear'],['Clearly']
Usability,"Closing. Upon rerunning the input file, I get the much saner behavior of Psi simply exiting. While one _could_ intercept the error with a manual try-except, use of `fail_on_maxiter` is the expected behavior and does not have this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560:77,simpl,simply,77,https://psicode.org,https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560,1,['simpl'],['simply']
Usability,"Consider the following input:; ```; molecule h2o {; 1 2; O; H 1 1; H 1 1 2 104.5; }. set {; reference uhf; basis cc-pVDZ; freeze_core true; roots_per_irrep [0, 1, 1, 0]; }. wfn = properties('eom-ccsd', properties=['oscillator_strength'], return_wfn=True)[1]; ```. This calls for a B1 ground state, a B1 excited state, and an A2 excited state. The CC code prints out; `Oscillator Strength for 1 B2`; `Oscillator Strength for 1 A1`; `Oscillator Strength for 1 A1 to 1 B2`. Everything is expressed in terms of _transition_ symmetries. This took me a while to work out and is especially unhelpful for transitions between excited states. The symmetry labeling needs to be thoroughly scrubbed so it's clear when state symmetries are meant, and when transition symmetries are meant.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2524:695,clear,clear,695,https://psicode.org,https://github.com/psi4/psi4/issues/2524,1,['clear'],['clear']
Usability,"Consider the following simple input file:; ```; molecule { ; symmetry c1; 0 2; C ; N 1 r1 . r1 = 1.17; }. set reference uhf ; set diis_start 3; set stability_analysis follow; energy('hf/cc-pvdz'); ```. Stability analysis gives ; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 6.419E-01; DLU 2 0 2 3.750E-01; DLU 3 0 3 2.147E-01; DLU 4 0 4 1.520E-01; DLU 5 0 5 8.829E-02; DLU 6 0 6 2.804E-02; DLU 7 0 7 5.664E-03; DLU 8 0 8 2.645E-03; DLU 9 0 9 6.334E-04; DLU 10 0 10 1.096E-04; DLU 11 0 11 1.377E-05; DLU 12 0 12 3.046E-06; DLU 13 1 13 4.870E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: 0.136742; Lowest UHF->UHF stability eigenvalues:; A 0.136742; ```. If you add symmetry, you get; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 2.389E-01; DLU 2 0 2 8.290E-02; DLU 3 0 3 5.100E-02; ```; ...; ```; DLU 79 0 13 2.402E-05; DLU 80 0 3 2.963E-06; DLU 81 0 4 3.426E-06; DLU 82 1 5 8.990E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.000000; Lowest UHF->UHF stability eigenvalues:; B2 -0.000000 B1 -0.000000 A2 -0.000000 A1 0.110020; ```. For reference, the conventional integral analysis gives lowest eigenvalues of `B2 0.136642 B1 0.136642 A2 0.163586 A1 0.163586`, so the `0.110020` number is simply _wrong_. Of course, the real fix for this issue is #1005, but I call Roberto saying that symmetry and DF integrals weren't working in TD-DFT using the new solvers either. Time for me to do more yak shaving, then.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2122:23,simpl,simple,23,https://psicode.org,https://github.com/psi4/psi4/issues/2122,2,['simpl'],"['simple', 'simply']"
Usability,"Consider the following simple input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set basis cc-pvdz. prop('mp2', properties=[""multipole(4)""]); prop('ccsd', properties=[""multipole(4)""]); ```. The MP2 property computation runs fine, but the CCSD property computation does not, as Psi complains that `The following properties are not currently supported: ['MULTIPOLE(4)']`. . This is almost certainly the result of bad logic in `procrouting/proc.py:run_cc_property`. It looks like `run_cc_property` has a _lot_ of custom logic, so it's not surprising that something was missed. This should be added to the allowed list of CC properties, and the logic should be simplified if at all possible. It's not a good sign when methods can't agree about what properties Psi supports. Obligatory @bgpeyton ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2219:23,simpl,simple,23,https://psicode.org,https://github.com/psi4/psi4/issues/2219,2,['simpl'],"['simple', 'simplified']"
Usability,"Continuation of #2012 . Users report large errors with the default frozen core settings because the ""core"" orbitals we freeze are at the energy of ""valence"" orbitals. (simply put). Valuable comments from other issue:; https://github.com/psi4/psi4/issues/2012#issuecomment-702870857; https://github.com/psi4/psi4/issues/2012#issuecomment-702811354. Possibly we want what `freeze_core -2` does for all alkali metals?; Same for the earth alkali?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343:168,simpl,simply,168,https://psicode.org,https://github.com/psi4/psi4/issues/2343,1,['simpl'],['simply']
Usability,"Cool, glad to see these updates. Thanks for pinging me about the naming. I don't have a strong preference for POL vs IND. I suppose being; consistent with IND is a good thing. Does it make sense to alias these; variables so either version works? Might be less confusing for people; consulting the EFP docs. I don't really like EFP_AI_XXX. I do like pre-pending with EFP so that all; EFP keywords start with that. But AI connotes Artificial Intelligence more; easily than ab initio, which I assume it's supposed to mean. I think I; like QM better. (EFP_QM_XXX). This makes sense in a QM/MM context, which; this basically is (EFP being a very advanced MM method). Additionally, I'm not sure the docs are not totally clear... I'm not; totally sure what this means:. /*- Do include polarization energy term in EFP computation? (QMEFP_POL c.; v1.1) -*/. Is this the polarization of the EFP by the QM region, or the polarization; of the QM region by the EFP?. On Tue, May 1, 2018 at 10:38 AM, Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>, you might want the; > opportunity to weigh in on this commit; > <https://github.com/psi4/psi4/pull/993/commits/609a84f64a50e5dee8728fcaa9a19cfaebffb4c2>,; > as it involves keyword names for EFP and our compromise between SAPT-like; > and libefp-like. Please see top post of PR for discussion.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/993#issuecomment-385686547>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlhxccTVCdSWeK_EOxZgrE6MEQvnks5tuHNogaJpZM4TsPv1>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993#issuecomment-385707749:714,clear,clear,714,https://psicode.org,https://github.com/psi4/psi4/pull/993#issuecomment-385707749,1,['clear'],['clear']
Usability,"Cool, thanks for the feedback everyone. There's still a handful of docstrings left that I felt I couldn't write, but they are rather niche. If Jet or someone who knows more about electronic structure theory or the corresponding C++ code could finish those up that would be great. I intend to finish the other export_x.cc docstrings in the future when I have more time. This one needed the most work by far.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/761#issuecomment-317204127:21,feedback,feedback,21,https://psicode.org,https://github.com/psi4/psi4/pull/761#issuecomment-317204127,1,['feedback'],['feedback']
Usability,"Could you talk about the purpose of this PR? Looking at the other code in `_core_wavefunction_to_file`, it isn't clear to me what data `wfn_data` has that would need to be pickled. Floats, booleans, tuples, arrays, ints, strings... None of those types should require pickling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524597709:113,clear,clear,113,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524597709,1,['clear'],['clear']
Usability,"Currently the scf-guess suite only checks final energies, which is simple but also not very useful. There should be a variant of the tests that check the energy of the first iteration, which will tell us if a test gets broken or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3040:67,simpl,simple,67,https://psicode.org,https://github.com/psi4/psi4/issues/3040,1,['simpl'],['simple']
Usability,"Currently, if ```basis_guess``` is not ```False```, Psi4 will use it even if ```guess = read```. Clearly, in this case Psi4 should actually read in the previous orbitals. IMHO the ```basis_guess``` keyword should be replaced with ```guess_basis``` for the definition of the guess basis, and ```basis``` should be added as an option to ```guess```. The guess for the minimal basis could maybe be specified as e.g. ```guess basis(core)``` or ```guess basis(sad)```?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1492:97,Clear,Clearly,97,https://psicode.org,https://github.com/psi4/psi4/issues/1492,1,['Clear'],['Clearly']
Usability,"DETCI was designed in the old Psi days where each module simply terminated; after it executed. So, something like your example was never envisioned,; and if the user wanted the TPDM, they had to request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:57,simpl,simply,57,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160,1,['simpl'],['simply']
Usability,DFT Hessians and Grad Simplifications,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/839:22,Simpl,Simplifications,22,https://psicode.org,https://github.com/psi4/psi4/pull/839,1,['Simpl'],['Simplifications']
Usability,"DMRG is also going to be complicated, because it doesn't have a proper wavefunction. I needed to fix that for libtrans refactor anyways, so I'll add this to my list. My other Psi projects are on pause until 1.5 anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2256#issuecomment-884270779:195,pause,pause,195,https://psicode.org,https://github.com/psi4/psi4/issues/2256#issuecomment-884270779,1,['pause'],['pause']
Usability,"Dear @JonathonMisiewicz and @PeterKraus,; thank you very much for the valuable comments and the detailed and clear instructions on how to proceed.; As i have written in the initial post, the documentation and the tests were still missing at the time i set up the pull request.; I had some private conversation with @bozkaya upon which i pulled his code into my repository. It is by no means my intention to ""steal"" his code, so feel free to put my pull request on hold until he gives the ""go"" or merge in his repository first.; @PeterKraus does this title better match your expectations?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-975787765:109,clear,clear,109,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-975787765,1,['clear'],['clear']
Usability,"Dear Developers,. I would like to perform counterpoise-corrected DBOC computations at the CCSD level, using psi4-1.9.1. For this purpose, I wrote the following input:. ```; molecule dimer {; 0 1; N 1.608094757 -0.561155368 0.000000000; N 2.389700473 0.210989439 0.000000000; --; 0 1; N -2.389700473 -0.210989439 0.000000000; N -1.608094757 0.561155368 0.000000000; }. set globals {; cfour_dboc on; basis cc-pvdz; d_convergence 11; }. e_cp = energy('c4-ccsd',bsse_type='cp', return_total_data=True); ```. When I tried to run this input, I received a segmentation fault, without any further information. If I replace `c4-ccsd` with `c4-hf`, then there occurs another segmentation fault, which is more verbose than the previous one:. `QcdbException: Psi4/Cfour gradients with ghost atoms no longer supported. Use QCEngine or QCDB where they are.`. There is a simple warning, as well, which I am not sure what to do with:. `Using qcdb.align.B787instead ofqcelemental.molutil.B787 is deprecated, and as soon as 1.5 it will stop working`. Could you please help me how to modify this input for a successful execution?. Thank you in advance for your help. Best regards,. Roland",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3217:856,simpl,simple,856,https://psicode.org,https://github.com/psi4/psi4/issues/3217,1,['simpl'],['simple']
Usability,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796:152,simpl,simple,152,https://psicode.org,https://github.com/psi4/psi4/issues/796,1,['simpl'],['simple']
Usability,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198:140,clear,clear,140,https://psicode.org,https://github.com/psi4/psi4/issues/2198,1,['clear'],['clear']
Usability,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2542:213,simpl,simplified,213,https://psicode.org,https://github.com/psi4/psi4/issues/2542,1,['simpl'],['simplified']
Usability,"Dear all, . Can someone please provide a simple input file for a state averaged mcscf calculation for excited states : nroots= 3 ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/182:41,simpl,simple,41,https://psicode.org,https://github.com/psi4/psi4/issues/182,1,['simpl'],['simple']
Usability,"Dear all, I had another bash at this. It's rather a large amount of changes, but here's the current workflow:. - functionals get defined in `dict_*.py`, including aliases for the base names (M06-2X = M062X, wPBE = LC-WPBE = LCWPBE etc.); - special cases of dispersion-corrected functionals are defined there (B97-D and friends, OPBE-D, HF3C etc.); - all this stuff gets combined into a single dict `dict_functionals` in `dict_builder.py`.; - aliases for dispersion names (D2 = D = D2P4) are defined as `dispersion_names` (VV10 should go here); - we loop through the proto-functionals in `dict_functionals`, figure out all base functional aliases, add them into the final dict `functionals`; - if the base functional is *not* dispersion corrected, we look through `psi4.driver.qcdb.dashparam.dashcoeff` for a matching dispersion correction; we match all base aliases (so M062X-D3 and M06-2X-D3ZERO are equivalent); - the newly generated dispersion corrected functional gets added (incl. aliases); - the `build_superfunctional` function in `superfuncs.py` now has to find the requested functional in `dict_builder.functionals`, if there is a match, we build the `(sup, dispersion)` tuple; - the `disp_type` assigned in `proc.py` is a `dict()`, so we don't need to match against length; - we pass this onto an `EmpiricalDispersion()` constructor. The handling of the latter two points is not quite figured out yet. I'm sure it could be simplified. As for tests, compared to `master`, the following fail:; ```; OPBE-D: wrong dispersion; B97-D: wrong dispersion (B97-D2, -D3 and other variants work); OTPSS-D: wrong dispersion; HF3C, HF3C-D3BJ: wrong dispersion; DSD-* and co: expected to fail; WB97X-D3 and -D3ZERO: expected to fail; ```; I will try to figure those out later, but I'm assuming it is just the dispersion component that is misassigned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370175873:1433,simpl,simplified,1433,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370175873,1,['simpl'],['simplified']
Usability,"Dear psi4 developer.; I found out that the MRMP2 method doesn't use out_of_core algorithm like MKCCSD and MRCCSD(T) does for sorting (src/bin/psimrcc/sort_out_of_core.cc).; MRPT2 incore algorithm uses large amounts of memory, for example 31Gb for C8H8 molecule, C2V symmetry, in cc-pVTZ basis, instead of ~11GB for MRCCSD with same options.; I not completely understand algorithm of sorting, but is there an opportunity to use sort_out_of_core.cc algorithm for MRPT2, may be with some simplifications or modification?; Any comments are welcomed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/30:485,simpl,simplifications,485,https://psicode.org,https://github.com/psi4/psi4/issues/30,1,['simpl'],['simplifications']
Usability,"Default 1.2 conda install. Even a very simple HF calculation creates and leaves behind an empty file named ""fort.56"", right next to the input file. I do not know what this file is used for (it looks like something a Fortran program would create), but I see no reason why Psi4 should leave behind litter in the working directory. Probably the easiest solution would be to just delete it at exit. PS: It seems like I have accidentally installed 1.2 instead of 1.3...oops.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584:39,simpl,simple,39,https://psicode.org,https://github.com/psi4/psi4/issues/1584,1,['simpl'],['simple']
Usability,"Default off seems silly if we report times. The user has a right to know; how accurate those times are. If 5 seconds really bothers everyone I vote; for a timing flag that enables/disables all timings. I think that's the; wrong approach though and it makes more sense to examine the sampling; parameters of the timer. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 11:10 AM, ""Rob Parrish"" notifications@github.com wrote:. > Yeah, it just needs to be turned into a user-option (defaulted off).; > ; > -Rob; > ; > On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; > wrote:; > ; > > I'm learnimg the world isn't ready for C++11 yet, and I'm in the process; > > of; > > phasing it out of my codes. Anyways, my timer relies on Boost. What I do; > > is ripped right out of the Boost example for how to determine the; > > uncertainty in their timers, the sampling rate may be a bit high if there; > > ends up being 5000000 calls though. I'm not sure what you mean exactly by; > > separate thread. The uncertainty in each timer is a hardware feature so; > > on; > > a heterogeneous cluster each mpi process needs to sample. This is only; > > done once at startup.; > > ; > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:; > > ; > > > @ryanmrichard https://github.com/ryanmrichard any reason the; > > > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > > > just do it a in a different thread?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/89#issuecomment-98490177.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/89#issuecomment-98491129.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/89#issuecomment-98491231.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98492851:646,learn,learnimg,646,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98492851,1,['learn'],['learnimg']
Usability,"Definitely. The only roadblock was in handling all of the printing. I used `be_quiet()` and `reopen_outfile()`, which fail during testing in the windows build. Interestingly, these functions aren't used in the code elsewhere, so they seem not to be windows-safe at all. I think a workaround shouldn't be too hard, but suggestions welcome. The printing of each atomic calculation should never be that excessive (since its only unique elements/basis), so simple solution is to just print all of the atomic outputs",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-815296254:453,simpl,simple,453,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-815296254,1,['simpl'],['simple']
Usability,"Diazonium, I believe your assessment is correct and I have little to add here unfortunately. While thread safety in the pthread code has been improved recently, OpenMP is still considered the safer option. (Though you could try a pthread build - ideally of the current ""develop"" branch that should soon become the 0.3.0 release - with USE_SIMPLE_THREADED_LEVEL3=1 which should work around at least some of the remaining bugs.) ; Please create issues for any OpenBLAS bugs you find, ideally with some standalone code that makes it easy to reproduce and track down the problem. I am anything but an expert on multithreading, but at least there are powerful debugging tools available now that simply did not exist when K.Goto wrote; the library that OpenBLAS builds upon. ; (Incidentally my own involvement with OpenBLAS came about through dft as well, though in my case it is condensed matter codes like Elk and Wien2k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926:690,simpl,simply,690,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926,1,['simpl'],['simply']
Usability,"Different keywords that do the same thing really isnt in the Psi4 keyword ethos. I would suggest simply setting the `qc_module detci` keyword as you have done in the past. FNO code is toggled [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L918). However, without some kind of overhaul to support attributes this is unlikely to help you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/598#issuecomment-276377431:97,simpl,simply,97,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276377431,1,['simpl'],['simply']
Usability,Do not use or suggest the undocumented -H option for CMake,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2797:26,undo,undocumented,26,https://psicode.org,https://github.com/psi4/psi4/pull/2797,1,['undo'],['undocumented']
Usability,Document/Simplify Orbital Guess from Wavefunction,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1678:9,Simpl,Simplify,9,https://psicode.org,https://github.com/psi4/psi4/issues/1678,1,['Simpl'],['Simplify']
Usability,Done. I simplified the test case further.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1999#issuecomment-683300840:8,simpl,simplified,8,https://psicode.org,https://github.com/psi4/psi4/pull/1999#issuecomment-683300840,1,['simpl'],['simplified']
Usability,"Dumping debug information for `libxc`'s purposes sounds good to me. What do you need printed, and where should I put the print statements? (I'm guessing `lbfunctional/LibXCfunctional.cc`.) I'm still learning this part of the codebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1158434514:199,learn,learning,199,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1158434514,1,['learn'],['learning']
Usability,"Eugene, I'm surprised you assumed nvirt > ndocc, since that wouldn't seem; to simplify anything in the code. How hard would it be to remove that; assumption? Might be useful for students running pedagogical computations; in small basis sets like STO-3G. David. On Wed, Oct 25, 2017 at 2:18 PM, Lori A. Burns <notifications@github.com>; wrote:. > Ah, you have set nat_orbs true which is the cue to turn on FNO. Confirmed; > that it runs non-FNO w/o that keyword. Arguably, we should mark that; > !expert or take it away from the user. @susilehtola; > <https://github.com/susilehtola>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339422776>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdqHHvQZiRN70JB94CeH7BMTKSv6Vks5sv3ttgaJpZM4QGSFE>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339434110:78,simpl,simplify,78,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339434110,1,['simpl'],['simplify']
Usability,"Everyone feel free to add to this list.; - [x] make sure `(dirty)` isn't in the outfile header along with the git info. It's not supposed to be there when the source clone is clean. this just needs a perfectly clean samples set from the docsbuild.; - [x] make sure Additional authors gets additionally populated.; - change any copyright 2015 to 2016, particularly in copyright. I did psicode.org (moved to #349 ); - [x] check that license boilerplate is present in all files (py-side and c-side). here's the guidelines from gpl, http://www.gnu.org/licenses/gpl-howto.en.html; - [x] new set of output.ref",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213:508,guid,guidelines,508,https://psicode.org,https://github.com/psi4/psi4/issues/213,1,['guid'],['guidelines']
Usability,"FTR, David and I have agreed to pause this PR until after #2682 and #2665 come in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695#issuecomment-1231698481:32,pause,pause,32,https://psicode.org,https://github.com/psi4/psi4/pull/2695#issuecomment-1231698481,1,['pause'],['pause']
Usability,"Failures are my fault, and the fix is in-PR. Just to be clear, Psi4 doesn't use pylibxc -- only the compiled library API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645#issuecomment-492445140:56,clear,clear,56,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492445140,1,['clear'],['clear']
Usability,"Fantastic job on this PR, @EricaCMitchell! It took me a while (I apologize), but I finally translated @mkodrycka 's dispersion-F12 code to an MP2-F12 one and, after some tweaking, was able to reproduce your DF-MP2-F12 correlation energy exactly. . I learned quite a bit in the process: initially, our implementations (both based on the formulas from the same Werner-Adler-Manby paper) gave minimally different results, and I found out that our programmed expressions differ by several terms that vanish in the GBC approximation. This approximation is pretty good but neither one of us makes it explicitly in the implementation (no elements of the Fock matrix are zeroed). I think this is completely OK. One avenue to possibly speed up the code is fully exploiting the fact that our F12 amplitudes are diagonal and we don't need to compute off-diagonal elements of some matrices. For example, out of the entire B matrix, we only use terms of the form `B(i,j,i,j)` and `B(i,j,j,i)`. I know computing just the diagonal elements is easier said than done, but I think there is room for speedup there. Finally, I know this was not directly a part of this PR, but do you happen to know the source of the 6-Gaussian fit of the Slater correlation factor? Here's what Psi4 uses for `GEM_BETA == 1.0`:. https://github.com/psi4/psi4/blob/f20a7c61ca0f4939885aa28f96d7d88058a71816/psi4/src/psi4/libmints/mintshelper.cc#L930-L933. and this is what Molpro 2012.1 prints out (I don't have a newer version):; ` Alpha: 0.19532 0.81920 2.85917 9.50073 35.69989 197.79328`; ` Coeff: 0.27070 0.30552 0.18297 0.10986 0.06810 0.04224`. This discrepancy, if not removed, does lead to small differences in the final results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-1941533669:250,learn,learned,250,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1941533669,1,['learn'],['learned']
Usability,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182588993:1061,learn,learning,1061,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993,1,['learn'],['learning']
Usability,File 180 is in transition right now from its longstanding form (which was under psio indexing and control and thus responsive to psi4_io commands) to a numpy version that's more suited to python interaction (and that's under a different retention control). For now you can get 180 by commenting out [this line](https://github.com/psi4/psi4/blob/master/psi4/extras.py#L45).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/918#issuecomment-365455796:115,responsiv,responsive,115,https://psicode.org,https://github.com/psi4/psi4/issues/918#issuecomment-365455796,1,['responsiv'],['responsive']
Usability,"Filip, I think you're right that the orbital energies are the problem, and I think the root of the problem is that ROHF by default does not semicanonicalize the orbitals. . I ran a simple test with a single triplet helium atom, and the orbital energies from ROHF match the UHF ones if I do `wfn.semicanonicalize()` but don't match if I don't do it. I am quite sure that USAPT requires canonical orbitals, and maybe the USAPT driver should perform semicanonicalization for a ROHF reference. I wonder if the SAPT(ROHF) code was always like this or if the semicanonicalization disappeared somewhere along the way. @jgonthier might know more about this. With the current version, the Psi4NumPy `SAPT0_ROHF.py` example (which is two triplet oxygen molecules) gives different second-order energies if semicanonicalization is performed, and I think the result without semicanonicalizing is wrong for both Psi4 and Psi4NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148:181,simpl,simple,181,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148,1,['simpl'],['simple']
Usability,"First of all, most structures don't converge. Only a few do. So that is an issue too. When I generated my own structures to calculate the torsion drive, one half of the molecule was ; fixed while I rotated the other half (around the fixed central bond). In that case, most structures converged and when I compared those structures to a molecular mechanics energy (which were fit to reproduce a torsion drive at the same level of QM theory) the energies were very close.; When I used optiking, and looked at the structures, it seemed like both sides of the molecule were bending to achieve the fixed dihedral angle (not sure if I'm being clear here) and when I compared the energy of the structures that did converge to the molecular mechanics energy, the energies were higher by a factor of ~10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-286920989:637,clear,clear,637,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-286920989,1,['clear'],['clear']
Usability,"First, let's make sure we're agreed on what this metadata should look like. I'm envisioning the following skeleton:. ```; {; ""step"": { # Read from here if a displacement doesn't have its own step field; ""units"": str, # ""bohr"" or ""angstroms""; ""size"": float; },; ""stencil_size"": int, # 3 or 5, currently ; ""displacement_space"": str, # ""SALC"", ""normal"", ""internal"", ""cartesian""... always ""SALC"" for us; ""project_translations"": bool,; ""project_rotations"": bool,; ""geoms"": collections.OrderedDict([; disp_label: {; ""geometry"": np.ndarray,; ""energy"": float,; ""gradient"": np.ndarray, # May not be present!; ""step"": step dictionary defined above, # May not be present!; }; ]); }; ```. Feedback greatly appreciated. disp_label is going to be a bit tricky. `GRAD_0_X_+2` is a reasonable way to say the double displacement of atom 0 in the X coordinate, but if you're displacing CdSALCs, it won't do. We can either give labels so abstract they don't care about the coordinate_space, or we can give each coordinate_space its own labels. Either way, we need to specify which basis vector(s) in displacement space are being displaced and how much. Perhaps a tuple of ints? `(2, 0, 0, 0, 0, 0, 0, 0, 0)` would be the analogue of `GRAD_0_X_+2`. I like the abstraction, but typing all those extra 0's gets obnoxious, and it does not scale well with system size. A frozen dictionary might work, which would instead be `{0: 2}`, but frozen dictionaries aren't in the Python standard library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-415834747:677,Feedback,Feedback,677,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-415834747,1,['Feedback'],['Feedback']
Usability,"Fixes #1309, clears DCT files correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1310:13,clear,clears,13,https://psicode.org,https://github.com/psi4/psi4/pull/1310,1,['clear'],['clears']
Usability,"Fixes look so simple in retrospect :-). Could you take one of your examples and make a test case, please? Not parsing the NBO output and checking the numbers or anything, just running the `NBOWriter` (we've no examples at present) and getting a `reference.dat` of the compliant psi nbo output and a copy of the qchem nbo output into the repository.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1602#issuecomment-484646322:14,simpl,simple,14,https://psicode.org,https://github.com/psi4/psi4/pull/1602#issuecomment-484646322,1,['simpl'],['simple']
Usability,"Following from https://github.com/psi4/psi4/pull/1896#issuecomment-633623036, we observe that MKL 2020.1 (from conda) produces different answers at about 1e-8 in run-to-run execution for DF-HF at any basis set on Intel processors. https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Relevant envvar is `MKL_CBWR`. In the CI we're preempting with `MKL_CBWR=AUTO`. Will monitor future MKL releases. Please add to affected test list as you find them. * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`. #### known affected test cases. * scf-cholesky-basis; * psimrcc-ccsd_t-4; * one of the IRCs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1906:320,guid,guide,320,https://psicode.org,https://github.com/psi4/psi4/issues/1906,1,['guid'],['guide']
Usability,"Follows from discussion in https://github.com/psi4/psi4public/issues/103 and a bit in https://github.com/psi4/psi4private/issues/101. We'd like reference `rhf`, `rohf`, etc. to behave exactly as they do at present, that is cry foul if inappropriate for active molecule or unavailable for the method at hand. But we'd like a new value `auto` for `reference` keyword that is the default and switches between rhf and uhf>rohf as appropriate, depending solely on the molecule. . Exactly how to this this is up for discussion. It's most appropriately done at activate-molecule-time, but don't have the machinery to track and undo that setting in the activalte molecule code. Maybe a generic function that's called in each run_\* in proc.py with inputs of the most restrictive reference setting among the called modules (e.g., rhf/rohf for run_detci that traverses scf _and_ detci modules). Then the generic function sets the reference to something legit (e.g., `rhf`) for the scope of the energy/grad/etc call. And the optstash object in each of the proc.py routines can be used to undo the driver-level reference setting and return to the user or default setting.; - [ ] implement above. break this into smaller bullets as needed.; - [ ] also, warn in output that reference changing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118:620,undo,undo,620,https://psicode.org,https://github.com/psi4/psi4/issues/118,2,['undo'],['undo']
Usability,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528:162,clear,clearly,162,https://psicode.org,https://github.com/psi4/psi4/issues/528,1,['clear'],['clearly']
Usability,"For QM/MM, since you have many thousands of points, most QM programs use a simple external file for point charges so one does not have to send everything through the slower-but-smarter ""molecule recognition"" machinery. Besides, these external files are easier to write by the MM program interface as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857:75,simpl,simple,75,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857,1,['simpl'],['simple']
Usability,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1054:6,simpl,simple,6,https://psicode.org,https://github.com/psi4/psi4/issues/1054,1,['simpl'],['simple']
Usability,"For dashparams I think it makes sense to leave these in place and we would build new dictionaries on the fly. For example B3LYP would look like the following:. ```python; funcs = {...} # All of the normal functionals; for dash in dash_params:; tmp = copy.deepcopy(funcs[""B3LYP""]); tmp[""dispersion""] = (""D3"", ""Zero"", param1, param2, ...); tmp[""name""] = ""B3LYP-D3""; funcs[tmp[""name""]] = tmp; ```. Special D3 functionals could then be built by hand. This would also make all of the if logic in the building a functional simpler I think. > The spec could (some might say should) simply be ""use LibXC defaults, unless overridden"". I would prefer if we would just specify something like ""use_xc_params"" to make it clear that something like ""HYB_GGA_X_MN15"" has parameters that we can pull from to help setup the functional, but ""GGA_C_PBE"" does not. In this way something like:. ```; junk = {; ""x_functionals"": {{""HYB_MGGA_X_MN15"": {""use_xc_params"": True}, ""HYB_MGGA_M06"": {}}; ...; }; ```. would still work out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920#issuecomment-366219242:517,simpl,simpler,517,https://psicode.org,https://github.com/psi4/psi4/issues/920#issuecomment-366219242,3,"['clear', 'simpl']","['clear', 'simpler', 'simply']"
Usability,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877:844,clear,clear,844,https://psicode.org,https://github.com/psi4/psi4/issues/1877,2,"['clear', 'learn']","['clear', 'learn']"
Usability,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182577836:703,learn,learning,703,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836,1,['learn'],['learning']
Usability,"For organization purposes:. - [x] Remove debugging; - [x] Remove dead three-body coupling terms; - [x] Replace memory_manager with smart pointers (target of next PR); - [x] Add additional warning for PT (target of two PRs in, will also add the `wfn`); - [ ] Add back some rudimentary memory tracking. I'm going to shift my focus back to a paper I'm writing but should resume the smart pointer-ing when I feel I need a break (probably a week or so).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-625454905:368,resume,resume,368,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-625454905,1,['resume'],['resume']
Usability,"For several of the problematic cases, another simple solution might be finite-temperature SCF. This approach can solve some of the difficult cases that involve orbital degeneracy (which I suspect are the origin of many of the problems we are experiencing with small molecules), and therefore provide a better initial guess for CASSCF than EDIIS/ADIIS. It would be good to put together a list of problematic examples so we can assess the improvement due to EDIIS/ADIIS, when implemented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874755610:46,simpl,simple,46,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874755610,1,['simpl'],['simple']
Usability,For simplicity `cond == True`/`False` is converted to `cond`/`not cond`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2428#issuecomment-1036473227:4,simpl,simplicity,4,https://psicode.org,https://github.com/psi4/psi4/pull/2428#issuecomment-1036473227,1,['simpl'],['simplicity']
Usability,"For the record, I'm not touching this until some more core dev feedback comes in. I am not taking changes to the wavefunction class lightly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-602681392:63,feedback,feedback,63,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-602681392,1,['feedback'],['feedback']
Usability,"Found wiki changelog (https://gitlab.com/libxc/libxc/wikis/Libxc-changes) with some migration guidance. Looks like ~`fctl_set_params(param, param)` --> ~`set_ext_params(fctl, param)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-331640641:94,guid,guidance,94,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-331640641,1,['guid'],['guidance']
Usability,"From the text on this issue, it is not entirely clear to what the release notes are relative to. Is this 3.4.0 or 4.0beta2? This should be mentioned in the opening paragraph of the final version I think",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-220827431:48,clear,clear,48,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220827431,1,['clear'],['clear']
Usability,"From what I can tell, gcc requires [-lstdc++fs](https://stackoverflow.com/questions/48729328/cant-use-any-filesystem-members-in-c17-gcc-7) and [MSVC 2015](https://msdn.microsoft.com/it-it/library/hh874694.aspx) also has it -- both still ""std::experimental"". I don't quite see however if this complication is necessary - isn't path.cc already working fine in appveyor? By the way, I just learned that windows accepts / as path separators just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404163414:387,learn,learned,387,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404163414,1,['learn'],['learned']
Usability,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926:266,simpl,simple,266,https://psicode.org,https://github.com/psi4/psi4/issues/926,1,['simpl'],['simple']
Usability,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:229,clear,clear,229,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622,1,['clear'],['clear']
Usability,"Geometric direct minimization (GDM) has been described in [Mol. Phys. 100, 1713 (2002)](https://doi.org/10.1080/00268970110103642) for RHF and UHF, as well as [J. Theor. Comput. Chem. 1, 255 (2002)](https://doi.org/10.1142/S0219633602000233) for ROHF. The idea is to simply minimize the total energy with respect to orbital rotations, employing an approximate preconditioner obtained by block-diagonalization of the molecular orbital Fock matrix. The approach is pretty straightforward, and implementing it would go a long way to solving #888. Its implementation would also be feasible for a new Psi4 developer.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2214:267,simpl,simply,267,https://psicode.org,https://github.com/psi4/psi4/issues/2214,1,['simpl'],['simply']
Usability,Getting SIGSEGV error on cc-pvdz calculation of simple ethanol molecule,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:48,simpl,simple,48,https://psicode.org,https://github.com/psi4/psi4/issues/2930,1,['simpl'],['simple']
Usability,"Given recent experience with #2192 and #2193, it would be good to include a threaded run of quicktests as part of the automatically running test suite. Unfortunately, it's not clear to me if this is _possible_. According to Holger, ""Azure offers only paid parallel jobs by default, but one can request a free upgrade. GHA gives 2-core machines but not sure if one can run things in parallel."" If not possible, we should come up with a protocol for making sure parallel test suite is checked semi-regularly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2220:176,clear,clear,176,https://psicode.org,https://github.com/psi4/psi4/issues/2220,1,['clear'],['clear']
Usability,"Given that pyscf also resorted to hardcoding the functional list in Python (sunqm/pyscf#48), the best option might be to move the whole thing inside libxc. Generating a Python file along the C and Fortran headers would be no trick at all; this could also encode other necessary functionalities such as the functional family etc. I've opened up a ticket on the libxc tracker at; https://gitlab.com/libxc/libxc/issues/28. What would be the minimal functionality you would need? It would appear from ```libxc_xc_funcs.py``` that simply replacing xc_func_list would be enough..?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-329258580:526,simpl,simply,526,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-329258580,1,['simpl'],['simply']
Usability,"Given that these are the simple cases, I'm comfortable merging this in without TDC approval so I can move on to the next PR in the series.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2440#issuecomment-1041548230:25,simpl,simple,25,https://psicode.org,https://github.com/psi4/psi4/pull/2440#issuecomment-1041548230,1,['simpl'],['simple']
Usability,"Glad to hear that we are right on time :-) . The error handling is something central for us too as we aimed to make trexio user-friendly. Btw, if you notice something needed for Psi4 which is currently missing in the trexio format - feel free to open an issue in the repo or ping me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385:123,user-friendly,user-friendly,123,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385,1,['user-friendly'],['user-friendly']
Usability,"Glad to hear that you're working on it @ryanmrichard! . We can changed the baked in paths to all be relative to the executable and then have a function we call that provides the absolute path at run time. I've also looked into how to handle the `psi4.so` location. Linux has a way of specifying shared library locations relative to the calling executable. I found this in the `ld` man page:. ```; $ORIGIN (or equivalently ${ORIGIN}); This expands to the directory containing the program or shared; object. Thus, an application located in somedir/app could be; compiled with. gcc -Wl,-rpath,'$ORIGIN/../lib'; ```. Doesn't appear to be as simple on Mac but I'll still investigating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235919734:637,simpl,simple,637,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235919734,1,['simpl'],['simple']
Usability,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-182553481:310,guid,guidelines,310,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481,1,['guid'],['guidelines']
Usability,"Go for it!. > On Jan 31, 2017, at 10:55 AM, Ben Pritchard <notifications@github.com> wrote:; > ; > Mind if I hack around with the FJT/Boys function stuff a bit? It may not be a straightforward replacement, but I think it can be simplified quite a bit; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276403875:228,simpl,simplified,228,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276403875,1,['simpl'],['simplified']
Usability,"Good catch on the first one. The second one is working w/o the fix, I think: http://psicode.org/psi4manual/master/fisapt.html#f-i-sapt-keywords. The preceding/trailing `_` are (comparatively primitive) ReStructuredText syntax and are mostly used for simple things like website links. The more advanced `:ref:`stuff`` is Sphinx syntax and can be programmed and link across documents.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/492#issuecomment-258580399:250,simpl,simple,250,https://psicode.org,https://github.com/psi4/psi4/pull/492#issuecomment-258580399,1,['simpl'],['simple']
Usability,"Good day Sir,. Please I am still finding it difficult to generate the potential energy; data for the CF molecule. Would you be pleased to be of help? I don't mind; having a virtual meeting with you so you can assist me. I am the one one; doing this kind of research in my school and my supervisor doesn't know; much in this area. Please help 🙏 me.; If you request any information pertaining this, I will send it across; immediately. Thank you in anticipation. Kind regards; Sanctus. On Tue, Jun 18, 2024, 02:27 Jonathon Misiewicz ***@***.***>; wrote:. > Based on your writing, I assume you're a student researcher.; >; > Posting error messages *like this* is not a good way to get help. Large; > input files like this make it difficult for developers to find the actual; > problem. It's best practice to simplify the input file as much possible; > while still making the error clear. Sometimes, doing that can tell *you*; > where the problem is. If you don't know how to do this kind of; > troubleshooting, consult your seniors in your research group or your; > professor.; >; > I've played around with your latest input file and can confirm that you; > have made a fairly straightforward mistake, but you've discarded important; > information. As an exercise, please post a *simplified* input that; > reproduces your problem, and a *complete* error message. Once you've done; > that, I'll update the error message to be more explicit and offer some; > advice on how to bypass this. (Though once you understand the error, it's; > fairly straightforward.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/BA3DXYANKY74HK5CYFXZ6YLZH4TB5AVCNFSM6AAAAABI5T5SNGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCNZUGEYDEOJVGU>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549:804,simpl,simplify,804,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549,3,"['clear', 'simpl']","['clear', 'simplified', 'simplify']"
Usability,Good to learn all these things :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/956#issuecomment-380622702:8,learn,learn,8,https://psicode.org,https://github.com/psi4/psi4/pull/956#issuecomment-380622702,1,['learn'],['learn']
Usability,"Google's style is starting to become C++ standard from what I've seen and; would be my vote. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 7, 2016 1:32 PM, ""Daniel Smith"" notifications@github.com wrote:. > Ah, I run a lot of the CI code that hasn't been touched since Psi3 through; > clang-format with google style options so that I can read it a bit better.; > I do wish the ignore white-space option was available online as well.; > ; > I do like the idea of a style guide for the code, but it isn't; > particularly high on any list.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/372#issuecomment-217654331",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/372#issuecomment-217657023:502,guid,guide,502,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217657023,1,['guid'],['guide']
Usability,Got it. I was thinking that there might be some simple difference between @dgasmith's locally-compiled and the conda-compiled psi4s related to compiler. But it seems like that's not the case.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311786855:48,simpl,simple,48,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311786855,1,['simpl'],['simple']
Usability,"Gradient and geometry are as follows:; ```; 	 C 0.0000000000 0.0000000000 0.0000000000; 	 H 0.0000000000 1.7065081419 -1.2066834793; 	 H 1.7065081419 0.0000000000 1.2066834793; 	 H -1.7065081419 0.0000000000 1.2066834793; 	 H 0.0000000000 -1.7065081419 -1.2066834793; 	 -0.0000000000 0.0000000000 -0.0000000011; 	 -0.0000000000 0.0054395963 -0.0038463766; 	 0.0054395971 0.0000000000 0.0038463771; 	 -0.0054395971 -0.0000000000 0.0038463771; 	 0.0000000000 -0.0054395963 -0.0038463766; ```. The YZ plane shift surprised me at first, but then I remembered [orientation is discontinuous in Psi](https://github.com/psi4/psi4/issues/1297#issuecomment-443296950). The shift still surprises me. I should have been clearer: it is the very first step that reduces the computational point group. So yes, the point group does change per geometry iteration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474#issuecomment-454249120:708,clear,clearer,708,https://psicode.org,https://github.com/psi4/psi4/issues/1474#issuecomment-454249120,1,['clear'],['clearer']
Usability,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:129,simpl,simplicity,129,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803,1,['simpl'],['simplicity']
Usability,"Great, thanks for the rapid feedback, Roberto. I'll nuke the file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/271#issuecomment-187447352:28,feedback,feedback,28,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187447352,1,['feedback'],['feedback']
Usability,"Great, thanks. General question: What if we use a static print width rather than a responsive one. The print statement would move to something like `%10.3f` or the like. That gives us ms accuracy which is probably about as accurate as the timer really is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-313731298:83,responsiv,responsive,83,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-313731298,1,['responsiv'],['responsive']
Usability,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450:307,Simpl,Simpler,307,https://psicode.org,https://github.com/psi4/psi4/issues/450,2,"['Simpl', 'simpl']","['Simpler', 'simplification']"
Usability,"Having recently been fiddling about with orbital coefficients, I've discovered that for ""reference = rhf or rohf"", the name of the Matrix returned by Ca() of a Wavefunction object, i.e. wfn.Ca().name is ""Beta MO coefficients"" and also printed by wfn.Ca().print_out(). wfn.Cb().name is ""Beta MO coefficients"", as expected in these cases. For at least rhf (and also rohf?), alpha and beta should be the same (the matrices returned by Da() and Db() are simply named ""SCF density"" for ""reference = rhf"".) Having had a quick look, Cb is mostly just a copy of Ca, so I'm not quite sure where the (re)naming to ""Beta"" occurs for Ca. For ""reference = uhf or cuhf"", Ca() and Cb() return the names Alpha and Beta, as expected. Very simple input file to reproduce:. molecule water{; 0 1; O 0.000000 0.000000 0.135446; H -0.000000 0.866812 -0.541782; H -0.000000 -0.866812 -0.541782; }. set {; reference rhf; }. e, wfn = energy('hf/3-21G', return_wfn=True). wfn.Ca().print_out(); print(wfn.Ca().name). wfn.Da().print_out(); print(wfn.Da().name). wfn.Fa().print_out(); print(wfn.Fa().name)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2587:450,simpl,simply,450,https://psicode.org,https://github.com/psi4/psi4/issues/2587,2,['simpl'],"['simple', 'simply']"
Usability,He in STO-3G-decon is maybe an even simpler example.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-680921886:36,simpl,simpler,36,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-680921886,1,['simpl'],['simpler']
Usability,"Hello Evgeny. `Could it be interesting for the CASINO community?`. Co-author of [TREXIO: A File Format and Library for Quantum Chemistry](https://arxiv.org/abs/2302.14793) Pablo López Rıós is one of [the Casino developers](https://vallico.net/casinoqmc/how-to-cite/), I think he can give a comprehensive answer, especially since there are other formats for multi-determinant data in CASINO i.e mdet.casl and [cmdet.casl](https://journals.aps.org/pre/abstract/10.1103/PhysRevE.89.023304) which were developed by him personally. I have given a description only simplest multideterminant format in CASINO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235#issuecomment-2437600460:559,simpl,simplest,559,https://psicode.org,https://github.com/psi4/psi4/issues/3235#issuecomment-2437600460,1,['simpl'],['simplest']
Usability,"Hello Psi4 community,; I was trying to simulate a simple reference model, pentacene on two layers of NaCl but cannot get it to converge. I am posting here instead of the Psi4 forum, since it does not support https, but I hope that someone can help me with this issue and see if I made any wrong assumptions. . In the input file I fixed the coordinated of the lower most NaCl monolayer and I use the OptKing solver (maybe geomeTRIC is more efficient here but did not know the input) with b3lyp-d3 (in hope to have a vdW-correction) and 6-31G as the basis set. I think that in itself b3lyp is not ideal for the surface, but I think that a plane-wave approach is better for the crystal itself. I'm interested in the electronic structure of the molecule in presence of the insulating layer, compared to gas-phase and in the atomic positions of the relaxed system. Any kind of help is much appreciated! Thank you in advance. My output file is the following:; ```; ==> Input File <==. --------------------------------------------------------------------------; memory 25 GB. set basis 6-31G. molecule {; 0 1; H 3.7651778770 9.5503410836 -1.8903043554 ; H 3.7651778770 7.0753410836 -1.8903043554 ; H 17.8091778770 7.0753410836 -1.8903043554 ; H 17.8091778770 9.5503410836 -1.8903043554 ; C 4.7039778770 9.0113410836 -1.8890043554 ; C 4.7039778770 7.6143410836 -1.8890043554 ; C 16.8703778770 7.6143410836 -1.8890043554 ; C 16.8703778770 9.0113410836 -1.8890043554 ; H 5.8910778770 10.7979410836 -1.8875043554 ; H 5.8910778770 5.8277410836 -1.8875043554 ; H 15.6832778770 5.8277410836 -1.8875043554 ; H 15.6832778770 10.7979410836 -1.8875043554 ; C 5.9119778770 9.7145410836 -1.8874043554 ; C 5.9119778770 6.9110410836 -1.8874043554 ; C 15.6623778770 6.9110410836 -1.8874043554 ; C 15.6623778770 9.7145410836 -1.8874043554 ; C 7.1332778770 9.0207410836 -1.8859043554 ; C 7.1332778770 7.6048410836 -1.8859043554 ; C 14.4410778770 9.0207410836 -1.8859043554 ; C 14.4410778770 7.6048410836 -1.8859043554 ; H 8.34",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:50,simpl,simple,50,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['simpl'],['simple']
Usability,"Hello everyone,. Thanks for your quick answer and your very thorough explanations ! 👍 . Indeed, I totally missed the part about the different type of spinorbital storing. In this case as you say, both codes are right. I was confused because for me, as an OpenFermion user (quantum computing package), the second approach was more natural (i.e. storing according to spatial MOs with alternating alpha then beta spinorbital). I was using the OUTPUT from psi4 as a direct reference for my calculations. More precisely, I wanted to compute overlap between an eigenstate from Psi4 and another one generated by OpenFermion. As you could imagine, the results were very strange... This is why all of this appeared as a ""pb"" for me :) But now, everything is solved ! Thanks for your help !. Before leaving, I would like also to sincerely thank all of you for the very nice work done with Psi4 and Psi4-numpy. As a physicist working in quantum computing, these codes are fundamental tools for my everyday work. Moreover, it helped me learning a lot about practical implementation of quantum chemistry methods. Thanks a lot guys for your investment in this project !!. Best, ; Saad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-694084437:1024,learn,learning,1024,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-694084437,1,['learn'],['learning']
Usability,"Hello everyone. Thank you for working on this fantastic project, I've been using it a lot lately and I'm both grateful and impressed. That said, I've been thoroughly trying to break the code by doing some... unconventional calculations. I'm converging core holes in molecules. In the simple case of water, this leads to the following total energies, where _opt refers to the neutral GS RHF molecule and +_homo-i refers to the UHF cation, on the GS RHF geometry, with the hole in the homo-ith MO. [psi4_11.tar.gz](https://github.com/psi4/psi4/files/3469634/psi4_11.tar.gz). (PSI4 1.1); water_opt -7.606667516613838e+01; water+_homo -7.566072290801020e+01; water+_homo-1 -7.558091679634278e+01; water+_homo-2 -7.541230326047109e+01; water+_homo-3 -7.423771580655676e+01; water+_homo-4 -5.571830715553878e+01. Noticeably, pulling an electron from the homo-3 and homo-4 require some crafty work, but **I have managed to converge this calculations with several basis sets and in DFT, too, using damping and other tricks, all in PSI4 1.1. Energies are qualitatively the same alway**s. All the output files are attached, in psython mode (I could not make MOM to work from python). Now then, I wanted to check some things, so I printed the density matrices from .fchk files and plugged them to PySCF, projecting them properly and so on, just to evaluate the energy with UHF on top of those density matrices. I get the same energies for the neutral molecule and the homo, homo-1 and homo-2 cations. I get VERY different energies from the homo-3 and homo-4 states. Now thats weird, because the energies above make sense. So I assumed, okay, maybe there's something odd with the .fchk writer module. I've seen its been updated, so lets try a newer version of PSI4. So I got the 1.4a2.dev78 and tried to run my calculations using the newest available dev release, from scratch. I get exactly the same energies, except for the homo-4 state, for which I get some very funky results:. [psi4_14.tar.gz](https://github",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692:284,simpl,simple,284,https://psicode.org,https://github.com/psi4/psi4/issues/1692,1,['simpl'],['simple']
Usability,"Hello to my dear friends at PSI4. Nick Stair (@nstair) and I were just testing a brand new GPU implementation of ECPs, and ended up needing three codes to do the test. In many cases, all three codes match to the machine epsilon. However, for L+1 = F-type ECPs I'm afraid PySCF and Tachyon match and PSI4 out of the box does not. We see silent differences of O(1.0) au. So while I am not 100% certain, I have a strong suspicion that the F-type ECPs and higher are broke in PSI4. Maybe it is as simple as cranking the compiled L up one in the ECP library? I'm just worried about users silently running broke deep cores. Beer for you all if it is on our end, but thought it was worth raising. . Tech note: Note that the tests below are of the spectra of the V_pq matrices in the AO basis because Nick is too lazy/clever to reorder the PySCF basis functions. We also have tests lower in L of the PSI4 <-> Tachyon matrix elements (same basis ordering, of course!!) that match to mach eps. . ![image](https://user-images.githubusercontent.com/43890147/165858988-c31c42fa-9c58-4068-993a-5648bec9baaf.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564:493,simpl,simple,493,https://psicode.org,https://github.com/psi4/psi4/issues/2564,1,['simpl'],['simple']
Usability,"Hello,. I am trying to compile a plug-in as described in http://www.psicode.org/psi4manual/master/plugins.html .; The plug-in is one of those used as example (https://github.com/psi4/psi4/tree/master/plugins/mointegrals). All I did is: ; 1. Create a directory. ; 2. Copy into it the files from the last link.; 3. Execute: `psi4 --new-plugin myplugin +mointegrals`; 3''. Alternatively I tried `psi4 --new-plugin myplugin mointegrals`; 4. Change dir to the new directory and execute `make`. It returns:; `Makefile:15: /build/buildd/psi4-4.0~beta5+dfsg/builddir/src/bin/MakeVars: No existe el archivo o el directorio; make: *** No hay ninguna regla para construir el objetivo «/build/buildd/psi4-4.0~beta5+dfsg/builddir/src/bin/MakeVars». Alto.`; (The file or directory doesn't exist. There is no rule to build the target. Stop.). What I'm doing wrong?. My work station is running linux Ubuntu LTS 14.04. The psi4 version is the last stable release. . I'm trying to compile the plug-in with the hope it helps me to build the full CI matrix. If Psi4 provides a simple way to generate the Hamiltonian matrix elements it would be even more useful to me. Thank you very much for your time and the opportunity of using your software.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308:1057,simpl,simple,1057,https://psicode.org,https://github.com/psi4/psi4/issues/308,1,['simpl'],['simple']
Usability,"Hello,. I am working on a university project and want to confirm that Psi4 is running correctly. When I run the test that the binary installation guide specifies I get the following error:. ![image](https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675:146,guid,guide,146,https://psicode.org,https://github.com/psi4/psi4/issues/675,1,['guid'],['guide']
Usability,"Hello,. Somehow the `pytest` module is imported during the DFT calculation with dispersion correction and crashes Psi4 if `pytest` is missing. It can be fixed simply by installing the missing module, but I thought that it's worth reporting still in order to patch the packaging. Psi4: v.1.8 from `conda-forge` (installed in a clean env using ` conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `). Code to reproduce:. ```python; molecule {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. memory 8GB; set_num_threads(2); set freeze_core True. E, wfn = energy('wb97x-d/6-311g**',return_wfn=True); ```. Fails with the following error:. ```; Traceback (most recent call last):; File ""/home/q-posev/miniconda3/envs/psi4-v18/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2574, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1430, in scf_wavefunction_factory; superfunc, _disp_functor = build_functional_and_disp(name, restricted=(reference in [""RKS"", ""RHF""]), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1407, in build_functional_and_disp; _disp_functor = empirical_dispersion.EmpiricalDispersion(name_hint=superfunc.name(),; File ""/home/q-posev/mi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3003:159,simpl,simply,159,https://psicode.org,https://github.com/psi4/psi4/issues/3003,1,['simpl'],['simply']
Usability,"Hello,. The short answer is, at the moment, no. As said above, nothing in these equations prevents parallelism, but the equations are extremely complex and so is the code...; Improving the parallelism of SAPT0, which is much simpler, is on the pipeline though.; Sorry we can't help more for now, but if you know someone who can code, contributions are welcome!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-135840223:225,simpl,simpler,225,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-135840223,1,['simpl'],['simpler']
Usability,"Hello,. this is more of a question rather than a problem I have with `psi4`, but I thought this would be a good place to ask with so many experts here. i wish to modify and calculate the 3-index integrals for any given basis set to create features for a machine learning model. . first, I tried using `psi4` to get the `3coverlap` matrix, e.g.; ```python; # this is just water; my_geometry = psi4.geometry(; '''; H 0.0021 -0.0041 0.0020 ; H 0.8669 1.3681 0.0011; O -0.0110 0.9628 0.0073; symmetry C1; '''; ); basis = psi4.core.BasisSet.build(my_geometry, target='6-31g*'); mints = psi4.core.MintsHelper(basis); print(mints.ao_3coverlap().to_array().shape); >> (19, 19, 19); ```; and I found that it has the shape `(num_basis_fn, num_basis_fn, num_basis_fn)` where `num_basis_fn` is the total no. of basis functions for all atom in this molecule the current basis set. . However, for the ML model features, I need to ""expand"" this matrix to have more rows in the 1st dimension. ; specifically, I am following the OrbNet-Equi paper: https://www.pnas.org/doi/10.1073/pnas.2205221119#sec-3; in equation 13 & 14 of the `Materials and Methods` section of this PNAS paper, they have written formulae for their version of the 3-index integrals.; ![image](https://user-images.githubusercontent.com/25001874/223633100-63624cd1-d992-4dbe-84c5-73cdeece4536.png). The exact no. of rows is arbitrary, in the sense it depends on the modeller. In the case of the OrbNet-Equi paper, I checked their uploaded feature file, and it has 60 rows. i.e. the shape for **each atom** comes up to: `(60, num_basis_fn, num_basis_fn)`. ; this agrees with their explanation just below eqn 14, where their choice of `n` (and hence `gamma`) leads to a total of `16 x 1 + 8 x 3 + 4 x 5 = 60` unique functions for their ""auxiliary Gaussian-type basis functions"" in eqn 14. an important detail, is that I just want the matrix for a **single atom for each element**, which is why `num_basis_fn` is just counting all the basis functionsfo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892:262,learn,learning,262,https://psicode.org,https://github.com/psi4/psi4/issues/2892,1,['learn'],['learning']
Usability,"Hello,; Has this been resolved? I have just hit that error:; iwl_buf_init: Can't open file 33; with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; I'm using a fresh build I pulled(?) yesterday.; Best wishes,; Rika. molecule caffeine {; units bohr; 0 1; C 1.50 -0.505274704 0.000000; C -0.535187033 -2.058190923 0.000000; C 2.65 -4.522014770 0.000000; C 1.346731167 2.284891446 0.000000; C -3.463010598 1.525507419 0.000000; C -1.745695607 5.842896101 0.000000; C -5.228750999 -2.835032850 0.000000; C 6.295922772 -1.343301717 0.000000; N 3.617453017 -2.104182389 0.000000; N 0.151176399 -4.614309103 0.000000; N -3.029497084 -1.135014970 0.000000; N -1.247933362 3.102880179 0.000000; O 3.102683166 3.787581194 0.000000; O -5.585618888 2.429058396 0.000000; H 3.895327083 -6.157733721 0.000000; H -2.816386000 6.395195000 -1.672580; H -2.816386000 6.395195000 1.672580; H 0.068926104 6.808767386 0.000000; H -6.392104000 -2.520913000 -1.673960; H -6.392104000 -2.520913000 1.673960; H -4.537919087 -4.771667968 0.000000; H 7.459103496 -3.040539942 0.000000; H 6.719940000 -0.221440000 1.677441; H 6.719940000 -0.221440000 -1.677441; }. set basis cc-pvtz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-41624543:282,simpl,simplify,282,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41624543,1,['simpl'],['simplify']
Usability,"Hello. Thank you for explain me. I still have some problems with this plug-in, it seems like I am doing something wrong or the plugin does not work yet. I make a complete pastebin to make it simpler to analyze: http://pastebin.com/4EAjU7CC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195784330:191,simpl,simpler,191,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195784330,1,['simpl'],['simpler']
Usability,Here an input file : it simply crashes with no specific error. molecule c2h3 {; C .049798 -.576272 .000000; C .049798 .710988 .000000; H -.876750 -1.151844 .000000; H .969183 -1.154639 .000000; H -.690013 1.498185 .000000; units ang; symmetry c1; }; set basis cc-pvdz ; set scf_type df; set cc_type df. set guess GWH; set reference rohf; set MAXITER 1000. set e_convergence 1e-6; set d_convergence 1e-6; set ints_tolerance 1e-8. set FROZEN_DOCC [1]; set frozen_uocc [10]; set roots_per_irrep [4]; energy('eom-cc3'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240187176:24,simpl,simply,24,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240187176,1,['simpl'],['simply']
Usability,"Here is a script can orthogonalize orbitals between different geometries. However it does not consider frozen orbitals. They can be simply added following the comments inside the script. ```; #!/usr/bin/python; import psi4. # some global variables; nirrep = None; nrdoccpi = None; nruoccpi = None; nactvpi = None; nmopi = None. """"""; This function makes (C1)^T S2 C1 orthogonal; C1: converged CASSCF orbitals at geometry 1; S2: SO overlap matrix at geometry 2; return: orthogonal orbitals; """"""; def ortho_orbs(wfn1, wfn2, semi = True):; title = ""\n ==> Orthogonalize Orbitals Between Different Geometries <==\n""; psi4.core.print_out(title). # make sure there is no frozen orbitals; psi4.core.print_out(""\n Testing frozen orbitals ... ""); global nirrep; nirrep = wfn2.nirrep(); nfdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_DOCC"")); nfuoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_UOCC"")); nf = nfdoccpi.n() + nfuoccpi.n(); if nf != 0:; psi4.core.print_out(""False""); raise ValueError(""I am too lazy to consider frozen orbitals.""); else:; psi4.core.print_out(""Pass""). # get C1 and S2; C1 = wfn1.Ca(); S2 = wfn2.S(). # figure out irreps and orbital spaces; global nmopi; global nrdoccpi; global nactvpi; global nruoccpi; nmopi = wfn2.nmopi(); nrdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""RESTRICTED_DOCC"")); nactvpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""ACTIVE"")); nruoccpi = psi4.core.Dimension(nirrep); for i in range(nirrep):; nruoccpi[i] = nmopi[i] - nrdoccpi[i] - nactvpi[i]. # create subspace orbitals: core, active, virtual; psi4.core.print_out(""\n Preparing orbitals of subspaces ... ""); Ccore = psi4.core.Matrix(""C core"", nmopi, nrdoccpi); Cactv = psi4.core.Matrix(""C actv"", nmopi, nactvpi); Cvirt = psi4.core.Matrix(""C virt"", nmopi, nruoccpi). # fill in data to orbitals of subspaces; for h in range(nirrep):; offset1 = nrdoccpi[h]; offset2 = nactvpi[h] + offset1. for i in range(nmo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-313731339:132,simpl,simply,132,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339,1,['simpl'],['simply']
Usability,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-357208169:380,simpl,simple,380,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169,1,['simpl'],['simple']
Usability,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-284125806:423,simpl,simply,423,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806,1,['simpl'],['simply']
Usability,"Hi All, . I see that this issue is still open. I was wondering if there is a current work around? I tried some simple experiments to see if it was still producing the incorrect output:; `> psi4 --version`; `1.7`; input file contents:; ```; mol = psi4.geometry(""""""; H 0.000 0.000 0.000; H 0.000 0.000 0.740; Symmetry c1; """"""); psi4.set_options({'basis': 'sto-3g'}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); print(""MO coefficients""); print(wfn.Ca().to_array()); print(""Fock in the AO basis""); print(wfn.Fa_subset(""AO"").to_array()); print(""Fock in the MO basis""); print(wfn.Fa_subset(""MO"").to_array()); ```; this gives the following output:; ```; MO coefficients ; [[ 0.54884228 1.21245192]; [ 0.54884228 -1.21245192]]; Fock in the AO basis; [[-0.36607883 -0.59428702]; [-0.59428702 -0.36607883]]; Fock in the MO basis; [[-1.59408547e+00 8.04278118e-16]; [ 7.39285035e-16 7.76197397e-02]]; ```; and in the output file; ```; Orbital Energies [Eh]; ---------------------; Doubly Occupied: ; 1A -0.578578 ; Virtual: ; 2A 0.670950 ; @DF-RHF Final Energy: -1.11678331788308; ```; the orbital energies in the output file are correct, which should be the diagonal elements of the Fock matrix in the MO basis, but these are different. . I check the AO and MO coefficients produced by two other QM programs (pyscf is below) to see where the inconsistency might be, they both produced the ""correct"" Fock matrix (i.e. the diagnoal elements in the MO basis are the orbital energies) with the following MO coefficients:; pyscf input; ```; import numpy; from pyscf import gto, scf, lo. geometry = '''; H 0.000 0.000 0.000; H 0.000 0.000 0.740; ''' . mol = gto.M(atom=geometry,; basis='STO-3G') ; mf = scf.RHF(mol); mf.kernel(); print(mf.kernel()); Fao = mf.get_fock(); print(""MO coefficients""); print(mf.mo_coeff); print(""Fock in AO basis""); print(Fao); Fmo = mf.mo_coeff.T @ Fao @ mf.mo_coeff; print(""Fock in MO basis""); print(Fmo); ```; ```; converged SCF energy = -1.11675930739643; -1.1167593073964255; MO",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699:111,simpl,simple,111,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699,1,['simpl'],['simple']
Usability,"Hi Daniel,; A simple way would be to force the presence of the GRAC shift commands, but switch it off if the shifts are negative. Or simply allow a new option: ASYMPTOTIC-CORRECTION True | False This may be a better approach as it will allow the possibility of negative shifts should there be *some* reason to use them. By the way, the reason for my asking this is that I want to try the range-separated functionals with IP-tuning. Will the w-parameter be user-definable for a SAPT(DFT) calculation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/939#issuecomment-373638089:14,simpl,simple,14,https://psicode.org,https://github.com/psi4/psi4/issues/939#issuecomment-373638089,2,['simpl'],"['simple', 'simply']"
Usability,"Hi Lori,. Let us start with your first question for the HF molecule. I run your job, and it terminates ""normally"". Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- ---------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192875912:151,simpl,simply,151,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912,1,['simpl'],['simply']
Usability,"Hi Luca,. (1) You of course always need to calculate the O(n^4) two-electron; integrals in the AO basis. The cost reduction is achieved by not performing; the total O(n^5) two-electron integral rotation. (2) I think it is best if you figure out which lines to copy where. Else I; might as well have written the plugin. The reason why I answer all these; questions, instead of doing it myself in 10 min, is because I hope you; learn something from my hints. (3) The number of variables in the x-matrix is the number of independent; parameters which characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:426,learn,learn,426,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,1,['learn'],['learn']
Usability,"Hi Susi, I made a new PR to fix the underlying SAD issue. However, READ casting between symmetries will need to wait for Psi4 1.2 as its fixed there. Changing the multiplicity/charge is trickier as its not clear the priority order for occupations (read/guess/eigenvalue ordering). Please note that [this](https://github.com/psi4/psi4/issues/483) ticket attempts to address these issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/586#issuecomment-275673604:206,clear,clear,206,https://psicode.org,https://github.com/psi4/psi4/issues/586#issuecomment-275673604,1,['clear'],['clear']
Usability,"Hi all! I have submitted a PR to fix this bug. The bug behind this issue is that, for sufficiently small calculations run in parallel with the PK SCF option, the buffer size per thread can actually be set to 0. Simply enforcing a minimum buffer size per thread of 1 seems to fix the issue presented here. Thank you again for bring this bug to our attention!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760#issuecomment-1297581676:211,Simpl,Simply,211,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1297581676,1,['Simpl'],['Simply']
Usability,"Hi all! I was working on folding the `PK_ALGO` keywords into `SCF_SUBTYPE`, and I ran into an issue that may be worth discussing. . By default, using `OOC_YOSHIMINE` and `OOC_REORDER` as `SCF_SUBTYPE`s the way we were discussing causes the calculation to throw an exception. The issue is because, in the SAD guess, DFJK is used by default; and `SCF_SUBTYPE` applies to the SAD guess DFJK (at least MemDFJK currently, and soon DiskDFJK) as well. Since `OOC_YOSHIMINE` and `OOC_REORDER` would be used as the keyword for the SAD DFJK, and since DFJK doesn't support those keywords explicitly for `SCF_SUBTYPE`, the calculation throws an exception. Note that setting `SAD_SCF_TYPE=DIRECT` eliminates this issue entirely. There are probably a few ways to resolve this, if we choose to explicitly continue on this path:. 1. As mentioned above, simply force `SAD_SCF_TYPE` to another option (like `DIRECT`) for PK calculations. I'll admit I'm not a big fan of this approach since DF is more performant, although it may not matter in the grand scheme of things since it's just the SAD guess. ; 2. Force `OOC_YOSHIMINE` and `OOC_REORDER` to work with the DFJK algorithms. The logical way to do this would be to have those keywords act the exact same as `SCF_SUBTYPE=OUT_OF_CORE` for DFJK. I'm a bit iffy on this one, as well, since it may imply that the three out-of-core keywords have different impacts on DFJK when they really don't. Documentation can clear that up, but still. What does everyone think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327:838,simpl,simply,838,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"Hi all,. I've been running x2c calculations and when I checked for a simple Fe atom I encountered a bug I guess, as the energy is plain wrong with x2c in the cc-pVDZ basis when ```puream = false```. Here is the script I use:. ```; import psi4; ; psi4.geometry(""""""; Fe 0. 0. 0.; symmetry c1; """"""); psi4.set_options({'basis':""cc-pvdz-decon"",; 'basis_relativistic': ""cc-pvdz-decon"",; 'reference': ""rhf"",; 'relativistic': ""X2C"",; 'puream':""false""}). scf_e, scf_wfn = psi4.energy('scf', return_wfn=True); print(""Hartree-Fock energy: {}"".format(scf_e)); ```. Just replacing ```puream = true``` fixes the issue. Any idea of the reason of this ?; Note that ```sto-3g-decon``` works like a charm with ```puream = false```, so it might be a problem in the f shell ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1908:69,simpl,simple,69,https://psicode.org,https://github.com/psi4/psi4/issues/1908,1,['simpl'],['simple']
Usability,"Hi all. I've been using psi4 inside of a docker container for over a year. Suddenly, the same build process fails to produce a usable psi4 install. I get the following exception when trying to run `psi4 --version` (or any other psi4 command) inside the container: ; ```sh; (base) root@3434e5974c7f:/# psi4 --version; Traceback (most recent call last):; File ""/opt/conda/lib//python3.9/site-packages/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: /opt/conda/lib//python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: undefined symbol: __intel_sse4_strlen. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 183, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib//python3.9/site-packages/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: /opt/conda/lib//python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: undefined symbol: __intel_sse4_strlen; ```. The simplest repro can use the following `Dockerfile`:. ```; FROM continuumio/miniconda3:4.10.3; RUN conda install psi4=1.5 -c psi4; ```. Then:; `docker build -t psi4-test .`. Then to enter the container:. `docker run -it psi4-test bash`. Then inside the containter run:. `psi4 --version`. Has something changed on the conda repos that now results in missing libraries, specifically those containing `__intel_ss34_strlen`? Strange that this very simple build processes worked for one year+ and now fails... Have repro'd on multiple systems. Thanks so much!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596:127,usab,usable,127,https://psicode.org,https://github.com/psi4/psi4/issues/2596,3,"['simpl', 'usab']","['simple', 'simplest', 'usable']"
Usability,"Hi! I'm following the [official tutorial](https://psicode.org/psi4manual/master/psiapi.html) to run a simple HF computation using Psi4:; ```; H2 = psi4.geometry(""""""; units au; H 0 0 0; H 1.4 0 0; """"""; ). psi4.set_module_options('scf', {'e_convergence': '1e-3'}). psi4.energy('scf/cc-pvdz'); ```. However, it seems that after I manually set the energy convergence threshold to `1e-3`, the program still used the default value `1e-6` for the computation based on its output log: ; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. Did I use the wrong method to change the option (even though it's recommended in the same tutorial)? If so, what is the correct way to do it in Python? Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2990:102,simpl,simple,102,https://psicode.org,https://github.com/psi4/psi4/issues/2990,1,['simpl'],['simple']
Usability,"Hi!. An issue: different results are printed when running the attached files: ; a) python tst.py; It prints [ 2.00000335e+00 2.00000331e+00 ..... -6.65828772e-04 -2.38015245e-03]; for the custom output which I request; (notice that tst.py is attached as tst.py.txt); [tst.py.txt](https://github.com/psi4/psi4/files/1790987/tst.py.txt). b) /opt/anaconda3/bin/psi4 file.dat; which prints; [ 1.99922250e+00 1.99922249e+00 ....... -6.83682794e-04 -2.43598746e-03] ; (notice that file.dat is attached as file.dat.txt); [file.dat.txt](https://github.com/psi4/psi4/files/1790991/file.dat.txt). There is a clear difference in first two values, although tst.py is almost **identical** to file.dat !. PS. Psi4 was installed via Anaconda. Now I'm using a 64-bit Anaconda Python 3.6.3 with the following modules:; [root@*** ***]# conda list | grep ""psi""; chemps2 1.8.4 0 psi4/label/dev; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gau2grid 0.1 0 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; libefp 1.5b1 0 psi4/label/dev; libint 1.2.1 1 psi4/label/dev; libxc 3.0.0 6 psi4/label/dev; pcmsolver 1.1.10 py36_1 psi4/label/dev; psi4 1.2a1.dev781+837e345 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev5 py36_0 psi4/label/dev; simint 0.7 0 psi4. PPS. I've previously followed advices to solve the https://github.com/psi4/psi4/issues/927#issuecomment-370240121 issue which I encountered earlier. Could I have not updated anything ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/932:598,clear,clear,598,https://psicode.org,https://github.com/psi4/psi4/issues/932,1,['clear'],['clear']
Usability,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144729559:267,simpl,simplified,267,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559,1,['simpl'],['simplified']
Usability,"Hi, I'm one of the core developers for Psi. One of my personal objectives for this year is to _replace_ our current I/O system, which has not been significantly redesigned since its original creation in the '90s. While it fulfilled its original design goals of simplifying the API compared to its predecessor, its _steep learning curve_ and _difficult to understand error messages_ are obstacles to continued Psi development, given that our graduate student-led development inherently has high turnover. I can tell you now that your project is of immediate interest. I'll look over the project in detail and have more detailed thoughts for you by this time next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929:261,simpl,simplifying,261,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929,2,"['learn', 'simpl']","['learning', 'simplifying']"
Usability,"Hi, Ugur; I've been doing Quantum Monte Calro calculations in CASINO program https://vallico.net/casinoqmc/; It uses Diffusion Monte Carlo (DMC) method for solving for the ground state of the many-body Schrödinger equation. In principle for bosonic state the DMC method is exact, but fermionic system has nodes and consequently regions of positive and negative sign, thus several well-controlled approximations must be introduced for calculations to remain tractable.; The fixed-node approximation, is the simplest of them ; http://web.ornl.gov/~pk7/thesis/pkthnode21.html#SECTION00844000000000000000; CASINO program takes initial MO from external MOLDEN file usually from HF calculation (if single reference WFN is suitable). But I found that Orbital Optimized MO turns out better in this case.; I usually doing calculations in large bases up to cc-pV6Z and pV7Z.; I do not know whether it is possible to do such a calculation in psi4. with respect, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152818239:506,simpl,simplest,506,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152818239,1,['simpl'],['simplest']
Usability,"Hi, all! I mentioned this issue yesterday at the Psi4 Dev meeting, and I wanted to post the issue here, with more collected information. The crux of the issue, as I have determined, is that the COSX code, when using the ROBUST grid pruning scheme in conjunction with 146 spherical points on either of its grids (initial or final), simply breaks. Consider the following input:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_final 146; cosx_radial_points_final 50; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. A simple expansion of the final COSX grid compared to default. This calculation breaks upon entering the final SCF iteration (where the tight grid is used) with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! ADIIS minimization failed. File a bug, and include your entire input and output !; ! files. !; ! !; !----------------------------------------------------------------------------------!; ```. The following input, an expansion of both the initial and final grids, also fails:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_initial 146 ; cosx_radial_point_initial 50 ; cosx_spherical_points_final 302; cosx_radial_points_final 75 ; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. This one fails in the SAD-guess iteration, with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::diagonalize: DSYEV failed! !; ! Error occurred in file: !; ! /theoryfs2/ds/dpoole",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:331,simpl,simply,331,https://psicode.org,https://github.com/psi4/psi4/issues/2890,2,['simpl'],"['simple', 'simply']"
Usability,"Hi, thanks for the quick answer. Could be: as I was starting MOM within very few iterations, the impact of the guess may have been decisive. However, changing the guess (specifically from sad to read, taking the orbitals from the previous RHF calculation) did not work. What apparently fixes the issue, independently of the guess, was increasing the number of SCF iterations before activating MOM. So I don't really know what is it. . Also note that, while my inputs may seem very strange (and, quite possibly, messy), the HF/UHF case is the most simple one. Converging these states with large basis sets in DFT is a true pain, and often requires a lot of toying around). As an additional note, the energy that the program was giving with that output is exactly 9.3609016111309238, the nuclear repulsion energy. So, for whatever reason, the electronic energy is 0 in that state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692#issuecomment-518487956:547,simpl,simple,547,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518487956,1,['simpl'],['simple']
Usability,"Hi,. I'd be happy to help with code--it would be an interesting learning experience. But I'd probably only be able to find time after I finish my PhD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-136233334:64,learn,learning,64,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-136233334,1,['learn'],['learning']
Usability,"Hi,; Please, if possible, kindly let me ask a question as follows:. Recently, I lost my Psi4 code and had to again install its newest version 1.9.1 through ""Conda-Forge"". Moreover, I did build a scratch folder for Psi4 in the Home directory and its path was truly included in "".bashrc""; i.e.; export PATH=/home/saeed/miniconda3/bin:$PATH; export PSI_SCRATCH=/home/saeed/Scratch_PSI4. When a given Psi4 task is ran, the scratch folder is filled and empty alternately. But, after finishing calculations, this folder remains full and there are several files in it that must be deleted manually, while there was no such problem before. Please also let me state that the problem mentioned above only exists for ""CBS-extrapolations"" calculations while ""SAPT"" calculations are never encountered such a problem. Could you please let me know how I can resolve this problem so that this folder, when a task is over, to be emptied automatically as before?. In advance, too many thanks for your highly valuable guidance. Sincerely,; Saeed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/416#issuecomment-2254445245:999,guid,guidance,999,https://psicode.org,https://github.com/psi4/psi4/issues/416#issuecomment-2254445245,1,['guid'],['guidance']
Usability,"Hm wonder if we could do as Lori suggests as the bulletproof way to do it,; but allow CORRELATION_TYPE as the quick and easy default that will usually; work for most things. On Thursday, March 10, 2016, Lori A. Burns notifications@github.com wrote:. > Actually, we have CI_TYPE but not CEPA_TYPE now (or will once #306; > https://github.com/psi4/psi4/pull/306 merges in), so 5: SCF_TYPE,; > MP2_TYPE, MP_TYPE, CC_TYPE, CI_TYPE. The first has many algorithms, the; > others just DF/CD/CONV. There's also a few strays: DCFT_TYPE and OPT_TYPE.; > ; > For simple calculations, a SCF_TYPE and CORRELATION_TYPE, as you suggest,; > works. But I'm concerned about targeting a complete options set for; > composite jobs (e.g., SCF + extrapolated MP2 + CCSD(T) delta correction).; > There, you might want the first two terms DF and the last CONV.; > ; > When I started going crazy with _TYPE keywords, I had one for each method; > (e.g., MP4SDQ_TYPE). The current lineup is a compromise between broad; > (CORRELATION_TYPE) and specific (LCCD_TYPE), and I think I'd like to see; > how the use-cases develop along that spectrum. Thanks for thinking about; > this, though!; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-195060159.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-195061636:552,simpl,simple,552,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-195061636,1,['simpl'],['simple']
Usability,"Hm, I think a solution to allow this would be very messy. . We would have to: ; 1. check for molecule names that would cause syntax errors.; 2. Figure out some way to fix the name so that is is a valid identifier ; 3. Find any mention of the original name in the rest of the input file and apply the same translation to it. Doing something like prepending `mol_` to the molecule name would allow things like you mention `2xh20` to work fine `2xh20 `—>`mol_2xh20`, but I think it would be a difficult to deal with every possible thing that a user could possibly enter. . The [documentation](http://www.psicode.org/psi4manual/master/psithoninput.html) describes the few special cases that the ""psithon"" input parser is prepared to deal with like the `molecule <name> {…}` block. It might be a good idea to mention that `molecule name {…}` essentially gets converted to `name = psi4.geometry(…)` to drive home that ""name"" needs to be a valid Python identifier, but in my opinion the syntax error makes that pretty clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286904185:1011,clear,clear,1011,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286904185,1,['clear'],['clear']
Usability,"Hmm, well thats interesting. Would you mind running the boroxine test case with the DF-MP2 module and post the result? Best way to access this module is to simply request 'energy('MP2')`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-225929051:156,simpl,simply,156,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225929051,1,['simpl'],['simply']
Usability,"Hmmm, people should double check this list.... it may be that we have a; useful feature and nobody bothered to write a test case for it (development; of the test cases was not done in a systematic fashion...). In particular; @lothian and @fevangelista should check that these bits really are; extra/obsolete. On Mon, Nov 21, 2016 at 10:37 PM, Lori A. Burns notifications@github.com; wrote:. > I cleared out all the library files on the list, and they didn't put up a; > fight. Doing a full testsuite now.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/525#issuecomment-262139161, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdk9MUAdFAT5TwLyNOX22XiVbROAWks5rAmNtgaJpZM4K40wH; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262319020:395,clear,cleared,395,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262319020,1,['clear'],['cleared']
Usability,"Hmmm. Looks like something I introduced with the changes to OEProp. It's almost certainly an issue related to combining AO and SO dimensions somewhere. I'll fish through the code, hopefully by the weekend, and try to find the culprit. Thanks for the detailed feedback,. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/84#issuecomment-97962390:259,feedback,feedback,259,https://psicode.org,https://github.com/psi4/psi4/issues/84#issuecomment-97962390,1,['feedback'],['feedback']
Usability,"Hooray, that looks great. Skipped or xfailed is no problem (just how we handle testing optional dependencies). Outright failed is a problem, but I don't see any of those. I think you're good to go. I wish I understood clearly what was causing your psi4conda problem, but that's awkward to debug. I suspect interference in python path btwn active python (in anaconda) and active psi4 (in psi4conda).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933:218,clear,clearly,218,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933,1,['clear'],['clearly']
Usability,"How did you get gau2grid (psi4 dependency) compiled without `mpmath`? There are ways around it, but simplest precaution is to make sure the python psi4 cmake is detecting (look in `<objdir>/CMakeCache.txt`; influence through `cmake -DPYTHON_EXECUTABLE=/full/path/to/bin/python`) and any conda-supplied psi dependencies are in the *same* conda environment and that that's active throughout cmake configure, `make`, `make install`, and runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181608:100,simpl,simplest,100,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181608,1,['simpl'],['simplest']
Usability,"How much leeway do I have to break the old sow/reap code? It would simplify things for me if I could abstract the contents of the loop where we compute the energy derivative at the displacement into its own function. Writing that becomes simpler if I can just remove or comment out the now-useless sow/reap code. With this function, it becomes simple to loop over every displacement in our displacement dictionary and only then compute for the reference geometry, which will be in a separate part of the metadata, per Andy's suggestion today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-426850441:67,simpl,simplify,67,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-426850441,3,['simpl'],"['simple', 'simpler', 'simplify']"
Usability,"How soon do you need this? This bug is an easy fix, and I can include it in the Psi4 1.8 release coming out in a couple weeks. If you need this sooner, the ""workaround"" is simple.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533540405:172,simpl,simple,172,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533540405,1,['simpl'],['simple']
Usability,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:177,simpl,simplified,177,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866,1,['simpl'],['simplified']
Usability,"I added full Sphinx documentation for both the FCHK writer and for GDMA, in commit f2aca76, @CDSherrill. I heard back from Prof. Stone and he has kindly agreed to allow us to use GDMA in the way that we want to, so this PR is ready to go. In his message, he raised the issue of our output providing only kcal/mol units, and mentioned that he would like to have kJ/mol units too, in line with IUPAC guidelines. We certainly should make the hartree to kJ/mol available directly in physconst (instead of having to go through kcal/mol), but what do think about having both units available in the SAPT output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201394449:398,guid,guidelines,398,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201394449,1,['guid'],['guidelines']
Usability,I agree - neat! The reason why we don't use targets so much in Autocmake is that we don't know the targets yet :-) I have few things to learn from this PR.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031#issuecomment-394462921:136,learn,learn,136,https://psicode.org,https://github.com/psi4/psi4/pull/1031#issuecomment-394462921,1,['learn'],['learn']
Usability,I agree keeping the functions simple is favorable. Adding documentation that demonstrates things like this is useful since the user can go and apply it elsewhere. I will add that now. Thanks!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260402196:30,simpl,simple,30,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260402196,1,['simpl'],['simple']
Usability,"I agree that it should warn the user more clearly, but the lack-of-exit behavior is intentional. It's an attempt to salvage useful data rather than simply quitting and giving nothing from a potentially very long excited-state calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2521#issuecomment-1089615657:42,clear,clearly,42,https://psicode.org,https://github.com/psi4/psi4/issues/2521#issuecomment-1089615657,2,"['clear', 'simpl']","['clearly', 'simply']"
Usability,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:401,guid,guided,401,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868,4,"['Guid', 'guid']","['Guided', 'guided']"
Usability,"I agree with @jturney, but the remedy is simple in the `ccsort/local.cc` case. Line 214 is the only place where `l_length` is used; that array can be deleted and replaced with a call to `shell(i).nfunction()`. If you already have some changes in progress, would you mind making this switch, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240428977:41,simpl,simple,41,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240428977,1,['simpl'],['simple']
Usability,"I agree with others that scheme 1 is preferable (fewer brackets than scheme; 2), and that ""module"" is clearer than ""local"". Also agree we need to plan ahead to simplifying options handling in general. On Thu, Nov 10, 2016 at 9:07 PM, Daniel Smith notifications@github.com; wrote:. > I was thinking a head a bit where we would be able to kill off globals or; > at least provide a way to reduce them. I was hopeful that this scheme would; > be able to fill that roll as well to prevent duplication.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/511#issuecomment-259862684, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdho874ynQJnwqQU-HSnHhpY_hwN5ks5q883MgaJpZM4Ku0ap; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259863279:102,clear,clearer,102,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259863279,2,"['clear', 'simpl']","['clearer', 'simplifying']"
Usability,"I agree, it'd be nice to catch those and warn ppl off from that feature of GBS format. In the existing logic https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L183-L184 is already catching only `<element symbol(s)> 0` through the zero near the end of https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L115. This would be a general (to all files read), not specific, catch, but if you change that `0` in [the regex](; https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L115) to `\d+` then add the below after https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L184, does that catch and provide better guidance?. ```; gbsint = int(atom_array.match(line).group(2)); if gbsint != 0:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Unsupported basis to atom by number assignment. Use ""assign"" statements as in https://github.com/psi4/psi4/blob/master/tests/mints2/input.dat : line %d: %s"""""" % (lineno, line)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1270#issuecomment-455333178:734,guid,guidance,734,https://psicode.org,https://github.com/psi4/psi4/issues/1270#issuecomment-455333178,1,['guid'],['guidance']
Usability,"I agree. It's probably the simplest change that (might) work. Should this PR be closed then, and a new one opened?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-196890030:27,simpl,simplest,27,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196890030,1,['simpl'],['simplest']
Usability,"I am newbie to Psi4 so I am probably doing something wrong. I am trying to calibrate Psi4 with PySCF but getting quite different DFT energies for a simple LDA calculation on Ethane.; PySCF = -78.9836765087814; Psi4 = -79.3264756599. The following is my python script; ```python; import os. ncores = 8; os.environ['OMP_NUM_THREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL_NUM_THREADS=4; os.environ[""VECLIB_MAXIMUM_THREADS""] = str(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Ethane.xyz'. #psi4_geo = psi4.geometry(geo_txt); with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation ; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sad"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":434, ; ""dft_radial_points"" :88, ; ""diis_max_vecs"" : 6; }; ); energy = psi4.energy(name=""scf"", dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""svwn"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; mf.grids.level = 7; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:148,simpl,simple,148,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['simpl'],['simple']
Usability,"I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments. * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-933477291:374,clear,clear,374,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933477291,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"I am not sure we have anyone currently that is ""responsible"" for the ADC code. Without someone to step in and attempt to fix this, I am inclined to simply disable the ability to run ADC(2) until we have someone to delve into it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-511126386:148,simpl,simply,148,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-511126386,1,['simpl'],['simply']
Usability,"I am trying to build it on a cluster resource where the filesystem (AFS) might be the culprit. I should have nearly 40 GB of free space, so I don't think that would be the issue. But there might be additional quirks with permissions or something?. I was able to get a build going in my scratch directory, which is a much simpler filesystem. I will contact the administrators and ask them about this. But it's definitely an issue with my local system, not with Psi4 itself. Thanks for your help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147#issuecomment-814169495:321,simpl,simpler,321,https://psicode.org,https://github.com/psi4/psi4/issues/2147#issuecomment-814169495,1,['simpl'],['simpler']
Usability,"I am trying to calculate DF-MP2 counterpoise-corrected energies for some dimers.; PSI4 gives some weird results for aug-cc-pvtz and aug-cc-pvqz (while all seems well for aug-cc-pvdz). First I provide the results for the benzene-benzene dimer.; ![benzene_benzene](https://cloud.githubusercontent.com/assets/4300354/16049263/4eba59cc-3257-11e6-9fb4-7270fba551ed.png); I plot 4 points of the dissociation curve, show both HF and DF-MP2 interaction energies for the three basis sets mentioned earlier and compare with MOLPRO. Here everything seems to be perfectly fine. However when I do exactly the same for the boroxine dimer, things look different:; ![boroxine_boroxine_rot60](https://cloud.githubusercontent.com/assets/4300354/16049322/92511392-3257-11e6-9e03-9e2922fe86e6.png); Clearly PSI4 produces some weird results for the DF-MP2 energy in the case of aug-cc-pvtz and aug-cc-pvqz.; I attach the input/output for one case where PSI4 does something weird. (Note that you can skip the CC part to reproduce the problem). [cbs.in.txt](https://github.com/psi4/psi4/files/314339/cbs.in.txt); [cbs.out.txt](https://github.com/psi4/psi4/files/314340/cbs.out.txt). My PSI4 version is Git: Rev {master} e4070d002474257",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408:779,Clear,Clearly,779,https://psicode.org,https://github.com/psi4/psi4/issues/408,1,['Clear'],['Clearly']
Usability,I am trying to generate .cube files using the output of `qcengine.compute()`:. ```python; results = qcengine.compute(...). wfn_dict = results.wavefunction.dict(); ```. The issue is that `wfn_dict` is incompatible with the psi4 wfn dict I could reload with `psi4.core.Wavefunction.from_file(wfn_dict)`. Then I could simply do:. ```python; psi4.cubeprop(wfn); ```. See also https://github.com/MolSSI/QCElemental/issues/248,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2884:315,simpl,simply,315,https://psicode.org,https://github.com/psi4/psi4/issues/2884,1,['simpl'],['simply']
Usability,"I am working with David Williams-Young to extend the features of his IntegratorXX and GauXC projects, which will enable access to modern quadrature grids in various programs. While going through the code in IntegratorXX, we noticed in https://github.com/wavefunction91/IntegratorXX/pull/27 that there is a potential discrepancy in the Chebychev roots in Psi4; ```; void RadialGridMgr::getChebychevRoots(int n, double r[], double w[]) {; double piOverNPlusOne = M_PI / (n + 1);; for (int i = 1; i <= n; i++) {; double x = cos(i * piOverNPlusOne);; r[i - 1] = x;; w[i - 1] =; piOverNPlusOne * sqrt(1.0 - x * x); // sqrt(1.0 - x*x) could've been replaced with sin(i*piOverNPlusOne).; }; }; ```. This should be compared to the Gauss-Chebychev rules on [Wikipedia](https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature). The nodes clearly correspond to Chebychev quadrature of the second kind, but ; 1. the weights are from Gauss-Chebychev quadrature of the first kind and; 2. the factor to transform to unit weight is missing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3004:837,clear,clearly,837,https://psicode.org,https://github.com/psi4/psi4/issues/3004,1,['clear'],['clearly']
Usability,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:602,guid,guide,602,https://psicode.org,https://github.com/psi4/psi4/issues/2117,1,['guid'],['guide']
Usability,I believe that should have fixed it. Your instructions were very clear. Thanks.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-457794769:65,clear,clear,65,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-457794769,1,['clear'],['clear']
Usability,"I believe the problem here is not in the opening of the MO file (180) but in the attempt to write new MO energies into the existing checkpoint file. I'm looking at a possible fix that will simply delete the old checkpoint file in case the number of MOs changes, but this will likely break something else about the optimization...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37134034:189,simpl,simply,189,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37134034,1,['simpl'],['simply']
Usability,"I believe this PR fixes the bug in #976 correctly, without adverse side effects (famous last words). Does the overall charge (from the charge/multiplicity entries) affect `Z` values of the component atoms? What happens when one would - perhaps foolishly - try to do a ""frozen core"" `Li^2+` calculation?. However, I am wondering whether our approach to core freezing is perhaps a bit simplistic: a point was raised on the forums that one might want to be able to automatically detect when the valence shell is empty (eg. alkali metal cations), and then perhaps unfreeze the previous shell. Similarly, some other QM packages allow freezing up to `N-th` previous rare gas shell (the current behaviour is `N=1`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385869940:383,simpl,simplistic,383,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385869940,1,['simpl'],['simplistic']
Usability,"I can help better if I know your goal. The `ENABLE_GENERIC=ON` for BLAS/LAPACK was added to facilitate static linking of MKL libraries for binary packaging and distribution, both to minimize file size and make sure the binary had high-quality math libraries w/o needing an Intel license. Since then, we've learned that there can be bad reactions between psi4-w/-mkl-statically-linked and other software (namely numpy) that also accesses the same symbols. (#748 and #755 for gory details.) So we've dropped static linking for BLAS. It helps that conda distributes MKL now, too. So, I'm glad to help if that hasn't warned you off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386411503:306,learn,learned,306,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386411503,1,['learn'],['learned']
Usability,"I can now finally explain why this bug is happening:; Assume you're cloning a ZMAT atom. [This line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.h#L372) I added in #1108 enforces that if ZMAT coordinates were computed for the parent, they be computed for the clone atom. When giving a ZMAT atom coordinates in space, the reference atoms need to already have coordinates in space computed. Psi checks this, naturally enough, with`CoordEntry.computed_` (via a getter). Because of that line in #1108, `computed_` will always be set correctly for ZMAT atoms, so if you only ever use ZMAT atoms, all is well. However, there is no mechanism in place to compute coordinates for Cartesians as well, so those are listed as not computed when Psi checks `computed_`. The fix seems clear enough to me: add a `compute` call in `CartesianEntry::clone` to mirror the one in `ZMatrixEntry::clone`. Because changes in `molecule` can have wide-reaching repercussions, I'll hold off on testing the fix until @loriab is done fixing the full test suite, so I can use it to safety check this PR. And with that realization, I am quite hopeful to get this in Psi 1.3 after all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379#issuecomment-448234589:801,clear,clear,801,https://psicode.org,https://github.com/psi4/psi4/pull/1379#issuecomment-448234589,1,['clear'],['clear']
Usability,"I can't figure it out from this. I know that Python and OpenMP don't get along in other contexts (e.g. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58378 is GOMP-specific, of course). Can you create a simple reproducer that I can give the Intel OpenMP team?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404855291:201,simpl,simple,201,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404855291,1,['simpl'],['simple']
Usability,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-197012335:581,simpl,simply,581,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335,1,['simpl'],['simply']
Usability,"I cleared out all the library files on the list, and they didn't put up a fight. Doing a full testsuite now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262139161:2,clear,cleared,2,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262139161,1,['clear'],['cleared']
Usability,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:585,simpl,simply,585,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013,1,['simpl'],['simply']
Usability,I didn't know psi5 already existed :laughing: . I do prefer to start with a version number that is clearly 'newer' then the previous ones (like 4.0b5). And 1.0 seems like a downgrade.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182947030:99,clear,clearly,99,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182947030,1,['clear'],['clearly']
Usability,"I do like HDF5, but it would add an extra dependency to Psi4 for something relatively simple. We use NumPy to write arrays [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L445), it should be noted the resulting data is in binary form and readable by anyone. Our Wavefunctions are written as `npz` objects for the SCF `GUESS READ` machinery [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L1340) using the above machinery. A JSON write would be equivalent and probably much more general. The above snippet is specific to Psi4's SCF Wavefunction, but I have been wanting to generalize this function for some time so that a user could read/write a general Wavefunction on command. We would be happy to work on the underlying data structures to make them more general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/562#issuecomment-271298945:86,simpl,simple,86,https://psicode.org,https://github.com/psi4/psi4/issues/562#issuecomment-271298945,1,['simpl'],['simple']
Usability,"I don't see how that is possible - that test failed even when I tried it with the ```CORE``` guess above. The SCF must have converged since the job isn't crashing, and CH4 is a simple closed-shell molecule so there shouldn't be any problems with different HF solutions. This is also confirmed by the finite difference tests that pass for that molecule. Whatever this test job is testing, its problems appear to be unrelated to this merge request. IMHO it shouldn't even be checking the vibrational frequencies and eigenmodes, but rather the raw Hessian which is way less ambiguous. From the output it is not clear what it is actually checking. Looks like they are eigenvectors, but the code is massaging them somehow, like you said. As you can see, the differences are arising only from the degenerate modes, so the related test code must not be working properly. The problem is that comparing eigenvectors for degenerate modes, you have to allow not only for rotations among the vectors, but also flipping the sign of the individual eigenvectors. Maybe this is not taken into account in the test code and that's what is causing the problems?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452085216:177,simpl,simple,177,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452085216,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"I don't see much more I can do here. The convergence behavior seems perfectly reasonable to me. It's just an annoying case where the next step changing the energy by less than 1e-6 doesn't mean you're within 1e-6 of the converged energy. Do you just need me to check if I agree with the new treatment of `occ` convergence?. The other point which may be valuable for test suite purposes is that there are multiple LCCD energy functions. There's the projective function (linearize the normal CCD energy function) and the variational function (just use the Lagrangian). The projective function is simple but non-variational, where the variational function is variational but as implemented in `occ` reads multiple V^4 quantities from disk. I believe the variational functional is the default in fnocc, but I'd need to read over the code to be certain. I assume Eugene's version doesn't run into the V^4 problem... If you want to try the variational function in the test suite, `set ccl_energy true`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-682990959:594,simpl,simple,594,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-682990959,1,['simpl'],['simple']
Usability,"I don't think the inferring of grid order from `lebedev_mapping` was *ever* correct, to be clear. I believe (but am not 100% sure) that the new way of gaining the information (using information from `LebedevGridMgr`) proposed in #2736 works?. I can test -- do you have a simple input I can test with my build of that patch?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2754#issuecomment-1292381264:91,clear,clear,91,https://psicode.org,https://github.com/psi4/psi4/issues/2754#issuecomment-1292381264,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:890,clear,clear,890,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088,1,['clear'],['clear']
Usability,I fully support this. And I suppose that the contribution guide should mention which features of C++11 are **not** welcome (`auto` seems to be one of those).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-189146864:58,guid,guide,58,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-189146864,1,['guid'],['guide']
Usability,"I had a look at the basis projection code in psi4/src/psi4/libmints/wavefunction.cc, and I don't really understand why it is so complicated. Namely, the whole point about the basis set projection is that you use the resolution of the identity; ```; \sum_{UV} |U> <U|V>^{-1} <V|; ```; to project between basis sets. That is, given orbitals in an original basis; ```; c_{ui} |u>; ```; you get the new orbitals as; ```; c_{ui} |U> <U|V>^{-1} <V|u>; = [<U|V>^{-1} <V|u> c_{ui} ] |U>; ```; that is, a simple matrix multiply; ```; CA = [X_A^2 S_{AB} C_B ]; ```; where ```X_A``` is the orthogonalizing matrix in the new basis, ```S_{AB}``` is the overlap between the old and new bases, and ```C_B``` are the coefficients in the old basis. Now, the real question is just what you have to do when the dimension of the basis changes. When the new basis is smaller than the old one, there's no problem. If it's bigger than the old one, you just need to run a SVD on ```CSX``` and pad these to the end of the MO coefficient matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899#issuecomment-431644324:496,simpl,simple,496,https://psicode.org,https://github.com/psi4/psi4/issues/899#issuecomment-431644324,1,['simpl'],['simple']
Usability,"I had a quick look at this, and it looks like the `least_squares_fit_polynomial()` function behaves a little dodgy on the first iteration - the minimum of your supplied potential is clearly the 1.1\AA value, while on the first iteration the solver settles on 3.2\AA and keeps increasing. The 30\AA point seems to be throwing the solver off, as the initial guess is taken as mean(r). To get a quick fix, try to remove it - it seems to work fine on my computer without that one, converging on a physical 1.08\AA r_e value. . What also seems to work is to switch off weighting for the first iteration of calculating the derivatives - then it doesn't care about the far away point. It's perhaps better to hear from @andysim whether that's sensible or not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483002552:182,clear,clearly,182,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483002552,1,['clear'],['clearly']
Usability,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:274,simpl,simple,274,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['simpl'],['simple']
Usability,"I have found a few cases (Cr2) where DF kills CD. For the most part, I found that CD takes more time (3-4x) compared to conventional integrals. For the most part, if you are dealing with transition metals, computing the integrals seems to take a large amount of time and CD requires you to randomly compute different integrals, so the code becomes pretty slow. If anybody has any ideas of how to speed up this process please tell me. Right now, I am trying to run a system with 340 basis functions and the cholesky procedure has been running for 70 hours already. There exists very few DF basis sets with large enough AM for Chromium so I am forced to use Cholesky. . I have a branch in my fork where I am trying to figure out the major bottlenecks of cholesky and speed it up. The simplest idea, which is already done, is to compute the cholesky integrals only once and read them from disk. I basically allow cholesky to read the df_ints_io keyword. Previously, the CDJK and lib3index do not interact with this keyword, so it would compute the cholesky integrals if choleskify was ever called. . I agree with @dgasmith to use conventional integrals for the SAD guess. Cholesky seems to slower than conventional integrals. Generation of the cholesky integrals is known to be a slow process as shown by Lindh and Aquilante in many of their papers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224376772:782,simpl,simplest,782,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224376772,1,['simpl'],['simplest']
Usability,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:159,simpl,simple,159,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['simpl'],['simple']
Usability,"I have no issues with requiring cmake version 3.3 for the sake of cleaner CMakeLists.txt's I think it is worth it. . w.r.t to the changes in handling threading, you have a big :+1: from me on this:; - Ignoring the envars is a good move. If `__init__.py` was going to look at `os.eviron` to set the default number of threads which should take precedence `MKL` or `OMP`? ; - > *In the face of ambiguity, refuse the temptation to guess.*; - With the command line argument, or `psi4.set_num_theads()` it is simple to honor the envars *explicitly*.; - > *Explicit is better than implicit* . One suggestion /comment (If the general consensus is in favor of this):; - Should the number of threads be removed from the psi4 header? I can see confusion coming from that line when `psi4.set_num_threads()` is used. Maybe just append something that indicates it is the value from the command line?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627#issuecomment-281758152:503,simpl,simple,503,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-281758152,1,['simpl'],['simple']
Usability,"I have recently bought a new MacBook Air, and I have homebrew for my developing environment (on my old mac I had MacPorts: I never managed to compile and I finally gave up). I cloned the psi4 repo and went for the simplest build (./setup build; cd build; make -j). Once I had all required packages the setup worked smoothly.; Unfortunately, ""make -j"" gives me the following error:. > clang: error: unable to execute command: posix_spawn failed: Resource temporarily unavailable. which from a simple minded ""LMGTFY"" search seems to be a problem with too many child processes spawned by make. removing the ""-j"" seems to work: 70% done and running so far...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/396:214,simpl,simplest,214,https://psicode.org,https://github.com/psi4/psi4/issues/396,2,['simpl'],"['simple', 'simplest']"
Usability,"I have seen the same result in both v1.7 and v1.9. Below is my input:. ```; molecule {; C 43.447574615 4.402106285 18.442501068; Cl 43.539905548 3.305690527 19.834751129; H 43.777095795 3.891677380 17.581066132; H 42.397209167 4.711723328 18.365312576; H 44.039062500 5.304682255 18.653499603; Na 43.090690613 5.591814041 21.935888290; 1 1; }; set print 2; set basis def2-TZVPPD; set gradient_write on; G, wfn = gradient(""WB97M-D3BJ"", return_wfn=True); wfn.energy(); wfn.gradient().print_out(); ```. Output:; [psi 1.7](https://github.com/psi4/psi4/files/15100254/dimer_0001.txt); [psi 1.9](https://github.com/psi4/psi4/files/15100255/test.txt). Output gradient:. ```; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.017612153536 -0.030226835448 -0.016364611072; 2 -0.001951550496 0.000510350455 -0.012196966883; 3 -0.006845878529 0.008632172968 0.016317898785; 4 -0.007830360016 0.005006082123 0.005314350686; 5 -0.000151463183 0.010716793785 0.004937148905; 6 -0.000804674189 0.005151834777 0.001952651442; ```. The total gradient of the geometry is (in Hatree/Bohr):. ```; 0.000028227123 -0.00020960134 -0.000039528137; ```. This seems quite large! When converted to kcal/mol/A, it's almost 0.25 kcal/mol/A. I am training a machine learning potential, which needs data in high accuracy. To find the source, I set `set print 2`, and found the source is XC Gradient. Other parts are good. ```; -XC Gradient: ; Atom X Y Z ; ------ ----------------- ----------------- ----------------- ; 1 0.023413713156 -0.034618654043 0.016561407807 ; 2 0.004295152287 -0.082574073389 0.110502690803 ; 3 0.057058934205 -0.084984859487 -0.155578605215 ; 4 -0.165454990449 0.054800035457 -0.007744542989 ; 5 0.081560548449 0.141475784522 0.033034928588 ; 6 -0.000845130524 0.005692165589 0.003184592861 ; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161:1282,learn,learning,1282,https://psicode.org,https://github.com/psi4/psi4/issues/3161,1,['learn'],['learning']
Usability,"I have vague memories about some of the DSD methods changing parameters; from one paper to another. I discussed this with Jan Martin way back when; via email, and thought the situation was somewhat confusing. Without; remembering this any more clearly than I do, I suppose Holger's idea of; using the more recent paper is probably a good one. On Wed, Mar 7, 2018 at 12:43 PM, Holger Kruse <notifications@github.com>; wrote:. > i remember the omega issue from a forum post: http://forum.psicode.org/t/; > wb97x-definition-bug/480; >; > I think ORCA was used for all the DSD developments. There you can defined; > DHDF compositions in the input file (see e.g. my reference outputs). If; > manual defining parameters for another program really counts as a good test; > is perhaps debatable because typos never come alone ;); >; > Are the non-dispersion forms of DSD-PBEP86 from both papers really; > different? I hope not...; > Anyway, I'd stick with the 2013 paper in doubt because it is the latest; > ""update"".; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/922#issuecomment-371221109>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdkpodkciT2JkrcNFW-gbLDLpUy4Mks5tcBwzgaJpZM4SJ0Uw>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-371240538:244,clear,clearly,244,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-371240538,1,['clear'],['clearly']
Usability,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-187310350:445,simpl,simple,445,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350,1,['simpl'],['simple']
Usability,I just found a few things to improve so let's put this on pause for a few days.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942#issuecomment-654555619:58,pause,pause,58,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-654555619,1,['pause'],['pause']
Usability,I just tested on my box and I think it is as simple as changing line 4 of `psi4/src/bin/psi4_main/CMakeLists.txt` from. ```; COMMAND ${CMAKE_COMMAND} -E copy ...; ```. to. ```; COMMAND ${CMAKE_COMMAND} -E copy_if_different ...; ```. The `version.h` file only changes the the git commit sha changes (only on commits and pulls). Another consequence of the cmake rewrite is that before you could've simply typed `make mints/fast` in your objdir and it would just compiled libmints. Now's there the required step of `cd objdir/psi4_core-prefix/src/psi4_core-build` before `make mints/fast`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239052313:45,simpl,simple,45,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239052313,2,['simpl'],"['simple', 'simply']"
Usability,"I know how to fix this myself, but let's pretend I'm a stupid Mac user that has Xcode and, by the grace of god, managed to install gfortran without losing a limb. Don't I deserve for CMake to throw me a bone and auto-detect the fast system BLAS/LAPACK?. I am surprised that CMake doesn't do this already btw. Seems dirt-simple for them. Cheers,. Jeff. Jeffs-MacBook-Pro:build jhammond$ cmake ..; -- The C compiler identification is Clang 4.2.0; -- The CXX compiler identification is Clang 4.2.0; -- Check for working C compiler: /usr/bin/clang; -- Check for working C compiler: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenM",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:320,simpl,simple,320,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['simpl'],['simple']
Usability,"I know next-to-nothing about the CDS's group's future JK plans. Before I can approve this, I'd like some confidence that these changes really are essential preparation for work-in-progress in the CDS group that you expect to be submtited soon. Can you give me an outline, or a draft PR, of how this responsibility transfer simplifies Incremeental Fock?. Is `early_screening_` for this ""semi-numerical exchange,"" or something else? How close is this other PR to completion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1086413448:323,simpl,simplifies,323,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1086413448,1,['simpl'],['simplifies']
Usability,"I know that 6*natom is also found in the header of the second derivative output file from WDA's `INTDER`, but I'm still not sure why. In addition to my `findif` work, I'm using `INTDER` for my work at UGA, so I'm doubly interested in learning what it means. Our `anharm` program calls this number `NSTORE` and `NNSTOR`, but it never does anything with them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381451337:234,learn,learning,234,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381451337,1,['learn'],['learning']
Usability,"I looked into this. I believe that this method is responsible for the lack of scaling:; https://github.com/psi4/psi4/blob/fe246a0bc35a16577193e23138781e12ba2c40ac/psi4/src/psi4/libmints/potentialint.h#L66; Unfortunately, it won't be trivial to parallelize. This is because of the ObaraSaika-Recurrence object that's touched deep within the nested operations:; https://github.com/psi4/psi4/blob/fe246a0bc35a16577193e23138781e12ba2c40ac/psi4/src/psi4/libmints/potentialint.h#L147; The entire method shares this one object, so this line must be executed sequentially, meaning any parallelization must occur in an even more nested region than this one (which would be too nested to improve performance). I can think of two possible solutions to this problem:. 1. Allow the creation of one ObaraSaika-Recurrence object per thread. This would be the simplest to implement, but it would increase the memory cost of the calculation (by a factor of at most num_threads).; 2. Parallelize the compute method of the ObaraSaika-Recurrence object itself. This could make the ObaraSaika code a little uglier since some of the loops might have to be unrolled, but it wouldn't require significantly more memory. I'd be happy to work on this, but I'd like to know if anyone else had any opinions or suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438022175:844,simpl,simplest,844,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438022175,1,['simpl'],['simplest']
Usability,"I may be doing something wrong, but the outputs I get seems unexpected. When running the following example with or without point charge, the same energy is computed:. ```; # Simple example to test QMMM charges. molecule {; 0 1; He 0.0 0.0 0.0; symmetry c1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(0.0,0.0,5.0,-1.0); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set {; basis aug-cc-pvtz; }. energy('scf'); ```. Either with or without, the energy is: -2.8612063084748378 Hartree. ```; grep ""Total Energy ="" *.out; with.out: Total Energy = -2.8612063084748378; without.out: Total Energy = -2.8612063084748378; ```. Full in and outputs are attached: [qmmm_test.zip](https://github.com/psi4/psi4/files/3884810/qmmm_test.zip) These are based on the documentation here: http://www.psicode.org/psi4manual/1.2/scf.html#external-potentials-and-qm-mm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1757:174,Simpl,Simple,174,https://psicode.org,https://github.com/psi4/psi4/issues/1757,1,['Simpl'],['Simple']
Usability,"I must admit, I was a bit surprised by the effect of changing the value of dft_spherical_points by 1! Undefined behaviour is never good!. I've never submitted a pull request before but it's something i should learn to do. Are there any simple tutorials on how to do this? Should I fork my own version and do a PR from that?. I'll see if I can work it out and submit one shortly...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/673#issuecomment-291010281:209,learn,learn,209,https://psicode.org,https://github.com/psi4/psi4/issues/673#issuecomment-291010281,2,"['learn', 'simpl']","['learn', 'simple']"
Usability,"I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. To get around this for now, I suggest simply running the two states in; separate jobs. -TDC. P.S. I removed the scf_type keyword and reproduced the error, so that's not; the problem. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Mar 9, 2016 at 12:40 PM, Andrew James notifications@github.com; wrote:. > @Konjkov https://github.com/Konjkov could you show some of the output; > above the PSIO_ERROR? I am not sure that DF integrals is the culprit; > here. It would be easier to track down if I could see where in the second; > exited state it is failing. I ran the input you posted but I don't see the; > same PSIO_ERROR.; > ; > It is strange that the first excited state would be able to run if the; > integrals were incompatible. Also, the file number 128 is a temporary file; > used by the CC codes to store things with a short lifetime. If the; > integrals were the source of the problem I would expect this kind of error; > to show up when trying to read some persistent quantity, which would then; > be used to compute the values that would go into file 128.; > ; > @kannon92 https://github.com/kannon92 do you have an input that will; > cause the PSIO_ERROR if DF is used? The driver should probably soft-fail; > with a warning to turn DF off in these cases. It would be very frustrating; > for a job to run this far just to fail.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/307#issuecomment-194417745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194423967:426,simpl,simply,426,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194423967,1,['simpl'],['simply']
Usability,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2317:333,learn,learn,333,https://psicode.org,https://github.com/psi4/psi4/issues/2317,3,"['learn', 'simpl']","['learn', 'simple']"
Usability,"I presume I'm not the only one this happens to, but when CMake generates an error during setup, the error is often obscured and hidden in the wealth of output. Instead of simply printing: ""Error Occurred"" (or whatever it actually prints) and then having to scour the output I'm wondering if it would be possible to somehow re-echo the error at the bottom of the output. I'll look into this, but if one of the CMake gurus already knows how to do this, I'd appreciate any insight you can give.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/82:171,simpl,simply,171,https://psicode.org,https://github.com/psi4/psi4/issues/82,1,['simpl'],['simply']
Usability,"I ran (cd doc; make) which amounts to the same I guess. I understand that the web-hosted documentation is great, but having the HTML along with the binaries would be more canonical, in case a user is using an older version but looking at the latest docs online. What I am not quite clear about yet is whether the content of SUMMARY gets changed based on present functionality (some dcft tests appear to have been dropped for me), or whether that is due to outdated source files. If it is strictly the latter, then yeah, making sure those are uptodate at tarball release would suffice I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22983952:282,clear,clear,282,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22983952,1,['clear'],['clear']
Usability,"I recently found an issue when using DETCI to compute roots of LiCN with CIS/6-31G*, which may have uncovered some deeper problems. the main issue: the lowest-energy solution as predicted by GAMESS (and my own code, which diagonalizes the Hamiltonian by simply calling `np.linalg.eigh`) is completely skipped by Psi4, despite the following roots being the same. GAMESS predicts the following first six excited state energies (the RHF energy matching to 6 decimals):; ```; GAMESS LiCN/6-31G*; CONVERGED STATE 1 ENERGY= -99.5348374214; CONVERGED STATE 2 ENERGY= -99.5315000308; CONVERGED STATE 3 ENERGY= -99.5315000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:254,simpl,simply,254,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['simpl'],['simply']
Usability,"I see that this goes a lot further than I was expecting it to; some day that will stop surprising me. It's a shame about the apparent necessity to keep the inconsistent definitions, but you're probably right when you say lots of downstream code is going to rely on the current behavior, whether or not we see it as ""correct."" The dual-identity of type-A and type-B ghosts only complicates matters further, though I definitely see the need for it. It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow, but this is likely more complicated then it sounds. Either way, the ability to go back-and-forth between real and ghost is absolutely necessary, and type-B is the only one that can consistently do that. . Fixing only type-A ghosts to return zero mass may only confuse things further. If nothing else, the functions should at least do the same thing for type-A and type-B ghosts. Consistency between `Molecule.mass` and `Molecule.Z` could be worked on later, though as you pointed out it's probably not a good idea to change `Molecule.Z`. . As for a new `Molecule` function to ensure the user knows what they're going to get, are you referring specifically to a `molecular_weight` function or more generally a function to return either the mass or Z val as either zero or real depending on input? I could get behind either of those, though with `molecular_weight` I would suggest simply setting a default for ghost atoms to return zero mass as I can't imagine anyone would want a molecular weight including ghost atom masses. . EDIT: I just saw what you said about ACS and DGAS nre edit in [#844](https://github.com/psi4/psi4/pull/844). That could work, requiring the argument c-side and giving a default py-side, though I wonder how many places we'd have to update c-side calls to conform to this. Might be the best answer with the least pain involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363495902:1459,simpl,simply,1459,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363495902,1,['simpl'],['simply']
Usability,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:1013,clear,clear,1013,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517,1,['clear'],['clear']
Usability,"I see, thanks. This topic clearly needs a case list for me to work from. As I suspect you've kindly provided me one via The Table, I'll try to get them working simultaneously.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288846733:26,clear,clearly,26,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288846733,1,['clear'],['clearly']
Usability,I should have been clear. We want this tagged in the same BasisSet family even though there are no corresponding DF/RI basis for those particular atoms so that we get a better failure message.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/331#issuecomment-205812617:19,clear,clear,19,https://psicode.org,https://github.com/psi4/psi4/pull/331#issuecomment-205812617,1,['clear'],['clear']
Usability,"I should have learned by now not to agree to deal with issues you bring up when they involve OCC or DFOCC. We're getting a bad access exception when trying to [open the libtrans PSIO file](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/open.cc#L69). I'm not sure what the connection is between the wavefunction you pass in and making PSIO unhappy, but I'll investigate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-600658163:14,learn,learned,14,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-600658163,1,['learn'],['learned']
Usability,"I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. Are any of these now available in v5.1 that I should be activating?. ```; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM05-D not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM06-D3 not in Psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163:2,simpl,simplified,2,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163,1,['simpl'],['simplified']
Usability,"I slightly prefer `n_ecp_core` in case a user thinks `n_core` valid for cc-pwCVXZ, but I'm fine as-is as long as docstring clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734#issuecomment-307966763:123,clear,clear,123,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307966763,1,['clear'],['clear']
Usability,"I tested the psi4 package on `linux-64` using the staged-recipes artifacts and it works perfectly. The tests were performed on an in-house QM package and I only did a single point gradient computation on a single and simple molecule. Two things maybe:. - I add to use the `conda-forge/label/libint_dev` channel for libint.; - Upon importing `psi4` I noticed a bunch of prints that wasnt here before:. ```; psi4_module_loc='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4'; pymod='/python3.9/site-packages/lib/psi4'; pymod_dir_step='../../../..'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; data_dir='/home/hadim/conda_envs/share/psi4'; ```. Is it coming from package development, and you'll remove it moving forward?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938:217,simpl,simple,217,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938,1,['simpl'],['simple']
Usability,"I think ""symmetry tolerant"" is an odd description to apply to a method that; takes a symmetrical input and produces an asymmetrical output (e.g., the; DF-SCF gradient generating asymmetrical noise in the 9th decimal). If; numerical approximation is introducing the asymmetry, isn't the; symmetrization, if done evenly, likely to improve the accuracy of the; result, besides avoiding the risk of collateral damage? I appreciate; symmetrizing other types of objects may not be as simple. On Thu, Mar 3, 2016 at 2:47 PM, Justin Turney notifications@github.com; wrote:. > Yeah, the one in molecule used to be like the one in deriv when I; > originally wrote it 5 years ago. Then @psi-rking; > https://github.com/psi-rking expanded on it to assume non-standard; > orientation. A centralized one sounds good since I just found another on in; > matrix.cc.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191955685.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191991936:478,simpl,simple,478,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191991936,1,['simpl'],['simple']
Usability,"I think @loriab intended to put the GPLv2 text verbatim into LICENSE, but with the text in CITATION indicating that we also permit newer GPLs. That way, GitHub could parse LICENSE and provide a simple digest to users, but the CITATION code would clarify our intent. Adding the extra text to LICENSE removes any ambiguity resulting from the mismatch between these files and, it appears, doesn't break GitHub's license parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/684#issuecomment-296414530:194,simpl,simple,194,https://psicode.org,https://github.com/psi4/psi4/pull/684#issuecomment-296414530,1,['simpl'],['simple']
Usability,"I think JS analysis is squashed now, so ready for another try. No need to clear up history imo. I think it has to be `identifier`, not `@identifier` since latter not in JSON-LD (unless you're understanding the schema differently). I hadn't seem that you tried the id->identifier, or I wouldn't have starting in on #1905, sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-634140366:74,clear,clear,74,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634140366,1,['clear'],['clear']
Usability,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:635,simpl,simple,635,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119,1,['simpl'],['simple']
Usability,"I think it's pretty clear that this is not a problem in the code - the calculations run and give the correct result - but in the test itself that has degenerate modes which don't appear to be treated properly by the test code. Because the vibrational analysis part was also marked as ```xfail``` in the test suite, I found it reasonable to mark the Hessian test as ```xfail```, too. There still remain checks on more complicated molecules, which don't have degenerate frequencies. As cofirmed by @loriab, all tests pass, so this one is good to go!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452068699:20,clear,clear,20,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452068699,1,['clear'],['clear']
Usability,I think something's wrong with the new 1.3.0 pandas pkg minted a few hours ago. Avoiding it fixes the problem for adcc. May be simplest to add three lines to this PR: https://github.com/psi4/psi4/pull/2255/files . First line fixes the problem. Others a general update and debug line.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314:127,simpl,simplest,127,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314,1,['simpl'],['simplest']
Usability,"I think the print statements are correct. The displacements are all done by displace_cart() in fd_misc.cc. These are in mass-weighted coordinates. The 'disp_size' is therefore in mass-weighted coordinates. The Hessian then computed (using energies and disp_size) is also the mass-weighted Hessian. So ""evects"" starting at 239 are the eigenvectors of the mass-weighted Hessian. I think (without thinking about it too long) that the division of ""B_irr"" coordinates by the square-root of the masses before multiplying is just an ugly way to undo the mass-weighting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286543924:538,undo,undo,538,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286543924,1,['undo'],['undo']
Usability,I think this PR is ready to go now. Thanks in advance for any feedback.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303893263:62,feedback,feedback,62,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303893263,1,['feedback'],['feedback']
Usability,"I think this is mostly good to go, I'll add a test or two soon. I would like a little feedback on if there's a better way to store the excitation energies. I kind of just throw them in Wavefunction one at a time. I'm sure all of that will change anyway with @robertodr 's changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626184715:86,feedback,feedback,86,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626184715,1,['feedback'],['feedback']
Usability,I think this one's cleared up. Please reopen if necessary.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/932#issuecomment-376539445:19,clear,cleared,19,https://psicode.org,https://github.com/psi4/psi4/issues/932#issuecomment-376539445,1,['clear'],['cleared']
Usability,"I think this should be possible to fix with a proper EBNF grammar, but I would have to ask some colleagues who know more about parsers. Sent from my iPhone. > On Mar 19, 2017, at 2:54 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > Not sure what happened to the C, but the remainder of the valid string probably got mistaken for a comment and removed. While Psithon + preprocessing is very capable for interfacing Python and simple-to-moderate QC, the Psithon preprocessor would need to be considerably more sophisticated (ast module, I presume) to allow especially # to be treated correctly. I recommend using Python directly with PsiAPI (examples here). Psithon will never go away, but the developers are gradually moving toward primary PsiAPI use.; > ; > Thanks for the report, though. Any of these with ready solutions (like, I think, the .isidentifier() for molecule names) we'll gladly incorporate.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/655#issuecomment-287659057:436,simpl,simple-to-moderate,436,https://psicode.org,https://github.com/psi4/psi4/issues/655#issuecomment-287659057,1,['simpl'],['simple-to-moderate']
Usability,"I trimmed this down as much as I could and played with the headers to kill off the files that took an extremely long time (30-50 seconds). Each file now takes 2-8 seconds to compile, but we simply have a lot of them. Without moving more into separate modules the compile time is not likely not going to come down much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-305371303:190,simpl,simply,190,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-305371303,1,['simpl'],['simply']
Usability,"I use psi4 v1.7 to perform gradient calculations under the WB97M-D3BJ/DEF2-TZVPPD level. Most structures work fine, but I get the following error in some structures without a clear error message. ```; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:175,clear,clear,175,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['clear'],['clear']
Usability,"I want to install psi4 on my openff environment since OpenFF Recharge requires it to generate electrostatic charges (https://docs.openforcefield.org/projects/recharge/en/stable/getting-started/installation.html). . I have used mamba to install openff, following steps 3 and 4 [https://docs.openforcefield.org/en/latest/install.html](here). I tried to install psi4 via mamba with the following commad:; `mamba install psi4=1.8.1 -c conda-forge/label/libint_dev -c conda-forge`. However, I got several warnings about incompatible packages:. `blas [2.4|2.5|2.6|2.7] would require; │ │ └─ libblas [3.8.0 4_openblas|3.8.0 5_openblas|3.8.0 6_openblas|3.8.0 7_openblas], which requires; │ │ └─ openblas 0.3.5.* , which does not exist (perhaps a missing channel);; `; and; ` psi4 1.8.1 would require; │ ├─ libblas * *mkl, which requires; │ │ └─ blas * mkl, which conflicts with any installable versions previously reported;; │ └─ mkl >=2022.2.1,<2023.0a0 , which conflicts with any installable versions previously reported;; `. I also attempted to install psi4=1.7, but this also led to a similar conflicts issue:. `psi4 1.7** is not installable because it requires; └─ blas 1.0 mkl, which conflicts with any installable versions previously reported.; `; I believe I need psi4 installed on my openff environment for it to be usable for openff's wrappers. I've tried installing the blas dependencies explicitly:. `mamba conda install -c conda-forge openblas` ; but this tells me the package is already installed. . and:. `mamba install 'libblas * *mkl' -c conda-forge -c defaults` which results in the same `openblas 0.3.5.* , which does not exist (perhaps a missing channel);` error. . Any ideas? I must admit I am relatively new to using mamba + managing environments, but I believe it is just a reimplementation of conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046:1317,usab,usable,1317,https://psicode.org,https://github.com/psi4/psi4/issues/3046,1,['usab'],['usable']
Usability,"I was able to get the CHNO molecule to converge to something reasonable with pbe0/def2-TZVPPD/pcm by setting `dft_bs_radius_alpha 5.0`. Doing this with the I-containing molecule works partly, but I found that I was only able to get reasonable MBIS charges when switching to the LRC functional wb97x/def2-TZVPPD/pcm. Simply adding d3bj onto pbe0 did not seem to work. I was also able to reproduce the issue with multiple DFT methods; HF seemed ""stable"" other than some convergence issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-2407274343:316,Simpl,Simply,316,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-2407274343,1,['Simpl'],['Simply']
Usability,"I was doing a calculation of eda of transition metal complex by FISAPT, with three-body partition. A fatal error ocurred as followed. But the fragment A (0 1) is simply phenylacetylene, how could the error happen? ; Actrually, I have successfully done the eda of the same complex with two-body partition. The basis sets were exactly the same. Thanks in advance. ```; RuntimeError: ; Fatal Error: FISAPT: Charge on A is incompatible with singlet; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/fisapt/fisapt.cc on line: 393; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870:162,simpl,simply,162,https://psicode.org,https://github.com/psi4/psi4/issues/2870,1,['simpl'],['simply']
Usability,I was kind of thinking this would be purely a code style guide for now. We could break off best practices and even Psi output formatting into other areas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/752#issuecomment-312341747:57,guid,guide,57,https://psicode.org,https://github.com/psi4/psi4/issues/752#issuecomment-312341747,1,['guid'],['guide']
Usability,"I will need a little bit of time to properly parse the original message, but I suspect I know the source of the discrepancy. I am guilty of writing the original FCHK implementation; I wrote it as a simple interface to the GDMA code. I don't have access to any versions of Gaussian, so I used a combination of the example FCHK files that ship with GDMA, and the GDMA source, to reverse-engineer something resembling an FCHK file (that decision has backfired in recent weeks as people use the FCHK files we produce for other interfaces and find that it's incomplete: we've been working through those bug reports steadily). Where things get tricky is that Psi4 (and its progenitor) uses the [CCA integral](https://github.com/psi4/psi4/files/2957296/CCA.pdf) ""natural"" norm convention, unlike that other code (detailed on the last page of that attachment). Therefore, there's a factor of ; ![image](https://user-images.githubusercontent.com/201881/54209345-029a9d00-44b4-11e9-85b3-0789d498cc93.png); present in our basis function norms that some other codes lack. The presence of the overlap metric in the SCF equations means that the alternative basis function normalization manifests itself in different MO coefficients, but both conventions yield equivalent wavefunctions and properties. It's these corrections that are being applied in the snippet of code that @susilehtola referenced above. I surmise that these are not being applied consistently somewhere in the translation between Psi4 and GDMA.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927:198,simpl,simple,198,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927,1,['simpl'],['simple']
Usability,"I would add that lately we have seen a lot of problems with UHF and ROHF; converging on a wrong state for open-shells in Psi4. Although new stability; analysis code helps a lot in fixing some of the problems (for UHF), for; many of these systems finding the lowest root is quite non-trivial and is; accompanied by many SCF convergence issues, as well as symmetry-breaking; issues (UHF). Things get a lot worse for transition metal compounds (even; simple ones, like Fe(CO)5). The most helpful solution is to start with; basis set projection from a small basis, but this strategy doesn't always; work. Sometimes, combining stability analysis root search and basis set; projection helps. Indeed, other codes (particularly, MOLPRO) sometimes do better job in; finding lowest-energy solutions for systems of this type. Usually, after; investing some time, it is possible to find the necessary solution for; these non-trivial cases with Psi4, but it may be worth investigating some; of these systems for possible improvements in the code. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com wrote:. > @lothian https://github.com/lothian I guess these other codes are using; > some other convergence accelerator than Psi4 ? I would not be surprised if; > SOSCF with a core guess would converge on the right solution.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171659792:448,simpl,simple,448,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171659792,1,['simpl'],['simple']
Usability,"I would keep the ""COSX"" for recognition. This PR implements 2 grids instead of 3? That Turbomole team showed it worked well, just asking. I am in general for a simple way of setting quadrature grids, psi4-specific named grids. That is a bigger project though.; Here it would be enough to have an efficient default and in the manual a suggestion how to make a tight/accurate one.; After we gain experience with the psi4 COSX we can make a couple useful defaults. Couple of things about grids later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1115769652:160,simpl,simple,160,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1115769652,1,['simpl'],['simple']
Usability,"I would love to see an algorithm for trying to locate the global minimum of the SCF energy, preferably an automated one. This feature would be especially useful for using Psi4 as a backend for _ab-initio_ MD applications. The random orbital rotation scheme (described in [10.1021/acs.jctc.7b00011](https://dx.doi.org/10.1021/acs.jctc.7b00011)) seems like a simple and sensible approach, as it can nudge the SCF out of saddle points, as well as local minima.; This method might also be useful as a last-resort option for cases where the SCF seems impossible to converge: random rotations could be applied to the initial guess. A reference implementation is available at https://github.com/ReiherGroup/OrbitalPerturbation. (under LGPL3, so no worries there)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-352274531:357,simpl,simple,357,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-352274531,1,['simpl'],['simple']
Usability,"I'd appreciate some feedback, especially on the docs. There's one or two items where I'd like @loriab to weigh in further: function aliases and zero-if-not-present for VV10 and empirical dispersion. The failing build seems to be a random crash of the windows pipeline, not related to this PR as far as I can tell.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-939466200:20,feedback,feedback,20,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-939466200,1,['feedback'],['feedback']
Usability,"I'd bet that's the dratted feature that let's you set a molecule w/o fully specifying it. Enables `molecule mol {He 0 0 0\nHe 0 0 x}\n mol.x = 2.0`. It's set up to closely mimic same in libmints. Makes qcdb.Molecule un-pickleable. Basically, known issue, no clear remedy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130116000:258,clear,clear,258,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130116000,1,['clear'],['clear']
Usability,"I'd prefer @dgasmith option. As for storage of excitations, I was thinking to modify the return value of the solver to a data structure collecting energy, response vectors, and transition moments for each excitation. `Wavefunction` could hold a dictionary of these, with labeling by irrep (`f""STATE {n} in IRREP {m}""`) or by energy (`f""STATE {n}""`) I think the latter could be more intuitive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626346287:382,intuit,intuitive,382,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626346287,1,['intuit'],['intuitive']
Usability,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:29,simpl,simple,29,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469,1,['simpl'],['simple']
Usability,"I'll take care of getting it through Valgrind, simple memcheck at first.; I'll let you know how it goes. 2016-02-10 17:06 GMT-05:00 Justin Turney notifications@github.com:. > I agree with @andysim https://github.com/andysim to send it through; > Valgrind.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182601301.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182692064:47,simpl,simple,47,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182692064,1,['simpl'],['simple']
Usability,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:552,guid,guide,552,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169,2,['guid'],"['guidance', 'guide']"
Usability,"I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.). ```; ### Setup. molecule dimer {; He; X 1 R ; He 2 1.0 1 180 ; }. set basis 6-31G(d). Rvals = [1.4, 1.5]. ### Compute; ecp = {}; for R in Rvals:; dimer.R = R ; ecp[R] = energy(""mp2""). ### Printout; psi4.print_out(""\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); ```. The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744:40,simpl,simplify,40,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744,2,['simpl'],"['simple', 'simplify']"
Usability,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:655,clear,clear,655,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199,1,['clear'],['clear']
Usability,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:162,simpl,simple,162,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314,3,['simpl'],['simple']
Usability,I'm going to learn VTune and then start running timing tests. Let me know if there are any things you want me to be sure to test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-638154935:13,learn,learn,13,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-638154935,1,['learn'],['learn']
Usability,"I'm learnimg the world isn't ready for C++11 yet, and I'm in the process of; phasing it out of my codes. Anyways, my timer relies on Boost. What I do; is ripped right out of the Boost example for how to determine the; uncertainty in their timers, the sampling rate may be a bit high if there; ends up being 5000000 calls though. I'm not sure what you mean exactly by; separate thread. The uncertainty in each timer is a hardware feature so on; a heterogeneous cluster each mpi process needs to sample. This is only; done once at startup. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard any reason the; > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > just do it a in a different thread?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/89#issuecomment-98490177.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98491129:4,learn,learnimg,4,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98491129,1,['learn'],['learnimg']
Usability,"I'm less keen on scheme 2. Prefer scheme 1. At this point reconciliation looks simple because kwargs trump anything previously set. But by the time it gets complicated, I've got code for that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259732711:79,simpl,simple,79,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259732711,1,['simpl'],['simple']
Usability,"I'm looking around in the same area, and I think it might be a nice option to allow natural orbital occupancies to be gathered from the SCF wavefunction when the densities are requested as keyword arguments. In the current code, if you specify `density_a`, the occupancies are taken from the `core.Wavefunction.nmopi` which is the number of molecular orbitals per irrep. In the `write.cc` file in `libmints` which is called when `set print mos` and `set molden_write True` are set, the occupancy is reported correctly. If you use the molden interface directly, I think you would simply need to compute the reference wavefunction first, return this wavefunction, and pass it into molden with a new kwarg `scf_wfn` which would then use `core.HF.occupation_a()` and `core.HF.occupation_b()` to get the correct occupations. Then you could pass the SCF wavefunction into the post-SCF methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300673605:579,simpl,simply,579,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300673605,1,['simpl'],['simply']
Usability,"I'm not going to debug this myself, but if a new developer wants to take this on, the first steps are simple enough. Compile a debug build, run the input file with a breakpoint on the timer.cc:1143, then get the traceback to see which timer we're trying to turn _off_ that was never turned _on_. You can figure out a fix from there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864#issuecomment-612255996:102,simpl,simple,102,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-612255996,1,['simpl'],['simple']
Usability,"I'm not sure how big of an issue numpy/BLAS/LAPACK would be for windows, because it would appear that mkl-linked numpy, mkl, and mkl-dev packages for windows are all available on the intel conda channel. So if numpy is able to link correctly I'm sure we would be able to as well. . I think @TiborGY thoughts on I/O related code are spot on, but I don't think we would have that much code elsewhere that would be incompatible, maybe some assumptions are made in driver code about how paths are formatted and those would be fairly simple to find/fix. . I actually don't think it would be terribly difficult for us to get psi working at least with *some* compiler on windows, really the only serious obstacle I see is that none of the developers have windows hardware to do the necessary leg work to get things working. Once things are set up we can probably rely on CI testing for windows keeping things working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-381759781:529,simpl,simple,529,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-381759781,1,['simpl'],['simple']
Usability,"I'm posting this for discussion before I start coding anything. I was hoping to have some more details on prefactors, but I've both fallen ill and been given a shift in priorities, so I'm posting what I have in the interests of not wasting more time. I'm hoping to have more to say on the prefactor problem when I've recovered. @kcpearce's plans for MP2 hessians are related, but not the part of the project that I'll be focusing on. ## Motivation; Several different groups of Psi developers are dissatisfied with Psi's current technology for correlated derivatives.; * At Emory, @fevangelista has recently implemented gradients for DSRG-PT2 via a standalone code interfaced to Psi. Getting those working required consulting three(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:865,undo,undocumented,865,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['undo'],['undocumented']
Usability,"I'm pretty sure that python3 is now mandatory for psi4. Having just spotted the database abilities (that could turn out to be pretty useful for some current work), I've discovered that the ixyz2database.py script uses raw_input() that has been deprecated in python3. Replacing the 5 instances in psi4/share/psi4/scripts/ixyz2database.py and the one in psi4/driver/qcdb/psiutil.py gets past the questions about the database it will create. I was going to submit a pull request with these changes in but I there are other issues with this script: ixyz2database.py uses the deprecated method qcdb.Molecule.init_with_xyz() and the suggested replacement, qcdb.Molecule.from_string() doesn't appear to be a direct drop-in replacement. The documentation for qcdb.Molecule.from_string() is pretty minimal too. I'll poke at that part a bit more: it could well be some of my dubious geometries that are causing the ""Unprocessable Molecule remanents under xyz+:"" exceptions! I'll try with some simpler structures. There's also a raw_input() in psi4/share/psi4/scripts/setenv.py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367:983,simpl,simpler,983,https://psicode.org,https://github.com/psi4/psi4/issues/1367,1,['simpl'],['simpler']
Usability,"I'm running a single point energy calculation with `psi4.energy(""ccsd(t)/aug-cc-pvdz"")`. . The input is simple. Just:. ```; import psi4; from psi4 import *. psi4.core.set_output_file('xxx.dat', False). psi4.set_memory('200 GB'); psi4_io = core.IOManager.shared_object(); psi4_io.set_default_path(""xxx""); psi4.set_num_threads(24); ```; followed by the molecule specification with `psi4.geometry()` and then; ```; psi4.energy(""ccsd(t)/aug-cc-pvdz""); ```. (I know this will take a lot of memory and disk space, but I believe the memory limit should stand.). - psi4 version 1.3.2 in a new python 3.7 conda environment; - RHEL 7.6",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985#issuecomment-679407019:104,simpl,simple,104,https://psicode.org,https://github.com/psi4/psi4/issues/1985#issuecomment-679407019,1,['simpl'],['simple']
Usability,"I'm sure Stanton knows what he is talking about here, but I am not sure; there is a discrepancy between what he is saying and what I am saying.; Perhaps he never coded the minimal displacement approach, as we have never; coded it either. He may have decided the robustness and simplicity of +2/3; gradients was better than the complexity and complication of solving all; these little equations. I don't see a problem with you going ahead as you; are planning for pyvib2. We could revisit to try to reduce the; computational cost slightly at a later time. On Fri, Jan 19, 2018 at 12:43 PM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, my concern is your insistence; > that the rot SALCs *aren't* needed at non-stationary geometries (""3; > rotational degrees for which the energy is invariant"", ""don't have to do; > the extra displacements"") vs. Stanton's insistence that they *are* (""At a; > stationary point on the potential energy surface, both options will give; > equivalent harmonic force fields, but OFF [retains the rotational degrees; > of freedom] should be used at non-stationary points."" Since pyvib2 has to; > start from Cartesian Hessians (findif or anal.), I'm just trying to gauge; > what situations the former is valid for.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/884#issuecomment-359053844>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTPrMzI8UDltN7yLjOYyEfycGPrnAks5tMOJIgaJpZM4REtHr>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-359059459:277,simpl,simplicity,277,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-359059459,1,['simpl'],['simplicity']
Usability,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1465,simpl,simple,1465,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795,1,['simpl'],['simple']
Usability,"I'm trying to run some simple x2c jobs using the new Karlsruhe x2c basis sets. The SVP jobs run fine, but the larger basis sets cause problems. For instance,; ```; molecule {; units bohr; 0 1; Ag; Ag 1 4.60; }. set basis x2c-TZVPall-decon; set basis_relativistic x2c-TZVPall-decon; set relativistic x2c; set scf_type direct; set df_scf_guess false; set dft_radial_points 99; set dft_spherical_points 590. energy('svwn'); ```; fails to converge. For SVP, I get; ```; The 1-norm of |H_X2C - H_Dirac| is: 0.000000088631; ```; but for TZVP; ```; The 1-norm of |H_X2C - H_Dirac| is: 181094.365380967443. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```. This must be related to linear dependencies in the basis. pyscf appears to run the same calculations without problems. It uses a threshold for small exponents for the small exponents (https://programtalk.com/vs2/python/12572/pyscf/scf/x2c.py/ line 68); maybe one should also be used in psi4?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868:23,simpl,simple,23,https://psicode.org,https://github.com/psi4/psi4/issues/868,1,['simpl'],['simple']
Usability,I've added the checks for the deriv >= 1 spin-restricted case. Let me know if this is about right. The output is attached.; [nan_output.log](https://github.com/psi4/psi4/files/8960850/nan_output.log). I'll add the other cases after early feedback on the current messages.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1163531527:238,feedback,feedback,238,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1163531527,1,['feedback'],['feedback']
Usability,"I've been able to reproduce a disagreement between Psi4 and PySCF integrals. I've reached out to the `libecpint` developer to figure out if this may be an issue of numerical tightness. As far as I can tell, there's no mechanism for Psi4 to tell `libecpint` that we want our integrals to within a certain tolerance. That may be the issue for the iron pentacarbonyl system. The disagreement for your second system is much more disturbing, but my policy with debugging is to start with the simple cases first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1157785855:487,simpl,simple,487,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1157785855,1,['simpl'],['simple']
Usability,"I've checked with 1.3a1, and there trying to run `dsd-blyp-d3(bj)` simply fails.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1404#issuecomment-444440423:67,simpl,simply,67,https://psicode.org,https://github.com/psi4/psi4/issues/1404#issuecomment-444440423,1,['simpl'],['simply']
Usability,"I've got all the parts that affect REMP ready. Final stage is to persuade dfocc to converge simple molecules to default tolerance under default conditions :-) . I'll update this PR as the amalgamation, then break off just `occ` changes for you and other to look over, @behnle. A couple easy questions:; * Do you want REMP controlled by `mp_type` (covers all MPn > 2 and ZAPT) or `cc_type` (covers CEPA and CC)? Either is sensible, so your call.; * Any need to future-proof QCVariables with `REMP2` (or `REMP2,3`!)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727:92,simpl,simple,92,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727,1,['simpl'],['simple']
Usability,"I've made a new PR #2743 to JUST fix the hang bug, and then we can keep bikeshedding here on what we actually want to do about `RadialGrid` and `SphericalGrid` but have a fix in the codebase that actually stops the nasty hang that took me down this rabbit hole in the first place. - @susilehtola this initializes with an initializer list like you requested; - @hokru this loses NO information over the prior state-of-the-world like you suggested was desirable (if I was reading correctly); - @JonathonMisiewicz I guess you won't like it because spaghetti didn't go away but it's short and sweet, at least. Obviously this patch would undo all of that patch but I think the scope of this discussion exceeded the original PR statement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391:633,undo,undo,633,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391,1,['undo'],['undo']
Usability,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/286#issuecomment-189699831:1573,guid,guided,1573,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831,2,"['clear', 'guid']","['clear', 'guided']"
Usability,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203440132:414,clear,clearer,414,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132,1,['clear'],['clearer']
Usability,"I've seen a few forum topics about users with a `wfn` file wanting to use those orbitals from one computation wanting to reuse those orbitals for a different computation. Example: [here](http://forum.psicode.org/t/read-in-from-scf-with-psi4-core-wavefunction-from-file/1467). While this can be done, the answer is non-obvious and not documented. We have documentation on what the `from_file` and `to_file` commands do, but I'm aware of no documentation on how that interfaces with orbital reading technology. We should document this, for sure, but we should also think about if we want to make a simpler way to do this, since it seems to be a common problem. For instance, would it be possible to add a new method to the wavefunction class that will set a wavefunction to the scratch wavefunction for a molecule? Or would this create additional problems?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1678:596,simpl,simpler,596,https://psicode.org,https://github.com/psi4/psi4/issues/1678,1,['simpl'],['simpler']
Usability,I've tested the mrcc interface within about a year. _But_ I only have the old mrcc (c. 2014) before it learned how to do SCF itself.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070634536:103,learn,learned,103,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070634536,1,['learn'],['learned']
Usability,"IMHO ""lanthanides and actinides"" is clearer than ""inner transition metals"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1930#issuecomment-643649864:36,clear,clearer,36,https://psicode.org,https://github.com/psi4/psi4/pull/1930#issuecomment-643649864,1,['clear'],['clearer']
Usability,"Ideally there should be a test-case attached sooner rather than later. I think a simple-but-intuitive way to do this would be to add a keyword named something like `irc_n_steps` which tells OPTKING to `return OptReturnSuccess` after a given number of converged IRC points. Then you could do something like `set irc_n_steps 10` in your test case to avoid passing through the minimum, after which the steps may become unpredictable. I could help with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351224954:81,simpl,simple-but-intuitive,81,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351224954,1,['simpl'],['simple-but-intuitive']
Usability,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:51,simpl,simple,51,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699,1,['simpl'],['simple']
Usability,"If a guess basis cleans up most of the discrepancies, then I think we're ok; for now, until the revamped SAD guess can go in. On Wed, Apr 20, 2016 at 10:04 AM, Lori A. Burns notifications@github.com; wrote:. > Landing on the correct SCF solution is tricky, and guaranteeing it is; > trickier still. I hear that in psi3, users routinely supplied docc/socc; > arrays to guide to the intended solution. Fortunately, psi4 has a variety; > of guesses to obtain the right solution, and someday, as @dgasmith; > https://github.com/dgasmith mentioned, a next-generation SAD guess will; > assure correctness for the ground states of elements, at least. But without; > a root-finding driver over the SCF code that attempts and discards guesses/; > does basis projections/ evaluates the nature of the system (which can be; > computational expensive), we cannot fix some system and method combinations; > without injuring others. It should be noted that no QC methodology to date; > is completely black box and no program always obtains the correct minima; > with default options. We are glad to have the lithium report at hand and; > will be pleased to use them to test the future SAD guess, but this is not a; > n issue that will be fixed by 1.0.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/335#issuecomment-212439352",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-212443074:368,guid,guide,368,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212443074,1,['guid'],['guide']
Usability,"If so, that part of the original paper is badly written. @davpoolechem Could you double-check this? The question is what is meant by ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" and by ""Loop over all significant bra-shell pairs"" in the Ochsenfeld paper. Andy thinks ""significant"" = ""in this particular block"", but then the meaning of the first sentence I quoted isn't clear. I don't have the background in SCF algorithms to know what they're talking about without putting more time into this than I would like to spend, but it looks like it's similar to Fig. 3 and 4 of [their earlier paper](https://doi.org/10.1063/1.473833). Since you have more experience with this, can you offer a second opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1004219207:520,clear,clear,520,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1004219207,1,['clear'],['clear']
Usability,"If you pass in a reference wavefunction we assume that you have set the guess as you would like it and those keywords are ignored. You can use MP2 NO's by running the following:. ```; psi4.core.set_global_option('ONEPDM', True); psi4.core.set_global_option('OPDM_RELAX', False); mp2_e, ref_wfn = psi4.gradient(""MP2"", return_wfn=True); ```. Odd I know and I agree that we need a generic MP2 natural orbital module, but we simply have not gotten there yet. @bozkaya Do you have ROHF MP2 densities?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/829#issuecomment-339671722:421,simpl,simply,421,https://psicode.org,https://github.com/psi4/psi4/issues/829#issuecomment-339671722,1,['simpl'],['simply']
Usability,"If you really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170138644:87,learn,learn,87,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170138644,1,['learn'],['learn']
Usability,"If you tell me that this will be in the conda ""nightly"" in about a month, I can wait. The feature I need is important but not of absolute necessity for now. And for me, building from source is a nightmare right now (though I would still like to understand how to fix it, just for learning purpose).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615236034:280,learn,learning,280,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615236034,1,['learn'],['learning']
Usability,"If you're willing to take on properly assigning root psivars in cc*, that'd be splendid, @amjames. It's very true that CC psivars are pretty much ground state only and that not much has been done in the way of CC property psivars since the testing has been through `output.ref` comparison rather than `compare_values()`. One thing that will have to be resolved is indexing, as CI starts from 1. I can't even remember what position I took at the Last Great Debate on this, but I think I favor 0-indexed now, as it make the GS distinctive from ESs. Will query detci ppl tomorrow. But, yes, if you see your way clear toward fixing this up, go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259603617:608,clear,clear,608,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259603617,1,['clear'],['clear']
Usability,"If, upon `conda list psi4` the hash-like build string ends in `_2`, then all's well. [linux-64/psi4-1.8.1-py39hd162a35_2.conda](https://anaconda.org/conda-forge/psi4/1.8.1/download/linux-64/psi4-1.8.1-py39hd162a35_2.conda) is one such. That's probably what you got since the solver tries hard to pick the most recent build and only won't if other constraints get in the way. If you wanted to specify it directly, it'd be `conda create ... 'psi4=1.8.1=*_2'` to specify the version exactly and the build ending in `_2`. I should have been clearer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644:537,clear,clearer,537,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644,1,['clear'],['clearer']
Usability,"In Python 3.6, the extern object (keyword set to a Python object) is being double freed at end of execution, leading to a crash. Builds fine, runs fine, unless extern set, so only shows up for test cases extern1 and extern2. These have been conditionally and temporarily removed from test suite until this fixed. Can force a fix by clearing options before end of file, `psi4.core.clean_options()`. This is a reference counting issue and will _not_ be fixed for 1.1.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/666:332,clear,clearing,332,https://psicode.org,https://github.com/psi4/psi4/issues/666,1,['clear'],['clearing']
Usability,"In case of energy the situation is as simple as you suggested. However, in case of gradients the situation is much complicated. The DF-SCF orbitals are optimized at DF-SCF level, and these are different than that of conventional SCF. Hence, after DF-SCF if I try to compute gradients for conventional SCF I need to an extra term to MP2 Lagrangian to account for the orbital relaxation for SCF MOs. It may sound odd, but it is. Since the MOs of SCF are different than that of DF-SCF, we need to re-optimize orbitals for SCF or we need to modify our Z-vector equation sin SCF-MO gradient is not zero, but DF-SCF orbital gradient is zero. Hence, we need to modify MP2 Lagrangian for DF-SCF ref and add another term to account for orbital relaxation for SCF wfn. In summary, I recommend to use the conventional SCF for conventional MP2 gradients even though user asks a DF-SCF ref. @loriab @andysim @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-183702993:38,simpl,simple,38,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-183702993,1,['simpl'],['simple']
Usability,"In my experience (at least on remote hosts running relatively modern versions of Ubuntu derivatives, 18.04 and up), starting a process in the background and then doing a `logout` keeps the process running indefinitely. Simply closing the Putty window, etc. does not, the same happens if the network connection is interrupted, eventually the process will be killed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983#issuecomment-677612812:219,Simpl,Simply,219,https://psicode.org,https://github.com/psi4/psi4/issues/1983#issuecomment-677612812,1,['Simpl'],['Simply']
Usability,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:817,simpl,simply,817,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,1,['simpl'],['simply']
Usability,Indeed. Thumbs up. Very impressed and taking notes and learning.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276331839:55,learn,learning,55,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276331839,1,['learn'],['learning']
Usability,"Input:; ```; molecule no {; 1 2; F; H 1 0.9015; }. set {; basis cc-pvtz; reference rohf; guess sad; scf_type pk; df_scf_guess false; docc [ 3, 0, 0, 1 ]; socc [ 0, 0, 1, 0 ]; }; energy('scf'); ```; Output before:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @ROHF iter 0: 37.35213783948360 3.73521e+01 0.00000e+00 ; @ROHF iter 1: -61.25773907843870 -9.86099e+01 2.31925e-01 ; @ROHF iter 2: -94.47417324752453 -3.32164e+01 1.02224e-01 DIIS; @ROHF iter 3: -98.93494550743969 -4.46077e+00 5.01802e-02 DIIS; @ROHF iter 4: -99.51385930181866 -5.78914e-01 5.73014e-03 DIIS; @ROHF iter 5: -99.52593866328210 -1.20794e-02 7.53133e-04 DIIS; @ROHF iter 6: -99.52616227812669 -2.23615e-04 1.38250e-04 DIIS; @ROHF iter 7: -99.52617115743607 -8.87931e-06 1.41516e-05 DIIS; @ROHF iter 8: -99.52617133422457 -1.76789e-07 4.22537e-06 DIIS; @ROHF iter 9: -99.52617135108980 -1.68652e-08 6.00763e-07 DIIS; Energy converged.; ```; Output now:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @ROHF iter 0: 37.35213783948360 3.73521e+01 0.00000e+00 ; @ROHF iter 1: -98.88199282615329 -1.36234e+02 5.47587e-02 ; @ROHF iter 2: -99.37308671364974 -4.91094e-01 2.39373e-02 DIIS; @ROHF iter 3: -99.52506651519121 -1.51980e-01 1.60839e-03 DIIS; @ROHF iter 4: -99.52612487148851 -1.05836e-03 3.72093e-04 DIIS; @ROHF iter 5: -99.52617068447645 -4.58130e-05 3.55283e-05 DIIS; @ROHF iter 6: -99.52617130679994 -6.22323e-07 6.69049e-06 DIIS; @ROHF iter 7: -99.52617134939356 -4.25936e-08 1.37357e-06 DIIS; @ROHF iter 8: -99.52617135123231 -1.83874e-09 1.08978e-07 DIIS; Energy converged.; ```; so ROHF saves almost two iterations even in this simple case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450632700:1638,simpl,simple,1638,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450632700,1,['simpl'],['simple']
Usability,"Inspired by a recent [forum post](http://forum.psicode.org/t/psi4-run-time-error-module-exec-content/1064/2). If there's an error in the user's input file, the traceback could be much clearer. In particular:. -; ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; ```; is not a good indicator that the problem is input file side.; - When the problem is input file side, we give the user the line number of the post-processed input file. To see the post-processed input file the line number corresponds to, the user needs to supply the -v flag.; - The line numbering doesn't match up, according to my demo. See the forum topic for details, but Psi told me I had a line 30 error when there was no line 30. (The error was instead by line 29.). This is a ""put this up so I don't forget about it"" issue, not a thorough detailing of what should be done. As I recall, this was brought up at WWDC last November, but an issue was never posted.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1196:184,clear,clearer,184,https://psicode.org,https://github.com/psi4/psi4/issues/1196,1,['clear'],['clearer']
Usability,"Instead of comparing the raw eigenvectors, I'd compare that the vectors span the same space, which can be checked simply by ```<i|i> = 1``` and ```sum_j <i|j><j|i>=1```, where you can restrict the sum over ```j``` to the degenerate eigenmodes in question. If one already is checking the eigenvalues, then checking the full span of the lowest eigenmodes should be enough. The fitting of the vectors is not in the test code. It could also be done just by constructing the projection ```P=<old|new>```, checking that the eigenvalues of ```P P^T``` and ```P^T P``` are 1, and rotating the basis with ```P```.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452087935:114,simpl,simply,114,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452087935,1,['simpl'],['simply']
Usability,"Interesting find, @Diazonium. I'm probably being very slow here, but it's not clear to me why the core orbitals will need to be transformed in either version of the algorithm. *If* they are neglected in both algorithm, the only efficiency gain would be the neglect of the frozen orbitals in the diagonalization, which would be negligible. @loriab Steven Wheeler wrote an arbitrary order ZAPT (z averaged perturbation theory) implementation for DETCI back in the day. I wonder if that's what's being activated? That method doesn't break the alpha-beta symmetry and is quite different to semicanonical ROMP theory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311#issuecomment-597669953:78,clear,clear,78,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597669953,1,['clear'],['clear']
Usability,Is the what-needs-to-change-and-by-whom clear for this PR?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1081#issuecomment-433954435:40,clear,clear,40,https://psicode.org,https://github.com/psi4/psi4/pull/1081#issuecomment-433954435,1,['clear'],['clear']
Usability,"Is there a case when a user (without deeper knowledge of the Psi4 codebase) would want to use `compute_gradient` instead of a plain-old `gradient` call? Unless there's a good use case, I'm for simplifying the API. . If it's a matter of ""you can save time by reusing intermediates"" with `compute_gradient`, perhaps a more systematic way would be to shove those intermediates onto the `wfn` and then feed that into `gradient`, no?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870408055:193,simpl,simplifying,193,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870408055,1,['simpl'],['simplifying']
Usability,"Is there a release date for 1.1? :). Cc @mj-harvey. On Apr 28, 2017 01:09, ""Lori A. Burns"" <notifications@github.com> wrote:. > Since Psi4:; >; > - is primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:885,feedback,feedback,885,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,1,['feedback'],['feedback']
Usability,"Is there anything in particular you wanted feedback on, or did you just want to see if this passed tests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731#issuecomment-1262298899:43,feedback,feedback,43,https://psicode.org,https://github.com/psi4/psi4/pull/2731#issuecomment-1262298899,1,['feedback'],['feedback']
Usability,"Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2853#issuecomment-1397353017:109,intuit,intuition,109,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397353017,1,['intuit'],['intuition']
Usability,"It also might be an issue with the functional. In my experience with finite element calculations, the B97 functionals are not very well-behaved numerically. I would not be surprised if this was also a case where the functional is so un-smooth that it produces a Fock matrix that causes the energy to blow up. You can try adding damping or switching to another functional. You might have better success by preconverging the orbitals with something else like HF or a simpler density functional.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565:465,simpl,simpler,465,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565,1,['simpl'],['simpler']
Usability,"It appears that -jN compilations – I typically build with -j4 – are failing because of incorrect blocking of dependencies. In at least one case, the build reaches libmints before libint is complete, resulting in a missing libint.h header file. When I compile serially, everything runs smoothly. However, it's not clear to me what has changed in the compilation infrastructure in the last day or so to cause this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219:313,clear,clear,313,https://psicode.org,https://github.com/psi4/psi4/issues/219,1,['clear'],['clear']
Usability,It could be helpful to know what `ldd -v <prefix>/lib/python3.<x>/site-packages/psi4/core*so` (approximate path) produces. And if the segfault was immediate or on a particular test (I learned recently that `gcp` exe unnecessarily used too high a glibc).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607282725:184,learn,learned,184,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607282725,1,['learn'],['learned']
Usability,"It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?. > On Jan 8, 2016, at 4:54 PM, ssh2 notifications@github.com wrote:; > ; > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170140825:280,learn,learn,280,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170140825,1,['learn'],['learn']
Usability,"It is clear to me that, after a full-CI calculation, is possible to print out the two-particle density matrix (2PDM) in MO basis, BUT it is not clear to me if psi4 also allows to print out the 2PDM in AO basis. Could someone help me to solve this problem, please? I really need the 2PDM in AO basis!. Thanks in advance!. PS: this is the input file I am struggling with:. memory 256 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. plugin_load(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so""). set basis 6-31G; set print 5; set OPDM true; set OPDM_PRINT true; set TPDM true; set TPDM_PRINT true; energy('fci'). plugin(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/67:6,clear,clear,6,https://psicode.org,https://github.com/psi4/psi4/issues/67,2,['clear'],['clear']
Usability,"It is the molecule's job to make sure that its member data are; internally consistent. In the scenario you painted, the pg should be; recomputed every time you change the molecule, or it should be computed; on the fly. Either way it will remain consistent with the actual state; of the molecule. Not copying member data in a copy operation is counter intuitive and; should be avoided. Honestly, I don't think I have ever seen a scenario; in which it makes sense. On Thu, 2016-03-03 at 06:53 -0800, David Sherrill wrote:. > Right, unless you wanted to do a CP correction, so you copied the; > dimer; > molecule, then in the copy you turned some atoms from ""real"" atoms to; > ""ghost"" atoms.; > ; > Don't know if we ever do / would do that, just speculating about why; > someone would have come up with the idea that copying pg is bad.; > ; > On Thu, Mar 3, 2016 at 9:48 AM, Ryan Richard; > notifications@github.com; > wrote:; > ; > > Not copying pg seems somewhat silly because if you are making a copy; > > there; > > should be no way that the copy doesn't have the same symmetry, even; > > factoring in ghost atoms, since both molecules have the same ghost; > > atoms.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/pull/299#issuecomment-191796461.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-191801305:351,intuit,intuitive,351,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191801305,1,['intuit'],['intuitive']
Usability,"It looks like I forgot to add `CMAKE_BUILD_PARALLEL_LEVEL=2` to the docs CI. I learned that when a Ninja build of Psi4 gives up in the early 200s of 1200 files, it's because it's out of memory on CI nodes when compiling libmints. Ninja automatically oversubscribes the available cores, so throttling down to allocated cores helps. Docs were recently converted to Ninja CMake generator (from Makefiles CMake generator).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634:79,learn,learned,79,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634,1,['learn'],['learned']
Usability,"It may be as simple as extending a test like:. ``` python; props, wfn = psi4.properties('CCSD/cc-pVDZ"", return_wfn=True); prop = psi4.core.OEProp(wfn); ...; prop.compute(). compare_value(…) # TEST; ```. Just to ensure that the OPDM remains valid during changes. Good examples could be scf-properties or ci-properties test cases. Cheers,; Daniel Smith. > On Nov 9, 2016, at 18:45, Andrew James notifications@github.com wrote:; > ; > @jturney https://github.com/jturney do you mean if you use OEprop from python side?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/506#issuecomment-259559771, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcdANRkkc09DCv2AR8vkQDiiFfWCmks5q8lsAgaJpZM4Krp5j.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259561352:13,simpl,simple,13,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259561352,1,['simpl'],['simple']
Usability,It should be as simple as calling code like [this](https://github.com/psi4/psi4/blob/master/src/lib/libmints/deriv.cc#L753-L782).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191456694:16,simpl,simple,16,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191456694,1,['simpl'],['simple']
Usability,"It took me getting flu to find the time to look into this, and here's my initial finding. If I optimize the geometry and dump it into an input file; ```; molecule h2o {; O 0.000000000000 -0.000000000000 0.063771204693; H -0.000000000000 0.748825894352 -0.506047648051; H 0.000000000000 -0.748825894352 -0.506047648051; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; I get ; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.945 2519.217; 2 4142.103 5959.555; 3 4237.372 6096.625; ```; If I permute the first two rows of the geometry, per the bug report, I get:; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; This is clearly wrong, but it does at least mean that the hessian code is for the most part correct. I'm trying to figure out where the atom and/or basis function ordering issue is introduced and hope to have a patch soon. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901#issuecomment-360894371:806,clear,clearly,806,https://psicode.org,https://github.com/psi4/psi4/issues/901#issuecomment-360894371,1,['clear'],['clearly']
Usability,It would be nice for the users to have a memory estimate and check at some point.; Unless `adcc` does the checking itself. ----. > On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. You already mentioned #1033. I'd agree that psi4's `adc` should be disabled for the time being. Perhaps a point to discuss at the upcoming psicon @dgasmith ; Would't necessarily affect this PR though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-553301889:182,simpl,simple,182,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553301889,1,['simpl'],['simple']
Usability,"It would be very handy to have the ability to read/write entire Wavefunctions. We do this somewhat awkwardly for the SCF `read` guess functionality on [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1384) line. . Some issues and solutions:; - Serializing basis sets could be problematic. Saving the Python dictionary representation of the basis is the likely solution see [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L43) to get started.; - Molecule can be serialized to/from a string (future JSON) `core.Molecule.create_molecule_from_string(mol_string)`.; - Initializing a new Wavefunction could be done with a long signature call that looks something like `Wavefunction(std::map<str::string, SharedMatrix>, std::map<str::string, SharedVector>, std::map<str::string, Dimension>, ...`. This could help reduce the number of inputs required. Curious if anyone has suggestions to simplify the population of private data. Use cases:; - Write our RHF wavefunction, read in for many post-SCF methods.; - Save initial guesses for tricky to converge molecules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/887:950,simpl,simplify,950,https://psicode.org,https://github.com/psi4/psi4/issues/887,1,['simpl'],['simplify']
Usability,"It'd be great if you wanted to work on this. I'm fine with the current behavior, that the `set dft_functional b3lyp\n energy('scf')` runs scf. It's the `energy('b3lyp')` notation that we want to be user friendly, and that's already satisfied. Ok to keep the `set dft_functional b3lyp` notation straightforward and less user-friendly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117#issuecomment-121817414:319,user-friendly,user-friendly,319,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-121817414,1,['user-friendly'],['user-friendly']
Usability,"It's a [colon dash](https://en.wikipedia.org/wiki/Compound_point) (well, it has a more amusing name but, to keep things family friendly, I'll allow you to look that up in the Wiki article). I was taught that it should be used for lists when I was young, and it wasn't until I moved to the US that I learned that it's *very* outdated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2699#issuecomment-1225899078:299,learn,learned,299,https://psicode.org,https://github.com/psi4/psi4/pull/2699#issuecomment-1225899078,1,['learn'],['learned']
Usability,"It's a technical term :-) (http://forum.psicode.org/t/managed-methods-feedback-required/130/4?u=loriab), @psi-rking . Thanks for the answers, @jturney and @andysim, I'd feel better, too, if we assume less about the orientation, so long as there's no reason to the contrary. I believe @dgasmith is already adding the off-diagonals to #301, so that should wrap up this issue. And we're agreed on where such function should live in future, as they materialize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191996440:70,feedback,feedback-required,70,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191996440,1,['feedback'],['feedback-required']
Usability,"It's all just a [subprocess call](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3753-L3769) after the files are ready. Try adding print statements? That particular style of subprocess call aims to both be real-time and ""T"" to string _and_ output. That got harder for py2/3 support, so it may be simpler for only py3.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1132#issuecomment-412523362:323,simpl,simpler,323,https://psicode.org,https://github.com/psi4/psi4/issues/1132#issuecomment-412523362,1,['simpl'],['simpler']
Usability,"It's been awhile since I made that class but I seem to recall the high res timers simply report time in nanoseconds, they aren't necessarily that accurate. I'll look into this more tomorrow. Also I didn't realize so many users are running such short jobs. It would be interesting to make a wiki page where groups posted what features of Psi4 they use along with typical applications. This data would be very interesting in terms of code design and would allow better tailoring to their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98496155:82,simpl,simply,82,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98496155,1,['simpl'],['simply']
Usability,"It's not clear to me if it's possible to start from a previous calculated rhf result to do for example ccsd(t). Can this be done? If I keep the scratch dir, and use the `-r` parameters with `guess read`, it will start from the rhf solution of the previous run, but it will still do the rhf calculation and integral transformations. I would like it to directly start with the ccsd(t) calculation, and not redo the rhf calculation. Is this currently possible?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/102:9,clear,clear,9,https://psicode.org,https://github.com/psi4/psi4/issues/102,1,['clear'],['clear']
Usability,"It's not clear to me that ""re-request review"" did anything, so pinging @davpoolechem again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049:9,clear,clear,9,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049,1,['clear'],['clear']
Usability,"It's not clear to me that the label is aesthetic, but I'll assume it is for sake of argument. The mislabeling is still confusing, and it would be good to have the correct label printed. Is there a reason this wasn't done in #1475? The wavefunction's `name` attribute, as I recall, should have the information to specify whether the wavefunction is MP2, CI, CC, etc. There is discussion elsewhere about the CI density being written to SCF Density (#1478), but I can't find any discussion about the SCF density masquerading as MP2 or CC densities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-466655526:9,clear,clear,9,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-466655526,1,['clear'],['clear']
Usability,"It's not clear to me what the issue is. Initial discussion was about updating the documentation to specify how to compile with increased max AM, but later comments seem to have veered the conversation in some other direction that I can't follow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-869214469:9,clear,clear,9,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-869214469,1,['clear'],['clear']
Usability,It's not clear why the memory issue is arising. If you can find a smaller computation that still exhibits this behavior feel free to reopen the issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170145076:9,clear,clear,9,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170145076,1,['clear'],['clear']
Usability,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59#issuecomment-43508954:21,clear,clear,21,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954,1,['clear'],['clear']
Usability,"Just realized that the debug info is not very clear. The numbers printed are (MO index in irrep, orbital count, irrep). As you can see the last alpha/beta orbitals are different in the two runs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-307586031:46,clear,clear,46,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307586031,1,['clear'],['clear']
Usability,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:31,guid,guidance,31,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821,1,['guid'],['guidance']
Usability,Just to be clear - I'm not working on this :clown_face:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1255#issuecomment-425641864:11,clear,clear,11,https://psicode.org,https://github.com/psi4/psi4/issues/1255#issuecomment-425641864,1,['clear'],['clear']
Usability,"Just to be clear, all _other_ code that used `general_invert` is still going to have numerical instabilities, even after this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-908421847:11,clear,clear,11,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-908421847,1,['clear'],['clear']
Usability,"Just to give some context for this PR, I'm removing an unused class member variable and constructor argument. Aside from a simpler constructor, there is no behavior change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2659#issuecomment-1208156516:123,simpl,simpler,123,https://psicode.org,https://github.com/psi4/psi4/pull/2659#issuecomment-1208156516,1,['simpl'],['simpler']
Usability,"Just to make sure I understand the issues here:; The first one is clear. A segfault occurs if `num_frozen_docc` is ""too large."" What exactly ""too large"" means is unclear, but more frozen docc pairs than electron pairs is sufficient.; The second one is less clear. Obviously, the QC variables controlling the HF energy are getting grabbed incorrectly, but are these two geometries supposed to be different?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933:66,clear,clear,66,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933,2,['clear'],['clear']
Usability,"Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624:150,guid,guide,150,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624,1,['guid'],['guide']
Usability,"Landing on the correct SCF solution is tricky, and guaranteeing it is trickier still. I hear that in psi3, users routinely supplied docc/socc arrays to guide to the intended solution. Fortunately, psi4 has a variety of guesses to obtain the right solution, and someday, as @dgasmith mentioned, a next-generation SAD guess will assure correctness for the ground states of elements, at least. But without a root-finding driver over the SCF code that attempts and discards guesses/ does basis projections/ evaluates the nature of the system (which can be computational expensive), we cannot fix some system and method combinations without injuring others. It should be noted that no QC methodology to date is completely black box and no program always obtains the correct minima with default options. We are glad to have the lithium report at hand and will be pleased to use them to test the future SAD guess, but this is not an issue that will be fixed by 1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-212439352:152,guid,guide,152,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212439352,1,['guid'],['guide']
Usability,"Let me be more explicit about why I find the ""multi-fragment optimizations"" section confusing. * The first sentence talks about ""the metric for connecting atoms"" without explaining what ""connecting atoms"" means. Even worse, the first sentence is not obviously about dimers.; * It isn't clear to me what a ""reference point"" signifies. While I can tell whether something is an acceptable reference point, what are these used for? It looks like these are atoms used to define intermolecular internal coordinates.; * I don't know what it means to talk about a linear combination of atoms, or how to interpret `[[3], [1], [2]], [[1, 2, 3, 4, 5, 6], [2], [6]]` in your first example. The third point is crucial - I can't follow your examples. I won't insist on a figure, but I do insist on examples I can understand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1335924107:286,clear,clear,286,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1335924107,1,['clear'],['clear']
Usability,"Let me clarify: Can you talk about what you did to cause this crash? I have had no luck trying to reproduce it, and it isn't clear to me from the code why that function would crash unless this `wavefunction` object is being modified by a third-party program in ways that violate the design of the `wavefunction` class. I see the file that caused the crash is `test_psi4_interface_minimal.py`. I've had no luck finding a file of that name in the Psi repository, which leads me to believe this is a case of third-party modification.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524598951:125,clear,clear,125,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524598951,1,['clear'],['clear']
Usability,"Log file attached.; [memdfjk.txt](https://github.com/psi4/psi4/files/3302510/memdfjk.txt). The issue is simple, however, and the fix is in #1667 as I posted already above.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503214336:104,simpl,simple,104,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503214336,1,['simpl'],['simple']
Usability,"Looking at the EMSL outputs with and without optimization, it looks like a simple case of ripping out any functions from contractions that are already present as standalone functions. This should be really easy to put together in Python if we need it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307915395:75,simpl,simple,75,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307915395,1,['simpl'],['simple']
Usability,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:80,learn,learning,80,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475,3,"['learn', 'simpl']","['learning', 'simple']"
Usability,Looks like a logic breakdown around `/psi4/driver/procedures/proc.py:1140`. For now if you simply comment out `/psi4/driver/procedures/proc.py:1164-1165` everything should work as expected. Ill fix this up in a patch and switch one of our `basis_guess` test cases to an explicit basis so we can catch this in the future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/484#issuecomment-256802735:91,simpl,simply,91,https://psicode.org,https://github.com/psi4/psi4/issues/484#issuecomment-256802735,1,['simpl'],['simply']
Usability,"Looks ok. > Regarding the frequency calculations, will the results be affected by a lower level of theory Hessian in the beginning? Or will the final results still be of desired level of theory?. The final results are not affected by the lower theory Hessian[*].; In fact, the default initial Hessian is based on an extremely simple force-field so a DFT hessian is certainly an improvement. :-). [* For most practical purposes. For large and flexible molecules with many close-lying minima one could, in principle, find different minima with different settings for the optimizer.]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778:326,simpl,simple,326,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778,1,['simpl'],['simple']
Usability,"Lori introduced a mechanism to run any `ctest` through `pytest` [in a recent PR](https://github.com/psi4/psi4/pull/2454), so I don't think it'd be worth it unless there's a very clear ""test template"" that all of your tests follow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513#issuecomment-1084628549:178,clear,clear,178,https://psicode.org,https://github.com/psi4/psi4/pull/2513#issuecomment-1084628549,1,['clear'],['clear']
Usability,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276161205:627,learn,learn,627,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205,1,['learn'],['learn']
Usability,"M=) | `83.80% <0.00%> (-10.63%)` | :arrow_down: |; | [psi4/src/psi4/libfock/sap.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3NhcC5jYw==) | `80.00% <0.00%> (-9.29%)` | :arrow_down: |; | [psi4/src/psi4/scfgrad/scf\_grad.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9zY2ZncmFkL3NjZl9ncmFkLmNj) | `95.09% <0.00%> (-1.19%)` | :arrow_down: |; | [psi4/src/psi4/liboptions/liboptions.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJvcHRpb25zL2xpYm9wdGlvbnMuY2M=) | `56.26% <0.00%> (-0.91%)` | :arrow_down: |; | [psi4/src/psi4/libmints/vector.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJtaW50cy92ZWN0b3IuY2M=) | `62.27% <0.00%> (-0.60%)` | :arrow_down: |; | [psi4/src/psi4/libfock/points.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3BvaW50cy5jYw==) | `72.24% <0.00%> (-0.27%)` | :arrow_down: |; | [psi4/src/core.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvY29yZS5jYw==) | `82.19% <0.00%> (-0.25%)` | :arrow_down: |; | [psi4/driver/driver.py](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9kcml2ZXIvZHJpdmVyLnB5) | `79.10% <0.00%> (-0.22%)` | :arrow_down: |; | ... and [106 more](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=footer). Last update [7d35d14...6e36f6b](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-505723097:3091,learn,learn,3091,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-505723097,1,['learn'],['learn']
Usability,"MBIS is Georgia Tech's department, so obligatory @loriab ping - I'm not sure who has taken over MBIS now that Jeff has left. Is there a legitimate reason for us not to support MBIS for iodine? It looks to me like we just need to extend the `get_mbis_params` table one more row of the periodic table and then update the `mA` setting. If so, this is an easy project for one of your developers who is still learning Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053:404,learn,learning,404,https://psicode.org,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053,1,['learn'],['learning']
Usability,"MM('N', 'N', nn, na + nb, na, 1.0, Cocc0A->pointer()[0], na, &Dp[0][0], na + nb, 0.0, ; VAbr.reset();										 |	 D_Ni_a->pointer()[0], na + nb);; VRas.reset();										 |	 C_DGEMM('N', 'N', nn, na + nb, nb, 1.0, Cocc0B->pointer()[0], nb, &Dp[na][0], na + nb, 0.0,; VSbr.reset();										 |	 D_Ni_b->pointer()[0], na + nb);; 												 >; 												 >	 // Make JK's; 												 >	 jk_ = JK::build_JK(primary_, reference_->get_basisset(""DF_BASIS_SCF""), options_, false, doub; 												 >	 jk_->set_memory(doubles_);; 												 >	 jk_->set_do_J(true);; 												 >	 jk_->set_do_K(true);; 												 >	 jk_->initialize();; 												 >	 jk_->print_header();; 												 >; 												 >	 std::vector<SharedMatrix>& Cl = jk_->C_left();; 												 >	 std::vector<SharedMatrix>& Cr = jk_->C_right();; 												 >	 const std::vector<SharedMatrix>& J = jk_->J();; 												 >	 const std::vector<SharedMatrix>& K = jk_->K();; 												 >; 												 >	 Cl.clear();; 												 >	 Cr.clear();; 												 >	 Cl.push_back(Cocc0AB);; 												 >	 Cr.push_back(D_Ni_a);; 												 >	 Cl.push_back(Cocc0AB);; 												 >	 Cr.push_back(D_Ni_b);; 												 >	 jk_->compute();; 												 >	 ; 												 >	 std::shared_ptr<Matrix> J_D_ia = J[0];; 												 >	 std::shared_ptr<Matrix> K_D_ia = K[0];; 												 >; 												 >	 std::shared_ptr<Matrix> J_D_ib = J[1];; 												 >	 std::shared_ptr<Matrix> K_D_ib = K[1];; 												 >; 												 >	 // Finish D_ia and D_ib transformation to make tilded C's; 												 >	 auto D_ia = Matrix::doublet(Cocc0AB, D_Ni_a, false, true);; 												 >	 auto D_ib = Matrix::doublet(Cocc0AB, D_Ni_b, false, true);; 												 >	 ; 												 >	 auto Ct_Kr = Matrix::triplet(D_ib, S, Cvir0A, false, false, false);; 												 >	 Ct_Kr->scale(-1);; 												 >	 Ct_Kr->add(Cvir0A);; 												 >	 auto Ct_Ks = Matrix::triplet(D_ia, S, Cvir0B, false, false, false);; 												 >	 Ct_Ks->s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790:12755,clear,clear,12755,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790,1,['clear'],['clear']
Usability,"Managed to get a usable stack trace with gdb. It looks like cctransort::cctransort(...) gets called from Py-side, which calls cctransort::sort_tei_rhf(...), which in turn calls DPD::buf4_sort, which eventually crashes in PSIO, when it tries to manipulate a file handle that does not map to a currently open file. I have no good ideas on how to debug this any further. These parts of the codebase are nearly impenetrable for me, and for whatever reason I am not getting any line numbers in gdb, which is certainly not helping. ```; #0 0x00007ffff7ca5410 in perror () from /lib/x86_64-linux-gnu/libc.so.6; #1 0x00007ffff5c4ab31 in psi::PSIO::wt_toclen(unsigned long, unsigned long) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #2 0x00007ffff5c4b8f2 in psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #3 0x00007ffff5c4bbcf in psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #4 0x00007ffff5690257 in psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #5 0x00007ffff568d8d1 in psi::DPD::file4_cache_del(psi::dpdfile4*) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #6 0x00007ffff568e543 in psi::DPD::file4_cache_del_lru() () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #7 0x00007ffff5640468 in psi::DPD::dpd_block_matrix(unsigned long, unsigned long) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #8 0x00007ffff5643ac9 in psi::DPD::buf4_mat_irrep_init_block(psi::dpdbuf4*, int, int) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #9 0x00007ffff564e38d in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, int, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226663367:17,usab,usable,17,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226663367,1,['usab'],['usable']
Usability,"Many users start Psi hundreds to thousands of times for certain types of; applications studies, with each job taking a few seconds. Now we are; potentially doubling that time. -Rob. On Sun, May 3, 2015 at 11:19 AM, Ryan Richard notifications@github.com; wrote:. > Default off seems silly if we report times. The user has a right to know; > how accurate those times are. If 5 seconds really bothers everyone I vote; > for a timing flag that enables/disables all timings. I think that's the; > wrong approach though and it makes more sense to examine the sampling; > parameters of the timer.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:10 AM, ""Rob Parrish"" notifications@github.com wrote:; > ; > > Yeah, it just needs to be turned into a user-option (defaulted off).; > > ; > > -Rob; > > ; > > On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; > > wrote:; > > ; > > > I'm learnimg the world isn't ready for C++11 yet, and I'm in the; > > > process; > > > of; > > > phasing it out of my codes. Anyways, my timer relies on Boost. What I; > > > do; > > > is ripped right out of the Boost example for how to determine the; > > > uncertainty in their timers, the sampling rate may be a bit high if; > > > there; > > > ends up being 5000000 calls though. I'm not sure what you mean exactly; > > > by; > > > separate thread. The uncertainty in each timer is a hardware feature so; > > > on; > > > a heterogeneous cluster each mpi process needs to sample. This is only; > > > done once at startup.; > > > ; > > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:; > > > ; > > > > @ryanmrichard https://github.com/ryanmrichard any reason the; > > > > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > > > > just do it a in a different thread?; > > > > ; > > > > —; > > > > Reply to this email directly or view it on ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98494117:947,learn,learnimg,947,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98494117,1,['learn'],['learnimg']
Usability,Marking `action-items-needed`. It isn't clear to me if there's anything for Psi to do about this one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-869215043:40,clear,clear,40,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-869215043,1,['clear'],['clear']
Usability,"Memory usage seems to climb upon repeating calculations in the same process. Here's my test script:. ```; import os; import psi4; import psutil. def check_resources():; process = psutil.Process(os.getpid()); return f""Memory used by process: {process.memory_info().rss / (1024 ** 2):.2f} MB"". cyanamide = psi4.geometry(""""""; C 0.000 0.239 0.000; N -0.044 1.395 0.000; N 0.134 -1.155 0.000; H -0.315 -1.556 0.837; H -0.315 -1.556 -0.837; """"""). for n in range(21):; psi4.energy(""r2scan-3c""); psi4.core.clean(). with open(""psi4.log"", ""a"") as f2:; f2.write(f""{n}: {check_resources()}\n""); ```. Here's what I get:. ```; 0: Memory used by process: 498.48 MB; 1: Memory used by process: 463.73 MB; 2: Memory used by process: 538.73 MB; 3: Memory used by process: 610.47 MB; 4: Memory used by process: 726.72 MB; 5: Memory used by process: 788.34 MB; 6: Memory used by process: 848.44 MB; 7: Memory used by process: 904.81 MB; 8: Memory used by process: 912.50 MB; 9: Memory used by process: 912.62 MB; 10: Memory used by process: 1016.02 MB; 11: Memory used by process: 1022.06 MB; 12: Memory used by process: 1037.52 MB; 13: Memory used by process: 1037.52 MB; 14: Memory used by process: 1036.77 MB; 15: Memory used by process: 1039.41 MB; 16: Memory used by process: 1039.16 MB; 17: Memory used by process: 1039.16 MB; 18: Memory used by process: 1039.16 MB; 19: Memory used by process: 1092.38 MB; 20: Memory used by process: 1094.72 MB; ```. After the first call, only about 500 MB of memory have been claimed; after 10 calls, this has crept up to over 1 GB. This could cause issues e.g. in an *ab initio* MD context, or simply in a lengthy optimization...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3207:1617,simpl,simply,1617,https://psicode.org,https://github.com/psi4/psi4/issues/3207,1,['simpl'],['simply']
Usability,"Mind if I hack around with the FJT/Boys function stuff a bit? It may not be a straightforward replacement, but I think it can be simplified quite a bit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276403151:129,simpl,simplified,129,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276403151,1,['simpl'],['simplified']
Usability,"Mostly fixed in #481. As SCF is a special case of Wavefunction its not as easy as passing in a new Wavefunction as the order of precedence for occupations is not entirely clear (multiple user defines, options, and reference wavefunction). . For now you can use the new HF setter `guess_Ca/Cb` to set the occupied ""guess"" orbitals before SCF iterations. See `scf_helper` in proc.py for examples. Orbital ordering can be modified using the Matrix rotate_columns command. You can force occupations by setting DOCC/SOCC as they will now be respected in all instances. I will open a ticket shortly detailing the issues with the current SCF occupation scheme to see if anyone would like to come up with a better way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-254358092:171,clear,clear,171,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-254358092,1,['clear'],['clear']
Usability,"My attempts to write a test failed, for the simple reason that I can't converge some of the SCFs. I'm adding EDIIS and ADIIS support before attempting this again. I'm not sure about ADIIS, but EDIIS works for fractional occupation SCF according to the original paper, so I can use that to make the problem easier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2289#issuecomment-916903299:44,simpl,simple,44,https://psicode.org,https://github.com/psi4/psi4/issues/2289#issuecomment-916903299,1,['simpl'],['simple']
Usability,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:113,user experience,user experience,113,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,1,['user experience'],['user experience']
Usability,My thought it to pretty much blow it away. I believe we should be moving more toward produce -> compute -> consume design pattern similar to how n-body was changed to where the nbody driver simply chains together three separate calls:; 1) Produce all required molecules; 2) Loop over the produced list and compute the molecules at a given level of theory; 3) Consume the separate computations to produce a result. @loriab should probably comment here too.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-426853008:190,simpl,simply,190,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-426853008,1,['simpl'],['simply']
Usability,"My vote is to either end or temporarily pause this PR and open a new PR just for swapping out the solid harmonics technology. Of course, @jturney's judgment overrides mine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209832732:40,pause,pause,40,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209832732,1,['pause'],['pause']
Usability,"Nice one Andy!. -Rob. On Wed, Mar 2, 2016 at 2:14 PM, Andy Simmonett notifications@github.com; wrote:. > It should be as simple as calling code like this; > https://github.com/psi4/psi4/blob/master/src/lib/libmints/deriv.cc#L753-L782; > .; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191456694.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191456874:121,simpl,simple,121,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191456874,1,['simpl'],['simple']
Usability,"No problem, this is a simple enough hack that we can apply locally for now. Perhaps the PR will evolve into a better solution once we investigate more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-489288722:22,simpl,simple,22,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-489288722,1,['simpl'],['simple']
Usability,"No reason it needs to be 'roa'. The point is that the code which executes; right now when one selects 'roa' is already doing the IR intensities; correctly. If we otherwise have IR intensities working, then just ignore; this post. I did MP2 because Spartan and Psi could. Presumably with the; new CCSD gradient with fields check-in last weekend, the CCSD intensities; would work too, but I haven't checked that. The input file could certainly; be simplified, including trying to eliminate some of the restrictions and; seeing if there is any impact on the IR intensities. I thought it might be; helpful if someone else would like to start from that point. On Mon, Nov 27, 2017 at 9:22 AM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, great, thanks for the; > prototype. Maybe put your post at #402; > <https://github.com/psi4/psi4/issues/402> and mention it in the newdev; > slack channel. Also,; >; > - is there anything particular to MP2 or is that just what you tested; > against?; > - general fyi is that there's multi-QC-package vib outputs in the; > isotope-1 test cases that also may have some intensities; > - how rigorous is that c1/no_com/no_reorient req. in your input file.; > Absolutely required to get the right charge origin? Or could we run with; > symmetry if we knew how to transform the Hessian or perturbation vectors; > into better frame? Is it different for charged species?; > - why ""roa""? Just because it brings dipole derivatives for free?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/347#issuecomment-347215160>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMMsKLuYghtYIPsfAYOmbk9WBCBXks5s6tPSgaJpZM4II2n7>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347#issuecomment-347240852:446,simpl,simplified,446,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347240852,1,['simpl'],['simplified']
Usability,"No transition-state optimization algorithm always converges to the desired TS. This case is so expensive it is unwieldy to debug. I wonder what the issue is to be solved here. Is there a TS nearby to the input geometry, and is it known to be in Cs symmetry?. If the P-RFO eigenvector is asymmetric, do we want to follow it or not? If yes, then there is clearly a geometry symmetrization that will have to be omitted. If no, then it is hard to see how the algorithm could choose the best, nearest TS in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203056297:353,clear,clearly,353,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203056297,1,['clear'],['clearly']
Usability,"No, it looks like in (2) you're actually getting a bad HF calculation -- even in the HF calculation part, the numbers are Wrong (for the lone water in this case). . (1) and (3) look fine in terms of Bad Behavior I've seen. (and with (3)/freeze_core=True when my element sets are simple I've pretty much moved away from the issue anyway)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1209922063:279,simpl,simple,279,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1209922063,1,['simpl'],['simple']
Usability,"No, the deal is that Psi4 adds `-std=c++11` to `CMAKE_CXX_FLAGS`, and everyone's happy with it. I haven't heard any petitions to make it `-std=gnu++11`. And we pass the CXX_STANDARD on to target `psi4-core`. Then with cmake 3.6 (which newly understands intel capabilities) + intel compilers, cmake takes that CXX_STANDARD + icpc and adds its flag so that `CMAKE_CXX_FLAGS` becomes `... -std=c++11 ... -std=gnu++11 ...` and then icpc throws a warning at every file that c++11 is being overwritten. The simplest thing, I think is to `CMAKE_CXX_EXTENSIONS=OFF` in the `psi4-core` ExternalProject list in main CMakeLists.txt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281386720:501,simpl,simplest,501,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281386720,1,['simpl'],['simplest']
Usability,"Normal subprocess debugging, then, I guess. Print out the full cmd and lenv and try executing by hand. Then change cmd to `ls` and make sure subprocess is still ok. Then change to simpler stdout-only output from subprocess and see if mrcc ever launches. etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1132#issuecomment-412531443:180,simpl,simpler,180,https://psicode.org,https://github.com/psi4/psi4/issues/1132#issuecomment-412531443,1,['simpl'],['simpler']
Usability,"Normally, we would assume that when a user requests a distributed calculation plan they get returned FiniteDifferenceComputer, CompositeComputer, or ManyBodyComputer, all of which will hold the options state when `compute()` is called. However, it is possible to request a plan on a calculation that will return an AtomicComputer (which will run a single point). As options are not held here, calling `compute()` on that AtomicComputer will unexpectedly clear any user-defined options when the calculation is finished. Example python:; ```; import psi4. mol = psi4.geometry(""""""; H; H 1 1.0; """"""); psi4.set_options({'scf_type': 'pk'}); plan = psi4.hessian('scf/sto-3g', return_plan=True); print(psi4.p4util.prepare_options_for_set_options()); plan.compute(); print(psi4.p4util.prepare_options_for_set_options()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2733:454,clear,clear,454,https://psicode.org,https://github.com/psi4/psi4/issues/2733,1,['clear'],['clear']
Usability,"Not quite. The testing is just a guide that helps us to determine whether to accept a PR or not; the outcome of the tests does not affect GitHub's handling of the merge at all. So in your example above, all 5 commits would be pulled in. I was trying to make the following point, but didn't explain well at all:. Say you open a pull request with three commits, but discover that the tests don't pass. If you were to continue pushing commits to your GitHub repo branch (the same one you based the PR on), those commits would continue to be added real-time to the original PR automatically. Therefore there's no need to close the PR when you find that it's broken, and re-open a new one when it's fixed. In fact I think it's better to just leave the original one open, because it allows a discussion to take place, amongst the commits, and the team can hopefully jump in with solutions to whatever problems were created. It's up to you, or whomever actually accepts the PR, to make sure that the final commit in the PR passes the tests before accepting it. The Travis CI testing helps us to quickly make that determination, and GitHub helpfully tells us whether the merge can happen without conflicts. I hope this clears things up a little.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/224#issuecomment-175882141:33,guid,guide,33,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175882141,2,"['clear', 'guid']","['clears', 'guide']"
Usability,"Not sure what happened to the `C`, but the remainder of the valid string probably got mistaken for a comment and removed. While Psithon + preprocessing is very capable for interfacing Python and simple-to-moderate QC, the Psithon preprocessor would need to be considerably more sophisticated (ast module, I presume) to allow especially `#` to be treated correctly. I recommend using Python directly with PsiAPI (examples [here](https://github.com/psi4/psi4/tree/master/tests/pytest)). Psithon will never go away, but the developers are gradually moving toward primary PsiAPI use. . Thanks for the report, though. Any of these with ready solutions (like, I think, the `.isidentifier()` for molecule names) we'll gladly incorporate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/655#issuecomment-287638234:195,simpl,simple-to-moderate,195,https://psicode.org,https://github.com/psi4/psi4/issues/655#issuecomment-287638234,1,['simpl'],['simple-to-moderate']
Usability,"Now that I can run some VTune tests myself, there is definitely an efficiency hit from this PR. The explicit copy in the last commit contributes a _lot_ of overhead. If we want to flatten the tuples, this should be done in the index itself, not in the `IndexIterator`. With that commit reverted, we're looking at 62.4 seconds (pre-PR) vs 75.5 seconds (post-PR) for an Mk-MRCCSD(T) single point with 82 basis functions divided into irreps of 53 and 29, in serial. I can give more detailed machine diagnostics if needed, but I think the point is clear. I'll work on getting the speed restored while waiting for reviews on my other live PR. This is a good opportunity to learn about how to make C++ code efficient, at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254:544,clear,clear,544,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254,2,"['clear', 'learn']","['clear', 'learn']"
Usability,"OK, found it. The overlap is zero for those orbitals. But I was under the impression that `sointegrals` gave me all unique integrals because of symmetry, including those that are zero due to the overlap. This should be made clearer in the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/68#issuecomment-73895052:224,clear,clearer,224,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73895052,1,['clear'],['clearer']
Usability,"OK, from my point of view this one is ready for a review. The old syntax (`freeze_core true/false`) is equivalent to `freeze_core 1/0`, with `1` being positive-charge-aware; it simply un-freezes another full shell in that case. The new syntax of `freeze_core -1/-2/-3` attempts to freeze Nth previous noble gas on each atom, and throws an exception if no valence electrons remain in the fragment (due to charge).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-451587094:177,simpl,simply,177,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-451587094,1,['simpl'],['simply']
Usability,"OK, so instead of messing around with the `ShellInfo`, I've decided to rather switch off the normalisation by passing `pt=""Normalized""` for ECP shells. This was already done for ECP's in the parser in `qcdb/libmintsbasissetparser.py` on lines 235-236. I have simply added a `True` flag as a 4th parameter to the `BasisSet` constructor, which indicates that the shellmap consists of ECP shells, which shouldn't be normalised. This seems more correct than the guesswork in the previous commit. As a side note, the only other case where 3 arguments `(key, mol, shellmap)` are passed into the `BasisSet.constructor` is on line 875; this could be replaced by the 4-parameter `(key, mol, shellmap, False)` syntax.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376448408:259,simpl,simply,259,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376448408,1,['simpl'],['simply']
Usability,"OK, then we're on the same page. Transition properties aren't clearly defined as derivatives, so I don't see how a finite-difference approach can help in this case, but we might be able to identify some limiting cases. But I agree it can/should wait for another day.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094533852:62,clear,clearly,62,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094533852,1,['clear'],['clearly']
Usability,"Oh dear, apologies for over looking something so simple. Thank you for getting back to me so swiftly. Let me know if there is a way to repay the favour. All the best,; Stephen",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626#issuecomment-281394764:49,simpl,simple,49,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281394764,1,['simpl'],['simple']
Usability,"Ok, @psi4/maintainers and @psi-rking, this mammoth is ready to review. I've updated the RN at the top, and I recommend reading them over before meeting the code. Nitpick away (esp. at numpy stuff that I was still learning at the start), and feel free to question the broader (esp. vibanal) logic flow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-362098903:213,learn,learning,213,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-362098903,1,['learn'],['learning']
Usability,"Ok, I didn't get the redirect on Chrome until I cleared the cache, but now it works nicely. Firefox, too. I think redirect 'latest' as well as 'master', then that bullet's done, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121372040:48,clear,cleared,48,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121372040,1,['clear'],['cleared']
Usability,"Ok, I have a [fix](https://github.com/raimis/psi4/pull/4) that works. The problem is that a new(ish) constructor was added [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform.cc#L112-L193), which expects the frozen occ, active occ, active vir, and frozen vir orbitals to be passed in that order. The DETCI code passes spaces (constructed [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ints.cc#L84-L87)) that are not consistent with this; the second space holds all the active orbitals in the `cisd-h2o+-0` test, while the third is empty:; ```; Irrep: 0 Space1: 1 Space2: 11 Space3: 0 Space4: 0; Irrep: 1 Space1: 0 Space2: 2 Space3: 0 Space4: 0; Irrep: 2 Space1: 0 Space2: 4 Space3: 0 Space4: 0; Irrep: 3 Space1: 0 Space2: 7 Space3: 0 Space4: 0; ```; The number of occupied per irrep is computed from the dimensions of these things, leading to an incorrect distribution of electrons. I tried to pass in different spaces from [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L171-L257) but couldn't find a set of spaces that didn't break at least one DETCI test. The occupation info is used to build the density matrix (from which the Fock matrix is built) during presorting of the integrals, which is where the seg fault happens. This Fock build is really vestigial code that was only ever there to make sure libtrans did the same thing as the Psi3 code it replaced at the time, so I decided to simply make the Fock build optional. It's clear that DETCI doesn't use the Fock matrix from Libtrans because it gets the right answer despite having bad occupation info. The frozen core density is correct; this seems to be all that DETCI uses, so I think this fix is good. Requesting reviews from @CDSherrill and @dgasmith to make sure this is reasonable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454523627:1481,simpl,simply,1481,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454523627,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"Ok, I see. 1.1a1 should do nicely for you. Tagged versions _are_ static once pushed to the repo. On the main repo, we'll probably change `1.0 to 1.0approx` and clear out the old ones, since the history re-write has rendered them defunct. But the history rewrite was a once-in-many-years event that cut our download size by 90%, so tags hereafter should be stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273811816:160,clear,clear,160,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273811816,1,['clear'],['clear']
Usability,"Ok, I think this one is ready for review now. Thanks for the feedback @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/668#issuecomment-290552256:61,feedback,feedback,61,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290552256,1,['feedback'],['feedback']
Usability,"Ok, I think this one's ready for a first pass of reviews; docs are much better done in bite-sized chunks IMHO. Feedback is welcomed from everybody. The current version is designed to provide a reasonable overview without being too comprehensive - from here we can discuss where to dive in deeper. Note that only first few files need review - as soon as you hit the files in `samples` you're in autogen territory and can stop reading. Thanks for the early comments, @robertodr; I've fixed those typos as well as a few others.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-434115347:111,Feedback,Feedback,111,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-434115347,1,['Feedback'],['Feedback']
Usability,"Ok, I've cleared up the last two missing items.; - [x] user dft dicts `dft_functional={..., 'dispersion': {...}}` now work. they go through the same route, but the pieces are treated a little differently. ""params"" are the final say -- the user option `DFT_DISPERSION_PARAMETERS` has no effect. ""name"" and ""citation"" aren't ""blessed"" like the official ones, so they're not going to get printed unless they match official ones. I think that's reasonable -- don't want to be printing citations unquestioned.; - [x] now tracing citations again. see below for examples. always printing the disp level citation. printing the dash param citation if available (not listed for many common functionals. No opportunity for user-defined citation. It can be put it, but I didn't see the point of trusting unverified values.; - [x] put in a few more checks that'll catch some problems when adding new official fctl dictionaries.; - [x] renamed some files based on slack discussion. ```; ================================================================================; => DLDF+D09: Empirical Dispersion <=. Podeszwa and Szalewicz Dispersion Correction; Pernal, K.; Podeszwa, R.; Patkowski, K.; Szalewicz, K. (2009), Phys. Rev. Lett., 103: 263201. s6 = 1.000000. ================================================================================; => OTPSS-D: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799; Parametrisation from: L. Goerigk, S. Grimme, J. Chem. Theory. Comput. 6, 107-126, 2010. s6 = 1.000000; alpha6 = 20.000000; sr6 = 1.150000. ================================================================================; => Custom: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799. s6 = 2.750000; alpha6 = 20.000000; sr6 = 1.100000. ================================================================================; ```. Also been rebased. Windows is failing b/c it's downloading py27. I'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307:9,clear,cleared,9,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307,1,['clear'],['cleared']
Usability,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240647129:818,undo,undoing,818,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129,1,['undo'],['undoing']
Usability,"Ok, elaborated on the `set print 2` descriptions of the four VWNs, and added a test case vs. other packages in https://github.com/psi4/psi4/pull/339/commits/f535e22afefbaeac65c78e95788c5f211f85b11c . When you're satisfied with the labeling, etc. @robparrish, I think this is good to go. I'll add you as a collaborator to my fork so that you can do any simple editing directly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-209700278:352,simpl,simple,352,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209700278,1,['simpl'],['simple']
Usability,"Ok, it sounds like we're all in agreement on this. The situation is a bit tricky because of the many spaces needed in a general CAS-like calculation, but that doesn't matter if DETCI just handles the Fock build itself, which is the current situation. Thanks for the quick feedback, everybody. I'll approve this even though I wrote the patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454778525:272,feedback,feedback,272,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454778525,1,['feedback'],['feedback']
Usability,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/440#issuecomment-230793056:295,guid,guidelines,295,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056,1,['guid'],['guidelines']
Usability,"Ok, the only non-invasive way I see around this is the below in the main CM file (change primary language as needed):. ```; if(CMAKE_CXX_COMPILER_ID MATCHES Intel); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); else(); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-march=native"" ""-xHost"" ""/arch:AVX2""); endif(); ```. For Intel, `-march=native` might be a near approximation to `-xHost`, but I'd rather use the latter official flag.; Do you want to try this out for Libxc, @susilehtola?. I observed another problem that when conda compilers are present and `-DCMAKE_CXX_COMPILER=icpc` passed, that the `-fno-plt` set in the envvar `CXXFLAGS` by conda env activation was unsupported by Intel and so triggered all three `ENABLE_XHOST` options to fail unless `CXXFLAGS=` explicitly cleared/set beforehand. I had deliberately _not_ made psi4 CMake dependent on envvars, but it looks like CMake started doing that in 3.10, hmpf. https://cmake.org/cmake/help/v3.10/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854:966,clear,cleared,966,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854,1,['clear'],['cleared']
Usability,"Ok, this one should be ready to go, if all tests pass. I squashed a few of the commits, so if you forked this code at all be careful pushing upstream. I ended up putting the symmetry that I have so far into the code, but it's not used. If we want symmetry to work, here's what needs to happen.; - [Activate the symmetry code](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L1090) and run it in C1 symmetry, which should all be good.; - Then for something simple like water in Cs symmetry you can [verify that the B vectors are good](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L1411) (remember that they'll be ordered differently to the C1 case because of the SALC ordering being different) but the CPHF doesn't converge, so we need to figure out the problem there.; - After that, there's just [another small cut and paste exercise](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L1510) to get all terms symmetrized, albeit in a slightly janky way.; - Once we figure out why CPHF isn't working, we need to make `OUT_OF_CORE` work with non-symmetric densities and [remove the check](https://github.com/andysim/psi4/blob/hessians/share/python/procedures/proc.py#L1728) in the driver that stops these integrals from being allowed. If we end up adding a new JK object that uses symmetry, the above steps will be worth it. Just to get `OUT_OF_CORE` working, not so much unless anybody already knows why it doesn't work and can easily fix it. This is why I've been back and forth about including the symmetry code; I eventually decided to leave it in as a reasonable starting point for future efforts.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234373201:482,simpl,simple,482,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234373201,1,['simpl'],['simple']
Usability,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:880,clear,clear,880,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259,2,"['clear', 'guid']","['clear', 'guidance']"
Usability,"Okay thanks! I will close :). On Fri, Jan 29, 2021 at 10:54 AM Lori A. Burns <notifications@github.com>; wrote:. > Those comments aren't always 1:1 with the contents.; >; > But what's happening for 6-311+G* in particular is that 3 partial basis; > sets are getting merged: the 6-311 defined through Kr, the polarization; > defined through Kr, and the diffuse only defined through Ca. Only elements; > with partial basis sets available for all three pieces show up in the full; > basis file, so Kr, etc. are missing. Looking at 6-311+G* at; > https://www.basissetexchange.org/, that ends at Ca, too, so nothing to; > update. Does this clear up what's going on?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2097#issuecomment-769922422>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKNB26P7KNIQBAOTKDLTCETS4LR4DANCNFSM4WZDDXEA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2097#issuecomment-769932213:634,clear,clear,634,https://psicode.org,https://github.com/psi4/psi4/issues/2097#issuecomment-769932213,1,['clear'],['clear']
Usability,"On the one hand, for cases like SAPT/auto-CP/etc, I'd be fine with just disabling `num_frozen_docc` -- it's clearly inappropriate in any supersystem calculation where the user knows at the `energy` call that it's going to run sub-systems. But going upthread back to the original issue, there's use-cases like `MBIS_VOLUME_RATIOS` that are an add-on to what would otherwise be a valid standalone calculation to use `num_frozen_docc` with (a monomer calc), and there's still the question of what should happen there. You can't just guess based on calc name, because you don't know if the user is going to call `oeprop` down-stream. Disabling `num_frozen_docc` for any calculation where this *could* happen would effectively ban the keyword. . A reasonableness check, or a good guess, could be inserted before any calculation done on a new mol if `num_frozen_docc` is set in the global scope -- with a warning. Or simply error out if a new mol is calculated without `num_frozen_docc` having been updated (not sure how reasonable that is?). . This is but one user's thoughts, of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916:108,clear,clearly,108,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916,2,"['clear', 'simpl']","['clearly', 'simply']"
Usability,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234668387:592,simpl,simplify-wave-function-passing,592,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387,1,['simpl'],['simplify-wave-function-passing']
Usability,"On the wavefunction return for efp, psimrcc, sapt issue, it's not going to matter much to the simple operation of these methods. But now `gradient()`, `hessian()`, etc. rely on functions from proc.py to return a Wavefunction, so the generic driver machinery of analytic vs. findif derivatives is going to be broken. Hence the case for deciding/agreeing now what to do about these corner cases. I think a sensible thing is just to return the scf Wfn (I already did that for MRCC, which should be in that discussion list, too), leaving pure EFP as still an oddity.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-191921428:94,simpl,simple,94,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191921428,1,['simpl'],['simple']
Usability,"Once upon a time, I cleared dozens of headers out of occ or dfocc, to no appreciable compile-time effect, as they're just included elsewhere. Agree that headers could use a substantial pass. I think @ryanmrichard did some at time of CMakeRewrite, but not complete.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262125941:20,clear,cleared,20,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262125941,1,['clear'],['cleared']
Usability,"One could simply add a ROTATIONAL_SYMMETRY_NUMBER keyword (which it appears; I failed to do) and, if it exists, use that value. On Sat, Apr 16, 2016 at 3:27 PM, Lori A. Burns notifications@github.com; wrote:. > Thanks for the paper @psi-rking https://github.com/psi-rking. After; > reading it, I agree that with system fully specified, psi4 is doing it; > right. Though it does mention isotopolog cases where one wants sigma to; > equal that of the parent. What do you think of an option like Molpro has; > where can run the analysis in a different point group? That way if truly; > want only vibrational differences in isotopic substitution, not rotational; > differences, can easily order them up (and provide a way to match Molpro &; > Q-Chem).; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/345#issuecomment-210890978",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345#issuecomment-210924924:10,simpl,simply,10,https://psicode.org,https://github.com/psi4/psi4/issues/345#issuecomment-210924924,1,['simpl'],['simply']
Usability,"One feature I'd like to add (later) is the ability to do something like:. ```; my_new_method = { ""name"": ""my_func"", ... functional_dictionary ... }; my_superfunctional = add_functional_from_dictionary(my_new_method); energy(""my_func""); ```; That way one can fit dispersion parameters or benchmark functionals in a simple loop... However, I think it is a bit of work, so I'd prefer to leave that for later. The PR can be pulled in as is from my point of view.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-376409454:314,simpl,simple,314,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-376409454,1,['simpl'],['simple']
Usability,"One more thing, should [these names](https://github.com/andysim/psi4/blob/basisset/psi4/src/export_mints.cc#L890-L891) be updated now that BasisSet is unified? And is it clear where to get QC-frozen core vs. ECP-frozen core?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734#issuecomment-307963177:170,clear,clear,170,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307963177,1,['clear'],['clear']
Usability,"Only makes sense (models and docs) after #2454. Summary is that by adding a simple file like the below to each PSIthon/CTest directory (dir in `tests/` that has an `input.dat` or `input.py`), we can run the test additionally through pytest. Read the docs to see why this is a good thing and more details on how to compose the file. ```; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]); ```. A few dozen have been done, but filling in all 500 is suitable for distributing the workload.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2495:76,simpl,simple,76,https://psicode.org,https://github.com/psi4/psi4/issues/2495,1,['simpl'],['simple']
Usability,"Or yeah, I guess the generator is GPL and the generated library is LGPL. But that's not so clear in v1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298386000:91,clear,clear,91,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298386000,1,['clear'],['clear']
Usability,"Or, an even simpler fix would be to store the ```R_avail``` and ```error``` arrays as ASCII, like the quadrature rules themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451995913:12,simpl,simpler,12,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451995913,1,['simpl'],['simpler']
Usability,"Ouch, the problem cannot be reproduced with the current 1.5 release as the release version will die even much earlier with ``MemoryError: std::bad_array_new_length``. When calculating array lengths for ampiitudes, residua and density fitting b factors, simple int32 arithmethic is used, which overflows at some point. `new` is then called with a negative size. i fixed this already in my development branch... Input for reproducing the problem:; ```; memory 160 GB; molecule PR20 {; 0 1; Ir -0.0036453 -0.0067418 0.0546240; P 2.3412316 0.2633260 -0.0827666; C 2.8322725 1.6499560 -1.1514034; C 3.1508965 0.5810022 1.5225953; H 2.7397226 1.4975243 1.9544020; H 3.0796627 -2.0414912 -0.0970847; H 4.2325349 0.6920499 1.3971415; H 2.8126116 -1.4065392 -1.7435421; H 3.9236645 1.7279364 -1.1921940; H 2.9451701 -0.2527656 2.1998134; C 3.2265215 -1.1827248 -0.7571267; H 2.4227823 1.4722103 -2.1484758; H 4.2962318 -0.9681045 -0.8457994; H 2.3889675 2.5675955 -0.7590075; P -2.3731653 -0.0356822 -0.0699620; C -3.1396700 1.0016926 1.2209589; C -3.0094090 0.6380218 -1.6352816; H -2.9455753 -2.3068093 -0.7136733; H -4.2946110 -1.5213106 0.1442505; H -2.8800339 -2.1267692 1.0512420; C -3.2080716 -1.6536880 0.1215551; H -4.1029305 0.6851097 -1.6068349; H -2.5824278 1.6361161 -1.7615996; H -4.2216153 1.0653282 1.0682275; H -2.6891213 1.9959193 1.1600952; H -2.6744520 0.0098950 -2.4628143; H -2.9377790 0.5752071 2.2074361; C -0.0445914 0.2683835 1.8872601; O -0.0651117 0.4624335 3.0248963; Cl -0.3329573 2.5059651 -0.2539036; C 0.2355846 -2.0382203 0.3696479; O 0.5870862 -2.4771706 1.4540805; Cl 0.1349587 -0.2718086 -2.3358022; C 0.0008664 -3.0153971 -0.7782268; H -0.1231146 -4.0205893 -0.3660997; H 0.8774694 -2.9930708 -1.4340628; H -0.8449842 -2.7261204 -1.4026378; }. set reference rhf; set basis def2-TZVPP; set{; freeze_core false; cc_type df; mp2_type df; } . set{; e_convergence 1.0E-9; r_convergence 1.0E-8; max_mograd_convergence 1.0E-7; rms_mograd_convergence 1.0E-8; TPDM_ABCD_TYPE direct",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591#issuecomment-1141902495:253,simpl,simple,253,https://psicode.org,https://github.com/psi4/psi4/issues/2591#issuecomment-1141902495,1,['simpl'],['simple']
Usability,"Outright banning `auto` is excessive. It can make your code actually more clear to understand. Of course, it should be used economically and with care. But in a lot of cases, the exact type is not that important.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-191705233:74,clear,clear,74,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-191705233,1,['clear'],['clear']
Usability,"PRs psi-rking/optking#24 and psi4/psi4#1335 are a pair. Together, they get most optimizations working for Psi. In particular have working:. - [x] ordinary, opt-is-full job optimizations; - [x] collecting all the psivars so psi can read them in. basically, collecting enough to generate a skeleton (mol, basis, psivars) that can be passed back from `psi4.optimize(..., return_wfn=True)`; - [x] inlining optking's logging output into the psi4 output file; - [x] resetting psi4's options on either side of the `optking.run_json_dict()` call. The trouble was that the psi4-s imported by optking were clearing and setting options (as is proper for indep json runs) such that the calling psi4 didn't have its original options in globals upon optking termination; - [x] starting to catch optking errors (str in json) and re-raising them as psi4 errors. Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped me for a while b/c I only got the final error (""dynamic level exceeded"") and I thought it was behaving differently btwn direct optking and psi4 initiated runs. To me it seems clear that if geom_maxiter is exceeded, then optimizer quits directly (though perhaps that's clearer when geom_maxiter=2 than =200). @psi-rking @AlexHeide",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450:596,clear,clearing,596,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450,3,['clear'],"['clear', 'clearer', 'clearing']"
Usability,"PSI4 uses the Python API of `s-dftd3` while for the old `dftd3` it uses the binary.; Just to be sure, did you turned on the python API when compiling `s-dftd3`? https://github.com/dftd3/simple-dftd3#python-api. And if so can you `import dftd3` in python after setting `psi4 --psiapi-path`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2936#issuecomment-1528735776:186,simpl,simple-,186,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528735776,1,['simpl'],['simple-']
Usability,"PSIO errors are notoriously difficulty to understand, but my intuition is to say that this is a memory issue, if it's dependent on the size of the active space. What do you mean by ""I ask for 16gb memory on the cluster""? I'm not debugging your queuing system, but does that mean you're changing `psi4.set_memory(int(2e9))`? That looks closer to 1.6 than 16 GB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900:61,intuit,intuition,61,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900,1,['intuit'],['intuition']
Usability,"Per discussion in #2496, one could simplify the libmints code for multipole integrals to all use the arbitrary-order code.; The strategy would be to somehow hard-wire `MultipoleInt` into these specialized integral classes and only return the requested multipole components. I'll take this on after the M-D transition (#2414).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2498:35,simpl,simplify,35,https://psicode.org,https://github.com/psi4/psi4/issues/2498,1,['simpl'],['simplify']
Usability,"Per the last Psi4 call, I'd like to challenge you to think about how much of libcfmm could be factored out of Psi4. Many other codes might be interested in this functionality, too, if it can be made accessible through a simple API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208484833:220,simpl,simple,220,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208484833,1,['simpl'],['simple']
Usability,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307880460:153,clear,clear,153,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460,1,['clear'],['clear']
Usability,"Perhaps simpler to store as a numpy binary so endianness is handled automatically?. At first pass, it might simpler to simply check for endianess and flip if needed. ```; if (*(char *)&num == 1); {; printf(""Little-Endian\n"");; }; ```. Not sure this catches all edge cases though. IIRC Motorola does something odd, according to a hacker news article that I may have read awhile ago...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451752801:8,simpl,simpler,8,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451752801,3,['simpl'],"['simpler', 'simply']"
Usability,Perhaps we could make this more clear? I think if you had an issue understanding what this was supposed to mean others will have as well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/991#issuecomment-385267468:32,clear,clear,32,https://psicode.org,https://github.com/psi4/psi4/issues/991#issuecomment-385267468,1,['clear'],['clear']
Usability,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369640226:335,simpl,simply,335,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226,1,['simpl'],['simply']
Usability,Psi4 Style Guide,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/752:11,Guid,Guide,11,https://psicode.org,https://github.com/psi4/psi4/issues/752,1,['Guid'],['Guide']
Usability,"RHF DF-MP2 gradient calculations with the `dfmp2` module will replace the SCF orbital data on the wavefunction objects with MP2 natural orbitals and NO occupations.; This is the default for RHF calculations with `gradient('mp2')`. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L2368-L2388. This is undocumented and atypical behaviour compared to other modules.; It is also a good idea to preserve the SCF orbital data. @JonathonMisiewicz suggested a NO specific entry on the `dfmp2` wavefunction. ---; test script. ```; import psi4; import numpy as np. def run_psi4fchk(geom,method):; e, wfn = psi4.gradient(method, return_wfn=True,mol=geom); print(f""Ca_ao of {method}: \n"",wfn.Ca_subset(""AO"",""ALL"").np); return 0. psi4.set_output_file(""output.dat"", False); geom_rhf = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; """"""). psi4.set_options({; ""SCF_TYPE"": ""DF"",; ""BASIS"": ""minix"",; ""df_basis_dct"":""def2-svp-ri"",; ""dct_type"":""DF"",; ""cc_type"":""conv"",; ""df_basis_scf"":""def2-universal-jkfit"",; # ""reference"":""uhf"",; # 'scf_type':'pk',; 'mp2_type':'df',; }). to_test=['scf','mp2']; for m in to_test[:]:; psi4.activate(geom_rhf); run_psi4fchk(geom_rhf,m.upper()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1886:320,undo,undocumented,320,https://psicode.org,https://github.com/psi4/psi4/issues/1886,1,['undo'],['undocumented']
Usability,"Raise the error that we can't do stability analysis on DFT ""wavefunctions"" before we bother to compute the (potentially very expensive) integrals necessary for this. The same error message is getting raised C-side under the same condition. This commit just raises it sooner, because spending the better part of an an hour computing integrals for no reason is annoying. ## Checklist; - [x] No tests run in addition to quicktests, since this is so simple and mirroring a C-side operation. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1337:446,simpl,simple,446,https://psicode.org,https://github.com/psi4/psi4/pull/1337,1,['simpl'],['simple']
Usability,"Re-posting the specific thing I need @davpoolechem to look into, because that seems to have been forgotten. > @davpoolechem Could you double-check this? The question is what is meant by ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" and by ""Loop over all significant bra-shell pairs"" in the Ochsenfeld paper. Andy thinks ""significant"" = ""in this particular block"", but then the meaning of the first sentence I quoted isn't clear. I don't have the background in SCF algorithms to know what they're talking about without putting more time into this than I would like to spend, but it looks like it's similar to Fig. 3 and 4 of [their earlier paper](https://doi.org/10.1063/1.473833). Since you have more experience with this, can you offer a second opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1033084040:573,clear,clear,573,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033084040,1,['clear'],['clear']
Usability,"Reading the docs [here](http://www.psicode.org/psi4manual/master/dfmp2.html) we have the comment line ""The automatic basis selector should work fine for all of the Dunning and Pople bases"" which was misinterpreted to mean that all def2 basis sets needed an explicit RI keyword set. We should change this simply say that the automatic basis selection should work fine for all basis sets. . Also looking through the [basis set list](http://www.psicode.org/psi4manual/master/basissets_byfamily.html) we have MP2 basis sets for all of the def2 series except for def2-QZVPD. Can we just default this to something reasonable?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1512:304,simpl,simply,304,https://psicode.org,https://github.com/psi4/psi4/issues/1512,1,['simpl'],['simply']
Usability,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:668,guid,guide,668,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715,2,"['feedback', 'guid']","['feedback', 'guide']"
Usability,"Recording all the reference values should cover the type-of-calc-being-run logic, as that won't be changing for a given infile. So it should be down to if-present-in-`ref_vals`-then-compare being sufficient. And thanks, @amjames, getting some cc* module psivars onto wfn, as opposed to `P::e` can be tricky, as I learned from cctriples.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376674410:313,learn,learned,313,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376674410,1,['learn'],['learned']
Usability,"Reproduce with the below env.yml file:. ```yaml; channels:; - conda-forge; - psi4. dependencies:; - python =3.9; - datamol ; - numpy; - scikit-learn; - pytorch >=1.10.2; - tqdm; - jupyterlab; - openmm; - psi4 >=1.6; ```. then `mamba env create -n tmp_psi4 -f env.yml` and the error is. ```; conda-forge/linux-64 Using cache; conda-forge/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change. Looking for: ['python=3.10', 'datamol', 'numpy', 'scikit-learn', ""pytorch[version='>=1.10.2']"", 'tqdm', 'jupyterlab', 'openmm', ""psi4[version='>=1.6']""]. Encountered problems while solving:; - nothing provides intel-openmp needed by psi4-1.6+77475b5-py39hceaf722_0; ```. I tried multiple combination of python and psi4 versions without success. Note that the above has been only tested on a linux machine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621:143,learn,learn,143,https://psicode.org,https://github.com/psi4/psi4/issues/2621,2,['learn'],['learn']
Usability,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:992,simpl,simple,992,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955,1,['simpl'],['simple']
Usability,"Right, without more information, the most I'm expecting is to update the error message with something that makes clear whether this is something the user can fix by changing settings as well as what the problem is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684:113,clear,clear,113,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684,1,['clear'],['clear']
Usability,"Run:; ```; molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. wfn = energy('scf/cc-pvdz', return_wfn=True)[1]; print(wfn.Fa_subset(""MO"").nph); ```. The result MO basis Fock matrix is not diagonal, as expected. The correct way to transform the SO basis Fock matrix into the MO basis matrix is contraction against the C coefficient matrices. This is not what the `Fa_subset` function does. It instead goes through [a series of matrix mulitplications involving the overlap matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L1047-L1050). This is the correct transformation rule for the density matrix. Not-so-coincidentally, `Da_subset` goes through exactly the same function, where this behavior is correct. If you try to use the same logic for both helpers, you're going to get one of them wrong, guaranteed. While the mechanism of the bug is clear to me, I'm not sure what the best fix should be. Perhaps we should intercept ""MO"" as a special case in `Fa_subset` so it never sees the `matrix_subset_helper`? Under the hood, the code would return `Fa_->transform(Ca_)`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989:889,clear,clear,889,https://psicode.org,https://github.com/psi4/psi4/issues/1989,1,['clear'],['clear']
Usability,"Running the following input file; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }. set {; scf_type mem_df; basis cc-pvdz; num_frozen_uocc 4; mp2_type df; }. analytic = gradient(""mp2""); findif = gradient(""mp2"", dertype=0). compare_matrices(analytic, findif, 4, ""DF-MP2 Gradient""); ```. gives me. ```; Expected:; [[-0. 0.000000000003 -0.034538336725]; [ 0. -0.035340551119 0.017269168364]; [ 0. 0.035340551116 0.017269168361]]; Observed:; [[ 0. 0.000000000422 -0.029704789758]; [ 0. -0.030742173112 0.014852395042]; [ 0. 0.030742172689 0.014852394715]]; Difference (passed elements are zeroed):; [[ 0. 0. 0.004833546968]; [ 0. 0.004598378007 -0.002416773321]; [ 0. -0.004598378426 -0.002416773646]]; ```. So we have a third decimal place error(!) in DF-MP2 frozen virtual gradients. Frozen core gradients test fine. @loriab, take note of this during your standardization and testing pass. Core developers, assign this to me. If it's a simple fix, this will be part of DFGrad II. Otherwise, this will be DFGrad III. I'm also requesting, given the severity of this bug, that it be made a Psi 1.4 target.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1916:946,simpl,simple,946,https://psicode.org,https://github.com/psi4/psi4/issues/1916,1,['simpl'],['simple']
Usability,"SCF stability analysis with FOLLOW is currently only implemented for UHF. RHF and ROHF have stability analysis, but do not have the capability to follow the instability. This is not documented at all, as far as I can tell, and what is even worse is that if the user requests a FOLLOW with RHF, it ""fails"" silently.; That is, the SCF and the stability analysis is run, and even if there is an instability Psi4 just carries on. So I propose two short term solutions:; 1. Update the docs to make it clear that FOLLOW is currently an UHF only feature.; 2. Implement checks against the user requesting FOLLOW with RHF or ROHF. I think exiting with error is the reasonable action when the user requests an unavailable feature. Of course the long term solution would be to implement follow for R(O)HF, but that is probably more of a wishlist item, than anything else. I found these issues a while ago and planned to fix them myself, but never got around to actually do so, and will not have the time to work on them before the 1.2 release.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/973:496,clear,clear,496,https://psicode.org,https://github.com/psi4/psi4/issues/973,1,['clear'],['clear']
Usability,"Several dfocc test cases have failed since the summer when we cleared out most of them. Namely, dfomp2p5-grad1, dfomp3-grad2, dfomp2p5-2, and dfomp3-2. Seems to happend on multiple machines: https://testboard.org/cdash/testSummary.php?project=3&name=dfomp2p5-2&date=2015-11-17. @bozkaya, could you take a look? Thanks.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190:62,clear,cleared,62,https://psicode.org,https://github.com/psi4/psi4/issues/190,1,['clear'],['cleared']
Usability,"SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in the new version. When you use a `Matrix`, the transformation reduces to a `linalg::triplet` call.; 3. Lastly, prefactors. Because it's ambiguous what you call the Lagrangian, I'm going to use as a point of reference ""the thing you contract against the overlap derivatives"", because that is pefectly unambiguous. In the old code, you'd send -2 times that thing. Now, you send -1 times that thing. This is necessary for consistency with how the SCF code determines the value of the Lagrangian on a wavefunction object. If you want an example for how this works, see the newly added code in `dct_gradient_UHF.cc:compute_ewdm_odc`. With these changes, 30 lines of code replaces about 230. I call this a good start. ### Step Two: Conventional TPDM Tech; I don't see a way around still using `dpdbuf4` for this, even though this isn't the most plugin-friendly. The main simplification here will be eliminating the need to dump to `libiwl`. ## Questions; - [ ] There is a goof in `libtrans`: There is a [pre-defined frozen core space `O`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L51-L57), and also a [pre-defined occupied space `o`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L58-L68), and likewise for virtual orbitals. These spaces have conflicting labels. ; [Uppercase letters mean the alpha orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L306) and [lower case letters mean the beta orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L505). We need to change the labels of the frozen core and frozen virtual spaces to break the conflict. We currently have five votes (Lori, Andy, Susi, Jet, and I) for `C` for frozen core and `W` for frozen virtual. Anybody opposed? Also, how on earth do I deprecate _this_? I need this for so",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:2863,simpl,simplification,2863,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['simpl'],['simplification']
Usability,"Simple to implement, but virial ratios don't make sense for DFT since the energies are anyhow off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1653#issuecomment-497265265:0,Simpl,Simple,0,https://psicode.org,https://github.com/psi4/psi4/issues/1653#issuecomment-497265265,1,['Simpl'],['Simple']
Usability,Simplified test case; ```; molecule dimer {; 0 1; Ne 0.0 0.0 0.0; --; 0 1; Xe 0.0 0.0 3.0; }. set {; basis def2-svp; print 2; }. set guess core; Eall = energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-447940882:0,Simpl,Simplified,0,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-447940882,1,['Simpl'],['Simplified']
Usability,Simplify EFP routines,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111:0,Simpl,Simplify,0,https://psicode.org,https://github.com/psi4/psi4/pull/2111,1,['Simpl'],['Simplify']
Usability,Simplify Input-File Side Error Info,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1196:0,Simpl,Simplify,0,https://psicode.org,https://github.com/psi4/psi4/issues/1196,1,['Simpl'],['Simplify']
Usability,Simplify RDCT Fock Matrix Construction,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2171:0,Simpl,Simplify,0,https://psicode.org,https://github.com/psi4/psi4/pull/2171,1,['Simpl'],['Simplify']
Usability,Simplify UDCT Fock Matrix Construction,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2185:0,Simpl,Simplify,0,https://psicode.org,https://github.com/psi4/psi4/pull/2185,1,['Simpl'],['Simplify']
Usability,Simplify partial Cholesky with Gershgorin theorem,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1824:0,Simpl,Simplify,0,https://psicode.org,https://github.com/psi4/psi4/pull/1824,1,['Simpl'],['Simplify']
Usability,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688:778,feedback,feedback,778,https://psicode.org,https://github.com/psi4/psi4/issues/688,1,['feedback'],['feedback']
Usability,"Since `check_<lang>_compiler_flag` calls `check_<lang>_source_compiles` defining `CMAKE_REQUIRED_FLAGS` right before the former is called does the trick. I don't know why this isn't done automatically or why it isn't clearly documented, but it works. This is the full patch:; ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index ca7e20054..6cc4ee09e 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:217,clear,clearly,217,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,1,['clear'],['clearly']
Usability,"Since `cppe` has its own Python interface now (which it did not when I started this PR), I guess there is no reason to interface with psi4 on the C++ layer?. I guess it would be much simpler wrt maintenance of the code to refactor everything and use the `cppe` Python interface directly. What do you think, @loriab, @dgasmith, @robertodr ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596:183,simpl,simpler,183,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596,1,['simpl'],['simpler']
Usability,"So I was thinking about getting rid of `""component""` too. The difference between something like ""MP2"" and ""B2PLYP"" is that while there's a name for the SCF component of MP2 (it's HF), there's no such thing for the SCF part of B2PLYP. Also, before components were introduced, the keys in the `VARH` dict had to be valid methods, having a check against component gets around this issue. I think a much cleaner interface may be to rework how the extrapolation functions (`corl_xtpl_helgaker_2` etc.) work. Rather than passing in an energy/gradient/Hessian, we could pass in the `wfn` + the variable to extrapolate, and instead of trying to shoehorn the dft extrapolation into the existing interface, it could be neatly contained in a single extrapolation function. The only issue I see with this is that the printing of the CBS stages would have to move from `cbs()` into the extrapolation function itself. This is perhaps better discussed once DDD is in?. ------. I have made changes to the duplication detection, merging the two loops. Instead of a simple counter, it's now an array of job-indices, with the first element being the highest priority (ie the one with the matching wfn). Also, @hokru your ""requested"" syntax now works, see the added test which combines components arbitrarily. `ctest -L cbs` passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657:1048,simpl,simple,1048,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657,1,['simpl'],['simple']
Usability,"So I'm not a CMake expert, and most of what I know has been gleaned in the last six months just by reading the docs and listserve posts over and over again. CMake _does_ have a set of best practices in mind, but they don't (to my impression) do a good job of telling you what those practices are. And CMake is so flexible that it's easy to just ignore them. But insofar as they give explicit guidance, I've tried to follow it. So a few of my thoughts:. * Targets are to objects (OOP) as cmakevars (e.g., `${HDF5_LIBRARIES}`) are to data arrays. `Find<module>` or `<module>Config` that return <module>_LIBRARIES, _LIBRARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think ht",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276178223:392,guid,guidance,392,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223,1,['guid'],['guidance']
Usability,"So I've added the option to be able to run frequency calculations via the cbs interface, both using the `""method/basis""` and `frequency(cbs, ...)` syntax. I've added the tests for this too - I wanted to get a reference value for the `HF/cc-pV[DT]Z` extrapolation from other codes (thanks @hokru), but we failed to get it run correctly. When compared to large basis sets, one gets these results:. Freq 1 | Freq 2 | Freq 3 | zeta | RMS; -- | -- | -- | -- | -- ; 1809.246 | 3923.151 | 4020.177 | 2 |   174.1217 ; 1753.040 | 4126.975 | 4226.872 | 3 |    4.1162; 1750.381 | 4130.709 | 4230.122 | 4 |    1.4733; 1748.147 | 4130.445 | 4230.985 | 5 |    0.2300; 1748.003 | 4130.108 | 4230.827 | 6 |    ; 1747.741 | 4130.226 | 4230.575 | [dt] |   0.2207; 1749.876 | 4131.278 | 4230.490 | [tq] |   1.2899; 1747.595 | 4130.375 | 4231.193 | [q5] |   0.3520. I think the convergence is reasonable - it's clear the results (even with HF/[dt]) are not complete junk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-424317527:891,clear,clear,891,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-424317527,1,['clear'],['clear']
Usability,"So after some digging, it seems that different CI runs on different hardware/compilers provide *slightly* different density/exchange matrix elements. I can only presume this is because `-march=native` is generally used in Psi4 builds. Since I set the `test_gauxc_writer.py` test tolerances to be pretty tight (literally no difference between the reference and actual density matrix), this slight deviation led the tests to fail. I didn't want to simply loosen the test tolerances without a good reason to do so, but now that I have said reason, I will just do that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2334026215:446,simpl,simply,446,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2334026215,1,['simpl'],['simply']
Usability,"So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions. Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; ```; SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; std::shared_ptr<BasisSet> bs3) {; auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; }; ```; and it is also revealed in the Python interface, which means that you should be able to call it. Hopefully someone else can tell how to fit all the pieces together.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063:194,learn,learning,194,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063,1,['learn'],['learning']
Usability,"So there is something that has long bothered me about this PR, and I want to bring it up because I consider it rather important, and I am unsure of how to best address it. And that is the interaction between the `SCREENING=NONE` keyword option and the CompositeJK methods. Currently, the composite Psi4 methods are in this weird limbo where integral screening occurs both within the `TwoBodyAOInt` object, and within the composite method itself. This is, presumably, undesirable. And here, it opens the question of how to best handle how composite methods behave when `SCREENING=NONE` is set. There are two options:. 1. `SCREENING=NONE` disables integral screening only within `TwoBodyAOInt`, while composite method-side screening can be disabled by setting the corresponding `INTS_TOLERANCE` value to 0.0. This is very unintuitive, and something I could easily see throwing someone off in the future (because `SCREENING=NONE` could technically still do integral screening in composite methods). But this at least allows for composite methods to be run without integral screening via `TwoBodyAOInt` easily.; 2. `SCREENING=NONE` disables integral screening both within `TwoBodyAOInt` and within the composite methods. This is undoubtedly the most intuitive behavior, but doesn't address the aforementioned issue where integral screening occurs both in `TwoBodyAOInt` and composite methods. What do you all think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060#issuecomment-2331738677:1225,undo,undoubtedly,1225,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2331738677,2,"['intuit', 'undo']","['intuitive', 'undoubtedly']"
Usability,"So, the dimer converged in 57 geometry iterations using; ```; set {; basis def2-tzvp; maxiter 100; geom_maxiter 200; g_convergence gau; opt_coordinates both; guess sad; guess_persist true; }; ```; In a different run, it hit the maximum geometry iterations of 50, but was running fine using; ```; set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; So, there is no need for `soscf true` and `soscf_max_iter`; ```; Same story when using; ```; set {; basis def2-tzvp; maxiter 100; g_convergence gau; opt_coordinates both; }; ```; here the max iterations of 50 geometry iterations was hit, but it was clearly converging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-958951687:688,clear,clearly,688,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-958951687,1,['clear'],['clearly']
Usability,"Some ""general direction"" comments:. 1. I can't identify what the ""Ways to Add Code"" page is supposed to accomplish. There's nothing unifying these sections together, and even individual sections seem disjointed to me. The easier and more rapid development section feels like one part expositing historical developments and one part trying to sell the new developer on the transition to Python. The Psi4Numpy and plugins sections read like one part overviewing the process of going from equations to code and again like one part trying to sell the new developer on NumPy. The ""incorporating code into Psi4"" section reads like a guide on parceling code into C++ parts and Python parts. 2. Are you expecting the reader to already know about dual-language software and OpenMP? The current documentation is written as if you are, but I didn't know about the first one until after I had started working in Psi, and I still only have a hazy idea on the second. 3. I fear that the strategy of ""mostly the vanilla contributor covenant, but with small additions to emphasize that we value inexperienced devs"" will lead to those small additions not being noticed by the inexperienced devs. When I see something as general as, ""to help us maintain this vibrant; and productive atmosphere,"" my immediate thought is that this is administrative babble and only worth skimming. Having read the covenant, I cannot identify the small additions in there. Might I suggest making an explicit section on new developers and making it very specific to Psi? Something like:; _""The continued maintenance and growth of Psi depends on getting, training, and retaining new developers. This brings in prospective developers with widely varying levels of programming experience, including people learning the basics of theory and programming in quantum chemistry, people learning the basics of C++ or Python, and even people learning programming in general. We accept all this and are committed to training new developers to contrib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745:627,guid,guide,627,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745,1,['guid'],['guide']
Usability,"Some good news for building numpy using the Accelerate framework! From the numpy 1.21.0 release notes at https://numpy.org/doc/stable/release/1.21.0-notes.html :. ""With the release of macOS 11.3, several different issues that numpy was encountering when using Accelerate Framework’s implementation of BLAS and LAPACK should be resolved. This change enables the Accelerate Framework as an option on macOS. If additional issues are found, please file a bug report against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK libraries."". It might very well be that this is what the conda-forge numpy builds are already using. It is difficult to say. If anyone knows how to build numpy from source explicitly using Accelerate, that would be very much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961472062:501,feedback,feedback,501,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961472062,1,['feedback'],['feedback']
Usability,Sorry about that! Looks like everything is back to normal. Thanks for clear instructions on the fix.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-492716743:70,clear,clear,70,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492716743,1,['clear'],['clear']
Usability,"Sorry for messing the fix up, and thanks for diagnosing it, @jgonthier . No, it doesn't look like the driver is touching `df_scf_guess`. read_options defaults it to `on`, but otherwise only `hf.cc` handles that option. Ah, yes, I see what you mean at L1969. If the path to resolve this is clear to you, then yes, please, go ahead and do so, @jgonthier . I'm sort of with @fevangelista that I don't see that we need to facilitate `df_scf_guess` for non-`direct` since it doesn't change the convergence behaviour or reduce quantities to compute. Maybe also change. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```. to. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech; in a |scf__scf_type| ``DIRECT`` calculation -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189416253:289,clear,clear,289,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189416253,1,['clear'],['clear']
Usability,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-225993854:355,clear,clear,355,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854,1,['clear'],['clear']
Usability,"Sorry, I have not stated clearly. I tried the F-SAPT example in https://psicode.org/psi4manual/master/fisapt.html#f-sapt-a-representative-example. And when I use [fsapy.py](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/fsapt/fsapt.py) to analyse the interaction between different fragment which was stated in fA.dat and fB.dat, it reported such error:; ```Traceback (most recent call last):; File ""fsapt.py"", line 1048, in; stuff = compute_fsapt(dirname, False); File ""fsapt.py"", line 888, in compute_fsapt; order2 = extract_order2_fsapt(osapt, total_ws['A'], total_ws['B'], frags); File ""fsapt.py"", line 496, in extract_order2_fsapt; val = np.einsum('i,ij,j', valueA, value, valueB); File ""<array_function internals>"", line 6, in einsum; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib/python3.7/site-packages/numpy/core/einsumfunc.py"", line 1361, in einsum; return c_einsum(*operands, **kwargs); ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (52,)->(52,newaxis) (51,51)->(51,51) (52,)->(52)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902404884:25,clear,clearly,25,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902404884,1,['clear'],['clearly']
Usability,"Sorry, I only just saw this thread. I don't know if this is useful, but here's some code that computes a DFT wavefunction as a simple way to set up a DFT integration grid. It then uses that integration grid to integrate the electron density at the HF level in this example. Most of this was stolen from @dgasmith ; ``` python; import psi4; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""sto-3g"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-10}). method = ""HF""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()). # Vpot builder; _, wfn_V = psi4.energy(""SVWN"", return_wfn=True, molecule=mol); Vpot = wfn_V.V_potential(). points_func = Vpot.properties()[0]. # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()). # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :lpos.shape[0]]. # Build a local density; localDa = wfn.Da().np[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(nelectrons); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428:127,simpl,simple,127,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428,1,['simpl'],['simple']
Usability,"Sorry, I overlooked that statement in your original message. Note to self: learn to read bug reports more carefully in future",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311746162:75,learn,learn,75,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311746162,1,['learn'],['learn']
Usability,"Sorry, I wasn't clear. Either cc2 is under select control, in which case the notes_c section is needed, the select_cc2_gradient fn should come back and a select_cc2 fn should be added. Or, cc2 _not_ under select control, the notes_c can be removed, and the procedures table should direct cc2 calcs to run_ccenergy and run_ccenergy_gradient (or the appropriate non-select fn). It's not a good idea to have cc2 calcs directed toward select_ccsd. Sorry about the confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/670#issuecomment-291047408:16,clear,clear,16,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-291047408,1,['clear'],['clear']
Usability,"Sorry, I wasn't clear. I meant on conda, on the main channel :) On 1.2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-352470569:16,clear,clear,16,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-352470569,1,['clear'],['clear']
Usability,"Sorry, I’m out of action due to serious illness so probably can’t be much help. I was working on derivatives but they were buggy. They should in theory be simple, but I don’t know when I’ll be in a position to get back to them. Sorry again :/. > On 7 Nov 2018, at 21:23, Andy Simmonett <notifications@github.com> wrote:; > ; > Description; > ; > This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine.; > ; > Todos; > ; > Notable points (developer or user-interest) that this PR has or will accomplish.; > ; > Improve the speed and stability of the ECP integrals.; > Questions; > ; > @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?; > Checklist; > ; > Make libecpint play nicely with our CMake infrastructure; > Write wrappers for ECP integral code, making the new code path optional for now; > Tests added for any new features; > Status; > ; > Ready for review; > Ready for merge; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/1340; > ; > Commit Summary; > ; > Import libecpint via CMake; > File Changes; > ; > M CMakeLists.txt (3); > M external/upstream/CMakeLists.txt (1); > A external/upstream/libecpint/CMakeLists.txt (57); > M psi4/CMakeLists.txt (9); > M psi4/psi4Config.cmake.in (2) ; > Patch Links:; > ; > https://github.com/psi4/psi4/pull/1340.patch; > https://github.com/psi4/psi4/pull/1340.diff; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-439512371:155,simpl,simple,155,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-439512371,1,['simpl'],['simple']
Usability,"Sounds good to me. I just wanted to get some rough guidelines in there, now that we've made master private. Feel free to add/remove anything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-184374822:51,guid,guidelines,51,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-184374822,1,['guid'],['guidelines']
Usability,Sounds like a great plan. I'll try to be responsive when/if you have questions.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1043004806:41,responsiv,responsive,41,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1043004806,1,['responsiv'],['responsive']
Usability,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252934079:116,simpl,simple,116,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079,1,['simpl'],['simple']
Usability,"Splendid, you found it; I kept getting that basis_relativistic was set, even though it clearly wasn't. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/529#issuecomment-263151298:87,clear,clearly,87,https://psicode.org,https://github.com/psi4/psi4/pull/529#issuecomment-263151298,1,['clear'],['clearly']
Usability,"Still in early stages, but one project you might want to check out is [QCFractal](https://qcfractal.readthedocs.io/en/latest/) which is being constructed to fulfill exactly the use case that you outlined. Still in alpha, but for simple projects like the one you described work well at the moment. If you would like to use the project join the Slack [here](https://qcfractal.readthedocs.io/en/latest/community.html) to get in touch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441389802:229,simpl,simple,229,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441389802,1,['simpl'],['simple']
Usability,"Sure! Since your query, I've learned that in principle, the new compiler toolchain on Mac can do OpenMP parallelism. I've started working on that (https://github.com/AnacondaRecipes/aggregate/issues/10). If that ends up working, we'll still want to use Intel compilers on top of it for Linux, but, in principle, we'd switch Linux, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-335043822:29,learn,learned,29,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-335043822,1,['learn'],['learned']
Usability,"Sure, see if [this guide](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow) helps. You'll probably only need the first of the two slides. And we're glad to consult. Thanks for noticing this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/673#issuecomment-291011776:19,guid,guide,19,https://psicode.org,https://github.com/psi4/psi4/issues/673#issuecomment-291011776,1,['guid'],['guide']
Usability,"Sure, sounds good. ; - OK with moving to qcengine (sorry about that; I didn't want to touch multiple repos at the same time, hence the `## hack ##`).; - That github repo is where postg development occurs, yes. PRs and requests for features are welcome.; - OK with changing the logic in any way that is more appropriate. Let me know and I can make an attempt.; - Never used conda. I'm OK with making a postg package, though, but I'll probably need some guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521307048:452,guid,guidance,452,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521307048,1,['guid'],['guidance']
Usability,"Sure, will do. Thanks for the feedback !!. On Tue, Dec 13, 2016 at 1:55 PM, Lori A. Burns <notifications@github.com>; wrote:. > *@loriab* commented on this pull request.; > ------------------------------; >; > In psi4/driver/procedures/proc.py; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > @@ -870,7 +870,7 @@ def select_ccsd_t__gradient(name, **kwargs):; > # Considering only ccenergy; >; > func = None; > - if reference == 'UHF':; > + if reference == 'RHF' or reference == 'UHF':; >; > if reference in ['RHF', 'UHF']:; > ------------------------------; >; > In tests/cc13b/input.dat; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > +}; > +; > +set {; > + reference rhf; > + basis cc-pvdz; > + r_convergence 13; > + e_convergence 13; > + d_convergence 13; > +}; > +; > +analytic, wfn = gradient('ccsd(t)', return_wfn=True); > +; > +set findif points 5; > +fin_diff, wfn = gradient('ccsd(t)', dertype=0, return_wfn=True); > +; > +compare_matrices(analytic, fin_diff, 10, ""RHF-CCSD(T) gradient test"") #TEST; >; > Concur with @amjames <https://github.com/amjames> that it would be good; > to have a quick rhf-ccsd(t) grad in quicktests. In the cfour tests, you'll; > find some gradients; > <https://github.com/psi4/psi4/blob/master/tests/cfour/opt-rhf-ccsd_t_/output.ref#L1024-L1034>; > if you'd like to compare with that.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8FiN7uGia0qIAoxKEjtzNtRE1cv9ks5rHuoTgaJpZM4LMEuA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/547#issuecomment-266828985:30,feedback,feedback,30,https://psicode.org,https://github.com/psi4/psi4/pull/547#issuecomment-266828985,1,['feedback'],['feedback']
Usability,"TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:3023,Guid,Guide,3023,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['Guid'],['Guide']
Usability,"Tagged `action-items-needed`. It isn't clear to me if there's anything that needs to be changed in `libmints`, or if we're just going to tell users to use the ddCOSMO interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-869213120:39,clear,clear,39,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-869213120,1,['clear'],['clear']
Usability,"Thank you @dgasmith for the quick feedback.; I just put the I-PI changes now in this PR/branch and tried to add also a small smoke test of the broker, when i-pi is not available on runtime in the unittests to show the concept here. The other CC changes and minor bug fixes will be put into a different PR then as those changes are indeed not required at this point, but only when also using the amplitudes as well later on in the broker.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-400979830:34,feedback,feedback,34,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-400979830,1,['feedback'],['feedback']
Usability,"Thank you for letting me know!. Regarding parallelization, nothing seems especially amiss. I can see `schedule(guided)` being preferred over `schedule(dynamic)` here. The comments look largely good to me, as well!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780:111,guid,guided,111,https://psicode.org,https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780,1,['guid'],['guided']
Usability,"Thank you for your fast answers ! . @loriab, this indeed solved my problem. The first test failed but the other passed for now (still running). I will provide you a feedback on the tests which fail when it is finished. I'll also run the test you suggest. @andysim This is the results of the output of the command you asked:; ```; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614747634:165,feedback,feedback,165,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614747634,1,['feedback'],['feedback']
Usability,"Thanks @loriab for the duplicating the PR and @dgasmith @jturney thanks for the positive feedback! In general I think that Matrix/Vector and other infrastructure in libmints could be made leaner and cleaner if we focused on passing only Dimension objects, moved to use stl containers, and modernized the code to take advantage of C++11 features. I'll be interested in discussing more about this with you when we have a chance. BTW: I went ahead and resolved a conflict both in #571 and #574. Should I go ahead and close this PR so we may merge @loriab's version?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571#issuecomment-272906298:89,feedback,feedback,89,https://psicode.org,https://github.com/psi4/psi4/pull/571#issuecomment-272906298,1,['feedback'],['feedback']
Usability,"Thanks @loriab for your detailed answer. In fact, I would like to do focal-point analyses for small molecules (including HF, MP2, CC, DBOC, and relativistic corrections) in a somewhat automated form. Psi4, which is able to execute MRCC and CFOUR, seems to me an optimal frame for this purpose (I saw that certain FPA schemes are already implemented in it). . The Psi4/Cfour route looks simpler for me. Basically I will use Cartesian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:386,simpl,simpler,386,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['simpl'],['simpler']
Usability,"Thanks Jonathon. If it is simpler, I can give you access to our cluster (by sending you the login data via email) where you can test the problematic input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155166619:26,simpl,simpler,26,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155166619,1,['simpl'],['simpler']
Usability,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:30,feedback,feedback,30,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['feedback'],['feedback']
Usability,"Thanks a lot for the feedback!. I guess that for now I'll micro-wiggle around my initial coordinates a bit and that should fix it, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380148707:21,feedback,feedback,21,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380148707,1,['feedback'],['feedback']
Usability,"Thanks all for the feedback. I'll split this one in three: i) Vector/Matrix polish ii) C++14 constructs for pybind11 iii) Actual xtensor stuff (CI doesn't seem very happy about those :weary:) . @fevangelista xtensor is used only in the test for the `doublet`. I initially intended to swap the storage in `Vector` and `Matrix` to use xtensor, but that turned out to be quite hard (due to the extensive use of `pointer` basically everywhere in the code) The strategy now is to rewrite the storage object (I think that's largely done, though copy CTORs, assignment etc are missing) and the symmetry-aware operations (multiplies, diagonalization, etc) unit testing them on the way. The latter will take a bit of time, but it's also something that more people can work on concurrently, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931:19,feedback,feedback,19,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931,1,['feedback'],['feedback']
Usability,"Thanks both for the quick responses and feedback. @loriab, any objections to me going ahead and making the discussed changes now? (Changing `onepdm` to `opdm` wherever it appears in `cc` also sounds good to me.) The question is whether to bother deprecating the old keywords, since we're including some behavior changes as well. These keywords are so obscure that I don't think deprecation is worth the effort.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2432#issuecomment-1033834314:40,feedback,feedback,40,https://psicode.org,https://github.com/psi4/psi4/issues/2432#issuecomment-1033834314,1,['feedback'],['feedback']
Usability,"Thanks for a clear exposition of the problem. This is one that will be fixed as part of the in-progress integral overhaul. At one point we had a relatively slow integral transformation routine (which has since been sped up) and I experimented with a flag to allow the AO->SO transformation to incorporate the Cartesian->pure transformation also. That's what the `force_cartesian_` member of the integral code is for. Given that the transformation is no longer a performance concern in the integral code, the `include_pure_transform_` machinery will be remove and the petite list will only handle unitary AO->SO transformations, as originally intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075:13,clear,clear,13,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075,1,['clear'],['clear']
Usability,"Thanks for all your additions and guidance, @susilehtola. I think the [checklist](https://github.com/psi4/psi4/pull/1101#issuecomment-755560733) is done, barring the ft97 issue and the LC-BOP header issue. Testing here may fail on Linux for any new fctls that weren't in last night. I'll build it again after the above resolve. I want to work on converting the c-f recipe to cmake and building out for Windows, so I may have some build MRs over at libxc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755759475:34,guid,guidance,34,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755759475,1,['guid'],['guidance']
Usability,"Thanks for fixing that one! I have found another however which comes up when I request to save all wavefunction properties via QCEngine using the latest dev version of psi4, here is the error message.; ```; QCEngine Input Error: Traceback (most recent call last):; File ""/Users/joshua/miniconda3/envs/psi4/lib//python3.8/site-packages/psi4/driver/schema_wrapper.py"", line 410, in run_qcschema; ret = qcel.models.AtomicResult(**ret_data, stdout=_read_output(outfile)); File ""pydantic/main.py"", line 274, in pydantic.main.BaseModel.__init__\npydantic.error_wrappers.ValidationError: 1 validation error for AtomicResult\nwavefunction -> occupations_a; Return quantity scf_occupations_a does not exist in the values. (type=value_error); ```. I think this is related to the lines here which pulls out the occupations which have been commented out I am not sure if these simply need to be uncommented or if there is some formatting that needs to be worked out https://github.com/psi4/psi4/blob/670a85012a2864dd6673ac4a39243156205c500e/psi4/driver/schema_wrapper.py#L344. ccing @dgasmith in case he knows the status of this. @hokru could you please re-open this issue or should I make a new one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946:865,simpl,simply,865,https://psicode.org,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946,1,['simpl'],['simply']
Usability,"Thanks for getting the most important part of the PR cleared away. As far as I can see, the next steps are:; 1. Fix the merge conflicts (annoying rebase); 2. Determine what information in `print_details` is actually used. I want to retain print information that is actually used, but I can do away with the rest. Once we have that, we can assess if keeping a modified `RadialGrid` is the best way to keep the useful print information. (I think we've established that `r` and `wr` are used, but `order` is not?). This part of the code is not pretty, and I commend you for dealing with it at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1275079300:53,clear,cleared,53,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1275079300,1,['clear'],['cleared']
Usability,"Thanks for joining in, @rmcgibbo and @tallakahath. The breaking API change is that we can now properly serialize and reconstitute wavefunction objects. What gets stored and an example [here](https://github.com/psi4/psi4/pull/1304/files). So after that, the `180.npz` storage structure doesn't have to be [written out explicitly](https://github.com/psi4/psi4/commit/e5b12a40c8c2d65a5e59f758df871407afdc544c#diff-dbf22cd80d16f6d8ef8250145a6d91bfR1410) and uses of the `180` file [can be much simpler](https://github.com/psi4/psi4/pull/1495/files#diff-ce55390d6b954c38f0c1fe9df10e0eceL87). The file also now has extension `180.npy`. This is a definite improvement psi-side, but the break to snsmp2 is definitely our fault, so we're willing to fix it. We'd probably do the minimal disruption that gets the code running again. I think that means switching to reading npy from npz, and dealing with Ca_occ by either pulling it from a reconstitued wfn, `Ca_occ = scf_wfn.Ca_subset(""SO"", ""OCC"")` or saving it in the array psivar slot `scf_wfn.set_array(""CA_OCC"", Ca_occ)`. If you'd like to try doing the fix yourselves, or do greater renovations after some of the bug workarounds or progress in psi, we'd be glad of it. I'm trying to get a psi4 v1.3rc1 out, which means conda pkg `psi4` (psi4 itself and optional compiled-in addons) and `psi4-rt` (optional run-time addons) need to be in working order. That's pretty much the case except for snsmp2 (I didn't realize the trouble was more than a `npz` --> `npy` switch until yesterday.) So I was going to drop snsmp2 from `psi4-rt` for the v1.3rc1 and expect to get it back by v1.3.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514#issuecomment-459735161:490,simpl,simpler,490,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459735161,1,['simpl'],['simpler']
Usability,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:455,simpl,simply,455,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462,1,['simpl'],['simply']
Usability,"Thanks for subscribing me to the thread -- I would have missed it otherwise. > I suggest a minimal patch-up rather than thorough update. Is your sense that this is something we could fix on the sns-mp2 side with a minimal patch up? Perhaps by adding the fields we need to `arrays()` or something? I confess that I haven't been following psi4 development closely enough recently to have much of a context here about what the relevant psi4 API changes are or what the simplest way forward is. Is there a ticket you can direct me towards describing the change in the API related to the npz format for file 180?. > In the meantime, snsmp2 is getting dropped from psi4-rt. Is this the plan only if we don't fix the incompatibility in the sns-plugin, or are you planning to drop snsmp2 from psi4-rt regardless of whether or not this gets fixed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071:466,simpl,simplest,466,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071,1,['simpl'],['simplest']
Usability,"Thanks for tackling these Python 2 vs. 3 issues. The python driver is the least computationally expensive portion of a given psi4 calculation, so I think we're ok with conversion to items and values and a uniform interface to 2 and 3. On your earlier question of patch format, the psi4/psi4release repo isn't so much a repo as a history-less presentation of the code. We can merge in your pull request, but the more important merge will be to the private psi4/psi4 repository. So, the answer is e-mail or pull request will do very well, especially for simple patches. If you should be interested in doing more, see http://psicode.org/developers.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20536164:552,simpl,simple,552,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20536164,1,['simpl'],['simple']
Usability,"Thanks for the clarification @amjames. I think the line at the docstring as you suggested might be better, but it would be even clearer if it explicitly mentions the possibility of non-zero data residing in the file/buffer?. The code I was looking at is here at [line 79-90](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccenergy/mp2_energy.cc). If I understand you though, this code would break if someone set `cachelevel = 0`? It makes no sense to take the dot product or direct product of zero arrays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267468232:128,clear,clearer,128,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267468232,1,['clear'],['clearer']
Usability,Thanks for the clear and prompt explanation!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1051#issuecomment-400062933:15,clear,clear,15,https://psicode.org,https://github.com/psi4/psi4/issues/1051#issuecomment-400062933,1,['clear'],['clear']
Usability,"Thanks for the content lines. I agree with Jonathon that the troublesome part arises from https://github.com/Qiskit/qiskit-aqua/blob/1f2c316c3a1aca1296f45241d14ad8ae5fbe2027/qiskit/chemistry/drivers/psi4d/psi4driver.py#L107-L117 so it'll need to be changed there. If you like, feel free to ping me when you open an issue there. I think I could help modernize/simplify how they call psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228#issuecomment-873004517:359,simpl,simplify,359,https://psicode.org,https://github.com/psi4/psi4/issues/2228#issuecomment-873004517,1,['simpl'],['simplify']
Usability,Thanks for the feedback @andysim I have made the changes that you suggested and I think its ready to be merged now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/670#issuecomment-290947009:15,feedback,feedback,15,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290947009,1,['feedback'],['feedback']
Usability,"Thanks for the feedback @maxscheurer , @loriab and @susilehtola ! I've tried to make the suggested changes in 3850718.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2032#issuecomment-727209151:15,feedback,feedback,15,https://psicode.org,https://github.com/psi4/psi4/pull/2032#issuecomment-727209151,1,['feedback'],['feedback']
Usability,Thanks for the feedback! I'll make the edits this afternoon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135#issuecomment-412893719:15,feedback,feedback,15,https://psicode.org,https://github.com/psi4/psi4/pull/1135#issuecomment-412893719,1,['feedback'],['feedback']
Usability,Thanks for the feedback! We are now re-running the calculation with Psi4 version 1.4. We gave the calculation 360GB of memory. It was run on an empty machine with 1.3 TBs of memory. The calculation does not have that many atomic orbitals (I think the number you cited @susilehtola is the auxilliary basis):; ```; Blend: AUG-CC-PVDZ + CC-PVDZ; Number of shells: 6379; Number of basis function: 12761; Number of Cartesian functions: 13293; Spherical Harmonics?: true; Max angular momentum: 2; ```. We have also run this calculation (with a conventional HF algorithm) using a development version of the eT program. It spends 15h in total and reaches a maximum memory usage of 84GB. The size of one one-electron matrix should be about 1.3 GB and each diagonalization takes approximately 150 seconds. These timings are with 44 threads.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-911486390:15,feedback,feedback,15,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911486390,1,['feedback'],['feedback']
Usability,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:15,feedback,feedback,15,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520,1,['feedback'],['feedback']
Usability,"Thanks for the feedback, @loriab!. LGPL is good from my perspective.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297996300:15,feedback,feedback,15,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297996300,1,['feedback'],['feedback']
Usability,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-35465591:15,feedback,feedback,15,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591,1,['feedback'],['feedback']
Usability,"Thanks for the feedback, all. I agree that we can recommend people launch a PR early on, and only when it's marked as ready to go will it be pulled in. To that end, I'll mess with the [new PR templates](https://github.com/blog/2111-issue-and-pull-request-templates) that GitHub just launched; a little checkbox would be a nice, clean solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-186988254:15,feedback,feedback,15,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-186988254,1,['feedback'],['feedback']
Usability,"Thanks for the helpful feedback. I've implemented the driver code, but haven't checked it in yet. I'm battling a small issue with non C1 calculations, but it should be easy to fix. I've made the test a little prettier too, but wasn't aware of `compare_arrays` playing nicely with numpy arrays, so thanks for the info. Also, the `0xF` that I mentioned in my chat with @loriab should be `0xFF` to get all irreps of the transformation matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230664882:23,feedback,feedback,23,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230664882,1,['feedback'],['feedback']
Usability,"Thanks for the investigation!. Am I clear to remove dead code in `psimrcc` so we have less to maintain, or do you want it kept around in case somebody decides to pick up?. If you want dead code removed, be warned that all of `MP2_CCSD` seems to be dead code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-621299693:36,clear,clear,36,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-621299693,1,['clear'],['clear']
Usability,"Thanks for the patch. The [Linux man page](https://man7.org/linux/man-pages/man2/gethostname.2.html) states that; > SUSv2 guarantees that ""Host names are limited to 255 bytes"". [On Windows the maximum length is 256 bytes](https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-gethostname). Also one can remove some of the hard-coding. I will file a PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3043#issuecomment-1704340967:230,learn,learn,230,https://psicode.org,https://github.com/psi4/psi4/pull/3043#issuecomment-1704340967,1,['learn'],['learn']
Usability,"Thanks for the quick answer that is helpful. We recently switched all our internal codebase to conda-forge only since mixing default/anaconda and conda-forge were creating an infinite list of either dep solving issues or symbol errors. I still tried to add `anaconda::intel-openmp` or simply the `anaconda` channel to see if I could get it to work for this simple env at least but I got another dep issue: `package psi4-1.6+77475b5-py39hceaf722_0 requires libxc 5.1.5 h84b9e52_1, but none of the providers can be installed`. If you haven't built psi4 from conda-forge but with defaults I am not surprised I am having this kind of issues. Hopefully psi4 will hit conda forge soon xD. Thanks again (feel free to close)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164884983:285,simpl,simply,285,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164884983,2,['simpl'],"['simple', 'simply']"
Usability,"Thanks for the quick update! I did try a new conda environment and ran into the same problem, but I had a hunch conda might be using cached packages and I couldn't remember the command to clear them, so I tried using `python=3.7` and that works fine!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1984#issuecomment-678794270:188,clear,clear,188,https://psicode.org,https://github.com/psi4/psi4/issues/1984#issuecomment-678794270,1,['clear'],['clear']
Usability,"Thanks for the rapid response, @robashaw. I have no doubts about the correctness of the code - it's something wrong with my implementation for sure. The biggest mystery was really the nonzero entries, so I'm glad that has a simple explanation. I'll double check the normalization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802969261:224,simpl,simple,224,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802969261,1,['simpl'],['simple']
Usability,"Thanks for the report. Just to be clear, the stable release psi v1.3.2 (`-c psi4`) isn't expected to be compatible with the latest v2rdm from `-c psi4/label/dev` which has build version (can see in `conda list`) that ends in `_11`. Instead, it should be compatible with the latest v2rdm installable from `-c psi4` which ends in `_6`. Could you be trying to mix conda channel labels?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1775#issuecomment-570012416:34,clear,clear,34,https://psicode.org,https://github.com/psi4/psi4/issues/1775#issuecomment-570012416,1,['clear'],['clear']
Usability,"Thanks for the report. When I put together the first version of the FCHK writer, [I accounted for](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/writer.cc#L395-L472) the fact that Psi4 uses the CCA standard, but these normalizations didn't get applied to the Molden writer it seems. This would be a very good issue to tackle for anybody looking for a good beginner project; the comments in the FCHK writer should serve as a useful guide and I'd be very happy to consult. If there are no volunteers in a week, I'll apply the changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-665027518:449,guid,guide,449,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665027518,1,['guid'],['guide']
Usability,Thanks for the suggestion. As a first pass this sounds great and I don’t think anyone else is working on it currently. I agree that OEProp should be a bit more straightforward about the output. Let me think on this a bit and perhaps source some other feedback. . Thanks for delving into this!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116#issuecomment-410090225:251,feedback,feedback,251,https://psicode.org,https://github.com/psi4/psi4/issues/1116#issuecomment-410090225,1,['feedback'],['feedback']
Usability,Thanks for those extra points - really good to know. On the second point there I was referring to the installer release - does that not create a new installation (hence the lines to alter the bashrc etc in the installation commands)? [I understand my original post was ambiguous/as clear as mud],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824:282,clear,clear,282,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824,1,['clear'],['clear']
Usability,"Thanks for your comments. I've changed `schedule(dynamic)` to `schedule(guided)` in the OpenMP loop.; I think @TiborGY is right that there is false sharing. I changed the code to create a copy of the output matrix `V_charge` for each thread and then sum them at the end. New timings are:. Cores | New code, no charges | New code, with charges; ---- | ---- | ----; 1 | 1.00 | 1.00; 2 | 1.67 | 1.29; 4 | 2.72 | 2.18; 8 | 3.92 | 3.57; 16 | 4.87 | 5.04; 32 | 5.80 | 7.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401:72,guid,guided,72,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401,1,['guid'],['guided']
Usability,"Thanks for your interest and the offer, @aizvorski. Looking back over this, the necessary QCEngine has now been released, so it looks like my first steps are updating that CI and limiting Libxc to v6 so the functional definitions can be simplified. Certainly intermolecular tests are desirable. There's some ref values here http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/functional/r2SCAN-3c.html but largely they need hunting down in either papers or an independent implementation. I like S22 but anything independent will do. Then Susi had some basis set comments that I haven't looked into yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854:237,simpl,simplified,237,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854,1,['simpl'],['simplified']
Usability,"Thanks for your patience with the late response. Take this especially simple example with DF-OMP2; ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```. I have not found any alteration of `hess_type` lets me converge the maximum MO gradient below 1e-4. I am attempting to verify the correctness of my Psi4Numpy-type implementation of DF-OMP2, which converges to `-74.698372226179` in only 5 iterations using the exact MO hessian. This disagrees with Psi in the eighth decimal place, but the Psi answer's MO gradient is not adequately converged to determine if this is an error in my code. I have attempted swapping my guess orbitals for a few systems, and I have not once found that helpful in getting the MO gradient well converged. I'll be able to post some non-toy examples sometime in January.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1371#issuecomment-449754680:70,simpl,simple,70,https://psicode.org,https://github.com/psi4/psi4/issues/1371#issuecomment-449754680,1,['simpl'],['simple']
Usability,"Thanks for your work.; > * Do you want REMP controlled by `mp_type` (covers all MPn > 2 and ZAPT) or `cc_type` (covers CEPA and CC)? Either is sensible, so your call. Actually not so easy :smile:, as it is a blend of MP and CEPA. But as it is in the occ/dfocc module, i'll vote for `cc_type` for the moment. > * Any need to future-proof QCVariables with `REMP2` (or `REMP2,3`!)?. Currently not, it is not entirely clear whether and how this project is continued. 3rd order might come, but there are no concrete plans.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1198920727:414,clear,clear,414,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1198920727,1,['clear'],['clear']
Usability,"Thanks so much for taking the time to look at this, @robashaw, and for the Libint2 struggles - it's quite a beast that we're only just learning to tame on this end. We have conda packages for some platforms and I think the plan it so have them for all platforms in the long run, but thanks for persevering and getting it compiled locally. The +2 that's present in my version is the result of my desperate hack to try and get things to match, so I'll make sure I change that. I wasn't aware of the the way things are grouped in the new code, so I'll make that change also. I think that using the centre to identify common terms like a very good solution, and you don't need to worry about writing any new type1/type2 classes as far as I'm concerned. Thanks again for your time - I would surely be floundering for the next few weeks without your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803983014:135,learn,learning,135,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803983014,1,['learn'],['learning']
Usability,Thanks to everyone for their feedback. I put all this on the 1.0 Release Notes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232776501:29,feedback,feedback,29,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232776501,1,['feedback'],['feedback']
Usability,"Thanks, @VHchavez, that'd be a great help. I think PsiAPI is the better framework to describe more advanced topics like wfn. (The exception is the two mirrored tutorials in PSIthon and PsiAPI that we try to keep in sync.) Topics include how to get wfn, things on wfn, things not on wfn (e.g., amplitudes in most cases), when wfn might be inconsistent (energy is mp2, while orbitals are scf), numpy serialization (python_helpers.py), schema serialization (schema_wrapper.py), etc. Another thing is feel free to be more of a clearinghouse where you collect links to the p4n tutorial, the serialization code, the psi4.core.Wavefunction API docs, various test cases that use things off the wfn. All those other places are autogen or tested, so are a better place than docs for big code snippets. And folks interested in wfn are usually able and willing to read python code if directed, just not willing to sift through 1M lines to find it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121:523,clear,clearinghouse,523,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121,1,['clear'],['clearinghouse']
Usability,"Thanks, I think it is a lot clearer now that you are getting the right answer. Can you post a `(Q, 5)` as well for completeness and to double check these things are converging well (no need to add it to the test).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042#issuecomment-433444074:28,clear,clearer,28,https://psicode.org,https://github.com/psi4/psi4/pull/1042#issuecomment-433444074,1,['clear'],['clearer']
Usability,"Thanks, yes, that link is a little clearer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/228#issuecomment-177008536:35,clear,clearer,35,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-177008536,1,['clear'],['clearer']
Usability,Thanks. Clear to merge once tests re-pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883460170:8,Clear,Clear,8,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883460170,1,['Clear'],['Clear']
Usability,That loop looks about as simple as it gets. What kills me is the loop structure ~10 lines above is nearly identical. Any error message on the crash?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368927971:25,simpl,simple,25,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368927971,1,['simpl'],['simple']
Usability,"That would be an improvement? I'd need to look at `libdisp` to see if we can remove it more aggressively, but I know for sure that taking it out of `dfmp2` is a fairly simple refactor. And of course, I can rearrange `dct`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870588844:168,simpl,simple,168,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870588844,1,['simpl'],['simple']
Usability,"That's a good idea, Peter. As far as I know, the XML stuff is only for the high level API, which we are not using. We still parse the basis sets with the same parser and use the same internal data structures - there's just a simple conversion to the library's data structures and then they are handed off. So your concern about duplicate basis set libraries is not a concern, but it would be nice to be able to disable the high level API at compile time, to remove the XML dependency. It's not a huge problem if not - the XML lib is easily obtained from conda forge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-804509150:225,simpl,simple,225,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-804509150,1,['simpl'],['simple']
Usability,"That's clearer, thank you. Given `pytests/test-dft-benchmarks.py`, I don't think that running all DFT functionals on H2+ adds much, but as long as the test is quick, I wouldn't be opposed to somebody adding it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2371#issuecomment-986991051:7,clear,clearer,7,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986991051,1,['clear'],['clearer']
Usability,"That's much clearer, thank you. The syntax seems good to me, but I vote for single access / multi storage. That prevents the syntax from getting unwieldy if we decide we need variables of types other than float and array. My main reason is that having different accessors feels like a clunky interface to me, especially for PsiAPI. Variable getting in PsiAPI should treat types like Python does, not C++.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485:12,clear,clearer,12,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485,1,['clear'],['clearer']
Usability,"The ""multi"" mode should be considered as experimental (obviously). It has not been much tested. I have hoped to return to this code in the future, as I think it could develop into something very nice, but alas I've been sidetracked. The 'atoms' not in the fragment are simply points in space as defined by linear combinations of atomic positions. So they are pseudo-atoms used to define the interfragment coordinates. As far as linear bends go, I bet the problem is the code is hardwired to expect no more than 6 interfragment coordinates, and with linear bends there could be more than 6. That probably never even occurred to me. So the code could be fixed to support this, but I don't think it is a small change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-295397426:269,simpl,simply,269,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295397426,1,['simpl'],['simply']
Usability,"The Azure build log not available, so I can't see its exact problem, but I recall Windows to have very strict ideas about file handlers and closing files. So while I agree that `with open` constructs are better than `open`/`close`, I think go with the simple solution that pleases Windows. Plus, I hope to retire this function in the next few months when we switch over to the new MolSSI BSE. Thanks for following up on the slack question/fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1687#issuecomment-518364448:252,simpl,simple,252,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-518364448,1,['simpl'],['simple']
Usability,"The CD test passes, so we're clear to merge once pending reviews are in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1809#issuecomment-592153927:29,clear,clear,29,https://psicode.org,https://github.com/psi4/psi4/pull/1809#issuecomment-592153927,1,['clear'],['clear']
Usability,The DFT failures are almost certainly because of Gau2Grid using the wrong ordering convention. Thankfully [CCA is supported](https://github.com/dgasmith/gau2grid/blob/master/docs/source/order.rst#spherical-order) so it should be fixable by a simple reconfiguration.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537#issuecomment-1092760393:242,simpl,simple,242,https://psicode.org,https://github.com/psi4/psi4/pull/2537#issuecomment-1092760393,1,['simpl'],['simple']
Usability,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/628#issuecomment-282102859:36,simpl,simply,36,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859,1,['simpl'],['simply']
Usability,"The MintsHelper functions for the one-electron integrals automatically assumes no symmetry if two basis sets are given, even if they are the same. Changes to the code since Libint1 have made it so the one_body_ao_computer runs off shellpairs in filling the returned matrix so symmetry is run even though its set to false in the function. I have included a simple fix to this in my PR #2982 , I’m just waiting for review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2985#issuecomment-1590021130:356,simpl,simple,356,https://psicode.org,https://github.com/psi4/psi4/issues/2985#issuecomment-1590021130,1,['simpl'],['simple']
Usability,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2209:503,simpl,simple,503,https://psicode.org,https://github.com/psi4/psi4/issues/2209,1,['simpl'],['simple']
Usability,"The TD-SCF code seems to work pretty well and comparably with other codes but the current level of output that appears in the output file by default is pretty minimal (energies, symmetries, oscillator strengths, etc.). A lot more info is available through various variables but they are pretty obscure and not the easiest to use. After a brief discussion on the forum [forum](http://forum.psicode.org/t/td-scf-excited-state-densities-and-or-contributing-excitations-available-yet/2109) I was encouraged to add this as a github issue. I'm happy to add these additions and, after a fair bit of fiddling, I think I have it mostly sussed. (And it's been a good learning experience: digging into RPA and TDA literature to some extent!). I have a few additions to scf_response.py to output the set of TDM vectors and the most important excitations (and deexcitations) contributing to each excited state, and I will submit a pull request once I've cleaned it up a bit. However it currently only works for C1, i.e no symmetry. One thing I have yet to get my head around is how to handle X and Y when symmetry is involved: comparing a calculation with C1 point group with the same molecule but using a higher point group, I can see the same coefficients within the sub-matrices for the different irreducible representations but I can't see how to unpick something like an ""A -> B"" single excitation that sees to appear only in the A representation sub-matrix. (If that makes sense!)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2153:657,learn,learning,657,https://psicode.org,https://github.com/psi4/psi4/issues/2153,1,['learn'],['learning']
Usability,"The Win failures are the pydantic 1.10.7 + typing extensions 4.6 we were seeing yesterday. It should have cleared up, some I'm retriggering one to check.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967#issuecomment-1561294933:106,clear,cleared,106,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1561294933,1,['clear'],['cleared']
Usability,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83124188:269,simpl,simply,269,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188,2,['simpl'],['simply']
Usability,"The basisset class states that the unique contraction coefficients are normalized; https://github.com/psi4/psi4/blob/b5f5dea5cc34e51f9b5e3796d9a8eca5e1cb14c2/psi4/src/psi4/libmints/basisset.h#L154. But, what does this really mean? That the contraction is normalized, or that the contraction coefficients are in terms of normalized Gaussian primitives? This should be made clearer in the source.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3038:372,clear,clearer,372,https://psicode.org,https://github.com/psi4/psi4/issues/3038,1,['clear'],['clearer']
Usability,"The big picture purpose of this PR is not clear to me. I understand that bullet point 4 is test coverage. Are the other three bullet points changing an interface, adding functionality, or pure code reorganization?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-919135259:42,clear,clear,42,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-919135259,1,['clear'],['clear']
Usability,"The biggest change between boost::mpi and normal MPI is the lack of templated calls. In normal MPI you always need to specify the type of the data you're passing to MPI, but aside from that you're right it's a pretty simple change between the two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248340701:217,simpl,simple,217,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248340701,1,['simpl'],['simple']
Usability,"The build matrix will undoubtedly grow with time (python 3, OS X, etc). I think we are at least starting with room to grow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182966941:22,undo,undoubtedly,22,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182966941,1,['undo'],['undoubtedly']
Usability,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:1106,Clear,Clearly,1106,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,1,['Clear'],['Clearly']
Usability,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-232996171:955,guid,guideline,955,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171,1,['guid'],['guideline']
Usability,"The code samples on the [Interface to NumPy page of the documentation](https://psicode.org/psi4manual/master/numpy.html) do not currently run. A forum report says that at the least, `psi4.Matrix` needs to be replaced with `psi4.core.Matrix`. Somebody should check that all the code on that page actually runs, and that it's accessible to non-experts. I've had to link a couple forum users to that page lately. This is a great project for a new developer who wants to learn the fundamentals of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087:467,learn,learn,467,https://psicode.org,https://github.com/psi4/psi4/issues/2087,1,['learn'],['learn']
Usability,"The command is `set guess READ`, so nothing is passed in. You would need to change the command to accept a file line. Also, be careful as I believe other areas manually append the PID, you will have to check those as well. You might want to check with others before changing this functionality. The trivial quick fix is to simply name your molecules something unique.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548#issuecomment-266895690:323,simpl,simply,323,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266895690,1,['simpl'],['simply']
Usability,"The community feedback for the GH ""merge queue"" beta is strongly pushing for different sets of ""required"" checks btwn PR and merge-queue into master. Hopefully that gets enacted, then I think the latter would be an excellent occasion to run full tests on local-hosted resources.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434:14,feedback,feedback,14,https://psicode.org,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434,1,['feedback'],['feedback']
Usability,"The current implementation of Mura-Knowles quadrature in Psi4 uses trapezoidal quadrature nodes.; https://github.com/psi4/psi4/blob/f7f9352b2a45f07bcaec112106065bce9ab9ebb9/psi4/src/psi4/libfock/cubature.cc#L2402. According to [Molpro's documentation](https://www.molpro.net/info/2015.1/doc/manual/node193.html), which uses Mura-Knowles quadrature by default, the quadrature employs ""simple Gauss quadrature""; that is, *not* trapezoidal quadrature. [The paper by Gill and Chien](https://doi.org/10.1002/jcc.10211) presents the rule as employing trapezoidal quadrature. [The original paper by Mura and Knowles](https://doi.org/10.1063/1.471749) isn't clear on which quadrature scheme it's supposed to use. I'm not sure if this demands (immediate) action, but thought it would be good to document the issue.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2602:384,simpl,simple,384,https://psicode.org,https://github.com/psi4/psi4/issues/2602,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"The direct link was initially problematic for me, but no longer. I suspect a DNS server got compromised, it was taken down, and now you're dealing with having to wait for the malicious information to clear out of all the various caches...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210019282:200,clear,clear,200,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210019282,1,['clear'],['clear']
Usability,The does-your-PR-break-the-docs and archive-a-tarball-of-your-PRs-docs-for-you-to-check-offline aspects of this PR are long fulfilled. The let-netlify-build-you-a-website-preview-of-your-PRs-docs and have-bot-push-updates-of-samples-to-your-PR aspects are complicated by security and by people having to understand why they can't simple (not force) push to their own PR branches. I don't think these latter aspects are worth the hassle.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568:330,simpl,simple,330,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568,1,['simpl'],['simple']
Usability,"The following command fails for me on Mac: `pytest test_detci_opdm.py test_molden_writer.py::test_H2O_molden[orbso_detci]` as the CI for molden test fails to converge on Mac with current master. The test passes when `test_detci_opdm.py` is removed. I've attached outputs from the failing Molden tests in both cases. Options appear the same. The warning ""(H0block_setup): Can't find CI block!"" appears in both files but is clearly suspicious. The ""H0 block eigenvalue"" is the first iteration energy in the correct output, but not in the buggy output. [errored_case.output.log](https://github.com/psi4/psi4/files/8952917/errored_case.output.log); [correct.output.log](https://github.com/psi4/psi4/files/8952926/correct.output.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2618:422,clear,clearly,422,https://psicode.org,https://github.com/psi4/psi4/issues/2618,1,['clear'],['clearly']
Usability,"The following input file; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set solver_precondition subspace; set solver_n_guess 3. gradient('mp2/cc-pvdz'); ```; segfaults due to a bad access exception. While the segfault occurred on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L290), the real problem is earlier. The loop structure [assumes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L280-L285) that `x_` and `b_` have the same number of elements. But the last method we ran [was `setup`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L163-L164), which [clears `x_`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L276). Even then, `setup` appears to have its own, unrelated problem. The preconditioner submatrix `A_` is [populated using the results of a `products_x()` call](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L259-L272). But `x_` [consists of zero vectors](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L251), so the submatrix guess procedure is just an overcomplicated way to write zero at present. That is probably very bad for the algorithm. Making matters even worse, I have not been able to find a standard conjugate gradients preconditioner with a name similar to ""SUBSPACE,"" so I cannot figure out how this algorithm was supposed to work. In short, this code is broken, and I would say beyond repair. Can I eliminate all the code for the ""SUBSPACE"" preconditioner from the `CGRSolver`? We'd just fall back to the ""JACOBI"" preconditioner, which is the default anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1918:654,clear,clears,654,https://psicode.org,https://github.com/psi4/psi4/issues/1918,1,['clear'],['clears']
Usability,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2004:281,Simpl,Simply,281,https://psicode.org,https://github.com/psi4/psi4/issues/2004,1,['Simpl'],['Simply']
Usability,"The frozen orbitals are computed once by helper functions and then saved. You should never have to touch these. As far as I can tell, if you simply set frozen orbitals your code should work. Your error shows a SCF issue, which I cannot reproduce in the current master. Ill probably need a backtrace to figure it out. Also, please label all timers with the CIWave prefix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-261274886:141,simpl,simply,141,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261274886,1,['simpl'],['simply']
Usability,"The global `_default_psio_manager_` shared_ptr can destruct; before Process::Environment. However, some destructors called; from Process::Environment may require it. So have Process::Environment; keep a copy of the shared_ptr. ## Description; Some tasks being run by QCArchive/QCEngine would hang indefinitely, even though the calculation finished. GDB showed memory corruption when destructing the Process::Environment. The cause was related to the destructor for DIISManager calling PSIO::close. https://github.com/psi4/psi4/blob/8d1a8787504a481f61956fb22b282b6f30005ebc/psi4/src/psi4/libpsio/close.cc#L82 . `PSIOManager::shared_object()` returns a copy of the global shared_ptr `_default_psio_manager_`. The main issue is that `_default_psio_manager_` can be destructed before Process::Environment, as order of destruction is not well-defined for globals. The easiest solution is for Process::Environment to hold a copy of the shared_ptr for the global psio manager, even if it is not used. This prevents premature destruction. How this issue caused indefinite hanging/locking isn't very clear, but crazy stuff can happen with memory corruptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Fix crashing/hanging in certain instances due to using already destructed global objects. ## Checklist; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1933:1091,clear,clear,1091,https://psicode.org,https://github.com/psi4/psi4/pull/1933,1,['clear'],['clear']
Usability,"The gradient rms is huge. In fact, the geometry clearly isn't at the minimum - when optimised with `g_convergence gau_verytight`, the bond length is a lot different. In my defense, it's the only geometry I have not re-optimised, carried over from the original test. I've modified the test case. Is such a large discrepancy in RMS of the gradient (23%), just due to the number of cores, something worrying (even though it's not at the minimum)? Or is that to be expected, and I should just close this issue?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1295#issuecomment-430764383:48,clear,clearly,48,https://psicode.org,https://github.com/psi4/psi4/issues/1295#issuecomment-430764383,1,['clear'],['clearly']
Usability,"The handling for the user should be the same as for -D3/D3BJ etc. Add it to the functional name and psi4 handles finding the correct parameters or throws an error. I haven't gone through with it, but adding another case for the multiple -D options seems OK. So in the end the NL parameters are added to the list of D parameters here:; ```; dashcoeff = {; 'nl:{; 'tpss' : {nl_b: 1.23}; }; 'D2: ...; ```; [dashparam.py]( https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/dashparam.py; ); It could be an annoying extra case to avoid actually running dftd3, but the ""dash"" detection and general infrastructure is really nice. --; regarding doc, a simple link within http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation would probably suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348251623:651,simpl,simple,651,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348251623,1,['simpl'],['simple']
Usability,"The initialization code is pretty simple, however. One could just replace the `initialize_lebedev` function by an initializer list in https://github.com/psi4/psi4/blob/ac8f87a1dd3fdda2aabc3318713d6e5ce00e2c70/psi4/src/psi4/libfock/cubature.cc#L5065; This would also avoid the need for the mutexes. . The code is hacky also elsewhere; `lebedev_error` duplicates the same information. For what it's worth, I will be developing a general C++ Becke quadrature library that would eliminate these parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268606002:34,simpl,simple,34,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268606002,1,['simpl'],['simple']
Usability,"The input file:. ```; memory 1 Gb. molecule NO; {; 1 1; N; O 1 R; units au; }. set {; guess read. diag_method rsp. VECS_WRITE true; NUM_VECS_WRITE 1. basis sto-3g; }. NO.R = 2. energy('scf'). NO.R = 50. energy('fci'). set {; diag_method sem; GUESS_VECTOR IMPORT; }. energy('fci'); ```. I first calculated the RHF solution at 2 Bohr and use it as seed for the solution at 50 Bohr. The first `energy('fci')` uses exact diagonalization and produces the correct energy `-127.1625943265614`. The second call to `energy('fci')` uses Davidson with as start guess the CI vector from the previous calculation. This should immediately convergence yet it finds a ground state energy of `-1527.1801524600446`. Clearly very far below the actual lowest eigenvalue. Something goes terrible wrong here. . Any ideas?. It also would be nice if the docs would mention that building the OPDM, etc doesn't work if you use `diag_method rsp`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175:698,Clear,Clearly,698,https://psicode.org,https://github.com/psi4/psi4/issues/175,1,['Clear'],['Clearly']
Usability,"The newest release of ADF implements something called ""MESA"", which has been developed in http://dx.doi.org/10.14288/1.0372885 (pdf available at https://www.scm.com/wp-content/uploads/Thesis-MiguelGarciaChavez.pdf). It's basically a combination of several individual acceleration methods (in ADF: ADIIS, fDIIS, LISTb, LISTf, LISTi, and SDIIS), and the way it works is simply by forming trials of all the methods, and picking the one for which the extrapolated Fock matrix results in the least change of the density from the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-565805641:368,simpl,simply,368,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-565805641,1,['simpl'],['simply']
Usability,"The not recognizing template brackets is a language feature, not part of; the library like the tuple. I bet if you print the compile command the; flag Andy told you to add is missing. Assuming that is the case, the; million dollar question is why? I have guesses from insight learned in the; CMake rewrite. Assuming it is one of those guesses, the problem should go; away with the rewrite. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 15, 2016 12:14 AM, ""Andy Simmonett"" notifications@github.com wrote:. > How about adding -std=c++11 to the --extra-cxx-flags argument to setup; > (or -DEXTRA_CXX_FLAGS if you're calling CMake directly)?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/444#issuecomment-232855963, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiztFqbgAKeEx-gdWJsatSyH76QzWks5qVwkfgaJpZM4JL6Xl; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232946325:276,learn,learned,276,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232946325,1,['learn'],['learned']
Usability,"The numbers printed by the sointegral plugin are not the symmetry blocked; indices but the absolute indices (non-symmetry blocked). The order of the; absolute indices come directly from the basis set. For your input file the; the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; A1 (1s on carbon), so by symmetry this integral does not exist. The; transformation matrix for obtaining symmetry blocked integrals is obtained; with:. // prints the transformation matrix.; soBasis->petite_list()->sotoao()->print();. What you probably want to look into is printing the {p,q,r,s}irrep and; {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; post-symmetry-blocking-transformation. You're right, the difference between absolute and symmetry blocked indices; could be better explained. With respect to two-electron integrals, Psi; never reports integrals of value zero to prevent wasting CPU cycles, again; this could be made clearer. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com wrote:. > OK, found it. The overlap is zero for those orbitals.; > ; > But I was under the impression that sointegrals gave me all unique; > integrals because of symmetry, including those that are zero due to the; > overlap. This should be made clearer in the docs.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/68#issuecomment-73899555:966,clear,clearer,966,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73899555,2,['clear'],['clearer']
Usability,"The other point I missed the first time was when you said `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` was the _primary_ feature. One word, but an important one. For future, it's clearer to put the unambiguous statement of the primary feature before technical notes (like on `clang-format` and options) when writing the PR description. I was expecting the notes to be in decreasing order of importance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336#issuecomment-952751554:176,clear,clearer,176,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952751554,1,['clear'],['clearer']
Usability,"The potential gradient function should be usable to compute gradients on point charges, since the gradient for a point charge is simply the charge multiplied by the potential gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210:42,usab,usable,42,https://psicode.org,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210,2,"['simpl', 'usab']","['simply', 'usable']"
Usability,"The problem came about just because, in parallel, I'm (i) learning to build Mac conda packages for the half-dozen add-ons, (ii) bumping all the add-ons to their latest tag, (iii) determining a good package set (boost, libgcc, etc.) for a full-featured psi4 Mac binary for both users and developers, and (iv) trying out some new conda packaging and distribution tools. The conda package _does_ point to a git tag (hopefully the same git tag as in psi4's externalproject), but I had bumped the conda tag to `1.1.2`, got the conda pkg working, then fixed up psi4 to work with the detected conda pkg. Unfortunately, by the time I worked through some library issues and tried to build pcmsolver internally to psi4, with the `int` fix, I had forgotten the tagging details, leading to this whole mistaken first place. :-). So yes, in future when someone informs me of a new version or bumps the externalproject tag, I'll bump the conda tags in sync.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-226555751:58,learn,learning,58,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226555751,1,['learn'],['learning']
Usability,"The problem first appeared [here](https://travis-ci.org/psi4/psi4public/builds/106133128), and it affects every clang build on the Travis machines. I did some hacking of the setup, to run cc1 through Valgrind [here](https://travis-ci.org/andysim/psi4public), but it's showing an illegal instruction. That could be a genuine illegal instruction being generated (how, I have no idea), or just a red herring due to Valgrind not recognizing one of the instructions generated. The fact that none of us can reproduce it is mystifying to me. That commit simply pulled in the new cctransort code from the private repo into master. I don't believe there's anything wrong with the cctransort code, but I'd like to be able to depend on the CI tests again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-180503623:547,simpl,simply,547,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180503623,1,['simpl'],['simply']
Usability,"The problem here is related to the screening setup. The integral objects now compute diagonal elements of the integrals for screening purposes. When all four basis sets are the same, it's clear how this should be done. When there are different basis sets in the bra and ket, it's not obvious but it's also not a use case we had ever encountered so I chose to just raise an error. I think the best (and cleanest) approach for what you're trying to do is to make a basis set for the supermolecule, and have nested loops over the appropriate shells for molecules A and B. This is how the same problem is handled in SAPT and friends. If the two basis sets are really needed, we can revisit the way the Schwarz inequality list is constructed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439#issuecomment-1040499590:188,clear,clear,188,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1040499590,1,['clear'],['clear']
Usability,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:360,feedback,feedback,360,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['feedback'],['feedback']
Usability,"The pybind is fine. To be clear, the last commit introduced a major change in the algorithm. In the old code, we would use incremental Fock for all iterations until we hit some convergence threshold. In the new code, we use incremental Fock for all iterations except once every 5 or so. Please rerun the timing tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-940187631:26,clear,clear,26,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-940187631,1,['clear'],['clear']
Usability,"The scope of the PR changed. Took longer than expected, but hopefully does help to prevent users from getting a wrong FCHK file. Ready for a first round of review/feedback, i think. I will still need to run auto-formatting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-627286675:163,feedback,feedback,163,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-627286675,1,['feedback'],['feedback']
Usability,"The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511:204,clear,clear,204,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511,1,['clear'],['clear']
Usability,"The summary output of the SAPT(DFT) module correctly converts to mH and kcal/mol, but does not convert to kJ/mol. . The fix seems to be simple: In the file lib/psi4/driver/procrouting/sapt/sapt_util.py; change the third conversion constant to constants.hartree2kJmol.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/910:136,simpl,simple,136,https://psicode.org,https://github.com/psi4/psi4/issues/910,1,['simpl'],['simple']
Usability,"The timings were with the direct algorithm, although it looks like this will speed up PK too. Unfortunately CSAM only works for 4-index integrals; there's much less literature on screening with density fitting. On the bright side, CSAM outperforms QQR according to the paper (and is a lot simpler to implement), so that code might not need to be fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-457966230:289,simpl,simpler,289,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-457966230,1,['simpl'],['simpler']
Usability,"The two bottlenecks that you have identified are the computation of the ESP at the tesserae and then computing the contribution of the resulting charges back to the Fock matrix. Both terms use the exact same one-electron potential integrals, which are not very efficient in the current version and are computed in serial. The serial performance issue is addressed in #592, but we can probably do even more improvement of the OS recursions to speed up these one electron ints, whose cost is negligible in regular QM calcs. Unlike explicit water QM/MM runs, we can't really do much by way of screening here I don't think, but I haven't pursued that. A simple OpenMP parallelization will go a long we here, however. I'm also looking into how to implement ddCosmo as a backend; although PCMSolver is not the bottleneck here, it'd be really helpful to have analytic gradients with implicit solvent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742:650,simpl,simple,650,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742,1,['simpl'],['simple']
Usability,"The two codes agree with each other, once you correct for the fact that they store determinants differently, creating a phase disagreement. Let's restrict ourselves to spatial orbitals 8 and 9 for simplicity.; You order orbitals as 8A 8B 9A 9B. Loop by spatial orbital, then by spin.; Psi orders orbitals as 8A 9A 8B 9B. Loop by spin, then by spatial orbital. Internally, Psi's FCI stores a string of alpha orbitals and then a string of beta orbitals. This is only possible because of this orbital ordering. So you say that 8A 9B and 8B 9A have opposite phases. Psi says that 8A 9B and 9A 8B have the same phases. Both are correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693713660:197,simpl,simplicity,197,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693713660,1,['simpl'],['simplicity']
Usability,"The`tu4-h2o-freq` also was also a victim of a merge problem. It needs `dertype=1` because the DZ basis has a fitting basis with _f_ orbitals. That means the Hessians require AM=5, so Travis gets upset. I guess the stderr messages aren't part of the log; do you think there's a simple fix for that, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144975:277,simpl,simple,277,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144975,1,['simpl'],['simple']
Usability,"There are some issues with the `liboptions` documentation. First, the source should mention that there's a whole page about the module in the docs. Most modules don't have their own page, so I completely missed it. Now for my more detailed grievances with the `liboptions` page:. I'm sure there are more grievances, but obvious ones:; - The overview uses the passive voice. ""The input is parsed for these options, and defaults are assigned for those keywords not specified by the user."" This would be much clearer written as ""When Psi parses the inputs, Psi assigns each option its user-specified value (if provided) and its default otherwise.""; - ""Array-type options are not available in python."" This is false.; - There's no mention of side effects of the getter functions. This was a major ""gotcha"" for me: getting an SCF option set that to be the active module and interfered with other modules.; - There's no mention of the currently active module mechanism. At all.; - Discussion about _when_ and _which_ options are added is vague. It sounds like the options object only has some options at a time, but it's not clear when these are added/removed.; - `read_globals` appears in a code snippet, but is not described.; - ""The way to do this is to isolate and nullify any changes to options made by the code, the difference between [a] and [c]. "" is unclear.; - ""C-side, there is no concern since options are essentially read-only within the modules."" This is false. DCT for sure changes options in the module.; - ""Py-side is another matter since the driver’s role is to take terse instructions from the user and translate those into instructions to the C++ modules, usually through manipulation of options."" This is vague. The previous two sentences being baffling doesn't help.; - ""In order to preserve effective definition [a]"" What does it mean to preserve a definition? ; - The paragraph containing that sentence needs to explain OptionState. Instead, that's done much later.; - The ""Reading O",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2405:506,clear,clearer,506,https://psicode.org,https://github.com/psi4/psi4/issues/2405,1,['clear'],['clearer']
Usability,"There are two problems now that I can see your code more closely. The minor one is that when you switched ```n``` and ```l```, you forgot to move the +2. But, you don't actually need that +2 anyway (libecpint and Psi4 use the same convention for values of ```n``` nowadays). Offending line is here:. https://github.com/andysim/psi4/blob/a6bc397b3ce31130bbef862fc993d11bf8c23afb/psi4/src/psi4/libmints/ecpint.cc#L678. The much bigger problem is that all the things you're passing to libecpint are getting handled as Type1 ECP integrals when they should be Type2. This is because the internal psi4 format is clearly to have the ECPs as separate angular momentum shells, but libecpint assumes that all the shells are in a single ECP object and the highest angular momentum one (as per convention) is the Type1 integral. . There are two possible solutions: make the ECP objects in the way that libecpint is expecting them (I've hacked this in to your code by checking whether the center changes), or I can add a Type1/Type2 flag to the libecpint::ECP object. I'd have to think about whether that would affect anything, but I don't think it would, and might be the more generally useful answer. . Anyway the good news is once I fixed these two things, everything agrees with the `native' results and those I get from the libecpint main API :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803769076:606,clear,clearly,606,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803769076,1,['clear'],['clearly']
Usability,"There have been reports of X2C not being well-behaved in the presence of linear dependencies. Calling on @fevangelista or @susilehtola to give details. Quoting Francesco from Slack:. > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2201:402,simpl,simpler,402,https://psicode.org,https://github.com/psi4/psi4/issues/2201,1,['simpl'],['simpler']
Usability,"There is a [forum](http://forum.psicode.org/). The [wiki itself](https://github.com/psi4/psi4/wiki) is newly defunct and needs some labels indicating this. Everything relevant to users (as opposed to some limited developer info that's still good) is now in the [build docs](http://psicode.org/psi4manual/master/build_faq.html). The docs themselves are actually user editable if you care to – there's a pencil in the upper left of the page (unless it's an autogenerated page like for options) that lets one edit, then guides into submitting the changes for review. You're absolutely right that this should be documented somewhere – it's on my todo list for Psi4 1.1. I'm sorry for your trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626#issuecomment-281193022:517,guid,guides,517,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281193022,1,['guid'],['guides']
Usability,"There is also a bit of weirdness in Schwarz screening of 3-center DF; integrals (mu nu|P), where currently the full triangle inequality is not; used, only the (mu nu | mu nu) bit [not including (P|P)]. I have been; thinking about tweaking how that is handled, it seems confusing. I'm not sure if INTS_TOLERANCE or Scharz screening threshold is more; clear. INTS_TOLERANCE makes it clear it has to do with integrals. On Tue, Jan 8, 2019 at 12:43 PM Susi Lehtola <notifications@github.com>; wrote:. > Psi4 reports the integral screening threshold in calculations as e.g.; >; > ==> DirectJK: Integral-Direct J/K Matrices <==; >; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > Integrals threads: 8; > Schwarz Cutoff: 1E-12; >; > but if you try to find this in the manual, you run out of luck: the only; > Schwarz related entry is SCHWARZ_CUTOFF in the CPHF section, and thereby; > setting SCHWARZ_CUTOFF to another value doesn't change the used screening; > threshold.; >; > Interestingly, it appears that the SCHWARZ_CUTOFFsetting isn't used even; > in the CPHF code, alike the DO_QQR_SIEVE setting.; >; > After some more digging, I realized that the two-electron integral; > threshold is called INTS_TOLERANCE in Psi4. I would propose; >; > - removing the unused SCHWARZ_CUTOFFand DO_QQR_SIEVE settings (maybe; > check here for any other obsoleted keywords as well) and; > - changing the 7 documentation strings of INTS_TOLERANCE to Schwarz; > screening threshold. Minimum absolute value below which two-electron; > integrals are neglected; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1466>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdo1QvUON56NgZTvvfllPZIG5vtzhks5vBNi6gaJpZM4Z19NP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1466#issuecomment-452421588:350,clear,clear,350,https://psicode.org,https://github.com/psi4/psi4/issues/1466#issuecomment-452421588,2,['clear'],['clear']
Usability,"There is no general copyright statement in the Beta5 source tree for the PSI4 source code proper, just the psirmrcc module (Evangelista/Simmonett), some libmints files (carried over from mpqc/libint), libsmartptr (Marcin Kalicinski?) and libscf_solver (Turney). I think it would be advisable to have a clear copyright statement, at least in the README or LICENSE file with the names of all the authors (or ""The PSI4 Developers"" or something). . The statment should include the years and the names of the copyright holders. The only thing which comes close it the WIREs journal reference output at the top of the PSI4 computational output.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/15:302,clear,clear,302,https://psicode.org,https://github.com/psi4/psi4/issues/15,1,['clear'],['clear']
Usability,"There was some discussion on coming up with a coding style guide for Psi4. I don't think the idea is that we reformat all of Psi, but if you are going to reformat a section you should *try* to adhere to the following. My personal `clang-format` settings for C++ are:; ```; {; ""BasedOnStyle"": ""Google"",; ""IndentWidth"": 4,; ""ColumnLimit"": 120,; }; ```. Personally, I feel fairly strongly about the 4 indent width, I like the Google style in general, and the column limit is sort of an arbitrary number. My YAPF setting for Python are:; ```; {; ""config"": {; ""COLUMN_LIMIT"": 119,; }; }; ```; I seem to recall there is a good reason that it's 119 not 120, but I cannot remember what that is for the life of me. Personally, not a huge fan of enforced style guides through hook mechanisms, but I can go with the flow on it. I mostly feel that being a consistent style is really nice to have, but is not required. And those hook warnings like `# noflakes...` is worse than having a style thats a little off, again, IMO. Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/752:59,guid,guide,59,https://psicode.org,https://github.com/psi4/psi4/issues/752,2,['guid'],"['guide', 'guides']"
Usability,"There's a bypass_scf=True argument to energy() that may help. Look in proc.py if I don't have the syntax quite right. . Sent from my iPhone. > On May 30, 2015, at 12:08 PM, wpoely86 notifications@github.com wrote:; > ; > It's not clear to me if it's possible to start from a previous calculated rhf result to do for example ccsd(t). Can this be done? If I keep the scratch dir, and use the -r parameters with guess read, it will start from the rhf solution of the previous run, but it will still do the rhf calculation and integral transformations. I would like it to directly start with the ccsd(t) calculation, and not redo the rhf calculation. Is this currently possible?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/102#issuecomment-107072181:230,clear,clear,230,https://psicode.org,https://github.com/psi4/psi4/issues/102#issuecomment-107072181,1,['clear'],['clear']
Usability,"There's also a lingering plan (perhaps for later this summer, when a few; other projects are finished) to write a GPLv2-licensed periodic HF integral; C-library in the Chan group: https://github.com/SebWouters/PauliNG.; The idea is to be a simple and lightweight library to provide integrals for; post-HF calculations in periodic systems. Currently, we use mainly VASP; here by fitting Gaussian ERI with a quadrature of plane waves. 2015-07-20 9:54 GMT-04:00 Ryan Richard notifications@github.com:. > It's on my todo list, but a long way from realization so it's not going to; > happen anytime soon. VASP and Crystal are the usual gotos for this sort of; > thing.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/151#issuecomment-122892690. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/151#issuecomment-122894706:240,simpl,simple,240,https://psicode.org,https://github.com/psi4/psi4/issues/151#issuecomment-122894706,1,['simpl'],['simple']
Usability,"These flags are set by the compiler packages, I think. They are to enable building your own conda packages IIRC.; But I also had cases where I wasn't aware of this and it severely messed up compilation of some unrelated programs that use plain Makefiles. I think cmake will largely ignore those flags for psi4. There are (de)activate scripts in `/env/<name>/etc/conda/(de)activate.d` responsible for setting these env. variables.; Not sure there are flags that turn them off, the last resort is to remove them. FWIW, building psi4 is also simple without the `psi4-dev` package. It's advantage is that it ensures compatible compilers, tooling and a couple of cmake flags. If you are knowledgable you can set them yourself. To compile against conda-provided mkl, libint2, etc the `psi4-dev` is not needed. The normal `psi4` package is enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684:539,simpl,simple,539,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684,1,['simpl'],['simple']
Usability,These guidelines seem clear enough to me. Thanks!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-185526548:6,guid,guidelines,6,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-185526548,2,"['clear', 'guid']","['clear', 'guidelines']"
Usability,"These tests are still failing with erd. Maybe I wasn't too clear before, but these are what fail when I set integral_package to erd in my psi4rc file. . 12 - cbs-xtpl-freq (Failed); 114 - dfccd-grad1 (Failed); 117 - dfccsd-grad1 (Failed); 122 - dfmp2-3 (Failed); 124 - dfmp2-grad1 (Failed); 125 - dfmp2-grad2 (Failed); 126 - dfmp2-grad3 (Failed); 127 - dfmp2-grad4 (Failed); 132 - dfomp2-grad1 (Failed); 133 - dfomp2-grad2 (Failed); 136 - dfomp3-grad1 (Failed); 137 - dfomp3-grad2 (Failed); 140 - dfomp2p5-grad1 (Failed); 141 - dfomp2p5-grad2 (Failed); 146 - dft-freq (Failed); 147 - dft-grad (Failed); 151 - dft1 (Failed); 152 - dft1-alt (Failed); 154 - dft3 (Failed); 157 - extern1 (Failed); 165 - fd-freq-energy-large (Failed); 168 - fd-gradient (Failed); 188 - mints9 (Failed); 196 - mp2-module (Failed); 229 - opt-lindep-change (Failed); 237 - opt6 (Failed); 238 - opt7 (Failed); 239 - opt8 (Failed); 240 - opt9 (Failed); 241 - opt11 (Failed); 242 - opt12 (Failed); 243 - opt13 (Timeout); 245 - opt-irc-1 (Failed); 246 - opt-irc-2 (Failed); 247 - opt_freeze_coords (Failed); 261 - pubchem1 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 272 - pywrap-db2 (Failed); 309 - tu3-h2o-opt (Failed); 310 - tu4-h2o-freq (Failed); 322 - cubeprop-esp (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-275696746:59,clear,clear,59,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275696746,1,['clear'],['clear']
Usability,"This PR 1) adds a slightly more user-friendly message to a possible exception raised in the F-SAPT post-analysis script and 2) makes the FISAPT_FSAPT_FILEPATH, FISAPT_FSSAPT_FILEPATH, and FISAPT_PLOT_FILEPATH options work without adding a '/' to the end of the option. . On 2), this option only worked properly if the '/' is appended to the end of the directory name (example: ""FISAPT_FSAPT_FILEPATH myfsapt/""), and this only works if done in a set block. Now, this way of setting the option will work, as well as ""FISAPT_FSAPT_FILEPATH myfsapt"" inside and outside of a set block. - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/679:32,user-friendly,user-friendly,32,https://psicode.org,https://github.com/psi4/psi4/pull/679,1,['user-friendly'],['user-friendly']
Usability,This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.; It is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723:302,guid,guides,302,https://psicode.org,https://github.com/psi4/psi4/pull/2723,2,['guid'],['guides']
Usability,"This PR contains the implementation of XDM-enabled density functional theory calculations in psi4. XDM is a dispersion correction in which the dispersion coefficients that enter the asymptotic dispersion formula are calculated post-SCF from the self-consistent electron density and kinetic energy density. XDM maintains the simplicity and accuracy of a damped asymptotic dispersion correction while, at the same time, it calculates the dispersion coefficients from the self-consistent wavefunction. . The XDM energy and gradient are calculated by the [postg](https://github.com/aoterodelaroza/postg) external program, to which the new code interfaces. The implementation is very similar to the way in which psi4 currently interfaces to gCP. In addition, a few XDM-enabled functionals are provided to facilitate its use. A few tests, samples, and documentation are also included in the package. That said, I recommend that you check the XDM/postg documentation meets psi4 standards as I have no way to verify what it looks like in HTML form.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699:324,simpl,simplicity,324,https://psicode.org,https://github.com/psi4/psi4/pull/1699,1,['simpl'],['simplicity']
Usability,"This PR is a good idea, but we just use python in so many different ways that it's risky w/o having OSes to test it on. OS packagers may just need to patch in python3. Leaving PR open for guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711:188,guid,guidance,188,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711,1,['guid'],['guidance']
Usability,"This PR is ready to be unblocked and reviewed. A test has been added. Frozen-core works as expected, that is, the number is unchanged (just like regular E(30)exch-ind). The numbers agree with the original paper. @jwaldrop107 - you might want to take a look and check if everything's still working in your hands. We had a very productive discussion with @CDSherrill @loriab @zachglick last week. We have some ideas how to make the SAPT workflows, including the stuff without the S^2 approximation, simpler and more consistent. We are also thinking of renaming all **Sinf** to **Sall**, but that's a story for a separate PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314#issuecomment-994198534:497,simpl,simpler,497,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-994198534,1,['simpl'],['simpler']
Usability,"This PR solves one clear lack-of-threading problem with MKL. But we've had hints of a more elusive one where threading-or-not depends on MKL library load order. Be on the looking for this. To check both threads issues, I've checked in a timings script (originally Daniel's) [here](https://raw.githubusercontent.com/loriab/psi4/b381e6c0865f3e47986044a409e4c7e7b1f21757/tests/python/threading/input.py) to compare p4 vs np threading and n1 vs nmax threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279194347:19,clear,clear,19,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279194347,1,['clear'],['clear']
Usability,This doesn't seem to be an issue per se. Do you have comments on this can be more clear? Without action items we should likely close this.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1370#issuecomment-443198119:82,clear,clear,82,https://psicode.org,https://github.com/psi4/psi4/issues/1370#issuecomment-443198119,1,['clear'],['clear']
Usability,"This has another annoying consequence, noted on a [forum topic](http://forum.psicode.org/t/problems-with-geometry-convergence-in-dihedral-scan/1808). When attempting the basis guess, it will attempt to read previous orbitals but not find them. The following appears in the output file.; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```; The use of core may be a very terrible choice indeed, which caused the issues in the forum topic. Here's a simplified example:; ```; molecule phenol {; 0 1; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. set {; basis cc-pvdz; }. set scf {; basis_guess true; maxiter 300 ; fail_on_maxiter false; }. dihedrals = [i for i in range(0,185, 5)] ; PES = []. for phi in dihedrals:; my_string = ""1 2 3 4 "" + str(phi); set optking geom_maxiter = 250 ; set opking opt_coordinates = cartesian; set optking fixed_dihedral = $my_string; print(phi); try:; E = optimize('scf'); print(E); PES.append((phi, E)) ; except SCFConvergenceError:; continue ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732:527,simpl,simplified,527,https://psicode.org,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732,1,['simpl'],['simplified']
Usability,"This is a Davidson error. Looks like as soon as the norm of the correction vector gets small enough an instability occurs causing a non-variational energy. Very hard to debug and/or fix. Dividing small numbers by small numbers is always tricky. If you are just after the energy (the only things the current CI code can do at the moment) the simplest option is to reduce your CI convergence threshold to something reasonable like `r_convergence 1.e-4` . You can also try setting `hd_avg hd_exact` in your settings. . Also, something like this really belongs on the [Psi forums](http://forum.psicode.org/latest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/448#issuecomment-235024888:341,simpl,simplest,341,https://psicode.org,https://github.com/psi4/psi4/issues/448#issuecomment-235024888,1,['simpl'],['simplest']
Usability,"This is a different error @ataube59. This is not a coded exception (planned fail) but a segmentation fault because of a bug. Those cannot be caught. The `optking` module responsible will be replaced with a python-based version ""soon"" (https://github.com/psi-rking/optking, already usable if you install it manually) where I think dimer optimisation should work better. Obligatory ping to @AlexHeide @psi-rking for a test case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-764476988:281,usab,usable,281,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-764476988,1,['usab'],['usable']
Usability,"This is a follow-up to #1608 (fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:725,clear,clear,725,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['clear'],['clear']
Usability,This is a little confusing to me. It looks like basisset.cc line 240 accounts for Z = 0 but then the example array in the documentation at read_options.cc line 126 seems to have the Z = 0 in it. Or the example array could be mistyped (H-Be is just four atoms while five zeros are given). Then the example input file has the Sb atom (Z = 51) but `core_policy[50]` is used. I suspect users will be confused by this. I'm not saying whether or not including Z=0 in the array is correct but documentation should be very clear.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667#issuecomment-1209526104:515,clear,clear,515,https://psicode.org,https://github.com/psi4/psi4/pull/2667#issuecomment-1209526104,1,['clear'],['clear']
Usability,"This is a trivial change that replaces `==` operator with `is` operator, following PEP 8 guideline:. > Comparisons to singletons like None should always be done with is or is not, never the equality operators. https://legacy.python.org/dev/peps/pep-0008/#programming-recommendations",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1321:89,guid,guideline,89,https://psicode.org,https://github.com/psi4/psi4/pull/1321,1,['guid'],['guideline']
Usability,This is already the case in `libxc_functionals.py`. This list simply needs an expansion I believe.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1597#issuecomment-482108276:62,simpl,simply,62,https://psicode.org,https://github.com/psi4/psi4/pull/1597#issuecomment-482108276,1,['simpl'],['simply']
Usability,"This is not ok. The SCF class header `hf.h` states; ```; /// List of external potentials to add to Fock matrix and updated at every iteration; /// e.g. PCM potential; std::vector<SharedMatrix> external_potentials_;; ```. Indeed, if you look at the SCF driver, this array gets populated at every iteration; ```; if core.get_option('SCF', 'PCM'):; calc_type = core.PCM.CalcType.Total; if core.get_option(""PCM"", ""PCM_SCF_TYPE"") == ""SEPARATE"":; calc_type = core.PCM.CalcType.NucAndEle; Dt = self.Da().clone(); Dt.add(self.Db()); upcm, Vpcm = self.get_PCM().compute_PCM_terms(Dt, calc_type); SCFE += upcm; self.push_back_external_potential(Vpcm); ```; which is why it is cleared at every iteration. The right way to do this is to add a definition of a persistent external potential, which gets summed in at every iteration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3228#issuecomment-2391567558:666,clear,cleared,666,https://psicode.org,https://github.com/psi4/psi4/pull/3228#issuecomment-2391567558,1,['clear'],['cleared']
Usability,"This is pretty simple, so merging. Docs-build tonight will validate harmlessness of removal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272#issuecomment-187516909:15,simpl,simple,15,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187516909,1,['simpl'],['simple']
Usability,"This is pure conjecture on my part, but I would assume that the bandwidth is limited by physical partitioning on the M1 Pro/Max. The CPU cluster probably does not have ""enough wires"" going to the memory controller to transfer 400 GB/s, so I would think fusing off a couple of cores in the GPU would not affect the CPU BW. Not sure about the Pro, if they just copy-pasted the CPU part, there is a chance the CPU could use all of the BW on that,. Edit: The undocumented math instructions I mentioned previously, are not executed by the CPU core, but separate SIMD coprocessors, which are technically not part of the CPU core, even though some caches are shared. But given how the big.LITTLE cores all share the ~1/2 BW limit, I doubt using those coprocessors would make much of a difference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956493258:455,undo,undocumented,455,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956493258,1,['undo'],['undocumented']
Usability,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/562:743,simpl,simpler,743,https://psicode.org,https://github.com/psi4/psi4/issues/562,1,['simpl'],['simpler']
Usability,"This is the list of issues tied into wavefunction_pass that should be cleared up before the 1.0 release.; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet (SCF methods can only take a molecule at the moment. `ref_wfn` supersedes `molecule` in all other methods.).; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] Will just pass through the reference wavefunction with a warning; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used (Thats fine, see above).; - [ ] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code. (Moved to another ticket); - [ ] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow. (Moved to another ticket); - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes (see #249).; - [x] DF and RI calls should soft fail with a proper error message.; - [x] Cubeprop, Molden, OEProp etc functions should fail better when not passed a wavefunction.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259:70,clear,cleared,70,https://psicode.org,https://github.com/psi4/psi4/issues/259,2,['clear'],"['clear', 'cleared']"
Usability,This issue serves as a reminder.; Undo #2362 once all bugs are fixed.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2430:34,Undo,Undo,34,https://psicode.org,https://github.com/psi4/psi4/issues/2430,1,['Undo'],['Undo']
Usability,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-201451437:212,simpl,simple,212,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437,1,['simpl'],['simple']
Usability,"This problem was already mentioned in passing here: https://github.com/psi4/psi4/issues/662#issuecomment-475861476. This is a simple example input file showing the problem:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. I have set my `$PSIPATH` to a directory containing the basis set file (downloaded from EMSL):. ```bash; ll $PSIPATH; total 2.1M; drwxr-xr-x. 2 toon toon 4.0K Apr 29 17:13 .; drwxr-xr-x. 7 toon toon 4.0K Apr 29 16:34 ..; -rw-r--r--. 1 toon toon 2.1M Apr 29 15:49 ano-rcc.gbs; ```. When running Psi4 on this input, I get the following error message:. ```; Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613:126,simpl,simple,126,https://psicode.org,https://github.com/psi4/psi4/issues/1613,1,['simpl'],['simple']
Usability,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208:5,simpl,simple,5,https://psicode.org,https://github.com/psi4/psi4/issues/2208,1,['simpl'],['simple']
Usability,"This sounds good, especially as it would seem to enable custom basis sets (e.g., dz on C1, tz on C2, atz on H, user-supplied mybasis on remainder) to be condensed into one name/entity (though could it be re-issued after a new molecule's defined?). What type of info do you think should be cached: atom/basisname or atom/extract_of_gbs_file or atom/BasisSet object (py translation of libmints object)? . Simply adding a member fn to basisset in libmints that returns T/F for a given library basis name and element name is seemingly the easiest way of addressing the issue (though doesn't cover case where C1 and C2 perhaps have different library bases). Having a full BasisSet and BasisParser python classes is the other end of the code-to-add scale. But then, we could have a Molecule respond with its full set of default fitting basis mix, all py-side. (And I could write GENBAS entries w/o libmints.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/46#issuecomment-37953151:403,Simpl,Simply,403,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37953151,1,['Simpl'],['Simply']
Usability,"Those comments aren't always 1:1 with the contents. But what's happening for 6-311+G* in particular is that 3 partial basis sets are getting merged: the 6-311 defined through Kr, the polarization defined through Kr, and the diffuse only defined through Ca. Only elements with partial basis sets available for all three pieces show up in the full basis file, so Kr, etc. are missing. Looking at 6-311+G* at https://www.basissetexchange.org/, that ends at Ca, too, so nothing to update. Does this clear up what's going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2097#issuecomment-769922422:495,clear,clear,495,https://psicode.org,https://github.com/psi4/psi4/issues/2097#issuecomment-769922422,1,['clear'],['clear']
Usability,"Time to start working on the Psi4 1.0 release notes, #hype! Please read through and update as needed @psi4/p4manage. Loosely organized at the moment, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:804,user-friendly,user-friendly,804,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['user-friendly'],['user-friendly']
Usability,"To Jerome's point, I would agree that for UHF doing stability analysis; helps a lot. However, we have also seen cases when stability analysis; severely breaks spin symmetry and converges on the wrong (or mixed) spin; state instead of the lowest energy root of desired spin. So one should be; careful about this issue. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; alexander.y.sokolov@gmail.com> wrote:. > I would add that lately we have seen a lot of problems with UHF and ROHF; > converging on a wrong state for open-shells in Psi4. Although new stability; > analysis code helps a lot in fixing some of the problems (for UHF), for; > many of these systems finding the lowest root is quite non-trivial and is; > accompanied by many SCF convergence issues, as well as symmetry-breaking; > issues (UHF). Things get a lot worse for transition metal compounds (even; > simple ones, like Fe(CO)5). The most helpful solution is to start with; > basis set projection from a small basis, but this strategy doesn't always; > work. Sometimes, combining stability analysis root search and basis set; > projection helps.; > ; > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > finding lowest-energy solutions for systems of this type. Usually, after; > investing some time, it is possible to find the necessary solution for; > these non-trivial cases with Psi4, but it may be worth investigating some; > of these systems for possible improvements in the code.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I guess these other codes are; > > using some other convergence accelerator than Psi4 ? I would not be; > > surprised if SOSCF with a core guess would converge on the right solution.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171660919:898,simpl,simple,898,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171660919,1,['simpl'],['simple']
Usability,To be clear the JK OOC algorithm _does_ work with non-symmetric density cases. See `/tests/soscf2` for an example. Everything looks good and ill pull it in when Travis goes through. Ignore the Distelli stuff for now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234381027:6,clear,clear,6,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234381027,1,['clear'],['clear']
Usability,"To be clear, `AO_core_` controls which subalgorithm is used? If so, that should be mentioned in a comment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2848#issuecomment-1497957071:6,clear,clear,6,https://psicode.org,https://github.com/psi4/psi4/pull/2848#issuecomment-1497957071,1,['clear'],['clear']
Usability,"To be clear, if the MKL_DEBUG_CPU_TYPE=5 envvar trick is used, all MKL functions will execute the AVX2 path, but if there are CPU dispatch routines inserted into the program by the Intel compiler, then code that is outside the MKL functions will probably still only use SSE2 when run on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633672888:6,clear,clear,6,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633672888,1,['clear'],['clear']
Usability,"To be clear: while a special field for natural orbitals is an option, it's not obvious to me that it would be worth making. A user who wants the natural orbitals can just compute them from the OPDM. That's what I've been doing in `detci`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1886#issuecomment-626349268:6,clear,clear,6,https://psicode.org,https://github.com/psi4/psi4/issues/1886#issuecomment-626349268,1,['clear'],['clear']
Usability,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:78,clear,clear,78,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598,1,['clear'],['clear']
Usability,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264418892:477,simpl,simple,477,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892,1,['simpl'],['simple']
Usability,"To make sure we're clear, an Ana/Mini/Psi4conda installation are all independent. That is, `where conda`, `where python`, and `where psi4` should all start the same. If you've already got an Ana/Miniconda installation, maybe try skipping the Psi4conda installer, and try installing the psi4 package directly: `conda create -n <p4env> psi4 -c psi4/label/dev`, where `<p4env>` is your choice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875216998:19,clear,clear,19,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875216998,1,['clear'],['clear']
Usability,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-217275131:775,simpl,simply,775,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131,1,['simpl'],['simply']
Usability,"Try not to make things too automatic: self-consistent IP tuning is not always a good idea as there are functionals/systems for which no solution exists so you come close to self-consistency but never reach it. It is always good to have this as an option, but also always allow the user to override the settings. I prefer to fix the tuning as it is often nearly exactly what I need. Full self-consistency sometimes doesn't get you much more in accuracy but can take too long to achieve. . On a related note: why duplicate DFT commands/options in the SAPT(DFT) section? Would it not be better to define the density functional and then simply use the defined settings in the SAPT(DFT) calculation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/939#issuecomment-373842673:633,simpl,simply,633,https://psicode.org,https://github.com/psi4/psi4/issues/939#issuecomment-373842673,1,['simpl'],['simply']
Usability,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260372655:401,simpl,simple,401,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655,1,['simpl'],['simple']
Usability,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281446113:369,learn,learn,369,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113,1,['learn'],['learn']
Usability,"Two comments:; - `dlDF` is based off M05, you might want to try TPSS or SCAN.; - I am not really sure this clears our derivative code from problems. All meta functionals use the same integration code and could still be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382383114:107,clear,clears,107,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382383114,1,['clear'],['clears']
Usability,"Two questions:; - Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out; - Why not implement my above suggestion of forming two separate `X` matrices? This would be simple to do",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1499304044:270,simpl,simple,270,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1499304044,1,['simpl'],['simple']
Usability,"UPDATE: Above holds that Psi4 can be built against NumPy v1 _or_ v2, just be sure your runtime np is the same major version as your build-time numpy, or you'll get the ""atoms are too close"" error. _But_ I've learned a few more constraints and pitfalls since then:. * to use np v2, you must have `pybind11>=2.12` (right now the codedeps/psi4-path-advisor setup is constraining to 2.10 or 2.11 to avoid a docs issue; working on a resolution) (signature is ""atoms are too close""); * to use np v2, you must have `pint>=0.24.1` (v0.24.0 works for >=py310; v0.24.1 works for >=py39) (signature is something like sumprod not available in numpy); * to use np v2, you must have `qcelemental>=0.28.0` (fixed since last week; qcengine doesn't need changes); * on c-f, packages have ways or declaring what they're compatible with so that an env solves into a workable state. Those aren't in place at present for the numpy+pint and numpy+pybind11 combinations, so you need to check them yourself.; * even if your build env is np v2, beware of any pip installs that can surreptitiously sneak in a np v1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750:208,learn,learned,208,https://psicode.org,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750,1,['learn'],['learned']
Usability,"Under certain conditions, OPTKING's steps are non-deterministic. A dihedral of 0 seems necessary, but it is not clear to me if this is sufficient. I've only found this in the IRC code, though I haven't checked for this in the non-IRC code. The below three files use the exact same input file but all have different steps. (This is on my own ircfix branch. I had conv_check return false on the first iteration as described [here](https://github.com/psi4/psi4/issues/859) and hardcoded the filename for my external hessian, to speed up my tests. The hessian itself was generated at SCF with this geometry.). [output.txt](https://github.com/psi4/psi4/files/1472907/output.txt); [output1.txt](https://github.com/psi4/psi4/files/1472908/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1472909/output2.txt). The below cases do not show the non-deterministic behavior. The only change in input file from the previous runs to this run was that the dihedral of 0 has been changed to a dihedral of 2. [output.txt](https://github.com/psi4/psi4/files/1472911/output.txt); [output1.txt](https://github.com/psi4/psi4/files/1472912/output1.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860:112,clear,clear,112,https://psicode.org,https://github.com/psi4/psi4/issues/860,1,['clear'],['clear']
Usability,Undocumented `DETCI` Convention,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2075:0,Undo,Undocumented,0,https://psicode.org,https://github.com/psi4/psi4/issues/2075,1,['Undo'],['Undocumented']
Usability,"Unmarked as a good `new_dev` issue. It isn't sufficiently clear to me what exactly the smart SCF solver will do. As somebody who was _there_ when a first-year CCQC student tried to implement this, the list of possible tricks are just too big without a crystal clear list of what tricks to implement, and when.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-869208826:58,clear,clear,58,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-869208826,2,['clear'],['clear']
Usability,"Update your PR description. Behavior changes are not ""minor cleanup"", even if that behavior is as simple as raising an error where there wasn't one before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488#issuecomment-1073393998:98,simpl,simple,98,https://psicode.org,https://github.com/psi4/psi4/pull/2488#issuecomment-1073393998,1,['simpl'],['simple']
Usability,"Upgrade your version of Psi4. If you want TD-DFT, I suggest you use the [nightly build here](https://psicode.org/installs/v132/). TD-DFT calculations are being added in version 1.4. You can see a guide on how to perform TD-DFT [here](https://www.youtube.com/watch?v=MmG-g3SEFbk).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2071#issuecomment-748970773:196,guid,guide,196,https://psicode.org,https://github.com/psi4/psi4/issues/2071#issuecomment-748970773,1,['guid'],['guide']
Usability,"Using `psrecord` with `psrecord ${PID} --interval 1 --plot plot1.png`. Can install via pip. There are better ones out there, but that one is simple. It might be good to use the `--log` feature as well so we can see some actual numbers as those charts are getting a bit jumbled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481747147:141,simpl,simple,141,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481747147,1,['simpl'],['simple']
Usability,"Waiting a couple hours doesn't sound bad to me, especially for something; that presumably has been tested at some level before the PR. But I see the; argument for wanting feedback quicker than half a day, and also the; argument for keeping things light now if other builds are expected in the; near future. Whether or not Travis CI builds in one hour or six, we do need to; supplement it with automated testing of the entire test suite at least on; an occasional basis, since Travis CI is only running a small subset of our; tests. David. On Thu, Feb 11, 2016 at 4:46 PM, Lori A. Burns notifications@github.com; wrote:. > Merged #237 https://github.com/psi4/psi4public/pull/237.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#event-547798162.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-183376850:171,feedback,feedback,171,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-183376850,1,['feedback'],['feedback']
Usability,"Waiting to see if test-case passes, all clear if it does.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2252#issuecomment-882803378:40,clear,clear,40,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882803378,1,['clear'],['clear']
Usability,"We are _finally_ passing on Windows. The problem was quite subtle and involved treacherous raw pointers. The old code used `trans_one` and would pass in a pointer to position N in a `*double`, where N was the number of orbitals from previous irreps. The relevant test cases had a final irrep with no orbitals, so the old code would pass in a pointer to one position _after_ the last value. Which was fine, because it was never used. That stopped being fine, according to the Windows compiler, when I switched from `*double` to `std::array`. To be fair, trying to access a non-existent index should never have worked in the first place. The fix I adopted was to eliminate those `trans_one` calls with `libmints::Matrix` operations, with the result that we're using less specialized `libtrans` tech and fewer LoC. Unsurprisingly, I am okay with that. @loriab, unless you want to Jet to double-check that last commit, I think we're clear to bring this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-684999864:929,clear,clear,929,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-684999864,1,['clear'],['clear']
Usability,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307878490:10,clear,clear,10,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490,1,['clear'],['clear']
Usability,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/483:1384,simpl,simplified,1384,https://psicode.org,https://github.com/psi4/psi4/issues/483,2,"['clear', 'simpl']","['clear', 'simplified']"
Usability,"We intend to avoid conda as it would make the application run slower. Do you; mean dftd3-python pkg from conda forge is the only option at the moment?; I was able to use the interface to grimme's dftd3 compiled through the source, ; however, to use the three-body becke johnson damping it is the simple dftd3 we need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755:296,simpl,simple,296,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755,1,['simpl'],['simple']
Usability,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:614,simpl,simple,614,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662,1,['simpl'],['simple']
Usability,"We recently had a user confused by the [threading documentation](https://psicode.org/psi4manual/master/external.html#threading), so that needs an overhaul as well:. - In (3), change the sample code to only set the number of threads once. That's a more common use case, and those who _need_ to change the number of threads are more likely to read the supporting details.; - Either remove (1) or relegate it to a sidebar.; - The introduction to the threading section is overly technical. The first paragraph can be simplified to ""Psi4 threading uses both OpenMP and MKL, so it is important that your installation is linked against both if you want to use threading. If you have a conda install, this is already taken care of.""; - Replace ""certain circumstances"" in (4) with a more specific statement.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2407:513,simpl,simplified,513,https://psicode.org,https://github.com/psi4/psi4/issues/2407,1,['simpl'],['simplified']
Usability,"We tried when we extended our build to py38 and py36 some time ago there were a couple of unforeseen problems with py38, so it's unfortunately not a simple thing of just amending the config. For the moment we have put it on hold, sorry. How pressing is it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598849565:149,simpl,simple,149,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598849565,1,['simpl'],['simple']
Usability,"We used to use files like file11 for subsequent parsing for; finite-difference computations and for analysis of optimization; trajectories. Now we can so easily return the trajectory through python,; this doesn't seem necessary. I presume someone has an eye on what WebMO; parses, or else we do what we want and let WebMO accommodate it. On Mon, Jul 30, 2018 at 12:41 PM, Jonathon Misiewicz <; notifications@github.com> wrote:. > *@JonathonMisiewicz* commented on this pull request.; > ------------------------------; >; > In psi4/driver/driver_findif.py; > <https://github.com/psi4/psi4/pull/1024#discussion_r206260812>:; >; > > + Parameters; > + ----------; > + mol : qcdb.molecule or psi4.core.Molecule; > + The molecule to compute the gradient of.; > + E : list of floats; > + A list of energies of the molecule at displaced geometries.; > +; > + Returns; > + -------; > + gradient : psi4.core.Matrix; > + The gradient in Cartesians, as a matrix with dimensions; > + number-of-atoms by 3. """"""; > +; > + # NOTE: Yes, this returns psi4.core.Matrix, not an ndarray.; > + # Due to GradientWriter, the function internally needs the gradient as a psi4.core.Matrix.; > + # TODO: Move GradientWriter py-side, as well? This function would simplify nicely.; >; > Another picky question: We currently write multiple gradients to the same; > file. See fd-gradient test for an example. Keep this behavior or scrap it?; > My vote would be to have one gradient for one file, but there may be some; > use case I'm not seeing.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1024#discussion_r206260812>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTGtFQb77YTjJUaUeJbULz7OyWJ5mks5uL0VVgaJpZM4UFStn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024#issuecomment-408957866:1234,simpl,simplify,1234,https://psicode.org,https://github.com/psi4/psi4/pull/1024#issuecomment-408957866,1,['simpl'],['simplify']
Usability,"We've had a recent forum request to support `.wfx` files for interface to QTAIM programs. This seems like a relatively simple Python project, and a good one for a new developer. You can see the file format specification [here](http://aim.tkgristmill.com/wfxformat.html).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2341:119,simpl,simple,119,https://psicode.org,https://github.com/psi4/psi4/issues/2341,1,['simpl'],['simple']
Usability,"Well since the argument came up again: I'm all for removal, because with `adcc`, we can guarantee a) correct results (several test cases!) b) all sorts of properties and c) up-to-date documentation. The step to go from requesting a psi-internal ADC calc to having the same job running with `adcc` is a simple `conda install`. IMHO there should not be a ""deprecation phase"" for a feature which is obviously broken and a full replacement is already there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827:302,simpl,simple,302,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827,1,['simpl'],['simple']
Usability,"Well the ""-3c""s are not in dashparam. And for adding new entries to dashparam it will be somewhat clear if psi4 has the functional or not (Why else add it). So maybe a cookbook recipe is all that is needed. ```; from psi4.driver.qcdb.dashparam import get_dispersion_aliases; from psi4.driver.qcdb.dashparam import dashcoeff; from psi4.driver.procrouting.dft_funcs import dict_builder. for dtype in dashcoeff.keys():; for func in dashcoeff[dtype]:; check=func in psi4.driver.procedures['energy']; if check == False:; alt= find_approximate_string_matches(func,dict_builder.dict_functionals,3); print(dtype, func.upper(), ""not found! maybe? :"",alt); ```. Above is already quite nice, showing potential fitting names.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-385938130:98,clear,clear,98,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-385938130,1,['clear'],['clear']
Usability,"Well, I was really hoping to keep the build matrix fairly simple to prevent build # explosions. What if we do the following:; - clang 3.5, 3.7 (release); - gcc 4.8, 5.2 (release); - gcc 5.2 (debug). I don think building intermediate compiler releases is as important and we manage to stay at the 5 concurrent build number.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182887045:58,simpl,simple,58,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182887045,1,['simpl'],['simple']
Usability,"Well, at least our post-SCF gradients have the right symmetry. SCF is its own module... Making a new Deriv object seems a bit of waste so I think the simplest thing to do is just to duplicate the function in `src/scfgrad`. Duplication is not my favorite thing, but certainly the simplest. I guess we are guaranteed to be in standard orientation unlike the [molecule](https://github.com/psi4/psi4/blob/master/src/lib/libmints/molecule.cc#L2787) version? Seems like yes, but good to be sure while were looking at it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191476636:150,simpl,simplest,150,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191476636,2,['simpl'],['simplest']
Usability,"Well, initially it was believed to be SCF related because that was the error at program failure. However, it now seems that the reason for the SCF failing was caused by the geometry iteration producing unphysical geometries, which then led to the next SCF iteration failing. By fixing the geometry iteration, and it appears that 'opt_coordinates both' does the trick, no unphysical geometries occur, and the program purs along to completion. In the case of these dimers, completion takes more than the default 50 geometry iterations. Above, one succeeded in 57 steps, two stopped at 50 steps but were clearly converging, they just hit their geom_maxiter of 50 steps and stopped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-958971629:601,clear,clearly,601,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-958971629,1,['clear'],['clearly']
Usability,"Well, still confused why the p4n-rhf-hessian is simply timing out. Anyone have a GCC that they can try to replicate with?. @schiebermc Thats why code review exists!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384479640:48,simpl,simply,48,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384479640,1,['simpl'],['simply']
Usability,"Well, that's an obvious and simple solution I should've thought about...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379563062:28,simpl,simple,28,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379563062,1,['simpl'],['simple']
Usability,"Well, the B3LYP/6-31G* had no issues with the SCF, it did hit 50 iterations and cancel because of that. It was clearly converging, albeit, very slowly. I am not sure why it stopped at 50 iterations considering I specify 100 iterations as my max? (Nevermind, that maxiter 100 is only for the SCF convergence). For B3LYP/6-31G* I used. ```; set {; basis 6-31G*; maxiter 100; g_convergence gau; opt_coordinates both; }; ```. ```; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.084027420038 -1520.084027420038 0.01209684 0.00318489 0.09585970 0.02642430 ~; 2 -1520.101971720320 -0.017944300282 0.00752027 0.00158941 0.12994949 0.02669655 ~; 3 -1520.111617832344 -0.009646112024 0.00329597 0.00094589 0.09913642 0.01723322 ~; 4 -1520.114648443302 -0.003030610957 0.00216198 0.00062847 0.08202824 0.01366308 ~; 5 -1520.116031406611 -0.001382963310 0.00122597 0.00033545 0.05989395 0.01111816 ~; 6 -1520.116772315849 -0.000740909238 0.00131990 0.00033374 0.06203108 0.01396358 ~; 7 -1520.117591979154 -0.000819663305 0.00119721 0.00034756 0.09267135 0.02072228 ~; 8 -1520.118547103847 -0.000955124693 0.00156371 0.00030629 0.07994782 0.01866175 ~; 9 -1520.119170359052 -0.000623255205 0.00125623 0.00027764 0.06344987 0.01578896 ~; 10 -1520.119638965232 -0.000468606180 0.00067629 0.00021266 0.04981669 0.01425496 ~; 11 -1520.119963148907 -0.000324183675 0.00106241 0.00018459 0.03721107 0.01011712 ~; 12 -1520.120138724090 -0.000175575183 0.00077654 0.00015862 0.03691754 0.00896792 ~; 13 -1520.120303579945 -0.000164855855 0.00055434 0.00012476 0.03805513 0.00913406 ~; 14 -1520.120449457803 -0.000145877858 0.00082349 0.00014532 0.03164180 0.00803309 ~; 15 -1520.120569511735 -0.000120053932 0.00090778 0.00014097 0.03673389 0.00918033 ~; 16 -1520",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957933503:111,clear,clearly,111,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957933503,1,['clear'],['clearly']
Usability,"Well, why would it work fine if I dump something out in the meantime? To be clear, this works:. ```; coulomb = np.einsum('iijj->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); print(occ_sl); exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); ```. I dumped the ERI object and it is just numbers I think?. This is on s390x, so a somewhat obscure architecture (big endian).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-451996669:76,clear,clear,76,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-451996669,1,['clear'],['clear']
Usability,"What happened was your previous commits were rebased so your local and master git hashes differed. However, since the new commits had the same diff as your current commits they effectively did nothing. Probably not terribly clear unless your familiar with git. The best thing to do as AJ mentioned is to always make a new branch a pull down a fresh version of `psi4/psi4:master`. . @amjames The histories probably were muddled. We probably need to squash this anyway so we can make a merge as the diff looks fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/602#issuecomment-277130364:224,clear,clear,224,https://psicode.org,https://github.com/psi4/psi4/pull/602#issuecomment-277130364,1,['clear'],['clear']
Usability,"What if we change it so that if you ran `set SAPT_DFT_GRAC_SHIFT_A 0.0` that would satisfy the requirement? This would enforce users who want a 0 GRAC shift to be conscious of this act. We could have a `SAPT_DFT_OMEGA_A/B` and either OMEGA or GRAC must be set? For range tuning, ultimately what I would like is the ability to do this automatically (I think we have automated tuning built-in already). For advanced users we could also add the ability for you to simple give two monomer wave functions and it would compute SAPT(DFT) between the two. SAPT(DFT) is constructed internally that this is already how its called.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/939#issuecomment-373730896:461,simpl,simple,461,https://psicode.org,https://github.com/psi4/psi4/issues/939#issuecomment-373730896,1,['simpl'],['simple']
Usability,"What is needed to get around this constraint of the simple input snippet below not working b/c scf is DF, @bozkaya ? The conventional integrals have already been computed and are ready. Is there some other data transformation needed? As a last resort, I suppose we can go ahead and compute the non-DF scf instead when this call is made. But I think we need this input to work. Related (user-experience-wise) to https://github.com/psi4/psi4private/issues/48. ```; set mp2_type conv; gradient('mp2'); ```. ``` c++; // SCF TYPE; if (options_.get_str(""SCF_TYPE"") == ""DF"" || options_.get_str(""SCF_TYPE"") == ""CD"") {; if (dertype != ""NONE"") {; throw PSIEXCEPTION(""Analytic gradients are NOT available for SCF_TYPE=DF/CD !"");; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245:52,simpl,simple,52,https://psicode.org,https://github.com/psi4/psi4/issues/245,1,['simpl'],['simple']
Usability,"What sort of reference values do you have around? all the pieces of sapt or just several of the disp term? psiapi- or `molecule {...}`-based? Perhaps make a folder in tests and check in some of the inputs you've been running, and I can guide you toward the best way to test from there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456871658:236,guid,guide,236,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456871658,1,['guid'],['guide']
Usability,"What's happening on (2) is as follows:; * For the supersystem computation, #2271 means that the supersystem frozen core is the sum of monomer A and monomer B frozen core. Both of those are set to zero right now, which is bad, but not the direct cause of the issue.; * **For both monomers, `num_frozen_docc 6` means Psi thinks there are 6 frozen orbitals when those monomer computations run**. That doesn't affect energies, but that does contaminate the wavefunction.; * All three wavefunctions are saved; * After reading the monomer B wavefunction, Psi asks monomer B for its occupied orbitals; * When computing its occupied orbitals, monomer B realizes it has 6 frozen orbitals, so it must be at least 6 and therefore returns 6 occupied orbitals; * With a garbage number of occupied orbitals, Psi computes a garbage SCF energy. The primary issue here is that for SAPT supersystem computations, Psi doesn't split `num_frozen_docc` into Monomer A frozen docc and Monomer B frozen docc. (nbody may well have the same problem.). Idea 1:; For _reasonable_ frozen cores, we could plausibly do the supersystem computation, assume the core orbitals are localized on monomers, see which monomers the core orbitals are localized on, and use that to work out the docc per subsystem. This is not distributed and will fail for large frozen cores, where the localization assumption fails. Idea 2:; `num_frozen_docc` simply should not be used for supersystem computations. We need a different keyword that has the user specify this for each elementary system. just like they do charges and spin multiplicities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1211894195:1403,simpl,simply,1403,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1211894195,1,['simpl'],['simply']
Usability,"When running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\groun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228:376,UX,UXXXXXXXX,376,https://psicode.org,https://github.com/psi4/psi4/issues/2228,2,['UX'],['UXXXXXXXX']
Usability,"While I appreciate that tests are now passing, I still request changes.; * Comments that refer to methods that no longer exist need to be removed.; * The comment on dfhelper's release_AO is vague. What does it mean to ""release AO""? Are you clearing memory used to store some AO-basis quantity?; * Naming a method ""release_AO"" that does not actually release AO is confusing. You need to change this.; * The title of this PR is misleading. This PR is not just optimizing I/O. This PR is _changing the values that Psi gives for SAPT(DFT)_ due to the options edits. Are these edits supposed to be part of the PR or not? That's going to determine how the rest of this review process goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269:240,clear,clearing,240,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269,1,['clear'],['clearing']
Usability,"Whoops, I meant “ldd —version”. (Dash dash). Also, “ldd -v miniconda3/lib/pyth.../site-packages/psi4/core.so”. Since the conda pkg is largely self contained, could try clearing out those envvars. But let’s see the ldd results first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404239360:168,clear,clearing,168,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404239360,1,['clear'],['clearing']
Usability,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223:302,learn,learned,302,https://psicode.org,https://github.com/psi4/psi4/issues/2223,2,"['learn', 'simpl']","['learned', 'simple']"
Usability,"With early CMake I had the impression that it didn't collect compilers and flags from ""standard"" envvars (it doesn't say it will before 3.12 https://cmake.org/cmake/help/v3.12/variable/CMAKE_LANG_FLAGS.html), so I wasn't concerned with the Conda flag set. Also, all the psi4's native build knobs get appended to `CMAKE_CXX_FLAGS`, so many of the conda ones are superseded. For actual psi conda package builds, any gnu flags not recognized by the Intel compiler will also be discarded. I can see how there might be modest performance concerns with some of the conda flags like `FORTIFY_SOURCE=2`, but I'm not sure they're worth the trouble of resisting. If you've found otherwise, I'd be interested to hear. It's assuring to learn that Fedora also imposes some of those flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875:724,learn,learn,724,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875,1,['learn'],['learn']
Usability,"With the fixes and default cutoff, I get; ```; Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 1512230731449.1877441406 1512230731449.1877441406 140929.0768005789 125; ```; which is not surprising. Setting `df_fitting_condition 1e-7` I get; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -196270759150.0319519043 -196270759150.0319519043 89246.9451637544 129; ```; which is clearly different :laughing:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606:430,clear,clearly,430,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606,1,['clear'],['clearly']
Usability,"X 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian associated to the (4,3) active space. I used for this the resulting Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this Hamiltonian gives the following two lowest states expressed in the active space : ; | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩ - 0.887|111100⟩; (NB : the HF determinant is |111100⟩ ). With this diagonalization, we clearly find same coefficients but with opposite signs. As a double check, I also computed the energy of these states and obtained : ; E_0 = -93.93144865003578 Ha; E_1 = -93.90255033754423 Ha. Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do you have a clue why such a pb arises in the Psi4 output ?. Thanks a lot for you answer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:3276,clear,clearly,3276,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['clear'],['clearly']
Usability,"Yay!. Ok, back to IntelCache.cmake. `set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu- --sysroot=/home/termo/miniconda3/envs/p4dev35/x86_64-conda_cos6-linux-gnu/sysroot"" CACHE STRING """")`. Do a line like the above for each of C, CXX, Fortran.; Clear away `objdir/`; Try the `psi4-path-advisor --intel` again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386739654:296,Clear,Clear,296,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386739654,1,['Clear'],['Clear']
Usability,"Yea, I really need to learn that you guys do a lot of work in a few weeks and that usually requires me to clone-and-build rather than just do git pull. I do have a small problem now. I am not able to call psi4. This happens if I just run psi4 in the stage/bin directory. . File ""../../stage/home/kannon/src/psi4_cmake/Install_Debug/bin/psi4"", line 140, in <module>; import psi4; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/__init__.py"", line 72, in <module>; from .driver import endorsed_plugins; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/__init__.py"", line 35, in <module>; from psi4.driver.plugin import *; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/plugin.py"", line 91, in <module>; for dir in os.listdir(plugin_path):; OSError: [Errno 2] No such file or directory: '/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271969458:22,learn,learn,22,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271969458,1,['learn'],['learn']
Usability,"Yea, pretty simple fix. The JK object only thinks it needs to do J when it needs both J and K. Just need to flip a switch. Ill get this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/911#issuecomment-363237714:12,simpl,simple,12,https://psicode.org,https://github.com/psi4/psi4/issues/911#issuecomment-363237714,1,['simpl'],['simple']
Usability,"Yea, scratching my head over that one too. I was knee deep in `lsof` loads and thought we should check the simple things. The other weird thing is you can export either MKL or OMP threads and it fixes the error. I wonder what the precedence for`mkl/omp_set_num_threads/environ` is. It could help track down who is setting what.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311756543:107,simpl,simple,107,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311756543,1,['simpl'],['simple']
Usability,"Yeah this code recomputes based on the function pivot pair. I am aware of; the many advantages of resolving the full shell pair at once, but just; needed a quick reference code to check compressibility when I wrote this.; It could easily be fixed but I have to this point only ever needed df for; production computations. I'm sojourning in lugano next week and can check a; new algorithm in when I've a free hour then. Cheers; Rob; On Jun 8, 2016 2:06 AM, ""Kevin Hannon"" notifications@github.com wrote:. > @susilehtola https://github.com/susilehtola, @robparrish; > https://github.com/robparrish was the original author of the code, but; > I believe that the integrals are recomputed whenever needed. Rob can; > correct me if I am wrong. The algorithm is extremely simple and could use; > much more improvements.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/400#issuecomment-224450826, or mute; > the thread; > https://github.com/notifications/unsubscribe/ACizP8-ZuGGRnE3-m4QdDPyzmFIFGOvXks5qJgeQgaJpZM4It9wO; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224486539:765,simpl,simple,765,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224486539,1,['simpl'],['simple']
Usability,"Yeah, I would preallocate the E in the constructor and then simply fill it with zeroes in the compute pair function.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2483#issuecomment-1069494244:60,simpl,simply,60,https://psicode.org,https://github.com/psi4/psi4/pull/2483#issuecomment-1069494244,1,['simpl'],['simply']
Usability,"Yeah, it just needs to be turned into a user-option (defaulted off). -Rob. On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; wrote:. > I'm learnimg the world isn't ready for C++11 yet, and I'm in the process of; > phasing it out of my codes. Anyways, my timer relies on Boost. What I do; > is ripped right out of the Boost example for how to determine the; > uncertainty in their timers, the sampling rate may be a bit high if there; > ends up being 5000000 calls though. I'm not sure what you mean exactly by; > separate thread. The uncertainty in each timer is a hardware feature so on; > a heterogeneous cluster each mpi process needs to sample. This is only; > done once at startup.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:; > ; > > @ryanmrichard https://github.com/ryanmrichard any reason the; > > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > > just do it a in a different thread?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/89#issuecomment-98490177.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/89#issuecomment-98491129.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98491231:161,learn,learnimg,161,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98491231,1,['learn'],['learnimg']
Usability,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507#issuecomment-258979667:24,simpl,simple,24,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667,3,"['learn', 'simpl']","['learned', 'simple']"
Usability,"Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:. 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; 2. Move this improved incremental Fock to the parent `JK` class. [this PR]. In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838:581,clear,cleared,581,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838,1,['clear'],['cleared']
Usability,"Yep, @amjames described my confusion exactly (and very clearly too!). So the wording should be modified to indicate that if the (filenum, label) combination was called at an earlier point, then it will return non-zero data?. One other small thing that would be nice to clarify (but I don't know how to do it clearly) is that filenum or label alone is not enough to determine which data is returned by buf4_init and friends. I didn't have a clear concept of how filenum and label related to each other from reading the original docstring. I ended up realizing later on there was a contradiction in the CCENERGY code if I assumed filenum or label alone were enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267212631:55,clear,clearly,55,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267212631,3,['clear'],"['clear', 'clearly']"
Usability,"Yep, which brings us (well, me) to the actual moving. I'm planning on making a PR _very_ early into the development process for this, because the interfacing requirements are murky, and I want to make sure that what I'm preparing is suitable for this ""variety of reasons"" we want this code moved. I'm assuming the limitations of the current interface will be clearer once I start playing with the code. Since I don't have to wrap my head around pointers and references for the rest of this issue, I'm hoping progress will be a bit faster.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-359186675:359,clear,clearer,359,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-359186675,1,['clear'],['clearer']
Usability,"Yes -- that is right. It may also be important to note that the monomer m2 may not be in the exact same orientation relative to m1 for both dimers. . I am having trouble finding any information about ORCA's ""OptM3 with GC,"" so I'm not sure how it relates to defgrid2 (yet). The ORCA output files simply state:; `Radial Grid Type RadialGrid . . . OptM3 with GC (2021)`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-928335315:296,simpl,simply,296,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-928335315,1,['simpl'],['simply']
Usability,"Yes, I left libdpd alone, since FAE had needed a function that psi4 didn't embed because unused. For the libraries, ""clearing out"" means simply not compiling. If any function is found to be needed, it's a `#` toggle in the CMakeLists.txt away. (Except possibly for ccsort and transqt2, for which there's another scheme afoot.) Could keep the ""unneeded"" lib files toggled off for months and then reevaluate, to be cautious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262321324:117,clear,clearing,117,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262321324,2,"['clear', 'simpl']","['clearing', 'simply']"
Usability,"Yes, I think simply producing that list would be sufficient. LibXC could also product a `char**` that we could wrap and pull out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-329267656:13,simpl,simply,13,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-329267656,1,['simpl'],['simply']
Usability,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262017312:659,clear,clearer,659,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312,1,['clear'],['clearer']
Usability,"Yes, I was confused by the testing in `sns-mp2`. When I tried to run `pytest` in a repo, it complained about `import garden`. And `python setup.py [py]test` wasn't happy, either. On the other hand, the simple input worked just fine, and there are reference values in the two pytest input files, so I can just copy them over to become conditional psi test cases. By the way, @rmcgibbo, I can get the version from `python setup.py --version` (`1.0.1.dev1`, I think). Is there a way to get that from the imported module (e.g., `python c ""import snsmp2; print(snsmp2.__version__)""` or similar)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-345262845:202,simpl,simple,202,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345262845,1,['simpl'],['simple']
Usability,"Yes, I'm afraid this really is so (http://psicode.org/psi4manual/master/basissets_tables.html#id13). It's the comma it really hates because that is the delimiter for a python list. This exception to psi4's user-friendly input has long pained me. I'll see if the input parser can't be persuaded to use commas ""correctly"" for basis set options, but if it can't be decoupled from array-type options, this oddity will have to remain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-202565127:206,user-friendly,user-friendly,206,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-202565127,1,['user-friendly'],['user-friendly']
Usability,"Yes, banning certain features is not really what we want to do. I would simply add caution to the use of `auto`, maybe a rule of thumb: If you are using auto for something besides an iterator its _likely_ not a good idea. We tossed around a C++11 user guide, but didnt really get anywhere. I can start a wiki article if others will contribute as my personal list of do's and dont's is quite short.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-191750201:72,simpl,simply,72,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-191750201,2,"['guid', 'simpl']","['guide', 'simply']"
Usability,"Yes, fnocc looks clear across the dashboard. Go ahead and close those two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/120#issuecomment-124137136:17,clear,clear,17,https://psicode.org,https://github.com/psi4/psi4/issues/120#issuecomment-124137136,1,['clear'],['clear']
Usability,"Yes, it is correct and clearer. I am going to add that now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/729#issuecomment-306576172:23,clear,clearer,23,https://psicode.org,https://github.com/psi4/psi4/pull/729#issuecomment-306576172,1,['clear'],['clearer']
Usability,"Yes, it's often right (that's how I got the reference value for the compare_values function, from a simple input file). My concern is that in a more complex input file, it started throwing odd energies, depending on the (commented) input file contents. It's possible there was something funny with my setup, but the error is consistent enough that I'm really suspicious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183512111:100,simpl,simple,100,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183512111,1,['simpl'],['simple']
Usability,"Yes, the Fedora packages use shared Boost libs, but since they're versioned dependencies there shouldn't be any problem as the dependency breaks when the Boost soname changes. Anyway, this should be solved with 1.1 since there's no Boost anymore. Because the Fedora packaging guidelines have changed, I'll also be able to compile in more functionality such as CheMPS2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531#issuecomment-263455822:276,guid,guidelines,276,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263455822,1,['guid'],['guidelines']
Usability,"Yes, the SALCs we are using now for displacements already have rotations and translations projected out, so the Hessian is internal naturally so to speak. In the event of a full cartesian Hessian, the simplest thing to do would be to carry out the vibrational analysis directly in cartesians.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347#issuecomment-210848325:201,simpl,simplest,201,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-210848325,1,['simpl'],['simplest']
Usability,"Yes, the gradient itself should get symmetrized. So I know any deviations; that occur from a symmetric structure within optking are optking's fault; not simply amplification of an input asymmetry. On Wed, Mar 2, 2016 at 4:11 PM, Rob Parrish notifications@github.com; wrote:. > Yeah, this is likely numerical noise in the eigendecomposition stages of; > DF-SCF. As the errors are exceedingly small, I'd recommend just explicitly; > symmetrizing the gradient to the desired point group externally.; > ; > -Rob; > ; > On Wed, Mar 2, 2016 at 2:08 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > Im guessing this is due to the fact that the DF JK algorithm runs in C1; > > symmetry.; > > ; > > It looks like the errors are exceedingly small, can we just resymmetrize; > > the molecule using built in functions after a optking step to retain the; > > symmetry?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/298#issuecomment-191455202.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191455933.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191456427:153,simpl,simply,153,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191456427,1,['simpl'],['simply']
Usability,"Yes, the move to c-f-based is still planned (indeed, one of our build machines just quit, so it has special urgency). #2791 was as far as I got this cycle. It was needed to use more c-f packages instead of psi-specialized ones, and because those are the most popular non-required deps. Are there particular packages you'd need besides required, optimization, and dispersion? Or is simply a c-f-based psi4 package that solves your primary goal?. Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a `psi4/label/cf` channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1336507776:381,simpl,simply,381,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1336507776,1,['simpl'],['simply']
Usability,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172147949:133,clear,clearly,133,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949,1,['clear'],['clearly']
Usability,"Yes, this is a good point. In my opinion, `freeze_core = 1` is meant to be best-effort behaviour, and freezing 4f for post-lanthanides and 5f for post-actinides will have the additional benefit of freezing all electrons contained in most ECPs, and the 5s5p / 6s6p shell for lanthanides/actinides. This means `freeze_core = 1` will get you the same active occupied orbitals whether you have an ECP or not. The previous behaviour is still accessible using `freeze_core = -1` which would freeze [Xe] strictly for all elements in 6th period and [Rn] for all in 7th period. The behaviour here with a 60-core ECP is clearly nonsensical, but as it's an ""advanced option"" I'm fine with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1930#issuecomment-643713575:610,clear,clearly,610,https://psicode.org,https://github.com/psi4/psi4/pull/1930#issuecomment-643713575,1,['clear'],['clearly']
Usability,"Yes, this is a much longed for feature in Psi4, since there's no initial SCF procedure. Psi4 relies - surprisingly succesfully - on the chance that when started from even bad orbitals, the SCF converges without difficulty. The only problem case is some complicated transition metal systems where the procedure just does not converge since there are big errors in any direction. For instance, I tried recently several calculations of this type, and found out having to use different SCF guesses or initial calculations at some other other level simply because the DFT did not converge in Psi4 by default. Having the new level shifting techique from #2216 will help in getting more stable convergence. There are really only two classes of non-convergence: 1) that you had a really crappy orbital guess, which DIIS in Psi4 was not able to minimize but rather started oscillating between two nearly degenerate solutions, or 2) the actual system is so ill behaved that the SCF itself is a bit ill-conditioned and you should use analytical second-order methods to reliably solve the problem. (Of course 1&2 is another possibility in itself.). When I wrote ERKALE as a graduate student I ran across the Hu&Yang paper [J. Chem. Phys. 132, 054109 (2010)](https://doi.org/10.1063/1.3304922) for the ADIIS convergence accelerator. It is simpler than EDIIS, and can be implemented with the same ingredients as usual DIIS: Fock and density matrices. What you need to do is just solve the K-dimensional minimization problem min_{C} E_(ADIIS) for the expansion coefficients C from which you get the extrapolated Fock matrix `F_DIIS = \sum_i c_i F_i`. If I remember correctly, there's a paper that shows that ADIIS and EDIIS are the same method, assuming that you're running at Hartree-Fock level of theory. However, I think the methods are not the same for DFT. With ADIIS+DIIS, you can converge most systems without any kind of problems. The only cases where you get problems are the ones where there really are phy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:544,simpl,simply,544,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,1,['simpl'],['simply']
Usability,"Yes, this is an embarrassing but rare known issue. It's not unalike the problem mentioned in #782 where geometry updates were interpreted in a different frame from internal representation leading to surprise results. Only in this case it's a units problem. There isn't a ready solution, so it's simply in mind to be fixed at next Mol spec iteration (in progress). If you hit it in the meantime, just toggle [this line](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsmolecule.py#L1165) with `if True:` (and re-make to copy the file); it's harmless so long as your input geometry doesn't actually have overlapping atoms. The class was designed better than this; there was a later decision that leads to this error popping up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/804#issuecomment-333541702:295,simpl,simply,295,https://psicode.org,https://github.com/psi4/psi4/issues/804#issuecomment-333541702,1,['simpl'],['simply']
Usability,"Yes. As far as add-ons:. **Working:** `libint`, `libefp`, `liberd`, `dkh`, `gdma`, `CheMPS2`; **Unknown:** `GTFock`; **Not Working:** `PCMSolver` (this is in progress, but if you need it, it's within a few path hacks of working, so contact us). All of these can be compiled once and detected by the Psi4 superbuild, so possibly you need only compile libint/deriv one more time. Again, much of the build wiki is no good anymore. A mini compilation guide is at the top of the (main CMakeLists.txt)[https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L13-L102]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249025979:447,guid,guide,447,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249025979,1,['guid'],['guide']
Usability,"Yes. For py-side development, can probably get away setting PSIDATADIR and running driver on source. But, on the whole, I'm resigned. We did have cases, e.g., plugins, where psi4 was supporting running from source in preference to running from installed; it'll be simpler supporting just the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235905609:264,simpl,simpler,264,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235905609,1,['simpl'],['simpler']
Usability,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:551,simpl,simply,551,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['simpl'],['simply']
Usability,"You are correct that the `adc` is only available as `conv`. Thus `mtd_type` is not necessarily needed for now. Unless `adcc` will support it sometime soon ;-) . You mentioned an inconsistent density being returned. This is OK but should be mentioned in the manual. Currently within psi4, e.g. simple MP2 single points also just return the SCF density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-548702880:293,simpl,simple,293,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548702880,1,['simpl'],['simple']
Usability,You can also use: https://codecov.io/gh/psi4/psi4 as a guide to find code that is not covered.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/108#issuecomment-272697987:55,guid,guide,55,https://psicode.org,https://github.com/psi4/psi4/issues/108#issuecomment-272697987,1,['guid'],['guide']
Usability,"You can always pop the previous commit with rebase and make a new change to molecule.cc. Would keep my changes to the python side that tests this. Up to you. Cheers,; Daniel Smith. > On Mar 15, 2016, at 11:48 AM, Ben Pritchard notifications@github.com wrote:; > ; > I agree. It's probably the simplest change that (might) work. Should this PR be closed then, and a new one opened?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub:; > https://github.com/psi4/psi4/pull/299#issuecomment-196890030 https://github.com/psi4/psi4/pull/299#issuecomment-196890030",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-196895842:293,simpl,simplest,293,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196895842,1,['simpl'],['simplest']
Usability,"You may have to wait a bit before you get a response on this one, as the team member working on it (Jet) just got married this weekend. :). ## -TDC . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Apr 28, 2014, at 6:57 PM, rxk900 notifications@github.com wrote:. > Hello,; > Has this been resolved? I have just hit that error:; > iwl_buf_init: Can't open file 33; > with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; > I'm using a fresh build I pulled(?) yesterday.; > Best wishes,; > Rika; > ; > molecule caffeine {; > units bohr; > 0 1; > C 1.50 -0.505274704 0.000000; > C -0.535187033 -2.058190923 0.000000; > C 2.65 -4.522014770 0.000000; > C 1.346731167 2.284891446 0.000000; > C -3.463010598 1.525507419 0.000000; > C -1.745695607 5.842896101 0.000000; > C -5.228750999 -2.835032850 0.000000; > C 6.295922772 -1.343301717 0.000000; > N 3.617453017 -2.104182389 0.000000; > N 0.151176399 -4.614309103 0.000000; > N -3.029497084 -1.135014970 0.000000; > N -1.247933362 3.102880179 0.000000; > O 3.102683166 3.787581194 0.000000; > O -5.585618888 2.429058396 0.000000; > H 3.895327083 -6.157733721 0.000000; > H -2.816386000 6.395195000 -1.672580; > H -2.816386000 6.395195000 1.672580; > H 0.068926104 6.808767386 0.000000; > H -6.392104000 -2.520913000 -1.673960; > H -6.392104000 -2.520913000 1.673960; > H -4.537919087 -4.771667968 0.000000; > H 7.459103496 -3.040539942 0.000000; > H 6.719940000 -0.221440000 1.677441; > H 6.719940000 -0.221440000 -1.677441; > }; > ; > set basis cc-pvtz; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-41633408:565,simpl,simplify,565,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41633408,1,['simpl'],['simplify']
Usability,"You might consider using the new Python formatting syntax, _e.g._ `core.print_out( ""\n Psi4 stopped on: {}\n"".format(time_string))` But that's a style issue on which I don't think there's a well-defined guideline as of yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/947#issuecomment-379064790:203,guid,guideline,203,https://psicode.org,https://github.com/psi4/psi4/pull/947#issuecomment-379064790,1,['guid'],['guideline']
Usability,"You should not have made those graphs. All you know for sure is that the error is less than 1 micro hartree. You cannot tell the difference between 1.0 e-7 and 1.5 e-7, but people read graphs as if you can tell the difference between your data points. This is also why you can't just present graphs. You need to be absolutely sure that your labels are clear, and that somebody who isn't you will be able to figure out what the graph means. If you need to add a sentence to explain them, do so. I request additional benchmarks so we can get more precise estimates on how much error these techniques introduce. Can you increase energy convergence to `1e-10`?. Because this PR isn't coming in until 1.5 anyways, I'm going to turn my attention to other things for a while.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821266004:352,clear,clear,352,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821266004,1,['clear'],['clear']
Usability,"You're completely correct. The first version of MRPT2 was forked from the MRCCSD code, and used an out-of-core sort. However, not all integrals are needed in MP2, so it's quite wasteful to sort all integrals and only use a subset, which inspired us to write an integral direct version. When the CINTS code from Psi3 was replaced, this integral direct code didn't make it into Psi4. It should be quite easy for me to write a density fitted version, which is an even better approach. I have a few other things to do first, but I'll reply to this message when the code is done. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/30#issuecomment-32127370:590,feedback,feedback,590,https://psicode.org,https://github.com/psi4/psi4/issues/30#issuecomment-32127370,1,['feedback'],['feedback']
Usability,"You're correct: DETCI only calculates excited states with the same irrep as the reference, and there is no keyword to select irrep symmetry directly. It's been a few years since I've had to worry about diatomic symmetry, but let's see if I remember how this works. The two lowest energy singlet Pi gerade states are going to be [Be]p+ap-b and [Be]p-ap+b. However, Psi4 doesn't believe in complex orbitals. Ignoring normalization, p+ = px + i py, and p- = px - i py. Then using multilinearity of determinants, our states become (pxa + i pya)(pxb - i pyb) and (pxa - i pya)(pxb + i pyb) equalling (pxa pxb + i pya pxb - i pxa pyb + pya pyb) and (pxa pxb - i pya pxb + i pxa pyb + pya pyb). However, Psi4 doesn't believe in imaginary numbers. Taking the plus linear combination gives us (pxa pxb + pya pyb), and taking the - linear combination and normalizing away i gives us (pya pxb + pxa pyb). The conclusion of all this math is that because Psi4 doesn't use complex orbitals or complex linear combinations, the electronic states you're looking for are simply **not** going to be well-described by a single (real) Slater Determinant. The only solution I see is to make peace with that and modify your target symmetry to match one of those determinants. pxa pxb does not look like a diradical to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-643464569:1053,simpl,simply,1053,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-643464569,1,['simpl'],['simply']
Usability,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:1200,clear,clearer,1200,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887,1,['clear'],['clearer']
Usability,"Your system has got us confused as to why GCC isn't picked up (at all, hence the `-- Found base compiler version `) much less incorrectly, as everything you've printed looks ideal. 1. Make _sure_ you're deleting `objdir/` btwn cmake attempts; 2. Make _sure_ you're `conda activate p4dev35` (sure looks like you are); 3. `printenv`, please; 4. See the commented out `#set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """")` in the file you just `cat`-ed? Paste the full path it has to the trio of `set(CMAKE_*_FLAGS ...` above and try again.; 5. Try a simple compile.; ```; >>>icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; Hello, World!; GCC: 7.2.0; Intel: 1800; ```. hello.cc; ```; #include <iostream>; using namespace std;. int main() ; {; cout << ""Hello, World!"" << endl;; cout << ""GCC: "" << __GNUC__ << ""."" << __GNUC_MINOR__ << ""."" << __GNUC_PATCHLEVEL__ << endl;; #ifdef __INTEL_COMPILER; cout << ""Intel: "" << __INTEL_COMPILER << endl;; #endif. return 0;; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386634031:616,simpl,simple,616,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386634031,1,['simpl'],['simple']
Usability,"[Here](https://gist.github.com/Chaser324/ce0505fbed06b947d962) is a pretty quick guide on the standard PR cycle. Effectively, you need to make a new ""feature"" branch with the change, push that change to your GitHub fork, and then make a PR to our psi4/psi4:master. I can go into more detail if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/910#issuecomment-363350044:81,guid,guide,81,https://psicode.org,https://github.com/psi4/psi4/issues/910#issuecomment-363350044,1,['guid'],['guide']
Usability,"[The test suite refuses to pass, even after multiple restarts, due to a test involving QCFractal.; ](https://github.com/psi4/psi4/actions/runs/4140446911/jobs/7166134575) Some sqalchemy function is unhappy to be receiving a string, but the traceback isn't clear enough for me to interpret further. @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2873:256,clear,clear,256,https://psicode.org,https://github.com/psi4/psi4/issues/2873,1,['clear'],['clear']
Usability,"[x] Ready for review; - [x] Ready for merge. ----. Python API notes (as one would use in `superfunctionals.py`); It is recommend to set the threshold via the SuperFunctional class; e.g. `sup[0].set_density_tolerance(1e-10) `. Alternatively one can set the threshold also via the LibXCFunctional class, and potentially; set individual thresholds for the components. Below sets the same threshold for all XC kernels.; ```; dens_cut=core.get_option(""SCF"",""DFT_DENSITY_TOLERANCE""); if sup[0].is_libxc_func():; sup[0].c_functionals()[0].set_density_cutoff(dens_cut); # print(""screening python:"",sup[0].c_functionals()[0].density_tolerance()); else:; for x_func in sup[0].x_functionals():; x_func.set_density_cutoff(dens_cut); for c_func in sup[0].c_functionals():; c_func.set_density_cutoff(dens_cut); ```; ---. Tests concerning the threshold:; `1e-12` passes all tests without issues; `1e-10` fails only at `pcmsolver-dft` else everything passes. Testing meta-GGA TPSS/aug-pcseg-1 on the A24 benchmark set /w ghost-atoms (simple organic molecules):; [cut10_tpss.apc1.out.txt](https://github.com/psi4/psi4/files/4475320/cut10_tpss.apc1.out.txt); [cut12_tpss.apc1.out.txt](https://github.com/psi4/psi4/files/4475322/cut12_tpss.apc1.out.txt); [master_tpss.apc1.out.txt](https://github.com/psi4/psi4/files/4475323/master_tpss.apc1.out.txt). Looking at the files with vimdiff even `1e-10` shows no practical differences, but offers a better stability (see test cases). Dipole moments unchanged within accuracy of printout. It is maybe the best choice, but I cannot do exhaustive testing.; `1e-12` is the conservative choice to keep closest to current master. **Why stay with LibXC defaults:**; However, LibXC defaults (see https://gist.github.com/hokru/546307545c7bf0d96de5cf867e036cae) are sometimes crude out of necessity (< 1e-10) and any custom value will be set recursively for all components.; This can lead to confusion especially if it is a functional definition provided by LibXC itself.; For example",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860:1825,simpl,simple,1825,https://psicode.org,https://github.com/psi4/psi4/pull/1860,1,['simpl'],['simple']
Usability,](https://github.com/psi4/psi4private/tree/c4) @loriab; - [ ] [nto](https://github.com/psi4/psi4private/tree/nto) @harls ; - [ ] [ash_fno](https://github.com/psi4/psi4private/tree/ash_fno) Ashutosh Kumar; - [ ] [ecp](https://github.com/psi4/psi4private/tree/ecp) @edeprince3 ; - [ ] [dfcc](https://github.com/psi4/psi4private/tree/dfcc) @andysim ; - [ ] [gfmm_cfmm](https://github.com/psi4/psi4private/tree/gfmm_cfmm) @bill-march; - [x] [asapt](https://github.com/psi4/psi4private/tree/asapt) @robparrish ; - [ ] [xtd](https://github.com/psi4/psi4private/tree/xtd) @harls ; - [ ] [cc](https://github.com/psi4/psi4private/tree/cc) @andysim ; - [x] [clean_python](https://github.com/psi4/psi4private/tree/clean_python) @loriab; - [ ] [gfmm_jk](https://github.com/psi4/psi4private/tree/gfmm_jk) @bill-march; - [ ] clear away old tickets; - **close** ; - [ ] psi4/psi4private#8; - [ ] psi4/psi4private#11 ; - [ ] psi4/psi4private#21 ; - [ ] psi4/psi4private#39 ; - [ ] psi4/psi4private#51 ; - [ ] psi4/psi4private#61 (after @robparrish signs off); - [ ] psi4/psi4private#79 (after @edeprince3 signs off) ; - [x] psi4/psi4private#110; - [x] psi4/psi4private#120 (after @dgasmith extract anything important into devel wishlist); - move to **developers wishlist** copying any good links or comments ; - [ ] psi4/psi4private#5 ; - [ ] psi4/psi4private#6 ; - [ ] psi4/psi4private#13 ; - [ ] psi4/psi4private#14 ; - [ ] psi4/psi4private#18 ; - [ ] psi4/psi4private#46 ; - [ ] psi4/psi4private#50 (keep the link) ; - [ ] psi4/psi4private#53 ; - [ ] psi4/psi4private#57 ; - [ ] psi4/psi4private#74; - **new ticket in psi4/psi4**; - [ ] psi4/psi4private#3 (hit a psio error trying to confirm-or-deny. will try to make gists public); - [ ] psi4/psi4private#16 ; - [ ] psi4/psi4private#20 ; - [ ] psi4/psi4private#54 ; - [ ] psi4/psi4private#75 + psi4/psi4private#92; - [x] repost as a public psi4/psi4betas repo with branches:; - [x] `4.0b1`; - [x] `4.0b2`; - [x] `4.0b3`; - [x] `4.0b4`; - [x] `4.0b5`; - [x] `1.0`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/508:3877,clear,clear,3877,https://psicode.org,https://github.com/psi4/psi4/issues/508,1,['clear'],['clear']
Usability,"][0], na + nb, 0.0,; 												 |	 C1a->pointer()[0], na); ; std::shared_ptr<Matrix> Qbs(Jbs->clone());							 |	 C_DGEMM('N', 'N', nn, nb, nb, 1.0, Cocc0B->pointer()[0], nb, &Dp[na][na], na + nb, 0.0,; Qbs->zero();										 |	 C1b->pointer()[0], nb); ; Qbs->add(Jbs);										 |	 C_DGEMM('N', 'N', nn, na, nb, 1.0, Cocc0B->pointer()[0], nb, &Dp[na][0], na + nb, 0.0,; Qbs->add(Vbs);										 |	 C2a->pointer()[0], na); ; 												 |	 C_DGEMM('N', 'N', nn, nb, na, 1.0, Cocc0A->pointer()[0], na, &Dp[0][na], na + nb, 0.0,; Jbr.reset();										 |	 C2b->pointer()[0], nb);; Kbr.reset();										 |; Jas.reset();										 |	 // Coeffs for all occupied; Kas.reset();										 |	 std::vector<std::shared_ptr<Matrix> > hold_these;; KOas.reset();										 |	 hold_these.push_back(Cocc0A);; KObr.reset();										 |	 hold_these.push_back(Cocc0B);; JBas.reset();										 |	 ; JAbr.reset();										 |	 auto Cocc0AB = Matrix::horzcat(hold_these);; Jbs.reset();										 |	 hold_these.clear();; Jar.reset();										 |	 ; JAas.reset();										 |	 // Half transform D_ia and D_ib for JK; JBbr.reset();										 |	 auto D_Ni_a = std::make_shared<Matrix>(""D_Ni_a"", nn, na + nb);; Vbs.reset();										 |	 auto D_Ni_b = std::make_shared<Matrix>(""D_Ni_b"", nn, na + nb);; Var.reset();										 |	 ; VBas.reset();										 |	 C_DGEMM('N', 'N', nn, na + nb, na, 1.0, Cocc0A->pointer()[0], na, &Dp[0][0], na + nb, 0.0, ; VAbr.reset();										 |	 D_Ni_a->pointer()[0], na + nb);; VRas.reset();										 |	 C_DGEMM('N', 'N', nn, na + nb, nb, 1.0, Cocc0B->pointer()[0], nb, &Dp[na][0], na + nb, 0.0,; VSbr.reset();										 |	 D_Ni_b->pointer()[0], na + nb);; 												 >; 												 >	 // Make JK's; 												 >	 jk_ = JK::build_JK(primary_, reference_->get_basisset(""DF_BASIS_SCF""), options_, false, doub; 												 >	 jk_->set_memory(doubles_);; 												 >	 jk_->set_do_J(true);; 												 >	 jk_->set_do_K(true);; 												 >	 jk_->initialize();; 												 >	 jk_->",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790:11423,clear,clear,11423,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790,1,['clear'],['clear']
Usability,"_, here's my proposal for how to make the code more readable.; > ; > First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate.; > ; > The code is now divided into the following => level chunks:; > ; > => Prep Auxiliary Quantities <=; > ; > * Zeroing, Sizing, Atom Blocking all go here; > ; > => Prep Atom Pairs <=; > ; > * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it.; > ; > => Prep Bra-Bra Shell Pairs <=; > ; > * What is currently, ""Store shell pairs that are significant by Schwarz estimate""; > ; > => Prep Bra-Ket Shell Pairs <=; > ; > * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets.; > ; > => Integral Formation Loop <=; > ; > * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning.; > ; > How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look.; > ; > And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes. Made the changes. Please take another look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248:1903,undo,undo,1903,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248,1,['undo'],['undo']
Usability,"_If_ we go with Zach's suggestion, then I insist that the code emit a warning when there are negative grid weights with COSX. We're in a case where the original COSX procedure is undefined, and the user should know that, whether our fix is intuitive or not. (I don't know COSX theory well enough to comment on that.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1503657450:240,intuit,intuitive,240,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1503657450,1,['intuit'],['intuitive']
Usability,"_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------------------------------------; Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:3128,clear,clear,3128,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['clear'],['clear']
Usability,"_indices""],; + },; ""e_convergence"": 9}; }; import copy; @@ -146,6 +149,8 @@ expected_return_result[""wiberg_lowdin_indices""] = np.array(expected_return_resul; expected_return_result[""mayer_indices""] = np.array(expected_return_result[""mayer_indices""]).reshape((3, 3)); ; json_ret = psi4.json_wrapper.run_qcschema(json_data).dict(); +import pprint; +pprint.pprint(json_ret, width=200); ; # can't write msgpack arrays to json; ; @@ -156,3 +161,5 @@ for k in expected_return_result.keys():; ; for k in expected_properties.keys(): #TEST; psi4.compare_values(expected_properties[k], json_ret[""properties""][k], 5, k.upper()) #TEST; +; +print(json_ret[""extras""][""qcvars""][""DIPOLE POLARIZABILITY XX""]); ```; * (2) Access the results afterwards in the AtomicResult through `print(json_ret[""extras""][""qcvars""][""DIPOLE POLARIZABILITY XX""])` and similarly for other 8 components. Bad news: as you see, none of that specification was intuitive or in line with other properties, the polarizability wasn't in return_result like other properties, and polarizabilities missed the boat when multipoles got converted to single arrays from multiple scalars. This could clearly use some cleanup, so please leave the issue open. ----; running the schema-1-properties test with mods above now ends with:. ```; '\n'; ' ==> Response Properties <==\n'; '\n'; ' => Dipole polarizabilities <=\n'; '\n'; ' X Y Z \n'; ' ----- ---------- ---------- ----------\n'; ' X 1.32497 -0.00000 -0.00000\n'; ' Y -0.00000 7.67620 0.00000\n'; ' Z -0.00000 -0.00000 4.87695\n'; '\n'; '*** tstop() called on psinet at Thu Apr 7 18:34:48 2022\n'; 'Module time:\n'; '\tuser time = 0.24 seconds = 0.00 minutes\n'; '\tsystem time = 0.01 seconds = 0.00 minutes\n'; '\ttotal time = 0 seconds = 0.00 minutes\n'; 'Total time:\n'; '\tuser time = 0.53 seconds = 0.01 minutes\n'; '\tsystem time = 0.02 seconds = 0.00 minutes\n'; '\ttotal time = 1 seconds = 0.02 minutes\n'; '\n'; ' Psi4 stopped on: Thursday, 07 April 2022 06:34PM\n'; ' Psi4 wall time for ex",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2535#issuecomment-1092277160:1661,intuit,intuitive,1661,https://psicode.org,https://github.com/psi4/psi4/issues/2535#issuecomment-1092277160,1,['intuit'],['intuitive']
Usability,"` psi4numpy-rhf-hessian` for whatever reason is simply not completing on Travis, works fine on my laptop. Unsure how to debug this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-383972297:48,simpl,simply,48,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-383972297,1,['simpl'],['simply']
Usability,`AtomicComputer` clears options state,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2733:17,clear,clears,17,https://psicode.org,https://github.com/psi4/psi4/issues/2733,1,['clear'],['clears']
Usability,`DEFAULT_SYM_TOL` would simply become an attribute of the Molecule class that would have a getter/setter. The downside to this is it would be difficult to have calls like `symmetrize(double tol)`. It would simply always take the internal attribute.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/232#issuecomment-205862342:24,simpl,simply,24,https://psicode.org,https://github.com/psi4/psi4/issues/232#issuecomment-205862342,2,['simpl'],['simply']
Usability,"`DF_SCF_GUESS`.; - Tests have been expanded. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`. The grid used by the COSX guess can be controlled by the `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` keywords.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`.; - [X] Expands the use cases of the `COSX_RADIAL_POINTS_INITIAL`, `COSX_SPHERICAL_POINTS_INITIAL`, and `COSX_MAXITER_FINAL` keywords. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` control the size of the grid used for the `SCF_COSX_GUESS` guess ( default: (20/50) ). `COSX_MAXITER_FINAL` controls how many `DIRECT`/`DFDIRJ+LINK` iterations to run after the converged `COSX` SCF (default: 2).; -[X] Cleans up `scf_iterator.py`, renaming `early_screening` and all associated variables, and adding comments for cases where multi-stage SCF convergence procedures are used.; - [X] Adds testing for `SCF_COSX_GUESS` and `COSX_MAXITER_FINAL`. ## Questions; - [ ] I already",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:2981,usab,usable,2981,https://psicode.org,https://github.com/psi4/psi4/pull/3158,1,['usab'],['usable']
Usability,`OS` is for one-step which I couldn't get to work in a robust manner. Please simply remove.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2635#issuecomment-1190895392:77,simpl,simply,77,https://psicode.org,https://github.com/psi4/psi4/issues/2635#issuecomment-1190895392,1,['simpl'],['simply']
Usability,"```; Psi4Num: 0.011650390674; New Psi: 0.011650262043; ^; Old Psi: 0.011614594883; ^; CD-5PT : 0.011650363426; ^; ```. Not that I'd _recommend_ trusting a finite difference gradient to eight decimal places, but it looks like we're clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-592153360:231,clear,clear,231,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-592153360,1,['clear'],['clear']
Usability,"```; nremove = 5. Da = np.array(wfn.Da()); Ca = np.array(wfn.Ca()). D = Da - np.einsum('pi,qi->pq', Ca[:, :nremove], Ca[:, :nremove]); D = psi4.core.Matrix.from_array(D). wfn.Da().copy(D). psi4.set_options({""CUBEPROP_TASKS"": [""density""]}); cube = psi4.core.CubeProperties(wfn); cube.compute_properties(); ```. Please note we destroy the wavefunction here, it will not be usable for other purposes. This is with Psi4 1.2, there are changes post in the current master and in 1.3 which will change this I believe. This also will not currently work with symmetry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436446184:371,usab,usable,371,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436446184,1,['usab'],['usable']
Usability,"`bypass_scf` _should_ not work as there is no longer a global wavefunction. So this simply need to be purged from docs/driver/etc and replaced with:. ``` python; scf_e, scf_wfn = energy('SCF', return_wfn = True); energy('other_method', ref_wfn=scf_wfn); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/353#issuecomment-211380881:84,simpl,simply,84,https://psicode.org,https://github.com/psi4/psi4/issues/353#issuecomment-211380881,1,['simpl'],['simply']
Usability,"`dict_func[""name""]` should be capitalised properly to look nice in printing. The `dashparams[disp_type][func].lower()` keys are matched against all aliases (including `dict_func[""name""].lower()`), if there is a match with any of them, all variants are generated. This is done here:; https://github.com/psi4/psi4/blob/a2eb599d9f08b976193a14c19b1a0cc9e643e9bf/psi4/driver/procrouting/dft_funcs/dict_builder.py#L126-L144. Aliases can be defined anywhere, not only in `dict_xc_funcs.py`. . Again: a slight nuisance are the two `-3c` functionals. I'd really like to have their names set to `PBEh-3c` and `HF-3c`, however the dashes mess with gCP here:. https://github.com/psi4/psi4/blob/a2eb599d9f08b976193a14c19b1a0cc9e643e9bf/psi4/driver/procrouting/empirical_dispersion.py#L235-L243. The dashes have to be stripped from the name passed to gCP, otherwise it returns no correction. A simple fix of `self.alias.replace(""-"","""")`, such as is done for dftd3, might do...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-385928190:880,simpl,simple,880,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-385928190,1,['simpl'],['simple']
Usability,"ads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1742,clear,clearing,1742,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['clear'],['clearing']
Usability,"aha, here's where the psi vs libxc vs qchem tests went – knew I had seen them somewhere. this is a simple PR and shouldn't need much work to get it ready to merge when you have the time, @bwb314.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-358387786:99,simpl,simple,99,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-358387786,1,['simpl'],['simple']
Usability,"ails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:1463,guid,guido,1463,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['guid'],['guido']
Usability,"ains the definition; for vwn3rpa); http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5.pdf; http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5rpa.pdf. We also refer to the VWN paper (; http://www.nrcresearchpress.com/doi/pdf/10.1139/p80-159). In VWN, any; functional with ""RPA"" means that the parameters of their Pade interpolation; formula across r_s are fit to RPA computations, any functional without; means that the same parameters are fit to the QMC data of Ceperley and; Alder. For RPA/non-RPA, VWN perform one Pade fit across r_s for; ferromagnetic limit (EcP), one for the paramagnetic limit (EcF). The RPA; fit is given in the middle of page 1207 in the left column (parameter c =; EcP4 = 42.7198), while the QMC fit is given in Table I on page 1207; (parameter c = EcP4 = 12.9352). The remaining question of the paper is the issue of interpolation across; spin polarization z. This is where VWN 1-5 are defined - they have; different spin-interpolation formulae, and all give the same results for; closed-shell systems. That B3LYP and B3LYP5 differ for closed-shell systems means that the; notation has been bastardized. Clearly B3LYP uses the RPA parameters while; B3LYP5 uses the QMC parameters. But then the question of which VWN is to be; used is less clear. The one currently used in PSI4 comes from the density; functional repository above, which is actually VWN1 with the RPA; parameters. Lori has generously agreed to provide some reference data from other codes; for open-shell systems so we can double-check the choice of VWN for; spin-polarized cases. We'll get this fully cleared up as soon as those; numbers come in. Best,. -Rob. On Tue, Apr 12, 2016 at 8:13 PM, Lori A. Burns notifications@github.com; wrote:. > @robparrish https://github.com/robparrish, any warnings or guidance on; > the major question above?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/339#issuecomment-209208010",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-209236558:1334,Clear,Clearly,1334,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209236558,4,"['Clear', 'clear', 'guid']","['Clearly', 'clear', 'cleared', 'guidance']"
Usability,"all libraries are present : ; I simply compiled gcc_5.1.0 on the cluster, and not used conda. ```; linux-vdso.so.1 (0x00007fff025ff000); libpython2.7.so.1.0 => /usr/lib64/libpython2.7.so.1.0 (0x00007f847b3c0000); libdl.so.2 => /lib64/libdl.so.2 (0x00007f847b19b000); liblapack.so.3 => /usr/lib64/liblapack.so.3 (0x00007f847a936000); libblas.so.3 => /usr/lib64/libblas.so.3 (0x00007f847a6dd000); libmkl_intel_lp64.so => /home/LUCA/intel_lib/libmkl_intel_lp64.so (0x00007f8479f95000); libmkl_intel_thread.so => /home/LUCA/intel_lib/libmkl_intel_thread.so (0x00007f8478fab000); libmkl_core.so => /home/LUCA/intel_lib/libmkl_core.so (0x00007f84778cd000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f84776b0000); libm.so.6 => /lib64/libm.so.6 (0x00007f84773b2000); libimf.so => /home/LUCA/intel_lib/libimf.so (0x00007f8476eef000); libsvml.so => /home/LUCA/intel_lib/libsvml.so (0x00007f84762f3000); libirng.so => /home/LUCA/intel_lib/libirng.so (0x00007f84760ec000); libstdc++.so.6 => /home/LUCA/intel_lib/gcc_5.1.0/lib64/libstdc++.so.6 (0x00007f8475d69000); libiomp5.so => /home/LUCA/intel_lib/libiomp5.so (0x00007f8475a50000); libgcc_s.so.1 => /home/LUCA/intel_lib/gcc_5.1.0/lib64/libgcc_s.so.1 (0x00007f8475839000); libintlc.so.5 => /home/LUCA/intel_lib/libintlc.so.5 (0x00007f84755e3000); libc.so.6 => /lib64/libc.so.6 (0x00007f8475234000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f8475031000); /lib64/ld-linux-x86-64.so.2 (0x00007f847e96c000); libgfortran.so.3 => /home/LUCA/intel_lib/gcc_5.1.0/lib64/libgfortran.so.3 (0x00007f8474d0e000); libquadmath.so.0 => /home/LUCA/intel_lib/gcc_5.1.0/lib64/libquadmath.so.0 (0x00007f8474ace000); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261748009:32,simpl,simply,32,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261748009,1,['simpl'],['simply']
Usability,"alled from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""input.py""; ; infiles = [inputdat]; if extra_infiles:; infiles.extend(extra_infiles); infiles_with_contents = {Path(fl).name: (ctestdir / fl).read_text() for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E Asserti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:6206,simpl,simple,6206,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['simpl'],['simple']
Usability,allow and prefer simple-dftd3 and mctc-gcp,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:17,simpl,simple-,17,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['simpl'],['simple-']
Usability,"an imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to assume that the three-center intermediate (naux*nmo^2) fits in memory. To remedy this, `dfmp2` uses a block algorithm, where it reads only ""blocks"" of this intermediate at a time. The old DF gradient code was based on Rob's `dfmp2` but in simplifying from Rob's code, had a block algorithm that used unnecessarily many blocks and incurred no memory savings compared to an in-core algorithm. The new code has a `dfmp2`-style out-of-core algorithm. ## Todos; - [x] Migrate DF gradients; - [x] Add block algorithm for the 3-Center term . ## Checklist; - [x] `ctest -L quick` and `ctest -L df[ocm]` both pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:2780,simpl,simplifying,2780,https://psicode.org,https://github.com/psi4/psi4/pull/2079,1,['simpl'],['simplifying']
Usability,"an't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to as",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:1451,Simpl,Simplifying,1451,https://psicode.org,https://github.com/psi4/psi4/pull/2079,1,['Simpl'],['Simplifying']
Usability,"and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1700,clear,clearly,1700,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['clear'],['clearly']
Usability,"any non-VV10 DFT functional currently (release v1.2.1) crashes already if one sets `DFT_VV10_POSTSCF true`, simply because VV10 is turned on without any checks. . And while writing about the problem with the modified libxc functionals, I figured i need to switch two lines of code!; What got me stuck, was that using `set_vv10_b` in `dict_builder.py` re-activated VV10, and I need to use it before turning off VV10. Now waiting on the reference outputs from Lars to make a test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320#issuecomment-439212034:108,simpl,simply,108,https://psicode.org,https://github.com/psi4/psi4/pull/1320#issuecomment-439212034,1,['simpl'],['simply']
Usability,appease numpy and clear thermo,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/985:18,clear,clear,18,https://psicode.org,https://github.com/psi4/psi4/pull/985,1,['clear'],['clear']
Usability,"b.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:1073,clear,clear,1073,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,1,['clear'],['clear']
Usability,"b/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L2513 . If the user passes in a set of `**kwargs`, those get parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1486. Finally, if the user passes in `cbs_metadata` as an argument, this does not get parsed. Note that all three of those have to be ""validated""... > ; > What transformations are applied to that structured dictionary by the time it enters that input function, where is the specification for the input dictionary, and where is the specification for the output dictionary? I know that the input dictionaries are allowed to have a ""treatment"" field, but the output dictionaries are not, so they need to have different specifications. The only specification I see is in the ""Combined interface"" section of the `cbs` docstring. So we have a missing specification. So the user-facing portion (which is the only real spec) is defined in the ""combined interface"". The internal ""validated"" dictionary is in my view perfectly well documented here:; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365 . I question whether the validated dictionary needs further specification, as it's not user facing. Note that the validator function is under-prefixed, so having a docstring for it is kinda moot anyway. > ; > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete. This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into the separate functions above, it's simpler to interpret both of these branches as an incomplete `cbs_metadata` which then needs to be validated anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373:2487,simpl,simpler,2487,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373,1,['simpl'],['simpler']
Usability,"build constructors by following instructions https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md. * edit tag and hash; * clear package cache; * `python run.py`; * check for noarch (BAD); * upload to vergil. generate the download site; * create new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md mind the edition string `v13rc2` for this and future filenames; * copy and edit new https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; * enter `scripts/` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; * run the `install-generator.py` in place. it will dump new files into `data/installs/` _subdirs_. be sure to `git add` them.; * installer page is ready. if wanted, edit the desination of the `Download` nav button https://github.com/psi4/psicode-hugo-website/blob/master/config.toml#L35; * pays to test; * installer on Mac and Linux; * that download button and `curl` downloading register on the download counters on vergil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733:165,clear,clear,165,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733,1,['clear'],['clear']
Usability,"bump ambit, clear addons from azure",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2546:12,clear,clear,12,https://psicode.org,https://github.com/psi4/psi4/pull/2546,1,['clear'],['clear']
Usability,"careful with SCAN though.I don't know how Q-chem implemented this functional, but the Turbomole implementation requires quite a hefty increase in radial grid points to get gradients usable for optimizations. Angular grid is unproblematic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382385597:182,usab,usable,182,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382385597,1,['usab'],['usable']
Usability,"ces::DMRGSCFindices(int, int, int*, int*, int*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:482: undefined reference to `CheMPS2::DMRGSCFunitary::DMRGSCFunitary(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:484: undefined reference to `CheMPS2::DMRGSCFintegrals::DMRGSCFintegrals(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:485: undefined reference to `CheMPS2::DMRGSCFindices::getDMRGcumulative(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:488: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:488: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:489: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:489: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:490: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:490: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:491: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:491: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:492: undefined reference to `CheMPS2::DMRGSCFwtilde::DMRGSCFwtilde(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:517: undefined reference to `CheMPS2::Hamiltonian::Hamiltonian(int, int, int const*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:523: undefined reference to `CheMPS2::Problem::Problem(CheMPS2::Hamiltonian const*, int, int, int)'; /home/seba/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:14762,clear,clear,14762,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['clear'],['clear']
Usability,clear filesystem from FISAPT,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1098:0,clear,clear,0,https://psicode.org,https://github.com/psi4/psi4/pull/1098,1,['clear'],['clear']
Usability,conda-forge; pip 24.0 pyhd8ed1ab_0 conda-forge; platformdirs 4.2.0 pyhd8ed1ab_0 conda-forge; pluggy 1.4.0 pyhd8ed1ab_0 conda-forge; psi4 1.9.1 py310h2a5c594_2 conda-forge; psutil 6.0.0 py310hc51659f_0 conda-forge; pugixml 1.14 h59595ed_0 conda-forge; py-cpuinfo 9.0.0 pyhd8ed1ab_0 conda-forge; pybind11-abi 4 hd8ed1ab_3 conda-forge; pycosat 0.6.6 py310h2372a71_0 conda-forge; pycparser 2.21 pyhd8ed1ab_0 conda-forge; pydantic 2.6.1 pyhd8ed1ab_0 conda-forge; pydantic-core 2.16.2 py310hcb5633a_1 conda-forge; pyddx 0.6.0 py310h328bd66_2 conda-forge; pylibefp 0.6.2 py310he0c9aae_4 conda-forge; pysocks 1.7.1 pyha2e5f31_6 conda-forge; pytest 7.4.4 pyhd8ed1ab_0 conda-forge; pytest-xdist 3.5.0 pyhd8ed1ab_0 conda-forge; python 3.10.14 hd12c33a_0_cpython conda-forge; python_abi 3.10 4_cp310 conda-forge; pyyaml 6.0.1 py310h2372a71_1 conda-forge; qcelemental 0.28.0 pyhd8ed1ab_0 conda-forge; qcengine 0.30.0 pyhd8ed1ab_0 conda-forge; readline 8.2 h8228510_1 conda-forge; reproc 14.2.4.post0 hd590300_1 conda-forge; reproc-cpp 14.2.4.post0 h59595ed_1 conda-forge; requests 2.31.0 pyhd8ed1ab_0 conda-forge; ruamel.yaml 0.18.6 py310h2372a71_0 conda-forge; ruamel.yaml.clib 0.2.8 py310h2372a71_0 conda-forge; scipy 1.14.0 py310h93e2701_0 conda-forge; setuptools 69.0.3 pyhd8ed1ab_0 conda-forge; simple-dftd3 1.0.0 hd59d2e7_0 conda-forge; six 1.16.0 pyh6c4a22f_0 conda-forge; tbb 2021.11.0 h00ab1b0_1 conda-forge; tk 8.6.13 h2797004_0 conda-forge; toml-f 0.4.2 hd8f1df9_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; tqdm 4.66.1 pyhd8ed1ab_0 conda-forge; truststore 0.8.0 pyhd8ed1ab_0 conda-forge; typing-extensions 4.9.0 hd8ed1ab_0 conda-forge; typing_extensions 4.9.0 pyha770c72_0 conda-forge; tzdata 2024a h0c530f3_0 conda-forge; urllib3 2.2.0 pyhd8ed1ab_0 conda-forge; wheel 0.42.0 pyhd8ed1ab_0 conda-forge; xz 5.2.6 h166bdaf_0 conda-forge; yaml 0.2.5 h7f98852_2 conda-forge; yaml-cpp 0.8.0 h59595ed_0 conda-forge; zstandard 0.22.0 py310hab88d88_1 conda-forge; zstd 1.5.6 ha6fb4c9_0 conda-forge; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195225098:5316,simpl,simple-,5316,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195225098,1,['simpl'],['simple-']
Usability,"ctrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,; *,; title: str = """",; x_title: Tuple[str, str] = (""ω"", ""au""),; y_title: Tuple[str, str] = (""ε"", ""L⋅mol⁻¹⋅cm⁻¹""),; offset: int = 0):; hover = alt.selection_single(; fields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). s2 = pd.DataFrame(data[""sticks""]); sticks = alt.Chart(s2).mark_bar(size=2, opacity=0.2, color=""red"").encode(; x=""poles:Q"",; y=""residues:Q"",; ). # Put the layers into a chart and bind the data; plot = alt.layer(; lines, points, tooltips, sticks,; ).properties(; title=title,; ). return plot. # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:2229,clear,clear,2229,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,1,['clear'],['clear']
Usability,"d bite-sized extractions. What's left here is the gory core. Because code is moving around, there's no good way to review it. The plain code file is often easier to read than the diff. Below are the 6 key files.; * `driver.py` — mostly deletions. notice that the main e/g/h functions instead of having several layers when you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:1329,simpl,simple,1329,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['simpl'],['simple']
Usability,"d functionality has been expanded. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` can be used to control the `COSX` grid size for the `SCF_COSX_GUESS`, with the grid in this context defaulting to (20/50). `COSX_MAXITER_FINAL` can be used to control the number of `DIRECT`/`DFDIRJ+LINK` iterations to run after the `COSX` guess, defaulting to 2 in this context. Note that the grid for `SCF_COSX_GUESS` uses different defaults compared to the usual initial grid for `DFDIRJ+COSX` runs. This PR also adds a fair bit of cleanup/QoL changes, as follows:; - The `early_screening` variable in `scf_iterator.py`, and all related quantities, have been renamed for clarity.; - `DFDIRJ+LINK` can now be used in conjunction with `DF_SCF_GUESS`.; - Tests have been expanded. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`. The grid used by the COSX guess can be controlled by the `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` keywords.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`.; - [X] Expands the `DF_SCF_G",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:2246,usab,usable,2246,https://psicode.org,https://github.com/psi4/psi4/pull/3158,1,['usab'],['usable']
Usability,"default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProje",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:2125,simpl,simply,2125,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['simpl'],['simply']
Usability,"dftd3's have proliferated (https://github.com/awvwgk/simple-dftd3/issues/4). @awvwgk thinks everything we use dftd3 classic for has been incorporated into `simple-dftd3`. It should be a medium-term goal to help kill our fork. may as well tackle the gcp exe to gcp-correction aka mctc-gcp shift at the same time since needed for SCAN. this already has a harness in QCEngine, whereas simple-dftd3 does not. closed by #2791",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2360:53,simpl,simple-,53,https://psicode.org,https://github.com/psi4/psi4/issues/2360,3,['simpl'],['simple-']
Usability,"ditional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965:1054,learn,learned,1054,https://psicode.org,https://github.com/psi4/psi4/pull/965,1,['learn'],['learned']
Usability,"e. the shape for **each atom** comes up to: `(60, num_basis_fn, num_basis_fn)`. ; this agrees with their explanation just below eqn 14, where their choice of `n` (and hence `gamma`) leads to a total of `16 x 1 + 8 x 3 + 4 x 5 = 60` unique functions for their ""auxiliary Gaussian-type basis functions"" in eqn 14. an important detail, is that I just want the matrix for a **single atom for each element**, which is why `num_basis_fn` is just counting all the basis functionsfor 1 atom. and they shouldn't depend on the context of the atom (i.e. what molecule it is part of). . to be extra clear, i've uploaded their published 3-index overlap integral pytorch tensor here: https://drive.google.com/file/d/1aF2QvfL4GTu17W35Rzv7yLo2gI_05Wx5/view?usp=share_link ; it is a dictionary indexed by the element symbols. their basis set is the semi-empirical tight-binding`GFN1-xTB`. for example, hydrogen has 2 basis functions in `GFN1-xTB`, so the shape of their 3-index integral matrix is `(60, 2, 2)`.; ```python; import torch; three_idx_integrals = torch.load(""orbnet2_overlap3idx.pt""); print(three_idx_integrals[""H""].shape); >> torch.Size([60, 2, 2]); ```. I think the best way to go about this would be to just re-implement the formulae for calculating these 3-index integrals, in python (since i'm most familiar with python), but to allow setting the `gamma` parameter so that I can create as many rows as I want for the 1st dimension. This should be easier than trying to change some inner part of `psi4` just to have this functionality. Could anyone give any advice, or point me into some possible reference code to start things off? as you can tell, i'm not a quantum physics expert, so all this is a learning curve for me. any help would be very much appreciated! i cannot ask the authors too much, due to conflict of interest with their company. (ref 85 is their proprietary software, which I haven't found much luck using); Sorry that this post came up to be quite long. Thank you so much!; Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892:3227,learn,learning,3227,https://psicode.org,https://github.com/psi4/psi4/issues/2892,1,['learn'],['learning']
Usability,"erface, and is responsible for calling GauXC within Psi4. When Psi4 is not built with GauXC support, snLinK will instead throw an exception upon construction, as implemented in a stub class. The `snLinK` class supports both CPU and GPU execution of GauXC, controllable at runtime via the `SNLINK_USE_GPU` keyword. Additionally, the `snLinK` class operates correctly regardless of the value of `psi4_SHGAUSS_ORDERING`, as well as for both Spherical and Cartesian basis sets. ; - [X] Updates the `test_compositejk.py` and `test_comprehensive_jk_screening.py` pytests to test sn-LinK functionalities, given that GauXC is installed.; - [X] Adds a new file, `gauxc_writer.py` to generate HDF5 files as input for GauXC's `standalone_driver` functionality. Reference files for benzene at the cc-pVDZ, cc-pVTZ, and cc-pVQZ basis set have been added, and a `test_gauxc_writer.py` file has been added to test the writer's functionality, given that GauXC is installed. . ## Notes; - Unlike COSX, which has a two-grid scheme currently, sn-LinK uses a single-grid scheme, simply converging the SCF on a single grid and leaving it at that. A multi-grid sn-LinK scheme is a potential idea for the future, but it is likely to be added as a separate PR.; - In terms of interfacing to GauXC, this PR only handles interfacing to the GauXC sn-LinK exact exchange algorithm through `CompositeJK`. GauXC, as I understand, also has capabilities for providing features such as standardized grids and functionals, but that is beyond the scope of this PR. ; - Currently, there is a an issue in the code wherein the code will break for cases where `SNLINK_FORCE_CARTESIAN` is turned on for calculations with symmetry enabled (i.e., non-C1 symmetry). For now, I simply have the code throw an exception for such cases, but it's worth noting. . ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] All or relevant fraction of full tests run. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:5702,simpl,simply,5702,https://psicode.org,https://github.com/psi4/psi4/pull/3150,2,['simpl'],['simply']
Usability,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:2738,simpl,simplified,2738,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['simpl'],['simplified']
Usability,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:1800,simpl,simple,1800,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['simpl'],['simple']
Usability,"evel'; (whatever its final name or design) is that a user could easily elect the; degree to which the optimizer should try different things to reach; convergence. On Tue, Nov 6, 2018 at 4:47 PM Lori A. Burns <notifications@github.com>; wrote:. > PRs psi-rking/optking#24 <https://github.com/psi-rking/optking/pull/24>; > and #1335 <https://github.com/psi4/psi4/pull/1335> are a pair. Together,; > they get most optimizations working for Psi. In particular have working:; >; > - ordinary, opt-is-full job optimizations; > - collecting all the psivars so psi can read them in. basically,; > collecting enough to generate a skeleton (mol, basis, psivars) that can be; > passed back from psi4.optimize(..., return_wfn=True); > - inlining optking's logging output into the psi4 output file; > - resetting psi4's options on either side of the; > optking.run_json_dict() call. The trouble was that the psi4-s imported; > by optking were clearing and setting options (as is proper for indep json; > runs) such that the calling psi4 didn't have its original options in; > globals upon optking termination; > - starting to catch optking errors (str in json) and re-raising them; > as psi4 errors.; >; > Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped; > me for a while b/c I only got the final error (""dynamic level exceeded""); > and I thought it was behaving differently btwn direct optking and psi4; > initiated runs. To me it seems clear that if geom_maxiter is exceeded, then; > optimizer quits directly (though perhaps that's clearer when geom_maxiter=2; > than =200).; >; > @psi-rking <https://github.com/psi-rking> @AlexHeide; > <https://github.com/AlexHeide>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1335#issuecomment-436437450>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTHzCC2j_z9TFbx5ofRV3X4D0BTSDks5ushF5gaJpZM4YQL0t>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061:1210,clear,clearing,1210,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061,3,['clear'],"['clear', 'clearer', 'clearing']"
Usability,"experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:1092,simpl,simply,1092,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,1,['simpl'],['simply']
Usability,"fferent way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i. Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation. For reference, the code that Susi linked does the following:; ```; for each irreducible representation of the first index of A, Ha:; 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; 	lda is the number of columns of matrix A; 	ldb is the number of columns of matrix B; 	ldc is the number of columns of matrix C; 	do the actual matrix multiplication; ```. BLAS savants will notice that I simplified the explanation of `lda`, `ldb`, and `ldc` because we can assume contiguous memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688:2177,simpl,simplified,2177,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688,1,['simpl'],['simplified']
Usability,"fit.gbs ); for((ib=0;ib<${#b[@]};ib++)); do for((jb=0;jb<ib;jb++)); do echo -n ""${b[ib]} vs ${b[jb]}: ""; diff ${b[ib]} ${b[jb]}| wc -l;done;done; def2-qzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 4; def2-sv_p_-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1727; def2-sv_p_-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1723; def2-svp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvpp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvpp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvpp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-tzvp-jkfit.gbs: 0; ```. According to @bennybp the sets should be all the same, see https://github.com/MolSSI-BSE/basis_set_exchange/issues/103. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] remove redundant def2-*-[jk|j]fit basis sets. Presuming Susi accepts my PR, this one will additionally accomplish; - [x] fixes #1798 At least make all the def2 orbital and rifit basis sets parseable. These have been read through diff_gbs.py so I know all the elements parse now. Variety of errors found.; - [x] helps #1804 by redirecting def2-*-jkfit specifications toward the universal files. only took about four files to find a satisfactory and minimally disruptive place for a simple map-and-warn :-(; - [x] helps plugins like v2rdm_casscf that are adding internal pb11 by attaching the found Python headers location to the plugin target. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1804:2719,simpl,simple,2719,https://psicode.org,https://github.com/psi4/psi4/pull/1804,1,['simpl'],['simple']
Usability,"for all architectures. ### Recent Upheaval. You may have noticed that the ""source"" option at https://psicode.org/installs/v18/ says ""check back later"". There are minor upheavals in the build procedure in that:; 1. Libint2 switched source again last week (akin to the several L2 switches in spring 2022) so you'll want a new conda environment.; 2. We're switching our primary binary distribution channel from `conda install psi4 -c psi4` to `conda install psi4 -c conda-forge` (latter cmd is a simplification -- don't use as-is), so while most of the `-c psi4` packages are perfectly compatible with master, they're not the freshest and will continue to decay.; 3. New release means new tag, so you'll need to pull tags anyway (`git fetch upstream 'refs/tags/*:refs/tags/*'`) for versioning, distributed driver, and dispersion addons to work. ### Interim Build Directions. Altogether, now is a good time to do a fresh clone, environment, and compile ... if only there were directions. The interim build guidance is:; 1. Create an environment from one of the ""buildrun"" env spec files under https://github.com/psi4/psi4/tree/master/devtools/conda-envs . First edit it to the python you want and the env name you want, and comment out any optional qc addons you don't want. ; 2. Then issue something like`conda env create -f Linux-buildrun-maxeco.yaml` and activate the environment. ; 3. Clone psi4, then `cmake -S. -Bobjdir -DBUILD_SHARED_LIBS=ON ...`, and it usually configures fine. ; 4. For Apple Silicon, there isn't a env yaml file yet, but replacing `libblas=*=*mkl` with `libblas=*=*accelerate` or `libblas=*=*openblas`, getting rid of other mkl lines, and aggressively pruning qc addons (not many ported to arm64) should do the trick.; 5. For Apple in general, you probably need the `target-sdk` stuff at https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml; 6. For Linux, if you want a high-AM L2, replace this line `conda-forge/label/libint_dev::libint=2.7.3dev1` https://g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:1288,guid,guidance,1288,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['guid'],['guidance']
Usability,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:44516,feedback,feedback,44516,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['feedback'],['feedback']
Usability,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:1773,simpl,simple-,1773,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['simpl'],['simple-']
Usability,"good catch, though. I tried to scan the changes with `git add -p` so that I could catch and undo and disable autoformatting of data structures, for instance. but it helps to have more eyes on the `diff`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1170#issuecomment-415882108:92,undo,undo,92,https://psicode.org,https://github.com/psi4/psi4/pull/1170#issuecomment-415882108,1,['undo'],['undo']
Usability,"hat happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1081,simpl,simply,1081,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,1,['simpl'],['simply']
Usability,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1595,simpl,simple,1595,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625,1,['simpl'],['simple']
Usability,"he buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 510: dftd3-energy; 1/5 Test #510: dftd3-energy ..................... Passed 24.64 sec; Start 511: dftd3-grad; 2/5 Test #511: dftd3-grad ....................... Passed 11.33 sec; Start 512: dftd3-psithon2; 3/5 Test #512: dftd3-psithon2 ................... Passed 13.39 sec; Start 5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:1243,simpl,simple,1243,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,1,['simpl'],['simple']
Usability,"hmm, right. Best to keep it simple and abort then, it's a corner case after all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375:28,simpl,simple,28,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375,1,['simpl'],['simple']
Usability,"hon(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2515:1303,clear,clear,1303,https://psicode.org,https://github.com/psi4/psi4/pull/2515,1,['clear'],['clear']
Usability,"hon; e, wfn = psi4.energy('ccsd', return_wfn=True); t2 = wfn.T2(); ```; At the time when the python bound function is called and the code for `CCEenergyWavefunction::T2()` is executed the `global_dpd_` the dpd object that the `global_dpd_` points to has been deleted out from under it (you can see [here](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/libdpd/init.cc#L59) that `dpd_set_default` will assign the `global_dpd_` pointer to `dpd_list[0]`, and below it is the code for `dpd_close` that will delete the object. I see two possible solutions. . - The easiest to implement would be to have the getters/setters check that `global_dpd_` is not `nullptr`, and if it is construct the dpd. Before doing the geting/setting. The function would also have to free the dpd object as well as other modules will assume that `global_dpd_` is null until they initialize it and `dpd_init` will throw when they try to create it. - The other option is to simply start phasing out the `global_dpd_` entirely. A data member can be added to the `CCEnergyWavefunction` and the member functions of the class can be modified to use that data member instead of the `global_dpd_`. The initialization of the data member is moved into the construtor and the dpd will be valid until the wavefunction is destroyed. The same would need to be done for the cclambda wavefunction as well. . The constructing the dpd object is far from trival as it allocates memory for and computes index translations for all possible pairs and quartets of the orbital subspaces provided, since this is only done once at the beginning of each module using a DPD I haven't looked into how significan the overhead is but it may be an issue for the first option. The second option is better for code quality, and I once played around with this idea in a plugin years ago, but I never got to the point where I could test if there were any unforeseen consequences down the pipeline (subsequent calls to oth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978:1693,simpl,simply,1693,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978,1,['simpl'],['simply']
Usability,"how nearly every professional C++ library I am aware of does this (Boost, Eigen, TBB, ...). The second (and arguably better reason) is doing it any other way makes the superbuild a lot harder when something is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an ex",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:6633,clear,clears,6633,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['clear'],['clears']
Usability,"http://forum.psicode.org/t/scf-problems-please-help/765/14. ```; First ROHF (DZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; @ROHF Final Energy: -1271.85284181863290. Second ROHF (pwCVTZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; SCF Guess: Orbitals guess was supplied from a previous computation.; @ROHF Final Energy: -1267.93014988281766; ```. Even though converged docc and socc are the same, we get a difference of 4 Hartrees in the initial versus final ROHF. . Below is a simpler input that shows the problem. ```; molecule {; 0 4; Fe; H 1 1.566665; }. set {; reference rohf; docc [7, 0, 3, 2]; socc [1, 1, 0, 1]; scf_type pk; relativistic dkh; dkh_order 2; print_mos true; maxiter=500; freeze_core false; }. basis mine2{; spherical; ****; Fe 0; S 20 1.00; 4.316265E+06 8.048803E-06; 6.463424E+05 6.258306E-05; 1.470897E+05 3.290239E-04; 4.166152E+04 1.387355E-03; 1.359077E+04 5.023256E-03; 4.905750E+03 1.610140E-02; 1.912746E+03 4.590034E-02; 7.926043E+02 1.136154E-01; 3.448065E+02 2.283869E-01; 1.558999E+02 3.221159E-01; 7.223091E+01 2.383661E-01; 3.272506E+01 7.404667E-02; 1.566762E+01 9.214197E-02; 7.503483E+00 9.339790E-02; 3.312223E+00 1.573965E-02; 1.558471E+00 -4.186682E-04; 6.839140E-01 5.376318E-05; 1.467570E-01 -3.816654E-05; 7.058300E-02 4.319603E-05; 3.144900E-02 -3.401019E-06; S 20 1.00; 4.316265E+06 -4.155954E-06; 6.463424E+05 -3.231401E-05; 1.470897E+05 -1.699525E-04; 4.166152E+04 -7.171369E-04; 1.359077E+04 -2.603625E-03; 4.905750E+03 -8.399109E-03; 1.912746E+03 -2.434109E-02; 7.926043E+02 -6.251948E-02; 3.448065E+02 -1.365929E-01; 1.558999E+02 -2.312707E-01; 7.223091E+01 -2.383734E-01; 3.272506E+01 3.123837E-02; 1.566762E+01 5.086818E-01; 7.503483E+00 4.987695E-01; 3.312223E+00 9.033552E-02; 1.558471E+00 -6.005337E-03; 6.839140E-01 2.312454E-04; 1.467570E-01 -5.643680E-04; 7.058300E-02 4.992260E-04; 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899:633,simpl,simpler,633,https://psicode.org,https://github.com/psi4/psi4/issues/899,1,['simpl'],['simpler']
Usability,https://github.com/psi4/psi4/search?utf8=%E2%9C%93&q=v2rdm&type= should be a good guide of places to fill in gpu_dfcc links. My main reservation is how to supply a conda package for this; but that's not on your plate.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-388056593:82,guid,guide,82,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-388056593,1,['guid'],['guide']
Usability,https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Kinda funny they have a `STRICT` mode even for this..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633644562:89,guid,guide,89,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633644562,1,['guid'],['guide']
Usability,"ich @fevangelista brought up at the conference call yesterday. The SCF code as currently structured does not allow for custom SCF subclasses. The first problem is that the acceptable SCF solutions are hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1183-L1194). This is easily surmountable:. ```; diff --git a/psi4/driver/procrouting/proc.py b/psi4/driver/procrouting/proc.py; index d03fd6d54..f895a1a92 100644; --- a/psi4/driver/procrouting/proc.py; +++ b/psi4/driver/procrouting/proc.py; @@ -1182,16 +1182,15 @@ def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); - if reference in [""RHF"", ""RKS""]:; - wfn = core.RHF(ref_wfn, superfunc); - elif reference == ""ROHF"":; - wfn = core.ROHF(ref_wfn, superfunc); - elif reference in [""UHF"", ""UKS""]:; - wfn = core.UHF(ref_wfn, superfunc); - elif reference == ""CUHF"":; - wfn = core.CUHF(ref_wfn, superfunc); - else:; +; + # By setting core.name_of_SCF_method, a plugin dev can register an SCF subclass.; + wfn_aliases = {""RKS"": ""RHF"", ""UKS"": ""UHF""}; + constructor_name = wfn_aliases.get(reference, reference); + try:; + wfn_constructor = getattr(core, constructor_name); + except AttributeError:; raise ValidationError(""SCF: Unknown reference (%s) when building the Wavefunction."" % reference); + wfn = wfn_constructor(ref_wfn, superfunc); ; if _disp_functor and _disp_functor.engine != 'nl':; wfn._disp_functor = _disp_functor; ```. However, the acceptable references are also hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1293). I'm not sure how to remedy this one. I would like to see how the code worked pre-inversion, to know why this wasn't a problem then. This will probably require a lot of digging in Forte's historical source. From my brief looking at it, at least some of the code that did the hookup is now missing. I can't delve into this further until I clear some other projects.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2267:1985,clear,clear,1985,https://psicode.org,https://github.com/psi4/psi4/issues/2267,1,['clear'],['clear']
Usability,"ifferent package names, versions, and channels, they're built from the same source, just different configuration. (I can't build a big AM w/i the 6h c-f time window.). ### Future Build Tools. Previously, the main build helper has been the `psi4-dev` conda package that combines a maximal set of build tools (compilers, cmake, etc.) and psi4 buildtime ecosystem packages along with a little script `psi4-path-advisor` to firmly configure cmake with conda env locations. As far as I know, this is pretty convenient and durable, especially for build-once-use-forever workflows. Complications I've heard of are (1) Mac `CONDA_BUILD_SYSROOT` sometimes required present/absent and (2) `psi4-dev` is monolithic, awkward to update, or sometimes out-of-date with psi4 master's requirements. I, for one, don't often use `psi4-dev` b/c I want more flexibility with switching out packages. **So, I'd be glad to hear thoughts on what form and contents the build helpers should take. A few plans and questions below, but any feedback appreciated.**. 1. Do you want docker images of the stuff that was in `psi4-dev`? I think from PsiCon2022 the answer is yes.; 2. Do you want minimal (build tools & req'd deps) or maximal (+ optional addons) or micro (no build tools, just L2, g2g, libxc, qcng, scipy, pytest) or several of those choices Docker images? (I have one vote for minimal.); 3. Docker images are hefty (~600MB for the built psi4). Can I just push them to a `latest` tag and overwrite old ones, or does there need to be a history?; 4. For Docker of psi4 itself, I'm only doing linux-64 (https://hub.docker.com/r/psi4/psi4/tags). Since docker is usually run VM-like, is that all developers want, or should I be building containers for other arch? Certainly I have the other-arch conda pkgs available -- it's just a matter of figuring out docker from them.; 5. I can build singularity/apptainer images from the Docker images, but I haven't figured out how to upload them yet. _For devs_, are apptainers wanted",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:3448,feedback,feedback,3448,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['feedback'],['feedback']
Usability,"igen_maps()` functions, then, return Eigen matrix-like objects that directly link with the Psi4 matrix data buffer of the Psi4 matrix for which the function was called. This provides an efficient fashion by which to utilize Psi4 matrices in contexts which require Eigen constructs, with no data deepcopying or Eigen-to-Psi4 back-conversions required. There is a key difference between the two functions. `eigen_map()` assumes that the matrix has a single irrep, and returns a single `Eigen::Map` object. `eigen_maps()` , on the other hand, is used for matrices with multiple irreps, and returns a `std::vector` of `Eigen::Map` objects, each `Map` in the `vector` corresponding to one irrep of the Psi4 matrix. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds two new functions, `eigen_map()` and `eigen_maps()`, usable in Psi4 plugins and downstream programs, that return a formulation of the calling `Psi::Matrix` object, that is usable in contexts where `Eigen::Matrix` objects are required/desired. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds two new member functions to `Psi4::Matrix`, `eigen_map()` and `eigen_maps()`, that return `Eigen::Map` representations of the Psi4 matrix object. ## Questions; - [X] N/A. ## Notes; - [X] I did look into forward declaring the necessary Eigen classes, but forward declaring `Eigen::Map` turns out to be a bit ugly, as it is a class template that, to forward declare, ends up requiring forward declarations for other Eigen classes and enums (such as `Stride` and `AlignmentType`) that aren't specifically necessary for the Psi4 use case. Therefore, I have skipped forward declarations here.; - [X] I can confirm the correctness ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3143:1605,usab,usable,1605,https://psicode.org,https://github.com/psi4/psi4/pull/3143,2,['usab'],['usable']
Usability,"initially asked in the [forum](http://forum.psicode.org/t/mo-basis-dipole-moments-and-amplitudes-at-positions/1856). my desired use-case is to calculate the amplitude at some list of points, actually (not over all space), so that would also be an reasonable API. the current ""state of the art"" is [here](https://gist.github.com/hokru/9b93fffc093dce0e8af8b9e54c120bb2), which clearly is a lot of work to get amplitudes, and prone to user error. perhaps a useful jumping-off point: [here is where the cubemap creates orbital iso-amplitude contours](https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/psi4/src/psi4/libcubeprop/csg.cc#L628-L653)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1941:375,clear,clearly,375,https://psicode.org,https://github.com/psi4/psi4/issues/1941,1,['clear'],['clearly']
Usability,"itals changes the energy only very slowly. These are fundamentally better described by orbital rotation techniques, e.g. the geometric direct minimization method #2214, where you just do everything in terms of orbital rotations. Direct minimization is bound to converge, and the convergence rate is often quite rapid. If you program ADIIS and/or EDIIS, one can tie them with C2-DIIS with linear interpolation. For instance, when the DIIS error is greater than `1e-2`, the DIIS extrapolation will be crap and might take you far up in energy. In this case it is better to use the ADIIS/EDIIS energy functional, which is just an **interpolation** between the current and previous iterations' Fock matrices. ADIIS/EDIIS takes you very quickly to the radius of convergence of DIIS, unless the problem is fundamentally ill-behaved (which you again can solve efficiently using GDM). If the DIIS error is in the range `1e-3, ..., 1e-2`, i.e. `log error = [-3, -2]`, then the DIIS solution likely has some truth in it, but it should still be guided by the ADIIS/EDIIS solution. Then you weigh the ADIIS/EDIIS and the C2DIIS solutions by linear interpolation from full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vecto",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:3145,guid,guided,3145,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,1,['guid'],['guided']
Usability,"ites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files, but this could influence p4n. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they are necessary for a clean docs build w/o hacks. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## S",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2162:1467,clear,clear,1467,https://psicode.org,https://github.com/psi4/psi4/pull/2162,1,['clear'],['clear']
Usability,"ix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i.; > ; > Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation.; > ; > For reference, the code that Susi linked does the following:; > ; > ```; > for each irreducible representation of the first index of A, Ha:; > 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; > Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); > 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; > 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; > 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; > 	lda is the number of columns of matrix A; > 	ldb is the number of columns of matrix B; > 	ldc is the number of columns of matrix C; > 	do the actual matrix multiplication; > ```; > ; > BLAS savants will notice that I simplified the explanation of `lda`, `ldb`, and `ldc` because we can assume contiguous memory. Thanks for the explanation. I edited the program to check for each symmetry block. I'm not entirely sure how the symmetry_ variable works (and the xor involvement), but I mimicked how it was used in other parts of the method.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010:2234,simpl,simplified,2234,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010,1,['simpl'],['simplified']
Usability,"jects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approach would be this: The call to `JK::compute()` doesn't zero out the `J`/`K`/`wK` matrices. Instead, the child JK class can choose to zero out their `J`/`K`/`wK` matrices (if performing a normal Fock build) or leave them as-is from the previous iteration and add to them (if performing an incremental Fock build). This way no previous iterations' `J`/`K`/`wK` matrices have to be saved, and the logic in `compute_JK` becomes much simpler. . > Is `early_screening_` for this ""semi-numerical exchange,"" or something else? How close is this other PR to completion. Yes, this is used in semi-numerical exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:1985,simpl,simpler,1985,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,2,['simpl'],['simpler']
Usability,"kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x00007ffff7a02f4b in PyEval_EvalCode (co=co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8) at Python/ceval.c:524; #17 0x00007ffff7a369e2 in run_mod (arena=0x7ffff7fc42d0, flags=0x7fffffffcf50, locals=0x7ffff7ecd1f8, globals=0x7ffff7ecd1f8, filename=0x7fffeffc0870, mod=0x6440f0) at Python/pythonrun.c:1035; #18 PyRun_FileExFlags (fp=fp@entry=0x67eb60, filename_str=filename_str@entry=0x7ffff7f89110 ""simple.2.py"", start=start@entry=257, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, closeit=closeit@entry=1,; flags=0x7fffffffcf50) at Python/pythonrun.c:988; #19 0x00007ffff7a36b55 in PyRun_SimpleFileExFlags (fp=fp@entry=0x67eb60, filename=<optimized out>, closeit=closeit@entry=1, flags=flags@entry=0x7fffffffcf50) at Python/pythonrun.c:429; #20 0x00007ffff7a36ff3 in PyRun_AnyFileExFlags (fp=fp@entry=0x67eb60, filename=<optimized out>, closeit=closeit@entry=1, flags=flags@entry=0x7fffffffcf50) at Python/pythonrun.c:84; #21 0x00007ffff7a58d27 in pymain_run_file (p_cf=0x7fffffffcf50, filename=0x603520 L""simple.2.py"", fp=0x67eb60) at Modules/main.c:427; #22 pymain_run_filename (cf=0x7fffffffcf50, pymain=0x7fffffffd030) at Modules/main.c:1627; #23 pymain_run_python (pymain=0x7fffffffd030) at Modules/main.c:2877; #24 pymain_main (pymain=pymain@entry=0x7fffffffd030) at Modules/main.c:3038; #25 0x00007ffff7a58fab in _Py_UnixMain (argc=<optimized out>, argv=<optimized out>) at Modules/main.c:3073; #26 0x00007ffff6978505 in __libc_start_main () from /lib64/libc.so.6; #27 0x00000000004008ce in _start (); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:6013,simpl,simple,6013,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,1,['simpl'],['simple']
Usability,"l bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:1864,clear,clearly,1864,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['clear'],['clearly']
Usability,"looks like it's clear,; ```log; 166/184 Test #457: python-databases ................. Passed 22.93 sec; ```; @loriab does these tags look ok??; ```; add_regression_test(python-databases ""psi;quicktests;python;noc1""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2252#issuecomment-882821767:16,clear,clear,16,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882821767,1,['clear'],['clear']
Usability,"lts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:1137,usab,usable,1137,https://psicode.org,https://github.com/psi4/psi4/pull/554,1,['usab'],['usable']
Usability,make DKH usable again,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/572:9,usab,usable,9,https://psicode.org,https://github.com/psi4/psi4/pull/572,1,['usab'],['usable']
Usability,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2531,resume,resume,2531,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,1,['resume'],['resume']
Usability,mary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 0 conda-forge; hdf5 1.8.17 11 conda-forge; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36_0 conda-forge; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_core 4.4.0 py_0 conda-forge; libefp 1.5b1 0 psi4/label/dev; libgfortran 3.0.0 1 ; libint 1.2.1 1 psi4/label/dev; libsodium 1.0.10 0 conda-forge; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.0 hb491cac_4 ; mpc 1.0.1 0 ; mpfr 3.1.2 0 ; ncurses 5.9 10 conda-forge; numpy 1.13.3 py36ha12f23b_0 ; openssl 1.0.2l 0 conda-forge; pcmsolver 1.1.10 py36_1 psi4/label/dev; pexpect 4.2.1 py36_0 conda-forge; pickleshare 0.7.4 py36_0 conda-forge; pip 9.0.1 py36_0 conda-forge; prompt_toolkit 1.0.15 py36_0 conda-forge; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; psi4-rt 1.2a1.dev3 py36_0 psi4/label/dev; ptyprocess 0.5.2 py36_0 conda-forge; py 1.5.2 py_0 conda-forge; pygments 2.2.0 py36_0 conda-forge; pytest 3.2.5 py36_0 conda-forge; python 3.6.3 1 conda-forge; python-dateutil 2.6.1 py36_0 conda-forge; pyzmq 16.0.2 py36_2 conda-forge; readline 6.2 0 conda-forge; setuptools 36.6.0 py36_1 conda-forge; simint 0.7 0 psi4; simplegeneric 0.8.1 py36_0 conda-forge; six 1.11.0 py36_1 conda-forge; sqlite 3.13.0 1 conda-forge; tk 8.5.19 2 conda-forge; tornado 4.5.2 py36_0 conda-forge; traitlets 4.3.2 py36_0 conda-forge; v2rdm_casscf 0.4 py36_1 psi4/label/dev; wcwidth 0.1.7 py36_0 conda-forge; wheel 0.30.0 py_1 conda-forge; xz 5.2.3 0 conda-forge; zeromq 4.2.1 1 conda-forge; zlib 1.2.11 0 conda-forge; ```; </p></details>,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:4290,simpl,simplegeneric,4290,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['simpl'],['simplegeneric']
Usability,"mebody looking over the code for the first time (which is what we want). _Accordingly_, here's my proposal for how to make the code more readable. First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate. The code is now divided into the following => level chunks:. => Prep Auxiliary Quantities <=; * Zeroing, Sizing, Atom Blocking all go here. => Prep Atom Pairs <=; * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it. => Prep Bra-Bra Shell Pairs <=; * What is currently, ""Store shell pairs that are significant by Schwarz estimate"". => Prep Bra-Ket Shell Pairs <=; * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets. => Integral Formation Loop <=; * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning. _______________________________________________. How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look. And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653:1860,undo,undo,1860,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653,1,['undo'],['undo']
Usability,"mpty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`.; - [X] Expands the use cases of the `COSX_RADIAL_POINTS_INITIAL`, `COSX_SPHERICAL_POINTS_INITIAL`, and `COSX_MAXITER_FINAL` keywords. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` control the size of the grid used for the `SCF_COSX_GUESS` guess ( default: (20/50) ). `COSX_MAXITER_FINAL` controls how many `DIRECT`/`DFDIRJ+LINK` iterations to run after the converged `COSX` SCF (default: 2).; -[X] Cleans up `scf_iterator.py`, renaming `early_screening` and all associated variables, and adding comments for cases where multi-stage SCF convergence procedures are used.; - [X] Adds testing for `SCF_COSX_GUESS` and `COSX_MAXITER_FINAL`. ## Questions; - [ ] I already know this will be brought up, so I'll start it off: what's the best name for this keyword? `SCF_COSX_GUESS` and `DF_SCF_GUESS` do very similar things, but have a different naming structure, i.e., SCF is located at a different point in the variable name. I intentionally picked `SCF_COSX_GUESS` because putting SCF at the front makes it clear that the option applies for the whole SCF rather than just COSX itself, which is exacerbated by the existence of other `COSX_xxx` variables that exist specifically for COSX. I actually wouldn't mind switching the name of `DF_SCF_GUESS`, too, to maintain consistency. But if `COSX_SCF_GUESS` is preferred by everyone else, I'll switch to that. . ## Checklist; - [X] Tests added for any new features; - [] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:4316,clear,clear,4316,https://psicode.org,https://github.com/psi4/psi4/pull/3158,1,['clear'],['clear']
Usability,"ned reference to `CheMPS2::DMRGSCFintegrals::DMRGSCFintegrals(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:485: undefined reference to `CheMPS2::DMRGSCFindices::getDMRGcumulative(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:488: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:488: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:489: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:489: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:490: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:490: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:491: undefined reference to `CheMPS2::DMRGSCFmatrix::DMRGSCFmatrix(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:491: undefined reference to `CheMPS2::DMRGSCFmatrix::clear()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:492: undefined reference to `CheMPS2::DMRGSCFwtilde::DMRGSCFwtilde(CheMPS2::DMRGSCFindices*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:517: undefined reference to `CheMPS2::Hamiltonian::Hamiltonian(int, int, int const*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:523: undefined reference to `CheMPS2::Problem::Problem(CheMPS2::Hamiltonian const*, int, int, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:524: undefined reference to `CheMPS2::Problem::checkConsistency() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:525: undefined reference to `CheMPS2::Problem::SetupReorderD2h()'; /home/seba/software/psi4-0.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:15026,clear,clear,15026,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['clear'],['clear']
Usability,needs scrutiny by @robertodr and @maxscheurer. I also learned about problems in the course of this that @hokru had already identified.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037#issuecomment-730873136:54,learn,learned,54,https://psicode.org,https://github.com/psi4/psi4/pull/2037#issuecomment-730873136,1,['learn'],['learned']
Usability,"no idea where to do this : . A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; PsiReturnType skeleton(Options& options); to:; SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185847048:111,simpl,simple,111,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185847048,1,['simpl'],['simple']
Usability,"nt more it appears you are correct and TMPDIR is; a Linux standard so I agree we should honor that within Psi4. You don't have to convince me of the merits of C++11 I'm fully on board; with it; however its use needs to be weighed against what our users are; willing to do because we dont want to alienate them nor do we want to have; to write each code twice, once for C98 and once for C++11. In particular,; those compilers you listed are all fairly new, less than 1 year old to a; couple years. I don't think we can force all our users to upgrade to stuff; that new. If you are not a Linux sys admin type, upgrading can be quite; the feat. Furthermore, I've actually run across HPC clusters that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105055171:1006,feedback,feedback,1006,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171,2,['feedback'],['feedback']
Usability,"nterest. 2016-01-14 9:43 GMT-05:00 ssh2 notifications@github.com:. > To Jerome's point, I would agree that for UHF doing stability analysis; > helps a lot. However, we have also seen cases when stability analysis; > severely breaks spin symmetry and converges on the wrong (or mixed) spin; > state instead of the lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for; > > these non-trivial cases with Psi4, but it may be worth investigating some; > > of these systems for possible improvements in the code.; > > ; > > Best wishes,; > > ; > > Alexander.; > > ; > > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I guess these other codes are; > > > using some other convergence accelerator than Psi4 ? I would not be; > > > surprised if SOSCF with a core guess would converge on the",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171662622:1517,simpl,simple,1517,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622,1,['simpl'],['simple']
Usability,"ntified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `un",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:1788,Simpl,Simplify,1788,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Simpl'],['Simplify']
Usability,"nvs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:10763,guid,guidance,10763,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['guid'],['guidance']
Usability,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:1261,simpl,simplicity,1261,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['simpl'],['simplicity']
Usability,"odels (COSMO, PCM, linearised Poisson-Boltzmann) following a domain-decomposition approach. At its current stage I open the PR to get some feedback from devs about the suggested changes and structure and to finalise the upstream python interface of ddX. Note that this PR Is currently deliberately done on top of an outdated master, since any commit after #2388 introduces segfaults (details see below), which so far I have not yet been able to trace down. Any help on that would be much appreciated. ## User API & Changelog headlines; - Implementation of PCM and COSMO solvation models based on the ddx library. ## Dev notes & details; - Introduction of a NumIntHelper class to compute some integrals numerically using a DFT grid; - Introduction of ddx solvation model and new ddx options. ## Reproducer for the mysterious segfault; As part of rebasing against the current master I encountered a really strange segfault. I managed to produce a minimal example, which has really nothing to do with ddx and only adds a python interface to a simple numerical electrostatic integral. See here for a [trimmed-down diff](https://github.com/psi4/psi4/compare/master...mfherbst:psi4:segfault). On my machine checking out this `segfault` branch with `0_configure.sh`, building and running the `mytests/runtests.sh` script gives a segfault inside the numerical integration in the `PCMPotentialInt` class. Note that the code I added *is not even called*, the call to `PCMPotentialInt` happens from the pcm code *which I have not modified*. Now, commenting out; ```c++; PrintIntegralsFunctor printer;; potential_integrals_->compute(printer);; ```; the segfault disappears. I'm getting the weird feeling I'm doing something really stupid here and I just missed it. ## Questions; - [x] Thoughts on the NumIntHelper?; - [x] Is D -> D_cart needed or not ([this stuff](https://github.com/psi4/psi4/pull/2767/commits/108b6bb1a53cdc428933475dea991e08a3330d98#diff-48947c7a095c933d6843e0564043f051b0e54dff111fff222bf25cd",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:1211,simpl,simple,1211,https://psicode.org,https://github.com/psi4/psi4/pull/2767,1,['simpl'],['simple']
Usability,"of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151:2159,simpl,simplification,2159,https://psicode.org,https://github.com/psi4/psi4/pull/1151,1,['simpl'],['simplification']
Usability,"ok, I just rebased this, rebuilt with all addons, and ran fulltests. I think it's ready. The interface to physconst may change soonish, but the values of the physical constants won't. after this merges, there'll need to be a pause on merges b/c I want to tag a `1.3a1` (since answers can change with constants).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1213#issuecomment-425678168:225,pause,pause,225,https://psicode.org,https://github.com/psi4/psi4/pull/1213#issuecomment-425678168,1,['pause'],['pause']
Usability,"ok, docs and hopefully a fix for efp is up. > especially need to know how developers decide what's worth logging. I don't have a good answer. On the DDD side, stuff goes in the log that no longer appends nicely to the output (because its run in a separate process), so logging is on the generous side. In general, the stuff we want to log doesn't map evenly to the (critical=50, error=40, warn=30, info=20, debug=10) levels that Python sets up. Something more like https://www.ibm.com/docs/en/cognos-analytics/10.2.2?topic=SSEP7J_10.2.2/com.ibm.swg.ba.cognos.ug_rtm_wb.10.2.2.doc/c_n30e74.html with ""debug-low"" etc. might be better. After all, geometry of the molecule is pretty essential, but it's not ""progress of the job"", so I called it debug. For the moment, log contents are a free-for-all, so I've tried to make that clear in the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512#issuecomment-1082126210:824,clear,clear,824,https://psicode.org,https://github.com/psi4/psi4/pull/2512#issuecomment-1082126210,1,['clear'],['clear']
Usability,"paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will acc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:1149,clear,clear,1149,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['clear'],['clear']
Usability,"per](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementation. All three codes will get the same relaxed PDMs and solve orbital response terms by conjugate gradients, but they do not agree on which terms should be called orbital response or the exact form of the conjugate gradient equation to be solved. The caller code should be able to compute the PDMs however they want, with just a link to the relevant paper in the comments. ## Open Questions; * @dgasmith, what do you need to get MP2 RDM information passed to double hybrid functionals (#1333)?; * Crawford group in general, how willing are you to adapt the CC gradients to the new style of gradients?; * What is the fate of CI gradients? These were operational in Psi3 but were not hooked back up to Psi4. This means that at present, Psi can't even do CASSCF gradients. I believe this is enough of an issue for @fevangelista that he was playing with getting these hooked back in.; * Do we want to allow blocks to only include the correlation density but not the reference density? This is simple enough for a Hartree-Fock reference but does introduce ambiguity for other references, e.g., if MR-DSRG wants the gradient code to add a CAS reference to its correlation density.; * Is there some inherent problem with Psi's 3-index tensor technology that would have forced Ugur to use his own tensor classes? I'm not familiar with 3-index manipulations.; * One of the other major problems with the current approach to gradients is prefactors. When writing different blocks of the gradient code to `libiwl`, there's a prefactor you need for different blocks. At present, the needed prefactor seems completely random. I'd _like_ to figure out the origin of these prefactors and determine if there's a way to make them saner, or at least documented. I'll get to this when I've recovered, but if anybody has any knowledge about this, let us know! This issue will be especially important for _spin-restricted_ gradients.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:7694,simpl,simple,7694,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['simpl'],['simple']
Usability,"perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is nice, but the fringe cases I've seen where standard NULL fails to accomplish the same behavior are bit contrived. . I think those are the main features of C++11 that people would be using; I think many of them are nice, and simplify code (except for auto, which I still facepalm on). I'm curious to hear other developers' thoughts on the matter. Edit: clean-up, clarification, and removal of repost of initial post.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:3729,simpl,simplify,3729,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,1,['simpl'],['simplify']
Usability,"please post `conda list`, `psi4 --version`, and a full input file. If it's just the pairwise analysis, there was https://github.com/dftd3/simple-dftd3/issues/35 . I'd have to see your versions to gauge susceptibility.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914#issuecomment-1488779189:138,simpl,simple-,138,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1488779189,1,['simpl'],['simple-']
Usability,"psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:4807,guid,guidance,4807,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['guid'],['guidance']
Usability,"ptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#113",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:2783,Guid,Guide,2783,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['Guid'],['Guide']
Usability,"r"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can wor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1971,guid,guide,1971,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['guid'],['guide']
Usability,"rray_to_vector(int n, const int* array)` to initialize some of its `std::vector<int>` members by copying the innards of `Dimension` objects. Unfortunately this is happening through the rather inelegant mechanism of implicitly calling `Dimension::operator const int*() const`, which is set to be removed eventually. This PR replaces all calls of `convert_int_array_to_vector` in `libmoinfo` with simple assignment-initialization. Now, this could in theory lead to a change in behavior, as the former only copies the first `n` elements of the array inside the Dimension object instead of the entire thing, but in practice that does not seem to be happening. As far as I can tell, for trouble to happen it would require an internally inconsistent `Wavefunction` object or `libmoinfo` trying to use only a subset of the irreps. Nevertheless, I have added checks to ensure that any condition that would lead to an unpredictable change in behavior after this PR, results in a crash instead. I don't think it should ever happen, but internal consistency checks are probably not a bad idea anyways. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Replace all calls of `convert_int_array_to_vector` in `libmoinfo` with simple assignment-initialization; - [x] Add internal consistency checks to guard against possible hazards; - [x] Remove now-unused function `MOInfoBase::convert_int_array_to_vector`. ## Questions; - If everyone else is confident that the checks are redundant I _could_ remove them. ## Checklist; - [x] No new features; - [x] No new errors in the full test suite. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3177:1796,simpl,simple,1796,https://psicode.org,https://github.com/psi4/psi4/pull/3177,1,['simpl'],['simple']
Usability,"s (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally va",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:2583,guid,guide,2583,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['guid'],['guide']
Usability,simple x2c test added,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/141:0,simpl,simple,0,https://psicode.org,https://github.com/psi4/psi4/pull/141,1,['simpl'],['simple']
Usability,"someday. making this it's own new issue so can clear out the efp ticket undergrowth, most of which is resolved.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/241:47,clear,clear,47,https://psicode.org,https://github.com/psi4/psi4/issues/241,1,['clear'],['clear']
Usability,"stand the problem, it's easiest to work with a toy system. I'm choosing the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. mtd = ""hf/sto-6g"". set tdscf_tda true; set reference uks ; set tdscf_states [0, 0, 2, 0]. energy(""td-"" + mtd). set reference rks ; set tdscf_states [0, 0, 1, 0]; energy(""td-"" + mtd). set tdscf_triplets only; energy(""td-"" + mtd); ```. Within the TDA approximation, we need to find the roots of a Hermitian matrix. This matrix has the structure J + V + X. J consists of _Coulomb integrals_, V consists of _the exchange correlation second derivative elements_, and X is everything else - it's not relevant for this problem. Because of the spin-properties of the Hamiltonian (and approximate DFT functionals), the matrix becomes block-diagonal upon transforming the basis states (i-a) α and (i-a) β into their normalized plus and minus combinations. The plus eigenvectors correspond to singlets, and the negative eigenvectors to triplets. Matrix elements take the form 1/2 * [(α|α) ± (α|β) ± (β|α) + (β|β)], where parentheses denote a spin-dependent matrix element. Upon exploiting spin-restriction, this reduces to [(α|α) ± (α|β)]. Now, J matrix elements are spinfree, i.e., the Coulomb integral (pq|pq) doesn't care whether the bra and the ket have the same spin-index or not, so long as p and q have the same spinindex. Therefore, the plus spin combination reduces to 2 * (pq|pq), and the minus spin combination reduces to 0. The V matrix elements are not spinfree. Whether you differentiate with respect to an alpha excitation twice or an alpha followed by a beta produces different integrals. The formula [(α|α) ± (α|β)] does not simplify. Unfortunately, Psi combines the V terms into the J terms. Psi currently computes the + case of the V terms with no mechanism to request the - terms. _This_ is why we can't do triplets. This should be fixed, once the code is better organized and commented so it's clear exactly which terms need the freedom to change sign.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:1887,simpl,simplify,1887,https://psicode.org,https://github.com/psi4/psi4/issues/2841,2,"['clear', 'simpl']","['clear', 'simplify']"
Usability,"supports the existence of these separate J and K algorithms. DFJLinK and DFJCOSK work for now, given the low number of separate J and K algorithms current in Psi4. But, as more separate J and K algorithms are added to Psi4, the number of JK subclasses will skyrocket, assuming every combination of separate J and separate K algorithm is stored in its own JK subclass. This will lead to a nasty problem with code duplication, not even discussing the pollution of the JK hierarchy that would result. Thus, for continued research into separate J and K construction algorithms, a proper framework for supporting such algorithms is paramount. CompositeJK is that framework. CompositeJK is a single JK subclass which enables the combination and execution of any separate J and K build algorithm available in Psi4. CompositeJK can enable this without duplication of separate build algorithms across different subclasses. Additionally, CompositeJK is designed to enable simple expansion of itself, enabling the easy addition of new separate J and K builds to Psi4 with minimal programming issues. The current PR is the first implementation of the CompositeJK framework into Psi4, and it has two components:; - Front end. The front end changes control of how composite combinations of separate J and K build algorithms can be called by the user. The most important aspect is that, for CompositeJK, any combinations of its sub-algorithms can be called by setting SCF_TYPE to `J_alg+K_alg`, where _J_alg_ is the separate J build algorithm of choice, and _K_alg_ is the separate K algorithm of choice. As of now, the two CompositeJK options available are `DIRECTDFJ+LINK` representing the old DFJLinK class, and `DIRECTDFJ+COSX` representing the old DFJCOSK class. The key here, is that the ""+"" delimiter in SCF_TYPE serves as a signal to Psi4 that a CompositeJK algorithm is being used. ; - Back end. Basically all of the back-end changes can be classified into two categories - merging DFJLinK and DFJCOSK into ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833:1826,simpl,simple,1826,https://psicode.org,https://github.com/psi4/psi4/pull/2833,1,['simpl'],['simple']
Usability,"t&, char const_) in; > libboost_python-1_57.a(function.o); > ""_PyComplex_ImagAsDouble"", referenced from:; > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::extract(_object_) in; > libboost_python-1_57.a(builtin_converters.o); > ""_PyComplex_RealAsDouble"", referenced from:; > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::extract(_object_) in; > libboost_python-1_57.a(builtin_converters.o); > ""_PyComplex_Type"", referenced from:; > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::get_pytype() in; > libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::extract(_object_) in; > libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::get_slot(_object_) in; > libboost_python-1_57.a(builtin_converters.o); > ""_PyDict_Clear"", referenced from:; > boost::python::detail::dict_base::clear() in; > libboost_python-1_57.a(dict.o); > ""_PyDict_Copy"", referenced from:; > boost::python::detail::dict_base::copy() in; > libboost_python-1_57.a(dict.o); > ""_PyDict_GetItem"", referenced from:; > boost::python::detail::dict_base::get(boost::python::api::object; > const&) const in libboost_python-1_57.a(dict.o); > boost::python::objects::function::call(_object_, _object_) const in; > libboost_python-1_57.a(function.o); > ""_PyDict_GetItemString"", referenced from:; > ; > psi::BasisSet::pyconstruct_auxiliary(boost::shared_ptrpsi::Molecule; > const&, std::__1::basic_string<char, std::__1::char_traits<char>,; > std::__1::allocator<char> > const&, std::__1::basic_string<char,; > std::__1::char_traits<char>, std::__1::allocator<char> > const&,; > std::__1::basic_string<char, std::__1::char_traits<char>,; > std::__1::allocator<char> > const&, std::__1::basic_string<char,; > std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) in; > libmints.a(basiss",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131150834:3747,clear,clear,3747,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834,1,['clear'],['clear']
Usability,"t.a(environment.o): In function `boost::mpi::environment::environment(boost::mpi::threading::level, bool)':; environment.cpp:(.text+0x8ff): undefined reference to `MPI_Initialized'; environment.cpp:(.text+0x91b): undefined reference to `MPI_Init_thread'; environment.cpp:(.text+0x931): undefined reference to `MPI_Errhandler_set'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::environment(int&, char**&, boost::mpi::threading::level, bool)':; environment.cpp:(.text+0x9bb): undefined reference to `MPI_Initialized'; environment.cpp:(.text+0x9da): undefined reference to `MPI_Init_thread'; environment.cpp:(.text+0x9f0): undefined reference to `MPI_Errhandler_set'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(mpi_datatype_cache.o): In function `boost::mpi::detail::mpi_datatype_map::clear()':; mpi_datatype_cache.cpp:(.text+0x1c7): undefined reference to `MPI_Finalized'; mpi_datatype_cache.cpp:(.text+0x1f5): undefined reference to `MPI_Type_free'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(mpi_datatype_cache.o): In function `boost::mpi::detail::mpi_datatype_map::~mpi_datatype_map()':; mpi_datatype_cache.cpp:(.text+0x269): undefined reference to `MPI_Finalized'; mpi_datatype_cache.cpp:(.text+0x295): undefined reference to `MPI_Type_free'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(point_to_point.o): In function `boost::mpi::detail::packed_archive_send(int, int, int, boost::mpi::packed_oarchive const&)':; point_to_point.cpp:(.text+0x41): undefined reference to `MPI_Send'; point_to_point.cpp:(.text+0x69): undefined reference to `MPI_Send'; /blues/gpfs/home/software/spack/opt/spac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411:32796,clear,clear,32796,https://psicode.org,https://github.com/psi4/psi4/issues/411,1,['clear'],['clear']
Usability,"thanks for the feedback @hokru, that seems like an important point",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-383884299:15,feedback,feedback,15,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-383884299,1,['feedback'],['feedback']
Usability,"the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI screening methods. ## Questions; - [x] Would the test in `test_comprehensive_jk_screening.py` be better placed in `test_erisieve.py`? I placed the test in the former because I considered it large enough to warrant not having the quick pytest mark, but I'm ambivalent about where the test goes between those two test modules. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:1683,simpl,simply,1683,https://psicode.org,https://github.com/psi4/psi4/pull/2978,1,['simpl'],['simply']
Usability,"the snsmp2 plugin (https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/wavefunctioncache.py) is a big user of the npz format for file 180 before wavefunction serialization to a npy file. (Probably the only external user.) Moreover, they both use them and write out new ones for consumption. They also modify and store `Ca_occ` in their exchange files. (Looks like npz did this: https://github.com/psi4/psi4/commit/e5b12a40c8c2d65a5e59f758df871407afdc544c#diff-dbf22cd80d16f6d8ef8250145a6d91bf) For those from a psi4 run, the Ca_occ can just be extracted by API from the deserialized wfn. But is there any facility for storing extra items in the npy?. There's some lengthy workarounds for issues since resolved (custom cast-up) but the guess of dimer from stack of monomer isn't in psi4 and the plugin isn't being actively developed (to my knowledge), so I suggest a minimal patch-up rather than thorough update. The way to run this is to build an up-to-date psi, edit it to apply #1508, then clone the snsmp2 repo (above), navigate to `<sns-mp2-repo>/tests/` and run an input with `PYTHONPATH=../ <path-to-psi4-objdir>/stage/bin/psi4 simple.in`. If this doesn't get taken up, we'll tackle it next Wednesday the @CDSherrill group programming. In the meantime, snsmp2 is getting dropped from `psi4-rt`. FYI @rmcgibbo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514:1143,simpl,simple,1143,https://psicode.org,https://github.com/psi4/psi4/issues/1514,1,['simpl'],['simple']
Usability,"tions from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulating the X matrix (the matrix central to the observed error) to be able to handle positive grid weights. . ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:1896,simpl,simply,1896,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['simpl'],['simply']
Usability,"tl;dr Don't just update your psi4 source, do a fresh environment and build. There aren't comprehensive build helpers yet for v1.8, but there's some environment specs to help. What form do you want your future build helpers to take? For reference, here's how to get psi4 binary packages for all architectures. ### Recent Upheaval. You may have noticed that the ""source"" option at https://psicode.org/installs/v18/ says ""check back later"". There are minor upheavals in the build procedure in that:; 1. Libint2 switched source again last week (akin to the several L2 switches in spring 2022) so you'll want a new conda environment.; 2. We're switching our primary binary distribution channel from `conda install psi4 -c psi4` to `conda install psi4 -c conda-forge` (latter cmd is a simplification -- don't use as-is), so while most of the `-c psi4` packages are perfectly compatible with master, they're not the freshest and will continue to decay.; 3. New release means new tag, so you'll need to pull tags anyway (`git fetch upstream 'refs/tags/*:refs/tags/*'`) for versioning, distributed driver, and dispersion addons to work. ### Interim Build Directions. Altogether, now is a good time to do a fresh clone, environment, and compile ... if only there were directions. The interim build guidance is:; 1. Create an environment from one of the ""buildrun"" env spec files under https://github.com/psi4/psi4/tree/master/devtools/conda-envs . First edit it to the python you want and the env name you want, and comment out any optional qc addons you don't want. ; 2. Then issue something like`conda env create -f Linux-buildrun-maxeco.yaml` and activate the environment. ; 3. Clone psi4, then `cmake -S. -Bobjdir -DBUILD_SHARED_LIBS=ON ...`, and it usually configures fine. ; 4. For Apple Silicon, there isn't a env yaml file yet, but replacing `libblas=*=*mkl` with `libblas=*=*accelerate` or `libblas=*=*openblas`, getting rid of other mkl lines, and aggressively pruning qc addons (not many ported to ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:779,simpl,simplification,779,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['simpl'],['simplification']
Usability,"to a missing ECP projector:. ```; !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.9.1+53.gf8c059b.dirty; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: vDZP; ! Description: Small basis set used in wB97X-3c method; ! Role: orbital; ! Version: 1 (); ! From SuppMat of https://doi.org/10.1063/5.0133026; ! then converted with https://github.com/MolSSI-BSE/basis_set_exchange-historical/commit/f84314b31bc0e30e5a29c274684d6e9ff612466a#diff-7686a8c951e2392d87a59f8d89e5c75f18d2d35c60683ed5b52910076840569c; ! then removed Fluorine b/c the ECP lacks a projector; ! then added with basis_set_exchange.curate.add_basis(name=""vDZP"") to a local repo; ! then converted with `bse get-basis vDZP psi4`; !----------------------------------------------------------------------; ```. Marcel Muller (@marcelmbn), the original author of the wB97X-3c paper, wrote in [an analogous PySCF issue](https://github.com/pyscf/pyscf/pull/2085#issuecomment-1951321264) (pyscf/pyscf#2085) that this issue can be resolved:. > There are two ways to solve this problem (at least as far as I can see):; > Add a ""dummy"" d-type projector with coefficient 0.0, so that the ascending order of projectors up to f can be retained.; > Just remove the f projector as it has a 0.0 coefficient. IMHO, this would be the correct option, as a projector with a coefficient of 0.0 is only a technical remnant from the development process.; > I quickly tested both approaches with both TURBOMOLEv7.7.1 and ORCAv5.0.4 and in all cases, the same single-point energy and properties resulted for a simple F_2 molecule. Would it be possible to update the wB97X-3c basis set included in Psi4 to allow F-containing molecules to run? I'm happy to make the PR myself if that would be useful. For reference, here's my HF structure:; ```; 2; title; F 0.48776591 0.00000000 0.00000000; H -0.48776591 0.00000000 0.00000000; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3205:2388,simpl,simple,2388,https://psicode.org,https://github.com/psi4/psi4/issues/3205,1,['simpl'],['simple']
Usability,"to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files. P4n changes are fewer than I feared, https://github.com/psi4/psi4numpy/pull/112. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they, or something like them, are necessary for a clean docs build w/o hacks. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166:1508,clear,clear,1508,https://psicode.org,https://github.com/psi4/psi4/pull/2166,1,['clear'],['clear']
Usability,"turn_result[""mayer_indices""] = np.array(expected_return_result[""mayer_indices""]).reshape((3, 3)); ; json_ret = psi4.json_wrapper.run_qcschema(json_data).dict(); +import pprint; +pprint.pprint(json_ret, width=200); ; # can't write msgpack arrays to json; ; @@ -156,3 +161,5 @@ for k in expected_return_result.keys():; ; for k in expected_properties.keys(): #TEST; psi4.compare_values(expected_properties[k], json_ret[""properties""][k], 5, k.upper()) #TEST; +; +print(json_ret[""extras""][""qcvars""][""DIPOLE POLARIZABILITY XX""]); ```; * (2) Access the results afterwards in the AtomicResult through `print(json_ret[""extras""][""qcvars""][""DIPOLE POLARIZABILITY XX""])` and similarly for other 8 components. Bad news: as you see, none of that specification was intuitive or in line with other properties, the polarizability wasn't in return_result like other properties, and polarizabilities missed the boat when multipoles got converted to single arrays from multiple scalars. This could clearly use some cleanup, so please leave the issue open. ----; running the schema-1-properties test with mods above now ends with:. ```; '\n'; ' ==> Response Properties <==\n'; '\n'; ' => Dipole polarizabilities <=\n'; '\n'; ' X Y Z \n'; ' ----- ---------- ---------- ----------\n'; ' X 1.32497 -0.00000 -0.00000\n'; ' Y -0.00000 7.67620 0.00000\n'; ' Z -0.00000 -0.00000 4.87695\n'; '\n'; '*** tstop() called on psinet at Thu Apr 7 18:34:48 2022\n'; 'Module time:\n'; '\tuser time = 0.24 seconds = 0.00 minutes\n'; '\tsystem time = 0.01 seconds = 0.00 minutes\n'; '\ttotal time = 0 seconds = 0.00 minutes\n'; 'Total time:\n'; '\tuser time = 0.53 seconds = 0.01 minutes\n'; '\tsystem time = 0.02 seconds = 0.00 minutes\n'; '\ttotal time = 1 seconds = 0.02 minutes\n'; '\n'; ' Psi4 stopped on: Thursday, 07 April 2022 06:34PM\n'; ' Psi4 wall time for execution: 0:00:00.24\n'; '\n'; '*** Psi4 exiting successfully. Buy a developer a beer!\n',; 'success': True,; 'wavefunction': None}; JSON Success..........................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2535#issuecomment-1092277160:1889,clear,clearly,1889,https://psicode.org,https://github.com/psi4/psi4/issues/2535#issuecomment-1092277160,1,['clear'],['clearly']
Usability,"ue with `method_algorithm_type(mtd).keyword` and `method_algorithm_type(mtd).now`, respectively. This helps clean up proc.py and allows the controlling keyword to be linked for each method in the generated tables.; - [x] in proc.py, ; - [x] select_* functions have been made more boilerplate and elsewhere-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to a working method -- do you need to tweak aefc or uhf/rohf or is this method nowhere in psi or have you misspelled it? Now, the ManagedMethodsError exception has been reworked to return current conditions data (to be caught and reformatted) and the error message itself (usually not seen directly) has been reworked to provide more conditions and a link to the table row in the docs where one can see what _would_ run. Back at driver_util.py, these errors are reformatted according to whether managed or plain method, whether deriv isn't available at all or just not demanded deriv, e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:8557,simpl,simplified,8557,https://psicode.org,https://github.com/psi4/psi4/pull/2731,2,['simpl'],['simplified']
Usability,update the review guidance,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2917:18,guid,guidance,18,https://psicode.org,https://github.com/psi4/psi4/pull/2917,1,['guid'],['guidance']
Usability,"ve PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369646381:1090,simpl,simply,1090,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381,1,['simpl'],['simply']
Usability,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1716,guid,guidance,1716,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,1,['guid'],['guidance']
Usability,what about `guided`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378#issuecomment-988380879:12,guid,guided,12,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-988380879,1,['guid'],['guided']
Usability,"when you use the driver function `psi4.geometry()` the `psi4.core.Molecule` object that is returned has not been completely initialized yet. To complete the initialization of the molecule you can call the the `update_geometry` method of the `psi4.core.Molecule` instance that is returned. . In your case:. ```python; >>> import psi4; >>> mol = psi4.geometry('H 0.0 0.0 0.0\nH 1.5 0.0 0.0'); >>> atoms = mol.geometry().to_array(); >>> atoms; array([], shape=(0, 3), dtype=float64). >>> mol.update_geometry(); >>> atoms2 = mol.geometry().to_array(); >>> atoms2 ; array([[ -1.41729460e+00, -2.16960662e-17, 0.00000000e+00],; [ 1.41729460e+00, 2.16960662e-17, 0.00000000e+00]]). ```. While the docstring for `psi4.geometry()` might not make this clear, and perhaps it should? The docstring for `psi4.core.Molecule.update_geometry()` does:. ```python; >>> import psi4; >>> print(psi4.core.Molecule.update_geometry.__doc__); update_geometry(self: psi4.core.Molecule) -> None. Reevaluates the geometry with current variable values, orientation directives, etc. ; Must be called after initial Molecule definition by string.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316060861:742,clear,clear,742,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316060861,1,['clear'],['clear']
Usability,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2515:1438,guid,guide,1438,https://psicode.org,https://github.com/psi4/psi4/pull/2515,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:2441,simpl,simply,2441,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['simpl'],['simply']
Usability,"x_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: !\n! truncated \\UXXXXXXXX escape !\n! !\n!----------------------------------------------------------------------------------!\n\n'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228:3691,UX,UXXXXXXXX,3691,https://psicode.org,https://github.com/psi4/psi4/issues/2228,2,['UX'],['UXXXXXXXX']
Usability,"y about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:3397,learn,learn,3397,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['learn'],['learn']
Usability,"yikes. sounds like part of ""Make LibDPD Great Again"" (PsiCon 2016) is to make clear how to use DPD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435147194:78,clear,clear,78,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435147194,1,['clear'],['clear']
Usability,"ying singlet states from Q-Chem 4.4.1 compared to Psi4; > 1.1:; >; > Q-Chem 4.4.1:; > MP2 ground-state energy: -109.2579498247; > Excitation energy: 8.385211 eV; > Excitation energy: 8.385211 eV; > Excitation energy: 8.832813 eV; > Excitation energy: 9.441957 eV; > Excitation energy: 9.441957 eV; > Excitation energy: 13.868446 eV; > Excitation energy: 13.868446 eV; > Excitation energy: 14.791430 eV; >; > Psi4 1.1:; > MP2 ground-state energy: -109.25794982519506; > -> 1 A state : 0.3113289 (a.u.), 8.4716885 (eV); > -> 2 A state : 0.3113289 (a.u.), 8.4716885 (eV); > -> 3 A state : 0.3343892 (a.u.), 9.0991916 (eV); > -> 4 A state : 0.3565394 (a.u.), 9.7019279 (eV); > -> 5 A state : 0.3565394 (a.u.), 9.7019279 (eV); > -> 6 A state : 0.5069575 (a.u.), 13.7950140 (eV); > -> 7 A state : 0.5069575 (a.u.), 13.7950140 (eV); > -> 8 A state : 0.5127312 (a.u.), 13.9521243 (eV); >; > The Q-Chem energies agree with my standalone code. For N2 with STO-3G; > basis I simply get zero excitation energies with Psi4:; >; > ==> ADC(2) Computation <==; >; > -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); > Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); > ┆ ┆ Occ Vir Coefficient; > ---------------------------------------------; >; > Converged in 2 iteration.; > Squared norm of the S component: 1.0000000; > The S vector is rotated up to 90.000 (deg.); > #WARNING: Strongly rotated from the CIS state!; >; > -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); > Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); > ┆ ┆ Occ Vir Coefficient; > ---------------------------------------------; >; > Converged in 2 iteration.; > Squared norm of the S component: 1.0000000; > The S vector is rotated up to 90.000 (deg.); > #WARNING: Strongly rotated from the CIS state!; >; > Any idea about what's going on?; >; > My input files for cc-pvdz:; >; > *Psi4:*; > molecule {; > 0 1; > N 0.000000 0.000000 0.000000; > N 0.000000 0.000000 1.200000; > symmetry c1; > }; >; > set {; > basis cc-pvdz; > guess sad; > refere",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-395444918:1490,simpl,simply,1490,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-395444918,1,['simpl'],['simply']
Usability,"your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1333,learn,learn,1333,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,1,['learn'],['learn']
