quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"c Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressMemoryPlot.h 28564 2009-05-12 11:00:21Z ganis $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressMemoryPlot.html:23554,log,log,23554,root/html528/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html528/TProofProgressMemoryPlot.html,1,['log'],['log']
Testability,"c Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressMemoryPlot.h 28564 2009-05-12 11:00:21Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofProgressMemoryPlot.html:23707,log,log,23707,root/html530/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html530/TProofProgressMemoryPlot.html,1,['log'],['log']
Testability,"c Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressMemoryPlot.h 28564 2009-05-12 11:00:21Z ganis $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofProgressMemoryPlot.html:23707,log,log,23707,root/html532/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html532/TProofProgressMemoryPlot.html,1,['log'],['log']
Testability,"c Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; RooArgSet const & flattenedCatList () const;  Internal utility function to get a list of all category components for this RooSimultaneous. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with rando",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:63764,test,test,63764,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['test'],['test']
Testability,"c TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_t_cl; RooDataSet*_dataSummary dataset to store results; RooAbsPdf*_model; string_parNameName of Nsignal parameter; RooStats::ProfileLikelihoodCalculator*_plc; const RooArgSet*_poiparameters of interest; RooRealVar*_ul. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UpperLimitMCSModule(const RooArgSet* poi, Double_t CL = 0.94999999999999996). UpperLimitMCSModule(const RooStats::UpperLimitMCSModule& other); Copy constructor. Bool_t initializeInstance(); Initialize module after attachment to RooMCStudy object. Bool_t initializeRun(Int_t ); Initialize module at beginning of RooCMStudy run. RooDataSet* finalizeRun(); Return auxiliary dataset with results of delta(-log(L)); calculations of this module so that it is merged with; RooMCStudy::fitParDataSet() by RooMCStudy. Bool_t processBetweenGenAndFit(Int_t ). virtual ~UpperLimitMCSModule(). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Nils Ruthmann » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__UpperLimitMCSModule.html:8319,log,log,8319,root/html604/RooStats__UpperLimitMCSModule.html,https://root.cern,https://root.cern/root/html604/RooStats__UpperLimitMCSModule.html,1,['log'],['log']
Testability,"c TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_t_cl; RooDataSet*_dataSummary dataset to store results; RooAbsPdf*_model; string_parNameName of Nsignal parameter; RooStats::ProfileLikelihoodCalculator*_plc; const RooArgSet*_poiparameters of interest; RooRealVar*_ul. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UpperLimitMCSModule(const RooArgSet* poi, Double_t CL = 0.94999999999999996). UpperLimitMCSModule(const RooStats::UpperLimitMCSModule& other); Copy constructor. Bool_t initializeInstance(); Initialize module after attachment to RooMCStudy object. Bool_t initializeRun(Int_t ); Initialize module at beginning of RooCMStudy run. RooDataSet* finalizeRun(); Return auxiliary dataset with results of delta(-log(L)); calculations of this module so that it is merged with; RooMCStudy::fitParDataSet() by RooMCStudy. Bool_t processBetweenGenAndFit(Int_t ). virtual ~UpperLimitMCSModule(). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Nils Ruthmann » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__UpperLimitMCSModule.html:8319,log,log,8319,root/html602/RooStats__UpperLimitMCSModule.html,https://root.cern,https://root.cern/root/html602/RooStats__UpperLimitMCSModule.html,1,['log'],['log']
Testability,"c boolSetObsToExpected(RooAbsPdf& pdf, const RooArgSet& obs); static boolSetObsToExpected(RooProdPdf& prod, const RooArgSet& obs). Data Members; protected:. const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fAltModel; unsigned intRooStats::HypoTestCalculatorGeneric::fAltToysSeedto have same toys for alternate; const RooAbsData*RooStats::HypoTestCalculatorGeneric::fData; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fDefaultSampler; RooStats::TestStatistic*RooStats::HypoTestCalculatorGeneric::fDefaultTestStat; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fNullModel; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fTestStatSampler. private:. RooAbsData*fAsimovDataasimov data set; RooArgSetfAsimovGlobObssnapshot of Asimov global observables; RooArgSetfBestFitParamssnapshot of all best fitted Parameter values; RooArgSetfBestFitPoisnapshot of best fitted POI values; doublefNLLAsimov; doublefNLLObs; boolfOneSidedfor one sided PL test statistic (upper limits); boolfOneSidedDiscoveryfor one sided PL test statistic (for discovery); intfUseQTildeflag to indicate if using qtilde or not (-1 (default based on RooRealVar)), 0 false, 1 (true); static intfgPrintLevelcontrol print level (0 minimal, 1 normal, 2 debug). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetPrintLevel(int level); set print level (static function); 0 minimal, 1 normal, 2 debug. AsymptoticCalculator(RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, bool nominalAsimov = false); constructor for asymptotic calculator from Data set and ModelConfig; The constructor will perform a global fit of the model to the data; and build an Asimov data set.; It will then also fit the model to the Asimov data set to find the likelihood value; of the Asimov data set; nominalAsimov is an option for using Asimov data set obtained using nominal nuisance parameter values;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__AsymptoticCalculator.html:5230,test,test,5230,root/html602/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__AsymptoticCalculator.html,2,['test'],['test']
Testability,"c bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:47361,log,logged,47361,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['log'],['logged']
Testability,"c with given timeout.; If clipPlanes is non-zero, test each element against its; clipping planes. Bool_t ResolveSelectRecord(TGLSelectRecord& rec, Int_t curIdx); Process selection record rec.; 'curIdx' is the item position where the scene should start; its processing.; Return TRUE if an object has been identified or FALSE otherwise.; The scene-info member of the record is already set by the caller. void CalcBoundingBox() const; Encapsulates all physical shapes bounding box with axes aligned box.; Validity checked in the base-class. void AdoptLogical(TGLLogicalShape& shape); Adopt dynamically created logical 'shape' - add to internal map; and take responsibility for deleting. Bool_t DestroyLogical(TObject* logid, Bool_t mustFind = kTRUE); Destroy logical shape defined by unique 'ID'.; Returns kTRUE if found/destroyed - kFALSE otherwise. If mustFind is true, an error is reported if the logical is not; found. Int_t DestroyLogicals(); Destroy all logical shapes in scene.; Return number of destroyed logicals. TGLLogicalShape * FindLogical(TObject* logid) const; Find and return logical shape identified by unqiue logid.; Returns 0 if not found. void AdoptPhysical(TGLPhysicalShape& shape); Adopt dynamically created physical 'shape' - add to internal map and take; responsibility for deleting. void DestroyPhysicalInternal(TGLScene::PhysicalShapeMapIt_t pit); Virtual function to destroy a physical. Sub-classes might have; special checks to perform.; Caller should also invalidate the draw-list. Bool_t DestroyPhysical(UInt_t phid); Destroy physical shape defined by unique 'ID'.; Returns kTRUE if found/destroyed - kFALSE otherwise. Int_t DestroyPhysicals(); Destroy physical shapes. TGLPhysicalShape* FindPhysical(UInt_t phid) const; Find and return physical shape identified by unqiue 'ID'.; Returns 0 if not found. UInt_t GetMaxPhysicalID(); Returns the maximum used physical id.; Returns 0 if empty. Bool_t BeginUpdate(); Put scene in update mode, return true if lock acquired. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:11119,log,logicals,11119,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,6,['log'],['logicals']
Testability,c;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMath,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:45110,test,testIntegration,45110,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testIntegration']
Testability,c;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46536,test,testIntegration,46536,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testIntegration']
Testability,cFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  TComplex.cxx;  TDataPointN.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.h;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  VavilovFast.h;  ► src;  cblas.cxx;  ChebyshevApprox.cxx;  complex_quartic.h;  Derivator.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:46488,test,testTStatistic,46488,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testTStatistic']
Testability,"cPointer to user theoretical function (a TF1*)Definition TVirtualFitter.h:44; TVirtualFitter::GetFitOptionvirtual Foption_t GetFitOption() constDefinition TVirtualFitter.h:73; TVirtualFitter::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::fCacheDouble_t * fCache[fCacheSize] Array of points data (fNpoints*fPointSize < fCacheSize words)Definition TVirtualFitter.h:42; TVirtualFitter::fFCNvoid(* fFCN)(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag)Definition TVirtualFitter.h:46; TVirtualFitter::GetFitterstatic TVirtualFitter * GetFitter()static: return the current FitterDefinition TVirtualFitter.cxx:209; TVirtualFitter::GetUserFuncvirtual TObject * GetUserFunc() constDefinition TVirtualFitter.h:84; TVirtualFitter::fNpointsInt_t fNpointsNumber of points to fit.Definition TVirtualFitter.h:39; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; f1TF1 * f1Definition legend1.C:11; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; Foption_tDefinition Foption.h:24; Foption_t::W1int W1Definition Foption.h:36; Foption_t::Integralint IntegralDefinition Foption.h:44; lTLine lDefinition textangle.C:4; t1auto * t1Definition textangle.C:20. mathfumilisrcTFumili.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:80926,log,logarithm,80926,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['log'],['logarithm']
Testability,"cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; class CacheElem;  Current normalization set. ;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #incl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:73120,test,testArg,73120,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,4,['test'],['testArg']
Testability,"cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; class CacheElem;  Current normalization set. ;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooMomentMorphFunc.h>. Inheritance diagram for RooMomentMorphFunc:. This browser is not able to show SVG: try Firefox, Chr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFunc.html:59743,test,testArg,59743,doc/master/classRooMomentMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFunc.html,4,['test'],['testArg']
Testability,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:23479,log,log,23479,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,['log'],['log']
Testability,"cal layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an associated value, which represents a memory location storing a value of the given C++ type. These distinguished memory locations are the destinations and sources for the deserialization and serialization.; The (de-)serialization is a mapping from the C++ type to the more simple column type system. A column contains an arbitrary number of fixed-sized elements of a well-defined set of types: integers and floats of different bit sizes. A C++ type may be mapped to multiple columns. For instance, an std::vector<float> maps to two columns, an offset column indicating the size of the vecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html:1560,log,logical,1560,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html,1,['log'],['logical']
Testability,"cal shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context holding display-list definitions. { return fGLCtxIdentity; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general plea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLScene.html:14487,log,logical,14487,root/html534/TGLScene.html,https://root.cern,https://root.cern/root/html534/TGLScene.html,1,['log'],['logical']
Testability,"cal shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context holding display-list definitions. { return fGLCtxIdentity; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLScene.h 32334 2010-02-12 11:52:13Z matevz $ » Last generated: 2010-12-08 16:56; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:13978,log,logical,13978,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,1,['log'],['logical']
Testability,"cal shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context holding display-list definitions. { return fGLCtxIdentity; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLScene.h 32334 2010-02-12 11:52:13Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLScene.html:13978,log,logical,13978,root/html530/TGLScene.html,https://root.cern,https://root.cern/root/html530/TGLScene.html,1,['log'],['logical']
Testability,"cal shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context holding display-list definitions. { return fGLCtxIdentity; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLScene.h 32334 2010-02-12 11:52:13Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLScene.html:13978,log,logical,13978,root/html532/TGLScene.html,https://root.cern,https://root.cern/root/html532/TGLScene.html,1,['log'],['logical']
Testability,"cal shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t[4] rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context holding display-list definitions. { return fGLCtxIdentity; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general pl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLScene.html:14615,log,logical,14615,root/html604/TGLScene.html,https://root.cern,https://root.cern/root/html604/TGLScene.html,1,['log'],['logical']
Testability,"cal shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t[4] rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context holding display-list definitions. { return fGLCtxIdentity; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general pl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:14615,log,logical,14615,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,1,['log'],['logical']
Testability,"cal(TGLPhysicalShape& shape); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginScene(); UInt_tTGLScene::BeginSmartRefresh(); virtual Bool_tTGLScene::BeginUpdate(); const TGLBoundingBox&TGLSceneBase::BoundingBox() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tBuildingScene() const; virtual voidTGLScene::CalcBoundingBox() const; virtual Bool_tCanLoopOnPrimitives() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); TGLClip*TGLSceneBase::Clip() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseComposite(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGLScene::TSceneInfo*TGLScene::CreateSceneInfo(TGLViewerBase* view); TGLLockable::ELockTGLLockable::CurrentLock() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Bool_tTGLScene::DestroyLogical(TObject* logid, Bool_t mustFind = kTRUE); virtual Int_tTGLScene::DestroyLogicals(); virtual Bool_tTGLScene::DestroyPhysical(UInt_t phid); virtual Int_tTGLScene::DestroyPhysicals(); virtual Int_tDistancetoPrimitive(Int_t, Int_t); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTVirtualViewer3D::DrawViewer(); virtual voidTObject::Dump() constMENU ; voidTGLScene::DumpMapSizes() const; virtual voidEndScene(); voidTGLScene::EndSmartRefresh(); virtual voidTGLScene::EndUpdate(Bool_t minorChange = kTRUE, Bool_t sceneChanged = kTRUE, Bool_t updateViewers = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t, Int_t, Int_t); virtual voidTObject::Fatal(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScenePad.html:1984,log,logid,1984,root/html528/TGLScenePad.html,https://root.cern,https://root.cern/root/html528/TGLScenePad.html,6,['log'],['logid']
Testability,"cal(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsTestStatistic::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tisSealed() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:18686,log,logEvalError,18686,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,3,['log'],['logEvalError']
Testability,"cale! size scale for points; TGLViewer::EPushActionTGLViewer::fPushAction; TGLRedrawTimer*TGLViewer::fRedrawTimer! timer for triggering redraws; Bool_tTGLViewer::fReferenceOn! reference marker on?; TGLVertex3TGLViewer::fReferencePos! reference position; Bool_tTGLViewer::fResetCamerasOnNextUpdatereposition camera on next update; Bool_tTGLViewer::fResetCamerasOnUpdatereposition camera on each update; Bool_tTGLViewerBase::fResetSceneInfosOnRenderRequest rebuild of view-specific scene data.; TGLRnrCtx*TGLViewerBase::fRnrCtx; TGLViewerBase::SceneInfoList_tTGLViewerBase::fScenesRegistered scenes.; TGLSelectRecordTGLViewer::fSecSelRec! select record from last secondary select (should go to context); TGLSelectRecordTGLViewer::fSelRec! select record from last select (should go to context); TGLManipSet*TGLViewer::fSelectedPShapeRef!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTGLViewer::fSmartRefresh! cache logicals during scene rebuilds; Bool_tTGLViewer::fSmoothLines! smooth line edge rendering; Bool_tTGLViewer::fSmoothPoints! smooth point edge rendering; Bool_tTGLViewer::fStereo! use stereo rendering; Float_tTGLViewer::fStereoEyeOffsetFac!; Float_tTGLViewer::fStereoFrustumAsymFac!; Float_tTGLViewer::fStereoZeroParallax! position of zero-parallax plane: 0 - near clipping plane, 1 - far clipping plane; Short_tTGLViewerBase::fStyleViewer-style for rendering.; TGLRectTGLViewer::fViewport! viewport - drawn area; TGLViewerBase::SceneInfoVec_tTGLViewerBase::fVisScenesVisible scenes.; Float_tTGLViewerBase::fWFLineWOptional override of scene wire-frame line-width; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TGLColorSetTGLViewer::fgDefaultColorSet! a shared, default color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. Int_tfBorder; TGCompositeFrame*fFrame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLEmbeddedVie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLEmbeddedViewer.html:25211,log,logicals,25211,root/html602/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html602/TGLEmbeddedViewer.html,1,['log'],['logicals']
Testability,"cale! size scale for points; TGLViewer::EPushActionTGLViewer::fPushAction; TGLRedrawTimer*TGLViewer::fRedrawTimer! timer for triggering redraws; Bool_tTGLViewer::fReferenceOn! reference marker on?; TGLVertex3TGLViewer::fReferencePos! reference position; Bool_tTGLViewer::fResetCamerasOnNextUpdatereposition camera on next update; Bool_tTGLViewer::fResetCamerasOnUpdatereposition camera on each update; Bool_tTGLViewerBase::fResetSceneInfosOnRenderRequest rebuild of view-specific scene data.; TGLRnrCtx*TGLViewerBase::fRnrCtx; TGLViewerBase::SceneInfoList_tTGLViewerBase::fScenesRegistered scenes.; TGLSelectRecordTGLViewer::fSecSelRec! select record from last secondary select (should go to context); TGLSelectRecordTGLViewer::fSelRec! select record from last select (should go to context); TGLManipSet*TGLViewer::fSelectedPShapeRef!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTGLViewer::fSmartRefresh! cache logicals during scene rebuilds; Bool_tTGLViewer::fSmoothLines! smooth line edge rendering; Bool_tTGLViewer::fSmoothPoints! smooth point edge rendering; Bool_tTGLViewer::fStereo! use stereo rendering; Float_tTGLViewer::fStereoEyeOffsetFac!; Float_tTGLViewer::fStereoFrustumAsymFac!; Float_tTGLViewer::fStereoZeroParallax! position of zero-parallax plane: 0 - near clipping plane, 1 - far clipping plane; Short_tTGLViewerBase::fStyleViewer-style for rendering.; TGLRectTGLViewer::fViewport! viewport - drawn area; TGLViewerBase::SceneInfoVec_tTGLViewerBase::fVisScenesVisible scenes.; Float_tTGLViewerBase::fWFLineWOptional override of scene wire-frame line-width; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TGLColorSetTGLViewer::fgDefaultColorSet! a shared, default color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. TGPopupMenu*fCameraMenu; Bool_tfDeleteMenuBar; TStringfDirName; TGPopupMenu*fFileMenu; TGPopupMenu*fFileSaveMenu; TGLFormat*fFormat; TGLSAFrame*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSAViewer.html:26587,log,logicals,26587,root/html602/TGLSAViewer.html,https://root.cern,https://root.cern/root/html602/TGLSAViewer.html,1,['log'],['logicals']
Testability,"cally if the log scale is set in the current Pad. NOTE: see also TF1::GetX. Double_t GetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; Returns the X value corresponding to the function value fy for (xmin<x<xmax).; in other words it can find the roots of the function when fy=0 and successive calls; by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetMaximumX, TF1::GetMinimumX. Int_t GetNDF() const; Return the number of degrees of freedom in the fit; the fNDF parameter has been previously computed during a fit.; The number of degrees of freedom corresponds to the number of points; used in the fit minus the number of free parameters. Int_t GetNumberFreeParameters() const; Return the number of free parameters. char * GetObjectInfo(Int_t px, Int_t py) const; Redefines TObject::GetObjectInfo.; Displays the function info (x, function value); corresponding to cursor position px,py. Double_t GetParError(Int_t ipar) const; Return value of parameter number ipar. void GetParLimits(Int_t ipar, Double_t& parmin, Double_t& parmax) const; Return limits for parameter ipar. Double_t GetProb() const; Return the fit probability. Int_t GetQuantiles(Int_t nprobSum, Double_t* q",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:43746,log,logx,43746,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,12,['log'],"['log', 'logx']"
Testability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:25; This page has been automatically generated. For comments or suggestions regarding the documentation or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLPerspectiveCamera.html:12826,test,tests,12826,root/html534/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html534/TGLPerspectiveCamera.html,1,['test'],['tests']
Testability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLPerspectiveCamera.h 31821 2009-12-10 18:22:44Z matevz $ » Last generated: 2010-09-23 20:06; This page has been automatically generated.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPerspectiveCamera.html:8302,test,tests,8302,root/html528/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html528/TGLPerspectiveCamera.html,1,['test'],['tests']
Testability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLPerspectiveCamera.h 31821 2009-12-10 18:22:44Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLPerspectiveCamera.html:8302,test,tests,8302,root/html530/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html530/TGLPerspectiveCamera.html,1,['test'],['tests']
Testability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLPerspectiveCamera.h 31821 2009-12-10 18:22:44Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLPerspectiveCamera.html:8302,test,tests,8302,root/html532/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html532/TGLPerspectiveCamera.html,1,['test'],['tests']
Testability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. TGLPerspectiveCamera(). Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:53; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLPerspectiveCamera.html:13611,test,tests,13611,root/html604/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html604/TGLPerspectiveCamera.html,1,['test'],['tests']
Testability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. TGLPerspectiveCamera(). Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:53; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPerspectiveCamera.html:13611,test,tests,13611,root/html602/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html602/TGLPerspectiveCamera.html,1,['test'],['tests']
Testability,"can be lazy.; 5389 void** pp = (void**) fAddress;; 5390 if (!*pp) {; 5391 // -- Caller wants us to allocate the STL container, but they will own it.; 5392 *pp = proxy->New();; 5393 if (!(*pp)) {; 5394 Error(""SetAddress"", ""Failed to allocate STL container for branch '%s'"", GetName());; 5395 // FIXME: Should we do this? Lots of other code wants; 5396 // fAddress to be zero if no fObject, but is; 5397 // that a good thing?; 5398 fAddress = nullptr;; 5399 ResetBit(kAddressSet);; 5400 }; 5401 }; 5402 fObject = (char*) *pp;; 5403 }; 5404 }; 5405 } else {; 5406 // -- We have been given a zero address, allocate for top-level only.; 5407 if ((fStreamerType == TVirtualStreamerInfo::kObject) ||; 5408 (fStreamerType == TVirtualStreamerInfo::kAny) ||; 5409 (fStreamerType == TVirtualStreamerInfo::kSTL)) {; 5410 // We are *not* a top-level branch and we are *not* a pointer to an STL container.; 5411 // Case of an embedded STL container.; 5412 // Note: We test for the kObject and kAny types to support; 5413 // the (unwise) choice of inheriting from an STL container.; 5414 Error(""SetAddress"", ""Embedded STL container given a zero address for branch '%s'"", GetName());; 5415 } else {; 5416 // We are either a top-level branch or sub-branch which is a pointer to an STL container.; 5417 // Streamer type should be -1 (for a top-level branch) or kSTLp here.; 5418 if ((fStreamerType != -1) && (fStreamerType != TVirtualStreamerInfo::kSTLp)) {; 5419 Error(""SetAddress"",; 5420 ""Branch %s is a split STL container (fStreamerType is: %d), the address can not be set directly."",; 5421 GetName(), fStreamerType);; 5422 } else if (fStreamerType == -1) {; 5423 // -- We are a top-level branch, allocate.; 5424 SetBit(kDeleteObject);; 5425 fObject = (char*) proxy->New();; 5426 if (fObject) {; 5427 fAddress = (char*) &fObject;; 5428 } else {; 5429 Error(""SetAddress"", ""Failed to allocate STL container for branch '%s'"", GetName());; 5430 // FIXME: Should we do this? Lots of other code wants; 5431 // fAddress to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:200917,test,test,200917,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['test'],['test']
Testability,"can be selected via the parameter mode. ; The parameter mode can be = pcev:; p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters Example: gStyle->SetOptFit(1011); print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Notes:. never call SetOptFit(000111); but SetOptFit(111), 000111 will be taken as an octal number !!; gStyle->SetOptFit(1) is a shortcut allowing to set the most common case and is equivalent to gStyle->SetOptFit(111); At ROOT startup the option fit is set to 0. So, to see the fit parameters on all plot resulting from a fit, a call to gStyle->SetOptFit() with a non null value should be done. One can put it in the rootlogon.C file to always have it. see also SetOptStat below. ; Definition at line 1593 of file TStyle.cxx. ◆ SetOptLogx(). void TStyle::SetOptLogx ; (; Int_t ; logx = 1). inline . Definition at line 329 of file TStyle.h. ◆ SetOptLogy(). void TStyle::SetOptLogy ; (; Int_t ; logy = 1). inline . Definition at line 330 of file TStyle.h. ◆ SetOptLogz(). void TStyle::SetOptLogz ; (; Int_t ; logz = 1). inline . Definition at line 331 of file TStyle.h. ◆ SetOptStat() [1/2]. void TStyle::SetOptStat ; (; Int_t ; mode = 1). The type of information printed in the histogram statistics box can be selected via the parameter mode. ; The parameter mode can be = ksiourmen; k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; i = 2; integral of bins with option ""width"" printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of histogram is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:82359,log,logx,82359,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['log'],['logx']
Testability,"cancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::~ClassificationSettingsvirtual ~ClassificationSettings()d'torDefinition NeuralNet.h:924; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_amsstd::vector< double > m_amsDefinition NeuralNet.h:1000; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerDataLayerData holds the data of one layer.Definition NeuralNet.h:437; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first of the nodes in the input node vectorDefinition NeuralNet.h:639; TMVA::DNN::LayerData::deltasBeginconst_iterator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:53109,test,test,53109,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['test'],['test']
Testability,"cation.C tutorial You need to run that macro before to generate the trained Keras model Then you need to run the macro TMVA_SOFIE_Keras_HiggsModel.C to generate the corresponding header file using SOFIE. ;  ;  TMVA_SOFIE_RDataFrame.py;   Example of inference with SOFIE and RDataFrame, of a model trained with Keras. ;  ;  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ;  TMVA_SOFIE_RSofieReader.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE with the RSofieReader class This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model ;  ;  TMVAClassification.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ;  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ;  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ;  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ;  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ;  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ;  TMVAGAexample2.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:5036,test,testing,5036,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['test'],['testing']
Testability,"cation; : ; : Train all sub-classifiers for Classification ...; : Rebuilding Dataset Category_Fisher_1_dsi; : Building event vectors for type 2 Signal; : Dataset[Category_Fisher_1_dsi] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[Category_Fisher_1_dsi] : create input formulas for tree TreeB; <HEADER> DataSetFactory : [Category_Fisher_1_dsi] : Number of events in input trees; : Dataset[Category_Fisher_1_dsi] : Signal requirement: ""abs(eta)<=1.3""; : Dataset[Category_Fisher_1_dsi] : Signal -- number of events passed: 5123 / sum of weights: 5123 ; : Dataset[Category_Fisher_1_dsi] : Signal -- efficiency : 0.5123; : Dataset[Category_Fisher_1_dsi] : Background requirement: ""abs(eta)<=1.3""; : Dataset[Category_Fisher_1_dsi] : Background -- number of events passed: 5134 / sum of weights: 5134 ; : Dataset[Category_Fisher_1_dsi] : Background -- efficiency : 0.5134; : Dataset[Category_Fisher_1_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.5123 preselection efficiency); : Dataset[Category_Fisher_1_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.5134 preselection efficiency); : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 2561; : Signal -- testing events : 2561; : Signal -- training and testing events: 5122; : Dataset[Category_Fisher_1_dsi] : Signal -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.5123; : Background -- training events : 2567; : Background -- testing events : 2567; : Background -- training and testing events: 5134; : Dataset[Category_Fisher_1_dsi] : Background -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.5134; : ; <HEADER> Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:6266,test,testing,6266,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['testing']
Testability,"ce &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:34506,test,testArg,34506,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,3,['test'],['testArg']
Testability,"ce = (1ULL << ( 29 )); , ;   kGeoHype = (1ULL << ( 30 )); , kGeoSavePrimitive = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; virtual Double_t Capacity () const =0;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void ComputeBBox ()=0;  ; virtual void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm)=0;  ; virtual void ComputeNormal_v (const Double_t *, const Double_t *, Double_t *, Int_t);  ; virtual Bool_t Contains (const Double_t *point) const =0;  ; virtual void Contains_v (const Double_t *, Bool_t *, Int_t) const;  ; virtual Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const =0;  ; virtual void CreateThreadData (Int_t);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override=0;  Computes distance from point (px,py) to the object. ;  ; virtual Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0;  ; virtual void DistFromInside_v (const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:9358,test,testNo,9358,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['test'],['testNo']
Testability,"ce2); 2613{; 2614 TMatrixT<Element> target;; 2615 ; 2616 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2617 Error(""operator>(const TMatrixT&,const TMatrixTSym&)"", ""matrices not compatible"");; 2618 return target;; 2619 }; 2620 ; 2621 target.ResizeTo(source1);; 2622 ; 2623 const Element *sp1 = source1.GetMatrixArray();; 2624 const Element *sp2 = source2.GetMatrixArray();; 2625 Element *tp = target.GetMatrixArray();; 2626 const Element *const tp_last = tp + target.GetNoElements();; 2627 while (tp < tp_last) {; 2628 *tp++ = (*sp1) > (*sp2);; 2629 sp1++;; 2630 sp2++;; 2631 }; 2632 ; 2633 return target;; 2634}; 2635 ; 2636////////////////////////////////////////////////////////////////////////////////; 2637/// logical operation source1 > source2; 2638 ; 2639template <class Element>; 2640TMatrixT<Element> TMatrixTAutoloadOps::operator>(const TMatrixTSym<Element> &source1, const TMatrixT<Element> &source2); 2641{; 2642 return operator<=(source2, source1);; 2643}; 2644 ; 2645////////////////////////////////////////////////////////////////////////////////; 2646/// logical operation source1 >= source2; 2647 ; 2648template <class Element>; 2649TMatrixT<Element> TMatrixTAutoloadOps::operator>=(const TMatrixT<Element> &source1, const TMatrixT<Element> &source2); 2650{; 2651 TMatrixT<Element> target;; 2652 ; 2653 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2654 Error(""operator>=(const TMatrixT&,const TMatrixT&)"", ""matrices not compatible"");; 2655 return target;; 2656 }; 2657 ; 2658 target.ResizeTo(source1);; 2659 ; 2660 const Element *sp1 = source1.GetMatrixArray();; 2661 const Element *sp2 = source2.GetMatrixArray();; 2662 Element *tp = target.GetMatrixArray();; 2663 const Element *const tp_last = tp + target.GetNoElements();; 2664 while (tp < tp_last) {; 2665 *tp++ = (*sp1) >= (*sp2);; 2666 sp1++;; 2667 sp2++;; 2668 }; 2669 ; 2670 return target;; 2671}; 2672 ; 2673////////////////////////////////////////////////////////////////////////////////; 2674/// lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:92501,log,logical,92501,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,2,['log'],['logical']
Testability,"ce2); 2806{; 2807 TMatrixT<Element> target;; 2808 ; 2809 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2810 Error(""operator<(const TMatrixT&,const TMatrixTSym&)"", ""matrices not compatible"");; 2811 return target;; 2812 }; 2813 ; 2814 target.ResizeTo(source1);; 2815 ; 2816 const Element *sp1 = source1.GetMatrixArray();; 2817 const Element *sp2 = source2.GetMatrixArray();; 2818 Element *tp = target.GetMatrixArray();; 2819 const Element *const tp_last = tp + target.GetNoElements();; 2820 while (tp < tp_last) {; 2821 *tp++ = (*sp1) < (*sp2);; 2822 sp1++;; 2823 sp2++;; 2824 }; 2825 ; 2826 return target;; 2827}; 2828 ; 2829////////////////////////////////////////////////////////////////////////////////; 2830/// logical operation source1 < source2; 2831 ; 2832template <class Element>; 2833TMatrixT<Element> TMatrixTAutoloadOps::operator<(const TMatrixTSym<Element> &source1, const TMatrixT<Element> &source2); 2834{; 2835 return operator>=(source2, source1);; 2836}; 2837 ; 2838////////////////////////////////////////////////////////////////////////////////; 2839/// logical operation source1 != source2; 2840 ; 2841template <class Element>; 2842TMatrixT<Element> TMatrixTAutoloadOps::operator!=(const TMatrixT<Element> &source1, const TMatrixT<Element> &source2); 2843{; 2844 TMatrixT<Element> target;; 2845 ; 2846 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2847 Error(""operator!=(const TMatrixT&,const TMatrixT&)"", ""matrices not compatible"");; 2848 return target;; 2849 }; 2850 ; 2851 target.ResizeTo(source1);; 2852 ; 2853 const Element *sp1 = source1.GetMatrixArray();; 2854 const Element *sp2 = source2.GetMatrixArray();; 2855 Element *tp = target.GetMatrixArray();; 2856 const Element *const tp_last = tp + target.GetNoElements();; 2857 while (tp != tp_last) {; 2858 *tp++ = (*sp1) != (*sp2);; 2859 sp1++;; 2860 sp2++;; 2861 }; 2862 ; 2863 return target;; 2864}; 2865 ; 2866////////////////////////////////////////////////////////////////////////////////; 2867/// l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:99041,log,logical,99041,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,2,['log'],['logical']
Testability,ce; : ; <HEADER> Category_Likelihood_1 : [Category_Likelihood_1_dsi] : Evaluation of Category_Likelihood_1 on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00948 sec ; <HEADER> Category_Likelihood_2 : [Category_Likelihood_2_dsi] : Evaluation of Category_Likelihood_2 on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00932 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: Fisher; : ; <HEADER> Fisher : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_Fisher : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.014081 1.2910 [ -5.3119 4.5609 ]; : var2: -0.014399 1.3299 [ -4.7537 4.6723 ]; : var3: -0.027971 1.3779 [ -5.2892 4.7007 ]; : var4: 0.12966 1.4883 [ -5.1002 4.9767 ]; : -----------------------------------------------------------; <HEADER> Factory : Evaluate classifier: Likelihood; : ; <HEADER> Likelihood : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_Likelihood : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.014081 1.2910 [ -5.3119 4.5609 ]; : var2: -0.014399 1.3299 [ -4.7537 4.6723 ]; : var3: -0.027971 1.3779 [ -5.2892 4.7007 ]; : var4: 0.12966 1.4883 [ -5.1002 4.9767 ]; : -----------------------------------------------------------; <HEADER> Factory : Evaluate classifier: FisherCat; : ; <HEADER> FisherCat : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_FisherCat : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.014081 1.2910 [ -5.3119 4.5609 ]; : var2: -0.014399 1.3299 [ -4.7537 4.6723 ]; : var3: -0.027971 1.3779 [ -5.2892 4.7007 ]; : var4: 0.12966 1.4883 [ -5.1002 4.9767 ]; : -------------------------------------------,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:24629,test,test,24629,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['test']
Testability,"ce; Inherited Members; Includes; Libraries. Function documentation; ~TMLPAnalyzer(); Destructor. Int_t GetLayers(); Returns the number of layers. Int_t GetNeurons(Int_t layer); Returns the number of neurons in given layer. TString GetNeuronFormula(Int_t idx); Returns the formula used as input for neuron (idx) in; the first layer. const char* GetInputNeuronTitle(Int_t in); Returns the name of any neuron from the input layer. const char* GetOutputNeuronTitle(Int_t out); Returns the name of any neuron from the output layer. void CheckNetwork(); Gives some information about the network in the terminal. void GatherInformations(); Collect informations about what is usefull in the network.; This method has to be called first when analyzing a network.; Fills the two analysis trees. void DrawDInput(Int_t i); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; the ith input. void DrawDInputs(); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; each input.; DrawDInputs() draws something that approximates the distribution of the; derivative of the NN w.r.t. each input. That quantity is recognized as; one of the measures to determine key quantities in the network. What is done is to vary one input around its nominal value and to see; how the NN changes. This is done for each entry in the sample and produces; a distribution. What you can learn from that is:; - is variable a really useful, or is my network insensitive to it ?; - is there any risk of big systematic ? Is the network extremely sensitive; to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve; as input for an ""educated guess"" when optimizing the network. void DrawNetwork(Int_t neuron, const char* signal, const char* bg); Draws the distribution of the neural network (using ith neuron).; Two distributions are drawn, for events passing respectively the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMLPAnalyzer.html:6981,test,test,6981,root/html528/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html528/TMLPAnalyzer.html,3,['test'],['test']
Testability,"ce_Check(pyobject);; 200 ; 201// all C++ objects should have sq_item defined, but a user-derived class may; 202// have deleted it, in which case this is not a sequence; 203 PyTypeObject* t = Py_TYPE(pyobject);; 204 if (!t->tp_as_sequence || !t->tp_as_sequence->sq_item); 205 return false;; 206 ; 207// if this is the default getitem, it is only a sequence if it's an array type; 208 if (t->tp_as_sequence->sq_item == CPPInstance_Type.tp_as_sequence->sq_item) {; 209 if (((CPPInstance*)pyobject)->fFlags & CPPInstance::kIsArray); 210 return true;; 211 return false;; 212 }; 213 ; 214// TODO: could additionally verify whether __len__ is supported and/or whether; 215// operator()[] takes an int argument type; 216 ; 217 return true;; 218}; 219 ; 220//-----------------------------------------------------------------------------; 221bool CPyCppyy::Instance_IsLively(PyObject* pyobject); 222{; 223// Test whether the given instance can safely return to C++; 224 if (!CPPInstance_Check(pyobject)); 225 return true; // simply don't know; 226 ; 227// the instance fails the lively test if it owns the C++ object while having a; 228// reference count of 1 (meaning: it could delete the C++ instance any moment); 229 if (pyobject->ob_refcnt <= 1 && (((CPPInstance*)pyobject)->fFlags & CPPInstance::kIsOwner)); 230 return false;; 231 ; 232 return true;; 233}; 234 ; 235//-----------------------------------------------------------------------------; 236bool CPyCppyy::Overload_Check(PyObject* pyobject); 237{; 238// Test if the given pyobject is of CPPOverload derived type.; 239 if (!Initialize()); 240 return false;; 241 ; 242// detailed walk through inheritance hierarchy; 243 return CPPOverload_Check(pyobject);; 244}; 245 ; 246//-----------------------------------------------------------------------------; 247bool CPyCppyy::Overload_CheckExact(PyObject* pyobject); 248{; 249// Test if the given pyobject is of CPPOverload type.; 250 if (!Initialize()); 251 return false;; 252 ; 253// direct pointer co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:7850,test,test,7850,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['test'],['test']
Testability,"cence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Showing results with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation about their use. The most complete documentation is the Reference Guide, that contains the automatically generated documentation of each class.; This document is about the top-level categories related to graphical output. . ‹ TMVA; up; Canvases and pads ›. Navigate through this book; Processing data with ROOT; Showing results with ROOTCanvases and pads; Graphics 2D; Graphics 3D. Simulation in ROOT; ROOT I/O. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/showing-results-root.html:3162,test,tests,3162,d/showing-results-root.html,https://root.cern,https://root.cern/d/showing-results-root.html,1,['test'],['tests']
Testability,"cene rebuilds, discarding those no longer of interest.; 9.13.4.10 Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not interested in a certain object due to limits/size then it will also not be interest in any of the contained branch of siblings. Both TBuffer3D::AddObject() methods have an addChildren return parameter. The viewer will complete this (if passed) indicating if children of the object just sent are worth sending.; 9.13.4.11 Recycling TBuffer3D; Once add TBuffer3D::AddObject() has been called, the contents are copied to the viewer’s internal data structures. You are free to destroy this TBuffer3D, or recycle it for the next object if suitable.; 9.13.4.12 Examples; For an example of a simple geometry, working in master reference frame examine the code under $ROOTSYS/g3d. For a more complex example, which works in both master and local frames, and uses logical/physical division of shape geometry and placement, examine the code under $ROOTSYS/geom - in particular TGeoShape hierarchy, and the painter object TGeoPainter (under geopainter) where the negotiation with the viewer is performed.; 10 Folders and Tasks; 10.1 Folders. A TFolder is a collection of objects visible and expandable in the ROOT object browser. Folders have a name and a title and are identified in the folder hierarchy by an “UNIX-like” naming convention. The base of all folders is //root. It is visible at the top of the left panel in the browser. The browser shows several folders under //root.; New folders can be added and removed to/from a folder.; 10.2 Why Use Folders?; One reason to use folders is to reduce class dependencies and improve modularity. Each set of data has a producer class and one or many consumer classes. When using folders, the producer class places a pointer to the data into a folder, and the consumer class retrieves a reference to the folder.; The consumer can access the objects in a folder by specifying the path name of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:418104,log,logical,418104,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability,"cent< Architecture_t >::TrainMomentum ; (; const Data_t & ; TrainingDataIn, . size_t ; nTrainingSamples, . const Data_t & ; TestDataIn, . size_t ; nTestSamples, . Net_t & ; net, . Scalar_t ; momentum, . size_t ; nThreads = 1 . ). Same as Train(...) but uses the given momentum. . Member Data Documentation. ◆ fBatchSize. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fBatchSize. private . Batch size to use for the training. ; Definition at line 62 of file Minimizers.h. ◆ fConvergenceCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceCount. private . Current number of training epochs without. ; considerable decrease in the test error. ; Definition at line 66 of file Minimizers.h. ◆ fConvergenceSteps. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceSteps. private . Number of training epochs without considerable. ; decrease in the test error for convergence. ; Definition at line 64 of file Minimizers.h. ◆ fLearningRate. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fLearningRate. private . Learning rate \(\alpha\). ; Definition at line 71 of file Minimizers.h. ◆ fMinimumError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fMinimumError. private . The minimum loss achieved on the training set during the current training session. ; Definition at line 72 of file Minimizers.h. ◆ fStepCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fStepCount. private . Number of steps performed in the current training session. ; Definition at line 63 of file Minimizers.h. ◆ fTestError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestError. private . Holds the most recently computed test loss. ; Definition at line 70 of file Minimizers.h. ◆ fTestI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:15292,test,test,15292,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['test'],['test']
Testability,"center and last bin center for each coordinate: ; fXAxis.GetBinCenter(1) < x < fXaxis.GetBinCenter(nbinX) AND fYAxis.GetBinCenter(1) < y < fYaxis.GetBinCenter(nbinY) AND fZAxis.GetBinCenter(1) < z < fZaxis.GetBinCenter(nbinZ) ; Reimplemented from TH1.; Definition at line 1458 of file TH3.cxx. ◆ IsA(). TClass * TH3::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH1.; Reimplemented in TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, and TProfile3D.; Definition at line 152 of file TH3.h. ◆ KolmogorovTest(). Double_t TH3::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. overridevirtual . Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ; Default: Ignore under- and overflow bins in comparison; option is a character string to specify options ""U"" include Underflows in test ""O"" include Overflows ""N"" include comparison of normalizations ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob; The returned function value is the probability of test (much less than one means NOT compatible); The KS test uses the distance between the pseudo-CDF's obtained from the histogram. Since in more than 1D the order for generating the pseudo-CDF is arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis. The average of all the maximum distances obtained is used in the tests. ; Reimplemented from TH1.; Definition at line 1532 of file TH3.cxx. ◆ operator=(). TH3 & TH3::operator= ; (; const TH3 & ; ). privatedelete . ◆ Project3D(). TH1 * TH3::Project3D ; (; Option_t * ; option = ""x""); const. virtual . Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. . option = ""x"" return the x projection into a TH1D histogram; option = ""y"" return the y projection into a TH1D histogram; option = ""z"" return the z project",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:89367,test,test,89367,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,3,['test'],['test']
Testability,"ces each array by one index in an attempt to move through the equality. However, this is incorrect when one or the other of a or b (or both) have a repeated value, call it x. For the KS statistic to be computed properly, rdiff needs to be calculated after all of the a and b at x have been tallied (this is due to the definition of the empirical distribution function; another way to convince yourself that the old CERNLIB method is wrong is that it implies that the function defined as the difference between a and b is multi-valued at x – besides being ugly, this would invalidate Kolmogorov's theorem).; The solution is to just add while-loops into the equality-case handling to perform the tally:; } else {; double x = a[ia-1];; while(a[ia-1] == x && ia <= na) {; rdiff -= sa;; ia++;; }; while(b[ib-1] == x && ib <= nb) {; rdiff += sb;; ib++;; }; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; xDouble_t x[n]Definition legend1.C:17. Note:; A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm ; Definition at line 805 of file TMath.cxx. ◆ KOrdStat(). template<class Element , typename Size > . Element TMath::KOrdStat ; (; Size ; n, . const Element * ; a, . Size ; k, . Size * ; work = 0 . ). Returns k_th order statistic of the array a of size n (k_th smallest element out of n elements). ; C-convention is used for array indexing, so if you want the second smallest element, call KOrdStat(n, a, 1).; If work is supplied, it is used to store the sorting index and assumed to be >= n. If work=0, local storage is used, either on the stack if n < kWorkMax or on the heap for n >= kWorkMax. Note that the work index array will not contain the sorted indices but all indices of the smaller element in arbitrary order in work[0,...,k-1] and all indices of the larger element in arbitrary order in work[k+1,..,n-1] work[k] will contain instead the index of the returned element.; Taken from ""Numerical Recip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:54695,test,test,54695,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['test'],['test']
Testability,"cess, -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, Int_t type = kRRT_Undef); Broadcast a character string buffer to the remote session.; Use kind to set the TMessage what field.; Returns 0 on success, -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Broadcast an object to the remote session.; Use kind to set the TMessage what field.; Returns 0 on success, -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length); Broadcast a raw buffer of specified length to the remote session.; Returns 0 on success, -1 in case of error. Int_t Collect(Long_t timeout = -1); Collect responses from the remote server.; Returns the number of messages received.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever). Int_t CollectInput(); Collect and analyze available input from the socket.; Returns 0 on success, -1 if any failure occurs. void RecvLogFile(Int_t size); Receive the log file from the server. Int_t SendObject(const TObject* obj); Send object to server.; Return 0 on success, -1 in case of error. Bool_t CheckFile(const char* file, Long_t modtime); Check if a file needs to be send to the server. Use the following; algorithm:; - check if file appears in file map; - if yes, get file's modtime and check against time in map,; if modtime not same get md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationRemote.html:14863,log,log,14863,root/html526/TApplicationRemote.html,https://root.cern,https://root.cern/root/html526/TApplicationRemote.html,7,['log'],['log']
Testability,"cessRemotely = (1ULL << ( 15 )); , kDefaultApplication = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofServ (Int_t *argc, char **argv, FILE *flog=0);  Main constructor. ;  ;  ~TProofServ () override;  Cleanup. ;  ; virtual Int_t CreateServer ();  Finalize the server setup. ;  ; virtual void DisableTimeout ();  ; virtual void EnableTimeout ();  ; void FlushLogFile ();  Reposition the read pointer in the log file to the very end. ;  ; TObject * Get (const char *namecycle);  Get object with name ""name;cycle"" (e.g. ;  ; Int_t GetActSessions () const;  ; const char * GetCacheDir () const;  ; TProofLockPath * GetCacheLock ();  ; const char * GetConfDir () const;  ; const char * GetConfFile () const;  ; Float_t GetCpuTime () const;  ; const char * GetDataDir () const;  ; const char * GetDataDirOpts () const;  ; Float_t GetEffSessions () const;  ; TList * GetEnabledPackages () const;  ; const char * GetGroup () const;  ; Int_t GetGroupId () const;  ; Int_t GetGroupSize () const;  ; const char * GetImage () const;  ; Int_t GetLogLevel () const;  ; Long64_t GetMsgSizeHWM () const;  ; TDSetElement * GetNextPacket (Long64_t totalEntries=-1);  Get next range of entries to be processed on this server. ;  ; void GetOptions (Int_t *argc, char **argv) override;  Get and handle command line options. ;  ; const char * GetOrdinal () const;  ; TPackMg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:2106,log,log,2106,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['log'],['log']
Testability,"cetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an ellipse. Compute the closest distance of approach from point px,py to this; ellipse. The distance is computed in pixels units. In case of a filled ellipse the distance returned is 0 if the point; (px,py) is inside the ellipse, and is huge if the point is outside. void Draw(Option_t* option = """"); Draw this ellipse with its current attributes. void DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); Draw this ellipse with new coordinates. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a line is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. NOTE that support for log scale is not implemented. void ls(Option_t* option = """") const; List this ellipse with its attributes. void Paint(Option_t* option = """"); Paint this ellipse with its current attributes. void PaintEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); Draw this ellipse with new coordinates. void Print(Option_t* option = """") const; Dump this ellipse with its attributes. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Bool_t GetNoEdges() const; Return kTRUE if kNoEdges bit is set, kFALSE otherwise. void SetNoEdges(Bool_t noEdges = kTRUE); if noEdges = kTRUE the lines connecting the center to the edges; will not be drawn.; default is to draw the edges. void Streamer(TBuffer& ); Stream an object of class TEllipse. Rectangle_t GetBBox(); Return the bounding Box of the Ellipse, currently not taking into; account the rotating angle. TPoint GetBBoxC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEllipse.html:10985,log,log,10985,root/html534/TEllipse.html,https://root.cern,https://root.cern/root/html534/TEllipse.html,3,['log'],['log']
Testability,"cetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an ellipse. Compute the closest distance of approach from point px,py to this; ellipse. The distance is computed in pixels units. In case of a filled ellipse the distance returned is 0 if the point; (px,py) is inside the ellipse, and is huge if the point is outside. void Draw(Option_t* option = """"); Draw this ellipse with its current attributes. void DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); Draw this ellipse with new coordinates. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a line is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. NOTE that support for log scale is not implemented. void ls(Option_t* option = """") const; List this ellipse with its attributes. void Paint(Option_t* option = """"); Paint this ellipse with its current attributes. void PaintEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); Draw this ellipse with new coordinates. void Print(Option_t* option = """") const; Dump this ellipse with its attributes. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Bool_t GetNoEdges() const; Return kTRUE if kNoEdges bit is set, kFALSE otherwise. void SetNoEdges(Bool_t noEdges = kTRUE); if noEdges = kTRUE the lines connecting the center to the edges; will not be drawn.; default is to draw the edges. void Streamer(TBuffer& b); Stream an object of class TEllipse. Double_t GetX1() const; {return fX1;}. Double_t GetY1() const; {return fY1;}. Double_t GetR1() const; {return fR1;}. Double_t GetR2(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEllipse.html:10358,log,log,10358,root/html528/TEllipse.html,https://root.cern,https://root.cern/root/html528/TEllipse.html,3,['log'],['log']
Testability,"ch ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the per",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:178301,log,log,178301,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['log'],['log']
Testability,"ch allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:85898,log,logical,85898,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"ch allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:26848,log,logical,26848,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"changed events. ; Definition at line 264 of file TGCommandPlugin.cxx. ◆ HandleTimer(). Bool_t TGCommandPlugin::HandleTimer ; (; TTimer * ; t). overridevirtual . Handle timer event. ; Reimplemented from TObject.; Definition at line 272 of file TGCommandPlugin.cxx. ◆ IsA(). TClass * TGCommandPlugin::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file TGCommandPlugin.h. ◆ SetHistAdd(). void TGCommandPlugin::SetHistAdd ; (; Bool_t ; add = kTRUE). The function SetHistAdd() is needed for a standalone TApplication to log the TGCommandPlugin commands into a ROOT history file. ; However, this function has no effect if the user does not explictly set on his standalone application the name of the ROOT history file. To log into the default ROOT history file, call this on the user-side of the code: Gl_histinit(gEnv->GetValue(""Rint.History"", gSystem->HomeDirectory())); Otherwise, replace the argument of Gl_histinit with a text file name you want to use for application-specific logging. ; Definition at line 302 of file TGCommandPlugin.cxx. ◆ Streamer(). void TGCommandPlugin::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGCommandPlugin::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TGCommandPlugin.h. ◆ ToggleTimer(). void TGCommandPlugin::ToggleTimer ; (; Bool_t ; on). Let user stop the internal timer when there is no need to check for remote. ; or start it again later on if needed. (on=False to stop, on=True to start) ; Definition at line 283 of file TGCommandPlugin.cxx. Member Data Documentation. ◆ fComboCmd. TGComboBox* TGCommandPlugin::fComboCmd. protected . commands combobox ; Definition at line 33 of file TGCommandPlugin.h. ◆ fCommand. TGTextEntry* TGCommandPlugin::fCommand. protected . command text entry widget ; Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCommandPlugin.html:39434,log,logging,39434,doc/master/classTGCommandPlugin.html,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html,1,['log'],['logging']
Testability,"changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t , Bool_t = kTRUE); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more purpose. Bool_t setDataSlave(RooAbsData& data, Bool_t cloneData = kTRUE, Bool_t ownNewDataAnyway = kFALSE); cout << ""RAOTS::setDataSlave("" << this << "") START"" << endl ;; Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the test statistic was constructed with; a range specification on the data, the cloneData argument is ignore and; the data is always cloned. RooAbsData& data(). const RooAbsData& data() const. RooAbsOptTestStatistic(); Constructors, assignment etc. RooAbsReal& function(); { return *_funcClone ; }. const RooAbsReal& function() const; { return *_funcClone ; }. const char* cacheUniqueSuffix() const; { return Form(""_%lx"", (ULong_t)_dataClone) ; }. Bool_t isDerived() const; Override this to be always true to force calculation of likelihood without parameters. { return kTRUE ; }. void seal(const char* notice = """"); { _sealed = kTRUE ; _sealNotice = notice ; }. Bool_t isSealed() const; { return _sealed ; }. const char* sealNotice() const; { return _sealNotice.Data() ; }. Bool_t allowFunctionCache(); { return kTRUE ; }. RooArgSet requiredExtraObservables() const; { return RooArgSet() ; }. » Last changed: Tue Jun 2 15:27:14 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsOptTestStatistic.html:47601,test,test,47601,root/html604/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html604/RooAbsOptTestStatistic.html,1,['test'],['test']
Testability,"changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t , Bool_t = kTRUE); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more purpose. Bool_t setDataSlave(RooAbsData& data, Bool_t cloneData = kTRUE, Bool_t ownNewDataAnyway = kFALSE); cout << ""RAOTS::setDataSlave("" << this << "") START"" << endl ;; Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the test statistic was constructed with; a range specification on the data, the cloneData argument is ignore and; the data is always cloned. RooAbsData& data(). const RooAbsData& data() const. RooAbsOptTestStatistic(); Constructors, assignment etc. RooAbsReal& function(); { return *_funcClone ; }. const RooAbsReal& function() const; { return *_funcClone ; }. const char* cacheUniqueSuffix() const; { return Form(""_%lx"", (ULong_t)_dataClone) ; }. Bool_t isDerived() const; Override this to be always true to force calculation of likelihood without parameters. { return kTRUE ; }. void seal(const char* notice = """"); { _sealed = kTRUE ; _sealNotice = notice ; }. Bool_t isSealed() const; { return _sealed ; }. const char* sealNotice() const; { return _sealNotice.Data() ; }. Bool_t allowFunctionCache(); { return kTRUE ; }. RooArgSet requiredExtraObservables() const; { return RooArgSet() ; }. » Last changed: Tue Jun 30 14:30:16 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsOptTestStatistic.html:47601,test,test,47601,root/html602/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsOptTestStatistic.html,1,['test'],['test']
Testability,"changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t , Bool_t = kTRUE); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more purpose. Bool_t setDataSlave(RooAbsData& data, Bool_t cloneData = kTRUE, Bool_t ownNewDataAnyway = kFALSE); cout << ""RAOTS::setDataSlave("" << this << "") START"" << endl ;; Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the test statistic was constructed with; a range specification on the data, the cloneData argument is ignore and; the data is always cloned. RooAbsData& data(). const RooAbsData& data() const. RooAbsReal& function(); { return *_funcClone ; }. const RooAbsReal& function() const; { return *_funcClone ; }. const char* cacheUniqueSuffix() const; { return Form(""_%lx"", (ULong_t)_dataClone) ; }. Bool_t isDerived() const; Override this to be always true to force calculation of likelihood without parameters. { return kTRUE ; }. void seal(const char* notice = """"); { _sealed = kTRUE ; _sealNotice = notice ; }. Bool_t isSealed() const; { return _sealed ; }. const char* sealNotice() const; { return _sealNotice.Data() ; }. Bool_t allowFunctionCache(); { return kTRUE ; }. RooArgSet requiredExtraObservables() const; { return RooArgSet() ; }. » Last changed: Fri Dec 2 14:26:36 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsOptTestStatistic.html:40017,test,test,40017,root/html532/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsOptTestStatistic.html,1,['test'],['test']
Testability,"changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t , Bool_t = kTRUE); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more purpose. Bool_t setDataSlave(RooAbsData& data, Bool_t cloneData = kTRUE, Bool_t ownNewDataAnyway = kFALSE); cout << ""RAOTS::setDataSlave("" << this << "") START"" << endl ;; Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the test statistic was constructed with; a range specification on the data, the cloneData argument is ignore and; the data is always cloned. RooAbsData& data(). const RooAbsData& data() const. RooAbsReal& function(); { return *_funcClone ; }. const RooAbsReal& function() const; { return *_funcClone ; }. const char* cacheUniqueSuffix() const; { return Form(""_%lx"", (ULong_t)_dataClone) ; }. Bool_t isDerived() const; Override this to be always true to force calculation of likelihood without parameters. { return kTRUE ; }. void seal(const char* notice = """"); { _sealed = kTRUE ; _sealNotice = notice ; }. Bool_t isSealed() const; { return _sealed ; }. const char* sealNotice() const; { return _sealNotice.Data() ; }. Bool_t allowFunctionCache(); { return kTRUE ; }. RooArgSet requiredExtraObservables() const; { return RooArgSet() ; }. » Last changed: Tue Mar 10 17:14:05 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:43928,test,test,43928,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,1,['test'],['test']
Testability,"char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TActivation * fActivation;  ; std::vector< TH1 * > fEpochMonHistB;  ; std::vector< TH1 * > fEpochMonHistS;  ; std::vector< TH1 * > fEpochMonHistW;  ; EEstimator fEstimator;  ; TH1F * fEstimatorHistTest;  ; TH1F * fEstimatorHistTrain;  ; TString fEstimatorS;  ; TActivation * fIdentity;  ; TNeuronInput * fInputCalculator;  ; TMatrixD fInvHessian;  zjh ;  ; Int_t fNcycles;  number of epochs to train ;  ; TString fNeuronInputType;  name of neuron input calculator class ;  ; TString fNeuronType;  name of neuron activation function class ;  ; TActivation * fOutput;  ; Int_t fRandomSeed;  random seed for initial synapse weights ;  ; std::vector< Int_t > fRegulatorIdx;  ; std::vector< Double_t > fRegulators;  ; TRandom3 * frgen;  ; TObjArray * fSynapses;  ; bool fUseRegulator;  zjh ;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:30338,test,testing,30338,doc/master/classTMVA_1_1MethodANNBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html,2,"['log', 'test']","['logger', 'testing']"
Testability,"char *url=nullptr, Int_t sessionidx=0, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  TProofProgressLog (TProofProgressDialog *d, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  ~TProofProgressLog () override;  Destructor. ;  ; void AddBuffer (const char *buffer);  Add text to the window. ;  ; void BuildLogList (Bool_t create=kFALSE);  Build the list of workers. ;  ; void Clear (Option_t *=nullptr) override;  Clear log window. ;  ; void CloseWindow () override;  Handle close button or when closed via window manager action. ;  ; void DoLog (Bool_t grep=kFALSE);  Display logs. ;  ; TClass * IsA () const override;  ; void LoadBuffer (const char *buffer);  Load a text buffer in the window. ;  ; void LoadFile (const char *file);  Load a file in the window. ;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame, if open. ;  ; void NoLineEntry ();  Enable/disable the line number entry. ;  ; void Popup ();  Show log window. ;  ; void Rebuild ();  Rebuild the log info for a new entered session. ;  ; void SaveToFile ();  Save the logs to a file Only the name of the file is taken, no expansion. ;  ; void Select (Int_t id, Bool_t all=kTRUE);  actions of select all/clear all button ;  ; void SetGrepView ();  Sets the view of grep filters according to the value of checkboxes. ;  ; void SetUrl (const char *url);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive (std::ostream &out, Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:1599,log,log,1599,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['log'],['log']
Testability,"char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Types; enum  ETextType { kRaw = 0; , kStd = 1; , kGrep = 2; };  . Private Member Functions; void Init (Int_t w=700, Int_t h=600);  Init window frame for log messages. ;  . Private Attributes; TGCheckButton * fAllLines;  ; TGSplitButton * fAllWorkers;  ; TGTextButton * fClose;  ; TProofProgressDialog * fDialog;  ; TGTextEntry * fFileName;  ; Bool_t fFullText;  ; TGTextButton * fGrepButton;  ; TGCheckButton * fGrepCheckCmd;  ; TGCheckButton * fGrepCheckInv;  ; TGLabel * fGrepLabel;  ; TGTextEntry * fGrepText;  ; TGNumberEntry * fLinesFrom;  ; TGNumberEntry * fLinesTo;  ; TGListBox * fLogList;  ; TGTextButton * fLogNew;  ; TProofLog * fProofLog;  ; TGCheckButton * fRawLines;  ; TGTextButton * fSave;  ; Int_t fSessionIdx;  ; TString fSessionUrl;  ; TGNumberEntry * fSessNum;  ; TGTextView * fText;  ; Int_t fTextType;  ; TGTextButton * fUrlButton;  ; TGTextEntry * fUrlText;  ; TGVerticalFrame * fVworkers;  . Additional Inherited Members;  Public Types inherited from TGTransientFrame; enum  EPlacement { ;   kCenter; , kLeft; , kRight; , kTop; , ;   kBottom; , kTopLeft; , kTopRight; , kBottomLeft; , ;   kBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:29565,log,log,29565,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['log'],['log']
Testability,"char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_toperator!=(Int_t index); Bool_toperator!=(const char* label); Bool_toperator!=(const RooAbsArg& other); RooAbsCategory&operator=(const RooAbsCategory&); Bool_toperator==(Int_t index) const; Bool_toperator==(const char* label) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); voidRooAbsArg::printDirty(Bool_t depth = kTRUE) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooAbsArg::printMetaArgs(ostream&) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCategory.html:11475,test,testArg,11475,root/html602/RooAbsCategory.html,https://root.cern,https://root.cern/root/html602/RooAbsCategory.html,2,['test'],['testArg']
Testability,"char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::Exe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategory.html:3366,test,testArg,3366,root/html532/RooAbsCategory.html,https://root.cern,https://root.cern/root/html532/RooAbsCategory.html,1,['test'],['testArg']
Testability,"char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTQueryResult::AddInput(TObject* obj); voidTQueryResult::AddLogLine(const char* logline); TQueryResult*TQueryResult::CloneInfo(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidTQueryResult::SaveSelector(const char* selec); voidTQueryResult::SetArchived(const char* archfile); virtual voidTQueryResult::SetInputList(TList* in, Bool_t adopt = kTRUE); virtual voidTQueryResult::SetOutputList(TList* out, Bool_t adopt = kTRUE); virtual voidTQueryResult::SetProcessInfo(Long64_t ent, Float_t cpu = 0., Long64_t siz = -1, Float_t inittime = 0., Float_t proctime = 0.). private:. TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); virtual voidRecordEnd(TQueryResult::EQueryStatus status, TList* outlist = 0); virtual voidSetFinalized(); voidSetResultFile(const char* rf); voidSetRunning(Int_t startlog, const char* par, Int_t nwrks). Data Members; public:. enum TQueryResult::EQueryStatus { kAborted; kSubmitted; kRunning; kStopped; kCompleted; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofQueryResult.html:6285,log,logline,6285,root/html534/TProofQueryResult.html,https://root.cern,https://root.cern/root/html534/TProofQueryResult.html,1,['log'],['logline']
Testability,chardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  TComplex.cxx;  TDataPointN.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.h;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  VavilovFast.h;  ► src;  cb,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:46425,test,testSpecFuncGamma,46425,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testSpecFuncGamma']
Testability,"che(); }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. { fPriorNuisance = pdf; }. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the parameters). { fNuisancePars = &np; }. void SetObservables(const RooArgSet& o); specify the observables in the dataset (needed to evaluate the test statistic). { fObservables = &o; }. void SetGlobalObservables(const RooArgSet& o); specify the conditional observables. { fGlobalObservables = &o; }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). { fSize = size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fSize = 1. - cl; }. void SetTestStatistic(RooStats::TestStatistic* testStatistic); Set the TestStatistic (want the argument to be a function of the data & parameter points. { fTestStat = testStatistic; }. void SetExpectedNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetAsimovNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetGenerateBinned(bool binned = true); control to use bin data generation (=> see RooFit::AllBinned() option). { fGenerateBinned = binned; }. void SetGenerateBinnedTag(const char* binnedTag = """"); name of the tag for individual components to be generated binned (=> see RooFit::GenBinned() option). { fGenerateBinnedTag = binnedTag; }. void SetGenerateAutoBinned(Bool_t autoBinned = kTRUE); set auto binned generation (=> see RooFit::AutoBinned() option). { fGenerateAutoBinned = autoBinned; }. void SetSamplingDistName(const char* name); Set the name of the sampling distribution used for plotting. { if(name) fSamplingDistName = name; }. string GetSamplingDistName(void); { return fSamplingDistName; }. void SetMaxToys(Double_t t); This option forces a maximum number of total toys. { fMaxToys = t; }. void SetToysLeftTail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ToyMCSampler.html:9131,test,testStatistic,9131,root/html532/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html532/RooStats__ToyMCSampler.html,1,['test'],['testStatistic']
Testability,"checkbox active if piping; TGCheckButton*fGrepCheckInvcheckbox active if inverting; TGLabel*fGrepLabellabel indicating if grepping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofProgressLog.html:23755,log,log,23755,root/html534/TProofProgressLog.html,https://root.cern,https://root.cern/root/html534/TProofProgressLog.html,1,['log'],['log']
Testability,"chi2, likelihood, etc..) given the data and the model function ;  NHFitInterface;  NGLTutorials;  ►NInternal;  NExecutorUtils;  NTDF;  NTThreadedObjectUtils;  ►NMacOSX;  NDetails;  NOpenGL;  NUtil;  ►NX11;  NDetail;  ►NMath;  NBlas;  NBrentMethods;  NCephes;  NChebyshevTemplate recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  NCholeskyDecompHelpersHelpers for CholeskyDecomp ;  Ndetail;  NGenAlgoOptUtil;  NGenVector;  NGenVector_detail;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  Ngv_detail;  NImpl;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInternal;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  NRootsRoot-Finding Algorithms ;  NrowOffsetsUtils;  NSampler;  NUtilNamespace defining Utility functions needed by mathcore ;  NVectorUtilGlobal Helper functions for generic Vector classes ;  NMathMore;  ►NMeta;  NSelection;  NMinuit;  NMinuit2;  NQuartz;  NRNamespace associated R package for ROOT ;  NTF1Helper;  NTMetaUtils;  NTreeUtils;  NTThreadedObjectUtils;  NTypeTraitsROOT type_traits extensions ;  ►Nv5;  NTFastFun;  Nrootmarks;  NROOTwriter;  Nshapes;  Nsqlio;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ndetail;  Nsurfaces;  Ntbb;  NTClassEdit;  Ntdf001_introduction;  Ntdf002_dataModel;  Ntdf003_profiles;  Ntdf004_cutFlowReport;  Ntdf006_ranges;  Ntdf007_snapshot;  Ntdf008_createDataSetFromScratch;  Ntdf010_trivialDataSource;  Ntdf011_ROOTDataSource;  Ntdf012_DefinesAndFiltersAsStrings;  Ntdf014_CSVDataSource;  Ntest;  NTGeoUnit;  NtimeSeriesFromCSV;  NTMath;  NTMatrixTCramerInv;  NTMatrixTSymCramerInv;  ►NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  ►NDNN;  NBlas;  NExperimental;  NkNN;  NTMVAGlob;  Ntornado;  Ntree;  NTStreamerInfoActions;  Ntwoscales;  ►Nvecgeom;  Ncxx;  Nwriter;  Nxmlio;  NXPD;  NXrdCl;  Nzdemo;  Nzones. ROOT 6.12/07 - Referen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/namespaces.html:2618,test,test,2618,doc/v612/namespaces.html,https://root.cern,https://root.cern/doc/v612/namespaces.html,1,['test'],['test']
Testability,"ching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidnormLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooResolutionModel.html:23419,test,testArg,23419,root/html528/RooResolutionModel.html,https://root.cern,https://root.cern/root/html528/RooResolutionModel.html,1,['test'],['testArg']
Testability,"chronize(vector<ROOT::Fit::ParameterSettings>& parameters, Bool_t optConst, Bool_t verbose); voidzeroEvalCount(). private:. voidClearPdfParamAsymErr(Int_t index); virtual doubleDoEval(const double* x) const; Double_tGetPdfParamErr(Int_t index); Double_tGetPdfParamVal(Int_t index); voidSetPdfParamErr(Int_t index, Double_t value); voidSetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Bool_tSetPdfParamVal(const Int_t& index, const Double_t& value) const; voidupdateFloatVec(). Data Members; private:. RooArgList*_constParamList; RooMinimizer*_context; Bool_t_doEvalErrorWall; Int_t_evalCounter; RooArgList*_floatParamList; vector<RooAbsArg*>_floatParamVec; RooAbsReal*_funct; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; double_maxFCN; int_nDim; int_numBadNLL; int_printEvalErrors; bool_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMinimizerFcn(RooAbsReal* funct, RooMinimizer* context, bool verbose = false); Reset the *largest* negative log-likelihood value we have seen so far. RooMinimizerFcn(const RooMinimizerFcn& other). ~RooMinimizerFcn(). ROOT::Math::IBaseFunctionMultiDim* Clone() const. Bool_t Synchronize(vector<ROOT::Fit::ParameterSettings>& parameters, Bool_t optConst, Bool_t verbose). Double_t GetPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t GetPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void ClearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void BackProp(const ROOT::Fit::FitResult& results); Transfer MINUIT fit results back into RooFit objects. Bool_t SetLogFile(const char* inL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinimizerFcn.html:2598,log,log-likelihood,2598,root/html602/RooMinimizerFcn.html,https://root.cern,https://root.cern/root/html602/RooMinimizerFcn.html,2,['log'],['log-likelihood']
Testability,"ciates each; algorithm with a number. There is a utility function to help; to set the value of compress. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. In case the file does not exist or is not a valid ROOT file,; it is made a Zombie. One can detect this situation with a code like:; TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }. When opening the file, the system checks the validity of this directory.; If something wrong is detected, an automatic Recovery is performed. In; this case, the file is scanned sequentially reading all logical blocks; and attempting to rebuild a correct directory (see TFile::Recover).; One can disable the automatic recovery procedure when reading one; or more files by setting the environment variable ""TFile.Recover: 0""; in the system.rootrc file. TFile(const TFile& ); TFile objects can not be copied. ~TFile(); File destructor. void Init(Bool_t create); Initialize a TFile object.; TFile implementations providing asynchronous open functionality need to; override this method to run the appropriate checks before calling this; standard initialization part. See TXNetFile::Init for an example. void Close(Option_t* option = """"); Close a file.; If option == ""R"", all TProcessIDs referenced by this file are deleted.; Calling TFile::Close(""R"") might be necessary in case one reads a long list; of files having TRef, writing some of the referenced objects or TRef; to a new file. If the TRef or referenced objects of the file being closed; will not be referenced again, it is possible to minimize the size; of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFile.html:28439,log,logical,28439,root/html602/TFile.html,https://root.cern,https://root.cern/root/html602/TFile.html,2,['log'],['logical']
Testability,"ciency calculation method; 154 // - kUseEventSelection: computes efficiencies from given data sample; 155 // - kUsePDFs : creates smoothed PDFs from data samples, and; 156 // uses this to compute efficiencies; 157 enum EEffMethod { kUseEventSelection = 0,; 158 kUsePDFs };; 159 ; 160 // improve the Monte Carlo by providing some additional information; 161 enum EFitParameters { kNotEnforced = 0,; 162 kForceMin,; 163 kForceMax,; 164 kForceSmart };; 165 ; 166 // general; 167 TString fFitMethodS; ///< chosen fit method (string); 168 EFitMethodType fFitMethod; ///< chosen fit method; 169 TString fEffMethodS; ///< chosen efficiency calculation method (string); 170 EEffMethod fEffMethod; ///< chosen efficiency calculation method; 171 std::vector<EFitParameters>* fFitParams; ///< vector for series of fit methods; 172 Double_t fTestSignalEff; ///< used to test optimized signal efficiency; 173 Double_t fEffSMin; ///< used to test optimized signal efficiency; 174 Double_t fEffSMax; ///< used to test optimized signal efficiency; 175 Double_t* fCutRangeMin; ///< minimum of allowed cut range; 176 Double_t* fCutRangeMax; ///< maximum of allowed cut range; 177 std::vector<Interval*> fCutRange; ///< allowed ranges for cut optimisation; 178 ; 179 // for the use of the binary tree method; 180 BinarySearchTree* fBinaryTreeS;; 181 BinarySearchTree* fBinaryTreeB;; 182 ; 183 // MC method; 184 Double_t** fCutMin; ///< minimum requirement; 185 Double_t** fCutMax; ///< maximum requirement; 186 Double_t* fTmpCutMin; ///< temporary minimum requirement; 187 Double_t* fTmpCutMax; ///< temporary maximum requirement; 188 TString* fAllVarsI; ///< what to do with variables; 189 ; 190 // relevant for all methods; 191 Int_t fNpar; ///< number of parameters in fit (default: 2*Nvar); 192 Double_t fEffRef; ///< reference efficiency; 193 std::vector<Int_t>* fRangeSign; ///< used to match cuts to fit parameters (and vice versa); 194 TRandom* fRandom; ///< random generator for MC optimisation method; 195 ; 19",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8h_source.html:6555,test,test,6555,doc/master/MethodCuts_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html,1,['test'],['test']
Testability,ciencyHelper.h;  TF1.cxx;  TF12.cxx;  TF1Convolution.cxx;  TF1Data_v5.cxx;  TF1Helper.cxx;  TF1Helper.h;  TF1NormSum.cxx;  TF2.cxx;  TF3.cxx;  TFitResult.cxx;  TFitResultPtr.cxx;  TFormula.cxx;  TFormula_v5.cxx;  TFormulaMathInterface.cxx;  TFormulaPrimitive_v5.cxx;  TFractionFitter.cxx;  TGraph.cxx;  TGraph2D.cxx;  TGraph2DErrors.cxx;  TGraphAsymmErrors.cxx;  TGraphBentErrors.cxx;  TGraphDelaunay.cxx;  TGraphDelaunay2D.cxx;  TGraphErrors.cxx;  TGraphSmooth.cxx;  TGraphTime.cxx;  TH1.cxx;  TH1K.cxx;  TH1Merger.cxx;  TH1Merger.h;  TH2.cxx;  TH2Poly.cxx;  TH3.cxx;  THLimitsFinder.cxx;  THn.cxx;  THnBase.cxx;  THnChain.cxx;  THnSparse.cxx;  THStack.cxx;  TKDE.cxx;  TLimit.cxx;  TLimitDataSource.cxx;  TMultiDimFit.cxx;  TMultiGraph.cxx;  TPolyMarker.cxx;  TPrincipal.cxx;  TProfile.cxx;  TProfile2D.cxx;  TProfile2Poly.cxx;  TProfile3D.cxx;  TProfileHelper.h;  TSpline.cxx;  TSVDUnfold.cxx;  TVirtualFitter.cxx;  TVirtualGraphPainter.cxx;  TVirtualHistPainter.cxx;  WrappedTF1.cxx;  ► test;  test_tprofile2poly.cxx;  ► v7;  ► inc;  ► ROOT;  TAxis.hxx;  THist.hxx;  THistBinIter.hxx;  THistBufferedFill.hxx;  THistConcurrentFill.hxx;  THistData.hxx;  THistDrawable.hxx;  THistDrawOptions.hxx;  THistImpl.hxx;  THistUtils.hxx;  THistView.hxx;  ► src;  TAxis.cxx;  THistDrawable.cxx;  ► test;  speedtest.cxx;  ► histpainter;  ► inc;  Hoption.h;  Hparam.h;  TGraph2DPainter.h;  TGraphPainter.h;  THistPainter.h;  TLego.h;  TPainter3dAlgorithms.h;  TPaletteAxis.h;  ► src;  TGraph2DPainter.cxx;  TGraphPainter.cxx;  THistPainter.cxx;  TPainter3dAlgorithms.cxx;  TPaletteAxis.cxx;  ► v7;  ► src;  THistPainter.cxx;  ► spectrum;  ► inc;  TSpectrum.h;  TSpectrum2.h;  TSpectrum2Fit.h;  TSpectrum2Transform.h;  TSpectrum3.h;  TSpectrumFit.h;  TSpectrumTransform.h;  ► src;  TSpectrum.cxx;  TSpectrum2.cxx;  TSpectrum2Fit.cxx;  TSpectrum2Transform.cxx;  TSpectrum3.cxx;  TSpectrumFit.cxx;  TSpectrumTransform.cxx;  ► spectrumpainter;  ► inc;  TSpectrum2Painter.h;  ► src;  TSpectrum2Painter.cxx;  ► unfol,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:34685,test,test,34685,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['test']
Testability,"cient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const. void getCompIntList(const RooArgSet* nset, const RooArgSet* iset, RooAddModel::pRooArgList& compIntList, Int_t& code, const char* isetRangeName) const; Check if this configuration was created before. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:46716,test,test,46716,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,1,['test'],['test']
Testability,"cified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. Int_t Remove(const char* ref, Bool_t all); Handle remove request. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. void FindUniqueSlaves(); Add to the fUniqueSlave list the active slaves that have a unique; (user) file system image. This information is used to transfer files; only once to nodes that share a file system (an image). Submasters; which are not in fUniqueSlaves are put in the fNonUniqueMasters; list. That list is used to trigger the transferring of files to; the submaster's unique slaves without the need to transfer the file; to the submaster. void ShowData(); List contents of the data directory in the sandbox.; This is the place where files produced by the client queries are kept. void ShowDataDir(const char* dirname); List contents of the data directory 'dirname'. Int_t PollForNewWorkers(); Simulate dynamic addition, for test purposes.; Here we decide how many workers to add, we create them and set the; environment.; This call is called regularly by Collect if the opton is enabled.; Returns the number of new workers added, or <0 on errors. TProofLite(const TProofLite& ). void operator=(const TProofLite& ). TProofLite(); { }. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); Process via TSelector. { return TProof::Process(sel, nent, o); }. Long64_t Process(TDSet* dset, TSelector* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); { return TProof::Process(dset, sel, o, nent, fst); }. Long64_t Process(TFileCollectio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:36828,test,test,36828,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,2,['test'],['test']
Testability,"cissa x. If x is underflow or overflow, attempt to rebin histogram. Int_t FindBin(const char *label); Find bin number with label.; If label is not in the list of labels, add it.; If the number of labels exceeds the number of bins, double the number; of bins via TH1::LabelsInflate (if the histogram can be rebinned). Int_t FindFixBin(Double_t x) const; Find bin number corresponding to abscissa x. const char * GetBinLabel(Int_t bin) const; Return label for bin. Int_t GetFirst() const; return first bin on the axis; ie 1 if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Int_t GetLast() const; return last bin on the axis; ie fNbins if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Double_t GetBinCenter(Int_t bin) const; Return center of bin. Double_t GetBinCenterLog(Int_t bin) const; Return center of bin in log; With a log-equidistant binning for a bin with low and up edges, the mean is :; 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; Imagine a bin with low=1 and up=100 :; - the center in lin is (100-1)/2=50.5; - the center in log would be sqrt(1*100)=10 (!=log(50.5)); NB: if the low edge of the bin is negative, the function returns the bin center; as computed by TAxis::GetBinCenter. Double_t GetBinLowEdge(Int_t bin) const; Return low edge of bin. Double_t GetBinUpEdge(Int_t bin) const; Return up edge of bin. Double_t GetBinWidth(Int_t bin) const; Return bin width. void GetCenter(Double_t* center) const; Return an array with the center of all bins. void GetLowEdge(Double_t* edge) const; Return an array with the lod edge of all bins. const char * GetTimeFormatOnly() const; Return *only* the time format from the string fTimeFormat. const char * GetTicks() const; Return the ticks option (see SetTicks). void LabelsOption(Option_t* option = ""h""); Set option(s) to draw axis with labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAxis.html:13599,log,logx,13599,root/html526/TAxis.html,https://root.cern,https://root.cern/root/html526/TAxis.html,1,['log'],['logx']
Testability,"cissa x. If x is underflow or overflow, attempt to rebin histogram. Int_t FindBin(const char* label); Find bin number with label.; If label is not in the list of labels, add it.; If the number of labels exceeds the number of bins, double the number; of bins via TH1::LabelsInflate (if the histogram can be rebinned). Int_t FindFixBin(Double_t x) const; Find bin number corresponding to abscissa x. const char * GetBinLabel(Int_t bin) const; Return label for bin. Int_t GetFirst() const; return first bin on the axis; ie 1 if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Int_t GetLast() const; return last bin on the axis; ie fNbins if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Double_t GetBinCenter(Int_t bin) const; Return center of bin. Double_t GetBinCenterLog(Int_t bin) const; Return center of bin in log; With a log-equidistant binning for a bin with low and up edges, the mean is :; 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; Imagine a bin with low=1 and up=100 :; - the center in lin is (100-1)/2=50.5; - the center in log would be sqrt(1*100)=10 (!=log(50.5)); NB: if the low edge of the bin is negative, the function returns the bin center; as computed by TAxis::GetBinCenter. Double_t GetBinLowEdge(Int_t bin) const; Return low edge of bin. Double_t GetBinUpEdge(Int_t bin) const; Return up edge of bin. Double_t GetBinWidth(Int_t bin) const; Return bin width. void GetCenter(Double_t* center) const; Return an array with the center of all bins. void GetLowEdge(Double_t* edge) const; Return an array with the lod edge of all bins. const char * GetTimeFormatOnly() const; Return *only* the time format from the string fTimeFormat. const char * GetTicks() const; Return the ticks option (see SetTicks). void LabelsOption(Option_t* option = ""h""); Set option(s) to draw axis with labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAxis.html:13653,log,logx,13653,root/html528/TAxis.html,https://root.cern,https://root.cern/root/html528/TAxis.html,1,['log'],['logx']
Testability,"ck (LayerData (numNodesPrev));; 1181 ; 1182 if (itGradientBegin == itGradientEnd); 1183 {; 1184 layerData.push_back (LayerData (layer.numNodes (), itWeight,; 1185 layer.activationFunction (),; 1186 layer.modeOutputValues ()));; 1187 }; 1188 else; 1189 {; 1190 layerData.push_back (LayerData (layer.numNodes (), itWeight, itGradient,; 1191 layer.activationFunction (),; 1192 layer.inverseActivationFunction (),; 1193 layer.modeOutputValues ()));; 1194 }; 1195 ; 1196 if (usesDropOut); 1197 {; 1198 layerData.back ().setDropOut (itDropOut);; 1199 }; 1200 ; 1201 }; 1202 ; 1203 if (usesDropOut); 1204 {; 1205 itDropOut += layer.numNodes ();; 1206 }; 1207 size_t _numWeights = layer.numWeights (numNodesPrev);; 1208 totalNumWeights += _numWeights;; 1209 itWeight += _numWeights;; 1210 itGradient += _numWeights;; 1211 numNodesPrev = layer.numNodes ();; 1212 ; 1213 }; 1214 assert (totalNumWeights > 0);; 1215 return layerPatternData;; 1216}; 1217 ; 1218 ; 1219 ; 1220 template <typename LayerContainer>; 1221 void Net::forwardPattern (const LayerContainer& _layers,; 1222 std::vector<LayerData>& layerData) const; 1223 {; 1224 size_t idxLayer = 0, idxLayerEnd = _layers.size ();; 1225 for (; idxLayer < idxLayerEnd; ++idxLayer); 1226 {; 1227 LayerData& prevLayerData = layerData.at (idxLayer);; 1228 LayerData& currLayerData = layerData.at (idxLayer+1);; 1229 ; 1230 forward (prevLayerData, currLayerData);; 1231 ; 1232 applyFunctions (currLayerData.valuesBegin (), currLayerData.valuesEnd (), currLayerData.activationFunction ());; 1233 }; 1234 }; 1235 ; 1236 ; 1237 ; 1238 ; 1239 template <typename LayerContainer, typename LayerPatternContainer>; 1240 void Net::forwardBatch (const LayerContainer& _layers,; 1241 LayerPatternContainer& layerPatternData,; 1242 std::vector<double>& valuesMean,; 1243 std::vector<double>& valuesStdDev,; 1244 size_t trainFromLayer) const; 1245 {; 1246 valuesMean.clear ();; 1247 valuesStdDev.clear ();; 1248 ; 1249 // ---------------------------------- loop over layers a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:39516,assert,assert,39516,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['assert'],['assert']
Testability,"ck if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t id); { return _streams[id] ; }. Int_t numStreams() const; { return _streams.size() ; }. void reset(); { cleanup() ; }. void setGlobalKillBelow(RooFit::MsgLevel level); { _globMinLevel = level ; }. RooFit::MsgLevel globalKillBelow() const; { return _globMinLevel ; }. void showPid(Bool_t flag); { _showPid = flag ; }. Bool_t silentMode() const; Print level support for RooFit-related messages that are not routed through RooMsgService (such as Minuit printouts). { return _silentMode ; }. void setSilentMode(Bool_t flag); { _silentMode = flag ; }. Int_t errorCount() const; { return _errorCount ; }. void clearErrorCount(); { _errorCount = 0 ; }. Int_t& debugCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMsgService.html:11321,log,log,11321,root/html528/RooMsgService.html,https://root.cern,https://root.cern/root/html528/RooMsgService.html,6,['log'],['log']
Testability,"ck its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TApplicationServer.html:16027,log,logon,16027,root/html534/TApplicationServer.html,https://root.cern,https://root.cern/root/html534/TApplicationServer.html,3,['log'],['logon']
Testability,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:8958,test,test,8958,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,32,['test'],['test']
Testability,"ck the boundary errors reference file created by CheckBoundaryErrors method.; The shape for which the crossing failed is drawn with the starting point in red; and the extrapolated point to boundary (+/- failing push/pull) in yellow. void CheckGeometryFull(Bool_t checkoverlaps = kTRUE, Bool_t checkcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = NULL); Geometry checking method (see: TGeoManager::CheckGeometry()). void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const; Geometry checking method (see TGeoChecker). void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.1, Option_t* option = """") const; Check overlaps for the top volume of the geometry, within a limit OVLP. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); check current point in the geometry. void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). void ClearVisibleVolumes(); Clear the list of visible volumes; reset the kVisOnScreen bit for volumes previously in the list. void DefineColors() const; Define 100 colors with increasing light intensities for each basic color (1-7); Register these colors at indexes starting with 1000. Int_t GetColor(Int_t base, Float_t light) const; Get index of a base color with given light intensity (0,1). TGeoVolume * GetDrawnVolume() const; Get currently drawn volume. Int_t DistanceToPrimitiveVol(TGeoVolume* vol, Int_t px, Int_t py); compute the closest distance of approach from point px,py to a volume. void DefaultAngles(); Set default angles for the current view. void DefaultColors(); Set default volume colors according to tracking media. Int_t CountNodes(TGeoVolume* v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPainter.html:14413,test,test,14413,root/html530/TGeoPainter.html,https://root.cern,https://root.cern/root/html530/TGeoPainter.html,3,['test'],['test']
Testability,"ck::now();; 1609 ; 1610 // Compute numerical throughput.; 1611 std::chrono::duration<double> elapsed_seconds = tend - tstart;; 1612 std::chrono::duration<double> elapsed1 = t1-tstart;; 1613 // std::chrono::duration<double> elapsed2 = t2-tstart;; 1614 // time to compute training and test errors; 1615 std::chrono::duration<double> elapsed_testing = tend-t1;; 1616 ; 1617 double seconds = elapsed_seconds.count();; 1618 // double nGFlops = (double)(settings.testInterval * batchesInEpoch * settings.batchSize)*1.E-9;; 1619 // nGFlops *= deepnet.GetNFlops() * 1e-9;; 1620 double eventTime = elapsed1.count()/( batchesInEpoch * settings.testInterval * settings.batchSize);; 1621 ; 1622 converged =; 1623 convergenceCount > settings.convergenceSteps || nTrainEpochs >= settings.maxEpochs;; 1624 ; 1625 ; 1626 Log() << std::setw(10) << nTrainEpochs << "" | ""; 1627 << std::setw(12) << trainingError; 1628 << std::setw(12) << valError; 1629 << std::setw(12) << seconds / settings.testInterval; 1630 << std::setw(12) << elapsed_testing.count(); 1631 << std::setw(12) << 1. / eventTime; 1632 << std::setw(12) << convergenceCount; 1633 << Endl;; 1634 ; 1635 if (converged) {; 1636 Log() << Endl;; 1637 }; 1638 tstart = std::chrono::system_clock::now();; 1639 }; 1640 ; 1641 // if (stepCount % 10 == 0 || converged) {; 1642 if (converged && debug) {; 1643 Log() << ""Final Deep Net Weights for phase "" << trainingPhase << "" epoch "" << nTrainEpochs; 1644 << Endl;; 1645 auto & weights_tensor = deepNet.GetLayerAt(0)->GetWeights();; 1646 auto & bias_tensor = deepNet.GetLayerAt(0)->GetBiases();; 1647 for (size_t l = 0; l < weights_tensor.size(); ++l); 1648 weights_tensor[l].Print();; 1649 bias_tensor[0].Print();; 1650 }; 1651 ; 1652 }; 1653 ; 1654 trainingPhase++;; 1655 } // end loop on training Phase; 1656}; 1657 ; 1658////////////////////////////////////////////////////////////////////////////////; 1659void MethodDL::Train(); 1660{; 1661 if (fInteractive) {; 1662 Log() << kFATAL << ""Not implemented yet"" <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:64857,test,testInterval,64857,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['test'],['testInterval']
Testability,"ckage and it provides answers to the basic questions like ""Where am I ?"" or ""How far; from the next boundary ?"", but also to more complex ones like ""How far from; the closest surface ?"" or ""Which is the next crossing along a helix ?"".; The architecture of the modeler is a combination between a GEANT-like containment scheme and a normal CSG binary tree at the level of shapes. An important common feature of all detector geometry descriptions is the mother-daughter concept. This is the most natural approach when tracking is concerned and imposes a set of constraints to the way geometry is defined. Constructive solid geometry composition is used only in order to create more complex shapes from an existing set of primitives through boolean operations. This feature is not implemented yet but in future full definition of boolean expressions will be supported.; Practically every geometry defined in GEANT style can be mapped by the modeler. The basic components used for building the logical hierarchy of the geometry are called ""volumes"" and ""nodes"". Volumes (sometimes called ""solids"") are fully defined geometrical objects having a given shape and medium and possibly containing a list of nodes. Nodes represent just positioned instances of volumes inside a container volume and they are not directly defined by user. They are automatically created as a result of adding one volume inside other or dividing a volume. The geometrical transformation hold by nodes is always defined with respect to their mother (relative positioning). Reflection matrices are allowed. All volumes have to be fully aware of their containees when the geometry is closed. They will build additional structures (voxels) in order to fasten-up the search algorithms. Finally, nodes can be regarded as bidirectional links between containers and containees objects.; The structure defined in this way is a graph structure since volumes are replicable (same volume can become daughter node of several other volumes), ever",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:2365,log,logical,2365,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['log'],['logical']
Testability,"ckgroundWeight); ; ## add event variables (image); ## use new method (from ROOT 6.20 to add a variable array for all image data); loader.AddVariablesArray(""vars"", imgSize); ; # Set individual event weights (the variables must exist in the original TTree); # for signal : factory->SetSignalWeightExpression (""weight1*weight2"");; # for background: factory->SetBackgroundWeightExpression(""weight1*weight2"");; # loader->SetBackgroundWeightExpression( ""weight"" );; ; # Apply additional cuts on the signal and background samples (can be different); mycuts = """" # for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; mycutb = """" # for example: TCut mycutb = ""abs(var1)<0.5"";; ; # Tell the factory how to use the training and testing events; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader.PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # It is possible also to specify the number of training and testing events,; # note we disable the computation of the correlation matrix of the input variables; ; nTrainSig = 0.8 * nEventsSig; nTrainBkg = 0.8 * nEventsBkg; ; # build the string options for DataLoader::PrepareTrainingAndTestTree; ; loader.PrepareTrainingAndTestTree(; mycuts,; mycutb,; nTrain_Signal=nTrainSig,; nTrain_Background=nTrainBkg,; SplitMode=""Random"",; SplitSeed=100,; NormMode=""NumEvents"",; V=False,; CalcCorrelations=False,; ); ; ; # DataSetInfo : [dataset] : Added class ""Signal""; # : Add Tree sig_tree of type Signal with 10000 events; # DataSetInfo : [dataset] : Added class ""Background""; # : Add Tree bkg_tree of type Background with 10000 events; ; # signalTree.Print();; ; # Booking Methods; ; # Here we book the TMVA methods. We book a Boosted Decision Tree method (BDT); ; ; # Boosted Decision Trees; if useTMVABDT:; factory.BookMethod(; loader,; TMVA.Types.kBDT,; ""BDT"",; V=False,; NTrees=400,; MinNodeSize=""2.5%"",; MaxDepth=2,; BoostType=""AdaBoost"",; AdaBoostBeta=0.5,; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:8579,test,testing,8579,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['test'],['testing']
Testability,"cking these changes which result in a net overhead. Thus for observable-dependent nodes,; the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t ); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more purpose. Bool_t setData(RooAbsData& data, Bool_t cloneData = kTRUE); Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the test statistic was constructed with; a range specification on the data, the cloneData argument is ignore and; the data is always cloned. RooAbsData& data(). const RooAbsData& data() const. RooAbsReal& function(); { return *_funcClone ; }. const RooAbsReal& function() const; { return *_funcClone ; }. const char* cacheUniqueSuffix() const; { return Form(""_%lx"", (ULong_t)_dataClone) ; }. Bool_t isDerived() const; Override this to be always true to force calculation of likelihood without parameters. { return kTRUE ; }. void seal(const char* notice = """"); { _sealed = kTRUE ; _sealNotice = notice ; }. Bool_t isSealed() const; { return _sealed ; }. const char* sealNotice() const; { return _sealNotice.Data() ; }. Bool_t allowFunctionCache(); { return kTRUE ; }. RooArgSet requiredExtraObservables() const; { return RooArgSet() ; }. » Last changed: Wed Dec 8 11:39:35 2010 » Last generated: 2010-12-08 11:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsOptTestStatistic.html:38446,test,test,38446,root/html528/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsOptTestStatistic.html,1,['test'],['test']
Testability,"cks, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ; Definition at line 736 of file RWebWindow.cxx. ◆ ProvideQueueEntry(). void RWebWindow::ProvideQueueEntry ; (; unsigned ; connid, . EQueueEntryKind ; kind, . std::string && ; arg . ). private . Provide data to user callback User callback must be executed in the window thread. ; Definition at line 421 of file RWebWindow.cxx. ◆ RecordData(). void RWebWindow::RecordData ; (; const std::string & ; fname = ""protocol.json"", . const std::string & ; fprefix = """" . ). Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ; JSON file will look like: [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; If empty file name is provided, data recording will be disabled Recorded data can be used in JSROOT directly to test client code without running C++ server ; Definition at line 1355 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1867 of file RWebWindow.cxx. ◆ RemoveKey(). void RWebWindow::RemoveKey ; (; const std::string & ; key). private . Removes all connections with the key. ; Definition at line 583 of file RWebWindow.cxx. ◆ RemoveMasterConnection(). void RWebWindow::RemoveMasterConnection ; (; unsigned ; connid = 0). private . Remove master connection - if any. ; Definition at line 343 of file RWebWindow.cxx. ◆ Run(). void RWebWindow::Run ; (; double ; tm = 0.). Run window functionality for specified time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:40064,test,test,40064,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['test'],['test']
Testability,"cks, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ; Definition at line 737 of file RWebWindow.cxx. ◆ ProvideQueueEntry(). void RWebWindow::ProvideQueueEntry ; (; unsigned ; connid, . EQueueEntryKind ; kind, . std::string && ; arg . ). private . Provide data to user callback User callback must be executed in the window thread. ; Definition at line 422 of file RWebWindow.cxx. ◆ RecordData(). void RWebWindow::RecordData ; (; const std::string & ; fname = ""protocol.json"", . const std::string & ; fprefix = """" . ). Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ; JSON file will look like: [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; If empty file name is provided, data recording will be disabled Recorded data can be used in JSROOT directly to test client code without running C++ server ; Definition at line 1397 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1909 of file RWebWindow.cxx. ◆ RemoveKey(). void RWebWindow::RemoveKey ; (; const std::string & ; key). private . Removes all connections with the key. ; Definition at line 584 of file RWebWindow.cxx. ◆ RemoveMasterConnection(). void RWebWindow::RemoveMasterConnection ; (; unsigned ; connid = 0). private . Remove master connection - if any. ; Definition at line 344 of file RWebWindow.cxx. ◆ Run(). void RWebWindow::Run ; (; double ; tm = 0.). Run window functionality for specified time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:38948,test,test,38948,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['test'],['test']
Testability,"clFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TQueryResult (Int_t seqnum, const char *opt, TList *inlist, Long64_t entries, Long64_t first, const char *selec);  Main constructor. ;  ; void AddInput (TObject *obj);  Add obj to the input list. ;  ; void AddLogLine (const char *logline);  Fill log file. ;  ; TQueryResult * CloneInfo ();  Return an instance of TQueryResult containing only the local info fields, i.e. ;  ; virtual void RecordEnd (EQueryStatus status, TList *outlist=nullptr);  End of query settings. ;  ; void SaveSelector (const char *selec);  Save the selector header and implementation into the dedicated TMacro instances. ;  ; void SetArchived (const char *archfile);  Set (or update) query in archived state. ;  ; virtual void SetFinalized ();  ; virtual void SetInputList (TList *in, bool adopt=true);  Set / change the input list. ;  ; void SetMergeTime (Float_t mergetime);  ; void SetNumMergers (Int_t nmergers);  ; virtual void SetOutputList (TList *out, bool adopt=true);  Set / change the output list. ;  ; void SetPrepTime (Float_t preptime);  ; virtual void SetProcessInfo (Long64_t ent, Float_t cpu=0., Long64_t siz=-1, Float_t inittime=0., Float_t proctime=0.);  Set processing info. ;  ; void SetRecvTime (Float_t recvtime);  ; void SetTer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResult.html:12180,log,logline,12180,doc/master/classTQueryResult.html,https://root.cern,https://root.cern/doc/master/classTQueryResult.html,2,['log'],"['log', 'logline']"
Testability,"class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Histogram ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile2Poly2D Profile Histogram with Polygonal Bins ;  CTProfile2PolyBinHelper class to represent a bin in the TProfile2Poly histogram ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:195306,test,test,195306,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['test'],['test']
Testability,"class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Histogram ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile2Poly;  CTProfile2PolyBin;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:186599,benchmark,benchmark,186599,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['benchmark'],['benchmark']
Testability,"class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecEvent. class TRecEvent: public TObject. ROOT EVENT RECORDING SYSTEM. TRecorder class provides interface for recording and replaying; events in ROOT.; Recorded events are:; - Commands typed by user in commandline ('new TCanvas'); - GUI events (mouse movement, button clicks, ...). All the recorded events from one session are stored in one TFile; and can be replayed again anytime. Recording. 1] To start recording. TRecorder r(const char *filename, ""NEW""); TRecorder r(const char *filename, ""RECREATE""). or:. TRecorder *recorder = new TRecorder;; recorder->Start(const char *filename, ...). -filename Name of ROOT file in which to save; recorded events. 2] To stop recording. recorder->Stop(). IMPORTANT:; State capturing is part of recording. It means that if you want to; record events for some object (window), creation of this object; must be also recorded. Example:. t = new TRecorder(); // Create a new recorder; t->Start(""logfile.root""); // ! Start recording first. c = new TCanvas(); // ! Then, create an object; c->Dump(); // Work with that object. t->Stop(); // Stop recording. It is strongly recommended to start recording with empty ROOT; environment, at least with no previously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows dur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecEvent.html:1154,log,logfile,1154,root/html528/TRecEvent.html,https://root.cern,https://root.cern/root/html528/TRecEvent.html,6,['log'],['logfile']
Testability,"class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorder. class TRecorder: public TObject. ROOT EVENT RECORDING SYSTEM. TRecorder class provides interface for recording and replaying; events in ROOT.; Recorded events are:; - Commands typed by user in commandline ('new TCanvas'); - GUI events (mouse movement, button clicks, ...). All the recorded events from one session are stored in one TFile; and can be replayed again anytime. Recording. 1] To start recording. TRecorder r(const char *filename, ""NEW""); TRecorder r(const char *filename, ""RECREATE""). or:. TRecorder *recorder = new TRecorder;; recorder->Start(const char *filename, ...). -filename Name of ROOT file in which to save; recorded events. 2] To stop recording. recorder->Stop(). IMPORTANT:; State capturing is part of recording. It means that if you want to; record events for some object (window), creation of this object; must be also recorded. Example:. t = new TRecorder(); // Create a new recorder; t->Start(""logfile.root""); // ! Start recording first. c = new TCanvas(); // ! Then, create an object; c->Dump(); // Work with that object. t->Stop(); // Stop recording. It is strongly recommended to start recording with empty ROOT; environment, at least with no previously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows dur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorder.html:1180,log,logfile,1180,root/html528/TRecorder.html,https://root.cern,https://root.cern/root/html528/TRecorder.html,6,['log'],['logfile']
Testability,"class for elements drawn in the editor ;  CTAttCanvasManages canvas attributes ;  CTAttFillFill Area Attributes class ;  CTAttFillEditor;  CTAttImageTImage attributes ;  CTAttLineLine Attributes class ;  CTAttLineEditor;  CTAttMarkerMarker Attributes class ;  CTAttMarkerEditor;  CTAttPadManages default Pad attributes ;  CTAttParticleParticle definition, partly based on GEANT3 particle definition ;  CTAttTextText Attributes class ;  CTAttTextEditor;  CTAuthenticate;  CTAxisClass to manage histogram axis ;  CTAxis3DThe 3D axis painter class ;  CTAxisEditor;  CTAxisModLabTAxis helper class used to store the modified labels ;  CTBackCompFitterBackward compatible implementation of TVirtualFitter ;  CTBase64This code implements the Base64 encoding and decoding ;  CTBaseClassEach class (see TClass) has a linked list of its base class(es) ;  CTBasketManages buffers for branches of a Tree ;  CTBasketSQLImplement TBasket for a SQL backend ;  CTBenchmarkThis class is a ROOT utility to help benchmarking applications ;  CTBinomialEfficiencyFitterBinomial fitter for the division of two histograms ;  ►CTBitsContainer of bits ;  CTReference;  CTBonjourBrowser;  CTBonjourRecord;  CTBonjourRegistrar;  CTBonjourResolver;  CTBoxCreate a Box ;  CTBranchA TTree is a list of TBranches ;  CTBranchClonesA Branch for the case of an array of clone objects ;  CTBranchElementA Branch for the case of an object ;  CTBranchObjectA Branch for the case of an object ;  CTBranchRefA branch containing and managing a TRefTable for TRef autoloading ;  ►CTBranchSTLA Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode ;  CElementBranchHelper_t;  CTBRIKA box with faces perpendicular to the axes ;  CTBrowserUsing a TBrowser one can browse all ROOT objects ;  CTBrowserImpABC describing GUI independent browser implementation protocol ;  CTBrowserPlugin;  CTBtInnerNodeInner node of a TBtree ;  CTBtItemItem stored in inner nodes of a TBtree ;  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:112192,benchmark,benchmarking,112192,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['benchmark'],['benchmarking']
Testability,"class that wraps another p.d.f and caches its output; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set of RooAbsPdf representing parameter constraints; RooConvCoefVar Auxiliary class representing the coefficient of a RooAbsAnaConvPdf as a RooAbsReal; RooConvGenContext Context for generating a dataset from a PDF; RooConvIntegrandBinding RooAbsFunc representation of convolution integrands; RooCurve 1-dimensional smooth curve for use in RooPlots; RooCustomizer Editing tool for RooAbsArg composite object expressions; RooDLLSignificanceMCSModule MCStudy module to calculate Delta(-logL) significance w.r.t given null hypothesis; RooDataHist Binned data set; RooDataHistSliceIter Iterator over a one-dimensional slice of a RooDataHist; RooDataProjBinding RealFunc/Dataset binding for data projection of a real function; RooDataSet Unbinned data set; RooDataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:30936,log,log,30936,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,['log'],"['log', 'logL']"
Testability,"class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*TProof::CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TStringGetJobAd(); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*TProof::MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetPlayer(TVirtualProofPlayer* player); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); voidTProof::UpdateDialog(); virtual voidTProof::ValidateDSet(TDSet* dset).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofCondor.html:20512,log,loglevel,20512,root/html530/TProofCondor.html,https://root.cern,https://root.cern/root/html530/TProofCondor.html,2,['log'],['loglevel']
Testability,"classname' ;  ; bool IsDefPred (const char *predname, const char *classname);  return whether or not 'predname' is the STL default predicate for type 'classname' ;  ; bool IsInterpreterDetail (const char *type);  Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ;  ; bool IsStdArray (std::string_view name);  ; bool IsStdClass (const char *type);  return true if the class belongs to the std namespace ;  ; bool IsStdPair (std::string_view name);  ; bool IsStdPairBase (std::string_view name);  ; bool IsSTLBitset (const char *type);  Return true is the name is std::bitset<number> or bitset<number> ;  ; int IsSTLCont (const char *type, int testAlloc);  type : type name: vector<list<classA,allocator>,allocator> testAlloc: if true, we test allocator, if it is not default result is negative result: 0 : not stl container abs(result): code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset positive val: we have a vector or list with default allocator to any depth like vector<list<vector<int>>> negative val: STL container other than vector or list, or non default allocator For example: vector<deque<int>> has answer -1 ;  ; ROOT::ESTLType IsSTLCont (std::string_view type);  type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset ;  ; bool IsUniquePtr (std::string_view name);  ; bool IsVectorBool (const char *name);  ; std::string ResolveTypedef (const char *tname, bool resolveAll=false);  ; std::string ShortType (const char *typeDesc, int mode);  Return the absolute type of typeDesc. ;  ; bool SplitFunction (std::string_view decl, FunctionSplitInfo &result);  Split a function declaration into its different parts. ;  ; int STLArgs (int kind);  Return number of arguments for STL container before allocator. ;  ; ROOT::ESTLType STLKind (std::string_view type);  Converts STL container name to number.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTClassEdit.html:4579,test,testAlloc,4579,doc/master/namespaceTClassEdit.html,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html,3,['test'],"['test', 'testAlloc']"
Testability,"clearShapeDirty() const; voidclearValueDirty() const; TIterator*clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*Clone(const char* newname = 0) const; virtual RooAbsArg*cloneTree(const char* newname = 0) const; virtual Int_tCompare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidcopyList(TList& dest, const TList& source); static UInt_tcrc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tdependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:3319,test,testArg,3319,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,3,['test'],['testArg']
Testability,"clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStringVar.html:3090,test,testArg,3090,root/html534/RooStringVar.html,https://root.cern,https://root.cern/root/html534/RooStringVar.html,3,['test'],['testArg']
Testability,"cling-clone-repo; cling-repo-sync; root-test; root-staticAnalysis-master. Basic operations; Understanding information for a single build; The Status shows a summary for the build. In case of multi-configuration jobs it it also show the configuration matrix that can be used to select a contrete configuration. See the following figure: ; For each individual build (select one cell in the matrix) the following information is provided:. Status. Shows a summary of the build (changes, errors, warnings, git revision, test results, etc.); Changes. Shows the details about the changes since the last build.; Console Output/View as plain text. Shows the full log of the build including all the steps (checkout, configuration, build, running tests, etc.); Parsed Console Output. The same as previous but with warnings and errors selected.; Parameters. The parameters used for the job.; Environment variables. A table with all the environment variables defined for the job.; Test Result. An interface to the CTest tests results. All test, failing and not failing can be shown with their output. Starting and stopping jobs. New jobs can be launched at any time independently of their automatic scheduling (time based or triggered by changes in the GIT repository). This is done by selecting Build with Parameters from the selected project page. This only enabled when your are logged in. Typically the default parameters should be sufficient unless you want to launch a special job.; Jobs (single or multi-configuration) can be stopped by pressing the small cross in the job build history or in the job status page. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-use-root-jenkins.html:5052,test,tests,5052,d/how-use-root-jenkins.html,https://root.cern,https://root.cern/d/how-use-root-jenkins.html,1,['test'],['tests']
Testability,"clock::now();; 1188 ; 1189 if (!fInteractive) {; 1190 Log() << std::setw(10) << ""Epoch"" << "" | ""; 1191 << std::setw(12) << ""Train Err.""; 1192 << std::setw(12) << ""Test Err.""; 1193 << std::setw(12) << ""GFLOP/s""; 1194 << std::setw(12) << ""Conv. Steps"" << Endl;; 1195 std::string separator(62, '-');; 1196 Log() << separator << Endl;; 1197 }; 1198 ; 1199 while (!converged); 1200 {; 1201 stepCount++;; 1202 // Perform minimization steps for a full epoch.; 1203 trainingData.Shuffle();; 1204 for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1205 batches.clear();; 1206 for (size_t j = 0; j < nThreads; j++) {; 1207 batches.reserve(nThreads);; 1208 batches.push_back(trainingData.GetBatch());; 1209 }; 1210 if (settings.momentum > 0.0) {; 1211 minimizer.StepMomentum(net, nets, batches, settings.momentum);; 1212 } else {; 1213 minimizer.Step(net, nets, batches);; 1214 }; 1215 }; 1216 ; 1217 if ((stepCount % minimizer.GetTestInterval()) == 0) {; 1218 ; 1219 // Compute test error.; 1220 Double_t testError = 0.0;; 1221 for (auto batch : testData) {; 1222 auto inputMatrix = batch.GetInput();; 1223 auto outputMatrix = batch.GetOutput();; 1224 auto weightMatrix = batch.GetWeights();; 1225 testError += testNet.Loss(inputMatrix, outputMatrix, weightMatrix);; 1226 }; 1227 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1228 ; 1229 //Log the loss value; 1230 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1231 ; 1232 end = std::chrono::system_clock::now();; 1233 ; 1234 // Compute training error.; 1235 Double_t trainingError = 0.0;; 1236 for (auto batch : trainingData) {; 1237 auto inputMatrix = batch.GetInput();; 1238 auto outputMatrix = batch.GetOutput();; 1239 auto weightMatrix = batch.GetWeights();; 1240 trainingError += net.Loss(inputMatrix, outputMatrix, weightMatrix);; 1241 }; 1242 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1243 ; 1244 //Log the loss value; 1245 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:43895,test,testError,43895,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testError']
Testability,"cluding boosts and rotations; TLorentzVector A four vector with (-,-,-,+) metric; TMCVerbose Verbose class for MC application; TMD5 MD5 cryptographic hash functions with a 128 bit output; TMLPAnalyzer A simple analysis class for MLP; TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Event ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:104851,test,testing,104851,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['test'],['testing']
Testability,"colors or some other visual; parameters that do not affect object bounding-box or; transformation matrix, you can set it to false. If updateViewers is true (default), the viewers using this scene; will be tagged as changed. If sceneChanged is true the; updateViewers should be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLSce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:13330,log,logid,13330,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,8,['log'],"['logical', 'logid']"
Testability,"colors or some other visual; parameters that do not affect object bounding-box or; transformation matrix, you can set it to false. If updateViewers is true (default), the viewers using this scene; will be tagged as changed. If sceneChanged is true the; updateViewers should be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t[4] rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:13967,log,logid,13967,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,4,['log'],"['logical', 'logid']"
Testability,"comparison (unweighted-unweighted); 2042/// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first; 2043/// histogram should be unweighted; 2044/// - ""WW"" = MC MC comparison (weighted-weighted); 2045/// - ""NORM"" = if one or both histograms is scaled; 2046/// - ""OF"" = overflows included; 2047/// - ""UF"" = underflows included; 2048/// by default underflows and overflows are not included; 2049/// \param[out] igood test output; 2050/// - igood=0 - no problems; 2051/// - For unweighted unweighted comparison; 2052/// - igood=1'There is a bin in the 1st histogram with less than 1 event'; 2053/// - igood=2'There is a bin in the 2nd histogram with less than 1 event'; 2054/// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; 2055/// - For unweighted weighted comparison; 2056/// - igood=1'There is a bin in the 1st histogram with less then 1 event'; 2057/// - igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; 2058/// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; 2059/// - For weighted weighted comparison; 2060/// - igood=1'There is a bin in the 1st histogram with less then 10 effective; 2061/// number of events'; 2062/// - igood=2'There is a bin in the 2nd histogram with less then 10 effective; 2063/// number of events'; 2064/// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; 2065/// \param[out] chi2 chisquare of the test; 2066/// \param[out] ndf number of degrees of freedom (important, when both histograms have the same empty bins); 2067/// \param[out] res normalized residuals for further analysis; 2068 ; 2069Double_t TH1::Chi2TestX(const TH1* h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option, Double_t *res) const; 2070{; 2071 ; 2072 Int_t i_start, i_end;; 2073 Int_t j_start, j_end;; 2074 Int_t k_start, k_end;; 2075 ; 2076 Double_t sum1 = 0.0, sumw1 = 0.0;; 2077 Double_t sum2 = 0.0, sumw2 = 0.0;; 2078 ; 2079 chi2 = 0.0;; 2080 ndf = 0;; 208",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:83592,test,test,83592,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['test'],['test']
Testability,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionViewer.html:24998,log,log,24998,root/html602/TSessionViewer.html,https://root.cern,https://root.cern/root/html602/TSessionViewer.html,2,['log'],['log']
Testability,"cond; it != itEnd; ++it); 997 {; 998 Batch& batch = *it;; 999 pass_through_type settingsAndBatch (settings, batch, dropContainer);; 1000 Minimizer minimizerClone (minimizer);; 1001 localError += minimizerClone ((*this), weights, settingsAndBatch); /// call the minimizer; 1002 }; 1003 return localError;; 1004 }); 1005 );; 1006 }; 1007 ; 1008 for (auto& f : futures); 1009 error += f.get ();; 1010 }; 1011 else; 1012 {; 1013 for (auto& batch : batches); 1014 {; 1015 std::tuple<Settings&, Batch&, DropContainer&> settingsAndBatch (settings, batch, dropContainer);; 1016 error += minimizer ((*this), weights, settingsAndBatch);; 1017 }; 1018 }; 1019 ; 1020 numBatches_stored = std::max (numBatches_stored, size_t(1)); /// normalize the error; 1021 error /= numBatches_stored;; 1022 settings.testIteration ();; 1023 ; 1024 return error;; 1025 }; 1026 ; 1027 ; 1028 ; 1029 ; 1030 ; 1031/*! \brief compute the neural net; 1032 *; 1033 * \param input the input data; 1034 * \param weights the weight data; 1035 */; 1036 template <typename Weights>; 1037 std::vector<double> Net::compute (const std::vector<double>& input, const Weights& weights) const; 1038 {; 1039 std::vector<LayerData> layerData;; 1040 layerData.reserve (m_layers.size ()+1);; 1041 auto itWeight = begin (weights);; 1042 auto itInputBegin = begin (input);; 1043 auto itInputEnd = end (input);; 1044 layerData.push_back (LayerData (itInputBegin, itInputEnd));; 1045 size_t numNodesPrev = input.size ();; 1046 ; 1047 // -------------------- prepare layer data with one pattern -------------------------------; 1048 for (auto& layer: m_layers); 1049 {; 1050 layerData.push_back (LayerData (layer.numNodes (), itWeight,; 1051 layer.activationFunction (),; 1052 layer.modeOutputValues ()));; 1053 size_t _numWeights = layer.numWeights (numNodesPrev);; 1054 itWeight += _numWeights;; 1055 numNodesPrev = layer.numNodes ();; 1056 }; 1057 ; 1058 ; 1059 // --------- forward -------------; 1060 forwardPattern (m_layers, layerData);; 1061 ; 1062",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:32046,test,testIteration,32046,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testIteration']
Testability,"conn->dom_ctx->config[ACCESS_CONTROL_ALLOW_HEADERS];; 14180 ; 14181 if ((cors_hdr_cfg != NULL) && (*cors_hdr_cfg != 0)) {; 14182 /* Allow only if access_control_allow_headers is; 14183 * not NULL and not an empty string. If this; 14184 * configuration is set to *, allow everything.; 14185 * Otherwise this configuration must be a list; 14186 * of allowed HTTP header names. */; 14187 mg_printf(conn,; 14188 ""Access-Control-Allow-Headers: %s\r\n"",; 14189 ((cors_hdr_cfg[0] == '*') ? cors_acrh; 14190 : cors_hdr_cfg));; 14191 }; 14192 }; 14193 if (cors_cred_cfg && *cors_cred_cfg) {; 14194 mg_printf(conn,; 14195 ""Access-Control-Allow-Credentials: %s\r\n"",; 14196 cors_cred_cfg);; 14197 }; 14198 ; 14199 mg_printf(conn, ""Access-Control-Max-Age: 60\r\n"");; 14200 ; 14201 mg_printf(conn, ""\r\n"");; 14202 return;; 14203 }; 14204 }; 14205 ; 14206 /* 5. interpret the url to find out how the request must be handled; 14207 */; 14208 /* 5.1. first test, if the request targets the regular http(s)://; 14209 * protocol namespace or the websocket ws(s):// protocol namespace.; 14210 */; 14211 is_websocket_request = (conn->protocol_type == PROTOCOL_TYPE_WEBSOCKET);; 14212#if defined(USE_WEBSOCKET); 14213 handler_type = is_websocket_request ? WEBSOCKET_HANDLER : REQUEST_HANDLER;; 14214#else; 14215 handler_type = REQUEST_HANDLER;; 14216#endif /* defined(USE_WEBSOCKET) */; 14217 ; 14218 if (is_websocket_request) {; 14219 HTTP1_only;; 14220 }; 14221 ; 14222 /* 5.2. check if the request will be handled by a callback */; 14223 if (get_request_handler(conn,; 14224 handler_type,; 14225 &callback_handler,; 14226 &subprotocols,; 14227 &ws_connect_handler,; 14228 &ws_ready_handler,; 14229 &ws_data_handler,; 14230 &ws_close_handler,; 14231 NULL,; 14232 &callback_data,; 14233 &handler_info)) {; 14234 /* 5.2.1. A callback will handle this request. All requests; 14235 * handled by a callback have to be considered as requests; 14236 * to a script resource. */; 14237 is_callback_resource = 1;; 14238 is_script",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:417660,test,test,417660,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['test'],['test']
Testability,"conn->dom_ctx->config[ACCESS_CONTROL_ALLOW_HEADERS];; 14181 ; 14182 if ((cors_hdr_cfg != NULL) && (*cors_hdr_cfg != 0)) {; 14183 /* Allow only if access_control_allow_headers is; 14184 * not NULL and not an empty string. If this; 14185 * configuration is set to *, allow everything.; 14186 * Otherwise this configuration must be a list; 14187 * of allowed HTTP header names. */; 14188 mg_printf(conn,; 14189 ""Access-Control-Allow-Headers: %s\r\n"",; 14190 ((cors_hdr_cfg[0] == '*') ? cors_acrh; 14191 : cors_hdr_cfg));; 14192 }; 14193 }; 14194 if (cors_cred_cfg && *cors_cred_cfg) {; 14195 mg_printf(conn,; 14196 ""Access-Control-Allow-Credentials: %s\r\n"",; 14197 cors_cred_cfg);; 14198 }; 14199 ; 14200 mg_printf(conn, ""Access-Control-Max-Age: 60\r\n"");; 14201 ; 14202 mg_printf(conn, ""\r\n"");; 14203 return;; 14204 }; 14205 }; 14206 ; 14207 /* 5. interpret the url to find out how the request must be handled; 14208 */; 14209 /* 5.1. first test, if the request targets the regular http(s)://; 14210 * protocol namespace or the websocket ws(s):// protocol namespace.; 14211 */; 14212 is_websocket_request = (conn->protocol_type == PROTOCOL_TYPE_WEBSOCKET);; 14213#if defined(USE_WEBSOCKET); 14214 handler_type = is_websocket_request ? WEBSOCKET_HANDLER : REQUEST_HANDLER;; 14215#else; 14216 handler_type = REQUEST_HANDLER;; 14217#endif /* defined(USE_WEBSOCKET) */; 14218 ; 14219 if (is_websocket_request) {; 14220 HTTP1_only;; 14221 }; 14222 ; 14223 /* 5.2. check if the request will be handled by a callback */; 14224 if (get_request_handler(conn,; 14225 handler_type,; 14226 &callback_handler,; 14227 &subprotocols,; 14228 &ws_connect_handler,; 14229 &ws_ready_handler,; 14230 &ws_data_handler,; 14231 &ws_close_handler,; 14232 NULL,; 14233 &callback_data,; 14234 &handler_info)) {; 14235 /* 5.2.1. A callback will handle this request. All requests; 14236 * handled by a callback have to be considered as requests; 14237 * to a script resource. */; 14238 is_callback_resource = 1;; 14239 is_script",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:417693,test,test,417693,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['test'],['test']
Testability,"connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. TProof(); Protected constructor to be used by classes deriving from TProof; (they have to call Init themselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. Int_t GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'.; Use the existing setting or the default if nothing is found.; If 'assert' is kTRUE, make also sure that the path exists.; Return 0 on success, -1 on failure. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind. Int_t AssertPath(const char* path, Bool_t writable); Make sure that 'path' exists; if 'writable' ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:33101,log,loglevel,33101,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['log'],['loglevel']
Testability,"connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. TProof(); Protected constructor to be used by classes deriving from TProof; (they have to call Init themselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. Int_t GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'.; Use the existing setting or the default if nothing is found.; If 'assert' is kTRUE, make also sure that the path exists.; Return 0 on success, -1 on failure. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind.; Several options can be given separated by a ','. Int_t AssertPath(const char* path, Bool_t writa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:36240,log,loglevel,36240,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['log'],['loglevel']
Testability,"connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. TProof(); Protected constructor to be used by classes deriving from TProof; (they have to call Init themselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind. Int_t AssertPath(const char* path, Bool_t writable); Make sure that 'path' exists; if 'writable' is kTRUE, make also sure; that the path is writable. void SetManager(TProofMgr* mgr); Set manager and schedule its destruction after this for clean; operations. Int_t AddWorkers(TList* wrks); Works on the master node only.; It starts workers on the machines in workerList and sets the paths,; packages and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:32865,log,loglevel,32865,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['log'],['loglevel']
Testability,"consider only negatively charged muons with a pseudorapidity; 1377smaller or equal to 2 and with a transverse momentum greater than 10 GeV.; 1378Such a selection would require, among the other things, the management of an explicit; 1379loop, for example:; 1380~~~{.cpp}; 1381std::vector<float> goodMuons_pt;; 1382const auto size = mu_charge.size();; 1383for (size_t i=0; i < size; ++i) {; 1384 if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; 1385 goodMuons_pt.emplace_back(mu_pt[i]);; 1386 }; 1387}; 1388~~~; 1389These operations become straightforward with RVec - we just need to *write what; 1390we mean*:; 1391~~~{.cpp}; 1392auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; 1393~~~; 1394Now the clean collection of transverse momenta can be used within the rest of the data analysis, for; 1395example to fill a histogram.; 1396 ; 1397\anchor operationsandfunctions; 1398## Arithmetic operations, logical operations and mathematical functions; 1399Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied.; 1400~~~{.cpp}; 1401RVec<double> v1 {1.,2.,3.,4.};; 1402RVec<float> v2 {5.f,6.f,7.f,8.f};; 1403auto v3 = v1+v2;; 1404auto v4 = 3 * v1;; 1405~~~; 1406The supported operators are ; 1407 - +, -, *, /; 1408 - +=, -=, *=, /=; 1409 - <, >, ==, !=, <=, >=, &&, ||; 1410 - ~, !; 1411 - &, |, ^; 1412 - &=, |=, ^=; 1413 - <<=, >>=; 1414 ; 1415The most common mathematical functions are supported. It is possible to invoke them passing ; 1416RVecs as arguments.; 1417 - abs, fdim, fmod, remainder; 1418 - floor, ceil, trunc, round, lround, llround; 1419 - exp, exp2, expm1; 1420 - log, log10, log2, log1p; 1421 - pow; 1422 - sqrt, cbrt; 1423 - sin, cos, tan, asin, acos, atan, atan2, hypot; 1424 - sinh, cosh, tanh, asinh, acosh; 1425 - erf, erfc; 1426 - lgamma, tgamma; 1427 ; 1428If the VDT library is available, the following functions can be invoked. Internally the calculations; 1429ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:49143,log,logical,49143,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['log'],['logical']
Testability,"const Ranking * MethodPyGTB::CreateRanking ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 541 of file MethodPyGTB.cxx. ◆ DeclareOptions(). void MethodPyGTB::DeclareOptions ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 121 of file MethodPyGTB.cxx. ◆ GetHelpMessage(). void MethodPyGTB::GetHelpMessage ; (; ); const. protectedvirtual . Implements TMVA::IMethod.; Definition at line 561 of file MethodPyGTB.cxx. ◆ GetMulticlassValues(). std::vector< Float_t > & MethodPyGTB::GetMulticlassValues ; (; ). virtual . Reimplemented from TMVA::MethodBase.; Definition at line 485 of file MethodPyGTB.cxx. ◆ GetMvaValue(). Double_t MethodPyGTB::GetMvaValue ; (; Double_t * ; errLower = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 453 of file MethodPyGTB.cxx. ◆ GetMvaValues(). std::vector< Double_t > MethodPyGTB::GetMvaValues ; (; Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). virtual . get all the MVA values for the events of the current Data type ; Implements TMVA::PyMethodBase.; Definition at line 394 of file MethodPyGTB.cxx. ◆ HasAnalysisType(). Bool_t MethodPyGTB::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 112 of file MethodPyGTB.cxx. ◆ Init(). void MethodPyGTB::Init ; (; void ; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 314 of file MethodPyGTB.cxx. ◆ ProcessOptions(). void MethodPyGTB::ProcessOptions ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 198 of file MethodPyGTB.cxx. ◆ ReadModelFromFile(). void MethodPyGTB::ReadModelFromFile ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 514 of file MethodPyGTB.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodPyGTB::ReadWeightsFromStream ; (; std::istream & ; ). inlinevirtual . Implements TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html:32197,log,logProgress,32197,doc/master/classTMVA_1_1MethodPyGTB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html,1,['log'],['logProgress']
Testability,"const RooArgSet& poi, RooStats::DetailedOutputAggregator& detOutAgg). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramPoint). RooDataSet* GetSamplingDistributions(RooArgSet& paramPoint); Use for serial and parallel runs. RooDataSet* GetSamplingDistributionsSingleWorker(RooArgSet& paramPoint); This is the main function for serial runs. It is called automatically; from inside GetSamplingDistribution when no ProofConfig is given.; You should not call this function yourself. This function should; be used by ToyMCStudy on the workers (ie. when you explicitly want; a serial run although ProofConfig is present). void GenerateGlobalObservables(RooAbsPdf& pdf) const. RooAbsData* GenerateToyData(RooArgSet& paramPoint, double& weight, RooAbsPdf& pdf) const; This method generates a toy data set for the given parameter point taking; global observables into account.; The values of the generated global observables remain in the pdf's variables.; They have to have those values for the subsequent evaluation of the; test statistics. RooAbsData* Generate(RooAbsPdf& pdf, RooArgSet& observables, const RooDataSet* protoData = NULL, int forceEvents = 0) const; This is the generate function to use in the context of the ToyMCSampler; instead of the standard RooAbsPdf::generate(...).; It takes into account whether the number of events is given explicitly; or whether it should use the expected number of events. It also takes; into account the option to generate a binned data set (ie RooDataHist). SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC). void ClearCache(); clear the cache obtained from the pdf used for speeding the toy and global observables generation; needs to be called every time the model pdf (fPdf) changes. ToyMCSampler(). void SetUseMultiGen(Bool_t flag); { fUseMultiGen = flag ; }. void AddTestStatistic(RooStats::TestStatistic* t = NULL); The pdf can be NULL in which case the density",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCSampler.html:6937,test,test,6937,root/html534/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCSampler.html,1,['test'],['test']
Testability,"const RooArgSet& poi, RooStats::DetailedOutputAggregator& detOutAgg). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramPoint). RooDataSet* GetSamplingDistributions(RooArgSet& paramPoint); Use for serial and parallel runs. RooDataSet* GetSamplingDistributionsSingleWorker(RooArgSet& paramPoint); This is the main function for serial runs. It is called automatically; from inside GetSamplingDistribution when no ProofConfig is given.; You should not call this function yourself. This function should; be used by ToyMCStudy on the workers (ie. when you explicitly want; a serial run although ProofConfig is present). void GenerateGlobalObservables(RooAbsPdf& pdf) const. RooAbsData* GenerateToyData(RooArgSet& paramPoint, double& weight, RooAbsPdf& pdf) const; This method generates a toy data set for the given parameter point taking; global observables into account.; The values of the generated global observables remain in the pdf's variables.; They have to have those values for the subsequent evaluation of the; test statistics. RooAbsData* Generate(RooAbsPdf& pdf, RooArgSet& observables, const RooDataSet* protoData = __null, int forceEvents = 0) const; This is the generate function to use in the context of the ToyMCSampler; instead of the standard RooAbsPdf::generate(...).; It takes into account whether the number of events is given explicitly; or whether it should use the expected number of events. It also takes; into account the option to generate a binned data set (ie RooDataHist). SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC). void ClearCache(); clear the cache obtained from the pdf used for speeding the toy and global observables generation; needs to be called every time the model pdf (fPdf) changes. ToyMCSampler(). void SetUseMultiGen(Bool_t flag); { fUseMultiGen = flag ; }. void AddTestStatistic(RooStats::TestStatistic* t = __null); The pdf can be NULL in which case the den",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ToyMCSampler.html:7102,test,test,7102,root/html602/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__ToyMCSampler.html,2,['test'],['test']
Testability,"const TH1D*fBdatmeasured distribution (data); const TH1D*fBinireconstructed distribution (MC); TH1D*fDHist! Distribution of d (for checking regularization); Int_tfDdim! Derivative for curvature matrix; Int_tfKReg! Regularisation parameter; Bool_tfMatToyMode! Internal switch for evaluation of statistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured spectrum; ""cov"" - covariance matrix on the measured spectrum, to be propagated; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSVDUnfold.html:7573,test,test,7573,root/html530/TSVDUnfold.html,https://root.cern,https://root.cern/root/html530/TSVDUnfold.html,3,['test'],['test']
Testability,"const TMacro& ); Copy constructor. ~TMacro(); Delete this macro. TMacro& operator=(const TMacro& ); Copy constructor. TObjString * AddLine(const char* text); Add line with text in the list of lines of this macro. Returns 0 in; case of error, otherwise the added TObjString. void Browse(TBrowser* b); When clicking in the browser, the following action is performed; on this macro, depending the content of the variable TMacro.Browse.; TMacro.Browse can be set in the system.rootrc or .rootrc file like; TMacro.Browse : Action; or set via gEnv->SetValue, eg; gEnv->SetValue(""TMacro.Browse"",""Print"");; By default TMacro.Browse=""""; -if TMacro.Browse ="""" the macro is executed; -if TMacro.Browse =""Print"" the macro is printed in stdout; -if TMacro.Browse is of the form ""mymacro.C""; the macro void mymacro.C(TMacro *m) is called where m=this macro; An example of macro.C saving the macro into a file and viewing it; with emacs is shown below:; void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }. TMD5 * Checksum(); Returns checksum of the current content. The returned TMD5 object must; be deleted by the user. Returns 0 in case of error. Long_t Exec(const char* params = 0, Int_t* error = 0); Execute this macro with params, if params is 0, default parameters; (set via SetParams) are used.; error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; Returns the result of the macro (return value or value of the last; expression), cast to a Long_t. TObjString * GetLineWith(const char* text) const; Search the first line containing text. void Paint(Option_t* option = """"); Execute this macro (called by TPad::Paint). void Print(Option_t* option = """") const; Print contents of this macro. Int_t ReadFile(const char* filename); Read lines in filename in this macro. void SaveSource(const char* filename); Save macro source in filename. void SaveSource(FILE* fp); Save macro source in file pointer fp. void SavePrimitive(ostream& out, Option_t* option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMacro.html:8465,log,log,8465,root/html534/TMacro.html,https://root.cern,https://root.cern/root/html534/TMacro.html,1,['log'],['log']
Testability,"const TString &methodTitle) const; 1306{; 1307 if (methodTitle != """") {; 1308 IMethod *method = GetMethod(datasetname, methodTitle);; 1309 if (method); 1310 method->MakeClass();; 1311 else {; 1312 Log() << kWARNING << ""<MakeClass> Could not find classifier \"""" << methodTitle << ""\"" in list"" << Endl;; 1313 }; 1314 } else {; 1315 ; 1316 // no classifier specified, print all help messages; 1317 MVector *methods = fMethodsMap.find(datasetname)->second;; 1318 MVector::const_iterator itrMethod;; 1319 for (itrMethod = methods->begin(); itrMethod != methods->end(); ++itrMethod) {; 1320 MethodBase *method = dynamic_cast<MethodBase *>(*itrMethod);; 1321 if (method == 0); 1322 continue;; 1323 Log() << kINFO << ""Make response class for classifier: "" << method->GetMethodName() << Endl;; 1324 method->MakeClass();; 1325 }; 1326 }; 1327}; 1328 ; 1329////////////////////////////////////////////////////////////////////////////////; 1330/// Print predefined help message of classifier.; 1331/// Iterate over methods and test.; 1332 ; 1333void TMVA::Factory::PrintHelpMessage(const TString &datasetname, const TString &methodTitle) const; 1334{; 1335 if (methodTitle != """") {; 1336 IMethod *method = GetMethod(datasetname, methodTitle);; 1337 if (method); 1338 method->PrintHelpMessage();; 1339 else {; 1340 Log() << kWARNING << ""<PrintHelpMessage> Could not find classifier \"""" << methodTitle << ""\"" in list"" << Endl;; 1341 }; 1342 } else {; 1343 ; 1344 // no classifier specified, print all help messages; 1345 MVector *methods = fMethodsMap.find(datasetname)->second;; 1346 MVector::const_iterator itrMethod;; 1347 for (itrMethod = methods->begin(); itrMethod != methods->end(); ++itrMethod) {; 1348 MethodBase *method = dynamic_cast<MethodBase *>(*itrMethod);; 1349 if (method == 0); 1350 continue;; 1351 Log() << kINFO << ""Print help message for classifier: "" << method->GetMethodName() << Endl;; 1352 method->PrintHelpMessage();; 1353 }; 1354 }; 1355}; 1356 ; 1357////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:54347,test,test,54347,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['test'],['test']
Testability,"const UInt_t nvis = dsi.GetNSpectators();; 743 ; 744 for (size_t i=0; i<nclasses; i++) {; 745 eventCounts[i].varAvLength = new Float_t[nvars];; 746 for (UInt_t ivar=0; ivar<nvars; ivar++); 747 eventCounts[i].varAvLength[ivar] = 0;; 748 }; 749 ; 750 //Bool_t haveArrayVariable = kFALSE;; 751 //Bool_t *varIsArray = new Bool_t[nvars];; 752 ; 753 // If there are NaNs in the tree:; 754 // => warn if used variables/cuts/weights contain nan (no problem if event is cut out); 755 // => fatal if cut value is nan or (event not cut out and nans somewhere); 756 // Count & collect all these warnings/errors and output them at the end.; 757 std::map<TString, int> nanInfWarnings;; 758 std::map<TString, int> nanInfErrors;; 759 ; 760 // if we work with chains we need to remember the current tree if; 761 // the chain jumps to a new tree we have to reset the formulas; 762 for (UInt_t cl=0; cl<nclasses; cl++) {; 763 ; 764 //Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create training and testing trees -- looping over class \"""" << dsi.GetClassInfo(cl)->GetName() << ""\"" ..."" << Endl;; 765 ; 766 EventStats& classEventCounts = eventCounts[cl];; 767 ; 768 // info output for weights; 769 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 770 << ""\tWeight expression for class \'"" << dsi.GetClassInfo(cl)->GetName() << ""\': \""""; 771 << dsi.GetClassInfo(cl)->GetWeight() << ""\"""" << Endl;; 772 ; 773 // used for chains only; 774 TString currentFileName("""");; 775 ; 776 std::vector<TreeInfo>::const_iterator treeIt(dataInput.begin(dsi.GetClassInfo(cl)->GetName()));; 777 for (;treeIt!=dataInput.end(dsi.GetClassInfo(cl)->GetName()); ++treeIt) {; 778 ; 779 // read first the variables; 780 std::vector<Float_t> vars(nvars);; 781 std::vector<Float_t> tgts(ntgts);; 782 std::vector<Float_t> vis(nvis);; 783 TreeInfo currentInfo = *treeIt;; 784 ; 785 Log() << kINFO << ""Building event vectors for type "" << currentInfo.GetTreeType() << "" "" << currentInfo.GetClassName() << Endl;; 786 ; 787 Event",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:31956,test,testing,31956,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability,"const char *filename="""", bool overwrite=false);  Save the tree in a file if fTreeFileName == """". ;  ; void SetAxisHistogramBinning (Int_t n=100);  Set the same histogram axis binning for all axis. ;  ; void SetAxisHistogramHeight (Double_t h=0.5);  Set the same histogram axis height for all axis. ;  ; void SetAxisHistogramLineWidth (Int_t lw=2);  Set the same histogram axis line width for all axis. ;  ; void SetCandleChart (bool can);  Set a candle chart display. ;  ; void SetCurrentEntries (TEntryList *entries);  ; void SetCurrentFirst (Long64_t);  Set the first entry to be displayed. ;  ; void SetCurrentN (Long64_t);  Set the number of entry to be displayed. ;  ; TParallelCoordSelect * SetCurrentSelection (const char *title);  Set the selection being edited. ;  ; void SetCurrentSelection (TParallelCoordSelect *sel);  Set the selection being edited. ;  ; virtual void SetCurveDisplay (bool curve=true);  ; void SetDotsSpacing (Int_t s=0);  Set dots spacing. ;  ; void SetGlobalLogScale (bool);  All axes in log scale. ;  ; void SetGlobalMax (Double_t max);  Force all variables to adopt the same max. ;  ; void SetGlobalMin (Double_t min);  Force all variables to adopt the same min. ;  ; void SetGlobalScale (bool gl);  Constraint all axes to the same scale. ;  ; void SetInitEntries (TEntryList *entries);  ; void SetLineColor (Color_t col);  ; void SetLineWidth (Width_t wid);  ; void SetLiveRangesUpdate (bool);  If true, the pad is updated while the motion of a dragged range. ;  ; void SetNentries (Long64_t n);  ; void SetTree (TTree *tree);  ; void SetVertDisplay (bool vert=true);  Set the vertical or horizontal display. ;  ; void SetWeightCut (Int_t w=0);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnzoomAll ();  Unzoom all variables. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:11137,log,log,11137,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['log'],['log']
Testability,"const char* name = 0); HybridResult default constructor (with name ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HybridResult.html:11657,test,test,11657,root/html534/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HybridResult.html,1,['test'],['test']
Testability,"const char* name = 0); HybridResult default constructor (with name ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HybridResult.html:12088,test,test,12088,root/html604/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html604/RooStats__HybridResult.html,1,['test'],['test']
Testability,"const char* name = 0); HybridResult default constructor (with name ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HybridResult.html:12088,test,test,12088,root/html602/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HybridResult.html,1,['test'],['test']
Testability,"const char* name = 0); HybridResult default constructor (with name ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id: HybridResult.h 34109 2010-06-24 15:00:16Z moneta $ » Last generated: 2010-09-27 22:32; This page has been automatically generated. For comments or suggestions regarding the docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridResult.html:10128,test,test,10128,root/html528/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridResult.html,1,['test'],['test']
Testability,"const char* name = 0); HybridResult default constructor (with name ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id: HybridResult.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HybridResult.html:10703,test,test,10703,root/html530/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HybridResult.html,1,['test'],['test']
Testability,"const char* name = 0); HybridResult default constructor (with name ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id: HybridResult.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HybridResult.html:10703,test,test,10703,root/html532/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HybridResult.html,1,['test'],['test']
Testability,"const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Double_tCalcNLL(Double_t xL); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual Bool_tShouldTakeStep(Double_t d). Data Members; public:. enum FunctionSign { kNegative; kPositive; kSignUnset; };; enum FunctionType { kRegular; kLog; kTypeUnset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooArgSetfChainParamsRooRealVars that are stored in the chain; RooAbsReal*fFunctionfunction that will generate likelihood values; Int_tfNumBurnInStepsnumber of iterations to discard as burn-in, starting from the first; Int_tfNumItersnumber of iterations to run metropolis algorithm; RooArgSetfParametersRooRealVars that define all parameter space; RooStats::ProposalFunction*fPropFuncProposal function for MCMC integration; RooStats::MetropolisHastings::FunctionSignfSignwhether the likelihood is negative (like NLL) or positive; RooStats::MetropolisHastings::FunctionTypefTypewhether the likelihood is on a regular, log, (or other) scale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MetropolisHastings(); default constructor. MetropolisHastings(RooAbsReal& function, const RooArgSet& paramsOfInterest, RooStats::ProposalFunction& proposalFunction, Int_t numIters). MarkovChain* ConstructChain(). Bool_t ShouldTakeStep(Double_t d). Double_t CalcNLL(Double_t xL). MetropolisHastings(); default constructor. virtual ~MetropolisHastings(); {}. void SetChainParameters(const RooArgSet& set); specify the parameters to store in the chain; if not specified all of them will be stored. { fChainParams.removeAll(); fChainParams.add(set); RemoveConstantParameters(&fChainParams); }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__MetropolisHastings.html:8227,log,log,8227,root/html532/RooStats__MetropolisHastings.html,https://root.cern,https://root.cern/root/html532/RooStats__MetropolisHastings.html,2,['log'],['log']
Testability,"const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. boolDoCheckInputs() const; voidRunToys(vector<double>& bVals, vector<double>& sbVals, unsigned int nToys, bool usePriors) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooAbsPdf*fBModelThe pdf of the background model; RooAbsData*fDatapointer to the data sets ; boolfGenerateBinnedFlag to control binned generation; unsigned intfNToysnumber of Toys MC; const RooArgSet*fNuisanceParametersCollection of the nuisance parameters in the model; RooArgList*fObservablesCollection of the observables of the model; RooAbsPdf*fPriorPdfPrior PDF of the nuisance parameters; RooAbsPdf*fSbModelThe pdf of the signal+background model; unsigned intfTestStatisticsIdxIndex of the test statistics to use; boolfUsePriorPdfuse a prior for nuisance parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridCalculator(const char *name); constructor with name and title; set default parameters. HybridCalculator( RooAbsPdf& sbModel, RooAbsPdf& bModel, RooArgList& observables, const RooArgSet* nuisance_parameters, RooAbsPdf* priorPdf ,				 bool GenerateBinned, int testStatistics, int numToys); HybridCalculator constructor without specifying a data set; the user need to specify the models in the S+B case and B-only case,; the list of observables of the model(s) (for MC-generation), the list of parameters; that are marginalised and the prior distribution of those parameters. HybridCalculator( RooAbsData & data, RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:10149,test,test,10149,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,1,['test'],['test']
Testability,"const char* pass = ""pass""); Connects to SQL server with provided arguments.; If the constructor fails in any way IsZombie() will; return true. Use IsOpen() to check if the file is (still) open. If option = NEW or CREATE create a ROOT tables in database; if the tables already exists connection is; not opened.; = RECREATE create completely new tables. Any existing tables; will be deleted; = UPDATE open an existing database for writing.; If data base open by other TSQLFile instance for writing,; write access will be rejected; = BREAKLOCK Special case when lock was not correctly released; by TSQLFile instance. This may happen if program crashed when; TSQLFile was open with write access mode.; = READ or OPEN open an existing data base for reading. For more details see comments for TFile::TFile() constructor. For a moment TSQLFile does not support TTree objects and subdirectories. void StartLogFile(const char* fname); start logging of all SQL statements in specified file. void StopLogFile(); close logging file. Bool_t IsMySQL() const; checks, if MySQL database. Bool_t IsOracle() const; checks, if Oracle database. Bool_t IsODBC() const; checks, if ODBC driver used for database connection. void SetUseSuffixes(Bool_t on = kTRUE); enable/disable uasge of suffixes in columns names; can be changed before first object is saved into file. void SetArrayLimit(Int_t limit = 20); Defines maximum number of columns for array representation; If array size bigger than limit, array data will be converted to raw format; This is usefull to prevent tables with very big number of columns; If limit==0, all arrays will be stored in raw format; If limit<0, all array values will be stored in column form; Default value is 21. void SetTablesType(const char* table_type); Defines tables type, which is used in CREATE TABLE statements; Now is only used for MySQL database, where following types are supported:; ""BDB"", ""HEAP"", ""ISAM"", ""InnoDB"", ""MERGE"", ""MRG_MYISAM"", ""MYISAM""; Default for TSQLFile is ""Inn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:34411,log,logging,34411,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,5,['log'],['logging']
Testability,"const char*TNamed::GetName() const; unsigned intGetNumberOfToys(); unsigned intGetNumberOfToys() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HybridCalculatorHybridCalculator(const char* name = 0); RooStats::HybridCalculatorHybridCalculator(const RooStats::HybridCalculator&); RooStats::HybridCalculatorHybridCalculator(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorHybridCalculator(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorHybridCalculator(RooAbsData& data, RooAbsPdf& sb_model, RooAbsPdf& b_model, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:5270,test,testStatistics,5270,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,1,['test'],['testStatistics']
Testability,"const. Proxy methods to access the TCanvas selected TObject; and last processed event. { return GetCanvas()->GetEvent(); }. Int_t GetEventX() const. { return GetCanvas()->GetEventX(); }. Int_t GetEventY() const. { return GetCanvas()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. TQtCanvasPainter * CanvasDecorator(); { return fCanvasDecorator; }. void SetCanvasDecorator(TQtCanvasPainter* decorator); { fCanvasDecorator = decorator;}. void EnableSignalEvents(UInt_t f); { SetBit (f); }. void DisableSignalEvents(UInt_t f); { ResetBit(f); }. Bool_t IsSignalEventEnabled(UInt_t f) const; { return TestBit (f); }. void EmitSignal(UInt_t f); {if (IsSignalEventEnabled(f)) EmitTestedSignal();}. void SetIgnoreLeaveEnter(int ignore = 1); { fIgnoreLeaveEnter = ignore; }. void operator=(const TQtWidget& ); ----- Private bits, clients can only test but not change them. void ResetCanvas(); { fCanvas = 0;}. bool IsDoubleBuffered() const; { return fDoubleBufferOn; }. void EmitCanvasPainted(); { emit CanvasPainted(); }. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQtWidget.html:14907,test,test,14907,root/html534/TQtWidget.html,https://root.cern,https://root.cern/root/html534/TQtWidget.html,1,['test'],['test']
Testability,const. print all the parameters and their values in the given sample to the console ; Definition at line 1784 of file RooLagrangianMorphFunc.cxx. ◆ printPhysics(). void RooLagrangianMorphFunc::printPhysics ; (; ); const. print the current physics values ; Definition at line 1810 of file RooLagrangianMorphFunc.cxx. ◆ printSamples(). void RooLagrangianMorphFunc::printSamples ; (; ); const. print all the known samples to the console ; Definition at line 1799 of file RooLagrangianMorphFunc.cxx. ◆ printSampleWeights(). void RooLagrangianMorphFunc::printSampleWeights ; (; ); const. print the current sample weights ; Definition at line 2202 of file RooLagrangianMorphFunc.cxx. ◆ printWeights(). void RooLagrangianMorphFunc::printWeights ; (; ); const. print the current sample weights ; Definition at line 2194 of file RooLagrangianMorphFunc.cxx. ◆ randomizeParameters(). void RooLagrangianMorphFunc::randomizeParameters ; (; double ; z). randomize the parameters a bit useful to test and debug fitting ; Definition at line 2217 of file RooLagrangianMorphFunc.cxx. ◆ readMatrixFromFile(). TMatrixD RooLagrangianMorphFunc::readMatrixFromFile ; (; const char * ; fname). read a matrix from a text file ; Definition at line 1604 of file RooLagrangianMorphFunc.cxx. ◆ readMatrixFromStream(). TMatrixD RooLagrangianMorphFunc::readMatrixFromStream ; (; std::istream & ; stream). read a matrix from a stream ; Definition at line 1612 of file RooLagrangianMorphFunc.cxx. ◆ readParameters(). void RooLagrangianMorphFunc::readParameters ; (; TDirectory * ; f). read the parameters from the input file ; Definition at line 1726 of file RooLagrangianMorphFunc.cxx. ◆ selfNormalized(). bool RooLagrangianMorphFunc::selfNormalized ; (; ); const. inline . Definition at line 237 of file RooLagrangianMorphFunc.h. ◆ setCacheAndTrackHints(). void RooLagrangianMorphFunc::setCacheAndTrackHints ; (; RooArgSet & ; arg). overridevirtual . Retrieve the matrix of coefficients. ; Reimplemented from RooAbsArg.; Definition,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:89707,test,test,89707,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['test'],['test']
Testability,"const; Bool_tisConvolved(); virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tRooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidnormLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooResolutionModel.html:21305,log,logEvalError,21305,root/html528/RooResolutionModel.html,https://root.cern,https://root.cern/root/html528/RooResolutionModel.html,2,['log'],['logEvalError']
Testability,"const; Bool_tisConvolved(); virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tRooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidnormLeafServerList(RooArgSet& list) const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooResolutionModel.html:21243,log,logEvalError,21243,root/html526/RooResolutionModel.html,https://root.cern,https://root.cern/root/html526/RooResolutionModel.html,1,['log'],['logEvalError']
Testability,"const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsString.html:8698,test,testArg,8698,root/html526/RooAbsString.html,https://root.cern,https://root.cern/root/html526/RooAbsString.html,2,['test'],['testArg']
Testability,"const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual TStringoperator TString(); virtual RooAbsArg&operator=(const char* newValue); Bool_tRooAbsString::operator==(const char*) const; virtual Bool_tRooAbsString::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStringVar.html:8585,test,testArg,8585,root/html526/RooStringVar.html,https://root.cern,https://root.cern/root/html526/RooStringVar.html,2,['test'],['testArg']
Testability,"const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::own",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsString.html:8866,test,testArg,8866,root/html530/RooAbsString.html,https://root.cern,https://root.cern/root/html530/RooAbsString.html,1,['test'],['testArg']
Testability,"const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual TStringoperator TString(); virtual RooAbsArg&operator=(const char* newValue); Bool_tRooAbsString::operator==(const char*) const; virtual Bool_tRooAbsString::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& test",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStringVar.html:8753,test,testArg,8753,root/html530/RooStringVar.html,https://root.cern,https://root.cern/root/html530/RooStringVar.html,1,['test'],['testArg']
Testability,"const; virtual Double_tGetMinimumStored() const; virtual Double_tGetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tGetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tGetNpx() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tGetNumberFitPoints() const; virtual Int_tGetNumberFreeParameters() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual voidTFormula::GetParameters(Double_t* params); TObject*GetParent() const; virtual Double_tGetParError(Int_t ipar) const; virtual Double_t*GetParErrors() const; virtual voidGetParLimits(Int_t ipar, Double_t& parmin, Double_t& parmax) const; virtual const char*TFormula::GetParName(Int_t ipar) const; virtual Int_tTFormula::GetParNumber(const char* name) const; virtual Double_tGetProb() const; virtual Int_tGetQuantiles(Int_t nprobSum, Double_t* q, const Double_t* probSum); virtual Double_tGetRandom(); virtual Double_tGetRandom(Double_t xmin, Double_t xmax); virtual voidGetRange(Double_t& xmin, Double_t& xmax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; virtual Double_tGetSave(const Double_t* x); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TAxis*GetXaxis() const; virtual Double_tGetXmax() const; virtual Double_tGetXmin(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TF1.html:10259,log,logx,10259,root/html534/TF1.html,https://root.cern,https://root.cern/root/html534/TF1.html,1,['log'],['logx']
Testability,"const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; Bool_tdefineType(const char* label); Bool_tdefineType(const char* label, Int_t index); virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::Exe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCategory.html:3256,test,testArg,3256,root/html526/RooCategory.html,https://root.cern,https://root.cern/root/html526/RooCategory.html,3,['test'],['testArg']
Testability,"const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategoryLValue.html:3518,test,testArg,3518,root/html534/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsCategoryLValue.html,19,['test'],['testArg']
Testability,"const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooJeffreysPrior.html:22247,test,testArg,22247,root/html534/RooJeffreysPrior.html,https://root.cern,https://root.cern/root/html534/RooJeffreysPrior.html,1,['test'],['testArg']
Testability,"const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooJeffreysPrior&operator=(const RooJeffreysPrior&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooJeffreysPrior.html:22022,test,testArg,22022,root/html602/RooJeffreysPrior.html,https://root.cern,https://root.cern/root/html602/RooJeffreysPrior.html,2,['test'],['testArg']
Testability,"const; { return fPhi; }. T X() const; { return fRho*std::cos(fPhi); }. T Y() const; { return fRho*std::sin(fPhi); }. T Z() const. T R() const. T Mag2() const; { return R()*R(); }. T Perp2() const; { return fRho*fRho; }. T Theta() const. void SetRho(double rho); setters (only for data members). set the rho coordinate value keeping eta and phi constant. void SetEta(double eta). set the eta coordinate value keeping rho and phi constant. void SetPhi(double phi). set the phi coordinate value keeping rho and eta constant. void SetXYZ(ROOT::Math::CylindricalEta3D<double>::Scalar xx, ROOT::Math::CylindricalEta3D<double>::Scalar yy, ROOT::Math::CylindricalEta3D<double>::Scalar zz). set all values using cartesian coordinates. void Scale(double a). scale by a scalar quantity a --; for cylindrical eta coords, as long as a >= 0, only rho changes!. Negate(). bool operator==(const ROOT::Math::CylindricalEta3D<double>& rhs) const. Exact component-by-component equality; Note: Peculiar representaions of the zero vector such as (0,1,0) will; not test as equal to one another. bool operator!=(const ROOT::Math::CylindricalEta3D<double>& rhs) const; {return !(operator==(rhs));}. T x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X();}. T y() const; { return Y();}. T z() const; { return Z(); }. void SetX(ROOT::Math::CylindricalEta3D<double>::Scalar xx); ============= Specializations for improved speed ==================; (none); ====== Set member functions for coordinates in other systems =======. void SetY(ROOT::Math::CylindricalEta3D<double>::Scalar yy). void SetZ(ROOT::Math::CylindricalEta3D<double>::Scalar zz). void SetR(ROOT::Math::CylindricalEta3D<double>::Scalar r). void SetTheta(ROOT::Math::CylindricalEta3D<double>::Scalar theta). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__CylindricalEta3D_double_.html:5262,test,test,5262,root/html534/ROOT__Math__CylindricalEta3D_double_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__CylindricalEta3D_double_.html,1,['test'],['test']
Testability,"const; { return fPhi; }. T X() const; { return fRho*std::cos(fPhi); }. T Y() const; { return fRho*std::sin(fPhi); }. T Z() const. T R() const. T Mag2() const; { return R()*R(); }. T Perp2() const; { return fRho*fRho; }. T Theta() const. void SetRho(double rho); setters (only for data members). set the rho coordinate value keeping eta and phi constant. void SetEta(double eta). set the eta coordinate value keeping rho and phi constant. void SetPhi(double phi). set the phi coordinate value keeping rho and eta constant. void SetXYZ(ROOT::Math::CylindricalEta3D<double>::Scalar xx, ROOT::Math::CylindricalEta3D<double>::Scalar yy, ROOT::Math::CylindricalEta3D<double>::Scalar zz). set all values using cartesian coordinates. void Scale(double a). scale by a scalar quantity a --; for cylindrical eta coords, as long as a >= 0, only rho changes!. Negate(). bool operator==(const ROOT::Math::CylindricalEta3D<double>& rhs) const. Exact component-by-component equality; Note: Peculiar representaions of the zero vector such as (0,1,0) will; not test as equal to one another. bool operator!=(const ROOT::Math::CylindricalEta3D<double>& rhs) const; {return !(operator==(rhs));}. T x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X();}. T y() const; { return Y();}. T z() const; { return Z(); }. void SetX(ROOT::Math::CylindricalEta3D<double>::Scalar xx); ============= Specializations for improved speed ==================; (none); ====== Set member functions for coordinates in other systems =======. void SetY(ROOT::Math::CylindricalEta3D<double>::Scalar yy). void SetZ(ROOT::Math::CylindricalEta3D<double>::Scalar zz). void SetR(ROOT::Math::CylindricalEta3D<double>::Scalar r). void SetTheta(ROOT::Math::CylindricalEta3D<double>::Scalar theta). » Last changed: root/mathcore:$Id: CylindricalEta3D.h 24923 2008-07-23 15:43:05Z moneta $ » Last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__CylindricalEta3D_double_.html:5260,test,test,5260,root/html526/ROOT__Math__CylindricalEta3D_double_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__CylindricalEta3D_double_.html,1,['test'],['test']
Testability,"const; { return fPhi; }. T X() const; { return fRho*std::cos(fPhi); }. T Y() const; { return fRho*std::sin(fPhi); }. T Z() const. T R() const. T Mag2() const; { return R()*R(); }. T Perp2() const; { return fRho*fRho; }. T Theta() const. void SetRho(double rho); setters (only for data members). set the rho coordinate value keeping eta and phi constant. void SetEta(double eta). set the eta coordinate value keeping rho and phi constant. void SetPhi(double phi). set the phi coordinate value keeping rho and eta constant. void SetXYZ(ROOT::Math::CylindricalEta3D<double>::Scalar xx, ROOT::Math::CylindricalEta3D<double>::Scalar yy, ROOT::Math::CylindricalEta3D<double>::Scalar zz). set all values using cartesian coordinates. void Scale(double a). scale by a scalar quantity a --; for cylindrical eta coords, as long as a >= 0, only rho changes!. Negate(). bool operator==(const ROOT::Math::CylindricalEta3D<double>& rhs) const. Exact component-by-component equality; Note: Peculiar representaions of the zero vector such as (0,1,0) will; not test as equal to one another. bool operator!=(const ROOT::Math::CylindricalEta3D<double>& rhs) const; {return !(operator==(rhs));}. T x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X();}. T y() const; { return Y();}. T z() const; { return Z(); }. void SetX(ROOT::Math::CylindricalEta3D<double>::Scalar xx); ============= Specializations for improved speed ==================; (none); ====== Set member functions for coordinates in other systems =======. void SetY(ROOT::Math::CylindricalEta3D<double>::Scalar yy). void SetZ(ROOT::Math::CylindricalEta3D<double>::Scalar zz). void SetR(ROOT::Math::CylindricalEta3D<double>::Scalar r). void SetTheta(ROOT::Math::CylindricalEta3D<double>::Scalar theta). » Last changed: root/mathcore:$Id: CylindricalEta3D.h 31938 2009-12-18 14:49:38Z moneta $ » Last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__CylindricalEta3D_double_.html:5260,test,test,5260,root/html528/ROOT__Math__CylindricalEta3D_double_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__CylindricalEta3D_double_.html,3,['test'],['test']
Testability,"const;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (int numPads);  preparation for monitoring ;  ; void plot (std::string histoName, std::string options, int pad, EColor color);  for monitoring ;  ; EnumRegularization regularization () const;  some regularization of the DNN is turned on? ;  ; int repetitions () const;  how many steps have to be gone until the batch is changed ;  ; template<typename Iterator > ; void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions);  set the drop-out configuration (layer-wise) ;  ; void setMonitoring (std::shared_ptr< Monitoring > ptrMonitoring);  prepared for monitoring ;  ; virtual void setProgressLimits (double minProgress=0, double maxProgress=100);  ; virtual void startTraining ();  ; size_t testRepetitions () const;  how often is the test data tested ;  ; bool useMultithreading () const;  is multithreading turned on? ;  . Public Attributes; std::vector< double > m_ams;  ; double m_cutValue;  ; std::string m_fileNameNetConfig;  ; std::string m_fileNameResult;  ; std::vector< double > m_input;  ; std::vector< double > m_output;  ; std::vector< Pattern > * m_pResultPatternContainer;  ; size_t m_scaleToNumEvents;  ; std::vector< double > m_significances;  ; double m_sumOfBkgWeights;  ; double m_sumOfSigWeights;  ; std::vector< double > m_targets;  ; std::vector< double > m_weights;  ;  Public Attributes inherited from TMVA::DNN::Settings; size_t count_dE;  ; size_t count_E;  ; size_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:4717,test,testRepetitions,4717,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,3,['test'],"['test', 'testRepetitions', 'tested']"
Testability,"const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:45829,log,logging,45829,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,42,['log'],['logging']
Testability,"constexpr Double_t C()Velocity of light in .Definition TMath.h:114; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::Kconstexpr Double_t K()Boltzmann's constant in : .Definition TMath.h:247; TMath::Sqrt2constexpr Double_t Sqrt2()Definition TMath.h:86; TMath::Econstexpr Double_t E()Base of natural log: .Definition TMath.h:93; TMath::Sigmaconstexpr Double_t Sigma()Stefan-Boltzmann constant in : .Definition TMath.h:270; TMath::Hconstexpr Double_t H()Planck's constant in : .Definition TMath.h:188; TMath::LogEconstexpr Double_t LogE()Base-10 log of e (to convert ln to log)Definition TMath.h:107; TMath::Ln10constexpr Double_t Ln10()Natural log of 10 (to convert log to ln)Definition TMath.h:100; TMath::EulerGammaconstexpr Double_t EulerGamma()Euler-Mascheroni Constant.Definition TMath.h:332; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::Rconstexpr Double_t R()Universal gas constant ( ) inDefinition TMath.h:302; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::InfinityDouble_t Infinity()Returns an infinity as defined by the IEEE standard.Definition TMath.h:917; v@ vDefinition rootcling_impl.cxx:3699; TFormulaParamOrder::operator()bool operator()(const TString &a, const TString &b) constDefinition TFormula.cxx:375; TInterpreter::CallFuncIFacePtr_t::Generic_tvoid(* Generic_t)(void *, int, void **, void *)Definition TInterpreter.h:90; TInterpreter::CallFuncIFacePtr_t::fGenericGeneric_t fGenericDefinition TInterpreter.h:105; mTMarker mDefinition textangle.C:8; TFormula.h. histhistsrcTFormula.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:171465,log,logarithm,171465,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['log'],['logarithm']
Testability,"contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ;  ; void GatherInformations ();  Collect information about what is useful in the network. ;  ; TTree * GetIOTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMLPAnalyzer.html:1431,test,test,1431,doc/master/classTMLPAnalyzer.html,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html,1,['test'],['test']
Testability,"copy if want to preserve original data; 346 The data sets must not contain negative values. IN case it does,; 347 an empty data set is returned; 348 */; 349 BinData & BinData::LogTransform(); 350 { // apply log transform on the bin data values; 351 ; 352 if ( fWrapped ); 353 {; 354 UnWrap();; 355 }; 356 ; 357 if ( kNoError == fErrorType ); 358 {; 359 fDataError.resize(fNPoints + FitData::VectorPadding(fNPoints));; 360 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 361 }; 362 ; 363 for ( unsigned int i=0; i < fNPoints; i++ ); 364 {; 365 double val = fData[i];; 366 ; 367 if ( val <= 0 ); 368 {; 369 MATH_ERROR_MSG(""BinData::TransformLog"",""Some points have negative values - cannot apply a log transformation"");; 370 return *this;; 371 }; 372 ; 373 fData[i] = std::log( val );; 374 ; 375 if( kNoError == fErrorType ); 376 {; 377 fDataError[i] = val;; 378 }; 379 else if ( kValueError == fErrorType ); 380 {; 381 fDataError[i]*= val;; 382 }; 383 else if ( kCoordError == fErrorType ); 384 {; 385 fDataError[i]/= val;; 386 }; 387 else if ( kAsymError == fErrorType ); 388 {; 389 fDataErrorHigh[i]/= val;; 390 fDataErrorLow[i]/= val;; 391 }; 392 else; 393 assert(false);; 394 }; 395 ; 396 if ( kNoError == fErrorType ); 397 {; 398 fErrorType = kValueError;; 399 }; 400 ; 401 return *this;; 402 }; 403 ; 404 ; 405 /**; 406 add one dim data with only coordinate and values; 407 */; 408 void BinData::Add( double x, double y ); 409 {; 410 assert( kNoError == fErrorType );; 411 ; 412 assert( !fData.empty() && fDataPtr );; 413 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 414 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 415 assert( fDataError.empty() && !fDataErrorPtr );; 416 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 417 ; 418 fData[ fNPoints ] = y;; 419 ; 420 FitData::Add( x );; 421 fSumContent += y;; 422 }; 423 ; 424 /**; 425 add one dim data with no error in the coordinate (x); 426 in this case store the inverse of the error in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:11068,log,log,11068,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,5,"['assert', 'log']","['assert', 'log']"
Testability,"cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 746generically tries to infer how many cores are available in the cluster through the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 751the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 752 ; 753The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 754keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 755backend used:; 756 ; 757~~~{.py}; 758import ROOT; 759 ; 760# Define correct imports and access the distributed RDataFrame appropriate for the; 761# backend used in the analysis; 762RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 763 ; 764if __name__ == ""__main__"":; 765 # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; 766 df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); 767 # Proceed as usual; 768 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 769~~~; 770 ; 771Note that when processing a TTree or TChain dataset, the `npartitions` value should not exceed the number of clusters in; 772the dataset. Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:43706,log,logic,43706,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['log'],['logic']
Testability,"cores available.; 781 ; 782### Choosing the number of distributed tasks; 783 ; 784A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 785tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 786generically tries to infer how many cores are available in the cluster through the connection object. The number of; 787tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 788doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 789a batch system. The client object created at the beginning of the application does not automatically know how many cores; 790will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 791the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 792 ; 793The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 794keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 795backend used:; 796 ; 797~~~{.py}; 798import ROOT; 799 ; 800# Define correct imports and access the distributed RDataFrame appropriate for the; 801# backend used in the analysis; 802RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 803 ; 804if __name__ == ""__main__"":; 805 # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; 806 df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); 807 # Proceed as usual; 808 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 809~~~; 810 ; 811Note that when processing a TTree or TChain dataset, the `npartitions` value should not exceed the number of clusters in; 812the dataset. Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:45346,log,logic,45346,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['log'],['logic']
Testability,"course Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 0. Setting up ROOT. Downloading; If you don't have ROOT yet, download it! We have binaries but you can also build it yourself.; Environment Variables; ROOT expects ROOTSYS, PATH and LD_LIBRARY_PATH to be set correctly. If which root does not show anything then use the script that does all of that:; source wherever/root/is/bin/thisroot.sh. Starting ROOT; Now you can start ROOT using root or root -l to suppress the logo. See root --help for more options. . ‹ ROOT 6 Analysis Workshop; up; 1. Extracting an object from a TFile ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/0-setting-root.html:2297,log,logo,2297,d/0-setting-root.html,https://root.cern,https://root.cern/d/0-setting-root.html,1,['log'],['logo']
Testability,"cover @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.154263 cHl3=2.95902 cHq3=-2.78828; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=59.1285, denominator=wrap_pdf_Int[pTV]=200921; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.338546 cHl3=0.879879 cHq3=-1.35856; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.372361 cHl3=0.491134 cHq3=-0.886807; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:15434,log,log,15434,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['log'],['log']
Testability,"createExpectedEventsFunc (const RooArgSet *nset) const;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:5303,log,log,5303,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,2,['log'],['log']
Testability,"criminating variable. void AddMulticlassOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void NoErrorCalc(Double_t *const err, Double_t *const errUpper). Double_t GetMvaValue(const TMVA::Event *const ev, Double_t* err = 0, Double_t* errUpper = 0). Bool_t IsSignalLike(). Bool_t IsSignalLike(Double_t mvaVal). void AddClassifierOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void AddClassifierOutputProb(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample. bias = average deviation; dev = average absolute deviation; rms = rms of deviation. void TestMulticlass(); test multiclass classification. void TestClassification(); initialization. void WriteStateToStream(ostream& tf) const; general method used in writing the header of the weight files where; the used variables, variable transformation type etc. is specified. void AddInfoItem(void* gi, const TString& name, const TString& value) const; xml writing. void AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType). void WriteStateToXML(void* parent) const; general method used in writing the header of the weight files where; the used variables, variable transformation type etc. is specified. void ReadStateFromStream(TFile& rf); write reference MVA distributions (and other information); to a ROOT type weight file. void WriteStateToFile() const; write options and weights to file; note that each one text file for the main configuration information; and one ROOT file for ROOT objects are created. void ReadStateFromFile(); Function to write options and weights to file. void ReadStat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBase.html:23556,test,test,23556,root/html530/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBase.html,2,['test'],['test']
Testability,cros.h;  vector.h;  writemaskedvector.h;  ► sse;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  cpuid.h;  global.h;  support.h;  vector.h;  version.h;  ► src;  avx_sorthelper.cpp;  const.cpp;  cpuid.cpp;  support.cpp;  trigonometric.cpp;  ► tests;  arithmetics.cpp;  casts.cpp;  const.h;  convert-sincos-reference.cpp;  deinterleave.cpp;  expandandmerge.cpp;  gather.cpp;  implicit_type_conversion.cpp;  implicit_type_conversion_failures.cpp;  linkTest0.cpp;  linkTest1.cpp;  linkTestLib0.cpp;  linkTestLib1.cpp;  linkTestLib2.cpp;  linkTestLib3.cpp;  load.cpp;  mask.cpp;  math.cpp;  memory.cpp;  scalaraccess.cpp;  scatter.cpp;  sse_blend.cpp;  stlcontainer.cpp;  store.cpp;  supportfunctions.cpp;  swizzles.cpp;  ulp.h;  unittest.h;  utils.cpp;  vectormemoryhelper.h;  makeTest.py;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemStatHook.cxx;  TMemStatMng.cxx;  ► test;  leak_test.C;  run.C;  ► table;  ► inc;  LinkDef.h;  tableDescriptor.h;  TCernLib.h;  TChair.h;  TColumnView.h;  TDataSet.h;  TDataSetIter.h;  TDsKey.h;  TFileIter.h;  TFileSet.h;  TGenericTable.h;  TIndexTable.h;  TObjectSet.h;  TPoints3D.h;  TPointsArray3D.h;  TPolyLineShape.h;  TResponseTable.h;  TTable.h;  TTable3Points.h;  TTableDescriptor.h;  TTableIter.h;  TTableMap.h;  TTablePadView3D.h;  TTablePoints.h;  TTableSorter.h;  Ttypes.h;  TVolume.h;  TVolumePosition.h;  TVolumeView.h;  TVolumeViewIter.h;  ► src;  TCernLib.cxx;  TChair.cxx;  TColumnView.cxx;  TDataSet.cxx;  TDataSetIter.cxx;  TDsKey.cxx;  TFileIter.cxx;  TFileSet.c,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:59774,log,log,59774,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['log'],['log']
Testability,"crown.SetLineStyle(fH->GetLineStyle());; 5916 crown.Paint();; 5917 }; 5918 }; 5919 }; 5920 ; 5921 if (Hoption.Zscale) PaintPalette();; 5922 ; 5923 fH->SetFillStyle(fillsav);; 5924 fH->SetFillColor(colsav);; 5925 fH->TAttFill::Modify();; 5926 ; 5927}; 5928 ; 5929////////////////////////////////////////////////////////////////////////////////; 5930/// [Control function to draw a 2D histogram as a contour plot.](\ref HP16); 5931 ; 5932void THistPainter::PaintContour(Option_t *option); 5933{; 5934 ; 5935 Int_t i, j, count, ncontour, icol, n, lj, m, ix, jx, ljfill;; 5936 Int_t itars, mode, ir[4];; 5937 Double_t xsave, ysave, thesave,phisave,x[4], y[4], zc[4];; 5938 ; 5939 if (Hoption.Contour == 14) {; 5940 Hoption.Surf = 12;; 5941 Hoption.Axis = 1;; 5942 thesave = gPad->GetTheta();; 5943 phisave = gPad->GetPhi();; 5944 gPad->SetPhi(0.);; 5945 gPad->SetTheta(90.);; 5946 PaintSurface(option);; 5947 gPad->SetPhi(phisave);; 5948 gPad->SetTheta(thesave);; 5949 TView *view = gPad->GetView();; 5950 if (view) view->SetBit(kCannotRotate); //tested in ExecuteEvent; 5951 PaintAxis();; 5952 return;; 5953 }; 5954 ; 5955 if (Hoption.Same) {; 5956 // If the contour is painted on a 3d plot, the contour lines are; 5957 // paint in 3d too.; 5958 TObject *obj;; 5959 TIter next(gPad->GetListOfPrimitives());; 5960 while ((obj=next())) {; 5961 if (strstr(obj->GetDrawOption(),""surf"") ||; 5962 strstr(obj->GetDrawOption(),""lego"") ||; 5963 strstr(obj->GetDrawOption(),""tri"")) {; 5964 Hoption.Surf = 16;; 5965 PaintSurface(option);; 5966 return;; 5967 }; 5968 }; 5969 }; 5970 ; 5971 if (Hoption.Contour == 15) {; 5972 TGraphDelaunay2D *dt = nullptr;; 5973 TGraphDelaunay *dtOld = nullptr;; 5974 TList *hl = fH->GetListOfFunctions();; 5975 dt = (TGraphDelaunay2D*)hl->FindObject(""TGraphDelaunay2D"");; 5976 if (!dt) dtOld = (TGraphDelaunay*)hl->FindObject(""TGraphDelaunay"");; 5977 if (!dt && !dtOld) return;; 5978 if (!fGraph2DPainter); 5979 fGraph2DPainter = dt ? std::make_unique<TGraph2DPainter>(dt) : std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:220456,test,tested,220456,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['test'],['tested']
Testability,"cs)Definition TString.h:673; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TStyle::GetOptLogyInt_t GetOptLogy() constDefinition TStyle.h:248; TStyle::SetPadBorderModevoid SetPadBorderMode(Int_t mode=1)Definition TStyle.h:357; TStyle::SetPadTopMarginvoid SetPadTopMargin(Float_t margin=0.1)Definition TStyle.h:359; TStyle::SetOptLogxvoid SetOptLogx(Int_t logx=1)Definition TStyle.h:329; TStyle::SetPadBottomMarginvoid SetPadBottomMargin(Float_t margin=0.1)Definition TStyle.h:358; TStyle::GetOptTitleInt_t GetOptTitle() constDefinition TStyle.h:246; TStyle::GetPadTickXInt_t GetPadTickX() constDefinition TStyle.h:217; TStyle::IsReadingBool_t IsReading() constDefinition TStyle.h:296; TStyle::GetPadColorColor_t GetPadColor() constDefinition TStyle.h:208; TStyle::SetPadRightMarginvoid SetPadRightMargin(Float_t margin=0.1)Definition TStyle.h:361; TStyle::SetTitleFontvoid SetTitleFont(Style_t font=62, Option_t *axis=""X"")Definition TStyle.cxx:1775; TStyle::GetPadRightMarginFloat_t GetPadRightMargin() constDefinition TStyle.h:214; TStyle::SetTitleBorderSizevoid SetTitleBorderSize(Width_t size=2)Definition TStyle.h:408; TStyle::GetDateXFloat_t GetDateX() constDefinition TStyle.h:197; TStyle::GetTitleFontStyle_t GetTitleFont(Option_t *axis=""X"") constReturn title font.Definition TStyle.cxx:1216; TStyle::SetPadTickYvoid SetPadTickY(Int_t ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:325266,log,logx,325266,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['log'],['logx']
Testability,"ct identifier; RooDataSet*fNullDetailedOutput; RooStats::SamplingDistribution*fNullDistr; Double_tfNullPValuep-value for the null hypothesis (small number means disfavored); Double_tfNullPValueErrorerror of p-value for the null hypothesis (small number means disfavored); Bool_tfPValueIsRightTail; Double_tfTestStatisticDataresult of the test statistic evaluated on data; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestResult(const char* name = 0); Default constructor. HypoTestResult(const char* name, Double_t nullp, Double_t altp); Alternate constructor. HypoTestResult(const RooStats::HypoTestResult& other); copy constructor. ~HypoTestResult(); Destructor. HypoTestResult & operator=(const RooStats::HypoTestResult& other); assignment operator. void Append(const RooStats::HypoTestResult* other); Add additional toy-MC experiments to the current results.; Use the data test statistics of the added object if it is not already; set (otherwise, ignore the new one). void SetAltDistribution(RooStats::SamplingDistribution* alt). void SetNullDistribution(RooStats::SamplingDistribution* null). void SetTestStatisticData(const Double_t tsd). void SetAllTestStatisticsData(const RooArgList* tsd). void SetPValueIsRightTail(Bool_t pr). Bool_t HasTestStatisticData(void). Double_t NullPValueError() const; compute error on Null pvalue. Double_t CLbError() const; compute CLb error; Clb = 1 - NullPValue(); must use opposite condition that routine above. Double_t CLsplusbError() const. Double_t SignificanceError() const; Taylor expansion series approximation for standard deviation (error propagation). Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void UpdatePValue(const RooStats::SamplingDistribution* distr, Double_t& pvalue, Double_t& perror, Bool_t pIsRightTail); updates the pvalue if sufficient data is available. void Print(Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestResult.html:9012,test,test,9012,root/html534/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestResult.html,1,['test'],['test']
Testability,"ct identifier; RooDataSet*fNullDetailedOutput; RooStats::SamplingDistribution*fNullDistr; Double_tfNullPValuep-value for the null hypothesis (small number means disfavored); Double_tfNullPValueErrorerror of p-value for the null hypothesis (small number means disfavored); Bool_tfPValueIsRightTail; Double_tfTestStatisticDataresult of the test statistic evaluated on data; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestResult(const char* name = 0); Default constructor. HypoTestResult(const char* name, Double_t nullp, Double_t altp); Alternate constructor. HypoTestResult(const RooStats::HypoTestResult& other); copy constructor. ~HypoTestResult(); Destructor. HypoTestResult & operator=(const RooStats::HypoTestResult& other); assignment operator. void Append(const RooStats::HypoTestResult* other); Add additional toy-MC experiments to the current results.; Use the data test statistics of the added object if it is not already; set (otherwise, ignore the new one). void SetAltDistribution(RooStats::SamplingDistribution* alt). void SetNullDistribution(RooStats::SamplingDistribution* null). void SetTestStatisticData(const Double_t tsd). void SetAllTestStatisticsData(const RooArgList* tsd). void SetPValueIsRightTail(Bool_t pr). Bool_t HasTestStatisticData(void). Double_t NullPValueError() const; compute error on Null pvalue. Double_t CLbError() const; compute CLb error; Clb = 1 - NullPValue(); must use opposite condition that routine above. Double_t CLsplusbError() const. Double_t SignificanceError() const; Taylor expansion series approximation for standard deviation (error propagation). Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void UpdatePValue(const RooStats::SamplingDistribution* distr, Double_t& pvalue, Double_t& perror, Bool_t pIsRightTail); updates the pvalue if sufficient data is available. void Print(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestResult.html:9479,test,test,9479,root/html602/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestResult.html,2,['test'],['test']
Testability,"ct model should be less than the value chi2.; 630///; 631/// The returned probability corresponds to 1-P(a,x),; 632/// which denotes the probability that an observed Chi-squared exceeds; 633/// the value chi2 by chance, even for a correct model.; 634///; 635/// \author NvE 14-nov-1998 UU-SAP Utrecht; 636 ; 637Double_t TMath::Prob(Double_t chi2,Int_t ndf); 638{; 639 if (ndf <= 0) return 0; // Set CL to zero in case ndf<=0; 640 ; 641 if (chi2 <= 0) {; 642 if (chi2 < 0) return 0;; 643 else return 1;; 644 }; 645 ; 646 return ::ROOT::Math::chisquared_cdf_c(chi2,ndf);; 647}; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Calculates the Kolmogorov distribution function,; 651///; 652/// \f[; 653/// P(z) = 2 \sum_{j=1}^{\infty} (-1)^{j-1} e^{-2 j^2 z^2}; 654/// \f]; 655///; 656/// which gives the probability that Kolmogorov's test statistic will exceed; 657/// the value z assuming the null hypothesis. This gives a very powerful; 658/// test for comparing two one-dimensional distributions.; 659/// see, for example, Eadie et al, ""statistical Methods in Experimental; 660/// Physics', pp 269-270).; 661///; 662/// This function returns the confidence level for the null hypothesis, where:; 663/// - \f$ z = dn \sqrt{n} \f$, and; 664/// - \f$ dn \f$ is the maximum deviation between a hypothetical distribution; 665/// function and an experimental distribution with; 666/// - \f$ n \f$ events; 667///; 668/// NOTE: To compare two experimental distributions with m and n events,; 669/// use \f$ z = \sqrt{m n/(m+n)) dn} \f$; 670///; 671/// Accuracy: The function is far too accurate for any imaginable application.; 672/// Probabilities less than \f$ 10^{-15} \f$ are returned as zero.; 673/// However, remember that the formula is only valid for ""large"" n.; 674///; 675/// Theta function inversion formula is used for z <= 1; 676///; 677/// This function was translated by Rene Brun from PROBKL in CERNLIB.; 678 ; 679Double_t TMath::KolmogorovProb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:20922,test,test,20922,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['test'],['test']
Testability,"ct on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:46967,log,logging,46967,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['log'],['logging']
Testability,"ct ratio; TFrame*fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tfGLDevice! OpenGL off-screen pixmap identifier; Bool_tfGridxSet to true if grid along X; Bool_tfGridySet to true if grid along Y; Double_tfHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfLogx(=0 if X linear scale, =1 if log scale); Int_tfLogy(=0 if Y linear scale, =1 if log scale); Int_tfLogz(=0 if Z linear scale, =1 if log scale); Bool_tfModifiedSet to true when pad is modified; TPad*fMother! pointer to mother of the list; TStringfNamePad name; Int_tfNumberpad number identifier; Int_tfPadPaintSet to 1 while painting the pad; TObject*fPadPointer! free pointer; TObject*fPadView3D! 3D View of this TPad; Double_tfPhiphi angle to view as lego/surface; Double_tfPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tfPixeltoXkConversion coefficient for pixel to X World; Double_tfPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tfPixeltoYkConversion coefficient for pixel to Y World; Int_tfPixmapID! Off-screen pixmap identifier; TList*fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Double_tfThetatheta angle to view as lego/surface; Int_tfTickxSet to 1 if tick marks along X; Int_tfTickySet to 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:25351,log,log,25351,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,6,['log'],['log']
Testability,"ct.; Definition at line 203 of file RooFitResult.h. ◆ isIdentical(). bool RooFitResult::isIdentical ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolCorr = 1e-4, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolCorrabsolute tolerance for correlation coefficients. ; [in]verboseIf this function will log to the standard output when comparisons fail. As the relative tolerance for the parameter errors, the default value of 1e-3 will be used. ; Definition at line 863 of file RooFitResult.cxx. ◆ isIdenticalNoCov(). bool RooFitResult::isIdenticalNoCov ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolErr = 1e-3, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances, ignoring the correlation matrix. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolErrRelative tolerance for parameter errors. ; [in]verboseIf this function will log to the standard output when comparisons fail. . Definition at line 801 of file RooFitResult.cxx. ◆ lastMinuitFit(). RooFitResult * RooFitResult::lastMinuitFit ; (; const RooArgList & ; varList = RooArgList()). static . Import the results of the last fit performed by gMinuit, interpreting the fit parameters as the given varList of parameters. ; Definition at line 917 of file RooFitResult.cxx. ◆ minNll(). double RooFitResult::minNll ; (; ); const. inline . Return minimized -log(L) value. ; Definition at line 99 of file RooFitResult.h. ◆ numInvalidNLL(). Int_t RooFitResult::numInvalidNLL ; (; ); const. inline . Return number of NLL evaluations with problems. ; Definition at line 91 of file RooFitResult.h. ◆ numStatusHistory(). UInt_t RooFitResult::numStatusHistory ; (; ); const. inline . Definition at line 82 of file RooFitResul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:30406,test,test,30406,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['test'],['test']
Testability,"ct::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*fgApplicationsList of available applications. private:. TApplicationImp*fAppImp!Window system specific application implementation; Int_tfArgcNumber of com mand line arguments; char**fArgvCommand line arguments; TApplication::EExitOnExceptionfExitOnExceptionExit on exception option; TObjArray*fFilesArray of input files or C++ expression (TObjString's) specified via argv; TStringfIdleCommandCommand to execute while application is idle; TTimer*fIdleTimerIdle timer; Bool_tfIsRunningTrue when in event loop (Run() has been called); Bool_tfNoLogDo not process logon and logoff macros; Bool_tfNoLogoDo not show splash screen and welcome message; Bool_tfQuitExit after having processed input files; Bool_tfReturnFromRunWhen true return from Run(); TSignalHandler*fSigHandlerInterrupt handler; Bool_tfUseMemstatRun with TMemStat enabled; TStringfWorkDirWorking directory specified via argv; static Bool_tfgGraphInitTrue if graphics libs initialized; static Bool_tfgGraphNeededTrue if graphics libs need to be initialized. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TApplication(); Default ctor. Can be used by classes deriving from TApplication. TApplication(const char* appClassName, Int_t* argc, char** argv, void* options = 0, Int_t numOptions = 0); Create an application environment. The application environment; provides an interface to the graphics system and eventloop; (be it X, Windoze, MacOS or BeOS). After creating the application; object start the eventloop by calling its Run() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplication.html:12679,log,logon,12679,root/html602/TApplication.html,https://root.cern,https://root.cern/root/html602/TApplication.html,4,['log'],"['logoff', 'logon']"
Testability,"ct::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Float_tfCarry; Int_tfCount24; Float_tfFloatSeedTable[24]; Int_tfIlag; const Int_tfIntModulus; Int_tfJlag; Int_tfLuxury; const Double_tfMantissaBit12; const Double_tfMantissaBit24; TStringTNamed::fNameobject identifier; Int_tfNskip; UInt_tTRandom::fSeedRandom number generator seed; const UInt_t*fTheSeeds; TStringTNamed::fTitleobject title; static Int_tfgMaxIndex; static Int_tfgNumEngines. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TRandom. ←; TRandom1. Function documentation; TRandom1(UInt_t seed, Int_t lux = 3); Luxury level is set in the same way as the original FORTRAN routine.; level 0 (p=24): equivalent to the original RCARRY of Marsaglia; and Zaman, very long period, but fails many tests.; level 1 (p=48): considerable improvement in quality over level 0,; now passes the gap test, but still fails spectral test.; level 2 (p=97): passes all known tests, but theoretically still; defective.; level 3 (p=223): DEFAULT VALUE. Any theoretically possible; correlations have very small chance of being observed.; level 4 (p=389): highest possible luxury, all 24 bits chaotic. TRandom1(); default constructor. TRandom1(Int_t rowIndex, Int_t colIndex, Int_t lux); constructor. ~TRandom1(); destructor. void GetTableSeeds(UInt_t* seeds, Int_t index); static function returning the table of seeds. Double_t Rndm(Int_t i = 0); return a random number in ]0,1]. void RndmArray(Int_t size, Float_t* vect); return an array of random numbers in ]0,1]. void RndmArray(Int_t size, Double_t* vect); return an array of random numbers in ]0,1[. void SetSeeds(const UInt_t* seeds, Int_t lux = 3); set seeds. void SetSeed2(UInt_t seed, Int_t lux = 3); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRandom1.html:8350,test,tests,8350,root/html602/TRandom1.html,https://root.cern,https://root.cern/root/html602/TRandom1.html,2,['test'],['tests']
Testability,"ct::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TH1F*fB_histoThe b Histo; TH1F*fB_histo_shadedThe b Histo shaded; TLine*fData_testStat_lineThe line for the data value of the test statistic; TLegend*fLegendThe legend of the plot; TVirtualPad*fPadThe pad where it has been drawn; TH1F*fSb_histoThe sb Histo; TH1F*fSb_histo_shadedThe sb Histo shaded; boolfVerboseverbosity flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridPlot(const char* name, const char* title, const vector<double>& sb_values, const vector<double>& b_values, double testStat_data, int n_bins, bool verbosity = true); HybridPlot constructor. ~HybridPlot(); destructor. void Draw(const char* options = """"); draw the S+B and B histogram in the current canvas. void DumpToFile(const char* RootFileName, const char* options); All the objects are written to rootfile. void DumpToImage(const char* filename). double GetHistoCenter(TH1* histo, double n_rms = 1, bool display_result = false); Get the center of the histo. double* GetHistoPvals(TH1* histo, double percentage). double GetMedian(TH1* histo). HybridPlot(const char* name, const char* title, const vector<double>& sb_values, const vector",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridPlot.html:6625,test,test,6625,root/html526/RooStats__HybridPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridPlot.html,5,['test'],['test']
Testability,"ct::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_tfAbsTolabsolute tolerance deviation; Double_t(*)(Double_t)fGetRootVal; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; Double_tfRootMaxmaximum root value; Double_tfRootMinminimum root value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RootFinder(const TMVA::RootFinder& ). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const TMVA::RootFinder& ); usually copying is non trivial, so we make this unaccessible. {}. double Root(). Return the current and latest estimate of the Root. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 15:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__RootFinder.html:6577,log,logger,6577,root/html602/TMVA__RootFinder.html,https://root.cern,https://root.cern/root/html602/TMVA__RootFinder.html,1,['log'],['logger']
Testability,"ct::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_tfAbsTolabsolute tolerance deviation; Double_t(*)(Double_t)fGetRootVal; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; Double_tfRootMaxmaximum root value; Double_tfRootMinminimum root value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RootFinder(const TMVA::RootFinder& ). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const TMVA::RootFinder& ); usually copying is non trivial, so we make this unaccessible. {}. double Root(). Return the current and latest estimate of the Root. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__RootFinder.html:6577,log,logger,6577,root/html604/TMVA__RootFinder.html,https://root.cern,https://root.cern/root/html604/TMVA__RootFinder.html,1,['log'],['logger']
Testability,"ct::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); RooMappedCategory&operator=(const RooMappedCategory&); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); voidRooAbsArg::printDirty(Bool_t depth = kTRUE) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMetaArgs(ostream& os) const; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMappedCategory.html:11382,test,testArg,11382,root/html602/RooMappedCategory.html,https://root.cern,https://root.cern/root/html602/RooMappedCategory.html,2,['test'],['testArg']
Testability,"ct::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofLogElem&operator=(const TProofLogElem&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = 0) const; voidPrt(const char* what); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); Int_tRetrieve(TProofLog::ERetrieveOpt opt = TProofLog::kTrailing, const char* pattern = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetMaxTransferSize(Long64_t maxsz); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofLogElem(const TProofLogElem&); TProofLogElem(const char* ord, const char* url, TProofLog* logger); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLogElem.html:5151,log,logger,5151,root/html602/TProofLogElem.html,https://root.cern,https://root.cern/root/html602/TProofLogElem.html,2,['log'],['logger']
Testability,"ct; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooStats::SamplingDistribution*RooStats::HypoTestResult::fAltDistr; Double_tRooStats::HypoTestResult::fAlternatePValuep-value for the alternate hypothesis (small number means disfavored); TStringTNamed::fNameobject identifier; RooStats::SamplingDistribution*RooStats::HypoTestResult::fNullDistr; Double_tRooStats::HypoTestResult::fNullPValuep-value for the null hypothesis (small number means disfavored); Bool_tRooStats::HypoTestResult::fPValueIsRightTail; Double_tRooStats::HypoTestResult::fTestStatisticDataresult of the test statistic evaluated on data; TStringTNamed::fTitleobject title. private:. boolfComputationsAltDoneFlagflag if the fAlternatePValue computation have been already done or not (ie need to be refreshed); boolfComputationsNulDoneFlagflag if the fNullPValue computation have been already done or not (ie need to be refreshed); boolfSumLargerValuesp-value for velues of testStat >= testStat_data (or testStat <= testStat_data); vector<double>fTestStat_bvector of results for B-only toy-MC; doublefTestStat_dataresults (test statistics) evaluated for data; vector<double>fTestStat_sbvector of results for S+B toy-MC. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridResult(const char* name = 0); HybridResult default constructor (with name ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridResult.html:8769,test,testStat,8769,root/html528/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridResult.html,3,['test'],"['test', 'testStat']"
Testability,"ct; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooStats::SamplingDistribution*fAltDistr; Double_tfAlternatePValuep-value for the alternate hypothesis (small number means disfavored); TStringTNamed::fNameobject identifier; RooStats::SamplingDistribution*fNullDistr; Double_tfNullPValuep-value for the null hypothesis (small number means disfavored); Bool_tfPValueIsRightTail; Double_tfTestStatisticDataresult of the test statistic evaluated on data; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestResult(const char* name = 0); Default constructor. HypoTestResult(const char* name, Double_t nullp, Double_t altp); Alternate constructor. ~HypoTestResult(); Destructor. void Append(const RooStats::HypoTestResult* other); Add additional toy-MC experiments to the current results.; Use the data test statistics of the added object if it is not already; set (otherwise, ignore the new one). void SetAltDistribution(RooStats::SamplingDistribution* alt). void SetNullDistribution(RooStats::SamplingDistribution* null). void SetTestStatisticData(const Double_t tsd). void SetPValueIsRightTail(Bool_t pr). Bool_t HasTestStatisticData(void). Double_t NullPValueError() const. Double_t CLbError() const. Double_t CLsplusbError() const. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void UpdatePValue(const RooStats::SamplingDistribution* distr, Double_t* pvalue, Bool_t pIsRightTail); updates the pvalue if sufficient data is available. explicit HypoTestResult(const char* name = 0); default constructor. Double_t NullPValue() const; Return p-value for null hypothesis. { return fNullPValue; }. Double_t AlternatePValue() const; Return p-value for alternate hypothesis. { return fAlternatePValue; }. Double_t CLb() const; Convert NullPValue into a ""confidence leve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestResult.html:7872,test,test,7872,root/html528/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestResult.html,1,['test'],['test']
Testability,"cted . Allows to check if the ml method is a Cuts method. ; Returnsboolen true if the method is a Cuts method. ; Definition at line 957 of file Classification.cxx. ◆ MergeFiles(). void TMVA::Experimental::Classification::MergeFiles ; (; ). protected . Definition at line 1130 of file Classification.cxx. ◆ Streamer(). virtual void TMVA::Experimental::Classification::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::Experimental::Classification::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file Classification.h. ◆ Test(). void TMVA::Experimental::Classification::Test ; (; ). virtual . Perform test evaluation in all booked methods. ; Definition at line 513 of file Classification.cxx. ◆ TestMethod() [1/2]. void TMVA::Experimental::Classification::TestMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 526 of file Classification.cxx. ◆ TestMethod() [2/2]. void TMVA::Experimental::Classification::TestMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 935 of file Classification.cxx. ◆ Train(). void TMVA::Experimental::Classification::Train ; (; ). virtual . Method to train all booked ml methods. ; Definition at line 324 of file Classification.cxx. ◆ TrainMethod() [1/2]. void TMVA::Experimental::Classification::TrainMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets train an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 337 of file Classification.cxx. ◆ TrainMethod() [2/2]. void TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:26610,test,test,26610,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['test'],['test']
Testability,"cted . Definition at line 133 of file TSQLFile.h. ◆ SQLStartTransaction(). Bool_t TSQLFile::SQLStartTransaction ; (; ). protected . Start SQL transaction. ; Definition at line 1573 of file TSQLFile.cxx. ◆ SQLStatement(). TSQLStatement * TSQLFile::SQLStatement ; (; const char * ; cmd, . Int_t ; bufsize = 1000 . ). protected . Produces SQL statement for currently conected DB server. ; Definition at line 1439 of file TSQLFile.cxx. ◆ SQLStrIdColumn(). const char * TSQLFile::SQLStrIdColumn ; (; ); const. inlineprotected . Definition at line 141 of file TSQLFile.h. ◆ SQLTestTable(). Bool_t TSQLFile::SQLTestTable ; (; const char * ; tablename). protected . Test, if table of specified name exists. ; Definition at line 1493 of file TSQLFile.cxx. ◆ SQLValueQuote(). const char * TSQLFile::SQLValueQuote ; (; ); const. inlineprotected . Definition at line 143 of file TSQLFile.h. ◆ StartLogFile(). void TSQLFile::StartLogFile ; (; const char * ; fname). start logging of all SQL statements in specified file ; Definition at line 447 of file TSQLFile.cxx. ◆ StartTransaction(). Bool_t TSQLFile::StartTransaction ; (; ). Start user transaction. ; This can be usesful, when big number of objects should be stored in data base and commitment required only if all operations were successful. In that case in the end of all operations method Commit() should be called. If operation on user-level is looks like not successful, method Rollback() will return database data and TSQLFile instance to previous state. In MySQL not all tables types support transaction mode of operation. See SetTablesType() method for details . ; Definition at line 565 of file TSQLFile.cxx. ◆ StopLogFile(). void TSQLFile::StopLogFile ; (; ). close logging file ; Definition at line 456 of file TSQLFile.cxx. ◆ StoreObjectInTables(). Long64_t TSQLFile::StoreObjectInTables ; (; Long64_t ; keyid, . const void * ; obj, . const TClass * ; cl . ). protected . Store object in database. Return stored object id or -1 if error. ; Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:96138,log,logging,96138,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['log'],['logging']
Testability,"cted Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:1389,test,test,1389,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,1,['test'],['test']
Testability,"cted Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:1390,test,test,1390,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html,1,['test'],['test']
Testability,"cted Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:1389,test,test,1389,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,1,['test'],['test']
Testability,"cted Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:1390,test,test,1390,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html,1,['test'],['test']
Testability,"cted Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TParallelCoord.h>. Inheritance diagram for TParallelCoord:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatusBits. enum TParallelCoord::EStatusBits. EnumeratorkVertDisplay If the axes are drawn vertically, false if horizontally. . kCurveDisplay If the polylines are replaced by interpolated curves. . kPaintEntries To paint all TParallelCoord entries. . kLiveUpdate To paint the entries when being modified. . kGlobalScale Every variable is on the same scale. . kCandleChart To produce a candle chart. . kGlobalLogScale Every variable in log scale. . Definition at line 30 of file TParallelCoord.h. Constructor & Destructor Documentation. ◆ TParallelCoord() [1/3]. TParallelCoord::TParallelCoord ; (; ). Default constructor. ; Definition at line 130 of file TParallelCoord.cxx. ◆ TParallelCoord() [2/3]. TParallelCoord::TParallelCoord ; (; Long64_t ; nentries). Constructor without a reference to a tree, the datas must be added afterwards with TParallelCoord::AddVariable(Double_t*,const char*). ; Definition at line 141 of file TParallelCoord.cxx. ◆ TParallelCoord() [3/3]. TParallelCoord::TParallelCoord ; (; TTree * ; tree, . Long64_t ; nentries . ). Normal constructor, the datas must be added afterwards with TParallelCoord::AddVariable(Double_t*,const char*). ; Definition at line 156 of file TParallelCoord.cxx. ◆ ~TParallelCoord(). TParallelCoord::~TParallelCoord ; (; ). override . Destructor. ; Definition at line 181 of file TParallelCoord.cxx. Member Function Documentation. ◆ AddSelection(). void TParallelCoord:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:23349,log,log,23349,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['log'],['log']
Testability,"cted:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tRooStats::HypoTestResult::fAlternatePValuep-value for the alternate hypothesis (small number means disfavored); TStringTNamed::fNameobject identifier; Double_tRooStats::HypoTestResult::fNullPValuep-value for the null hypothesis (small number means disfavored); TStringTNamed::fTitleobject title. private:. boolfComputationsAltDoneFlagflag if the fAlternatePValue computation have been already done or not (ie need to be refreshed); boolfComputationsNulDoneFlagflag if the fNullPValue computation have been already done or not (ie need to be refreshed); boolfSumLargerValuesp-value for velues of testStat >= testStat_data (or testStat <= testStat_data); vector<double>fTestStat_bvector of results for B-only toy-MC; doublefTestStat_dataresults (test statistics) evaluated for data; vector<double>fTestStat_sbvector of results for S+B toy-MC. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridResult( const char *name); HybridResult default constructor (with name ). HybridResult(const char* name, vector<double>& testStat_sb_vals, vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridResult.html:7727,test,testStat,7727,root/html526/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridResult.html,3,['test'],"['test', 'testStat']"
Testability,"ction (const char *option=""xy"", Int_t nbins=1);  When the mouse is moved in a pad containing a 3-d view of this histogram a second canvas shows a projection type given as option. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH3. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:10986,test,test,10986,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,1,['test'],['test']
Testability,"ction above.; 262 double Error( unsigned int ipoint ) const; 263 {; 264 assert( ipoint < fMaxPoints );; 265 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 266 kAsymError == fErrorType || kNoError == fErrorType );; 267 ; 268 if ( fErrorType == kNoError ); 269 {; 270 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 271 assert( fDataError.empty() && fDataErrorHigh.empty() && fDataErrorLow.empty() );; 272 return 1.0;; 273 }; 274 ; 275 if ( fErrorType == kValueError ) // need to invert (inverror is stored); 276 {; 277 assert( fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 278 assert( fDataErrorHigh.empty() && fDataErrorLow.empty() );; 279 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 280 ; 281 double eval = fDataErrorPtr[ ipoint ];; 282 ; 283 if (fWrapped); 284 return eval;; 285 else; 286 return (eval != 0.0) ? 1.0/eval : 0.0;; 287 }; 288 ; 289 if ( fErrorType == kAsymError ); 290 { // return 1/2(el + eh); 291 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 292 assert( fDataError.empty() );; 293 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 294 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 295 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 296 ; 297 double eh = fDataErrorHighPtr[ ipoint ];; 298 double el = fDataErrorLowPtr[ ipoint ];; 299 ; 300 return (el+eh) / 2.0;; 301 }; 302 ; 303 assert( fErrorType == kCoordError );; 304 return fDataErrorPtr[ ipoint ];; 305 }; 306 ; 307 void GetAsymError( unsigned int ipoint, double& lowError, double& highError ) const; 308 {; 309 assert( fErrorType == kAsymError );; 310 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 311 assert( fDataError.empty() );; 312 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 313 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 314 assert( fD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:9935,assert,assert,9935,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,2,['assert'],['assert']
Testability,"ction documentation; TGeoTube(); Default constructor. TGeoTube(Double_t rmin, Double_t rmax, Double_t dz); Default constructor specifying minimum and maximum radius. TGeoTube(const char* name, Double_t rmin, Double_t rmax, Double_t dz); Default constructor specifying minimum and maximum radius. TGeoTube(Double_t* params); Default constructor specifying minimum and maximum radius; param[0] = Rmin; param[1] = Rmax; param[2] = dz. ~TGeoTube(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. Double_t Capacity(Double_t rmin, Double_t rmax, Double_t dz); Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. void ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Compute distance from inside point to surface of the tube (static); Boundary safe algorithm.; compute distance to surface; Do Z. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the tube; Boundary safe algorithm. Double_t DistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Static method to compute distance from outside point to a tube with given parameters; Boundary safe algorithm.; check Z planes. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTube.html:13273,test,test,13273,root/html528/TGeoTube.html,https://root.cern,https://root.cern/root/html528/TGeoTube.html,3,['test'],['test']
Testability,"ction is threadsafe in contrast to Coords(...); 392 and can easily get vectorized by the compiler in loops; 393 running over the ipoint-index.; 394 */; 395 double GetCoordErrorComponent( unsigned int ipoint, unsigned int icoord ) const; 396 {; 397 assert( ipoint < fMaxPoints );; 398 assert( icoord < fDim );; 399 assert( fCoordErrorsPtr.size() == fDim );; 400 assert( fCoordErrorsPtr[icoord] );; 401 assert( fCoordErrors.empty() || &fCoordErrors[icoord].front() == fCoordErrorsPtr[icoord] );; 402 ; 403 return fCoordErrorsPtr[icoord][ipoint];; 404 }; 405 ; 406 /**; 407 Return a pointer to the errors in the coordinates for the given fit point; 408 */; 409 // not threadsafe, to be replaced with never constructs!; 410 // for example: just return std::array or std::vector, there's; 411 // is going to be only minor overhead in c++11.; 412 const double* CoordErrors( unsigned int ipoint ) const; 413 {; 414 assert( ipoint < fMaxPoints );; 415 assert( fpTmpCoordErrorVector );; 416 assert( fErrorType == kCoordError || fErrorType == kAsymError );; 417 ; 418 for ( unsigned int i=0; i < fDim; i++ ); 419 {; 420 assert( fCoordErrorsPtr[i] );; 421 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 422 ; 423 fpTmpCoordErrorVector[i] = fCoordErrorsPtr[i][ipoint];; 424 }; 425 ; 426 return fpTmpCoordErrorVector;; 427 }; 428 ; 429 ; 430 /**; 431 retrieve in a single call a pointer to the coordinate data, value and inverse error for; 432 the given fit point.; 433 To be used only when type is kValueError or kNoError. In the last case the value 1 is returned; 434 for the error.; 435 */; 436 // not threadsafe, to be replaced with never constructs!; 437 // for example: just return std::array or std::vector, there's; 438 // is going to be only minor overhead in c++11.; 439 const double* GetPoint( unsigned int ipoint, double & value, double & invError ) const; 440 {; 441 assert( ipoint < fMaxPoints );; 442 assert( fErrorType == kNoError || fErrorType == kValueError );",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:14591,assert,assert,14591,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,5,['assert'],['assert']
Testability,"ction will return; only when an incoming TERMINATE message is received. void calculate() const; Client-side function that instructs server process to start; asynchronuous (re)calculation of function value. This function; returns immediately. The calculated value can be retrieved; using getVal(). Double_t getValV(const RooArgSet* nset = 0) const; If value needs recalculation and calculation has not beed started; with a call to calculate() start it now. This function blocks; until remote process has finished calculation and returns; remote value. Double_t evaluate() const; Send message to server process to retrieve output value; If error were logged use logEvalError() on remote side; transfer those errors to the local eval error queue. void standby(); Terminate remote server process and return front-end class; to standby mode. Calls to calculate() or evaluate() after; this call will automatically recreated the server process. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTracking = kTRUE); Intercept call to optimize constant term in test statistics; and forward it to object on server side. void setVerbose(Bool_t clientFlag = kTRUE, Bool_t serverFlag = kTRUE); Control verbose messaging related to inter process communication; on both client and server side. void applyNLLWeightSquared(Bool_t flag); Control verbose messaging related to inter process communication; on both client and server side. void doApplyNLLW2(Bool_t flag). void enableOffsetting(Bool_t flag); Control verbose messaging related to inter process communication; on both client and server side. TObject* clone(const char* newname) const; { return new RooRealMPFE(*this,newname); }. void followAsSlave(RooRealMPFE& master); { _updateMaster = &master ; }. » Last changed: Tue Jun 30 14:35:20 2015 » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealMPFE.html:41301,test,test,41301,root/html602/RooRealMPFE.html,https://root.cern,https://root.cern/root/html602/RooRealMPFE.html,1,['test'],['test']
Testability,"ction will return; only when an incoming TERMINATE message is received. void calculate() const; Client-side function that instructs server process to start; asynchronuous (re)calculation of function value. This function; returns immediately. The calculated value can be retrieved; using getVal(). Double_t getValV(const RooArgSet* nset = 0) const; If value needs recalculation and calculation has not beed started; with a call to calculate() start it now. This function blocks; until remote process has finished calculation and returns; remote value. Double_t evaluate() const; Send message to server process to retrieve output value; If error were logged use logEvalError() on remote side; transfer those errors to the local eval error queue. void standby(); Terminate remote server process and return front-end class; to standby mode. Calls to calculate() or evaluate() after; this call will automatically recreated the server process. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTracking = kTRUE); Intercept call to optimize constant term in test statistics; and forward it to object on server side. void setVerbose(Bool_t clientFlag = kTRUE, Bool_t serverFlag = kTRUE); Control verbose messaging related to inter process communication; on both client and server side. void applyNLLWeightSquared(Bool_t flag); Control verbose messaging related to inter process communication; on both client and server side. void doApplyNLLW2(Bool_t flag). void enableOffsetting(Bool_t flag); Control verbose messaging related to inter process communication; on both client and server side. TObject* clone(const char* newname) const; { return new RooRealMPFE(*this,newname); }. void followAsSlave(RooRealMPFE& master); { _updateMaster = &master ; }. » Last changed: Tue Mar 10 17:18:47 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealMPFE.html:39413,test,test,39413,root/html534/RooRealMPFE.html,https://root.cern,https://root.cern/root/html534/RooRealMPFE.html,1,['test'],['test']
Testability,ctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecompChol.cxx;  TDecompLU.cxx;  TDecompQRH.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:49084,test,testStatFunc,49084,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testStatFunc']
Testability,"ctional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY[fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY1[fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_tfFixRological value of correlation coefficient, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaXlogical value of sigma x parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaYlogical value of sigma y parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSxlogical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixSxylogical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit).; Bool_tfFixSylogical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_tfFixTxlogical value of t p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:16273,log,logical,16273,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability,"ctions Here: a background exponential and a crystalball function Parameters can be set: ;  ;  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ;  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ;  FittingDemo.C;   Example for fitting signal/background. ;  ;  graph2dfit.C;   Fitting a TGraph2D ;  ;  Ifit.C;   Example of a program to fit non-equidistant data points ;  ;  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ;  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ;  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ;  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ;  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ;  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ;  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ;  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ;  NumericalMinimization.py;  ;  qa2.C;   Test generation of random numbers distributed according to a function defined by t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html:3783,benchmark,benchmark,3783,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,1,['benchmark'],['benchmark']
Testability,"ctions inherited from TStopwatch; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  ; TString SecToText (Double_t, Bool_t) const;  pretty string output ;  . Private Attributes; Bool_t fColourfulOutput;  flag for use of colors ;  ; MsgLogger * fLogger;  ! the output logger ;  ; Int_t fNcounts;  reference number of ""counts"" ;  ; Bool_t fOutputToFile;  ; TString fPrefix;  prefix for outputs ;  ; Int_t fPreviousProgress;  ; TString fPreviousTimeEstimate;  ; Int_t fProgressBarStringLength;  . Static Private Attributes; static const TString fgClassName = ""Timer"";  used for output ;  ; static const Int_t fgNbins = 16;  number of bins in progress bar ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:12134,log,logger,12134,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['log'],['logger']
Testability,"ctions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TProofProgressLog Class ReferenceGUI » Session Viewer. ; Dialog used to display Proof session logs from the Proof progress dialog. ; It uses TProofMgr::GetSessionLogs() mechanism internally ; Definition at line 31 of file TProofProgressLog.h. Public Member Functions;  TProofProgressLog (const char *url=nullptr, Int_t sessionidx=0, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  TProofProgressLog (TProofProgressDialog *d, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  ~TProofProgressLog () override;  Destructor. ;  ; void AddBuffer (const char *buffer);  Add text to the window. ;  ; void BuildLogList (Bool_t create=kFALSE);  Build the list of workers. ;  ; void Clear (Option_t *=nullptr) override;  Clear log window. ;  ; void CloseWindow () override;  Handle close button or when closed via window manager action. ;  ; void DoLog (Bool_t grep=kFALSE);  Display logs. ;  ; TClass * IsA () const override;  ; void LoadBuffer (const char *buffer);  Load a text buffer in the window. ;  ; void LoadFile (const char *file);  Load a file in the window. ;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame, if open. ;  ; void NoLineEntry ();  Enable/disable the line number entry. ;  ; void Popup ();  Show log window. ;  ; void Rebuild ();  Rebuild the log info for a new entered session. ;  ; void SaveToFile ();  Save the logs to a file Only the name of the file is taken, no expansion. ;  ; void Select (Int_t id, Bool_t all=kTRUE);  actions of select all/clear all button ;  ; void SetGrepView ();  Sets the view of grep filters according to the value of checkboxes. ;  ; void SetUrl (const char *url);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:1220,log,logs,1220,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['log'],['logs']
Testability,ctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQua,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:45313,test,testSpecFuncBetaI,45313,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testSpecFuncBetaI']
Testability,"ctions:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GoFTest. class ROOT::Math::GoFTest. Function Members (Methods); public:. virtual~GoFTest(); Double_tAndersonDarling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0). private:. Double_tExponentialCDF(Double_t x) const; Double_tGaussianCDF(Double_t x) const; Double_tGetSigmaN(UInt_t N) const; ROOT::Math::GoFTestGoFTest(); ROOT::Math::GoFTestGoFTest(RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GoFTest.html:467,test,testStat,467,root/html528/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GoFTest.html,21,['test'],"['test', 'testStat']"
Testability,"ctions; The class ROOT::Math::Functor is used to wrap in a very simple and convenient way multi-dimensional function objects. It can wrap all the following types: * Any C++ callable object implementing double operator()( const double * ). * A free C function of type double ()(const double * ). * A member function with the correct signature like Foo::Eval(const double * ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval).; The function dimension is required when constructing the functor.; Example of using Functor:; #include ""Math/Functor.h"". class MyFunction {. public:; double operator()(const double *x) const {; return x[0]+x[1];; }. double Eval(const double * x) const { return x[0]+x[1]; }; };. double freeFunction(const double * x ); {; return x[0]+x[1];; }. int main(); {; // test directly calling the function object; MyFunction myf;. // test from a free function pointer; ROOT::Math::Functor f1(&freeFunction,2);. // test from function object; ROOT::Math::Functor f2(myf,2);. // test from a member function; ROOT::Math::Functor f3(&myf,&MyFunction::Eval,2);. double x[] = {1,2};. cout << f1(x) << endl;; cout << f2(x) << endl;; cout << f3(x) << endl;. return 0;; }; 13.7.4.4 Wrapping Multi-dimensional Gradient Functions; The class ROOT::Math::GradFunctor is used to wrap in a very C++ callable object to make gradient functions. It can be constructed in three different way: * From an object implementing both double operator()( const double * ) for the function evaluation and double Derivative(const double *, int icoord) for the partial derivatives. * From an object implementing any member function like Foo::XXX(const double *) for the function evaluation and any member function like Foo::XXX(const double *, int icoord) for the partial derivatives. * From an function object implementing double operator()( const double * ) for the function evaluation and another function object implementing double operator() (const double *, int icoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:697287,test,test,697287,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"ctivation=""relu"")); model.add(Dense(64, activation=""relu"")); model.add(Dense(2, activation=""sigmoid"")); model.compile(loss=""binary_crossentropy"", optimizer=Adam(learning_rate=0.001), weighted_metrics=[""accuracy""]); model.save(""model_higgs.h5""); model.summary(); ; if not os.path.exists(""model_higgs.h5""):; raise FileNotFoundError(""Error creating Keras model file - skip using Keras""); else:; # book PyKeras method only if Keras model could be created; ROOT.Info(""TMVA_Higgs_Classification"", ""Booking Deep Learning keras model""); factory.BookMethod(; loader,; TMVA.Types.kPyKeras,; ""PyKeras"",; H=True,; V=False,; VarTransform=None,; FilenameModel=""model_higgs.h5"",; FilenameTrainedModel=""trained_model_higgs.h5"",; NumEpochs=20,; BatchSize=100,; ); # GpuOptions=""allow_growth=True"",; # ) # needed for RTX NVidia card and to avoid TF allocates all GPU memory; ; ; ## Train Methods; ; # Here we train all the previously booked methods.; ; factory.TrainAllMethods(); ## Test all methods; ; # Now we test and evaluate all methods using the test data set; factory.TestAllMethods(); ; factory.EvaluateAllMethods(); ; # after we get the ROC curve and we display; ; c1 = factory.GetROCCurve(loader); c1.Draw(); # at the end we close the output file which contains the evaluation result of all methods and it can be used by TMVAGUI; # to display additional plots; ; outputFile.Close(); TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)Sets the directory where to locally stage/cache remote files.Definition TFile.cxx:4626; TMVA::DataLoaderDefinition DataLoader.h:50; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::PyMethodBase::PyInitializestatic void PyI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:67819,test,test,67819,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,2,['test'],['test']
Testability,"ctive ; (; T ; self, . RooFit::MsgTopic ; topic, . RooFit::MsgLevel ; level . ). inline . Check if logging is active for given object/topic/RooFit::MsgLevel combination. ; Definition at line 186 of file RooMsgService.h. ◆ log() [1/3]. ostream & RooMsgService::log ; (; const RooAbsArg * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with RooAbsArg object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 419 of file RooMsgService.cxx. ◆ log() [2/3]. ostream & RooMsgService::log ; (; const TObject * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with TObject object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 456 of file RooMsgService.cxx. ◆ log() [3/3]. std::ostream & RooMsgService::log ; (; std::nullptr_t ; , . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; facility, . bool ; forceSkipPrefix = false . ). inline . Definition at line 180 of file RooMsgService.h. ◆ numStreams(). Int_t RooMsgService::numStreams ; (; ); const. inline . Definition at line 163 of file RooMsgService.h. ◆ Print(). void RooMsgService::Print ; (; Option_t * ; options = nullptr); const. overridevirtual . Print configuration of message service. ; If ""v"" option is given also inactive streams are listed ; Reimplemented from TObject.; Definition at line 486 of file RooMsgService.cxx. ◆ reset(). void RooMsgService::reset ; (; ). Definition at line 113 of file RooMsgService.cxx. ◆ restoreState(). void RooMsgService::restoreState ; (; ). Restore last saved state of message service. ; Definition at line 366 of file RooMsgService.cxx. ◆ saveState(). void RooMsgService::saveState ; (; ). Save current state of message service. ; Definition at line 356 of file RooMsgService.cxx. ◆ setGlobalKillBelow().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:20677,log,log,20677,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['log'],['log']
Testability,ctor ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manua,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:139575,log,log,139575,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['log'],['log']
Testability,"ctor and destructor - void Begin(TTree tree) - void SlaveBegin(TTree tree) - void Init(TTree *tree) - Bool_t Notify() - Bool_t Process(Long64_t entry) - void Terminate() - void SlaveTerminate(); The class selector derives from TSelector. The generated code in selector.C includes empty functions defined above.; To use this function:. connect your Tree file (eg: TFile f(""myfile.root"");); T->MakeSelector(""myselect"");. where T is the name of the Tree in file myfile.root and myselect.h, myselect.C the name of the files created by this function. In a ROOT session, you can do:; root > T->Process(""myselect.C""); Histogram Libraries; TH1. Fix a bug in using the buffer with weights different than one; Remove the kCanRebin bit, that it was not used anymore. Its functionality is replaced by the TH1::SetCanExtend function. TGraph. TGraph::GetHistogram() was resetting the TimeDisplay attribute of axis. The problem was reported here.; Change TGraph::ComputeRange: in case of log scale the minimum along X and Y axis are now set to the lowest positive values of the graph. Previously a % of the maximum was used which may hide some points like in the following example; {; TGraph * gr = new TGraph(10);; for (int i = 0;i<10;i++) gr->SetPoint(i,i,TMath::Exp(-10.0*i));; for (int i = 5;i<10;i++) gr->SetPoint(i,i,0.);; gr->Draw(""apl"");; gr->SetMarkerStyle(20);; gPad->SetLogy(true);; }; The problem was reported here. TGraph2D; Add a new implementation for Delauney interpolation using the triangle code from Jonathan Shewchuk, see [[ http://www.cs.cmu.edu/~quake/triangle.html ]]. A new class for Delauney triangulator and interpolation has been added in the MathCore library ( ROOT::Math::Delauney2D ).; Fitting. Improve thread safety of TH1::Fit by making static member of TVirtualFitter and TMinuitMinimizer thread local. This fixes ROOT-7791.; Fix some bugs in TF1NormSum (to fit normalized sum of functions) and in TF1Convolution; Add a new histogram fitting option, WIDTH to fit directly density. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:12283,log,log,12283,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['log'],['log']
Testability,"ctor from a HypoTestInverterResult class; name and title are taken from the result class. HypoTestInverterPlot(const char* name, const char* title, RooStats::HypoTestInverterResult* results); constructor with name and title from a HypoTestInverterResult class. TGraphErrors* MakePlot(Option_t* opt = """"); Make the plot of the result of the scan; using the observed data; By default plot CLs or CLsb depending if the flag UseCLs is set. If Option = ""CLb"" return CLb plot; = ""CLs+b"" return CLs+b plot independently of the flag; = ""CLs"" return CLs plot independently of the flag. TMultiGraph* MakeExpectedPlot(double sig1 = 1, double sig2 = 2); Make the expected plot and the bands; nsig1 and nsig2 indicates the n-sigma value for the bands; if nsig1 = 0 no band is drawn (only expected value); if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also drawn; The first band is drawn in green while the second in yellow; THe return result is a TMultiGraph object. ~HypoTestInverterPlot(); destructor. void Draw(Option_t* opt = """"); Draw the result in the current canvas; Possible options:; SAME : draw in the current axis; OBS : draw only the observed plot; EXP : draw only the expected plot. CLB : draw also the CLB; 2CL : drow both clsplusb and cls. default draw observed + expected with 1 and 2 sigma bands. SamplingDistPlot * MakeTestStatPlot(int index, int type = 0, int nbins = 100); plot the test statistic distributions; type =0 null and alt; type = 1 only null (S+B); type = 2 only alt (B). HypoTestInverterPlot(HypoTestInverterResult* results ); constructor. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverterPlot.h 39928 2011-06-24 08:18:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterPlot.html:7590,test,test,7590,root/html532/RooStats__HypoTestInverterPlot.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterPlot.html,1,['test'],['test']
Testability,"ctor from a HypoTestInverterResult class; name and title are taken from the result class. HypoTestInverterPlot(const char* name, const char* title, RooStats::HypoTestInverterResult* results); constructor with name and title from a HypoTestInverterResult class. TGraphErrors* MakePlot(Option_t* opt = """"); Make the plot of the result of the scan; using the observed data; By default plot CLs or CLsb depending if the flag UseCLs is set. If Option = ""CLb"" return CLb plot; = ""CLs+b"" return CLs+b plot independently of the flag; = ""CLs"" return CLs plot independently of the flag. TMultiGraph* MakeExpectedPlot(double sig1 = 1, double sig2 = 2); Make the expected plot and the bands; nsig1 and nsig2 indicates the n-sigma value for the bands; if nsig1 = 0 no band is drawn (only expected value); if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also drawn; The first band is drawn in green while the second in yellow; THe return result is a TMultiGraph object. ~HypoTestInverterPlot(); destructor. void Draw(Option_t* opt = """"); Draw the result in the current canvas; Possible options:; SAME : draw in the current axis; OBS : draw only the observed plot; EXP : draw only the expected plot. CLB : draw also the CLB; 2CL : drow both clsplusb and cls. default draw observed + expected with 1 and 2 sigma bands. SamplingDistPlot * MakeTestStatPlot(int index, int type = 0, int nbins = 100); plot the test statistic distributions; type =0 null and alt; type = 1 only null (S+B); type = 2 only alt (B). HypoTestInverterPlot(HypoTestInverterResult* results ); constructor. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverterPlot.h 39934 2011-06-24 09:15:34Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterPlot.html:7590,test,test,7590,root/html530/RooStats__HypoTestInverterPlot.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterPlot.html,1,['test'],['test']
Testability,"ctor from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. private:. TMVA::SeparationBase*fSepTypeseparation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTree(); Default constructor for streamer, user should not use it. PDEFoamDecisionTree(const TString& , TMVA::SeparationBase* sepType, UInt_t cls); Parameters:. - Name - name of the foam. - sepType - separation type used for the cell splitting (will be; deleted in the destructor). - cls - class to consider as signal when calcualting the purity. PDEFoamDecisionTree(const TMVA::PDEFoamDecisionTree& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). ~PDEFoamDecisionTree(); Destructor; deletes fSepType. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to the decision tree logic. The separation; set via the 'sepType' option in the constructor. The optimal division point for eventual future cell division is; determined/recorded. Note that links to parents and initial; volume = 1/2 parent has to be already defined prior to calling; this routine. Note, that according to the decision tree logic, a cell is only; split, if the number of (unweighted) events in each dautghter; cell is greater than fNmin. » Author: Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id: PDEFoamDecisionTree.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamDecisionTree.html:13248,log,logic,13248,root/html530/TMVA__PDEFoamDecisionTree.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamDecisionTree.html,2,['log'],['logic']
Testability,"ctor& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltPOI; RooStats::ProfileLikelihoodTestStatfAltProfile; RooStats::ProfileLikelihoodTestStatfNullProfile; Bool_tfSubtractMLE; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RatioOfProfiledLikelihoodsTestStat(); Proof constructor. Don't use. RatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0). Calculates the ratio of profiled likelihoods. 	 By default the calculation is:. 	 Lambda(mu_alt , conditional MLE for alt nuisance); 	log --------------------------------------------; 	 Lambda(mu_null , conditional MLE for null nuisance). 	where Lambda is the profile likeihood ratio, so the; 	MLE for the null and alternate are subtracted off. 	If SetSubtractMLE(false) then it calculates:. 	 L(mu_alt , conditional MLE for alt nuisance); 	log --------------------------------------------; 	 L(mu_null , conditional MLE for null nuisance). 	The values of the parameters of interest for the alternative; 	hypothesis are taken at the time of the construction.; 	If empty, it treats all free parameters as nuisance parameters. 	The value of the parameters of interest for the null hypotheses; 	are given at each call of Evaluate(data,nullPOI). ~RatioOfProfiledLikelihoodsTestStat(void). Double_t ProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf). Double_t Evaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest). void SetAlwaysReuseNLL(Bool_t flag); { fgAlwaysReuseNll = flag ; }. void SetReuseNLL(Bool_t flag). void SetMinimizer(const char* minimizer). void SetStrategy(Int_t strategy). void SetTolerance(Double_t tol). void SetPrintLevel(Int_t printLevel). const TString GetVarName() const. void SetSubtractMLE(bool subtract); const bool PValueIsRightTail(void) { return false; } // overwrites default. {fSubtractMLE = subtract;}. » Last chang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__RatioOfProfiledLikelihoodsTestStat.html:2565,log,log,2565,root/html532/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__RatioOfProfiledLikelihoodsTestStat.html,1,['log'],['log']
Testability,"ctor& v2,; 253 ForeignVector& v3 ) const {; 254 v1 = ForeignVector ( fM[kXX], fM[kYX], fM[kZX] );; 255 v2 = ForeignVector ( fM[kXY], fM[kYY], fM[kZY] );; 256 v3 = ForeignVector ( fM[kXZ], fM[kYZ], fM[kZZ] );; 257 }; 258 ; 259 /**; 260 Set the 9 matrix components given an iterator to the start of; 261 the desired data, and another to the end (9 past start).; 262 */; 263 template<class IT>; 264 void SetComponents(IT begin, IT end) {; 265 for (int i = 0; i <9; ++i) {; 266 fM[i] = *begin;; 267 ++begin;; 268 }; 269 (void)end;; 270 assert (end==begin);; 271 }; 272 ; 273 /**; 274 Get the 9 matrix components into data specified by an iterator begin; 275 and another to the end of the desired data (9 past start).; 276 */; 277 template<class IT>; 278 void GetComponents(IT begin, IT end) const {; 279 for (int i = 0; i <9; ++i) {; 280 *begin = fM[i];; 281 ++begin;; 282 }; 283 (void)end;; 284 assert (end==begin);; 285 }; 286 ; 287 /**; 288 Get the 9 matrix components into data specified by an iterator begin; 289 */; 290 template<class IT>; 291 void GetComponents(IT begin) const {; 292 std::copy ( fM, fM+9, begin );; 293 }; 294 ; 295 /**; 296 Set components from a linear algebra matrix of size at least 3x3,; 297 which must support operator()(i,j) to obtain elements (0,0) thru (2,2).; 298 Precondition: The matrix is assumed to be orthonormal. NO checking; 299 or re-adjusting is performed.; 300 */; 301 template<class ForeignMatrix>; 302 void; 303 SetRotationMatrix (const ForeignMatrix & m) {; 304 fM[kXX]=m(0,0); fM[kXY]=m(0,1); fM[kXZ]=m(0,2);; 305 fM[kYX]=m(1,0); fM[kYY]=m(1,1); fM[kYZ]=m(1,2);; 306 fM[kZX]=m(2,0); fM[kZY]=m(2,1); fM[kZZ]=m(2,2);; 307 }; 308 ; 309 /**; 310 Get components into a linear algebra matrix of size at least 3x3,; 311 which must support operator()(i,j) for write access to elements; 312 (0,0) thru (2,2).; 313 */; 314 template<class ForeignMatrix>; 315 void; 316 GetRotationMatrix (ForeignMatrix & m) const {; 317 m(0,0)=fM[kXX]; m(0,1)=fM[kXY]; m(0,2)=fM[kXZ];",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2Rotation3D_8h_source.html:9004,assert,assert,9004,doc/master/GenVector_2Rotation3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2Rotation3D_8h_source.html,1,['assert'],['assert']
Testability,"ctor. char * GetPlotInfo(Int_t px, Int_t py); Coords for point on surface under cursor. Bool_t InitGeometry(); Set mesh, normals. void StartPan(Int_t px, Int_t py); User clicks right mouse button (in a pad). void Pan(Int_t px, Int_t py); User's moving mouse cursor, with middle mouse button pressed (for pad).; Calculate 3d shift related to 2d mouse movement. void AddOption(const TString& stringOption); Additional options for surfaces. void ProcessEvent(Int_t event, Int_t px, Int_t py); Remove all profiles/sections. void InitGL() const; Initialize some OpenGL state variables. void DeInitGL() const; Initialize some OpenGL state variables. void SetNormals(); One normal per vertex;; this normal is average of; neighbouring triangles normals. void SetSurfaceColor() const; Set color for surface. void DrawPlot() const; Draw surf/surf1/surf2/surf4. Bool_t InitGeometryCartesian(); Find bin ranges for X and Y axes,; axes ranges for X, Y and Z.; Function returns false, if logarithmic scale for; some axis was requested, but we cannot; find correct range. Bool_t InitGeometryPolar(); Find bin ranges for X and Y axes,; axes ranges for X, Y and Z.; Function returns false, if logarithmic scale for; some axis was requested, but we cannot; find correct range. Bool_t InitGeometryCylindrical(); Find bin ranges for X and Y axes,; axes ranges for X, Y and Z.; Function returns false, if logarithmic scale for; some axis was requested, but we cannot; find correct range. Bool_t InitGeometrySpherical(); Find bin ranges for X and Y axes,; axes ranges for X, Y and Z.; Function returns false, if logarithmic scale for; some axis was requested, but we cannot; find correct range. void DrawProjections() const; Draw projections. void DrawSectionXOZ() const; Draw section X. void DrawSectionYOZ() const; Draw section Y. void DrawSectionXOY() const; Draw section Z. void ClampZ(Double_t& zVal) const; Clamp z value. char * WindowPointTo3DPoint(Int_t px, Int_t py) const; Find 3d coords using mouse cursor coords",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSurfacePainter.html:5292,log,logarithmic,5292,root/html528/TGLSurfacePainter.html,https://root.cern,https://root.cern/root/html528/TGLSurfacePainter.html,6,['log'],['logarithmic']
Testability,"ctor< Bool_t > &mvaTargets);  ;  ROCCurve (const std::vector< Float_t > &mvaValues, const std::vector< Bool_t > &mvaTargets, const std::vector< Float_t > &mvaWeights);  ;  ROCCurve (const std::vector< std::tuple< Float_t, Float_t, Bool_t > > &mvas);  ;  ~ROCCurve ();  destructor ;  ; Double_t GetEffSForEffB (Double_t effB, const UInt_t num_points=41);  Calculate the signal efficiency (sensitivity) for a given background efficiency (sensitivity). ;  ; const std::vector< std::tuple< Float_t, Float_t, Bool_t > > GetMvas () const;  ; TGraph * GetROCCurve (const UInt_t points=100);  Returns a new TGraph containing the ROC curve. ;  ; Double_t GetROCIntegral (const UInt_t points=41);  Calculates the ROC integral (AUC) ;  . Private Member Functions; std::vector< Double_t > ComputeSensitivity (const UInt_t num_points);  ; std::vector< Double_t > ComputeSpecificity (const UInt_t num_points);  ; MsgLogger & Log () const;  . Private Attributes; TGraph * fGraph;  ; MsgLogger * fLogger;  ! message logger ;  ; std::vector< std::tuple< Float_t, Float_t, Bool_t > > fMva;  . #include <TMVA/ROCCurve.h>; Constructor & Destructor Documentation. ◆ ROCCurve() [1/5]. TMVA::ROCCurve::ROCCurve ; (; const std::vector< std::tuple< Float_t, Float_t, Bool_t > > & ; mvas). Definition at line 45 of file ROCCurve.cxx. ◆ ROCCurve() [2/5]. TMVA::ROCCurve::ROCCurve ; (; const std::vector< Float_t > & ; mvaValues, . const std::vector< Bool_t > & ; mvaTargets, . const std::vector< Float_t > & ; mvaWeights . ). Definition at line 53 of file ROCCurve.cxx. ◆ ROCCurve() [3/5]. TMVA::ROCCurve::ROCCurve ; (; const std::vector< Float_t > & ; mvaValues, . const std::vector< Bool_t > & ; mvaTargets . ). Definition at line 70 of file ROCCurve.cxx. ◆ ROCCurve() [4/5]. TMVA::ROCCurve::ROCCurve ; (; const std::vector< Float_t > & ; mvaSignal, . const std::vector< Float_t > & ; mvaBackground, . const std::vector< Float_t > & ; mvaSignalWeights, . const std::vector< Float_t > & ; mvaBackgroundWeights . ). Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html:1715,log,logger,1715,doc/master/classTMVA_1_1ROCCurve.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html,1,['log'],['logger']
Testability,"ctor< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::VariableTransformBase; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfCharAndInt fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAndInt fPut;  put variables/targets/spectators ;  ; TMVAVersion_t fTMVAVersion;  ; Event * fTransformedEvent;  holds the current transformed event ;  . #include <TMVA/VariableDecorrTransform.h>. Inheritance diagram for TMVA::VariableDecorrTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ VariableDecorrTransform(). TMVA::VariableDecorrTransform::VariableDecorrTransform ; (; DataSetInfo & ; dsi). constructor ; Definition at line 57 of file VariableDecorrTransform.cxx. ◆ ~VariableDecorrTransform(). TMVA::VariableDecorrTransform::~VariableDecorrTransform ; (; void ; ). virtual . destructor ; Definition at line 65 of file VariableDecorrTransform.cxx. Member Function Documentation. ◆ AttachXMLTo(). void TMVA::VariableDecorrTransform::AttachXMLTo ; (; void * ; parent). virtual . node attachment to p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableDecorrTransform.html:14820,log,logger,14820,doc/master/classTMVA_1_1VariableDecorrTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableDecorrTransform.html,1,['log'],['logger']
Testability,"ctor< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::VariableTransformBase; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfCharAndInt fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAndInt fPut;  put variables/targets/spectators ;  ; TMVAVersion_t fTMVAVersion;  ; Event * fTransformedEvent;  holds the current transformed event ;  . #include <TMVA/VariableGaussTransform.h>. Inheritance diagram for TMVA::VariableGaussTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ VariableGaussTransform(). TMVA::VariableGaussTransform::VariableGaussTransform ; (; DataSetInfo & ; dsi, . TString ; strcor = """" . ). constructor can only be applied one after the other when they are created. ; But in order to determine the Gauss transformation ; Definition at line 62 of file VariableGaussTransform.cxx. ◆ ~VariableGaussTransform(). TMVA::VariableGaussTransform::~VariableGaussTransform ; (; void ; ). virtual . destructor ; Definition at line 77 of file VariableGaussTransform.cxx. Member Function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableGaussTransform.html:14964,log,logger,14964,doc/master/classTMVA_1_1VariableGaussTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableGaussTransform.html,1,['log'],['logger']
Testability,"ctor< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::VariableTransformBase; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfCharAndInt fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAndInt fPut;  put variables/targets/spectators ;  ; TMVAVersion_t fTMVAVersion;  ; Event * fTransformedEvent;  holds the current transformed event ;  . #include <TMVA/VariableIdentityTransform.h>. Inheritance diagram for TMVA::VariableIdentityTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ VariableIdentityTransform(). TMVA::VariableIdentityTransform::VariableIdentityTransform ; (; DataSetInfo & ; dsi). constructor ; Definition at line 54 of file VariableIdentityTransform.cxx. ◆ ~VariableIdentityTransform(). virtual TMVA::VariableIdentityTransform::~VariableIdentityTransform ; (; void ; ). inlinevirtual . Definition at line 50 of file VariableIdentityTransform.h. Member Function Documentation. ◆ AttachXMLTo(). void TMVA::VariableIdentityTransform::AttachXMLTo ; (; void * ; parent). virtual .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html:14331,log,logger,14331,doc/master/classTMVA_1_1VariableIdentityTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html,1,['log'],['logger']
Testability,"ctor< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::VariableTransformBase; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfCharAndInt fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAndInt fPut;  put variables/targets/spectators ;  ; TMVAVersion_t fTMVAVersion;  ; Event * fTransformedEvent;  holds the current transformed event ;  . #include <TMVA/VariableNormalizeTransform.h>. Inheritance diagram for TMVA::VariableNormalizeTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ FloatVector. typedef std::vector<Float_t> TMVA::VariableNormalizeTransform::FloatVector. Definition at line 52 of file VariableNormalizeTransform.h. ◆ VectorOfFloatVectors. typedef std::vector< FloatVector > TMVA::VariableNormalizeTransform::VectorOfFloatVectors. Definition at line 53 of file VariableNormalizeTransform.h. Constructor & Destructor Documentation. ◆ VariableNormalizeTransform(). TMVA::VariableNormalizeTransform::VariableNormalizeTransform ; (; DataSetInfo & ; dsi). constructor ; Definition at line 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html:15024,log,logger,15024,doc/master/classTMVA_1_1VariableNormalizeTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html,1,['log'],['logger']
Testability,"ctor< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::VariableTransformBase; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfCharAndInt fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAndInt fPut;  put variables/targets/spectators ;  ; TMVAVersion_t fTMVAVersion;  ; Event * fTransformedEvent;  holds the current transformed event ;  . #include <TMVA/VariablePCATransform.h>. Inheritance diagram for TMVA::VariablePCATransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ VariablePCATransform(). TMVA::VariablePCATransform::VariablePCATransform ; (; DataSetInfo & ; dsi). constructor ; Definition at line 59 of file VariablePCATransform.cxx. ◆ ~VariablePCATransform(). TMVA::VariablePCATransform::~VariablePCATransform ; (; void ; ). virtual . destructor ; Definition at line 67 of file VariablePCATransform.cxx. Member Function Documentation. ◆ AttachXMLTo(). void TMVA::VariablePCATransform::AttachXMLTo ; (; void * ; parent). virtual . create XML description of PCA transformation ; Implem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html:15701,log,logger,15701,doc/master/classTMVA_1_1VariablePCATransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html,1,['log'],['logger']
Testability,"ctor< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::VariableTransformBase; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfCharAndInt fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAndInt fPut;  put variables/targets/spectators ;  ; TMVAVersion_t fTMVAVersion;  ; Event * fTransformedEvent;  holds the current transformed event ;  . #include <TMVA/VariableRearrangeTransform.h>. Inheritance diagram for TMVA::VariableRearrangeTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ FloatVector. typedef std::vector<Float_t> TMVA::VariableRearrangeTransform::FloatVector. Definition at line 47 of file VariableRearrangeTransform.h. Constructor & Destructor Documentation. ◆ VariableRearrangeTransform(). TMVA::VariableRearrangeTransform::VariableRearrangeTransform ; (; DataSetInfo & ; dsi). constructor ; Definition at line 46 of file VariableRearrangeTransform.cxx. ◆ ~VariableRearrangeTransform(). TMVA::VariableRearrangeTransform::~VariableRearrangeTransform ; (; void ; ). virtual . Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableRearrangeTransform.html:14217,log,logger,14217,doc/master/classTMVA_1_1VariableRearrangeTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableRearrangeTransform.html,1,['log'],['logger']
Testability,"ctor<Double_t>&, vector<Double_t>&); Double_tNormHist(TH1* theHist, Double_t norm = 1.0); Double_tNormVariable(Double_t x, Double_t xmin, Double_t xmax); vector<Int_t>*ParseANNOptionString(TString theOptions, Int_t nvar, vector<Int_t>* nodes); TList*ParseFormatLine(TString theString, const char* sep = "":""); TH1*projNormTH1F(TTree* theTree, const TString& theVarName, const TString& name, Int_t nbins, Double_t xmin, Double_t xmax, const TString& cut); voidReadAttr(void* node, const char* attrname, TString& value); voidReadFloatArbitraryPrecision(Float_t& val, istream& is); voidReadTMatrixDFromXML(void* node, const char* name, TMatrixD* mat); voidReadTVectorDFromXML(void* node, const char* name, TVectorD* vec); TStringReplaceRegularExpressions(const TString& s, const TString& replace = ""+""); voidROOTVersionMessage(TMVA::MsgLogger& logger); voidScale(vector<Double_t>&, Double_t); voidScale(vector<Float_t>&, Float_t); vector<TString>SplitString(const TString& theOpt, const char separator) const; TStringStringFromDouble(Double_t d); TStringStringFromInt(Long_t i); voidTMVACitation(TMVA::MsgLogger& logger, TMVA::Tools::ECitation citType = kPlainText); voidTMVAVersionMessage(TMVA::MsgLogger& logger); voidTMVAWelcomeMessage(); voidTMVAWelcomeMessage(TMVA::MsgLogger& logger, TMVA::Tools::EWelcomeMessage m = kStandardWelcomeMsg); TMVA::ToolsTools(const TMVA::Tools&); TH2F*TransposeHist(const TH2F&); voidUsefulSortAscending(vector<Double_t>&); voidUsefulSortAscending(vector<std::vector<Double_t> >&, vector<TString>* vs = 0); voidUsefulSortDescending(vector<Double_t>&); voidUsefulSortDescending(vector<std::vector<Double_t> >&, vector<TString>* vs = 0); voidWriteFloatArbitraryPrecision(Float_t val, ostream& os); voidWriteTMatrixDToXML(void* node, const char* name, TMatrixD* mat); voidWriteTVectorDToXML(void* node, const char* name, TVectorD* vec); TXMLEngine&xmlengine(); intxmlenginebuffersize(). private:. Double_tGetYMean_binX(const TH2&, Int_t bin_x); TMVA::ToolsTools(). Data Me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Tools.html:3634,log,logger,3634,root/html534/TMVA__Tools.html,https://root.cern,https://root.cern/root/html534/TMVA__Tools.html,4,['log'],['logger']
Testability,"ctor<const Double_t*> samples, const vector<UInt_t> samplesSizes). Data Members; public:. static ROOT::Math::GoFTest::ETestTypekAD; static ROOT::Math::GoFTest::ETestTypekAD2s; static ROOT::Math::GoFTest::EUserDistributionkCDF; static ROOT::Math::GoFTest::EDistributionkExponential; static ROOT::Math::GoFTest::EDistributionkGaussian; static ROOT::Math::GoFTest::ETestTypekKS; static ROOT::Math::GoFTest::ETestTypekKS2s; static ROOT::Math::GoFTest::EDistributionkLogNormal; static ROOT::Math::GoFTest::EUserDistributionkPDF; static ROOT::Math::GoFTest::EDistributionkUndefined; static ROOT::Math::GoFTest::EDistributionkUserDefined. private:. auto_ptr<ROOT::Math::IGenFunction>fCDF; vector<Double_t>fCombinedSamples; ROOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GoFTest.html:4115,test,tests,4115,root/html602/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GoFTest.html,2,['test'],['tests']
Testability,ctorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implemen,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:9154,test,test,9154,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,5,['test'],['test']
Testability,"ctory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:21598,log,log,21598,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,2,['log'],['log']
Testability,"cture storing these state indices is built and stored in memory. In such case each state automatically gets an index that can be retrieved after any state initialization. These indices can prove to be quite useful for being able to keep track of the navigation history and force certain states. Let's illustrate how this works with a simple example:; Suppose we have a simple geometry with a volume B positioned twice inside a container A. Then A is positioned twice in a top container T. The complete list of logical nodes is: T_1, A_1, A_2, B_1, B_2. On the other hand we will have more states than logical nodes:; /T_1- 1 state at level = 0; /T_1/A_1,/T_1/A_2- 2 states at level = 1; /T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2 - 4 states at level = 2; All these states will get automatic numbers, starting with 0 corresponding to the top-level state and ending with an integer corresponding to Ntotal_states-1. The mapping from a given logical node to a state number is generally not possible, as for the node B_1 that appears as current node for 2 different states. The numbering order of states is therefore not important, but it can be used as in the following lines:. gGeoManager->InitTrack(pt,dir); // anything to initialize a state; Int_t istate = gGeoManager->GetCurrentNodeId(); // in fact state Id; {; //... code changing the current state; }; gGeoManager->CdNode(istate); // forces state's re-initialization; TGeoManager::GetCurrentNodeIdInt_t GetCurrentNodeId() constGet the unique ID of the current node.Definition TGeoManager.cxx:1663; TGeoManager::CdNodevoid CdNode(Int_t nodeid)Change current path to point to the node having this id.Definition TGeoManager.cxx:1655; ptTPaveText * ptDefinition entrylist_figure1.C:7. Current global transformation. This represents the transformation from MARS to the local reference of the current node, being the product of all local mother-daughter transformations in the branch. The global transformation can be referenced or copied:. co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:76752,log,logical,76752,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['log'],['logical']
Testability,"cture storing these state indices is built and stored in memory. In such case each state automatically gets an index that can be retrieved after any state initialization. These indices can prove to be quite useful for being able to keep track of the navigation history and force certain states. Let’s illustrate how this works with a simple example:; Suppose we have a simple geometry with a volume B positioned twice inside a container A. Then A is positioned twice in a top container T. The complete list of logical nodes is: T_1, A_1, A_2, B_1, B_2. On the other hand we will have more states than logical nodes:; /T_1- 1 state at level = 0; /T_1/A_1,/T_1/A_2- 2 states at level = 1; /T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2 - 4 states at level = 2; All these states will get automatic numbers, starting with 0 corresponding to the top-level state and ending with an integer corresponding to Ntotal_states-1. The mapping from a given logical node to a state number is generally not possible, as for the node B_1 that appears as current node for 2 different states. The numbering order of states is therefore not important, but it can be used as in the following lines:. gGeoManager->InitTrack(pt,dir); // anything to initialize a state; Int_t istate = gGeoManager->GetCurrentNodeId(); // in fact state Id; {; //... code changing the current state; }; gGeoManager->CdNode(istate); // forces state's re-initialization. Current global transformation. This represents the transformation from MARS to the local reference of the current node, being the product of all local mother-daughter transformations in the branch. The global transformation can be referenced or copied:. const TGeoHMatrix *global = gGeoManager->GetCurrentMatrix();; TGeoHMatrix *copy = new TGeoHMatrix(*global);. One often needs to perform master-to-local and local-to-master point and vector conversions to get from MARS to the local node coordinates. This can be done by using the global transformation or directly th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:979870,log,logical,979870,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability,"current; information in RooAbsReal function parameters. void optimizeConst(Int_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinuit construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:12627,log,logfile,12627,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,8,['log'],"['logfile', 'logging']"
Testability,"cxx. ◆ AddObject() [1/2]. Int_t TGLScenePad::AddObject ; (; const TBuffer3D & ; buffer, . Bool_t * ; addChildren = nullptr . ). overridevirtual . Add an object to the viewer, using internal physical IDs TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ; Implements TVirtualViewer3D.; Definition at line 329 of file TGLScenePad.cxx. ◆ AddObject() [2/2]. Int_t TGLScenePad::AddObject ; (; UInt_t ; physicalID, . const TBuffer3D & ; buffer, . Bool_t * ; addChildren = nullptr . ). overridevirtual . Add an object to the scene, using an external physical ID TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ; Implements TVirtualViewer3D.; Definition at line 342 of file TGLScenePad.cxx. ◆ AttemptDirectRenderer(). TGLLogicalShape * TGLScenePad::AttemptDirectRenderer ; (; TObject * ; id). protected . Try to construct an appropriate logical-shape sub-class based on id'class, following convention that SomeClassGL is a suitable renderer for class SomeClass. ; Definition at line 778 of file TGLScenePad.cxx. ◆ BeginScene(). void TGLScenePad::BeginScene ; (; ). overridevirtual . Start building of the scene. ; Old contents is dropped, unless smart-refresh is in active. Then the object supporting it are kept in a cache and possibly reused.; TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ; Implements TVirtualViewer3D.; Definition at line 259 of file TGLScenePad.cxx. ◆ BuildComposite(). RootCsg::TBaseMesh * TGLScenePad::BuildComposite ; (; ). protected . Build and return composite shape mesh. ; Definition at line 749 of file TGLScenePad.cxx. ◆ BuildingScene(). Bool_t TGLScenePad::BuildingScene ; (; ); const. inlineoverridevirtual . Implements TVirtualViewer3D.; Definition at line 89 of file TGLScenePad.h. ◆ CanLoopOnPrimitives(). Bool_t TGLScenePad::CanLoopOnPrimitives ; (; ); const. inlineoverridevirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:27007,log,logical-shape,27007,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['log'],['logical-shape']
Testability,cxx. ◆ ~RooDLLSignificanceMCSModule(). RooDLLSignificanceMCSModule::~RooDLLSignificanceMCSModule ; (; ). overridedefault . Member Function Documentation. ◆ Class(). static TClass * RooDLLSignificanceMCSModule::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooDLLSignificanceMCSModule::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooDLLSignificanceMCSModule::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 47 of file RooDLLSignificanceMCSModule.h. ◆ DeclFileName(). static const char * RooDLLSignificanceMCSModule::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 47 of file RooDLLSignificanceMCSModule.h. ◆ finalizeRun(). RooDataSet * RooDLLSignificanceMCSModule::finalizeRun ; (; ). overridevirtual . Return auxiliary dataset with results of delta(-log(L)) calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ; Reimplemented from RooAbsMCStudyModule.; Definition at line 137 of file RooDLLSignificanceMCSModule.cxx. ◆ initializeInstance(). bool RooDLLSignificanceMCSModule::initializeInstance ; (; ). overridevirtual . Initialize module after attachment to RooMCStudy object. ; Reimplemented from RooAbsMCStudyModule.; Definition at line 90 of file RooDLLSignificanceMCSModule.cxx. ◆ initializeRun(). bool RooDLLSignificanceMCSModule::initializeRun ; (; Int_t ; ). overridevirtual . Initialize module at beginning of RooCMStudy run. ; Reimplemented from RooAbsMCStudyModule.; Definition at line 124 of file RooDLLSignificanceMCSModule.cxx. ◆ IsA(). TClass * RooDLLSignificanceMCSModule::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsMCStudyModule.; Definition at line 47 of file RooDLLSignificanceMCSModule.h. ◆ processAfterFit(). bool RooDLLSignificanceMCSModule::pro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html:18146,log,log,18146,doc/master/classRooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html,1,['log'],['log']
Testability,cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.cxx;  mixmax.h;  mixmax_skip_N256.icc;  MixMaxEngine.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  TComplex.cxx;  TDataPointN.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.h;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:46147,test,testBinarySearch,46147,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testBinarySearch']
Testability,cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.cxx;  mixmax.h;  mixmax_skip_N256.icc;  MixMaxEngine.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  TComplex.cxx;  TDataPointN.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.h;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:46170,test,testDistSampler,46170,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testDistSampler']
Testability,cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46633,test,testRootFinder,46633,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testRootFinder']
Testability,cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  Vavi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46654,test,testSampleQuantiles,46654,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testSampleQuantiles']
Testability,cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  V,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46747,test,testSpecFuncErf,46747,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testSpecFuncErf']
Testability,cxx;  TODBCStatement.cxx;  ► oracle;  ► inc;  LinkDef.h;  TOracleResult.h;  TOracleRow.h;  TOracleServer.h;  TOracleStatement.h;  ► src;  TOracleResult.cxx;  TOracleRow.cxx;  TOracleServer.cxx;  TOracleStatement.cxx;  ► pgsql;  ► inc;  LinkDef.h;  TPgSQLResult.h;  TPgSQLRow.h;  TPgSQLServer.h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  LinkDef.h;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.cxx;  TSapDBServer.cxx;  ► sqlite;  ► inc;  LinkDef.h;  TSQLiteResult.h;  TSQLiteRow.h;  TSQLiteServer.h;  TSQLiteStatement.h;  ► src;  TSQLiteResult.cxx;  TSQLiteRow.cxx;  TSQLiteServer.cxx;  TSQLiteStatement.cxx;  ► tmva;  ► pymva;  ► inc;  ► TMVA;  MethodPyAdaBoost.h;  MethodPyGTB.h;  MethodPyKeras.h;  MethodPyRandomForest.h;  PyMethodBase.h;  LinkDef.h;  ► src;  MethodPyAdaBoost.cxx;  MethodPyGTB.cxx;  MethodPyKeras.cxx;  MethodPyRandomForest.cxx;  PyMethodBase.cxx;  ► test;  Classification.C;  testPyKerasClassification.C;  testPyKerasRegression.C;  ► rmva;  ► inc;  ► TMVA;  MethodC50.h;  MethodRSNNS.h;  MethodRSVM.h;  MethodRXGB.h;  RMethodBase.h;  LinkDef.h;  ► src;  MethodC50.cxx;  MethodRSNNS.cxx;  MethodRSVM.cxx;  MethodRXGB.cxx;  RMethodBase.cxx;  ► test;  Classification.C;  ► tmva;  ► inc;  ► TMVA;  ► DNN;  ► Architectures;  ► Cpu;  Blas.h;  CpuBuffer.h;  CpuMatrix.h;  ► Cuda;  CudaBuffers.h;  CudaMatrix.h;  Device.h;  Cpu.h;  Cuda.h;  Reference.h;  DataLoader.h;  Functions.h;  Layer.h;  Minimizers.h;  Net.h;  BDTEventWrapper.h;  BinarySearchTree.h;  BinarySearchTreeNode.h;  BinaryTree.h;  CCPruner.h;  CCTreeWrapper.h;  ClassifierFactory.h;  ClassInfo.h;  Config.h;  Configurable.h;  ConvergenceTest.h;  CostComplexityPruneTool.h;  CrossEntropy.h;  CrossValidation.h;  DataInputHandler.h;  DataLoader.h;  DataSet.h;  DataSetFactory.h;  DataSetInfo.h;  DataSetManager.h;  DecisionTree.h;  DecisionTreeNode.h;  Envelope.h;  Event.h;  ExpectedErrorPruneTool.h,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:87057,test,test,87057,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['test']
Testability,cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vc;  ► examples;  ► buddhabrot;  main.cpp;  main.h;  ► finitediff;  main.cpp;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  testFitPerf.cxx;  ► genvector;  vectorOperation.cxx;  ► mandelbrot;  main.cpp;  main.h;  mandel.cpp;  mandel.h;  ► matrix;  main.cpp;  ► polarcoord;  main.cpp;  ► smatrix;  matrix_op_vec.h;  matrix_util.h;  testKalman.cxx;  testOperations.cxx;  TestTimer.h;  tsc.h;  ► include;  ► Vc;  ► avx;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  sorthelper.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  writemaskedvector.h;  ► common;  aliasingentryhelper.h;  bitscanintrinsics.h;  deinterleave.h;  exponential.h;  fix_clang_emmintrin.h;  iif.h;  interleavedmemory.h;  logarithm.h;  macros.h;  memory.h;  memorybase.h;  memoryfwd.h;  operand.h;  operators.h;  storage.h;  support.h;  trigonometric.h;  types.h;  undomacros.h;  vectortuple.h;  windows_fix_intrin.h;  ► internal;  namespace.h;  ► scalar;  helperimpl.h;  limits.h;  macros.h;  mask.h;  math.h;  types.h;  undomacros.h;  vector.h;  writemaskedvector.h;  ► sse;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  cpuid.h;  global.h;  support.h;  vecto,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:58037,test,testOperations,58037,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testOperations']
Testability,"cy attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of filling the raw tessellation of the object buffer, in the master reference frame. Conversely viewers must always be capable of displaying the object described by this buffer. Scene Rebuilds; It should be understood that AddObject is not an explicit command to the viewer; it may for various reasons decide to ignore it:; It already has the object internally cached .; The object falls outside some 'interest' limits of the viewer camera.; The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition, simply indicating it does not require you to provide further information about this object. You should not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially millions of objects, and only accept those that are of interest at a certain time, caching the relatively small number of CPU/memory costly logical shapes, and retaining/discarding the physical placements as required. The viewer may decide to force the client to rebuild (republish) the scene (via a TPad repaint at present), and thus collect these objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TVirtualViewer3D::AddObjectvirtual I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:9649,log,logical,9649,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['log'],['logical']
Testability,"cy attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of filling the raw tessellation of the object buffer, in the master reference frame. Conversely viewers must always be capable of displaying the object described by this buffer. Scene Rebuilds; It should be understood that AddObject is not an explicit command to the viewer; it may for various reasons decide to ignore it:; It already has the object internally cached .; The object falls outside some 'interest' limits of the viewer camera.; The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition, simply indicating it does not require you to provide further information about this object. You should not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially millions of objects, and only accept those that are of interest at a certain time, caching the relatively small number of CPU/memory costly logical shapes, and retaining/discarding the physical placements as required. The viewer may decide to force the client to rebuild (republish) the scene (via a TPad repaint at present), and thus collect these objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; bool; unsigned int; If you use the f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:7507,log,logical,7507,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['log'],['logical']
Testability,"d * GetDirPtr() constDefinition TSystem.h:416; TSystem::SetObjExtvirtual void SetObjExt(const char *objExt)Set object files extension, should be either .o, .obj, etc.Definition TSystem.cxx:4244; TSystem::SetLinkdefSuffixvirtual void SetLinkdefSuffix(const char *suffix)The 'suffix' will be appended to the name of a script loaded by ACLiC and used to locate any eventual...Definition TSystem.cxx:4227; TSystem::fHelpersTSeqCollection * fHelpersDefinition TSystem.h:321; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::GetListOfStdExceptionHandlersvirtual TSeqCollection * GetListOfStdExceptionHandlers() constDefinition TSystem.h:385; TSystem::pwdconst char * pwd()Definition TSystem.h:424; TSystem::GetBuildDirvirtual const char * GetBuildDir() constReturn the path of the build directory.Definition TSystem.cxx:3915; TSystem::Openlogvirtual void Openlog(const char *name, Int_t options, ELogFacility facility)Open connection to system log daemon.Definition TSystem.cxx:1677; TSystem::GetErrnostatic Int_t GetErrno()Static function returning system error number.Definition TSystem.cxx:276; TSystem::AddIncludePathvirtual void AddIncludePath(const char *includePath)Add a directory to the already set include path.Definition TSystem.cxx:4159; TSystem::Chmodvirtual int Chmod(const char *file, UInt_t mode)Set the file permission bits. Returns -1 in case or error, 0 otherwise.Definition TSystem.cxx:1508; TSystem::GetEffectiveGidvirtual Int_t GetEffectiveGid()Returns the effective group id.Definition TSystem.cxx:1591; TSystem::EAclicModeEAclicModeDefinition TSystem.h:269; TSystem::kDefault@ kDefaultDefinition TSystem.h:269; TSystem::kDebug@ kDebugDefinition TSystem.h:269; TSystem::kOpt@ kOptDefinition TSystem.h:269; TSystem::~TSystemvirtual ~TSystem()Delete the OS interface.Definition TSystem.cxx:139; TSystem::SetDisplayvirtual void SetDisplay()Set DISPLAY environment va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:41003,log,log,41003,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,1,['log'],['log']
Testability,"d = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGTextEntry (const TGWindow *p, TGTextBuffer *text, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a text entry widget. ;  ;  TGTextEntry (const TGWindow *parent=nullptr, const char *text=nullptr, Int_t id=-1);  Simple text entry constructor. ;  ;  TGTextEntry (const TString &contents, const TGWindow *parent, Int_t id=-1);  Simple test entry constructor. ;  ;  ~TGTextEntry () override;  Delete a text entry widget. ;  ; virtual void AppendText (const char *text);  Appends text to the end of text entry, clears the selection and moves the cursor to the end of the line. ;  ; void Backspace ();  Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ;  ; void Clear (Option_t *option="""") override;  Clears up the text entry. ;  ; void CursorLeft (Bool_t mark=kFALSE, Int_t steps=1);  Moves the cursor leftwards one or more characters. ;  ; virtual void CursorOutDown ();  This signal is emitted when cursor is going out of bottom side. ;  ; virtual void CursorOutLeft ();  This signal is emitted when cursor is going out of left side. ;  ; virtual void CursorOutRight ();  This signal is emitted when cursor is going out of right side. ;  ; virtual void CursorOutUp ();  This signal is emitted when cursor is going out of upper side. ;  ; void Cu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:6032,test,test,6032,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['test'],['test']
Testability,"d Net::fetchOutput (const LayerData& lastLayerData, OutputContainer& outputContainer) const; 1292 {; 1293 ModeOutputValues eModeOutput = lastLayerData.outputMode ();; 1294 if (isFlagSet (ModeOutputValues::DIRECT, eModeOutput)); 1295 {; 1296 outputContainer.insert (outputContainer.end (), lastLayerData.valuesBegin (), lastLayerData.valuesEnd ());; 1297 }; 1298 else if (isFlagSet (ModeOutputValues::SIGMOID, eModeOutput) ||; 1299 isFlagSet (ModeOutputValues::SOFTMAX, eModeOutput)); 1300 {; 1301 const auto& prob = lastLayerData.probabilities ();; 1302 outputContainer.insert (outputContainer.end (), prob.begin (), prob.end ()) ;; 1303 }; 1304 else; 1305 assert (false);; 1306 }; 1307 ; 1308 ; 1309 ; 1310 ; 1311 template <typename OutputContainer>; 1312 void Net::fetchOutput (const std::vector<LayerData>& lastLayerPatternData, OutputContainer& outputContainer) const; 1313 {; 1314 for (const LayerData& lastLayerData : lastLayerPatternData); 1315 fetchOutput (lastLayerData, outputContainer);; 1316 }; 1317 ; 1318 ; 1319 ; 1320 template <typename ItWeight>; 1321 std::tuple</*sumError*/double,/*sumWeights*/double> Net::computeError (const Settings& settings,; 1322 std::vector<LayerData>& lastLayerData,; 1323 Batch& batch,; 1324 ItWeight itWeightBegin,; 1325 ItWeight itWeightEnd) const; 1326 {; 1327 typename std::vector<LayerData>::iterator itLayerData = lastLayerData.begin ();; 1328// typename std::vector<LayerData>::iterator itLayerDataEnd = lastLayerData.end ();; 1329 ; 1330 typename std::vector<Pattern>::const_iterator itPattern = batch.begin ();; 1331 typename std::vector<Pattern>::const_iterator itPatternEnd = batch.end ();; 1332 ; 1333 double sumWeights (0.0);; 1334 double sumError (0.0);; 1335 ; 1336// FIXME: check that iteration doesn't go beyond itLayerDataEnd!; 1337 for ( ; itPattern != itPatternEnd; ++itPattern, ++itLayerData); 1338 {; 1339 // compute E and the deltas of the computed output and the true output; 1340 LayerData& layerData = (*itLayerData);; 1341 const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:43226,assert,assert,43226,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['assert'],['assert']
Testability,"d SetOneSided(Bool_t flag = true); LM use default copy constructor and assignment copying the pointers. Is this what we want ?. {fLimitType = (flag ? oneSided : twoSided);}. void SetOneSidedDiscovery(Bool_t flag = true); {fLimitType = (flag ? oneSidedDiscovery : twoSided);}. void SetSigned(Bool_t flag = true); void SetOneSidedDiscovery(Bool_t flag=true) {fOneSidedDiscovery = flag;}. {fSigned = flag;}. bool IsTwoSided() const; { return fLimitType == twoSided; }. bool IsOneSidedDiscovery() const; { return fLimitType == oneSidedDiscovery; }. void SetAlwaysReuseNLL(Bool_t flag). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetLOffset(Bool_t flag = kTRUE); { fLOffset = flag ; }. void SetMinimizer(const char* minimizer); { fMinimizer=minimizer;}. void SetStrategy(Int_t strategy); {fStrategy=strategy;}. void SetTolerance(double tol); {fTolerance=tol;}. void SetPrintLevel(Int_t printlevel); {fPrintLevel=printlevel;}. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. return EvaluateProfileLikelihood(int type, RooAbsData& data, RooArgSet& paramsOfInterest). void EnableDetailedOutput(bool e = true, bool withErrorsAndPulls = false). const RooArgSet* GetDetailedOutput(void); Returns detailed output. The value returned by this function is updated after each call to Evaluate().; The returned RooArgSet contains the following:; <ul>; <li> the minimum nll, fitstatus and convergence quality for each fit </li>; <li> for each fit and for each non-constant parameter, the value, error and pull of the parameter are stored </li>; </ul>. void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void SetVarName(const char* name); { fVarName = name; }. const TString GetVarName() const; {re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ProfileLikelihoodTestStat.html:4286,test,test,4286,root/html534/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__ProfileLikelihoodTestStat.html,1,['test'],['test']
Testability,"d TMVA::Experimental::Classification::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::Experimental::Classification::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file Classification.h. ◆ Test(). void TMVA::Experimental::Classification::Test ; (; ). virtual . Perform test evaluation in all booked methods. ; Definition at line 513 of file Classification.cxx. ◆ TestMethod() [1/2]. void TMVA::Experimental::Classification::TestMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 526 of file Classification.cxx. ◆ TestMethod() [2/2]. void TMVA::Experimental::Classification::TestMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 935 of file Classification.cxx. ◆ Train(). void TMVA::Experimental::Classification::Train ; (; ). virtual . Method to train all booked ml methods. ; Definition at line 324 of file Classification.cxx. ◆ TrainMethod() [1/2]. void TMVA::Experimental::Classification::TrainMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets train an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 337 of file Classification.cxx. ◆ TrainMethod() [2/2]. void TMVA::Experimental::Classification::TrainMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 373 of file Classification.cxx. Member Data Doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:26915,test,test,26915,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['test'],['test']
Testability,"d TProof::Progress ; (; Long64_t ; total, . Long64_t ; processed, . Long64_t ; bytesread, . Float_t ; initTime, . Float_t ; procTime, . Float_t ; evtrti, . Float_t ; mbrti . ). Get query progress information. ; Connect a slot to this signal to track progress. ; Definition at line 9224 of file TProof.cxx. ◆ Progress() [3/3]. void TProof::Progress ; (; Long64_t ; total, . Long64_t ; processed, . Long64_t ; bytesread, . Float_t ; initTime, . Float_t ; procTime, . Float_t ; evtrti, . Float_t ; mbrti, . Int_t ; actw, . Int_t ; tses, . Float_t ; eses . ). Get query progress information. ; Connect a slot to this signal to track progress. ; Definition at line 9246 of file TProof.cxx. ◆ Prompt(). Bool_t TProof::Prompt ; (; const char * ; p). private . Prompt the question 'p' requiring an answer y,Y,n,N Return kTRUE is the answer was y or Y, kFALSE in all other cases. ; Definition at line 7649 of file TProof.cxx. ◆ PutLog(). void TProof::PutLog ; (; TQueryResult * ; qr). Display log of query pq into the log window frame. ; Definition at line 10321 of file TProof.cxx. ◆ QueryResultReady(). void TProof::QueryResultReady ; (; const char * ; ref). Notify availability of a query result. ; Definition at line 9369 of file TProof.cxx. ◆ RecvLogFile(). void TProof::RecvLogFile ; (; TSocket * ; s, . Int_t ; size . ). private . Receive the log file of the slave with socket s. ; Definition at line 6287 of file TProof.cxx. ◆ RedirectWorker(). void TProof::RedirectWorker ; (; TSocket * ; s, . TSlave * ; sl, . Int_t ; output_size . ). private . Redirect output of worker sl to some merger. ; Definition at line 4258 of file TProof.cxx. ◆ RegisterDataSet(). Bool_t TProof::RegisterDataSet ; (; const char * ; dataSetName, . TFileCollection * ; dataSet, . const char * ; optStr = """" . ). virtual . Register the 'dataSet' on the cluster under the current user, group and the given 'dataSetName'. ; If a dataset with the same name already exists the action fails unless 'opts' contains 'O', in which case",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:129387,log,log,129387,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,2,['log'],['log']
Testability,"d TProofServ::SendLogFile ; (; Int_t ; status = 0, . Int_t ; start = -1, . Int_t ; end = -1 . ). virtual . Send log file to master. ; If start > -1 send only bytes in the range from start to end, if end <= start send everything from start. ; Definition at line 2665 of file TProofServ.cxx. ◆ SendParallel(). void TProofServ::SendParallel ; (; Bool_t ; async = kFALSE). Send number of parallel nodes to master or client. ; Definition at line 2780 of file TProofServ.cxx. ◆ SendResults(). Int_t TProofServ::SendResults ; (; TSocket * ; sock, . TList * ; outlist = 0, . TQueryResult * ; pq = 0 . ). private . Sends all objects from the given list to the specified socket. ; Definition at line 4244 of file TProofServ.cxx. ◆ SendStatistics(). void TProofServ::SendStatistics ; (; ). Send statistics of slave server to master or client. ; Definition at line 2760 of file TProofServ.cxx. ◆ SetErrorHandlerFile(). FILE * TProofServ::SetErrorHandlerFile ; (; FILE * ; ferr). static . Set the file stream where to log (default stderr). ; If ferr == 0 the default is restored. Returns current setting. ; Definition at line 5744 of file TProofServ.cxx. ◆ SetIdle(). void TProofServ::SetIdle ; (; Bool_t ; st = kTRUE). private . Change the idle status. ; Definition at line 6827 of file TProofServ.cxx. ◆ SetLastEntry(). void TProofServ::SetLastEntry ; (; Long64_t ; lastentry). static . Set the last entry before exception. ; Definition at line 6912 of file TProofServ.cxx. ◆ SetLastMsg(). void TProofServ::SetLastMsg ; (; const char * ; lastmsg). static . Set the message to be sent back in case of exceptions. ; Definition at line 6904 of file TProofServ.cxx. ◆ SetQueryRunning(). void TProofServ::SetQueryRunning ; (; TProofQueryResult * ; pq). private . Set query in running state. ; Definition at line 3564 of file TProofServ.cxx. ◆ Setup(). Int_t TProofServ::Setup ; (; ). protectedvirtual . Print the ProofServ logo on standard output. ; Return 0 on success, -1 on failure ; Reimplemented in TProofServLit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:54165,log,log,54165,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['log'],['log']
Testability,"d When all bins are included, the number of entries in the projection is set to the number of entries of the 2-D histogram, otherwise the number of entries is incremented by 1 for all non empty cells.; if option ""d"" is specified, the profile is drawn in the current pad.; if option ""o"" original axis range of the target axes will be kept, but only bins inside the selected range will be filled.; The option can also be used to specify the projected profile error type. Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; Using a TCutG object, it is possible to select a sub-range of a 2-D histogram. One must create a graphical cut (mouse or C++) and specify the name of the cut between [] in the option. For example, with a TCutG named ""cutg"", one can call: myhist->ProfileX("" "",firstybin,lastybin,""[cutg]""); To invert the cut, it is enough to put a ""-"" in front of its name: myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]""); It is possible to apply several cuts ("","" means logical AND): myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");; NOTE that if a TProfile named ""name"" exists in the current directory or pad with a compatible axis the profile is reset and filled again with the projected contents of the TH2. In the case of axis incompatibility an error is reported and a NULL pointer is returned.; NOTE that the X axis attributes of the TH2 are copied to the X axis of the profile.; NOTE that the default under- / overflow behavior differs from what ProjectionX does! Profiles take the bin center into account, so here the under- and overflow bins are ignored by default.; NOTE that the return profile histogram is computed using the Y bin center values instead of the real Y values which are used to fill the 2d histogram. Therefore the obtained profile is just an approximation of the correct profile histogram that would be obtained when filling it directly with the original data (see ROOT-7770) ; Definition at line 2109 of file TH2.cxx. ◆ P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:93913,log,logical,93913,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['log'],['logical']
Testability,"d b IB looses precision use complement function; 176 if (z > 0.9 && n > 1 && m > 1) return 1.- fdistribution_cdf(x,n,m,x0);; 177 ; 178 // for the complement use the fact that IB(x,a,b) = 1. - IB(1-x,b,a); 179 return ROOT::Math::inc_beta(m/(m + n*(x-x0)), .5*m, .5*n);; 180 }; 181 ; 182 ; 183 double fdistribution_cdf(double x, double n, double m, double x0); 184 {; 185 // f distribution is defined only for both n and m > 0; 186 if (n < 0 || m < 0); 187 return std::numeric_limits<double>::quiet_NaN();; 188 ; 189 double z = n*(x-x0)/(m + n*(x-x0));; 190 // fox z->1 and large a and b IB looses precision use complement function; 191 if (z > 0.9 && n > 1 && m > 1); 192 return 1. - fdistribution_cdf_c(x,n,m,x0);; 193 ; 194 return ROOT::Math::inc_beta(z, .5*n, .5*m);; 195 }; 196 ; 197 ; 198 double gamma_cdf_c(double x, double alpha, double theta, double x0); 199 {; 200 return ROOT::Math::inc_gamma_c(alpha, (x-x0)/theta);; 201 }; 202 ; 203 ; 204 double gamma_cdf(double x, double alpha, double theta, double x0); 205 {; 206 return ROOT::Math::inc_gamma(alpha, (x-x0)/theta);; 207 }; 208 ; 209 ; 210 double lognormal_cdf_c(double x, double m, double s, double x0); 211 {; 212 double z = (std::log((x-x0))-m)/(s*kSqrt2);; 213 if (z > 1.) return 0.5*ROOT::Math::erfc(z);; 214 else return 0.5*(1.0 - ROOT::Math::erf(z));; 215 }; 216 ; 217 ; 218 double lognormal_cdf(double x, double m, double s, double x0); 219 {; 220 double z = (std::log((x-x0))-m)/(s*kSqrt2);; 221 if (z < -1.) return 0.5*ROOT::Math::erfc(-z);; 222 else return 0.5*(1.0 + ROOT::Math::erf(z));; 223 }; 224 ; 225 ; 226 double normal_cdf_c(double x, double sigma, double x0); 227 {; 228 double z = (x-x0)/(sigma*kSqrt2);; 229 if (z > 1.) return 0.5*ROOT::Math::erfc(z);; 230 else return 0.5*(1.-ROOT::Math::erf(z));; 231 }; 232 ; 233 ; 234 double normal_cdf(double x, double sigma, double x0); 235 {; 236 double z = (x-x0)/(sigma*kSqrt2);; 237 if (z < -1.) return 0.5*ROOT::Math::erfc(-z);; 238 else return 0.5*(1.0 + ROOT::Math::erf(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html:6869,log,log,6869,doc/master/ProbFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html,1,['log'],['log']
Testability,"d backgroundDefinition DataLoader.cxx:632; TMVA::DataLoader::AddBackgroundTreevoid AddBackgroundTree(TTree *background, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)number of signal events (used to compute significance)Definition DataLoader.cxx:402; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::Factory::TrainAllMethodsvoid TrainAllMethods()Iterates through all booked methods and calls training.Definition Factory.cxx:1114; TMVA::Factory::BookMethodMethodBase * BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")Book a classifier or regression method.Definition Factory.cxx:352; TMVA::Factory::TestAllMethodsvoid TestAllMethods()Evaluates all booked methods on the testing data and adds the output to the Results in the corresponi...Definition Factory.cxx:1271; TMVA::Factory::EvaluateAllMethodsvoid EvaluateAllMethods(void)Iterates over all MVAs that have been booked, and calls their evaluation methods.Definition Factory.cxx:1376; TMVA::GeneticFitterFitter using a Genetic Algorithm.Definition GeneticFitter.h:44; TMVA::IFitterTargetInterface for a fitter 'target'.Definition IFitterTarget.h:44; TMVA::IntervalThe TMVA::Interval Class.Definition Interval.h:61; TMVA::ReaderThe Reader class serves to use the MVAs in a specific analysis context.Definition Reader.h:64; TMVA::Reader::EvaluateMVADouble_t EvaluateMVA(const std::vector< Float_t > &, const TString &methodTag, Double_t aux=0)Evaluate a std::vector<float> of input data for a given method The parameter aux is obligatory for th...Definition Reader.cxx:468; TMVA::Reader::BookMVAIMethod * BookMVA(const TString &methodTag, const TString &weightfile)read method name from weight fileDefini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:50355,test,testing,50355,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,1,['test'],['testing']
Testability,"d backgroundDefinition DataLoader.cxx:632; TMVA::DataLoader::AddBackgroundTreevoid AddBackgroundTree(TTree *background, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)number of signal events (used to compute significance)Definition DataLoader.cxx:402; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::Factory::TrainAllMethodsvoid TrainAllMethods()Iterates through all booked methods and calls training.Definition Factory.cxx:1114; TMVA::Factory::BookMethodMethodBase * BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")Book a classifier or regression method.Definition Factory.cxx:352; TMVA::Factory::TestAllMethodsvoid TestAllMethods()Evaluates all booked methods on the testing data and adds the output to the Results in the corresponi...Definition Factory.cxx:1271; TMVA::Factory::EvaluateAllMethodsvoid EvaluateAllMethods(void)Iterates over all MVAs that have been booked, and calls their evaluation methods.Definition Factory.cxx:1376; TMVA::MethodBaseVirtual base Class for all MVA method.Definition MethodBase.h:111; TMVA::MethodCategoryClass for categorizing the phase space.Definition MethodCategory.h:58; TMVA::MethodCategory::AddMethodTMVA::IMethod * AddMethod(const TCut &, const TString &theVariables, Types::EMVA theMethod, const TString &theTitle, const TString &theOptions)adds sub-classifier for a categoryDefinition MethodCategory.cxx:138; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Types::kFisher@ kFisherDefinition Types.h:82; TMVA::Types::kCategory@ kCategoryDefinition Types.h:97; TMVA::Types::kLikelihood@ kLikelihoodDefinition Types.h:79; TNamed::GetNameconst char * GetName() const overrideReturns n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:36551,test,testing,36551,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['testing']
Testability,"d but not operator; 73// delete, we can still use it to detect the cases where the destructor was called.; 74 ; 75ATTRIBUTE_NO_SANITIZE_ADDRESS; 76bool DeleteChangesMemoryImpl(); 77{; 78 static constexpr UInt_t kGoldenUUID = 0x00000021;; 79 static constexpr UInt_t kGoldenbits = 0x03000000;; 80 ; 81 TObject *o = new TObject;; 82 o->SetUniqueID(kGoldenUUID);; 83 UInt_t *o_fuid = &(o->fUniqueID);; 84 UInt_t *o_fbits = &(o->fBits);; 85 ; 86 if (*o_fuid != kGoldenUUID) {; 87 Error(""CheckingDeleteSideEffects"",; 88 ""fUniqueID is not as expected, we got 0x%.8x instead of 0x%.8x"",; 89 *o_fuid, kGoldenUUID);; 90 }; 91 if (*o_fbits != kGoldenbits) {; 92 Error(""CheckingDeleteSideEffects"",; 93 ""fBits is not as expected, we got 0x%.8x instead of 0x%.8x"",; 94 *o_fbits, kGoldenbits);; 95 }; 96 if (gDebug >= 9) {; 97 unsigned char *oc = reinterpret_cast<unsigned char *>(o); // for address calculations; 98 unsigned char references[sizeof(TObject)];; 99 memcpy(references, oc, sizeof(TObject));; 100 ; 101 // The effective part of this code (the else statement is just that without; 102 // any of the debug statement); 103 delete o;; 104 ; 105 // Not using the error logger, as there routine is meant to be called; 106 // during library initialization/loading.; 107 fprintf(stderr,; 108 ""DEBUG: Checking before and after delete the content of a TObject with uniqueID 0x21\n"");; 109 for(size_t i = 0; i < sizeof(TObject); i += 4) {; 110 fprintf(stderr, ""DEBUG: 0x%.8x vs 0x%.8x\n"", *(int*)(references +i), *(int*)(oc + i));; 111 }; 112 } else; 113 delete o; // the 'if' part is that surrounded by the debug code.; 114 ; 115 // Intentionally accessing the deleted memory to check whether it has been changed as; 116 // a consequence (side effect) of executing operator delete. If there no change, we; 117 // can guess this is always the case and we can rely on the changes to fBits made; 118 // by ~TObject to detect use-after-delete error (and print a message rather than; 119 // stop the program with a seg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:3644,log,logger,3644,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['log'],['logger']
Testability,"d colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t wid, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t wid, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; void QueryPointer (Int_t &x, Int_t &y) override;  Returns the pointer position. ;  ; void QueryPointer (Window_t wid, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t wid) override;  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t wid) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; void ReconfigureDisplay ();  ; void RemoveWindow (ULong_t qwid) override;  Removes the created by Qt window ""qwid"". ;  ; void ReparentChild (Window_t wid, Window_t pid, Int_t x, Int_t y);  ; void ReparentTopLevel (Window_t wid, Window_t pid, Int_t x, Int_t y);  ; void ReparentWindow (Window_t wid, Window_t pid, Int_t x, Int_t y) override;  If the specified window is mapped, ReparentWin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:20191,log,logically,20191,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,2,['log'],['logically']
Testability,"d contain an; identity matrix. This is set by default, and can be reset using SetLocalMasterIdentity() function.; Logical & Physical Objects; There are two cases of object addition:. Add this object as a single independent entity in the world reference; frame.; Add; a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can; also perform internal GL specific caching with considerable performance gains; in these cases.; For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; PreferLocalFrame(); If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object.; As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. Scene Rebuilds; It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. It already has the object internally cached .; The object falls outside; s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:5536,log,logical,5536,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,13,['log'],['logical']
Testability,"d cut range ;  ; Double_t * fCutRangeMin;  minimum of allowed cut range ;  ; TH1 * fEffBvsSLocal;  intermediate eff. background versus eff signal histo ;  ; EEffMethod fEffMethod;  chosen efficiency calculation method ;  ; TString fEffMethodS;  chosen efficiency calculation method (string) ;  ; Double_t fEffRef;  reference efficiency ;  ; Double_t fEffSMax;  used to test optimized signal efficiency ;  ; Double_t fEffSMin;  used to test optimized signal efficiency ;  ; EFitMethodType fFitMethod;  chosen fit method ;  ; TString fFitMethodS;  chosen fit method (string) ;  ; std::vector< EFitParameters > * fFitParams;  vector for series of fit methods ;  ; std::vector< Double_t > * fMeanB;  means of variables (background) ;  ; std::vector< Double_t > * fMeanS;  means of variables (signal) ;  ; Bool_t fNegEffWarning;  flag risen in case of negative efficiency warning ;  ; Int_t fNpar;  number of parameters in fit (default: 2*Nvar) ;  ; TRandom * fRandom;  random generator for MC optimisation method ;  ; std::vector< Int_t > * fRangeSign;  used to match cuts to fit parameters (and vice versa) ;  ; std::vector< Double_t > * fRmsB;  RMSs of variables (background) ;  ; std::vector< Double_t > * fRmsS;  RMSs of variables (signal) ;  ; Double_t fTestSignalEff;  used to test optimized signal efficiency ;  ; Double_t * fTmpCutMax;  temporary maximum requirement ;  ; Double_t * fTmpCutMin;  temporary minimum requirement ;  ; std::vector< TH1 * > * fVarHistB;  reference histograms (background) ;  ; std::vector< TH1 * > * fVarHistB_smooth;  smoothed reference histograms (background) ;  ; std::vector< TH1 * > * fVarHistS;  reference histograms (signal) ;  ; std::vector< TH1 * > * fVarHistS_smooth;  smoothed reference histograms (signal) ;  ; std::vector< PDF * > * fVarPdfB;  reference PDFs (background) ;  ; std::vector< PDF * > * fVarPdfS;  reference PDFs (signal) ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html:31304,test,test,31304,doc/master/classTMVA_1_1MethodCuts.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html,3,['test'],['test']
Testability,"d element; 1848/// Returns true if changes was performed; 1849 ; 1850bool RGeomDescription::ChangeNodeVisibility(const std::vector<std::string> &path, bool selected); 1851{; 1852 TLockGuard lock(fMutex);; 1853 ; 1854 RGeomBrowserIter giter(*this);; 1855 if (!giter.Navigate(path)); 1856 return false;; 1857 ; 1858 auto nodeid = giter.GetNodeId();; 1859 ; 1860 auto &dnode = fDesc[nodeid];; 1861 ; 1862 auto vol = GetVolume(nodeid);; 1863 ; 1864 // nothing changed; 1865 if (vol->IsVisible() == selected); 1866 return false;; 1867 ; 1868 dnode.vis = selected ? 99 : 0;; 1869 vol->SetVisibility(selected);; 1870 if (!dnode.chlds.empty()) {; 1871 if (selected); 1872 dnode.vis = 1; // visibility disabled when any child; 1873 vol->SetVisDaughters(selected);; 1874 }; 1875 ; 1876 int id = 0;; 1877 for (auto &desc : fDesc); 1878 if (GetVolume(id++) == vol); 1879 desc.vis = dnode.vis;; 1880 ; 1881 auto stack = MakeStackByIds(giter.CurrentIds());; 1882 ; 1883 // any change in logical node visibility erase individual physical node settings; 1884 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 1885 if (compare_stacks(iter->stack, stack) == 0) {; 1886 fVisibility.erase(iter);; 1887 break;; 1888 }; 1889 ; 1890 ClearDrawData(); // after change raw data is no longer valid; 1891 ; 1892 return true;; 1893}; 1894 ; 1895/////////////////////////////////////////////////////////////////////////////////; 1896/// Change visibility for specified element; 1897/// Returns true if changes was performed; 1898 ; 1899std::unique_ptr<RGeomNodeInfo> RGeomDescription::MakeNodeInfo(const std::vector<int> &stack); 1900{; 1901 auto path = MakePathByStack(stack);; 1902 ; 1903 TLockGuard lock(fMutex);; 1904 ; 1905 std::unique_ptr<RGeomNodeInfo> res;; 1906 ; 1907 RGeomBrowserIter iter(*this);; 1908 ; 1909 if (iter.Navigate(path)) {; 1910 ; 1911 auto node = fNodes[iter.GetNodeId()];; 1912 ; 1913 auto &desc = fDesc[iter.GetNodeId()];; 1914 ; 1915 res = std::make_unique<RGeomNodeInfo>();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:57086,log,logical,57086,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['log'],['logical']
Testability,"d enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list) overrideTGraphAsymmErrorsvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphAsymmErrors &gr)TGraphAsymmErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors-members.html:9819,log,logy,9819,doc/master/classTGraphAsymmErrors-members.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors-members.html,1,['log'],['logy']
Testability,"d for replaying; What is allocated here is deleted in destructor. Bool_t Initialize(TRecorder* r, Bool_t showMouseCursor, TRecorder::EReplayModes mode); Initialization of data structures for replaying.; Start of replaying. Return value:; - kTRUE = everything is OK and replaying has begun; - kFALSE = non existing or invalid log file, replaying has not started. void RegisterWindow(Window_t w); Creates mapping for the newly registered window w and adds this; mapping to fWindowList. Called by signal whenever a new window is registered during replaying. The new window ID is mapped to the old one with the same number in the; list of registered windows.; It means that 1st new window is mapped to the 1st original,; 2nd to the 2nd, Nth new to the Nth original. Bool_t RemapWindowReferences(); All references to the old windows (IDs) in fNextEvent are replaced by; new ones according to the mappings in fWindowList. Bool_t FilterEvent(TRecGuiEvent* e). Bool_t PrepareNextEvent(); Finds the next event in log file to replay and sets it to fNextEvent. Reads both from CmdTree and GuiTree and chooses that event that becomes; earlier; - fCmdTreeCounter determines actual position in fCmdTree; - fGuiTreeCounter determines actual position in fCmdTree. If GUI event should be replayed, we must first make sure that there is; appropriate mapping for this event. RETURN VALUE:; kFALSE = there is no event to be replayed; kTRUE = there is still at least one event to be replayed. Cases:; - fNextEvent = 0 => We are waiting for the appropriate; window to be registered; - fNextEvent != 0 => fNextEvent can be replayed (windows are; ready). Bool_t CanOverlap(); ButtonPress and ButtonRelease must be sometimes replayed more times; Example: pressing of a button opens small window and user chooses; something from that window (color); Window must be opened while user is choosing. void ReplayRealtime(); Replays the next event. It is called when fTimer times out.; Every time fTimer is set again to time equal to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderReplaying.html:4574,log,log,4574,root/html528/TRecorderReplaying.html,https://root.cern,https://root.cern/root/html528/TRecorderReplaying.html,4,['log'],['log']
Testability,"d for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRint.html:13891,log,logon,13891,root/html602/TRint.html,https://root.cern,https://root.cern/root/html602/TRint.html,1,['log'],['logon']
Testability,"d frame bounding box; is 'of interest' to the camera. This is defined as box:. i) intersecting completely or partially (kInside/kPartial) with; cameras interest box (fInterestBox); ii) having significant length OR volume ratio compared to this; interest box. If a box is 'of interest' returns kTRUE, kFALSE otherwise. See; TGLCamera::UpdateInterest() for more details of camera interest; box. Note: Length/volume ratios NOT dependent on the projected size; of box at current camera configuration as we do not want; continual changes. This is used when (re) populating the scene; with objects from external client. TODO: Might be more logical to move this test out to client -; and have accessor for fInterestBox instead?. Bool_t UpdateInterest(Bool_t force); Update the internal interest box (fInterestBox) of the camera.; The interest box is an orientated bounding box, calculated as; an expanded container round the frustum. It is used to test if; if object bounding boxes are of interest (should be accepted; into viewer scene) for a camera - see TGLCamera::OfInterest(). The interest box is updated if the frustum is no longer contained; in the existing one, or a new one calculated on the current frustum; differs significantly in volume (camera has been zoomed/dollyed; sizable amount). If the interest box is updated we return kTRUE - kFALSE otherwise. void ResetInterest(); Clear out the existing interest box. Bool_t AdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Adjust a passed REFERENCE value 'val', based on screenShift delta.; Two modifier flags ('mod1' / 'mod2' ) for sensitivity:. mod1 = kFALSE, mod2 = kFALSE : normal sensitivity (screenShift/screenShiftRange); mod1 = kTRUE, mod2 = kFALSE : 0.1x sensitivity; mod1 = kTRUE, mod2 = kTRUE : 0.01x sensitivity; mod1 = kFALSE, mod2 = kTRUE : 10.0x sensitivity. 'val' is modified and clamped to 'min' / 'max' range.; Return bool kTRUE if val actual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCamera.html:14589,test,test,14589,root/html528/TGLCamera.html,https://root.cern,https://root.cern/root/html528/TGLCamera.html,6,['test'],['test']
Testability,"d from NullPValueError via error propagation. ; Taylor expansion series approximation for standard deviation (error propagation) ; Definition at line 280 of file HypoTestResult.cxx. ◆ Streamer(). void RooStats::HypoTestResult::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::HypoTestResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 142 of file HypoTestResult.h. ◆ UpdatePValue(). void HypoTestResult::UpdatePValue ; (; const SamplingDistribution * ; distr, . double & ; pvalue, . double & ; perror, . bool ; pIsRightTail . ). private . updates the pvalue if sufficient data is available ; Definition at line 310 of file HypoTestResult.cxx. Member Data Documentation. ◆ fAllTestStatisticsData. std::unique_ptr<const RooArgList> RooStats::HypoTestResult::fAllTestStatisticsData. protected . for the case of multiple test statistics, holds all the results ; Definition at line 133 of file HypoTestResult.h. ◆ fAltDetailedOutput. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fAltDetailedOutput. protected . Definition at line 137 of file HypoTestResult.h. ◆ fAltDistr. std::unique_ptr<SamplingDistribution> RooStats::HypoTestResult::fAltDistr. protected . Definition at line 135 of file HypoTestResult.h. ◆ fAlternatePValue. double RooStats::HypoTestResult::fAlternatePValue. mutableprotected . p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 129 of file HypoTestResult.h. ◆ fAlternatePValueError. double RooStats::HypoTestResult::fAlternatePValueError. mutableprotected . error of p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 131 of file HypoTestResult.h. ◆ fBackgroundIsAlt. bool RooStats::HypoTestResult::fBackgroundIsAlt. protected . Definition at line 140 of file HypoTestResult.h. ◆ fFitInfo. std::unique_ptr<RooDataSet> RooStats::HypoTestResult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:26700,test,test,26700,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['test'],['test']
Testability,"d histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:48265,log,log,48265,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,2,['log'],['log']
Testability,"d histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned, a binned likelihood is constructed. The following named",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:46052,log,log,46052,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,2,['log'],['log']
Testability,"d histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:46674,log,log,46674,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,4,['log'],['log']
Testability,"d if the p-value is; 1765/// lower then some significance level. Traditionally significance levels; 1766/// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; 1767/// analysis of the residuals which is often helpful in identifying the; 1768/// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; 1769/// Residuals are the difference between bin contents and expected bin; 1770/// contents. Most convenient for analysis are the normalized residuals. If; 1771/// hypotheses of identity are valid then normalized residuals are; 1772/// approximately independent and identically distributed random variables; 1773/// having N(0,1) distribution. Analysis of residuals expect test of above; 1774/// mentioned properties of residuals. Notice that indirectly the analysis; 1775/// of residuals increase the power of \f$ \chi^{2} \f$ test.; 1776///; 1777/// #### Methods of comparison:; 1778///; 1779/// \f$ \chi^{2} \f$ test for comparison two (unweighted) histograms:; 1780/// Let us consider two histograms with the same binning and the number; 1781/// of bins equal to r. Let us denote the number of events in the ith bin; 1782/// in the first histogram as ni and as mi in the second one. The total; 1783/// number of events in the first histogram is equal to:; 1784/// \f[; 1785/// N = \sum_{i=1}^{r} n_{i}; 1786/// \f]; 1787/// and; 1788/// \f[; 1789/// M = \sum_{i=1}^{r} m_{i}; 1790/// \f]; 1791/// in the second histogram. The hypothesis of identity (homogeneity) [3]; 1792/// is that the two histograms represent random values with identical; 1793/// distributions. It is equivalent that there exist r constants p1,...,pr,; 1794/// such that; 1795/// \f[; 1796///\sum_{i=1}^{r} p_{i}=1; 1797/// \f]; 1798/// and the probability of belonging to the ith bin for some measured value; 1799/// in both experiments is equal to pi. The number of events in the ith; 1800/// bin is a random variable with a distribution approximated by a Poisson; 1801/// p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:69617,test,test,69617,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,"d into a number of equivalent Gaussian sigma using the Significance method.; The p-value of the null for a given test statistic is rigorously defined and this is the starting point for the following conventions. Conventions used in this class; The p-value for the null and alternate are on the same side of the observed value of the test statistic. This is the more standard convention and avoids confusion when doing inverted tests.; For exclusion, we also want the formula \(CL_{s} = CL_{s+b} / CL_{b}\) to hold which therefore defines our conventions for \(CL_{s+b}\) and \(CL_{b}\). \(CL_{s}\) was specifically invented for exclusion and therefore all quantities need be related through the assignments as they are for exclusion: \(CL_{s+b} = p_{s+b}\); \(CL_{b} = p_{b}\). This is derived by considering the scenarios of a powerful and not powerful inverted test, where for the not so powerful test, \(CL_{s}\) must be close to one.; For results of Hypothesis tests, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file HypoTestResult.h. Public Member Functions;  HypoTestResult (const char *name, double nullp, double altp);  constructor from name, null and alternate p values ;  ;  HypoTestResult (const char *name=nullptr);  default constructor ;  ;  HypoTestResult (const HypoTestResult &other);  copy constructor ;  ;  ~HypoTestResult () override;  destructor ;  ; virtual double AlternatePValue () const;  Return p-value for alternate hypothesis. ;  ; virtual void Append (const HypoTestResult *other);  add values from another HypoTestResult ;  ; virtual double CLb () const;  Convert NullPValue into a ""confidence level"". ;  ; double CLbError () const;  The error on the ""confidence level"" of the null hypothesis. ;  ; TObject * Clone (const char *newname=nullptr) const override;  clone method, required since some data members cannot rely on the streamers to copy them ;  ; virtual double CLs () const;  \(CL_{s}\)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:1870,test,tests,1870,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['test'],['tests']
Testability,"d libTMVA is done in TMVAlogon.C, defined in .rootrc; 53 // if you use your private .rootrc, or run from a different directory, please copy the; 54 // corresponding lines from .rootrc; 55 ; 56 // methods to be processed can be given as an argument; use format:; 57 //; 58 // mylinux~> root -l TMVARegression.C\‍(\""myMethod1,myMethod2,myMethod3\""\‍); 59 //; 60 ; 61 //---------------------------------------------------------------; 62 // This loads the library; 63 TMVA::Tools::Instance();; 64 ; 65 ; 66 ; 67 // Default MVA methods to be trained + tested; 68 std::map<std::string,int> Use;; 69 ; 70 // Mutidimensional likelihood and Nearest-Neighbour methods; 71 Use[""PDERS""] = 0;; 72 Use[""PDEFoam""] = 1;; 73 Use[""KNN""] = 1;; 74 //; 75 // Linear Discriminant Analysis; 76 Use[""LD""] = 1;; 77 //; 78 // Function Discriminant analysis; 79 Use[""FDA_GA""] = 0;; 80 Use[""FDA_MC""] = 0;; 81 Use[""FDA_MT""] = 0;; 82 Use[""FDA_GAMT""] = 0;; 83 //; 84 // Neural Network; 85 Use[""MLP""] = 0;; 86 // Deep neural network (with CPU or GPU); 87#ifdef R__HAS_TMVAGPU; 88 Use[""DNN_GPU""] = 1;; 89 Use[""DNN_CPU""] = 0;; 90#else; 91 Use[""DNN_GPU""] = 0;; 92#ifdef R__HAS_TMVACPU; 93 Use[""DNN_CPU""] = 1;; 94#else; 95 Use[""DNN_CPU""] = 0;; 96#endif; 97#endif; 98 //; 99 // Support Vector Machine; 100 Use[""SVM""] = 0;; 101 //; 102 // Boosted Decision Trees; 103 Use[""BDT""] = 0;; 104 Use[""BDTG""] = 1;; 105 // ---------------------------------------------------------------; 106 ; 107 std::cout << std::endl;; 108 std::cout << ""==> Start TMVARegression"" << std::endl;; 109 ; 110 // Select methods (don't look at this code - not of interest); 111 if (myMethodList != """") {; 112 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; 113 ; 114 std::vector<TString> mlist = gTools().SplitString( myMethodList, ',' );; 115 for (UInt_t i=0; i<mlist.size(); i++) {; 116 std::string regMethod(mlist[i].Data());; 117 ; 118 if (Use.find(regMethod) == Use.end()) {; 119 std::cout << ""Method \"""" << reg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C_source.html:2311,test,tested,2311,doc/master/TMVARegression_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C_source.html,1,['test'],['tested']
Testability,"d normalization integral (if any) is deleted; and a new integral is constructed for use with 'nset'; Elements in 'nset' can be discrete and real, but must be lvalues. For functions that declare to be self-normalized by overloading the; selfNormalized() function, a unit normalization is always constructed. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned, a binned likelihood is constructed. The following named arguments are supported. ConditionalObservables(const RooArgSet& set) -- Do not normalize PDF over listed observables; Extended(Bool_t fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:48795,log,log,48795,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,3,['log'],['log']
Testability,"d object as a single independent entity in the world reference frame - e.g. a sphere, radius r, at x, y, z.; Repeated placement (copying) in world frame of this locally unique piece of geometry (described in local reference frame) e.g. define a sphere S (radius r), place copy at x1, y1, z1, another copy at x2, y2, z2 etc. The second case is very typical in geometry packages, e.g. ROOT’s TGeo package, GEANT4 etc, where we have very large number repeated placements of relatively few unique “shapes”.; Some viewers (GL Viewer only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching (display lists) with considerable performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. In some cases you will not have a real object you can reasonably set TBuffer3D::fID to, or the object is recycled or temporary. To suppress internal caching in the GL Viewer in these cases, set TBuffer3D::fID to 0 (null).; The viewer indicates it can support local frame objects through the TVirtualViewer3D interface method: PreferLocalFrame(). If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers to the properties of the logical object, with the exception of:. fLocalMaster transform; fColor; fTransparency. attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of filling the raw tessellation of the object buffer, in the master reference frame. Conversely viewers must always be capable o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:414258,log,logical,414258,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability,"d of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . bool Minimize(int maxIter, double absTol = 1.E-8, double relTol = 1.E-10); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached.; Return true if iterations converged successfully; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position (default 1.E-8); \@param absTol desired relative error in the minimum position (default = 1.E-10). int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char * Name() const; Return name of minimization algorithm (""BrentMinimizer1D"") . void SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); Sets function to be minimized. \@param f Function to be minimized.; \@param xlow Lower bound of the search interval.; \@param xup Upper bound of the search interval. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Author: David Gonzalez Maline 2/2008 » Copyright (c) 2004 Maline, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BrentMinimizer1D.html:4665,log,log,4665,root/html534/ROOT__Math__BrentMinimizer1D.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BrentMinimizer1D.html,1,['log'],['log']
Testability,"d rebuild the list; of unique workers.; Use ord = ""*"" to activate all inactive workers. void DeactivateWorker(const char* ord); Remove the worker identified by the ordinal number 'ord' from the; the active list. The request will be forwarded to the master; in direct contact with the worker. If needed, this master will move; the worker from the active to the inactive list and rebuild the list; of unique workers.; Use ord = ""*"" to deactivate all active workers. void ModifyWorkerLists(const char* ord, Bool_t add); Modify the worker active/inactive list by making the worker identified by; the ordinal number 'ord' active (add == TRUE) or inactive (add == FALSE).; If needed, the request will be forwarded to the master in direct contact; with the worker. The end-master will move the worker from one list to the; other active and rebuild the list of unique active workers.; Use ord = ""*"" to deactivate all active workers. TProof * Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); Start a PROOF session on a specific cluster. If cluster is 0 (the; default) then the PROOF Session Viewer GUI pops up and 0 is returned.; If cluster is """" (empty string) then we connect to a PROOF session; on the localhost (""proof://localhost""). Via conffile a specific; PROOF config file in the confir directory can be specified.; Use loglevel to set the default loging level for debugging.; The appropriate instance of TProofMgr is created, if not; yet existing. The instantiated TProof object is returned.; Use TProof::cd() to switch between PROOF sessions.; For more info on PROOF see the TProof ctor. TProofMgr * Mgr(const char* url); Get instance of the effective manager for 'url'; Return 0 on failure. void Reset(const char* url, Bool_t hard = kFALSE); Wrapper around TProofMgr::Reset(...). const TList * GetEnvVars(); Get environemnt variables. void AddEnvVar(const char* name, const char* value); Add an variable to the list of environment variables passed t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:84140,log,loglevel,84140,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['log'],['loglevel']
Testability,"d retaining/discarding the physical placements as required. The viewer may decide to force the client to rebuild (republish) the scene (via a TPad repaint at present), and thus collect these objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TVirtualViewer3D::AddObjectvirtual Int_t AddObject(const TBuffer3D &buffer, Bool_t *addChildren=nullptr)=0; bool; unsigned int; If you use the first (simple) case a viewer using logical/physical pairs will generate IDs for each physical object internally. In the second you can specify a unique identifier from the client, which allows the viewer to be more efficient. It can now cache both logical and physical objects, and only discard physical objects no longer of interest as part of scene rebuilds. Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not interested in a certain object due to limits/size then it will also not be interest in any of the contained branch of descendents. Both AddObject() methods have an addChildren parameter. The viewer will complete this (if passed) indicating if children (contained within the one just sent) are worth adding. Recycling TBuffer3D; Once add AddObject() has been called, the contents are copied to the viewer internally. You are free to destroy this object, or recycle it for the next object if suitable. ; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:10721,log,logical,10721,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['log'],['logical']
Testability,"d session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSocket(const char* url, Char_t mode = 'M', Int_t psid = -1, Char_t ver = -1, const char* logbuf = 0, Int_t loglevel = -1, TXHandler* handler = 0); Constructor; Open the connection to a remote XrdProofd instance and start a PROOF; session.; The mode 'm' indicates the role of this connection:; 'a' Administrator; used by an XPD to contact the head XPD; 'i' Internal; used by a TXProofServ to call back its creator; (see XrdProofUnixConn); 'C' PROOF manager: open connection only (do not start a session); 'M' Client creating a top master; 'A' Client attaching to top master; 'm' Top master creating a submaster; 's' Master creating a slave; The buffer 'logbuf' is a null terminated string to be sent over at; login. TXSocket(const TXSocket& ); TXSocket copy ctor. TXSocket& operator=(const TXSocket& ); TXSocket assignment operator. ~TXSocket(); Destructor. void SetLocation(const char* loc = """"); Set location string. void SetSessionID(Int_t id); Set session ID to 'id'. If id < 0, disable also the asynchronous handler. void DisconnectSession(Int_t id, Option_t* opt = """"); Disconnect a session. Use opt= ""S"" or ""s"" to; shutdown remote session.; Default is opt = """". void Close(Option_t* opt = """"); Close connection. Available options are (case insensitive); 'P' force closing of the underlying physical connection; 'S' shutdown remote session, is any; A session ID can be given using #...# signature, e.g. ""#1#"".; Default is opt = """". UnsolRespProcResult ProcessUnsolicitedM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXSocket.html:14044,log,logbuf,14044,root/html604/TXSocket.html,https://root.cern,https://root.cern/root/html604/TXSocket.html,2,['log'],"['logbuf', 'login']"
Testability,"d the color number of each marker will be 2.5*E. If the color number is negative it is set to 0. If the color number is greater than the current number of colors it is set to the highest color number. The default number of colors is 50. See TStyle::SetPalette for setting a new color palette. The expressions can use all the operations and built-in functions supported by TFormula (see TFormula::Analyze()), including free functions taking numerical arguments (e.g. TMath::Bessel()). In addition, you can call member functions taking numerical arguments. For example, these are two valid expressions: TMath::BreitWigner(fPx,3,2); event.GetHistogram()->GetXaxis()->GetXmax(); TTree::GetHistogramTH1 * GetHistogram()Definition TTree.h:479; TMath::BreitWignerDouble_t BreitWigner(Double_t x, Double_t mean=0, Double_t gamma=1)Calculates a Breit Wigner function with mean and gamma.Definition TMath.cxx:442; . [in]selectionA string containing a selection expression. In a selection all usual C++ mathematical and logical operators are allowed. The value corresponding to the selection expression is used as a weight to fill the histogram (a weight of 0 is equivalent to not filling the histogram). Examples:; ""x<y && sqrt(z)>3.2"": returns a weight = 0 or 1; ""(x+y)*(sqrt(z)>3.2)"": returns a weight = x+y if sqrt(z)>3.2, 0 otherwise. If the selection expression returns an array, it is iterated over in sync with the array returned by the varexp argument (as described below in ""Drawing expressions using arrays and array; elements""). For example, if, for a given event, varexp evaluates to {1., 2., 3.} and selection evaluates to {0, 1, 0}, the resulting histogram is filled with the value 2. For example, for each event here we perform a simple object selection: // Muon_pt is an array: fill a histogram with the array elements > 100 in each event; tree->Draw('Muon_pt', 'Muon_pt > 100'); . [in]optionThe drawing option.; When an histogram is produced it can be any histogram drawing option listed in THi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:113348,log,logical,113348,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['log'],['logical']
Testability,"d the color number of each marker will be 2.5*E. If the color number is negative it is set to 0. If the color number is greater than the current number of colors it is set to the highest color number. The default number of colors is 50. See TStyle::SetPalette for setting a new color palette. The expressions can use all the operations and built-in functions supported by TFormula (see TFormula::Analyze()), including free functions taking numerical arguments (e.g. TMath::Bessel()). In addition, you can call member functions taking numerical arguments. For example, these are two valid expressions: TMath::BreitWigner(fPx,3,2); event.GetHistogram()->GetXaxis()->GetXmax(); TTree::GetHistogramTH1 * GetHistogram()Definition TTree.h:519; TMath::BreitWignerDouble_t BreitWigner(Double_t x, Double_t mean=0, Double_t gamma=1)Calculates a Breit Wigner function with mean and gamma.Definition TMath.cxx:442; . [in]selectionA string containing a selection expression. In a selection all usual C++ mathematical and logical operators are allowed. The value corresponding to the selection expression is used as a weight to fill the histogram (a weight of 0 is equivalent to not filling the histogram). Examples:; ""x<y && sqrt(z)>3.2"": returns a weight = 0 or 1; ""(x+y)*(sqrt(z)>3.2)"": returns a weight = x+y if sqrt(z)>3.2, 0 otherwise. If the selection expression returns an array, it is iterated over in sync with the array returned by the varexp argument (as described below in ""Drawing expressions using arrays and array; elements""). For example, if, for a given event, varexp evaluates to {1., 2., 3.} and selection evaluates to {0, 1, 0}, the resulting histogram is filled with the value 2. For example, for each event here we perform a simple object selection: // Muon_pt is an array: fill a histogram with the array elements > 100 in each event; tree->Draw('Muon_pt', 'Muon_pt > 100'); . [in]optionThe drawing option.; When an histogram is produced it can be any histogram drawing option listed in THi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:113521,log,logical,113521,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['log'],['logical']
Testability,"d this fake main routine to the compilation line.; 3737 // But in this case compiler may output the name of the dictionary file; 3738 // and of the fakeMain file while it compiles it. (this would be useless; 3739 // confusing output).; 3740 // We could also the fake main routine to the end of the dictionary file; 3741 // however compilation would fail if a main is already there; 3742 // (like stress.cxx); 3743 // dict.Append("" "").Append(fakeMain);; 3744 TString exec;; 3745 AssignAndDelete( exec, ConcatFileName( build_loc, libname ) );; 3746 exec += ""_ACLiC_exec"";; 3747 testcmd.ReplaceAll(""$SourceFiles"",""-D__ACLIC__ \""$SourceFiles\"""");; 3748 testcmd.ReplaceAll(""$SourceFiles"",dict);; 3749 testcmd.ReplaceAll(""$ObjectFiles"",""\""$ObjectFiles\"""");; 3750 testcmd.ReplaceAll(""$ObjectFiles"",dictObj);; 3751 testcmd.ReplaceAll(""$IncludePath"",includes);; 3752 testcmd.ReplaceAll(""$ExeName"",exec);; 3753 testcmd.ReplaceAll(""$LinkedLibs"",linkLibraries);; 3754 testcmd.ReplaceAll(""$BuildDir"",build_loc);; 3755 if (mode==kDebug); 3756 testcmd.ReplaceAll(""$Opt"",fFlagsDebug);; 3757 else; 3758 testcmd.ReplaceAll(""$Opt"",fFlagsOpt);; 3759 ; 3760#ifdef WIN32; 3761 R__FixLink(testcmd);; 3762 testcmd.ReplaceAll(""-std="", ""-std:"");; 3763#endif; 3764 ; 3765 // ======= Build the library; 3766 if (result) {; 3767 TString cmdAllowUnresolved = cmd;; 3768#ifdef R__MACOSX; 3769 // Allow linking to succeed despite the missing symbols.; 3770 cmdAllowUnresolved.ReplaceAll(""-dynamiclib"", ""-dynamiclib -Wl,-w -Wl,-undefined,dynamic_lookup"");; 3771#endif; 3772 if (verboseLevel > 3 && withInfo) {; 3773 ::Info(""ACLiC"",""compiling the dictionary and script files"");; 3774 if (verboseLevel>4); 3775 ::Info(""ACLiC"", ""%s"", cmdAllowUnresolved.Data());; 3776 }; 3777 Int_t success = ExecAndReport(cmdAllowUnresolved);; 3778 if (!success) {; 3779 if (produceRootmap) {; 3780 gSystem->Unlink(libmapfilename);; 3781 }; 3782 }; 3783 result = success;; 3784 }; 3785 ; 3786 if ( result ) {; 3787 if (linkDepLibraries) {; 3788 // We ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:127639,test,testcmd,127639,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['test'],['testcmd']
Testability,"d to compare two experimental distributions of unbinned data.; 715///; 716/// ### Input:; 717/// a,b: One-dimensional arrays of length na, nb, respectively.; 718/// The elements of a and b must be given in ascending order.; 719/// option is a character string to specify options; 720/// ""D"" Put out a line of ""Debug"" printout; 721/// ""M"" Return the Maximum Kolmogorov distance instead of prob; 722///; 723/// ### Output:; 724/// The returned value prob is a calculated confidence level which gives a; 725/// statistical test for compatibility of a and b.; 726/// Values of prob close to zero are taken as indicating a small probability; 727/// of compatibility. For two point sets drawn randomly from the same parent; 728/// distribution, the value of prob should be uniformly distributed between; 729/// zero and one.; 730/// in case of error the function return -1; 731/// If the 2 sets have a different number of points, the minimum of; 732/// the two sets is used.; 733///; 734/// ### Method:; 735/// The Kolmogorov test is used. The test statistic is the maximum deviation; 736/// between the two integrated distribution functions, multiplied by the; 737/// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; 738///; 739/// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); 740/// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; 741/// Statistical Methods in Experimental Physics, (North-Holland,; 742/// Amsterdam 1971) 269-271); 743///; 744/// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); 745///; 746/// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; 747/// over the two sorted arrays a and b representing empirical distribution; 748/// functions. The for-loop handles 3 cases: when the next points to be; 749/// evaluated satisfy a>b, a<b, or a=b:; 750///; 751/// ~~~ {.cpp}; 752/// for (Int_t i=0;i<na+nb;i++) {; 753/// if (a[ia-1] < b[ib-1]) {; 754/// rdiff -= sa;; 755/// ia++;; 756/// if (ia > na) {ok = kTRUE; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:24054,test,test,24054,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['test'],['test']
Testability,"d to have converged ; Definition at line 766 of file NeuralNet.h. ◆ create() [1/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max . ). inline . for monitoring ; Definition at line 819 of file NeuralNet.h. ◆ create() [2/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max, . int ; bins2, . double ; min2, . double ; max2 . ). inline . for monitoring ; Definition at line 820 of file NeuralNet.h. ◆ cycle(). virtual void TMVA::DNN::Settings::cycle ; (; double ; progress, . TString ; text . ). inlinevirtual . Parameters. textadvance on the progress bar; progressthe new value; texta label . Definition at line 799 of file NeuralNet.h. ◆ drawSample(). virtual void TMVA::DNN::Settings::drawSample ; (; const std::vector< double > & ; , . const std::vector< double > & ; , . const std::vector< double > & ; , . double ;  . ). inlinevirtual . callback for monitoring and logging ; Definition at line 807 of file NeuralNet.h. ◆ dropFractions(). const std::vector< double > & TMVA::DNN::Settings::dropFractions ; (; ); const. inline . Definition at line 762 of file NeuralNet.h. ◆ dropRepetitions(). size_t TMVA::DNN::Settings::dropRepetitions ; (; ); const. inline . Definition at line 761 of file NeuralNet.h. ◆ endTestCycle(). virtual void TMVA::DNN::Settings::endTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 805 of file NeuralNet.h. ◆ endTrainCycle(). virtual void TMVA::DNN::Settings::endTrainCycle ; (; double ; ). inlinevirtual . callback for monitoring and logging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 788 of file NeuralNet.h. ◆ exists(). bool TMVA::DNN::Settings::exists ; (; std::string ; histoName). inline . for monitoring ; Definition at line 825 of file NeuralNet.h. ◆ factorWeightDecay(). double TMVA::DNN::Settings::factorWeightDec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:7685,log,logging,7685,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['log'],['logging']
Testability,"d to the TGeoMatrix representing the relative positioning. ; Node are never instantiated directly by users, but created as a result of volume operations. Adding a volume named A with a given user ID inside a volume B will create a node node named A_ID. This will be added to the list of nodes stored by B. Also, when applying a division operation in N slices to a volume A, a list of nodes B_1, B_2, ..., B_N is also created. A node B_i does not represent a unique object in the geometry because its container A might be at its turn positioned as node inside several other volumes. Only when a complete branch of nodes is fully defined up to the top node in the geometry, a given path like:; /TOP_1/.../A_3/B_7 will represent an unique object.; Its global transformation matrix can be computed as the pile-up of all local transformations in its branch. We will therefore call ""logical graph"" the hierarchy defined by nodes and volumes. The expansion of the logical graph by all possible paths defines a tree structure where all nodes are unique ""touchable"" objects. We will call this the ""physical tree"". Unlike the logical graph, the physical tree can become a huge structure with several milions of nodes in case of complex geometries, therefore it is not always a good idea to keep it transient in memory. Since a the logical and physical structures are correlated, the modeller rather keeps track only of the current branch, updating the current global matrix at each change of the level in geometry. The current physical node is not an object that can be asked for at a given moment, but rather represented by the combination: current node + current global matrix. However, physical nodes have unique ID's that can be retrieved for a given modeler state. These can be fed back to the modeler in order to force a physical node to become current. The advantage of this comes from the fact that all navigation queries check first the current node, therefore knowing the location of a point in the g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNode.html:1438,log,logical,1438,doc/master/classTGeoNode.html,https://root.cern,https://root.cern/doc/master/classTGeoNode.html,1,['log'],['logical']
Testability,"d to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* mot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXNetFile.html:1302,log,log,1302,root/html528/TXNetFile.html,https://root.cern,https://root.cern/root/html528/TXNetFile.html,4,['log'],['log']
Testability,"d to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFile.html:1326,log,log,1326,root/html602/TXNetFile.html,https://root.cern,https://root.cern/root/html602/TXNetFile.html,2,['log'],['log']
Testability,"d transformations A/B to C and C to D/E/F. This looks much nicer, is it? In fact, it is and it is not. Of course, we managed to get rid of the ""unnecessary"" volume C in our geometry, but we end-up with a more flat structure for D,E and F (more daughters inside). This can get much worse when extensively used, as in the case: assemblies of assemblies.; For deciding what to choose between using virtual containers or assemblies for a specific case, one can use for both cases, after the geometry was closed:; gGeoManager->SetTopVolume(ptr_D);; gGeoManager->Test();; gGeoManager->RestoreMasterVolume();; TGeoManager::RestoreMasterVolumevoid RestoreMasterVolume()Restore the master volume of the geometry.Definition TGeoManager.cxx:3118; TGeoManager::Testvoid Test(Int_t npoints=1000000, Option_t *option="""")Check time of finding ""Where am I"" for n points.Definition TGeoManager.cxx:1942; The ptr_D is a pointer to volume D containing the interesting structure. The test will provide the timing for classifying 1 million random points inside D.; Examples of Volume Positioning; Now let us make a simple volume representing a copper wire. We suppose that a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm and a half-length dZ=1cm:; TGeoTube *tube = new TGeoTube(""wire_tube"",0,0.01,1);; TGeoTubeDefinition TGeoTube.h:17; One may omit the name for the shape wire_tube, if no retrieving by name is further needed during geometry building. Different volumes having different names and materials can share the same shape.; Now let's make the volume for our wire:; TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"",tube,ptrCOPPER); //(*); (*) Do not bother to delete the media, shapes or volumes that you have created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look inside TGeoManager::MakeTube() method, we would have been able to create our wire with a single l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:34579,test,test,34579,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['test'],['test']
Testability,"d"" ) );; 356 if (Use[""Plugin"" ]) histPBdt ->Fill( reader->EvaluateMVA( ""P_BDT method"" ) );; 357 ; 358 // Retrieve also per-event error; 359 if (Use[""PDEFoam""]) {; 360 Double_t val = reader->EvaluateMVA( ""PDEFoam method"" );; 361 Double_t err = reader->GetMVAError();; 362 histPDEFoam ->Fill( val );; 363 histPDEFoamErr->Fill( err );; 364 if (err>1.e-50) histPDEFoamSig->Fill( val/err );; 365 }; 366 ; 367 // Retrieve probability instead of MVA output; 368 if (Use[""Fisher""]) {; 369 probHistFi ->Fill( reader->GetProba ( ""Fisher method"" ) );; 370 rarityHistFi->Fill( reader->GetRarity( ""Fisher method"" ) );; 371 }; 372 }; 373 ; 374 // Get elapsed time; 375 sw.Stop();; 376 std::cout << ""--- End of event loop: ""; sw.Print();; 377 ; 378 // Get efficiency for cuts classifier; 379 if (Use[""CutsGA""]) std::cout << ""--- Efficiency for CutsGA method: "" << double(nSelCutsGA)/theTree->GetEntries(); 380 << "" (for a required signal efficiency of "" << effS << "")"" << std::endl;; 381 ; 382 if (Use[""CutsGA""]) {; 383 ; 384 // test: retrieve cuts for particular signal efficiency; 385 TMVA::MethodCuts* mcuts = dynamic_cast<TMVA::MethodCuts*>(reader->FindMVA( ""CutsGA method"" ));; 386 ; 387 if (mcuts) {; 388 std::vector<Double_t> cutsMin;; 389 std::vector<Double_t> cutsMax;; 390 mcuts->GetCuts( 0.7, cutsMin, cutsMax );; 391 std::cout << ""--- -------------------------------------------------------------"" << std::endl;; 392 std::cout << ""--- Retrieve cut values for signal efficiency of 0.7 from Reader"" << std::endl;; 393 for (UInt_t ivar=0; ivar<cutsMin.size(); ivar++) {; 394 std::cout << ""... Cut: ""; 395 << cutsMin[ivar]; 396 << "" < \""""; 397 << mcuts->GetInputVar(ivar); 398 << ""\"" <= ""; 399 << cutsMax[ivar] << std::endl;; 400 }; 401 std::cout << ""--- -------------------------------------------------------------"" << std::endl;; 402 }; 403 }; 404 ; 405 // Write histograms; 406 ; 407 TFile *target = new TFile( ""TMVApp.root"",""RECREATE"" );; 408 if (Use[""Likelihood"" ]) histLk ->Write();; 409 if (Use[""Lik",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html:17440,test,test,17440,doc/master/TMVAClassificationApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html,1,['test'],['test']
Testability,d) sig: 100 bkg: 100; : #events: (unweighted) sig: 100 bkg: 100; : Training 1000 Decision Trees ... patience please; : Elapsed time for training with 200 events: 0.0981 sec ; <HEADER> BDTG : [datasetBkg1] : Evaluation of BDTG on training sample (200 events); : Elapsed time for evaluation of 200 events: 0.0158 sec ; : Creating xml weight file: datasetBkg1/weights/TMVAMultiBkg1_BDTG.weights.xml; : Creating standalone class: datasetBkg1/weights/TMVAMultiBkg1_BDTG.class.C; : TMVASignalBackground1.root:/datasetBkg1/Method_BDT/BDTG; <HEADER> Factory : Training finished; : ; : Ranking input variables (method specific)...; <HEADER> BDTG : Ranking result (top variable is best ranked); : --------------------------------------; : Rank : Variable : Variable Importance; : --------------------------------------; : 1 : var3 : 2.759e-01; : 2 : var1 : 2.623e-01; : 3 : var4 : 2.431e-01; : 4 : var2 : 2.187e-01; : --------------------------------------; <HEADER> Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: datasetBkg1/weights/TMVAMultiBkg1_BDTG.weights.xml; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG for Classification performance; : ; <HEADER> BDTG : [datasetBkg1] : Evaluation of BDTG on testing sample (200 events); : Elapsed time for evaluation of 200 events: 0.0104 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDTG; : ; <HEADER> BDTG : [datasetBkg1] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.13613 0.97981 [ -2.0823 2.9998 ]; : var2: 0.38548 0.81654 [ -1.3349 2.5106 ]; : var3: 0.66949 0.88808 [ -1.4774 3.9796 ]; : var4: 0.33525 1.2442 [ -2.9030 3.3317 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:17323,test,testing,17323,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,1,['test'],['testing']
Testability,"d) {; 6100 if (element->IsA() == TStreamerArtificial::Class()) {; 6101 continue;; 6102 }; 6103 if (element->TestBit(TStreamerElement::kRepeat)) {; 6104 continue;; 6105 }; 6106 if (element->TestBit(TStreamerElement::kCache) && !element->TestBit(TStreamerElement::kWrite)) {; 6107 continue;; 6108 }; 6109 char* pointer = (char*) (objptr + element->GetOffset());; 6110 // FIXME: This is not good enough, an STL container can be; 6111 // a base, and the test will fail.; 6112 // See TBranchElement::InitializeOffsets() for the; 6113 // correct test.; 6114 bool isBase = (element->IsA() == TStreamerBase::Class());; 6115 if (isBase) {; 6116 TClass* clbase = element->GetClassPointer();; 6117 if ((clbase == TObject::Class()) && cl->CanIgnoreTObjectStreamer()) {; 6118 // Note: TStreamerInfo::Compile() leaves this element; 6119 // out of the optimized info, although it does; 6120 // exists in the non-compiled and non-optimized info.; 6121 // FIXME: The test that TStreamerInfo::Compile() uses; 6122 // is element->GetType() < 0, so that is what; 6123 // we should do as well.; 6124 continue;; 6125 }; 6126 if (clbase->GetListOfRealData()->GetSize() == 0) {; 6127 // Do not create a branch for empty bases.; 6128 continue;; 6129 }; 6130 }; 6131 if (dot) {; 6132 if (dotlast) {; 6133 bname.Form(""%s%s"", name, element->GetFullName());; 6134 } else {; 6135 // FIXME: We are in the case where we have a top-level; 6136 // branch name that was created by the branch; 6137 // constructor which takes a folder as input.; 6138 // The internal dots in the name are in place of; 6139 // of the original slashes and represent the; 6140 // folder hierarchy.; 6141 if (isBase) {; 6142 // FIXME: This is very strange, this is the only case where; 6143 // we create a branch for a base class that does; 6144 // not have the base class name in the branch name.; 6145 // FIXME: This is also quite bad since classes with two; 6146 // or more base classes end up with sub-branches; 6147 // that have the same name.; 6148 bna",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:229094,test,test,229094,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['test'],['test']
Testability,"d*/, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc /*itInvActFnc*/, double patternWeight); 413 {; 414 bool hasDeltas = (itDelta != itDeltaEnd);; 415 ; 416 double errorSum = 0.0;; 417 for (ItProbability itProbability = itProbabilityBegin; itProbability != itProbabilityEnd; ++itProbability); 418 {; 419 double probability = *itProbability;; 420 double truth = *itTruthBegin;; 421 /* truth = truth < 0.1 ? 0.1 : truth; */; 422 /* truth = truth > 0.9 ? 0.9 : truth; */; 423 truth = truth < 0.5 ? 0.1 : 0.9;; 424 if (hasDeltas); 425 {; 426 double delta = probability - truth;; 427 (*itDelta) = delta*patternWeight;; 428// (*itDelta) = (*itInvActFnc)(probability) * delta * patternWeight;; 429 ++itDelta;; 430 }; 431 double error (0);; 432 if (probability == 0) // protection against log (0); 433 {; 434 if (truth >= 0.5); 435 error += 1.0;; 436 }; 437 else if (probability == 1); 438 {; 439 if (truth < 0.5); 440 error += 1.0;; 441 }; 442 else; 443 error += - (truth * log (probability) + (1.0-truth) * log (1.0-probability)); // cross entropy function; 444 errorSum += error * patternWeight;; 445 ; 446 }; 447 return errorSum;; 448 }; 449 ; 450 ; 451 ; 452 ; 453/*! \brief soft-max-cross-entropy error function (for mutual exclusive cross-entropy); 454 *; 455 *; 456 */; 457 template <typename ItOutput, typename ItTruth, typename ItDelta, typename ItInvActFnc>; 458 double softMaxCrossEntropy (ItOutput itProbabilityBegin, ItOutput itProbabilityEnd, ItTruth itTruthBegin, ItTruth /*itTruthEnd*/, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc /*itInvActFnc*/, double patternWeight); 459 {; 460 double errorSum = 0.0;; 461 ; 462 bool hasDeltas = (itDelta != itDeltaEnd);; 463 // output - truth; 464 ItTruth itTruth = itTruthBegin;; 465 for (auto itProbability = itProbabilityBegin; itProbability != itProbabilityEnd; ++itProbability, ++itTruth); 466 {; 467// assert (itTruth != itTruthEnd);; 468 double probability = (*itProbability);; 469 double truth = (*itTruth);; 470 if (hasDeltas); 471 {; 472",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:13063,log,log,13063,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['log'],['log']
Testability,"d, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfCurDirname of current directory; TList*fKeyslist of Hbook keys (Ids) on disk; TList*fListlist of objects in memory; Int_tfLreclRecord length in Hbook machine words; Int_tfLunFortran logical unit for this file; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; static Int_t*fgLuns; static Bool_tfgPawInit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THbookFile(); the constructor. THbookFile(const char* fname, Int_t lrecl = 1024); Constructor for an HBook file object. ~THbookFile(); destructor. void Browse(TBrowser* b); to be implemented. Bool_t cd(const char* dirname = """"); change directory to dirname. void Close(Option_t* option = """"); Close the Hbook file. void DeleteID(Int_t id); remove id from file and memory. TObject * FindObject(const char* name) const; return object with name in fList in memory. TObject * FindObject(const TObject* obj) const; return object with pointer obj in fList in memory. TObject * Get(Int_t id); import Hbook object with identifier idd in memory. Int_t GetEntry(Int_t entry, Int_t id, Int_t atype, Float_t* x); Read in memory all columns of entry num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THbookFile.html:6855,log,logical,6855,root/html528/THbookFile.html,https://root.cern,https://root.cern/root/html528/THbookFile.html,4,['log'],['logical']
Testability,"d, etc..) given the data and the model function ;  NHFitInterface;  NHist;  NInternal;  ►NMacOSX;  NDetail;  NDetails;  NOpenGL;  NUtil;  ►NX11;  NDetail;  ►NMath;  NBlas;  NBrentMethods;  NCephes;  NChebyshevTemplate recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  NCholeskyDecompHelpersHelpers for CholeskyDecomp ;  Ndetail;  NGenAlgoOptUtil;  NGenVector;  NGenVector_detail;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  Ngv_detail;  NImpl;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  NRootsRoot-Finding Algorithms ;  NrowOffsetsUtils;  NSampler;  Ntest;  NUtilNamespace defining Utility functions needed by mathcore ;  NVectorUtilGlobal Helper functions for generic Vector classes ;  NMathMore;  ►NMeta;  NSelection;  NMinuit;  NMinuit2;  NQuartz;  NRNamespace associated R package for ROOT ;  NTF1Helper;  ►NTMetaUtils;  NAST2SourceTools;  NpropNames;  NTreeUtils;  Nv5;  ►NVc;  ►NAVX;  NInternal;  NIntrinsics;  ►NCommon;  NInternal;  NError;  NInternal;  NMem;  NReg;  NScalar;  ►NSSE;  NInternal;  NVC__USE_NAMESPACE;  NVectorSpecialInitializerIndexesFromZero;  NVectorSpecialInitializerOne;  NVectorSpecialInitializerZero;  NWarnings;  ▼NROOTaaS;  ►Nhtml;  ►Nexport;  Ncpphighlighter;  ►NiPyROOT;  Ncppcompleter;  Ncppmagic;  Ncpptransformer;  Nutils;  NRootCsgI've modified some very nice bounding box tree code from Gino van der Bergen's Free Solid Library below ;  NROOTwriter;  Nsample_config;  NSelectionRulesUtils;  Nsqlio;  ▼NstdSTL namespace ;  N__ROOT;  Ndetail;  NTClassEdit;  NTCollectionProxyInfo;  Ntest;  NTMath;  NTMatrixTCramerInv;  NTMatrixTSymCramerInv;  ▼NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  NkNN;  NTMVAGlob;  NTStreamerInfoActions;  ▼Nvdt;  Ndetails;  Nwriter;  Nxmlio;  NXPD;  NXrdCl. ROOT 6.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/namespaces.html:1985,test,test,1985,root/html606/namespaces.html,https://root.cern,https://root.cern/root/html606/namespaces.html,1,['test'],['test']
Testability,"d-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfCompresscompress foam output file; Bool_tfCutNminKeep for bw compatibility: Grabbing cell with maximal RMS to split next (TFoam default); TStringfDTLogicuse DT algorithm to split cells; TMVA::EDTSeparationfDTSeparationenum which specifies the separation to use for the DT logic; Float_tfDiscrErrCutcut on discrimant error; Int_tfEvPerBinMaximum events (equiv.) per bin in buid-up (1000); Bool_tfFillFoamWithOrigWeightsfill the foam with boost weights; vector<PDEFoam*>fFoamgrown PDEFoams; Float_tfFracFraction used for calc of Xmin, Xmax; TMVA::MethodPDEFoam::EKernelfKernelKernel for GetMvaValue(); TMVA::PDEFoamKernelBase*fKernelEstimatorKernel estimator; TStringfKernelStrKernel for GetMvaValue() (option string); UInt_tfMaxDepthmaximum depth of cell tree; Bool_tfMultiTargetRegressiondo regression on multible targets; UInt_tfNminminimal number of events in cell necessary to split cell""; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; Bool_tfSigBgSeparatedSeparate Sig and Bg, or not; TMVA::ETargetSelectionfTargetSelectionmethod of selecting the target (only mulit target regr.); TStringfTargetSelectionStrmethod of selecting th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDEFoam.html:17867,log,logic,17867,root/html530/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDEFoam.html,3,['log'],['logic']
Testability,"d-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfCompresscompress foam output file; Bool_tfCutNminKeep for bw compatibility: Grabbing cell with maximal RMS to split next (TFoam default); TStringfDTLogicuse DT algorithm to split cells; TMVA::EDTSeparationfDTSeparationenum which specifies the separation to use for the DT logic; Float_tfDiscrErrCutcut on discrimant error; Int_tfEvPerBinMaximum events (equiv.) per bin in buid-up (1000); Bool_tfFillFoamWithOrigWeightsfill the foam with boost weights; vector<TMVA::PDEFoam*>fFoamgrown PDEFoams; Float_tfFracFraction used for calc of Xmin, Xmax; TMVA::MethodPDEFoam::EKernelfKernelKernel for GetMvaValue(); TMVA::PDEFoamKernelBase*fKernelEstimatorKernel estimator; TStringfKernelStrKernel for GetMvaValue() (option string); UInt_tfMaxDepthmaximum depth of cell tree; Bool_tfMultiTargetRegressiondo regression on multible targets; UInt_tfNminminimal number of events in cell necessary to split cell""; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; Bool_tfSigBgSeparatedSeparate Sig and Bg, or not; TMVA::ETargetSelectionfTargetSelectionmethod of selecting the target (only mulit target regr.); TStringfTargetSelectionStrmethod of select",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodPDEFoam.html:19141,log,logic,19141,root/html602/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodPDEFoam.html,2,['log'],['logic']
Testability,"d. <one line to give the library's name and a brief idea of what it does>; Copyright (C) <year> <name of author>. This library is free software; you can redistribute it and/or; modify it under the terms of the GNU Lesser General Public; License as published by the Free Software Foundation; either; version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public; License along with this library; if not, write to the Free Software; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. You should also get your employer (if you work as a programmer) or your; school, if any, to sign a ""copyright disclaimer"" for the library, if; necessary. Here is a sample; alter the names:. Yoyodyne, Inc., hereby disclaims all copyright interest in the; library `Frob' (a library for tweaking knobs) written by James Random Hacker. <signature of Ty Coon> 1 April 1990; Ty Coon, President of Vice. That's all there is to it!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/license.html:29141,test,tests,29141,d/license.html,https://root.cern,https://root.cern/d/license.html,1,['test'],['tests']
Testability,"d. By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; Parameters. dataReference to a RooAbsData object representing the dataset. ; cmdArgsVariadic template arguments representing optional command arguments. You can pass either an arbitrary number of RooCmdArg instances or a single RooLinkedList that points to the RooCmdArg objects. . ReturnsAn owning pointer to the created RooAbsReal NLL object. . RooFitResult with fit status and parameters if option Save() is used, nullptr otherwise. The user takes ownership of the fit result.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbsPdf::fitToImpl() method.; The following named arguments are supported:. Type of CmdArg Options to control construction of -log(L) . All command arguments that can also be passed to the NLL creation method. See alsoRooAbsPdf::createNLL(). Options to control flow of fit procedure . Minimizer(""<type>"", ""<algo>"") Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface, but others can be specified (through RooMinimizer interface). . Type Algorithm . Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve) . Minuit2 migrad, simplex, minimize, scan . GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent . GSLSimAn - . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Optimize(bool flag) Activate constant term optimization of test statistic during minimization (on by default) . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, off by default . Minos(const RooArgS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:105157,log,log,105157,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['log'],['log']
Testability,"d. Options to control flow of fit procedure. Minimizer(type,algo) -- Choose minimization package and algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer; interface, but others can be specified (through RooMinimizer interface). Select OldMinuit to use; MINUIT through the old RooMinuit interface. Type Algorithm; ------ ---------; OldMinuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); Minuit2 migrad, simplex, minimize, scan; GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; GSLSimAn -. InitialHesse(Bool_t flag) -- Flag controls if HESSE before MIGRAD as well, off by default; Optimize(Bool_t flag) -- Activate constant term optimization of test statistic during minimization (on by default); Hesse(Bool_t flag) -- Flag controls if HESSE is run after MIGRAD, on by default; Minos(Bool_t flag) -- Flag controls if MINOS is run after HESSE, on by default; Minos(const RooArgSet& set) -- Only run MINOS on given subset of arguments; Save(Bool_t flag) -- Flac controls if RooFitResult object is produced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. SumW2Error(Bool_t flag) -- Apply correaction to errors and covariance matrix using sum-of-weights covariance matrix; to obtain correct error for weighted likelihood fits. If this option is activated the; corrected covariance matrix is calculated as Vcorr = V C-1 V, where V is the original; covariance matrix and C is the inverse of the covariance matrix calculated using the; weights squared. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:53814,test,test,53814,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['test'],['test']
Testability,"d.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement the `expectedEvents()` function.; 684///; 685/// \param[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number of events.; 688/// \param[in] observedSumW2 The number of observed events when weighting with; 689/// squared weights. If non-zero, the weight-squared error; 690/// correction is applied to the extended term.; 691/// \param[in] doOffset Offset the extended term by a counterterm where the; 692/// expected number of events equals the observed number of events.; 693/// This constant shift results in a term closer to zero that is; 694/// approximately chi-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:25823,log,log,25823,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['log']
Testability,"d.; The object falls outside some ‘interest’ limits of the viewer camera.; The object is too small to be worth drawing. In all these cases TBuffer3D::AddObject() returns kNone, as it does for successful addition, indicating it does not require further information about this object. Hence you should not try to make any assumptions about what the viewer did with the object. The viewer may decide to force the client to rebuild (republish) the scene, obtaining a different collection of objects, if the internal viewer state changes .e.g. significant camera move. It does this presently by forcing a repaint on the attached TPad object - hence you should attach you master geometry object to the pad (via TObject::Draw()), and perform the publishing to the viewer in response to TObject::Paint().; 9.13.4.9 Physical IDs; TVirtualViewer3D provides for two methods of object addition:; virtual Int_t AddObject(const TBuffer3D &buffer,; Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID,; const TBuffer3D & buffer,; Bool_t *addChildren = 0); If you use the first (simple) case a viewer using logical/physical pairs will generate sequential IDs for each physical object internally. Scene rebuilds will require destruction and recreation of all physical objects. For the second you can specify an identifier from the client side, which must be unique and stable - i.e. the IDs of a published object is consistent, regardless of changes in termination of contained child geometry branches. In this case the viewer can safely cache the physical objects across scene rebuilds, discarding those no longer of interest.; 9.13.4.10 Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not interested in a certain object due to limits/size then it will also not be interest in any of the contained branch of siblings. Both TBuffer3D::AddObject() methods have an addChildren return parameter. The viewer will complete this (if passed) indicating if ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:416716,log,logical,416716,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability,"d:. static TVirtualGeoPainter*fgGeoPainterPointer to class painter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TVirtualGeoPainter(); -*-*Geometry painter default destructor; *-* ===================================. TVirtualGeoPainter * GeoPainter(); Static function returning a pointer to the geometry painter.; The painter will paint objects from the specified geometry.; If the geometry painter does not exist a default painter is created. void SetPainter(const TVirtualGeoPainter* painter); Static function to set an alternative histogram painter. void AddSize3D(Int_t numpoints, Int_t numsegs, Int_t numpolys). TVirtualGeoTrack * AddTrack(Int_t id, Int_t pdgcode, TObject* particle). void AddTrackPoint(Double_t* point, Double_t* box, Bool_t reset = kFALSE). void BombTranslation(const Double_t* tr, Double_t* bombtr). void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"). void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option). void CheckBoundaryErrors(Int_t ntracks = 1000000, Double_t radius = -1.). void CheckBoundaryReference(Int_t icheck = -1). void CheckGeometryFull(Bool_t checkoverlaps = kTRUE, Bool_t checkcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = NULL). void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const. void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.1, Option_t* option = """") const. Int_t CountVisibleNodes(). void DefaultAngles(). void DefaultColors(). Int_t DistanceToPrimitiveVol(TGeoVolume* vol, Int_t px, Int_t py). void Draw(Option_t* option = """"). void DrawBatemanSol(TGeoBatemanSol* sol, Option_t* option = """"). void DrawShape(TGeoShape* shape, Option_t* option = """"). void DrawOnly(Option_t* option = """"). void DrawOverlap(void* ovlp, Option_t* option = """"). void DrawCurrentPoint(Int_t color). void DrawPanel(). void DrawPath(const char* path). void DrawVolume(TGeoVolume* vol, Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualGeoPainter.html:11382,test,testNo,11382,root/html530/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html530/TVirtualGeoPainter.html,2,['test'],['testNo']
Testability,"d:. static TVirtualGeoPainter*fgGeoPainterPointer to class painter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TVirtualGeoPainter(); -*-*Geometry painter default destructor; *-* ===================================. TVirtualGeoPainter * GeoPainter(); Static function returning a pointer to the geometry painter.; The painter will paint objects from the specified geometry.; If the geometry painter does not exist a default painter is created. void SetPainter(const TVirtualGeoPainter* painter); Static function to set an alternative histogram painter. void AddSize3D(Int_t numpoints, Int_t numsegs, Int_t numpolys). TVirtualGeoTrack * AddTrack(Int_t id, Int_t pdgcode, TObject* particle). void AddTrackPoint(Double_t* point, Double_t* box, Bool_t reset = kFALSE). void BombTranslation(const Double_t* tr, Double_t* bombtr). void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"). void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option). void CheckBoundaryErrors(Int_t ntracks = 1000000, Double_t radius = -1.). void CheckBoundaryReference(Int_t icheck = -1). void CheckGeometryFull(Bool_t checkoverlaps = kTRUE, Bool_t checkcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = NULL). void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const. void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.1, Option_t* option = """") const. Int_t CountVisibleNodes(). void DefaultAngles(). void DefaultColors(). Int_t DistanceToPrimitiveVol(TGeoVolume* vol, Int_t px, Int_t py). void Draw(Option_t* option = """"). void DrawBatemanSol(TGeoBatemanSol* sol, Option_t* option = """"). void DrawShape(TGeoShape* shape, Option_t* option = """"). void DrawOnly(Option_t* option = """"). void DrawOverlap(void* ovlp, Option_t* option = """"). void DrawCurrentPoint(Int_t color). void DrawPanel(). void DrawPath(const char* path, Option_t* option = """"). void DrawPolygon(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualGeoPainter.html:11539,test,testNo,11539,root/html534/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html534/TVirtualGeoPainter.html,1,['test'],['testNo']
Testability,"d::end (weights), std::begin (nothing), std::end (nothing), 10000, nothing, false);; 1075 return error;; 1076 }; 1077 ; 1078 template <typename Weights, typename PassThrough, typename OutContainer>; 1079 double Net::operator() (PassThrough& settingsAndBatch, const Weights& weights, ModeOutput /*eFetch*/, OutContainer& outputContainer) const; 1080 {; 1081 std::vector<double> nothing; // empty gradients; no backpropagation is done, just forward; 1082 assert (numWeights () == weights.size ());; 1083 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (nothing), std::end (nothing), 10000, outputContainer, true);; 1084 return error;; 1085 }; 1086 ; 1087 ; 1088 template <typename Weights, typename Gradients, typename PassThrough>; 1089 double Net::operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients) const; 1090 {; 1091 std::vector<double> nothing;; 1092 assert (numWeights () == weights.size ());; 1093 assert (weights.size () == gradients.size ());; 1094 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (gradients), std::end (gradients), 0, nothing, false);; 1095 return error;; 1096 }; 1097 ; 1098 template <typename Weights, typename Gradients, typename PassThrough, typename OutContainer>; 1099 double Net::operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients, ModeOutput eFetch, OutContainer& outputContainer) const; 1100 {; 1101 MATH_UNUSED(eFetch);; 1102 assert (numWeights () == weights.size ());; 1103 assert (weights.size () == gradients.size ());; 1104 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (gradients), std::end (gradients), 0, outputContainer, true);; 1105 return error;; 1106 }; 1107 ; 1108 ; 1109 ; 1110 template <typename LayerContainer, typename DropContainer, typename ItWeight, typename ItGradient>; 1111 std::vecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:34821,assert,assert,34821,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['assert'],['assert']
Testability,"d::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10465,test,test,10465,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,1,['test'],['test']
Testability,"d::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the Lite environment. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new session. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v | SvcMsg"", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read 'len' bytes from offset 'ofs' of the local file 'fin'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read lines containing 'pattern' in 'file'.; Returns a TObjString with the content or 0, in case of failure. TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"). virtual ~TProofMgrLite(); { }. » Author: G. Ganis, Apr 2008 » Copyright (C) 1995-2005, Rene Brun and Fons Rad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofMgrLite.html:10679,log,logs,10679,root/html602/TProofMgrLite.html,https://root.cern,https://root.cern/root/html602/TProofMgrLite.html,2,['log'],['logs']
Testability,"d::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the Lite environment. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new session. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v | SvcMsg"", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read 'len' bytes from offset 'ofs' of the local file 'fin'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read lines containing 'pattern' in 'file'.; Returns a TObjString with the content or 0, in case of failure. virtual ~TProofMgrLite(); { }. » Author: G. Ganis, Apr 2008 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-14 16:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofMgrLite.html:10097,log,logs,10097,root/html534/TProofMgrLite.html,https://root.cern,https://root.cern/root/html534/TProofMgrLite.html,1,['log'],['logs']
Testability,"d::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the Lite environment. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new session. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v | SvcMsg"", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read 'len' bytes from offset 'ofs' of the local file 'fin'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read lines containing 'pattern' in 'file'.; Returns a TObjString with the content or 0, in case of failure. virtual ~TProofMgrLite(); { }. » Author: G. Ganis, Apr 2008 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TProofMgrLite.h 38580 2011-03-23",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofMgrLite.html:9628,log,logs,9628,root/html530/TProofMgrLite.html,https://root.cern,https://root.cern/root/html530/TProofMgrLite.html,2,['log'],['logs']
Testability,"d::left << GetParameterName(i) << ""\t"";; 493 for (unsigned int j = 0; j < npar; ++j) {; 494 if (!IsParameterFixed(j) ) {; 495 os.precision(kPrec); os.width(kWidth); os << std::right << std::setw(matw) << Correlation(i,j);; 496 }; 497 }; 498 os << std::endl;; 499 }; 500 }; 501 // restore alignment and precision; 502 os.setf(prevFmt, std::ios::adjustfield);; 503 os.precision(prevPrec);; 504}; 505 ; 506void FitResult::GetConfidenceIntervals(unsigned int n, unsigned int stride1, unsigned int stride2, const double * x, double * ci, double cl, bool norm ) const {; 507 // stride1 stride in coordinate stride2 stride in dimension space; 508 // i.e. i-th point in k-dimension is x[ stride1 * i + stride2 * k]; 509 // compute the confidence interval of the fit on the given data points; 510 // the dimension of the data points must match the dimension of the fit function; 511 // confidence intervals are returned in array ci; 512 ; 513 if (!fFitFunc) {; 514 // check if model function exists; 515 MATH_ERROR_MSG(""FitResult::GetConfidenceIntervals"",""Cannot compute Confidence Intervals without fit model function"");; 516 return;; 517 }; 518 assert(fFitFunc);; 519 ; 520 // use student quantile in case of normalized errors; 521 double corrFactor = 1;; 522 if (fChi2 <= 0 || fNdf == 0) norm = false;; 523 if (norm); 524 corrFactor = TMath::StudentQuantile(0.5 + cl/2, fNdf) * std::sqrt( fChi2/fNdf );; 525 else; 526 // correction to apply to the errors given a CL different than 1 sigma (cl=0.683); 527 corrFactor = ROOT::Math::normal_quantile(0.5 + cl/2, 1);; 528 ; 529 ; 530 ; 531 unsigned int ndim = fFitFunc->NDim();; 532 unsigned int npar = fFitFunc->NPar();; 533 ; 534 std::vector<double> xpoint(ndim);; 535 std::vector<double> grad(npar);; 536 std::vector<double> vsum(npar);; 537 ; 538 // loop on the points; 539 for (unsigned int ipoint = 0; ipoint < n; ++ipoint) {; 540 ; 541 for (unsigned int kdim = 0; kdim < ndim; ++kdim) {; 542 unsigned int i = ipoint * stride1 + kdim * stride2;; 543 assert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:18630,assert,assert,18630,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,1,['assert'],['assert']
Testability,"d::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:21710,test,testArg,21710,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,1,['test'],['testArg']
Testability,"d::pow(k,2);; 342 a = (4 * g - 6) * k + (10 - 6 * g) * H - 4 * g + 6;; 343 b = (2 * g - 4) * k2 + 8 * h * k + (2 * g - 14 * h - 4) * H - 8 * h + 4 * g - 6;; 344 c = (6 * h + 2 * g - 2) * k2 + (4 * h - 4 *g + 6) * k + (2 * h - 6) * H + 4 * h;; 345 d = (2 * h + 6) * k2 - 4 * h * k;; 346 sigmaN += a * std::pow(double(N),3) + b * std::pow(double(N),2) + c * N + d;; 347 sigmaN /= ( double(N - 1) * double(N - 2) * double(N - 3) );; 348 sigmaN = TMath::Sqrt(sigmaN);; 349 return sigmaN;; 350 }; 351 ; 352 ; 353 Double_t GoFTest::PValueADKSamples(size_t nsamples, Double_t tx) {; 354 ; 355 /*; 356 Computation of p-values according to ; 357 ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; 358 and M.A. Stephens (1987), Journal of the American Statistical Association, ; 359 Vol 82, No. 399, pp 918-924.; 360 Code from kSamples package from R (author F. Scholtz); 361 ; 362 This function uses the upper T_m quantiles as obtained via simulation of; 363 the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; 364 for each sample, and after standardization, in order to emulate the Table 1 ; 365 values given in the above reference. However, here we estimate p-quantiles; 366 for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; 367 .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; 368 .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; 369 First the appropriate p-quantiles are determined from those simulated; 370 for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; 371 Since we use only m=2 we avoid this interpolation. ; 372 ; 373 Next linear inetrpolation to find the observed p value given the observed test statistic value. ; 374 We use interpolation in the test statistic -> log((1-p)/p) domain; 375 and we extrapolatelinearly) beyond p = .00001 and .99999.; 376 */; 377 ; 378 // sample values ; 379 //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; 380 //int ns = ms.size();; 381 const int ns = 8;; 382 dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:12429,test,test,12429,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['test']
Testability,"d::runtime_error(msg);; 490 }; 491 ; 492 return fColTypes.at(colName.data());; 493}; 494 ; 495std::string RCsvDS::GetTypeName(std::string_view colName) const; 496{; 497 return fgColTypeMap.at(GetType(colName));; 498}; 499 ; 500bool RCsvDS::HasColumn(std::string_view colName) const; 501{; 502 return fHeaders.end() != std::find(fHeaders.begin(), fHeaders.end(), colName);; 503}; 504 ; 505bool RCsvDS::SetEntry(unsigned int slot, ULong64_t entry); 506{; 507 // Here we need to normalise the entry to the number of lines we already processed.; 508 const auto offset = (fEntryRangesRequested - 1) * fLinesChunkSize;; 509 const auto recordPos = entry - offset;; 510 int colIndex = 0;; 511 for (auto &colType : fColTypesList) {; 512 auto dataPtr = fRecords[recordPos][colIndex];; 513 switch (colType) {; 514 case 'D': {; 515 fDoubleEvtValues[colIndex][slot] = *static_cast<double *>(dataPtr);; 516 break;; 517 }; 518 case 'L': {; 519 fLong64EvtValues[colIndex][slot] = *static_cast<Long64_t *>(dataPtr);; 520 break;; 521 }; 522 case 'O': {; 523 fBoolEvtValues[colIndex][slot] = *static_cast<bool *>(dataPtr);; 524 break;; 525 }; 526 case 'T': {; 527 fStringEvtValues[colIndex][slot] = *static_cast<std::string *>(dataPtr);; 528 break;; 529 }; 530 }; 531 colIndex++;; 532 }; 533 return true;; 534}; 535 ; 536void RCsvDS::SetNSlots(unsigned int nSlots); 537{; 538 assert(0U == fNSlots && ""Setting the number of slots even if the number of slots is different from zero."");; 539 ; 540 fNSlots = nSlots;; 541 ; 542 const auto nColumns = fHeaders.size();; 543 // Initialize the entire set of addresses; 544 fColAddresses.resize(nColumns, std::vector<void *>(fNSlots, nullptr));; 545 ; 546 // Initialize the per event data holders; 547 fDoubleEvtValues.resize(nColumns, std::vector<double>(fNSlots));; 548 fLong64EvtValues.resize(nColumns, std::vector<Long64_t>(fNSlots));; 549 fStringEvtValues.resize(nColumns, std::vector<std::string>(fNSlots));; 550 fBoolEvtValues.resize(nColumns, std::deque<bool>(fNSlots));;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCsvDS_8cxx_source.html:17998,assert,assert,17998,doc/master/RCsvDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCsvDS_8cxx_source.html,1,['assert'],['assert']
Testability,"d::setw(maxL); 1667 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1668 << ""training events : "" << trainingSizePerClass.at(cls) << Endl;; 1669 Log() << kDEBUG << ""\t(sum of weights: "" << trainingSumWeightsPerClass.at(cls) << "")""; 1670 << "" - requested were "" << eventCounts[cls].nTrainingEventsRequested << "" events"" << Endl;; 1671 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1672 << setiosflags(ios::left) << std::setw(maxL); 1673 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1674 << ""testing events : "" << testingSizePerClass.at(cls) << Endl;; 1675 Log() << kDEBUG << ""\t(sum of weights: "" << testingSumWeightsPerClass.at(cls) << "")""; 1676 << "" - requested were "" << eventCounts[cls].nTestingEventsRequested << "" events"" << Endl;; 1677 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1678 << setiosflags(ios::left) << std::setw(maxL); 1679 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1680 << ""training and testing events: ""; 1681 << (trainingSizePerClass.at(cls)+testingSizePerClass.at(cls)) << Endl;; 1682 Log() << kDEBUG << ""\t(sum of weights: ""; 1683 << (trainingSumWeightsPerClass.at(cls)+testingSumWeightsPerClass.at(cls)) << "")"" << Endl;; 1684 if(eventCounts[cls].nEvAfterCut<eventCounts[cls].nEvBeforeCut) {; 1685 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << setiosflags(ios::left) << std::setw(maxL); 1686 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1687 << ""due to the preselection a scaling factor has been applied to the numbers of requested events: ""; 1688 << eventCounts[cls].cutScaling() << Endl;; 1689 }; 1690 }; 1691 Log() << kINFO << Endl;; 1692 ; 1693 // for information purposes; 1694 dsi.SetTrainingSumSignalWeights(trainingSumSignalWeights);; 1695 dsi.SetTrainingSumBackgrWeights(trainingSumBackgrWeights);; 1696 dsi.SetTestingSumSignalWeights(testingSumSignalWeights);; 1697 dsi.SetTestingSumBackgrWeights(testingSumBackgrWeights);; 1698 ; 1699 ; 1700}; Configurable.h; DataInputHandler.h; DataSetFactory.h; DataSetInfo.h; DataSet.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:78533,test,testingSizePerClass,78533,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testingSizePerClass']
Testability,"d::vector< TString > varNames);  ; ROCCurve * GetROC (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; ROCCurve * GetROC (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; void Greetings ();  Print welcome message. ;  ; void SetInputTreesFromEventAssignTrees ();  ; void WriteDataInformation (DataSetInfo &fDataSetInfo);  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! the training type ;  ; Bool_t fCorrelations;  ! enable to calculate correlations ;  ; std::vector< TMVA::VariableTransformBase * > fDefaultTrfs;  ! list of transformations on default DataSet ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ; TString fJobName;  ! jobname, used as extension in weight file names ;  ; Bool_t fModelPersistence;  ! option to save the trained model in xml file or using serialization ;  ; TString fOptions;  ! option string given by construction (presently only ""V"") ;  ; Bool_t fROC;  ! enable to calculate ROC values ;  ; Bool_t fSilentFile;  ! used in constructor without file ;  ; TString fTransformations;  ! list of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:19291,test,test,19291,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,2,"['log', 'test']","['logging', 'test']"
Testability,"d; ""UF"" = underflows included; by default underflows and overlows are not included. - igood:; igood=0 - no problems; For unweighted unweighted comparison; igood=1'There is a bin in the 1st histogram with less than 1 event'; igood=2'There is a bin in the 2nd histogram with less than 1 event'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'; For unweighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 1 event'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'; For weighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 10 effective; number of events'; igood=2'There is a bin in the 2nd histogram with less then 10 effective; number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. - chi2 - chisquare of the test; - ndf - number of degrees of freedom (important, when both histograms have the same; empty bins); - res - normalized residuals for further analysis. Double_t ComputeIntegral(); Compute integral (cumulative sum of bins); The result stored in fIntegral is used by the GetRandom functions.; This function is automatically called by GetRandom when the fIntegral; array does not exist or when the number of entries in the histogram; has changed since the previous call to GetRandom.; The resulting integral is normalized to 1. Double_t * GetIntegral(); Return a pointer to the array of bins integral.; if the pointer fIntegral is null, TH1::ComputeIntegral is called. void Copy(TObject& hnew) const; -*-*-*-*-*Copy this histogram structure to newth1*-*-*-*-*-*-*-*-*-*-*-*. Note that this function does not copy the list of associated functions.; Use TObJect::Clone to make a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the sema",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:55674,test,test,55674,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['test'],['test']
Testability,"d; Normal; ExtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStopwatch_cumulTimer; TMatrixDSym*_extV; RooMinimizerFcn*_fcn; RooAbsReal*_func; string_minimizerType; Bool_t_optConst; Int_t_printLevel; Bool_t_profile; Bool_t_profileStart; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static ROOT::Fit::Fitter*_theFitter; TStopwatch_timer; Bool_t_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinimizer(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinimizer(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setMaxIterations(Int_t n); Change maximum number of MINUIT iterations; (RooMinimizer default 500 * #parameters). void setMaxFunctionCalls(Int_t n); Change maximum number of l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinimizer.html:8333,log,log,8333,root/html534/RooMinimizer.html,https://root.cern,https://root.cern/root/html534/RooMinimizer.html,1,['log'],['log']
Testability,"d; else a max of; fgMaxTransferSize (about 1000 lines) per file is read, starting from; the end (i.e. the last ~1000 lines).; The received buffer is added to the file fname, if the latter is defined.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(const char* ord = ""*"", Int_t from = -10, Int_t to = -1); Display the content associated with worker 'ord' from line 'from'; to line 'to' inclusive. A negative value; for 'from' indicates lines counted from the end (tail action); 'to'; is ignored in such a case.; If 'ord' is ""*"" (default), all the workers are displayed. void Print(Option_t* opt = 0) const; Print head info about the content. void Prt(const char* what, Bool_t newline = kTRUE); Special printing procedure. Int_t Save(const char* ord = ""*"", const char* fname = 0, Option_t* opt = ""w""); Save the content associated with worker 'ord' to finel 'fname'.; If 'ord' is ""*"" (default), the log from all the workers is saved.; If 'opt' is ""a"" the file is open in append mode; otherwise the file; is truncated. Int_t Grep(const char* txt, Int_t from = 0); Search lines containing 'txt', starting from line 'from'.; Print the lines where this happens. void SetMaxTransferSize(Long64_t maxsz); Set max transfer size. TList * GetListOfLogs() const; { return fElem; }. TDatime StartTime(); { return fStartTime; }. void SetLogToBox(Bool_t lgbox = kFALSE); Where to log. { SetBit(kLogToBox, lgbox); }. Bool_t LogToBox(); { return (TestBit(kLogToBox)) ? kTRUE : kFALSE; }. » Author: G. Ganis 31/08/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: 5d579564fccbadad9cd6f81ccb7726dddea80e0d $ » Last generated: 2015-03-14 16:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLog.html:11570,log,log,11570,root/html534/TProofLog.html,https://root.cern,https://root.cern/root/html534/TProofLog.html,2,['log'],['log']
Testability,"d; it provides answers to the basic questions like ""Where am I ?"" or ""How far; from the next boundary ?"", but also to more complex ones like ""How far from; the closest surface ?"" or ""Which is the next crossing along a helix ?"". The architecture of the modeler is a combination between a GEANT-like; containment scheme and a normal CSG binary tree at the level of shapes. An; important common feature of all detector geometry descriptions is the; mother-daughter concept. This is the most natural approach when tracking; is concerned and imposes a set of constraints to the way geometry is defined.; Constructive solid geometry composition is used only in order to create more; complex shapes from an existing set of primitives through boolean operations.; This feature is not implemented yet but in future full definition of boolean; expressions will be supported. Practically every geometry defined in GEANT style can be mapped by the modeler.; The basic components used for building the logical hierarchy of the geometry; are called ""volumes"" and ""nodes"". Volumes (sometimes called ""solids"") are fully; defined geometrical objects having a given shape and medium and possibly; containing a list of nodes. Nodes represent just positioned instances of volumes; inside a container volume and they are not directly defined by user. They are; automatically created as a result of adding one volume inside other or dividing; a volume. The geometrical transformation hold by nodes is always defined with; respect to their mother (relative positioning). Reflection matrices are allowed.; All volumes have to be fully aware of their containees when the geometry is; closed. They will build aditional structures (voxels) in order to fasten-up; the search algorithms. Finally, nodes can be regarded as bidirectional links; between containers and containees objects. The structure defined in this way is a graph structure since volumes are; replicable (same volume can become daughter node of several other volu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:2033,log,logical,2033,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,6,['log'],['logical']
Testability,"d@ kRecoveredDefinition TFile.h:191; TFile::kReproducible@ kReproducibleDefinition TFile.h:197; TFile::kDevNull@ kDevNullDefinition TFile.h:193; TFile::kHasReferences@ kHasReferencesDefinition TFile.h:192; TFile::kRedirected@ kRedirectedDefinition TFile.h:196; TFile::k630forwardCompatibility@ k630forwardCompatibilityDefinition TFile.h:190; TFile::kWriteError@ kWriteErrorDefinition TFile.h:194; TFile::kBinaryFile@ kBinaryFileDefinition TFile.h:195; TFile::OpenFromCachestatic TFile * OpenFromCache(const char *name, Option_t *="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Open a file for reading through the file cache.Definition TFile.cxx:3874; TFile::fNProcessIDsInt_t fNProcessIDsNumber of TProcessID written to this file.Definition TFile.h:88; TFile::fWrittenInt_t fWrittenNumber of objects written so far.Definition TFile.h:87; TFile::GetRecordHeaderInt_t GetRecordHeader(char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen)Read the logical record header starting at a certain postion.Definition TFile.cxx:1301; TFile::ReadBuffervirtual Bool_t ReadBuffer(char *buf, Int_t len)Read a buffer from the file.Definition TFile.cxx:1770; TFile::GetCompressionFactorFloat_t GetCompressionFactor()Return the file compression factor.Definition TFile.cxx:1202; TFile::SysWritevirtual Int_t SysWrite(Int_t fd, const void *buf, Int_t len)Interface to system write. All arguments like in POSIX write().Definition TFile.cxx:4514; TFile::GetFileReadCallsstatic Int_t GetFileReadCalls()Static function returning the total number of read calls from all files.Definition TFile.cxx:4591; TFile::GetCacheReadTFileCacheRead * GetCacheRead(const TObject *tree=nullptr) constReturn a pointer to the current read cache.Definition TFile.cxx:1262; TFile::GetOptionOption_t * GetOption() const overrideDefinition TFile.h:240; TFile::fgAsyncOpenRequestsstatic TList * fgAsyncOpenRequestsDefinition TFile.h:122; TFre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h_source.html:48810,log,logical,48810,doc/master/TFile_8h_source.html,https://root.cern,https://root.cern/doc/master/TFile_8h_source.html,1,['log'],['logical']
Testability,"dArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooSplineA RooFit class for creating spline functions.Definition RooSpline.h:27; xDouble_t x[n]Definition legend1.C:17. Definition at line 27 of file RooSpline.h. Public Member Functions;  RooSpline ()=default;  ;  RooSpline (const char *name, const char *title, RooAbsReal &x, const TGraph &gr, int order=3, bool logx=false, bool logy=false);  Constructor for creating a spline from a TGraph. ;  ;  RooSpline (const char *name, const char *title, RooAbsReal &x, std::span< const double > x0, std::span< const double > y0, int order=3, bool logx=false, bool logy=false);  Constructor for creating a spline from raw data. ;  ;  RooSpline (const RooSpline &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  Virtual copy constructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analytic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpline.html:2102,log,logx,2102,doc/master/classRooSpline.html,https://root.cern,https://root.cern/doc/master/classRooSpline.html,2,['log'],"['logx', 'logy']"
Testability,"dBase::GetMaximumSignificancevirtual Double_t GetMaximumSignificance(Double_t SignalEvents, Double_t BackgroundEvents, Double_t &optimal_significance_value) constplot significance, , curve for given number of signal and background events; returns cut for maximum ...Definition MethodBase.cxx:2886; TMVA::MethodBase::GetTrainingEfficiencyvirtual Double_t GetTrainingEfficiency(const TString &)Definition MethodBase.cxx:2528; TMVA::MethodBase::SetWeightFileNamevoid SetWeightFileName(TString)set the weight file name (depreciated)Definition MethodBase.cxx:2068; TMVA::MethodBase::DataInfoDataSetInfo & DataInfo() constDefinition MethodBase.h:410; TMVA::MethodBase::MakeClassvirtual void MakeClass(const TString &classFileName=TString("""")) constcreate reader class for method (classification only at present)Definition MethodBase.cxx:3003; TMVA::MethodBase::GetWeightFileNameTString GetWeightFileName() constretrieve weight file nameDefinition MethodBase.cxx:2076; TMVA::MethodBase::SetTestTimevoid SetTestTime(Double_t testTime)Definition MethodBase.h:165; TMVA::MethodBase::fMethodTypeTypes::EMVA fMethodTypeDefinition MethodBase.h:616; TMVA::MethodBase::TestClassificationvirtual void TestClassification()initializationDefinition MethodBase.cxx:1127; TMVA::MethodBase::AddOutputvoid AddOutput(Types::ETreeType type, Types::EAnalysisType analysisType)Definition MethodBase.cxx:1315; TMVA::MethodBase::WriteMonitoringHistosToFilevirtual void WriteMonitoringHistosToFile() constwrite special monitoring histograms to file dummy implementation here --------------—Definition MethodBase.cxx:2133; TMVA::MethodBase::GetNVariablesUInt_t GetNVariables() constDefinition MethodBase.h:345; TMVA::MethodBase::fAnalysisTypeTypes::EAnalysisType fAnalysisTypeDefinition MethodBase.h:595; TMVA::MethodBase::AddRegressionOutputvirtual void AddRegressionOutput(Types::ETreeType type)prepare tree branch with the method's discriminating variableDefinition MethodBase.cxx:744; TMVA::MethodBase::InitBasevoid InitBase()d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:54157,test,testTime,54157,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['test'],['testTime']
Testability,"dCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration ; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration ; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:39053,log,log,39053,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,4,['log'],['log']
Testability,"dCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:37169,log,log,37169,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['log'],['log']
Testability,"dCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration ; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration ; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:37872,log,log,37872,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['log'],['log']
Testability,"dClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tRooAbsCategory::numTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinningCategory.html:9612,test,testArg,9612,root/html532/RooBinningCategory.html,https://root.cern,https://root.cern/root/html532/RooBinningCategory.html,4,['test'],['testArg']
Testability,"dFromXML (void *wghtnode);  read rule from XML ;  ; void ReadRaw (std::istream &os);  read function (format is the same as written by PrintRaw) ;  ; Double_t RuleDist (const Rule &other, Bool_t useCutValue) const;  Returns: ;  ; void SetCoefficient (Double_t v);  ; void SetImportanceRef (Double_t v);  ; void SetMsgType (EMsgType t);  ; void SetNorm (Double_t norm);  ; void SetRuleCut (RuleCut *rc);  ; void SetRuleEnsemble (const RuleEnsemble *re);  ; void SetSSB (Double_t v);  ; void SetSSBNeve (Double_t v);  ; void SetSupport (Double_t v);  . Private Member Functions; void Copy (const Rule &other);  copy function ;  ; const TString & GetVarName (Int_t i) const;  returns the name of a rule ;  ; MsgLogger & Log () const;  ; void Print (std::ostream &os) const;  print function ;  ; void SetSigma (Double_t v);  . Private Attributes; Double_t fCoefficient;  rule coeff. a(k) ;  ; RuleCut * fCut;  all cuts associated with the rule ;  ; Double_t fImportance;  importance of rule ;  ; Double_t fImportanceRef;  importance ref ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNorm;  normalization - usually 1.0/t(k) ;  ; const RuleEnsemble * fRuleEnsemble;  pointer to parent RuleEnsemble ;  ; Double_t fSigma;  t(k) = sqrt(s*(1-s)) ;  ; Double_t fSSB;  S/(S+B) for rule. ;  ; Double_t fSSBNeve;  N(events) reaching the last node in reevaluation. ;  ; Double_t fSupport;  s(k) ;  . Friends; std::ostream & operator<< (std::ostream &os, const Rule &rule);  . #include <TMVA/Rule.h>; Constructor & Destructor Documentation. ◆ Rule() [1/4]. TMVA::Rule::Rule ; (; RuleEnsemble * ; re, . const std::vector< const TMVA::Node * > & ; nodes . ). the main constructor for a Rule ; Definition at line 66 of file Rule.cxx. ◆ Rule() [2/4]. TMVA::Rule::Rule ; (; RuleEnsemble * ; re). the simple constructor ; Definition at line 94 of file Rule.cxx. ◆ Rule() [3/4]. TMVA::Rule::Rule ; (; const Rule & ; other). inline . Definition at line 64 of file Rule.h. ◆ Rule() [4/4]. TMVA::Rule::Rule ; (; ). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Rule.html:3327,log,logger,3327,doc/master/classTMVA_1_1Rule.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Rule.html,1,['log'],['logger']
Testability,"dNumber, . Types::ETreeType ; tt = Types::kTraining . ). Function for assigning the correct folds to the testing or training set. ; Definition at line 670 of file DataLoader.cxx. ◆ PrepareTrainingAndTestTree() [1/4]. void TMVA::DataLoader::PrepareTrainingAndTestTree ; (; const TCut & ; cut, . const TString & ; splitOpt . ). prepare the training and test trees -> same cuts for signal and background ; Definition at line 632 of file DataLoader.cxx. ◆ PrepareTrainingAndTestTree() [2/4]. void TMVA::DataLoader::PrepareTrainingAndTestTree ; (; const TCut & ; cut, . Int_t ; NsigTrain, . Int_t ; NbkgTrain, . Int_t ; NsigTest, . Int_t ; NbkgTest, . const TString & ; otherOpt = ""SplitMode=Random:!V"" . ). prepare the training and test trees ; Definition at line 602 of file DataLoader.cxx. ◆ PrepareTrainingAndTestTree() [3/4]. void TMVA::DataLoader::PrepareTrainingAndTestTree ; (; const TCut & ; cut, . Int_t ; Ntrain, . Int_t ; Ntest = -1 . ). prepare the training and test trees kept for backward compatibility ; Definition at line 618 of file DataLoader.cxx. ◆ PrepareTrainingAndTestTree() [4/4]. void TMVA::DataLoader::PrepareTrainingAndTestTree ; (; TCut ; sigcut, . TCut ; bkgcut, . const TString & ; splitOpt . ). prepare the training and test trees ; Definition at line 644 of file DataLoader.cxx. ◆ RecombineKFoldDataSet(). void TMVA::DataLoader::RecombineKFoldDataSet ; (; CvSplit & ; s, . Types::ETreeType ; tt = Types::kTraining . ). Recombines the dataset. ; The precise semantics depend on the actual split.; Similar to the inverse operation of MakeKFoldDataSet but will differ. See documentation for each particular split for more information. ; Definition at line 683 of file DataLoader.cxx. ◆ SetBackgroundTree(). void TMVA::DataLoader::SetBackgroundTree ; (; TTree * ; background, . Double_t ; weight = 1.0 . ). Definition at line 439 of file DataLoader.cxx. ◆ SetBackgroundWeightExpression(). void TMVA::DataLoader::SetBackgroundWeightExpression ; (; const TString & ; variable). De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:31638,test,test,31638,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['test'],['test']
Testability,"dObject(const TObject* obj) const; virtual voidTF1::FixParameter(Int_t ipar, Double_t value); Double_tTF1::GetChisquare() const; static TF1*TF1::GetCurrent(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Double_tTF1::GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*TF1::GetMethodCall() const; virtual Double_tTF1::GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTF1::GetNpx() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*TF1::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF12.html:4517,log,logx,4517,root/html530/TF12.html,https://root.cern,https://root.cern/root/html530/TF12.html,2,['log'],['logx']
Testability,"dObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalida",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:9849,log,loglevel,9849,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,1,['log'],['loglevel']
Testability,dPCA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0197 sec ; Factory : Test method: PDERS for Classification performance; : ; PDERS : [dataset] : Evaluation of PDERS on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.937 sec ; Factory : Test method: PDEFoam for Classification performance; : ; PDEFoam : [dataset] : Evaluation of PDEFoam on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.072 sec ; Factory : Test method: KNN for Classification performance; : ; KNN : [dataset] : Evaluation of KNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.2 sec ; Factory : Test method: LD for Classification performance; : ; LD : [dataset] : Evaluation of LD on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00474 sec ; : Dataset[dataset] : Evaluation of LD on testing sample; Factory : Test method: FDA_GA for Classification performance; : ; FDA_GA : [dataset] : Evaluation of FDA_GA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00327 sec ; Factory : Test method: MLPBNN for Classification performance; : ; MLPBNN : [dataset] : Evaluation of MLPBNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0193 sec ; Factory : Test method: DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.333 sec ; Factory : Test me,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:66927,test,testing,66927,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,['test'],['testing']
Testability,"dSetActivation(TMVA::TActivation* activation); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTMVA::MethodBase::SetCurrentEvent(Long64_t ievt) const; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidSetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodANNBase.html:10791,test,testTime,10791,root/html528/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodANNBase.html,1,['test'],['testTime']
Testability,"dSetPdf(RooAbsPdf&); virtual voidSetPriorNuisance(RooAbsPdf*); virtual voidSetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic* testStatistic); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatSamplerTestStatSampler(); RooStats::TestStatSamplerTestStatSampler(const RooStats::TestStatSampler&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. void Initialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. void SetNuisanceParameters(const RooArgSet& ); REMOVE THIS; specify the parameters of interest in the interval; virtual void SetParameters(const RooArgSet&) = 0;; specify the nuisance parameters (eg. the rest of the parameters). void SetObservables(const RooArgSet& ); specify the observables in the dataset (needed to evaluate the test statistic). void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__TestStatSampler.html:2512,test,test,2512,root/html602/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__TestStatSampler.html,2,['test'],['test']
Testability,"dTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTMVA::MethodBase::SetCurrentEvent(Long64_t ievt) const; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidSetTestSignalEfficiency(Double_t effS); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodCuts.html:13630,test,testTime,13630,root/html530/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodCuts.html,2,['test'],['testTime']
Testability,"dTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Float_tfBparmfree pla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodSVM.html:15084,test,testing,15084,root/html530/TMVA__MethodSVM.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodSVM.html,3,['test'],['testing']
Testability,"dTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Float_tfBparmfree plane coefficient ; Float_tfCostcost value; Float_tfDoubleSigmaSquaredfor RBF Kern",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodSVM.html:14543,test,testing,14543,root/html528/TMVA__MethodSVM.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodSVM.html,1,['test'],['testing']
Testability,"dTMVA::MethodCFMlpANN_Utils::Train_nn(Double_t* tin2, Double_t* tout2, Int_t* ntrain, Int_t* ntest, Int_t* nvar2, Int_t* nlayer, Int_t* nodes, Int_t* ncycle); Double_tTMVA::MethodCFMlpANN_Utils::W_ref(const Double_t* wNN, Int_t a_1, Int_t a_2, Int_t a_3) const; Double_t&TMVA::MethodCFMlpANN_Utils::W_ref(Double_t* wNN, Int_t a_1, Int_t a_2, Int_t a_3); voidTMVA::MethodCFMlpANN_Utils::Wini(); Double_tTMVA::MethodCFMlpANN_Utils::Ww_ref(const Double_t* wwNN, Int_t a_1, Int_t a_2) const; Double_t&TMVA::MethodCFMlpANN_Utils::Ww_ref(Double_t* wwNN, Int_t a_1, Int_t a_2). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<Int_t>*fClasst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodCFMlpANN.html:18707,test,testing,18707,root/html530/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodCFMlpANN.html,3,['test'],['testing']
Testability,"dTMVA::MethodCFMlpANN_Utils::Train_nn(Double_t* tin2, Double_t* tout2, Int_t* ntrain, Int_t* ntest, Int_t* nvar2, Int_t* nlayer, Int_t* nodes, Int_t* ncycle); Double_tTMVA::MethodCFMlpANN_Utils::W_ref(const Double_t* wNN, Int_t a_1, Int_t a_2, Int_t a_3) const; Double_t&TMVA::MethodCFMlpANN_Utils::W_ref(Double_t* wNN, Int_t a_1, Int_t a_2, Int_t a_3); voidTMVA::MethodCFMlpANN_Utils::Wini(); Double_tTMVA::MethodCFMlpANN_Utils::Ww_ref(const Double_t* wwNN, Int_t a_1, Int_t a_2) const; Double_t&TMVA::MethodCFMlpANN_Utils::Ww_ref(Double_t* wwNN, Int_t a_1, Int_t a_2). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<Int_t>*fClassthe event class (1=signal, 2=background); TMVA::MethodCFMlpANN_Utils::TMVA::Meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html:18166,test,testing,18166,root/html528/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html,1,['test'],['testing']
Testability,"dTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TF1*fApproxPosteriorTF1 representing the scanned posterior function; doublefBrfPrecisionroot finder precision; RooAbsData*fData; RooAbsReal*fIntegratedLikelihoodintegrated likelihood function, i.e - unnormalized posterior function ; TStringfIntegrationType; doublefLeftSideFractionfraction of probability content on left side of interval; RooAbsReal*fLikelihoodinternal pointer to likelihood function ; RooAbsReal*fLogLikeinternal pointer to log likelihood function; Double_tfLowercomputer lower interval bound; Double_tfNLLMinminimum value of Nll ; intfNScanBinsnumber of bins to scan, if = -1 no scan is done (default); RooArgSetfNuisanceParameters; RooArgSetfPOI; RooAbsPdf*fPdf; ROOT::Math::IBaseFunctionOneDim*fPosteriorFunctionfunction representing the posterior; RooAbsPdf*fPosteriorPdfnormalized (on the poi) posterior pdf ; RooAbsPdf*fPriorPOI; RooAbsPdf*fProductPdfinternal pointer to model * prior; doublefSizesize used for getting the interval; Double_tfUpperupper interval bound; Bool_tfValidInterval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BayesianCalculator(); default constructor. BayesianCalculator( /* const char* name, const char* title, */ RooAbsData& data, RooAbsPdf& pdf,						 const RooArgSet& POI,						 RooAbsPdf& priorPOI,						 const RooArgSet* nuisanceParameters ); TNamed( TString(name), TString(title) ),; constructor. BayesianCalculator(RooAbsData& data, RooStats::ModelConfig& model); constructor from Model Config. ~BayesianCalculator(); destructor. void ClearAll() const; clear cached pdf objects. void SetModel(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__BayesianCalculator.html:7239,log,log,7239,root/html528/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__BayesianCalculator.html,1,['log'],['log']
Testability,"dTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tEnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tEnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tEnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tExec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tExec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tFinalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tFinalize(const char* queryref, Bool_t force = kFALSE); TList*FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBytesRead() const; Int_tGetClientProtocol() const; const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataPoolUrl() const; virtual TFileCollection*GetDataSet(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:5973,log,logtomacro,5973,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['log'],['logtomacro']
Testability,"dTypefCoordType; Double_tfFactor; Bool_tfModified; pair<int,int>fXBins; Bool_tfXLog; pair<double,double>fXRange; pair<double,double>fXRangeScaled; Double_tfXScale; pair<int,int>fYBins; Bool_tfYLog; pair<double,double>fYRange; pair<double,double>fYRangeScaled; Double_tfYScale; pair<int,int>fZBins; Bool_tfZLog; pair<double,double>fZRange; pair<double,double>fZRangeScaled; Double_tfZScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlotCoordinates(); Constructor. ~TGLPlotCoordinates(); Destructor. void SetCoordType(EGLCoordType type); If coord type was changed, plot must reset sections (if any),; set fModified. EGLCoordType GetCoordType() const; Get coordinates type. void SetXLog(Bool_t xLog); If log changed, sections must be reset,; set fModified. Bool_t GetXLog() const; Get X log. void SetYLog(Bool_t yLog); If log changed, sections must be reset,; set fModified. Bool_t GetYLog() const; Get Y log. void SetZLog(Bool_t zLog); If log changed, sections must be reset,; set fModified. Bool_t GetZLog() const; Get Z log. void ResetModified(); Reset modified. Bool_t Modified() const; Modified. Bool_t SetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Set bin ranges, ranges. Int_t GetNXBins() const; Number of X bins. Int_t GetNYBins() const; Number of Y bins. Int_t GetNZBins() const; Number of Z bins. const Rgl::BinRange_t & GetXBins() const; X bins range. const Rgl::BinRange_t & GetYBins() const; Y bins range. const Rgl::BinRange_t & GetZBins() const; Z bins range. const Rgl::Range_t & GetXRange() const; X range. Double_t GetXLength() const; X length. const Rgl::Range_t & GetYRange() const; Y range. Double_t GetYLength() const; Y length. const Rgl::Range_t & GetZRange() const; Z range. Double_t GetZLength() const; Z length. const Rgl::Range_t & GetXRangeScaled() const; Scaled range. const Rgl::Range_t & GetYRangeScaled() const; Scaled range. const Rgl::Range_t & GetZRangeScaled() const; Scaled range. Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPlotCoordinates.html:3279,log,log,3279,root/html528/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html528/TGLPlotCoordinates.html,4,['log'],['log']
Testability,"dValue(""trainingError"",stepCount,trainingError);; 1246 ; 1247 if (fInteractive){; 1248 fInteractive->AddPoint(stepCount, trainingError, testError);; 1249 fIPyCurrentIter = 100*(double)minimizer.GetConvergenceCount() /(double)settings.convergenceSteps;; 1250 if (fExitFromTraining) break;; 1251 }; 1252 ; 1253 // Compute numerical throughput.; 1254 std::chrono::duration<double> elapsed_seconds = end - start;; 1255 double seconds = elapsed_seconds.count();; 1256 double nFlops = (double) (settings.testInterval * batchesInEpoch);; 1257 nFlops *= net.GetNFlops() * 1e-9;; 1258 ; 1259 converged = minimizer.HasConverged(testError);; 1260 start = std::chrono::system_clock::now();; 1261 ; 1262 if (fInteractive) {; 1263 fInteractive->AddPoint(stepCount, trainingError, testError);; 1264 fIPyCurrentIter = 100.0 * minimizer.GetConvergenceCount(); 1265 / minimizer.GetConvergenceSteps ();; 1266 if (fExitFromTraining) break;; 1267 } else {; 1268 Log() << std::setw(10) << stepCount << "" | ""; 1269 << std::setw(12) << trainingError; 1270 << std::setw(12) << testError; 1271 << std::setw(12) << nFlops / seconds; 1272 << std::setw(12) << minimizer.GetConvergenceCount() << Endl;; 1273 if (converged) {; 1274 Log() << Endl;; 1275 }; 1276 }; 1277 }; 1278 }; 1279 ; 1280 ; 1281 for (size_t l = 0; l < net.GetDepth(); l++) {; 1282 auto & layer = fNet.GetLayer(l);; 1283 layer.GetWeights() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetWeights();; 1284 layer.GetBiases() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetBiases();; 1285 }; 1286 }; 1287 ; 1288#else // DNNCPU flag not set.; 1289 Log() << kFATAL << ""Multi-core CPU backend not enabled. Please make sure ""; 1290 ""you have a BLAS implementation and it was successfully ""; 1291 ""detected by CMake as well that the imt CMake flag is set."" << Endl;; 1292#endif // DNNCPU; 1293}; 1294 ; 1295////////////////////////////////////////////////////////////////////////////////; 1296 ; 1297Double_t TMVA::MethodDNN::GetMvaValue( Double_t* /*errLower*/, Double_t* /*errUppe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:45896,test,testError,45896,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testError']
Testability,"d] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooDataSet*_dataSummary dataset to store results; RooRealVar*_dll0hContainer variable for delta NLL ; RooRealVar*_nll0hContainer variable for NLL result on null hypothesis; Double_t_nullValueNumeric value of Nsignal parameter representing the null hypothesis; string_parNameName of Nsignal parameter; RooRealVar*_sig0hContainer variable for NLL result with signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDLLSignificanceMCSModule(const RooRealVar& param, Double_t nullHypoValue = 0); Constructor of module with parameter to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const char* parName, Double_t nullHypoValue = 0); Constructor of module with parameter name to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const RooDLLSignificanceMCSModule& other); Copy constructor. Bool_t initializeInstance(); Initialize module after attachment to RooMCStudy object. Bool_t initializeRun(Int_t ); Initialize module at beginning of RooCMStudy run. RooDataSet* finalizeRun(); Return auxiliary dataset with results of delta(-log(L)); calculations of this module so that it is merged with; RooMCStudy::fitParDataSet() by RooMCStudy. Bool_t processAfterFit(Int_t ); Save likelihood from nominal fit, fix chosen parameter to its; null hypothesis value and rerun fit Save difference in likelihood; and associated Gaussian significance in auxilary dataset. virtual ~RooDLLSignificanceMCSModule(). » Last changed: Thu Sep 23 19:59:24 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDLLSignificanceMCSModule.html:8765,log,log,8765,root/html528/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html528/RooDLLSignificanceMCSModule.html,1,['log'],['log']
Testability,"d] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooDataSet*_dataSummary dataset to store results; RooRealVar*_dll0hContainer variable for delta NLL ; RooRealVar*_nll0hContainer variable for NLL result on null hypothesis; Double_t_nullValueNumeric value of Nsignal parameter representing the null hypothesis; string_parNameName of Nsignal parameter; RooRealVar*_sig0hContainer variable for NLL result with signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDLLSignificanceMCSModule(const RooRealVar& param, Double_t nullHypoValue = 0); Constructor of module with parameter to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const char* parName, Double_t nullHypoValue = 0); Constructor of module with parameter name to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const RooDLLSignificanceMCSModule& other); Copy constructor. Bool_t initializeInstance(); Initialize module after attachment to RooMCStudy object. Bool_t initializeRun(Int_t ); Initialize module at beginning of RooCMStudy run. RooDataSet* finalizeRun(); Return auxiliary dataset with results of delta(-log(L)); calculations of this module so that it is merged with; RooMCStudy::fitParDataSet() by RooMCStudy. Bool_t processAfterFit(Int_t ); Save likelihood from nominal fit, fix chosen parameter to its; null hypothesis value and rerun fit Save difference in likelihood; and associated Gaussian significance in auxilary dataset. virtual ~RooDLLSignificanceMCSModule(). » Last changed: Tue Mar 10 17:16:10 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDLLSignificanceMCSModule.html:8853,log,log,8853,root/html534/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html534/RooDLLSignificanceMCSModule.html,1,['log'],['log']
Testability,"da/2 * epsilon) is the result. The derivatives; dx_k/dy_i; dx_k/dA_ij; dx_k/d(tau^2); are calculated for further usage. The covariance matrix V_xx is calculated as:; Vxx_ij = sum_kl dx_i/dy_k Vyy_kl dx_j/dy_l. Warning:. The algorithm is based on ""standard"" matrix inversion, with the; known limitations in numerical accuracy and computing cost for; matrices with large dimensions. Thus the algorithm should not used for large dimensions of x and y; nx should not be much larger than 200; ny should not be much larger than 1000. Proper choice of tau. One of the difficult questions is about the choice of tau.; The method implemented in TUnfold is the L-curve method:; a two-dimensional curve is plotted; x-axis: log10(chisquare); y-axis: log10(regularisation condition); In many cases this curve has an L-shape. The best choice of tau is in the; kink of the L. Within TUnfold a simple version of the L-curve analysis is available.; It tests a given number of points in a predefined tau-range and searches; for the maximum of the curvature in the L-curve (kink position).; if no tau range is given, the range of the scan is determined automatically. A nice overview of the L-curve method is given in:; The L-curve and Its Use in the Numerical Treatment of Inverse Problems; (2000) by P. C. Hansen, in Computational Inverse Problems in; Electrocardiology, ed. P. Johnston,; Advances in Computational Bioengineering; http://www.imm.dtu.dk/~pch/TR/Lcurve.ps. Alternative Regularisation conditions. Regularisation is needed for most unfolding problems, in order to avoid; large oscillations and large correlations on the output bins.; It means that some extra conditions are applied on the output bins. Within TUnfold these conditions are posed on the difference (x-x0), where; x: unfolding output; x0: the bias distribution, by default calculated from; the input matrix A. There is a method SetBias() to change the; bias distribution.; The 3rd argument to DoUnfold() is a scale factor applied to the bias",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:4928,test,tests,4928,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,3,['test'],['tests']
Testability,"data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf if not already there. { fPdf = &pdf; }. void SetPriorPdf(RooAbsPdf& pdf); Set the Prior Pdf if not already there. { fPriorPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetChainParameters(const RooArgSet& set); specify the parameters to store in the Markov chain; By default all the parameters are stored. { fChainParams.removeAll(); fChainParams.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetProposalFunction(RooStats::ProposalFunction& proposalFunction); set the proposal function for suggesting new points for the MCMC. { fPropFunc = &proposalFunction; }. void SetNumIters(Int_t numIters); set the number of iterations to run the metropolis algorithm. { fNumIters = numIters; }. void SetNumBurnInSteps(Int_t numBurnInSteps); set the number of steps in the chain to discard as burn-in,; starting from the first. { fNumBurnInSteps = numBurnInSteps; }. void SetNumBins(Int_t numBins); set the number of bins to create for each axis when constructing the interval. { fNumBins = numBins; }. void SetAxes(RooArgList& axes); set which variables to put on each axis. { fAxes = &axes; }. void SetUseKeys(Bool_t useKeys); set whether to use kernel estima",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__MCMCCalculator.html:10500,test,test,10500,root/html534/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__MCMCCalculator.html,3,['test'],['test']
Testability,"data_wrapper(struct mg_connection *conn,; 13966 int bits,; 13967 char *data,; 13968 size_t len,; 13969 void *cbdata); 13970{; 13971 struct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;; 13972 if (pcallbacks->websocket_data) {; 13973 return pcallbacks->websocket_data(conn, bits, data, len);; 13974 }; 13975 /* No handler set - assume ""OK"" */; 13976 return 1;; 13977}; 13978 ; 13979 ; 13980static void; 13981experimental_websocket_client_close_wrapper(const struct mg_connection *conn,; 13982 void *cbdata); 13983{; 13984 struct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;; 13985 if (pcallbacks->connection_close) {; 13986 pcallbacks->connection_close(conn);; 13987 }; 13988}; 13989#endif; 13990 ; 13991 ; 13992/* Decrement recount of handler. conn must not be NULL, handler_info may be NULL; 13993 */; 13994static void; 13995release_handler_ref(struct mg_connection *conn,; 13996 struct mg_handler_info *handler_info); 13997{; 13998 if (handler_info != NULL) {; 13999 /* Use context lock for ref counter */; 14000 mg_lock_context(conn->phys_ctx);; 14001 handler_info->refcount--;; 14002 mg_unlock_context(conn->phys_ctx);; 14003 }; 14004}; 14005 ; 14006 ; 14007/* This is the heart of the Civetweb's logic.; 14008 * This function is called when the request is read, parsed and validated,; 14009 * and Civetweb must decide what action to take: serve a file, or; 14010 * a directory, or call embedded function, etcetera. */; 14011static void; 14012handle_request(struct mg_connection *conn); 14013{; 14014 struct mg_request_info *ri = &conn->request_info;; 14015 char path[UTF8_PATH_MAX];; 14016 int uri_len, ssl_index;; 14017 int is_found = 0, is_script_resource = 0, is_websocket_request = 0,; 14018 is_put_or_delete_request = 0, is_callback_resource = 0,; 14019 is_template_text_file = 0;; 14020 int i;; 14021 struct mg_file file = STRUCT_FILE_INITIALIZER;; 14022 mg_request_handler callback_handler = NULL;; 14023 struct mg_handler_info *handler_info = NULL;; 14024 struct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:409840,log,logic,409840,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['log'],['logic']
Testability,"data_wrapper(struct mg_connection *conn,; 13967 int bits,; 13968 char *data,; 13969 size_t len,; 13970 void *cbdata); 13971{; 13972 struct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;; 13973 if (pcallbacks->websocket_data) {; 13974 return pcallbacks->websocket_data(conn, bits, data, len);; 13975 }; 13976 /* No handler set - assume ""OK"" */; 13977 return 1;; 13978}; 13979 ; 13980 ; 13981static void; 13982experimental_websocket_client_close_wrapper(const struct mg_connection *conn,; 13983 void *cbdata); 13984{; 13985 struct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;; 13986 if (pcallbacks->connection_close) {; 13987 pcallbacks->connection_close(conn);; 13988 }; 13989}; 13990#endif; 13991 ; 13992 ; 13993/* Decrement recount of handler. conn must not be NULL, handler_info may be NULL; 13994 */; 13995static void; 13996release_handler_ref(struct mg_connection *conn,; 13997 struct mg_handler_info *handler_info); 13998{; 13999 if (handler_info != NULL) {; 14000 /* Use context lock for ref counter */; 14001 mg_lock_context(conn->phys_ctx);; 14002 handler_info->refcount--;; 14003 mg_unlock_context(conn->phys_ctx);; 14004 }; 14005}; 14006 ; 14007 ; 14008/* This is the heart of the Civetweb's logic.; 14009 * This function is called when the request is read, parsed and validated,; 14010 * and Civetweb must decide what action to take: serve a file, or; 14011 * a directory, or call embedded function, etcetera. */; 14012static void; 14013handle_request(struct mg_connection *conn); 14014{; 14015 struct mg_request_info *ri = &conn->request_info;; 14016 char path[UTF8_PATH_MAX];; 14017 int uri_len, ssl_index;; 14018 int is_found = 0, is_script_resource = 0, is_websocket_request = 0,; 14019 is_put_or_delete_request = 0, is_callback_resource = 0,; 14020 is_template_text_file = 0;; 14021 int i;; 14022 struct mg_file file = STRUCT_FILE_INITIALIZER;; 14023 mg_request_handler callback_handler = NULL;; 14024 struct mg_handler_info *handler_info = NULL;; 14025 struct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:409873,log,logic,409873,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['log'],['logic']
Testability,dataset manager; Float_tfEffSessionsEffective Number of PROOF sessions on the assigned machines; TList*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; Int_tfInflateFactorFactor in 1/1000 to inflate the CPU time; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:17941,log,logging,17941,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,1,['log'],['logging']
Testability,datasetreg/weights/TMVARegression_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdatasetreg/weights/TMVARegression_BDTG.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: PDEFoam for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of PDEFoam on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.0705 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: KNN for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of KNN on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.0918 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: LD for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of LD on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.00483 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: DNN_CPU for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of DNN_CPU on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.231 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: BDTG for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of BDTG on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 2.1 sec ; : Create variable histograms; : C,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:127995,test,testing,127995,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,2,['test'],['testing']
Testability,"dated; Int_tfDrawQueriesnumber of draw queries during this sessions; TList*fEnabledPackagesOnClientlist of packages enabled on client; TList*fEnabledPackagesOnClusterlist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; TList*fFeedbacklist of names to be returned as feedback; TProof::FileMap_tfFileMapmap keeping track of a file's md5 and mod time; Bool_tfFinalizationRunning; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupPROOF group of this user; TList*fInactiveSlaveslist of inactive slaves (good but not used for processing); TList*fInputDataInput data objects sent over via file; TStringfInputDataFileFile with input data objects; TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfIsPollingWorkerswill be set to kFALSE to prevent recursive dyn workers check in dyn mode; Bool_tfIsWaitingtrue if queries have been enqueued; Int_tfLastAssignedMerger; Long64_tfLastPollWorkers_stimestamp (in seconds) of last poll for workers, -1 if never checked; TList*fLoadedMacrosList of loaded macros (just file names); TStringfLogFileNamename of the temp file for redirected logs; FILE*fLogFileRtemp file to read redirected logs; FILE*fLogFileWtemp file to redirect logs; Int_tfLogLevelserver debug logging level; Bool_tfLogToWindowOnlysend log to window only; TMacrofMacroLogMacro with the saved (last) log; TStringfMastermaster server ("""" if a master); used in the browser; Int_tfMaxDrawQueriesmax number of draw queries kept; TProofMergePrgfMergePrgMerging progress; TList*fMergers; Bool_tfMergersByHostMergers assigned by host name; Int_tfMergersCount; Bool_tfMergersSetIndicates, if the following variables have been initialized properly; TList*fNonUniqueMasterslist of all active masters with a nonunique file system; Int_tfNotIdleNumber of non-idle sub-nodes; Int_tfOtherQueriesnumber of queries in list from previous sessions; TProofOutputListfOutputListTList implementation filtering ls(.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:32272,log,logs,32272,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,6,['log'],"['log', 'logging', 'logs']"
Testability,"dd( x );; 496 fSumContent += y;; 497 if (y != 0 || eyl != 1.0 || eyh != 1.0) fSumError2 += (eyl+eyh)*(eyl+eyh)/4;; 498 ; 499 }; 500 ; 501 /**; 502 add multi-dim coordinate data with only value; 503 */; 504 void BinData::Add( const double* x, double val ); 505 {; 506 assert( kNoError == fErrorType );; 507 ; 508 assert( !fData.empty() && fDataPtr );; 509 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 510 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 511 assert( fDataError.empty() && !fDataErrorPtr );; 512 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 513 ; 514 fData[ fNPoints ] = val;; 515 ; 516 FitData::Add( x );; 517 fSumContent += val;; 518 }; 519 ; 520 /**; 521 add multi-dim coordinate data with only error in value; 522 The class stores internally the inverse of the error in this case; 523 */; 524 void BinData::Add( const double* x, double val, double eval ); 525 {; 526 assert( kValueError == fErrorType );; 527 assert( !fData.empty() && fDataPtr );; 528 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 529 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 530 assert( !fDataError.empty() && fDataErrorPtr );; 531 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 532 ; 533 fData[ fNPoints ] = val;; 534 fDataError[ fNPoints ] = (eval != 0.0) ? 1.0/eval : 0.0;; 535 ; 536 FitData::Add( x );; 537 fSumContent += val;; 538 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 539 if (!fIsWeighted); 540 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 541 }; 542 ; 543 /**; 544 add multi-dim coordinate data with both error in coordinates and value; 545 */; 546 void BinData::Add( const double* x, double val, const double* ex, double eval ); 547 {; 548 assert( kCoordError == fErrorType );; 549 assert( !fData.empty() && fDataPtr );; 550 assert( !fDataError.empty() && fDataErrorPtr );; 551 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 552 assert( fDataErrorLow.empty() && !fDataErrorLow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:16090,assert,assert,16090,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"ddition, GetAdetCovMatrix allows for the propagation of the statistical uncertainties on the response matrix using pseudo experiments. The covariance matrix corresponding to Bcov is also computed as described in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] and can be obtained from tsvdunf->GetXtau() and its (regularisation independent) inverse from tsvdunf->GetXinv(). The distribution of singular values can be retrieved using tsvdunf->GetSV(). ; See also the tutorial for a toy example. ; Definition at line 46 of file TSVDUnfold.h. Public Member Functions;  TSVDUnfold (const TH1D *bdat, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Alternative constructor User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. ;  ;  TSVDUnfold (const TH1D *bdat, TH2D *Bcov, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Default constructor Initialisation of TSVDUnfold User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. ;  ;  TSVDUnfold (const TSVDUnfold &other);  Copy constructor. ;  ;  ~TSVDUnfold () override;  Destructor. ;  ; Double_t ComputeChiSquared (const TH1D &truspec, const TH1D &unfspec);  Helper routine to compute chi-squared between distributions using the computed inverse of the covariance matrix for the unfolded spectrum as given in paper. ;  ; TH2D * GetAdetCovMatrix (Int_t ntoys, Int_t seed=1);  Determine covariance matrix of unfolded spectrum from finite statistics in response matrix using pseudo experiments ""ntoys"" - number of pseudo experiments used for the propagation ""seed"" - seed for pseudo experiments. ;  ; TH2D * GetBCov () const;  Returns the covariance matrix. ;  ; TH1D * GetD () const;  Returns d vector (for choosing appropriate regularisation) ;  ; Int_t GetKReg () const;  ; TH1D * GetSV () const;  Returns singular values vector. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVDUnfold.html:3882,test,test,3882,doc/master/classTSVDUnfold.html,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html,1,['test'],['test']
Testability,"de Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Shifter's Instructions. These are the aspects the shifter shall keep under control; The shifter summarises the events of the week during the ROOT meeting. The hand-over to the next shifter must be carefully handled.; Forum Posts; All forum posts have to be followed up. Some hours can be given to the community to discuss the questions but an answer from the ROOT team must be given within 24 hours. It is responsibility of the shifter to make sure this happens, either answering or involving the relevant expert.; Failing tests; The shifter has the responsibility to ""keep the builds green"". She needs to fix the broken tests in the incremental and nightly builds and/or involve the relevant experts to make that happen.; Open pull requests; The shifter has the responsibility to follow up PRs if the relevant expert did not either interacting with the contributor or involving the relevant expert. Again, feedback needs to be given within 24 hours after the PR submission. Simple PRs should be reviewed. For simple PRs submitted by a contributor, the shifter should merge them immediately if they are acceptable (i.e. passing continuous integration and shifter's review). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/shifters-instructions.html:2394,test,tests,2394,d/shifters-instructions.html,https://root.cern,https://root.cern/d/shifters-instructions.html,1,['test'],['tests']
Testability,"de ready for the new production release, and to provide early feedback.; Development release; Use this to get access to the latest and greatest, but as a side effect there might be some instabilities. However, by trying out the development version you can help us converge much more quickly to a stable version that can then become the new production version.; Nightlies; You can download nightly snapshots of ROOT. That's useful to check whether a bug fix actually fixes an issue you reported, or to see the newest feature you heard about. It helps us tremendously to get feedback from you on nightlies: please try them out and report back to us!; Using binaries; After unpacking / installing the binary, and before using ROOT you should use a special script distributed with ROOT:; source <pathname>/root/bin/thisroot.sh (there are versions for [t]csh and fish, too.); where <pathname> is the location where you unpacked the ROOT distribution.; Typically add these lines to your .profile or .login files. Docker (Experimental); We also provide ROOT in Docker containers, for more information see Docker Hub.; The following recent versions are available for download:. Latest ROOT Releases. ; Pro ; Release 6.20/04 - 2020-04-01 ; . Old ; Release 6.18/04 - 2019-09-11 ; ; ; . Version 6 ; ; Release 6.20/06 - 2020-06-10. Release 6.20/04 - 2020-04-01. Release 6.20/02 - 2020-03-15. Release 6.20/00 - 2020-02-26. Release 6.19/02 - 2020-01-10. Release 6.18/04 - 2019-09-11. Release 6.18/02 - 2019-08-23. . . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/downloading-root.html:3639,log,login,3639,d/downloading-root.html,https://root.cern,https://root.cern/d/downloading-root.html,1,['log'],['login']
Testability,"de. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. Boosting:; the idea behind the boosting is, that signal events from the training sample, that *end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Analysis:; applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likelihood"" estimator is constructed for the event being signal or background. The value of this estimator is the one which is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 49 of file MethodDT.h. Public Member Functions;  MethodDT (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  the standard constructor for just an ordinar ""decision trees"" ;  ;  MethodDT (DataSetInfo &dsi, const TString &theWeightFile);  constructor from Reader ;  ; virtual ~MethodDT (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  ; const Ranking * CreateRanking ();  ; void DeclareCompatibilityO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:2829,test,test,2829,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,1,['test'],['test']
Testability,"de0/node1/...Definition TGeoManager.cxx:2881. The current node, volume and material. In order to take decisions on post-step or further stepping actions, one has to know these. In order to get a pointer to the current node one can do:. TGeoNode *cnode = gGeoManager->GetCurrentNode();; // then:; TGeoVolume *cvol = gGeoManager->GetCurrentVolume();; // or:; cvol = cnode->GetVolume(); // (*); // then:; TGeoMaterial *cmat = cvol->GetMedium()->GetMaterial();; TGeoManager::GetCurrentVolumeTGeoVolume * GetCurrentVolume() constDefinition TGeoManager.h:503; TGeoMedium::GetMaterialTGeoMaterial * GetMaterial() constDefinition TGeoMedium.h:49; TGeoNode::GetVolumeTGeoVolume * GetVolume() constDefinition TGeoNode.h:99; TGeoVolume::GetMediumTGeoMedium * GetMedium() constDefinition TGeoVolume.h:175; (*) Note: If the current point is in fact outside the geometry, the current node pointer will not be NULL, but pointing to the top node.; In order to take decisions in such case one needs always to test:; if (gGeoManager->IsOutside()) {; // current point is actually outside; ... // corresponding action; }; TGeoManager::IsOutsideBool_t IsOutside() constDefinition TGeoManager.h:406; Specific information related to the current volume/node like ID's or shape can be then retrieved from the corresponding objects. Current state index. The number of possible different states of the modeller corresponds to the number of different objects/paths in the geometry. This has nothing to do with the number of nodes, since the same node can be found on different branches. In other words, the number of states corresponds to the number of nodes in the expanded geometry tree. Since unfortunately this expansion from logical to physical hierarchy cannot be stored on regular basis due to the large size of the latter, one cannot directly assign state numbers. If the size of the expansion proves however to be small enough (less than about 50 million objects), a parallel structure storing these state indices is bui",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:74835,test,test,74835,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['test'],['test']
Testability,"deal for rotated shapes.; As we need to support orientated (rotated) bounding boxes, TBuffer3D requires the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(), for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference frames: fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer (bounding box and tessellation vertexes) are in local or master (world frame). fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering) for placing the object into the 3D master frame.; If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This is set by default, and can be reset using SetLocalMasterIdentity() function. Logical & Physical Objects; There are two cases of object addition:. Add this object as a single independent entity in the world reference frame.; Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have very large number repeated placements of relatively few logical (unique) shapes. Some viewers (OpenGL only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching with considerable performance gains in these cases.; For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. The viewer indicates this through the interface method PreferLocalFrame(); TVirtualViewer3D::PreferLocalFramevirtual Bool_t PreferLocalFrame() const =0; If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:7336,log,logical,7336,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['log'],['logical']
Testability,"default constructor; fWS = new RooWorkspace();; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. ~NeymanConstruction(); default constructor; if(fOwnsWorkspace && fWS) delete fWS;; if(fConfBelt) delete fConfBelt;. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::SetInterval. NeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); NeymanConstruction();. void SetTestStatSampler(RooStats::TestStatSampler& sampler); in addition to interface we also need:; Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic). {fTestStatSampler = &sampler;}. void SetLeftSideTailFraction(Double_t leftSideFraction = 0.); fLeftSideTailFraction*fSize defines lower edge of acceptance region.; Unified limits use 0, central limits use 0.5,; for upper/lower limits it is 0/1 depends on sign of test statistic w.r.t. parameter. {fLeftSideFraction = leftSideFraction;}. void SetParameterPointsToTest(RooAbsData& pointsToTest); User-defined set of points to test. Double_t Size() const; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (common for each dimension); void SetNumSteps(Int_t);; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (specific for each dimension); void SetNumSteps(map<RooAbsArg, Int_t>); Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetModel(const RooStats::ModelConfig& model); Set ModelConfig. {fModel = model;}. void SetData(RooAbsData& data); Set the DataSet. { fData = data; }. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetParameters(const RooArgSet& ); specify the parameters of interest in the interval. void SetNuisanceParameters(const RooArgSet& ); specify the nui",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:5550,test,test,5550,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,3,['test'],['test']
Testability,"default constructor; fWS = new RooWorkspace();; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. ~NeymanConstruction(); default constructor; if(fOwnsWorkspace && fWS) delete fWS;; if(fConfBelt) delete fConfBelt;. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::SetInterval. NeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); NeymanConstruction();. void SetTestStatSampler(RooStats::TestStatSampler& sampler); in addition to interface we also need:; Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic). {fTestStatSampler = &sampler;}. void SetLeftSideTailFraction(Double_t leftSideFraction = 0.); fLeftSideTailFraction*fSize defines lower edge of acceptance region.; Unified limits use 0, central limits use 0.5,; for upper/lower limits it is 0/1 depends on sign of test statistic w.r.t. parameter. {fLeftSideFraction = leftSideFraction;}. void SetParameterPointsToTest(RooAbsData& pointsToTest); User-defined set of points to test. Double_t Size() const; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (common for each dimension); void SetNumSteps(Int_t);; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (specific for each dimension); void SetNumSteps(std::map<RooAbsArg, Int_t>); Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetModel(const RooStats::ModelConfig& model); Set ModelConfig. {fModel = model;}. void SetData(RooAbsData& data); Set the DataSet. { fData = data; }. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetParameters(const RooArgSet& ); specify the parameters of interest in the interval. void SetNuisanceParameters(const RooArgSet& ); specify th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__NeymanConstruction.html:5569,test,test,5569,root/html534/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html534/RooStats__NeymanConstruction.html,3,['test'],['test']
Testability,"deid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches > 10 * GetMaxVisNodes())) {; 1461 hjson = ""FOUND:Too many "" + std::to_string(nmatches);; 1462 return nmatches;; 1463 }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:43394,test,test,43394,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['test'],['test']
Testability,"del; a Prior pdf for the nuiscane parameter of the signal and background can be specified in; the s+b model or the b model. If it is specified in the s+b model, the one of the s+b model will be used. ~HybridCalculatorOriginal(); HybridCalculatorOriginal destructor. void SetNullModel(const RooStats::ModelConfig& ); Set the model describing the null hypothesis. void SetAlternateModel(const RooStats::ModelConfig& ); Set the model describing the alternate hypothesis. void SetTestStatistic(int index); set the desired test statistics:; index=1 : likelihood ratio: 2 * log( L_sb / L_b ) (DEFAULT); index=2 : number of generated events; index=3 : profiled likelihood ratio; if the index is different to any of those values, the default is used. HybridResult* Calculate(TH1& data, unsigned int nToys, bool usePriors) const; first compute the test statistics for data and then prepare and run the toy-MC experiments. HybridResult* Calculate(RooAbsData& data, unsigned int nToys, bool usePriors) const; first compute the test statistics for data and then prepare and run the toy-MC experiments. HybridResult* Calculate(unsigned int nToys, bool usePriors) const. void RunToys(vector<double>& bVals, vector<double>& sbVals, unsigned int nToys, bool usePriors) const; do the actual run-MC processing. void PrintMore(const char* options) const; Print out some information about the input models. HybridResult* GetHypoTest() const; perform the hypothesis test and return result of hypothesis test. bool DoCheckInputs() const. explicit HybridCalculatorOriginal(const char* name = 0); Dummy Constructor with only name. void SetCommonPdf(RooAbsPdf& pdf); Set a common PDF for both the null and alternate. { fSbModel = &pdf; }. void SetNullPdf(RooAbsPdf& pdf); Set the PDF for the null (only B). { fBModel = &pdf; }. void SetAlternatePdf(RooAbsPdf& pdf); Set the PDF for the alternate hypothesis ( i.e. S+B). { fSbModel = &pdf; }. void SetData(RooAbsData& data); Set the DataSet. { fData = &data; }. void SetNullPar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html:12970,test,test,12970,root/html528/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html,6,['test'],['test']
Testability,"delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. private:. UInt_tfNbPols; vector<Double_t>fNormals; vector<Int_t>fPolyDesc; vector<Double_t>fVertices; static Bool_tfgEnforceTriangles. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLFaceSet(const TBuffer3D& buffer); constructor. void SetFromMesh(const RootCsg::TBaseMesh* m); Should only be done on an empty faceset object. void EnforceTriangles(); Use GLU tesselator to replace all polygons with N > 3 with triangles.; After this call polygon descriptions are changed.; New vertices are not expected -- exception is thrown if this is; requested by the triangulator. Support for adding of new vertices can be; provided. void DirectDraw(TGLRnrCtx& rnrCtx) const; Debug tracing. Int_t CheckPoints(const Int_t* source, Int_t* dest) const; CheckPoints. Bool_t Eq(const Double_t* p1, const Double_t* p2); test equality. void CalculateNormals(); CalculateNormals. Bool_t GetEnforceTriangles(); Get current state of static flag EnforceTriangles. void SetEnforceTriangles(Bool_t e); Set state of static flag EnforceTriangles.; When this is set, all tesselations will be automatically converted into; triangle-only meshes.; This is needed to export TGeo shapes and CSG meshes to external; triangle-mesh libraries that can not handle arbitrary polygons. TGLFaceSet(const TBuffer3D& buffer). std::vector<Double_t>& GetVertices(); { return fVertices; }. std::vector<Double_t>& GetNormals(); { return fNormals; }. std::vector<Int_t>& GetPolyDesc(); { return fPolyDesc; }. UInt_t GetNbPols(); { return fNbPols; }. void GLDrawPolys() const. » Author: Timur Pocheptsov 03/08/2004 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:52; This page has been automatically generated. For comments or suggestions regarding the docum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLFaceSet.html:5219,test,test,5219,root/html604/TGLFaceSet.html,https://root.cern,https://root.cern/root/html604/TGLFaceSet.html,1,['test'],['test']
Testability,"delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. private:. UInt_tfNbPols; vector<Double_t>fNormals; vector<Int_t>fPolyDesc; vector<Double_t>fVertices; static Bool_tfgEnforceTriangles. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLFaceSet(const TBuffer3D& buffer); constructor. void SetFromMesh(const RootCsg::TBaseMesh* m); Should only be done on an empty faceset object. void EnforceTriangles(); Use GLU tesselator to replace all polygons with N > 3 with triangles.; After this call polygon descriptions are changed.; New vertices are not expected -- exception is thrown if this is; requested by the triangulator. Support for adding of new vertices can be; provided. void DirectDraw(TGLRnrCtx& rnrCtx) const; Debug tracing. Int_t CheckPoints(const Int_t* source, Int_t* dest) const; CheckPoints. Bool_t Eq(const Double_t* p1, const Double_t* p2); test equality. void CalculateNormals(); CalculateNormals. Bool_t GetEnforceTriangles(); Get current state of static flag EnforceTriangles. void SetEnforceTriangles(Bool_t e); Set state of static flag EnforceTriangles.; When this is set, all tesselations will be automatically converted into; triangle-only meshes.; This is needed to export TGeo shapes and CSG meshes to external; triangle-mesh libraries that can not handle arbitrary polygons. TGLFaceSet(const TBuffer3D& buffer). std::vector<Double_t>& GetVertices(); { return fVertices; }. std::vector<Double_t>& GetNormals(); { return fNormals; }. std::vector<Int_t>& GetPolyDesc(); { return fPolyDesc; }. UInt_t GetNbPols(); { return fNbPols; }. void GLDrawPolys() const. » Author: Timur Pocheptsov 03/08/2004 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:52; This page has been automatically generated. For comments or suggestions regarding the docum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLFaceSet.html:5219,test,test,5219,root/html602/TGLFaceSet.html,https://root.cern,https://root.cern/root/html602/TGLFaceSet.html,1,['test'],['test']
Testability,"delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. private:. UInt_tfNbPols; vector<Double_t>fNormals; vector<Int_t>fPolyDesc; vector<Double_t>fVertices; static Bool_tfgEnforceTriangles. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLFaceSet(const TBuffer3D& buffer); constructor. void SetFromMesh(const RootCsg::TBaseMesh* m); Should only be done on an empty faceset object. void EnforceTriangles(); Use GLU tesselator to replace all polygons with N > 3 with triangles.; After this call polygon descriptions are changed.; New vertices are not expected -- exception is thrown if this is; requested by the triangulator. Support for adding of new vertices can be; provided. void DirectDraw(TGLRnrCtx& rnrCtx) const; Debug tracing. Int_t CheckPoints(const Int_t* source, Int_t* dest) const; CheckPoints. Bool_t Eq(const Double_t* p1, const Double_t* p2); test equality. void CalculateNormals(); CalculateNormals. Bool_t GetEnforceTriangles(); Get current state of static flag EnforceTriangles. void SetEnforceTriangles(Bool_t e); Set state of static flag EnforceTriangles.; When this is set, all tesselations will be automatically converted into; triangle-only meshes.; This is needed to export TGeo shapes and CSG meshes to external; triangle-mesh libraries that can not handle arbitrary polygons. std::vector<Double_t>& GetVertices(); { return fVertices; }. std::vector<Double_t>& GetNormals(); { return fNormals; }. std::vector<Int_t>& GetPolyDesc(); { return fPolyDesc; }. UInt_t GetNbPols(); { return fNbPols; }. void GLDrawPolys() const. » Author: Timur Pocheptsov 03/08/2004 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLFaceSet.html:4859,test,test,4859,root/html534/TGLFaceSet.html,https://root.cern,https://root.cern/root/html534/TGLFaceSet.html,1,['test'],['test']
Testability,"delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGDMLWrite&operator=(const TGDMLWrite&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetG4Compatibility(Bool_t G4Compatible); voidSetNamingSpeed(TGDMLWrite::ENamingType naming); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; static voidStartGDMLWriting(TGeoManager* geomanager, const char* filename, TString option); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGDMLWrite(); TGDMLWrite(const TGDMLWrite&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteGDMLfile(TGeoManager* geomanager, const char* filename = ""test.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDMLWrite.html:8377,test,test,8377,root/html602/TGDMLWrite.html,https://root.cern,https://root.cern/root/html602/TGDMLWrite.html,2,['test'],['test']
Testability,"dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooDataHist&dataHist(); const RooDataHist&dataHist() const; virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHistFunc.html:8332,test,testArg,8332,root/html526/RooHistFunc.html,https://root.cern,https://root.cern/root/html526/RooHistFunc.html,4,['test'],['testArg']
Testability,"depending on the; bit TH1::kCanRebin of the parent histogram.; - if the bit is set add the new label and if the number of labels exceeds; the number of bins, double the number of bins via TH1::LabelsInflate; - if the bit is not set return 0 (underflow bin). -1 is returned only when the Axis has no parent histogram. Int_t FindFixBin(Double_t x) const; Find bin number corresponding to abscissa x. const char * GetBinLabel(Int_t bin) const; Return label for bin. Int_t GetFirst() const; return first bin on the axis; ie 1 if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Int_t GetLast() const; return last bin on the axis; ie fNbins if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Double_t GetBinCenter(Int_t bin) const; Return center of bin. Double_t GetBinCenterLog(Int_t bin) const; Return center of bin in log; With a log-equidistant binning for a bin with low and up edges, the mean is :; 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; Imagine a bin with low=1 and up=100 :; - the center in lin is (100-1)/2=50.5; - the center in log would be sqrt(1*100)=10 (!=log(50.5)); NB: if the low edge of the bin is negative, the function returns the bin center; as computed by TAxis::GetBinCenter. Double_t GetBinLowEdge(Int_t bin) const; Return low edge of bin. Double_t GetBinUpEdge(Int_t bin) const; Return up edge of bin. Double_t GetBinWidth(Int_t bin) const; Return bin width. void GetCenter(Double_t* center) const; Return an array with the center of all bins. void GetLowEdge(Double_t* edge) const; Return an array with the lod edge of all bins. const char * GetTimeFormatOnly() const; Return *only* the time format from the string fTimeFormat. const char * GetTicks() const; Return the ticks option (see SetTicks). void LabelsOption(Option_t* option = ""h""); Set option(s) to draw axis with labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TAxis.html:14021,log,logx,14021,root/html530/TAxis.html,https://root.cern,https://root.cern/root/html530/TAxis.html,2,['log'],['logx']
Testability,"der based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  kdTreeBinning.C kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  Legendre.C Example of first few Legendre Polynomials ;  Legendre.py Example of first few Legendre Polynomials ;  LegendreAssoc.C Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  limit.C This program demonstrates the computation of 95 % C.L ;  mathBeta.C Test the TMath::BetaDist and TMath::BetaDistI functions ;  mathcoreCDF.C Example describing how to use the different cumulative distribution functions in ROOT ;  mathcoreGenVector.C Example macro testing available methods and operation of the GenVector classes ;  mathcoreSpecFunc.C Example macro describing how to use the special mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreStatFunc.py Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:130567,test,testing,130567,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['test'],['testing']
Testability,"der(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. double Root() const; Returns root value. Need to call first Solve(). . { return fRoot; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char* Name() const; Return name of root finder algorithm (""BrentRootFinder""). . void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BrentRootFinder.html:3691,log,log,3691,root/html534/ROOT__Math__BrentRootFinder.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BrentRootFinder.html,1,['log'],['log']
Testability,"der, ""muons.fPt"");; // Here, too we would need the definition of the Muon class.; TTreeReaderArray<Muon> raMuons(reader, ""muons"");. Accessing Data; The TTreeReader checks whether the type you specify is the type that's stored in the branch, i.e. whether it can actually access the data through the reader object. The TTreeReaderValue gets its values like so:; // Loop through all the TTree's entries; while (reader.Next()) {; // behaves like an iterator; float missingET = *rvMissingET;; ...; }. A TTreeReaderArray allows you to get the size and access the n-th element:; while (reader.Next()) {; for (int iMuon = 0, nMuons = raMuonPt.GetSize(); iMuon < nMuons; ++iMuon) {; hist->Fill(raMuonPt[iMuon]);; }; }. Of course in C++11 you could also just do; while (reader.Next()) {; for (float pT: raMuonPt) {; hist->Fill(pT);; }; }. We will try all of this out later; you are welcome to write a little script to test this on our TTree.; . ‹ 6. Multivariate Analysis; up; 8. Efficiency Calculation ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:5160,test,tests,5160,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['test'],['tests']
Testability,"der, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:1465,test,test,1465,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['test'],['test']
Testability,der.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  VavilovFast.h;  ► src;  cblas.cxx;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:45359,test,testSpecFuncGamma,45359,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testSpecFuncGamma']
Testability,"der; Color_tfHistFillColorhistogram fill color; Style_tfHistFillStylehistogram fill style; Color_tfHistLineColorhistogram line color; Style_tfHistLineStylehistogram line style; Width_tfHistLineWidthhistogram line width; Bool_tfHistMinimumZerotrue if default minimum is 0, false if minimum is automatic; Double_tfHistTopMarginmargin between histogram's top and pad's top; Bool_tfIsReading!Set to FALSE when userclass::UseCurrentStyle is called by the style manager; Width_tfLegendBorderSizelegend box border size; Color_tfLegendFillColorlegend fill color; Style_tfLegendFontlegend font style; Float_tfLegoInnerRInner radius for cylindrical legos; Float_tfLineScalePSLine scale factor when drawing lines on Postscript; TStringfLineStyle[30]String describing line style i (for postScript); Int_tfNumberContoursdefault number of contours for 2-d plots; Int_tfOptDate=1 if date option is selected; Int_tfOptFile=1 if option File is selected; Int_tfOptFit=1 if option Fit is selected; Int_tfOptLogx=1 if log scale in X; Int_tfOptLogy=1 if log scale in y; Int_tfOptLogz=1 if log scale in z; Int_tfOptStat=1 if option Stat is selected; Int_tfOptTitle=1 if option Title is selected; Int_tfPadBorderModepad border mode; Width_tfPadBorderSizepad border size; Float_tfPadBottomMarginpad bottom margin; Color_tfPadColorpad color; Bool_tfPadGridXtrue to get the grid along X; Bool_tfPadGridYtrue to get the grid along Y; Float_tfPadLeftMarginpad left margin; Float_tfPadRightMarginpad right margin; Int_tfPadTickX=1 to set special pad ticks along X; Int_tfPadTickY=1 to set special pad ticks along Y; Float_tfPadTopMarginpad top margin; TStringfPaintTextFormatPrinting format for TH2::PaintText; Float_tfPaperSizeXPostScript paper size along X; Float_tfPaperSizeYPostScript paper size along Y; Float_tfScreenFactorMultiplication factor for canvas size and position; Int_tfShowEditorShow pad editor; Int_tfShowEventStatusShow event status panel; Int_tfShowToolBarShow toolbar; Width_tfStatBorderSizeborder size of S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStyle.html:20079,log,log,20079,root/html530/TStyle.html,https://root.cern,https://root.cern/root/html530/TStyle.html,4,['log'],['log']
Testability,"derPSUser defined additional Postscript header; Color_tfHistFillColorhistogram fill color; Style_tfHistFillStylehistogram fill style; Color_tfHistLineColorhistogram line color; Style_tfHistLineStylehistogram line style; Width_tfHistLineWidthhistogram line width; Bool_tfHistMinimumZerotrue if default minimum is 0, false if minimum is automatic; Double_tfHistTopMarginmargin between histogram's top and pad's top; Bool_tfIsReading!Set to FALSE when userclass::UseCurrentStyle is called by the style manager; Width_tfLegendBorderSizeTLegend box border size; Float_tfLegoInnerRInner radius for cylindrical legos; Float_tfLineScalePSLine scale factor when drawing lines on Postscript; TStringfLineStyle[30]String describing line style i (for postScript); Int_tfNumberContoursdefault number of contours for 2-d plots; Int_tfOptDate=1 if date option is selected; Int_tfOptFile=1 if option File is selected; Int_tfOptFit=1 if option Fit is selected; Int_tfOptLogx=1 if log scale in X; Int_tfOptLogy=1 if log scale in y; Int_tfOptLogz=1 if log scale in z; Int_tfOptStat=1 if option Stat is selected; Int_tfOptTitle=1 if option Title is selected; Int_tfPadBorderModepad border mode; Width_tfPadBorderSizepad border size; Float_tfPadBottomMarginpad bottom margin; Color_tfPadColorpad color; Bool_tfPadGridXtrue to get the grid along X; Bool_tfPadGridYtrue to get the grid along Y; Float_tfPadLeftMarginpad left margin; Float_tfPadRightMarginpad right margin; Int_tfPadTickX=1 to set special pad ticks along X; Int_tfPadTickY=1 to set special pad ticks along Y; Float_tfPadTopMarginpad top margin; TStringfPaintTextFormatPrinting format for TH2::PaintText; Float_tfPaperSizeXPostScript paper size along X; Float_tfPaperSizeYPostScript paper size along Y; Float_tfScreenFactorMultiplication factor for canvas size and position; Int_tfShowEditorShow pad editor; Int_tfShowEventStatusShow event status panel; Int_tfShowToolBarShow toolbar; Width_tfStatBorderSizeborder size of Stats PaveLabel; Color_tfStatColorst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyle.html:19790,log,log,19790,root/html528/TStyle.html,https://root.cern,https://root.cern/root/html528/TStyle.html,1,['log'],['log']
Testability,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:141632,log,logged,141632,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['log'],['logged']
Testability,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:143469,log,logged,143469,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['log'],['logged']
Testability,"deriving from TProof; (they have to call Init themselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. Int_t GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'.; Use the existing setting or the default if nothing is found.; If 'assert' is kTRUE, make also sure that the path exists.; Return 0 on success, -1 on failure. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind. Int_t AssertPath(const char* path, Bool_t writable); Make sure that 'path' exists; if 'writable' is kTRUE, make also sure; that the path is writable. void SetManager(TProofMgr* mgr); Set manager and schedule its destruction after this for clean; operations. Int_t AddWorkers(TList* wrks); Works on the master node only.; It starts workers on the machines in workerList and sets the paths,; packages and macros as on the master.; It is a subbstitute for StartSlaves(...); The code is mostly the master part of StartSlaves,; with the parallel startup removed. Int_t RemoveWorkers(TList* wrks); Used for shuting down the workres after a query is finished.; Sends each of the workers from the workerList, a kPROOF_STOP message.; If the workerList == 0, shutdow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:33725,assert,assert,33725,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['assert'],['assert']
Testability,"deriving from TProof; (they have to call Init themselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. Int_t GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'.; Use the existing setting or the default if nothing is found.; If 'assert' is kTRUE, make also sure that the path exists.; Return 0 on success, -1 on failure. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind.; Several options can be given separated by a ','. Int_t AssertPath(const char* path, Bool_t writable); Make sure that 'path' exists; if 'writable' is kTRUE, make also sure; that the path is writable. void SetManager(TProofMgr* mgr); Set manager and schedule its destruction after this for clean; operations. Int_t AddWorkers(TList* wrks); Works on the master node only.; It starts workers on the machines in workerList and sets the paths,; packages and macros as on the master.; It is a subbstitute for StartSlaves(...); The code is mostly the master part of StartSlaves,; with the parallel startup removed. Int_t RemoveWorkers(TList* wrks); Used for shuting down the workres after a query is finished.; Sends each of the workers from the workerList, a kPR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:39363,assert,assert,39363,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['assert'],['assert']
Testability,"deriving from TProof; (they have to call Init themselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. Int_t GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'.; Use the existing setting or the default if nothing is found.; If 'assert' is kTRUE, make also sure that the path exists.; Return 0 on success, -1 on failure. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind.; Several options can be given separated by a ','. Int_t AssertPath(const char* path, Bool_t writable); Make sure that 'path' exists; if 'writable' is kTRUE, make also sure; that the path is writable. void SetManager(TProofMgr* mgr); Set manager and schedule its destruction after this for clean; operations. Int_t AddWorkers(TList* wrks); Works on the master node only.; It starts workers on the machines in workerList and sets the paths,; packages and macros as on the master.; It is a subbstitute for StartSlaves(...); The code is mostly the master part of StartSlaves,; with the parallel startup removed. void SetupWorkersEnv(TList* wrks, Bool_t increasingpool = kFALSE); Set up packages, loaded macros, include and lib paths ... Int_t RemoveWorkers(TLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:36864,assert,assert,36864,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,2,['assert'],['assert']
Testability,"descriptor symbol. However, if the type consists of two characters, the number specifies the number of bytes to be used when copying the variable to the output buffer. The line below describes ntrack to be written as a 16-bit integer (rather than a 32-bit integer).; ""ntrack/I2""; With this Branch method, you can also add a leaf that holds an entire array of variables. To add an array of floats use the f[n] notation when describing the leaf.; Float_t f[10];; tree->Branch(""fBranch"",f,""f[10]/F"");; You can also add an array of variable length:; {; TFile *f = new TFile(""peter.root"",""recreate"");; Int_t nPhot;; Float_t E[500];; TTree* nEmcPhotons = new TTree(""nEmcPhotons"",""EMC Photons"");; nEmcPhotons->Branch(""nPhot"",&nPhot,""nPhot/I"");; nEmcPhotons->Branch(""E"",E,""E[nPhot]/F"");; }; See “Example 2: A Tree with a C Structure” below ($ROOTSYS/tutorials/tree/tree2.C) and staff.C at the beginning of this chapter.; 12.10 Adding a TBranch to Hold an Object; To write a branch to hold an event object, we need to load the definition of the Event class, which is in $ROOTSYS/test/libEvent.so (if it doesn’t exist type make in $ROOTSYS/test). An object can be saved in a tree if a ROOT dictionary for its class has been generated and loaded.; root[] .L libEvent.so; First, we need to open a file and create a tree.; root[] TFile *f = new TFile(""AFile.root"",""RECREATE""); root[] TTree *tree = new TTree(""T"",""A Root Tree""); We need to create a pointer to an Event object that will be used as a reference in the TTree::Branch method. Then we create a branch with the TTree::Branch method.; root[] Event *event = new Event(); root[] tree->Branch(""EventBranch"",""Event"",&event,32000,99); To add a branch to hold an object we use the signature above. The first parameter is the name of the branch. The second parameter is the name of the class of the object to be stored. The third parameter is the address of a pointer to the object to be stored.; Note that it is an address of a pointer to the object, not just a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:541299,test,test,541299,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"destructor must call RecursiveRemove(); 65 kIsReferenced = BIT(4), ///< if object is referenced by a TRef or TRefArray; 66 kHasUUID = BIT(5), ///< if object has a TUUID (its fUniqueID=UUIDNumber); 67 kCannotPick = BIT(6), ///< if object in a pad cannot be picked; 68 // 7 is taken by TAxis and TClass.; 69 kNoContextMenu = BIT(8), ///< if object does not want context menu; 70 // 9, 10 are taken by TH1, TF1, TAxis and a few others; 71 // 12 is taken by TAxis; 72 kInvalidObject = BIT(13) ///< if object ctor succeeded but object should not be used; 73 };; 74 ; 75 enum EDeprecatedStatusBits {; 76 kObjInCanvas = BIT(3) ///< for backward compatibility only, use kMustCleanup; 77 };; 78 ; 79 //----- Private bits, clients can only test but not change them; 80 enum {; 81 kIsOnHeap = 0x01000000, ///< object is on heap; 82 kNotDeleted = 0x02000000, ///< object has not been deleted; 83 kZombie = 0x04000000, ///< object ctor failed; 84 kInconsistent = 0x08000000, ///< class overload Hash but does call RecursiveRemove in destructor; 85 // kCheckedHash = 0x10000000, ///< CheckedHash has check for the consistency of Hash/RecursiveRemove; 86 kBitMask = 0x00ffffff; 87 };; 88 ; 89 //----- Write() options; 90 enum {; 91 kSingleKey = BIT(0), ///< write collection with single key; 92 kOverwrite = BIT(1), ///< overwrite existing object with same name; 93 kWriteDelete = BIT(2), ///< write object, then delete previous key with same name; 94 };; 95 ; 96protected:; 97 enum { // DeprectatedWriteOptions; 98 ///< Used to request that the class specific implementation of `TObject::Write`; 99 ///< just prepare the objects to be ready to be written but do not actually write; 100 ///< them into the TBuffer. This is just for example by TBufferMerger to request; 101 ///< that the TTree inside the file calls `TTree::FlushBaskets` (outside of the merging lock); 102 ///< and TBufferMerger will later ask for the write (inside the merging lock).; 103 ///< To take advantage of this feature the class needs to o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:2833,test,test,2833,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['test'],['test']
Testability,"destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; IMethod * BookMVA (Types::EMVA method, const TString &weightfile);  books MVA method from weightfile ;  ; void DeclareOptions ();  declaration of configuration options ;  ; void DecodeVarNames (const std::string &varNames);  decodes ""name1:name2:..."" form ;  ; void DecodeVarNames (const TString &varNames);  decodes ""name1:name2:..."" form ;  ; TString GetMethodTypeFromFile (const TString &filename);  read the method type from the file ;  ; void Init (void);  default initialisation (no member variables) ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fCalculateError;  error calculation mode ;  ; Bool_t fColor;  color mode ;  ; DataInputHandler fDataInputHandler;  ; DataSetInfo fDataSetInfo;  ; DataSetManager * fDataSetManager;  ; MsgLogger * fLogger;  ! message logger ;  ; std::map< TString, IMethod * > fMethodMap;  map of methods ;  ; Double_t fMvaEventError;  per-event error returned by MVA ;  ; Double_t fMvaEventErrorUpper;  per-event error returned by MVA ;  ; Bool_t fSilent;  silent mode ;  ; std::vector< Float_t > fTmpEvalVec;  temporary evaluation vector (if user input is v<double>) ;  ; Bool_t fVerbose;  verbosity ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Reader.html:18893,log,logger,18893,doc/master/classTMVA_1_1Reader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Reader.html,1,['log'],['logger']
Testability,"detail::convert(r, *this); }; 120 ; 121 ; 122 /**; 123 Assign from an AxisAngle; 124 */; 125 EulerAngles &; 126 operator=( AxisAngle const & a ) { return operator=(EulerAngles(a)); }; 127 ; 128 /**; 129 Assign from a Quaternion; 130 */; 131 EulerAngles &; 132 operator=( Quaternion const & q ) {return operator=(EulerAngles(q)); }; 133 ; 134 /**; 135 Assign from an axial rotation; 136 */; 137 EulerAngles &; 138 operator=( RotationZ const & r ) { return operator=(EulerAngles(r)); }; 139 EulerAngles &; 140 operator=( RotationY const & r ) { return operator=(EulerAngles(r)); }; 141 EulerAngles &; 142 operator=( RotationX const & r ) { return operator=(EulerAngles(r)); }; 143 ; 144#endif; 145 ; 146 // ======== Components ==============; 147 ; 148 /**; 149 Set the three Euler angles given a pair of pointers or iterators; 150 defining the beginning and end of an array of three Scalars.; 151 */; 152 template<class IT>; 153 void SetComponents(IT begin, IT end) {; 154 fPhi = *begin++;; 155 fTheta = *begin++;; 156 fPsi = *begin++;; 157 (void)end;; 158 assert(begin == end);; 159 Rectify(); // Added 27 Jan. 06 JMM; 160 }; 161 ; 162 /**; 163 Get the axis and then the angle into data specified by an iterator begin; 164 and another to the end of the desired data (4 past start).; 165 */; 166 template<class IT>; 167 void GetComponents(IT begin, IT end) const {; 168 *begin++ = fPhi;; 169 *begin++ = fTheta;; 170 *begin++ = fPsi;; 171 (void)end;; 172 assert(begin == end);; 173 }; 174 ; 175 /**; 176 Get the axis and then the angle into data specified by an iterator begin; 177 */; 178 template<class IT>; 179 void GetComponents(IT begin) const {; 180 *begin++ = fPhi;; 181 *begin++ = fTheta;; 182 *begin = fPsi;; 183 }; 184 ; 185 /**; 186 Set the components phi, theta, psi based on three Scalars.; 187 */; 188 void SetComponents(Scalar phi, Scalar theta, Scalar psi) {; 189 fPhi=phi; fTheta=theta; fPsi=psi;; 190 Rectify(); // Added 27 Jan. 06 JMM; 191 }; 192 ; 193 /**; 194 Get the components ph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2EulerAngles_8h_source.html:4964,assert,assert,4964,doc/master/GenVector_2EulerAngles_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2EulerAngles_8h_source.html,1,['assert'],['assert']
Testability,"dex - 1]) || formula[index - 1] == ':')) {; 2103 index = formula.Index(shortcut, i2);; 2104 continue;; 2105 }; 2106 if (i2 < formula.Length() && formula[i2] != '(') {; 2107 index = formula.Index(shortcut, i2);; 2108 continue;; 2109 }; 2110 // now replace the string; 2111 formula.Replace(index, shortcut.Length(), full);; 2112 Ssiz_t inext = index + full.Length();; 2113 index = formula.Index(shortcut, inext);; 2114 fun.fFound = true;; 2115 }; 2116 }; 2117 // for functions we can live it to cling to decide if it is a valid function or NOT; 2118 // We don't need to retrieve this information from the ROOT interpreter; 2119 // we assume that the function is then found and all the following code does not need to be there; 2120#ifdef TFORMULA_CHECK_FUNCTIONS; 2121 ; 2122 if (fun.fName.Contains(""::"")) // add support for nested namespaces; 2123 {; 2124 // look for last occurence of ""::""; 2125 std::string name(fun.fName.Data());; 2126 size_t index = name.rfind(""::"");; 2127 assert(index != std::string::npos);; 2128 TString className = fun.fName(0, fun.fName(0, index).Length());; 2129 TString functionName = fun.fName(index + 2, fun.fName.Length());; 2130 ; 2131 Bool_t silent = true;; 2132 TClass *tclass = TClass::GetClass(className, silent);; 2133 // std::cout << ""looking for class "" << className << std::endl;; 2134 const TList *methodList = tclass->GetListOfAllPublicMethods();; 2135 TIter next(methodList);; 2136 TMethod *p;; 2137 while ((p = (TMethod *)next())) {; 2138 if (strcmp(p->GetName(), functionName.Data()) == 0 &&; 2139 (fun.GetNargs() <= p->GetNargs() && fun.GetNargs() >= p->GetNargs() - p->GetNargsOpt())) {; 2140 fun.fFound = true;; 2141 break;; 2142 }; 2143 }; 2144 }; 2145 if (!fun.fFound) {; 2146 // try to look into all the global functions in gROOT; 2147 TFunction *f;; 2148 {; 2149 R__LOCKGUARD(gROOTMutex);; 2150 f = (TFunction *)gROOT->GetListOfGlobalFunctions(true)->FindObject(fun.fName);; 2151 }; 2152 // if found a function with matching arguments; 2153 if (f && ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:81454,assert,assert,81454,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['assert'],['assert']
Testability,"dex) const. double GetYError(int index) const. HypoTestResult* GetResult(int index) const. double FindInterpolatedLimit(double target). int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(); std::cout << ""finding point with cl = "" << 1-(1-ConfidenceLevel())/2 << endl;. Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(); std::cout << ""The HypoTestInverterResult::LowerLimitEstimatedError() function evaluates only a rought error on the upper limit. Be careful when using this estimation\n"";. Double_t UpperLimitEstimatedError(); std::cout << ""The HypoTestInverterResult::UpperLimitEstimatedError() function evaluates only a rought error on the upper limit. Be careful when using this estimation\n"";. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverterResult.h 31798 2009-12-10 14:57:15Z moneta $ » Last generated: 2009-12-10 16:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html:9109,test,test,9109,root/html526/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html,1,['test'],['test']
Testability,"dex) const. double GetYError(int index) const. HypoTestResult* GetResult(int index) const. double FindInterpolatedLimit(double target). int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(); std::cout << ""finding point with cl = "" << 1-(1-ConfidenceLevel())/2 << endl;. Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(); std::cout << ""The HypoTestInverterResult::LowerLimitEstimatedError() function evaluates only a rought error on the upper limit. Be careful when using this estimation\n"";. Double_t UpperLimitEstimatedError(); std::cout << ""The HypoTestInverterResult::UpperLimitEstimatedError() function evaluates only a rought error on the upper limit. Be careful when using this estimation\n"";. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverterResult.h 36230 2010-10-09 20:21:02Z wouter $ » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestInverterResult.html:9109,test,test,9109,root/html528/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestInverterResult.html,1,['test'],['test']
Testability,"dex);; 754 ++dropIndex;; 755 fillDropContainer (dropContainer, dropFraction, _numNodes);; 756 for (auto itLayer = begin (m_layers), itLayerEnd = end (m_layers); itLayer != itLayerEnd; ++itLayer, ++dropIndex); 757 {; 758 auto& layer = *itLayer;; 759 _numNodes = layer.numNodes ();; 760 // how many nodes have to be dropped; 761 dropFraction = 0.0;; 762 if (dropFractions.size () > dropIndex); 763 dropFraction = dropFractions.at (dropIndex);; 764 ; 765 fillDropContainer (dropContainer, dropFraction, _numNodes);; 766 }; 767 isWeightsForDrop = true;; 768 }; 769 ; 770 // execute training cycle; 771 trainError = trainCycle (minimizer, weights, begin (trainPattern), end (trainPattern), settings, dropContainer);; 772 ; 773 ; 774 // ------ check if we have to execute a test ------------------; 775 bool hasConverged = false;; 776 if (testCycleCount % settings.testRepetitions () == 0) // we test only everye ""testRepetitions"" repetition; 777 {; 778 if (isWeightsForDrop); 779 {; 780 dropOutWeightFactor (weights, dropFractions);; 781 isWeightsForDrop = false;; 782 }; 783 ; 784 ; 785 testError = 0;; 786 //double weightSum = 0;; 787 settings.startTestCycle ();; 788 if (settings.useMultithreading ()); 789 {; 790 size_t numThreads = std::thread::hardware_concurrency ();; 791 size_t patternPerThread = testPattern.size () / numThreads;; 792 std::vector<Batch> batches;; 793 auto itPat = testPattern.begin ();; 794 // auto itPatEnd = testPattern.end ();; 795 for (size_t idxThread = 0; idxThread < numThreads-1; ++idxThread); 796 {; 797 batches.push_back (Batch (itPat, itPat + patternPerThread));; 798 itPat += patternPerThread;; 799 }; 800 if (itPat != testPattern.end ()); 801 batches.push_back (Batch (itPat, testPattern.end ()));; 802 ; 803 std::vector<std::future<std::tuple<double,std::vector<double>>>> futures;; 804 for (auto& batch : batches); 805 {; 806 // -------------------- execute each of the batch ranges on a different thread -------------------------------; 807 futures.push_back (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:23089,test,testRepetitions,23089,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,4,['test'],"['test', 'testError', 'testRepetitions']"
Testability,"df::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:22773,test,testArg,22773,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,4,['test'],['testArg']
Testability,"dfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDataFrame.; Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the columns of multiple trees) leverages TTree's ""friend"" mechanism.; Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:69841,log,logical,69841,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['log'],['logical']
Testability,"diator palette is used.; 2525 if ncolors = 54 and colors=0, a two-color hue palette palette is used.(dark blue through neutral gray to bright yellow); 2526 if ncolors = 55 and colors=0, a Rain Bow palette is used.; 2527 if ncolors = 56 and colors=0, an inverted Dark Body Radiator palette is used.; 2528 ; 2529 ; 2530If `ncolors > 0 && colors == 0`, the default palette is used with a maximum of ncolors.; 2531 ; 2532The default palette defines:; 2533 ; 2534- index 0 to 9 : shades of grey; 2535- index 10 to 19 : shades of brown; 2536- index 20 to 29 : shades of blue; 2537- index 30 to 39 : shades of red; 2538- index 40 to 49 : basic colors; 2539 ; 2540The color numbers specified in the palette can be viewed by selecting; 2541the item `colors` in the `VIEW` menu of the canvas tool bar.; 2542The red, green, and blue components of a color can be changed thanks to; 2543`TColor::SetRGB()`.; 2544 ; 2545\since **ROOT version 6.19/01**; 2546 ; 2547As default labels and ticks are drawn by `TGAxis` at equidistant (lin or log); 2548points as controlled by SetNdivisions.; 2549If option ""CJUST"" is given labels and ticks are justified at the; 2550color boundaries defined by the contour levels.; 2551For more details see `TPaletteAxis`; 2552 ; 2553\anchor HP24; 2554### Drawing a sub-range of a 2D histogram; the [cutg] option; 2555 ; 2556 ; 2557Using a `TCutG` object, it is possible to draw a sub-range of a 2D; 2558histogram. One must create a graphical cut (mouse or C++) and specify the name; 2559of the cut between `[]` in the `Draw()` option.; 2560For example (fit2a.C), with a `TCutG` named `cutg`, one can call:; 2561 ; 2562 myhist->Draw(""surf1 [cutg]"");; 2563 ; 2564To invert the cut, it is enough to put a `-` in front of its name:; 2565 ; 2566 myhist->Draw(""surf1 [-cutg]"");; 2567 ; 2568It is possible to apply several cuts (`,` means logical AND):; 2569 ; 2570 myhist->Draw(""surf1 [cutg1,cutg2]"");; 2571 ; 2572Begin_Macro(source); 2573../../../tutorials/fit/fit2a.C; 2574End_Macro; 2575 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:103517,log,log,103517,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['log']
Testability,"dified - retain across scene rebuilds; TGLPhysicalShape*fNextPhysical! pointer to next replica; UChar_tfSelected! selected state; TGLMatrixfTransform! transform (placement) of physical instance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPhysicalShape(UInt_t ID, const TGLLogicalShape& logicalShape, const TGLMatrix& transform, Bool_t invertedWind, const Float_t[4] rgba); Construct a physical shape using arguments:; ID - unique drawable id.; logicalShape - bound logical shape; transform - transform for placement of logical drawing; invertedWind - use inverted face polygon winding?; rgba - basic four component (RGBA) diffuse color. TGLPhysicalShape(UInt_t ID, const TGLLogicalShape& logicalShape, const double* transform, Bool_t invertedWind, const Float_t[4] rgba); Construct a physical shape using arguments:; id - unique drawable id.; logicalShape - bound logical shape; transform - 16 Double_t component transform for placement of logical drawing; invertedWind - use inverted face polygon winding?; rgba - basic four component (RGBA) diffuse color. ~TGLPhysicalShape(); Destroy the physical shape. void AddReference(TGLPShapeRef* ref); Add reference ref. void RemoveReference(TGLPShapeRef* ref); Remove reference ref. void Modified(); Call this after modifying the physical so that the information; can be propagated to the object referencing it. void UpdateBoundingBox(); Update our internal bounding box (in global frame). void InitColor(const Float_t[4] rgba); Initialise the colors, using basic RGBA diffuse material color supplied. void SetColor(const Float_t[17] rgba); Set full color attributes - see OpenGL material documentation; for full description.; 0->3 diffuse, 4->7 ambient, 8->11 specular, 12->15 emission, 16 shininess. void SetColorOnFamily(const Float_t[17] rgba); Set full color attributes to all physicals sharing the same; logical with this object. void SetDiffuseColor(const Float_t rgba[4]); Set color from ROOT colo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPhysicalShape.html:5460,log,logicalShape,5460,root/html602/TGLPhysicalShape.html,https://root.cern,https://root.cern/root/html602/TGLPhysicalShape.html,6,['log'],"['logical', 'logicalShape']"
Testability,"dinate data; 205 can also be used to add 1-dim data with a weight; 206 */; 207 void Add(double x, double y); 208 {; 209 assert( fDim == 2 );; 210 double dataTmp[] = { x, y };; 211 ; 212 FitData::Add( dataTmp );; 213 }; 214 ; 215 /**; 216 add 3-dim coordinate data; 217 can also be used to add 2-dim data with a weight; 218 */; 219 void Add(double x, double y, double z); 220 {; 221 assert( fDim == 3 );; 222 double dataTmp[] = { x, y, z };; 223 ; 224 FitData::Add( dataTmp );; 225 }; 226 ; 227 /**; 228 add multi-dim coordinate data; 229 */; 230 void Add( const double* x ); 231 {; 232 FitData::Add( x );; 233 }; 234 ; 235 /**; 236 add multi-dim coordinate data + weight; 237 */; 238 void Add(const double *x, double w); 239 {; 240 assert( fWeighted );; 241 ; 242 std::vector<double> tmpVec(fDim);; 243 std::copy( x, x + fDim - 1, tmpVec.begin() );; 244 tmpVec[fDim-1] = w;; 245 ; 246 FitData::Add( &tmpVec.front() );; 247 }; 248 ; 249 /**; 250 return weight; 251 */; 252 double Weight( unsigned int ipoint ) const; 253 {; 254 assert( ipoint < fNPoints );; 255 ; 256 if ( !fWeighted ) return 1.0;; 257 return *GetCoordComponent(ipoint, fDim-1);; 258 }; 259 ; 260 const double * WeightsPtr( unsigned int ipoint ) const; 261 {; 262 assert( ipoint < fNPoints );; 263 ; 264 if ( !fWeighted ){; 265 MATH_ERROR_MSG(""UnBinData::WeightsPtr"",""The function is unweighted!"");; 266 return nullptr;; 267 }; 268 return GetCoordComponent(ipoint, fDim-1);; 269 }; 270 ; 271 ; 272 /**; 273 return coordinate data dimension; 274 */; 275 unsigned int NDim() const; 276 { return fWeighted ? fDim -1 : fDim; }; 277 ; 278 bool IsWeighted() const; 279 {; 280 return fWeighted;; 281 }; 282 ; 283 void Append( unsigned int newPoints, unsigned int dim = 1, bool isWeighted = false ); 284 {; 285 assert( !fWrapped );; 286 ; 287 fWeighted = isWeighted;; 288 ; 289 FitData::Append( newPoints, dim );; 290 }; 291 ; 292private:; 293 bool fWeighted;; 294 ; 295};; 296 ; 297 ; 298 } // end namespace Fit; 299 ; 300} // end namespace R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/UnBinData_8h_source.html:7842,assert,assert,7842,doc/master/UnBinData_8h_source.html,https://root.cern,https://root.cern/doc/master/UnBinData_8h_source.html,1,['assert'],['assert']
Testability,"dir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd, Int_t nwk = 1); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TList*TProof::GetEnabledPackages() const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TStringGetJobAd(); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*TProof::MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); virtual Int_tTProof::PollForNewWorkers(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetFeedback(TString& opt, TString& optfb, Int_t action); voidTProof::SetPlayer(TVirtualProofPlayer* player); voidTProof::SetupWorkersEnv(TList* wrks, Bool_t increasingpool = kFALSE); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofCondor.html:22372,log,loglevel,22372,root/html604/TProofCondor.html,https://root.cern,https://root.cern/root/html604/TProofCondor.html,1,['log'],['loglevel']
Testability,"direct transformation.; A rotation around a specified axis means counterclockwise rotation around the positive direction of the axis. Declaration, Access, Comparisons; TRotation r; // r initialized as identity; TRotation m(r); // m = r; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRotation<div class=""legacybox""><h2>Legacy Code</h2> TRotation is a legacy interface: there will be no bug fix...Definition TRotation.h:20; mTMarker mDefinition textangle.C:8; There is no direct way to set the matrix elements - to ensure that a TRotation object always describes a real rotation. But you can get the values by the member functions XX()..ZZ() or the (,) operator:; Double_t xx = r.XX(); // the same as xx=r(0,0); xx = r(0,0);; ; if (r==m) {...} // test for equality; if (r!=m) {..} // test for inequality; if (r.IsIdentity()) {...} // test for identity; double. Rotation around axes; The following matrices describe counterclockwise rotations around coordinate axes; | 1 0 0 |; Rx(a) = | 0 cos(a) -sin(a) |; | 0 sin(a) cos(a) |; ; | cos(a) 0 sin(a) |; Ry(a) = | 0 1 0 |; | -sin(a) 0 cos(a) |; ; | cos(a) -sin(a) 0 |; Rz(a) = | sin(a) cos(a) 0 |; | 0 0 1 |; a#define a(i)Definition RSha256.hxx:99; and are implemented as member functions RotateX(), RotateY() and RotateZ():; r.RotateX(TMath::Pi()); // rotation around the x-axis; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37. Rotation around arbitrary axis; The member function Rotate() allows to rotate around an arbitrary vector (not necessary a unit one) and returns the result.; r.Rotate(TMath::Pi()/3,TVector3(3,4,5));; TVector3Definition TVector3.h:22; It is possible to find a unit vector and an angle, which describe the same rotation as the current one:; Double_t angle;; TVector3 axis;; r.GetAngleAxis(angle,axis);; angleOption_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRotation.html:2220,test,test,2220,doc/master/classTRotation.html,https://root.cern,https://root.cern/doc/master/classTRotation.html,1,['test'],['test']
Testability,"distributed following abs(sin(x)/x)*sqrt(x) you can do : \code{.cpp} TF1; 101*f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10); double r = f1->GetRandom(); \endcode or you can use the UNURAN; 102package. You need in this case to initialize UNURAN to the function you would like to generate. \code{.cpp} TUnuran u;; 103 u.Init(TUnuranDistrCont(f1));; 104 double r = u.Sample();; 105\endcode; 106 ; 107The techniques of using directly a TF1,2 or 3 function is powerful and; 108can be used to generate numbers in the defined range of the function.; 109Getting a number from a TF1,2,3 function is also quite fast.; 110UNURAN is a powerful and flexible tool which contains various methods for; 111generate random numbers for continuous distributions of one and multi-dimension.; 112It requires some set-up (initialization) phase and can be very fast when the distribution; 113parameters are not changed for every call.; 114 ; 115The following table shows some timings (in nanosecond/call); 116for basic functions, TF1 functions and using UNURAN obtained running; 117the tutorial math/testrandom.C; 118Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running; 119Linux SLC4 64 bit and compiled with gcc 3.4; 120 ; 121~~~~; 122Distribution nanoseconds/call; 123 TRandom TRandom1 TRandom2 TRandom3; 124Rndm.............. 5.000 105.000 7.000 10.000; 125RndmArray......... 4.000 104.000 6.000 9.000; 126Gaus.............. 36.000 180.000 40.000 48.000; 127Rannor............ 118.000 220.000 120.000 124.000; 128Landau............ 22.000 123.000 26.000 31.000; 129Exponential....... 93.000 198.000 98.000 104.000; 130Binomial(5,0.5)... 30.000 548.000 46.000 65.000; 131Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; 132Poisson(3)........ 96.000 494.000 109.000 125.000; 133Poisson(10)....... 138.000 1236.000 165.000 203.000; 134Poisson(70)....... 818.000 1195.000 835.000 844.000; 135Poisson(100)...... 837.000 1218.000 849.000 864.000; 136GausTF1........... 83.000 180.000 8",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRandom_8cxx_source.html:7769,test,testrandom,7769,doc/master/TRandom_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRandom_8cxx_source.html,1,['test'],['testrandom']
Testability,"distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; Double_t Max (Double_t a, Double_t b);  Returns the largest of a and b. ;  ; Float_t Max (Float_t a, Float_t b);  Returns the largest of a and b. ;  ; Int_t Max (Int_t a, Int_t b);  Returns the largest of a and b. ;  ; Long64_t Max (Long64_t a, Long64_t b);  Returns the largest of a and b. ;  ; Long_t Max (Long_t a, Long_t b);  Returns the largest of a and b. ;  ; Short_t Max (Short_t a, Short_t b);  Returns the largest of a and b. ;  ; UInt_t Max (UInt_t a, UInt_t b);  Returns the largest of a and b. ;  ; ULong64_t Max (ULong64_t a, ULong64_t b);  Returns the largest of a and b. ;  ; ULong_t Max (ULong_t a, ULong_t b);  Returns the largest of a an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:12684,log,logarithm,12684,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['log'],['logarithm']
Testability,"distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x); = i$:sqrt(x) 2-Dim dsitribution of i versus sqrt(x[i]); = phep[0]:sqrt(phep[3]) 2-Dim dsitribution of phep[0] versus sqrt(phep[3]). Note that the variables e1, e2 or e3 may contain a boolean expression as well.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. selection is a C++ expression with a combination of the columns.; The value corresponding to the selection expression is used as a weight; to fill the histogram.; If the expression includes only boolean operations, the result; is 0 or 1. If the result is 0, the histogram is not filled.; In general, the expression may be of the form:. value*(boolean expression). if boolean expression is true, the histogram is filled with; a weight = value.; Examples:; selection1 = ""x<y && sqrt(z)>3.2 && 6 < i$ && i$ < n$""; selection2 = ""(x+y)*(sqrt(z)>3.2""; selection3 = ""signal*(log(signal)>1.2)""; selection1 returns a weigth = 0 or 1; selection2 returns a weight = x+y if sqrt(z)>3.2; returns a weight = 0 otherwise.; selection3 returns a weight = signal if log(signal)>1.2. option is the drawing option; see TH1::Draw for the list of all drawing options.; If option contains the string ""goff"", no graphics is generated. nentries is the number of entries to process (default is all); first is the first entry to process (default is 0). Saving the result of Draw to an histogram. By default the temporary histogram created is called htemp.; If varexp0 contains >>hnew (following the variable(s) name(s),; the new histogram created is called hnew and it is kept in the current; directory.; Example:; tree.Draw(""sqrt(x)>>hsqrt"",""y>0""); will draw sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. By default, the specified histogram is reset.; To continue to append data to an existing histogram, use ""+"" in front; of the histogram name;; table.Draw(""sqrt(x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTable.html:21267,log,log,21267,root/html528/TTable.html,https://root.cern,https://root.cern/root/html528/TTable.html,6,['log'],['log']
Testability,"distribution types and optionally its parameters for 1-sampl...Definition GoFTest.cxx:124; ROOT::Math::GoFTest::GaussianCDFDouble_t GaussianCDF(Double_t x) constDefinition GoFTest.cxx:295; ROOT::Math::GoFTest::AndersonDarling2SamplesTestvoid AndersonDarling2SamplesTest(Double_t &pvalue, Double_t &testStat) constPerforms the Anderson-Darling 2-Sample Test.Definition GoFTest.cxx:646; ROOT::Math::GoFTest::GoFTestGoFTest()Disallowed default constructor.; ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTestvoid KolmogorovSmirnov2SamplesTest(Double_t &pvalue, Double_t &testStat) constKolmogorov-Smirnov 2-Samples Test.Definition GoFTest.cxx:896; ROOT::Math::GoFTest::fSamplesstd::vector< std::vector< Double_t > > fSamplesThe input data.Definition GoFTest.h:243; ROOT::Math::GoFTest::PValueAD1SampleDouble_t PValueAD1Sample(Double_t A2) constComputation of the 1-Sample Anderson-Darling Test's p-value.Definition GoFTest.cxx:483; ROOT::Math::GoFTest::AndersonDarlingTestvoid AndersonDarlingTest(Double_t &pvalue, Double_t &testStat) constPerforms the Anderson-Darling 1-Sample Test.Definition GoFTest.cxx:862; ROOT::Math::GoFTest::ExponentialCDFDouble_t ExponentialCDF(Double_t x) constDefinition GoFTest.cxx:299; ROOT::Math::GoFTest::SetParametersvoid SetParameters(const std::vector< double > &params)Sets the distribution parameters.Definition GoFTest.cxx:204; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(const IGenFunction &f, double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf)Definition Integrator.h:278; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(Function &f)method to set the a generic integration functionDefinition Integrator.h:4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:42710,test,testStat,42710,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['testStat']
Testability,"distributions. contained in TF1, TF2 or TF3 objects.; For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x); you can do :; TF1 *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10);; double r = f1->GetRandom();; or you can use the UNURAN package. You need in this case to initialize UNURAN; to the function you would like to generate.; TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();. The techniques of using directly a TF1,2 or 3 function is powerful and; can be used to generate numbers in the defined range of the function.; Getting a number from a TF1,2,3 function is also quite fast.; UNURAN is a powerful and flexible tool which containes various methods for; generate random numbers for continuous distributions of one and multi-dimension.; It requires some set-up (initialization) phase and can be very fast when the distribution; parameters are not changed for every call. The following table shows some timings (in nanosecond/call); for basic functions, TF1 functions and using UNURAN obtained running; the tutorial math/testrandom.C; Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running; Linux SLC4 64 bit and compiled with gcc 3.4. Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 96.000 494.000 109.000 125.000; Poisson(10)....... 138.000 1236.000 165.000 203.000; Poisson(70)....... 818.000 1195.000 835.000 844.000; Poisson(100)...... 837.000 1218.000 849.000 864.000; GausTF1........... 83.000 180.000 87.000 88.000; LandauTF1......... 80.000 180.000 83.000 86.000; GausUNURAN..",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRandom.html:2686,test,testrandom,2686,root/html528/TRandom.html,https://root.cern,https://root.cern/root/html528/TRandom.html,6,['test'],['testrandom']
Testability,"distributiontarget distribution(s) name ; [in]axisSteeringsteering within the target distribution(s) . Definition at line 403 of file TUnfoldDensity.cxx. ◆ RegularizeOneDistribution(). void TUnfoldDensity::RegularizeOneDistribution ; (; const TUnfoldBinning * ; binning, . ERegMode ; regmode, . EDensityMode ; densityMode, . const char * ; axisSteering . ). protected . regularize the distribution fof the given node ; Parameters. [in]binningcurrent node ; [in]regmoderegularisation mode ; [in]densityModetype of regularisation scaling ; [in]axisSteeringdetailed steering for the axes of the distribution . Definition at line 424 of file TUnfoldDensity.cxx. ◆ ScanTau(). Int_t TUnfoldDensity::ScanTau ; (; Int_t ; nPoint, . Double_t ; tauMin, . Double_t ; tauMax, . TSpline ** ; scanResult, . Int_t ; mode = kEScanTauRhoAvg, . const char * ; distribution = nullptr, . const char * ; axisSteering = nullptr, . TGraph ** ; lCurvePlot = nullptr, . TSpline ** ; logTauXPlot = nullptr, . TSpline ** ; logTauYPlot = nullptr . ). virtual . scan a function wrt tau and determine the minimum ; Parameters. [in]nPointnumber of points to be scanned ; [in]tauMinsmallest tau value to study ; [in]tauMaxlargest tau value to study ; [out]scanResultthe scanned function wrt log(tau) ; [in]mode1st parameter for the scan function ; [in]distribution2nd parameter for the scan function ; [in]projectionMode3rd parameter for the scan function ; [out]lCurvePlotfor monitoring, shows the L-curve ; [out]logTauXPlotfor monitoring, L-curve(X) as a function of log(tau) ; [out]logTauYPlotfor monitoring, L-curve(Y) as a function of log(tau). Return value: the coordinate number on the curve scanResult which corresponds to the minimum ; The function is scanned by repeating the following steps nPoint times . Choose a value of tau . Perform the unfolding for this choice of tau, DoUnfold(tau) . Determinethe scan variable GetScanVariable() . The method GetScanVariable() defines scans of correlation coefficients, where mode ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:68718,log,logTauYPlot,68718,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['log'],['logTauYPlot']
Testability,"dium names and the TGeoMedium for it; TGDMMapHelper<TGeoMixture>fmixmap!Map containing mixture names and the TGeoMixture for it; TGDMMapHelper<TGeoTranslation>fposmap!Map containing position names and the TGeoTranslation for it; map<string,string>freflectmap!Map containing reflection names and the Solid name ir references to; TGDMMapHelper<TGDMLRefl>freflsolidmap!Map containing reflection names and the TGDMLRefl for it - containing refl matrix; map<string,string>freflvolmap!Map containing reflected volume names and the solid ref for it; TGDMMapHelper<TGeoRotation>frotmap!Map containing rotation names and the TGeoRotation for it; TGDMMapHelper<TGeoScale>fsclmap!Map containing scale names and the TGeoScale for it; TGDMMapHelper<TGeoShape>fsolmap!Map containing solid names and the TGeoShape for it; TGDMMapHelper<TGeoVolume>fvolmap!Map containing volume names and the TGeoVolume for it. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoVolume* GDMLReadFile(const char* filename = ""test.gdml""); creates the new instance of the XMLEngine called 'gdml', using the filename >>; then parses the file and creates the DOM tree. Then passes the DOM to the; next function to translate it. const char* ParseGDML(TXMLEngine* gdml, XMLNodePointer_t node); this function recursively moves thru the DOM tree of the GDML file. It checks for; key words along the way and if a key word is found it calls the corresponding; function to interpret the node. double Evaluate(const char* evalline). Int_t SetAxis(const char* axisString); When using the 'divide' process in the geometry this function; sets the variable 'axis' depending on what is specified. const char* NameShort(const char* name); this function looks thru a string for the chars '0x' next to; each other, when it finds this, it calls another function to strip; the hex address. It does this recursively until the end of the; string is reached, returning a string without any hex addresses. XMLNodePoin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDMLParse.html:10008,test,test,10008,root/html528/TGDMLParse.html,https://root.cern,https://root.cern/root/html528/TGDMLParse.html,4,['test'],['test']
Testability,"dl;; 1373 logger << "" _| _| _| _| _| _| _| "" << Endl;; 1374 logger << "" _| _| _| _| _| _| "" << Endl << Endl;; 1375 break;; 1376 ; 1377 case kLeanWelcomeMsg:; 1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |_| |_| \\_/_/ \\_\\"" << Endl << Endl;; 1400 break;; 1401 ; 1402 case kSmall2WelcomeMsg:; 1403 logger << "" _____ __ ____ ___ "" << Endl;; 1404 logger << ""|_ _| \\/ \\ \\ / / \\ "" << Endl;; 1405 logger << "" | | | |\\/| |\\ \\ / / _ \\ "" << Endl;; 1406 logger << "" | | | | | | \\ V / ___ \\ "" << Endl;; 1407 logger << "" |_| |_| |_| \\_/_/ \\_\\ "" << Endl << Endl;; 1408 break;; 1409 ; 1410 case kOriginalWelcomeMsgColor:; 1411 logger << kINFO << """" << Color(""red""); 1412 << ""_______________________________________"" << Color(""reset"") << Endl;; 1413 logger << kINFO << """" << Color(""blue""); 1414 << Color(""red_bgd"") << Color(""bwhite"") << "" // "" << Color(""reset""); 1415 << Color(""white"") << Color(""blue_bgd""); 1416 << ""|\\ /|| \\ // /\\\\\\\\\\\\\\\\\\\\\\\\ \\ \\ \\ "" << Color(""reset"") << Endl;; 1417 logger << kINFO << """"<< Color(""blue""); 1418 << Color(""red_bgd"") << Color(""white"") << ""// "" << Color(""reset""); 1419 << Color(""white"") << Color(""blue_bgd""); 1420 << ""| \\/ || \\// /--\\\\\\\\\\",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:49471,log,logger,49471,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"dl;; 1669 Log() << kDEBUG << ""\t(sum of weights: "" << trainingSumWeightsPerClass.at(cls) << "")""; 1670 << "" - requested were "" << eventCounts[cls].nTrainingEventsRequested << "" events"" << Endl;; 1671 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1672 << setiosflags(ios::left) << std::setw(maxL); 1673 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1674 << ""testing events : "" << testingSizePerClass.at(cls) << Endl;; 1675 Log() << kDEBUG << ""\t(sum of weights: "" << testingSumWeightsPerClass.at(cls) << "")""; 1676 << "" - requested were "" << eventCounts[cls].nTestingEventsRequested << "" events"" << Endl;; 1677 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1678 << setiosflags(ios::left) << std::setw(maxL); 1679 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1680 << ""training and testing events: ""; 1681 << (trainingSizePerClass.at(cls)+testingSizePerClass.at(cls)) << Endl;; 1682 Log() << kDEBUG << ""\t(sum of weights: ""; 1683 << (trainingSumWeightsPerClass.at(cls)+testingSumWeightsPerClass.at(cls)) << "")"" << Endl;; 1684 if(eventCounts[cls].nEvAfterCut<eventCounts[cls].nEvBeforeCut) {; 1685 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << setiosflags(ios::left) << std::setw(maxL); 1686 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1687 << ""due to the preselection a scaling factor has been applied to the numbers of requested events: ""; 1688 << eventCounts[cls].cutScaling() << Endl;; 1689 }; 1690 }; 1691 Log() << kINFO << Endl;; 1692 ; 1693 // for information purposes; 1694 dsi.SetTrainingSumSignalWeights(trainingSumSignalWeights);; 1695 dsi.SetTrainingSumBackgrWeights(trainingSumBackgrWeights);; 1696 dsi.SetTestingSumSignalWeights(testingSumSignalWeights);; 1697 dsi.SetTestingSumBackgrWeights(testingSumBackgrWeights);; 1698 ; 1699 ; 1700}; Configurable.h; DataInputHandler.h; DataSetFactory.h; DataSetInfo.h; DataSet.h; Event.h; MsgLogger.h; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:78663,test,testingSumWeightsPerClass,78663,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testingSumWeightsPerClass']
Testability,"documentation ; Definition at line 81 of file SVWorkingSet.h. ◆ fB_up. Float_t TMVA::SVWorkingSet::fB_up. private . documentation ; Definition at line 82 of file SVWorkingSet.h. ◆ fdoRegression. Bool_t TMVA::SVWorkingSet::fdoRegression. private . TODO temporary, find nicer solution. ; Definition at line 72 of file SVWorkingSet.h. ◆ fExitFromTraining. bool* TMVA::SVWorkingSet::fExitFromTraining = nullptr. private . Definition at line 89 of file SVWorkingSet.h. ◆ fInputData. std::vector<TMVA::SVEvent*>* TMVA::SVWorkingSet::fInputData. private . input events ; Definition at line 73 of file SVWorkingSet.h. ◆ fIPyCurrentIter. UInt_t* TMVA::SVWorkingSet::fIPyCurrentIter = nullptr. private . Definition at line 88 of file SVWorkingSet.h. ◆ fKFunction. SVKernelFunction* TMVA::SVWorkingSet::fKFunction. private . kernel function ; Definition at line 75 of file SVWorkingSet.h. ◆ fKMatrix. SVKernelMatrix* TMVA::SVWorkingSet::fKMatrix. private . kernel matrix ; Definition at line 76 of file SVWorkingSet.h. ◆ fLogger. MsgLogger* TMVA::SVWorkingSet::fLogger. mutableprivate . ! message logger ; Definition at line 85 of file SVWorkingSet.h. ◆ fSupVec. std::vector<TMVA::SVEvent*>* TMVA::SVWorkingSet::fSupVec. private . output events - support vectors ; Definition at line 74 of file SVWorkingSet.h. ◆ fTEventLow. SVEvent* TMVA::SVWorkingSet::fTEventLow. private . last optimized event ; Definition at line 79 of file SVWorkingSet.h. ◆ fTEventUp. SVEvent* TMVA::SVWorkingSet::fTEventUp. private . last optimized event ; Definition at line 78 of file SVWorkingSet.h. ◆ fTolerance. Float_t TMVA::SVWorkingSet::fTolerance. private . documentation ; Definition at line 83 of file SVWorkingSet.h. Libraries for TMVA::SVWorkingSet:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/SVWorkingSet.h; tmva/tmva/src/SVWorkingSet.cxx. TMVASVWorkingSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVWorkingSet.html:5246,log,logger,5246,doc/master/classTMVA_1_1SVWorkingSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVWorkingSet.html,1,['log'],['logger']
Testability,"dom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TRandom Class ReferenceMath » MathCore » Interface classes for Random number generation. ; This is the base class for the ROOT Random number generators. ; This class defines the ROOT Random number interface and it should not be instantiated directly but used via its derived classes. The generator provided in TRandom itself is a LCG (Linear Congruential Generator), the BSD rand generator, that it should not be used because its period is only 2**31, i.e. approximately 2 billion events, that can be generated in just few seconds.; To generate random numbers, one should use one of the derived classes, which are:; TRandom3: it is based on the ""Mersenne Twister generator"", it is fast and a very long period of about \(10^{6000}\). However it fails some of the most stringent tests of the TestU01 suite. In addition this generator provide only numbers with 32 random bits, which might be not sufficient for some application based on double or extended precision. This generator is however used in ROOT used to instantiate the global pointer to the ROOT generator, gRandom.; TRandomRanluxpp : New implementation of the Ranlux generator algorithm based on a fast modular multiplication of 576 bits. This new implementation is built on the idea and the original code of Alexei Sibidanov, described in his paper . It generates random numbers with 52 bit precision (double precision) and it has an higher luxury level than the original Ranlux generator (p = 2048 instead of p=794).; TRandomMixMax: Generator based on the family of the MIXMAX matrix generators (see the MIXMAX HEPFORGE Web page and the documentation of the class ROOT::Math::MixMaxEngine for more information), that are base on the Asanov dynamical C systems. This generator has a state of N=240 64 bit int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom.html:1021,test,tests,1021,doc/master/classTRandom.html,https://root.cern,https://root.cern/doc/master/classTRandom.html,1,['test'],['tests']
Testability,"dom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); virtual TClass*IsA() const; TLimit&operator=(const TLimit&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TLimit(); TLimit(const TLimit&). protected:. static boolFluctuate(TLimitDataSource* input, TLimitDataSource* output, bool init, TRandom*, bool stat = false); static Double_tLogLikelihood(Double_t s, Double_t b, Double_t b2, Double_t d). Data Members; private:. static TOrdCollection*fgSystNamesCollection of systematics names; static TArrayD*fgTablea log table... just to speed up calculation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TConfidenceLevel * ComputeLimit(TLimitDataSource* data, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); class TLimit. Algorithm to compute 95% C.L. limits using the Likelihood ratio; semi-bayesian method.; It takes signal, background and data histograms wrapped in a; TLimitDataSource as input and runs a set of Monte Carlo experiments in; order to compute the limits. If needed, inputs are fluctuated according; to systematics. The output is a TConfidenceLevel. class TLimitDataSource. Takes the signal, background and data histograms as well as different; systematics sources to form the TLimit input. class TConfidenceLevel. Final result of the TLimit algorithm. It is created just after the; time-consuming part and can be stored in a TFile for further processing.; It contains light methods to return CLs, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLimit.html:2417,log,log,2417,root/html602/TLimit.html,https://root.cern,https://root.cern/root/html602/TLimit.html,2,['log'],['log']
Testability,"double alpha, double n, double sigma, double mean=0);  Crystal ball function. ;  ; double ROOT::Math::exponential_pdf (double x, double lambda, double x0=0);  Probability density function of the exponential distribution. ;  ; double ROOT::Math::fdistribution_pdf (double x, double n, double m, double x0=0);  Probability density function of the F-distribution. ;  ; double ROOT::Math::gamma_pdf (double x, double alpha, double theta, double x0=0);  Probability density function of the gamma distribution. ;  ; double ROOT::Math::gaussian_pdf (double x, double sigma=1, double x0=0);  Probability density function of the normal (Gaussian) distribution. ;  ; double ROOT::Math::bigaussian_pdf (double x, double y, double sigmax=1, double sigmay=1, double rho=0, double x0=0, double y0=0);  Probability density function of the bi-dimensional (Gaussian) distribution. ;  ; double ROOT::Math::landau_pdf (double x, double xi=1, double x0=0);  Probability density function of the Landau distribution: ;  ; double ROOT::Math::lognormal_pdf (double x, double m, double s, double x0=0);  Probability density function of the lognormal distribution. ;  ; double ROOT::Math::normal_pdf (double x, double sigma=1, double x0=0);  Probability density function of the normal (Gaussian) distribution. ;  ; double ROOT::Math::poisson_pdf (unsigned int n, double mu);  Probability density function of the Poisson distribution. ;  ; double ROOT::Math::tdistribution_pdf (double x, double r, double x0=0);  Probability density function of Student's t-distribution. ;  ; double ROOT::Math::uniform_pdf (double x, double a, double b, double x0=0);  Probability density function of the uniform (flat) distribution. ;  ; double ROOT::Math::crystalball_pdf (double x, double alpha, double n, double sigma, double mean=0);  pdf definition of the crystal_ball which is defined only for n > 1 otherwise integral is diverging ;  . Function Documentation. ◆ beta_pdf(). double ROOT::Math::beta_pdf ; (; double ; x, . double ; a, . d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__PdfFunc.html:3287,log,lognormal,3287,doc/master/group__PdfFunc.html,https://root.cern,https://root.cern/doc/master/group__PdfFunc.html,1,['log'],['lognormal']
Testability,"double quotes and all; 5289/// internal quotes are escaped.; 5290 ; 5291void TCling::Execute(TObject* obj, TClass* cl, TMethod* method,; 5292 TObjArray* params, int* error); 5293{; 5294 if (!method) {; 5295 Error(""Execute"", ""No method was defined"");; 5296 return;; 5297 }; 5298 TList* argList = method->GetListOfMethodArgs();; 5299 // Check number of actual parameters against of expected formal ones; 5300 ; 5301 Int_t nparms = argList->LastIndex() + 1;; 5302 Int_t argc = params ? params->GetEntries() : 0;; 5303 ; 5304 if (argc > nparms) {; 5305 Error(""Execute"",""Too many parameters to call %s, got %d but expected at most %d."",method->GetName(),argc,nparms);; 5306 return;; 5307 }; 5308 if (nparms != argc) {; 5309 // Let's see if the 'missing' argument are all defaulted.; 5310 // if nparms==0 then either we stopped earlier either argc is also zero and we can't reach here.; 5311 assert(nparms > 0);; 5312 ; 5313 TMethodArg *arg = (TMethodArg *) argList->At( 0 );; 5314 if (arg && arg->GetDefault() && arg->GetDefault()[0]) {; 5315 // There is a default value for the first missing; 5316 // argument, so we are fine.; 5317 } else {; 5318 Int_t firstDefault = -1;; 5319 for (Int_t i = 0; i < nparms; i ++) {; 5320 arg = (TMethodArg *) argList->At( i );; 5321 if (arg && arg->GetDefault() && arg->GetDefault()[0]) {; 5322 firstDefault = i;; 5323 break;; 5324 }; 5325 }; 5326 if (firstDefault >= 0) {; 5327 Error(""Execute"",""Too few arguments to call %s, got only %d but expected at least %d and at most %d."",method->GetName(),argc,firstDefault,nparms);; 5328 } else {; 5329 Error(""Execute"",""Too few arguments to call %s, got only %d but expected %d."",method->GetName(),argc,nparms);; 5330 }; 5331 return;; 5332 }; 5333 }; 5334 ; 5335 const char* listpar = """";; 5336 TString complete(10);; 5337 if (params) {; 5338 // Create a character string of parameters from TObjArray; 5339 TIter next(params);; 5340 for (Int_t i = 0; i < argc; i ++) {; 5341 TMethodArg* arg = (TMethodArg*) argList->At(i);; 534",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:206960,assert,assert,206960,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXSocket.html:12232,log,login,12232,root/html534/TXSocket.html,https://root.cern,https://root.cern/root/html534/TXSocket.html,1,['log'],['login']
Testability,"ds). Example; ""int(fabs([eventID]))%int([NumFolds])"". Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVACrossValidationRegression. ; DataSetInfo : [datasetcvreg] : Added class ""Regression""; : Add Tree TreeR of type Regression with 10000 events; --- TMVACrossValidationRegression: Using input file: ./files/tmva_reg_example.root; : Dataset[datasetcvreg] : Class index : 0 name : Regression; <HEADER> Factory : You are running ROOT Version: 6.33.01, Oct 10, 2023; : ; : _/_/_/_/_/ _| _| _| _| _|_| ; : _/ _|_| _|_| _| _| _| _| ; : _/ _| _| _| _| _| _|_|_|_| ; : _/ _| _| _| _| _| _| ; : _/ _| _| _| _| _| ; : ; : ___________TMVA Version 4.2.1, Feb 5, 2015; : ; : Rebuilding Dataset datasetcvreg; : Building event vectors for type 2 Regression; : Dataset[datasetcvreg] : create input formulas for tree TreeR; <HEADER> DataSetFactory : [datasetcvreg] : Number of events in input trees; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Regression -- training events : 9999; : Regression -- testing events : 1; : Regression -- training and testing events: 10000; : ; <HEADER> DataSetInfo : Correlation matrix (Regression):; : ------------------------; : var1 var2; : var1: +1.000 +0.002; : var2: +0.002 +1.000; : ------------------------; <HEADER> DataSetFactory : [datasetcvreg] : ; : ; : ; : ; : ========================================; : ========================================; : ; <HEADER> Factory : Booking method: BDTG_fold1; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Regression Loss Function: Huber; : Training 500 Decision Trees ... patience please; : Elapsed time for training with 4999 events: 1.31 sec ; : Dataset[datasetcvreg] : Create results for training; : Dataset[datasetcvreg] : Evaluation of BDTG_fold1 on training sample; : Dataset[datasetcvre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html:2857,test,testing,2857,doc/master/TMVACrossValidationRegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html,3,['test'],['testing']
Testability,"ds.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:137383,benchmark,benchmarks,137383,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['benchmark'],['benchmarks']
Testability,"ds; a reference to the object. The effective drawing is performed; when the canvas receives a signal to be painted.; This signal is generally sent when typing carriage return in the; command input or when a graphical operation has been performed on one; of the pads of this canvas.; When a Canvas/Pad is repainted, the member function Paint for all; objects in the Pad linked list is invoked. When the mouse is moved on the Pad, The member function DistancetoPrimitive; is called for all the elements in the pad. DistancetoPrimitive returns; the distance in pixels to this object.; when the object is within the distance window, the member function; ExecuteEvent is called for this object.; in ExecuteEvent, move, changes can be performed on the object.; For examples of DistancetoPrimitive and ExecuteEvent functions,; see classes TLine::DistancetoPrimitive, TLine::ExecuteEvent; TBox::DistancetoPrimitive, TBox::ExecuteEvent; TH1::DistancetoPrimitive, TH1::ExecuteEvent. A Pad supports linear and log scales coordinate systems.; The transformation coefficients are explained in TPad::ResizePad.; An example of pads hierarchy is shown below:. /*. */. Function Members (Methods); public:. TPad(); TPad(const char* name, const char* title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color = -1, Short_t bordersize = -1, Short_t bordermode = -2); virtual~TPad(); virtual voidAbsCoordinates(Bool_t set); virtual Double_tAbsPixeltoX(Int_t px); virtual voidAbsPixeltoXY(Int_t xpixel, Int_t ypixel, Double_t& x, Double_t& y); virtual Double_tAbsPixeltoY(Int_t py); voidTObject::AbstractMethod(const char* method) const; virtual voidAddExec(const char* name, const char* command); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAutoExec(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidBrowse(TBrowser* b); virtual TLeg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:2108,log,log,2108,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,4,['log'],['log']
Testability,"ds; a reference to the object. The effective drawing is performed; when the canvas receives a signal to be painted.; This signal is generally sent when typing carriage return in the; command input or when a graphical operation has been performed on one; of the pads of this canvas.; When a Canvas/Pad is repainted, the member function Paint for all; objects in the Pad linked list is invoked. When the mouse is moved on the Pad, The member function DistancetoPrimitive; is called for all the elements in the pad. DistancetoPrimitive returns; the distance in pixels to this object.; when the object is within the distance window, the member function; ExecuteEvent is called for this object.; in ExecuteEvent, move, changes can be performed on the object.; For examples of DistancetoPrimitive and ExecuteEvent functions,; see classes TLine::DistancetoPrimitive, TLine::ExecuteEvent; TBox::DistancetoPrimitive, TBox::ExecuteEvent; TH1::DistancetoPrimitive, TH1::ExecuteEvent. A Pad supports linear and log scales coordinate systems.; The transformation coefficients are explained in TPad::ResizePad.; An example of pads hierarchy is shown below:. /*. */. Function Members (Methods); public:. virtual~TPad(); virtual voidAbsCoordinates(Bool_t set); virtual Double_tAbsPixeltoX(Int_t px); virtual voidAbsPixeltoXY(Int_t xpixel, Int_t ypixel, Double_t& x, Double_t& y); virtual Double_tAbsPixeltoY(Int_t py); voidTObject::AbstractMethod(const char* method) const; virtual voidAddExec(const char* name, const char* command); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAutoExec(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidBrowse(TBrowser* b); virtual TLegend*BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67000000000000004, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """")MENU ; virtual TVirtualPad*cd(Int_t subpadnumb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPad.html:2127,log,log,2127,root/html602/TPad.html,https://root.cern,https://root.cern/root/html602/TPad.html,2,['log'],['log']
Testability,"ds; the second division is a list of the parent class methods. The subsequent divisions are the methods other parent classes in case of multiple inheritance. For example, see the TPaveText::title context menu. A TPaveText inherits from TAttLine, which has the method SetLineAttributes().; 9.2.3.3 Adding Context Menus for a Class; For a method to appear in the context menu of the object it has to be marked by // *MENU* in the header file. Below is the line from TAttLine.h that adds the SetLineAttribute method to the context menu.; virtual void SetLineAttributes(); // *MENU*; Nothing else is needed, since Cling knows the classes and their methods. It takes advantage of that to create the context menu on the fly when the object is clicking on. If you click on an axis, ROOT will ask the interpreter what are the methods of the TAxis and which ones are set for being displayed in a context menu.; Now, how does the interpreter know this? Remember, when you build a class that you want to use in the ROOT environment, you use rootcling that builds the so-called stub functions and the dictionary. These functions and the dictionary contain the knowledge of the used classes. To do this, rootcling parses all the header files. ROOT has defined some special syntax to inform Cling of certain things, this is done in the comments so that the code still compiles with a C++ compiler.; For example, you have a class with a Draw() method, which will display itself. You would like a context menu to appear when on clicks on the image of an object of this class. The recipe is the following:. The class has to contain the ClassDef/ClassImp macros; For each method you want to appear in the context menu, put a comment after the declaration containing *MENU* or *TOGGLE* depending on the behavior you expect. One usually uses Set methods (setters). The *TOGGLE* comment is used to toggle a boolean data field. In that case, it is safe to call the data field fMyBool where MyBool is the name of the setter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:296242,stub,stub,296242,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['stub'],['stub']
Testability,"dsetVerbose(Bool_t flag = kTRUE); Int_tsetWarnLevel(Int_t newLevel); virtual voidShowMembers(TMemberInspector& insp, char* parent); Int_tsimplex(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidapplyCovarianceMatrix(TMatrixDSym& V); voidbackProp(); voidclearPdfParamAsymErr(Int_t index); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Int_tgetNPar() const; Double_tgetPdfParamErr(Int_t index); Double_tgetPdfParamVal(Int_t index); ofstream*logfile() const; voidTObject::MakeZombie(); Double_t&maxFCN(); voidprofileStart(); voidprofileStop(); voidsetPdfParamErr(Int_t index, Double_t value); voidsetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); virtual Bool_tsetPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Bool_tsynchronize(Bool_t verbose). private:. RooMinuit(const RooMinuit&). Data Members; public:. enum Strategy { Speed; Balance; Robustness; };; enum PrintLevel { None; Reduced; Normal; ExtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; TMatrixDSym*_extV; RooArgList*_floatParamList; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstrea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:6580,log,logfile,6580,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,1,['log'],['logfile']
Testability,"duals plot (see Fig. 1c) and the normal Q-Q plot; 1965/// (see Fig. 1d) of residuals are regular and we cannot identify the outliers; 1966/// or bins with a big influence on \f$ \chi^{2} \f$.; 1967///; 1968/// The second example presents the same two histograms but 17 events was added; 1969/// to content of bin number 15 in unweighted histogram. Fig.2 shows the result; 1970/// of comparison of the unweighted histogram with 217 events (minimal expected; 1971/// frequency equal to one) and the weighted histogram with 500 events (minimal; 1972/// expected frequency equal to 25); 1973/// Begin_Macro; 1974/// ../../../tutorials/math/chi2test.C(17); 1975/// End_Macro; 1976/// Fig 2. An example of comparison of the unweighted histogram with 217 events; 1977/// and the weighted histogram with 500 events:; 1978/// 1. unweighted histogram;; 1979/// 2. weighted histogram;; 1980/// 3. normalized residuals plot;; 1981/// 4. normal Q-Q plot of residuals.; 1982///; 1983/// The value of the test statistic \f$ \chi^{2} \f$ is equal to; 1984/// 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; 1985/// the two histograms is rejected for 0.05 significant level. The behavior of; 1986/// the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; 1987/// Fig. 2d) of residuals are not regular and we can identify the outlier or; 1988/// bin with a big influence on \f$ \chi^{2} \f$.; 1989///; 1990/// #### References:; 1991///; 1992/// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; 1993/// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; 1994/// Series No. 1, London.; 1995/// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; 1996/// of weighted and unweighted histograms. Statistical Problems in Particle; 1997/// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; 1998/// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; 1999/// Gagunashvili,N., Compa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:80612,test,test,80612,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,"duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization choice is only fixed for those; RooAddPdf components that have the default 'automatic' interpretation of; coefficients (i.e. the interpretation is defined by the observables passed; to getVal()). If force is true, also RooAddPdf that already have a fixed; interpretation are changed to a new fixed interpretation. void fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization range choice is only fixed for those; RooAddPdf components that currently use the de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:63098,log,logged,63098,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['log'],['logged']
Testability,"dy existing info is the same as; 939 // the current one? Yes; 940 // In case a class (eg Event.h) has a TClonesArray of Tracks, it could be; 941 // that the old info does not have the class name (Track) in the data; 942 // member title. Set old title to new title; 943 if (info) {; 944 // We found an existing TStreamerInfo for our ClassVersion; 945 Bool_t match = kTRUE;; 946 Bool_t done = kFALSE;; 947 Bool_t oldIsNonVersioned = kFALSE;; 948 if (fClassVersion!=0 && !fClass->TestBit(TClass::kWarned) && (fClassVersion == info->GetClassVersion()) && (fCheckSum != info->GetCheckSum())) {; 949 // The TStreamerInfo's checksum is different from the checksum for the compile class.; 950 ; 951 match = kFALSE;; 952 oldIsNonVersioned = (info->fOnFileClassVersion==1 && info->fClassVersion != 1) || isStdPair;; 953 ; 954 if (fClass->IsLoaded() && (fClassVersion == fClass->GetClassVersion()) && fClass->HasDataMemberInfo()) {; 955 // In the case where the read-in TStreamerInfo does not; 956 // match in the 'current' in memory TStreamerInfo for; 957 // a non foreign class (we can not get here if this is; 958 // a foreign class so we do not need to test it),; 959 // we need to add this one more test since the CINT behaviour; 960 // with enums changed over time, so verify the checksum ignoring; 961 // members of type enum. We also used to not count the //[xyz] comment; 962 // in the checksum, so test for that too.; 963 if ( (fCheckSum == fClass->GetCheckSum() || fClass->MatchLegacyCheckSum(fCheckSum) ); 964 &&(info->GetCheckSum() == fClass->GetCheckSum() || fClass->MatchLegacyCheckSum(info->GetCheckSum())); 965 ); 966 {; 967 match = kTRUE;; 968 }; 969 if (fOldVersion <= 2) {; 970 // Names of STL base classes was modified in vers==3. Allocators removed; 971 // (We could be more specific (see test for the same case below); 972 match = kTRUE;; 973 }; 974 if (!match && CompareContent(0,info,kFALSE,kFALSE,file)) {; 975 match = kTRUE;; 976 }; 977#ifdef TEST_FOR_BACKWARD_COMPATIBILITY_ABSTRACT_C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:35216,test,test,35216,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,2,['test'],['test']
Testability,e () const;  . Protected Attributes; TGLAutoRotator * fAutoRotator;  ; Bool_t fAxesDepthTest;  axes type ;  ; Int_t fAxesType;  smooth line edge rendering ;  ; TGLCameraOverlay * fCameraOverlay;  reference marker on? ;  ; TGLClipSet * fClipSet;  ; TContextMenu * fContextMenu;  external pad - remove replace with signal ;  ; TGLCamera * fCurrentCamera;  ; TGLOverlayElement * fCurrentOvlElm;  ; TGLSelectRecord fCurrentSelRec;  ; TGLColorSet fDarkColorSet;  viewport - drawn area ;  ; Bool_t fDebugMode;  cache logicals during scene rebuilds ;  ; EDragAction fDragAction;  ; Bool_t fDrawCameraCenter;  reference position ;  ; TGEventHandler * fEventHandler;  select record from last overlay select ;  ; Float_t fFader;  default file-name for SavePicture() ;  ; TGedEditor * fGedEditor;  event handler ;  ; TGLContextIdentity * fGLCtxId;  for embedded gl viewer ;  ; Int_t fGLDevice;  ; TGLWidget * fGLWidget;  ; Bool_t fIgnoreSizesOnUpdate;  for embedded gl viewer ;  ; Bool_t fIsPrinting;  debug mode (forced rebuild + draw scene/frustum/interest boxes) ;  ; TGLColorSet fLightColorSet;  color-set with dark background ;  ; TGLLightSet * fLightSet;  ; Float_t fLineScale;  size scale for points ;  ; Float_t fMaxSceneDrawTimeHQ;  timer for triggering redraws ;  ; Float_t fMaxSceneDrawTimeLQ;  max time for scene rendering at high LOD (in ms) ;  ; TGLOrthoCamera fOrthoXnOYCamera;  ; TGLOrthoCamera fOrthoXnOZCamera;  ; TGLOrthoCamera fOrthoXOYCamera;  ; TGLOrthoCamera fOrthoXOZCamera;  ; TGLOrthoCamera fOrthoZnOXCamera;  ; TGLOrthoCamera fOrthoZnOYCamera;  ; TGLOrthoCamera fOrthoZOXCamera;  ; TGLOrthoCamera fOrthoZOYCamera;  ; TGLOvlSelectRecord fOvlSelRec;  current overlay element ;  ; TVirtualPad * fPad;  ; TGLPerspectiveCamera fPerspectiveCameraXOY;  ; TGLPerspectiveCamera fPerspectiveCameraXOZ;  ; TGLPerspectiveCamera fPerspectiveCameraYOZ;  ; TString fPictureFileName;  ; Float_t fPointScale;  color-set with light background ;  ; TGLPShapeObj * fPShapeWrap;  GED editor. ;  ; EPushAct,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:32608,log,logicals,32608,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['log'],['logicals']
Testability,"e (1000 events); : Elapsed time for evaluation of 1000 events: 0.0581 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDT; : ; <HEADER> BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : x: 1.0136 0.57754 [ 0.0011208 1.9999 ]; : y: 1.4938 0.75135 [ 0.0054384 2.9981 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset BDT : 0.870; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : dataset BDT : 0.495 (0.675) 0.622 (0.754) 0.794 (0.908); : -------------------------------------------------------------------------------------------------------------------; : ; <HEADER> Dataset:dataset : Created tree 'TestTree' with 1000 events; : ; <HEADER> Dataset:dataset : Created tree 'TrainTree' with 1000 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; ; #include ""TMVA/DataLoader.h""; #include ""TMVA/Factory.h""; ; #include ""TFile.h""; #include ""TString.h""; #include ""TTree.h""; ; //; // Helper function to generate 2-D gaussian data points and fill to a R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMinimalClassification_8C.html:6072,test,test,6072,doc/master/TMVAMinimalClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMinimalClassification_8C.html,1,['test'],['test']
Testability,"e ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id: HybridResult.h 34109 2010-06-24 15:00:16Z moneta $ » Last generated: 2010-09-27 22:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridResult.html:10648,test,test,10648,root/html528/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridResult.html,3,['test'],['test']
Testability,"e ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id: HybridResult.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HybridResult.html:11223,test,test,11223,root/html530/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HybridResult.html,3,['test'],['test']
Testability,"e ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id: HybridResult.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HybridResult.html:11223,test,test,11223,root/html532/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HybridResult.html,3,['test'],['test']
Testability,"e . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anything to the ROOT repository is mandatory.; The ROOT continuous integration infrastructure allows to automatically check the PR also on a battery of platform, for example including macos and linux boxes.; In order to be able to run all tests, the simple steps below need to be followed; Prepare your development area and build ROOT; mkdir RootDevelopment; cd RootDevelopment; git clone https://github.com/root-project/root; git clone https://github.com/root-project/roottest; mkdir build; cd build; echo Note the cmake options; cmake -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON ../root. Inspect and run the tests; From within the build directory. List all tests: ctest -N; List all test matching a regex: ctest -N -R myregex; Run all tests on N cores: ctest -j N. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:2235,test,tests,2235,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,1,['test'],['tests']
Testability,"e 130 of file TTreePlayer.h. ◆ CopyTree(). TTree * TTreePlayer::CopyTree ; (; const char * ; selection, . Option_t * ; option, . Long64_t ; nentries, . Long64_t ; firstentry . ). overridevirtual . Copy a Tree with selection, make a clone of this Tree header, then copy the selected entries. . selection is a standard selection expression (see TTreePlayer::Draw); option is reserved for possible future use; nentries is the number of entries to process (default is all); first is the first entry to process (default is 0). IMPORTANT: The copied tree stays connected with this tree until this tree is deleted. In particular, any changes in branch addresses in this tree are forwarded to the clone trees. Any changes made to the branch addresses of the copied trees are over-ridden anytime this tree changes its branch addresses. Once this tree is deleted, all the addresses of the copied tree are reset to their default values.; The following example illustrates how to copy some events from the Tree generated in $ROOTSYS/test/Event gSystem->Load(""libEvent"");; TFile f(""Event.root"");; TTree *T = (TTree*)f.Get(""T"");; Event *event = new Event();; T->SetBranchAddress(""event"",&event);; TFile f2(""Event2.root"",""recreate"");; TTree *T2 = T->CopyTree(""fNtrack<595"");; T2->Write();; f#define f(i)Definition RSha256.hxx:104; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; EventDefinition collection_proxies.C:172; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; T2#define T2Definition md5.inl:147. Implements TVirtualTreePlayer.; Definition at line 195 of file TTreePlayer.cxx. ◆ DeclFileName(). static const char * TTreePlayer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:19330,test,test,19330,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['test'],['test']
Testability,"e 2. For example, for each event here we perform a simple object selection: // Muon_pt is an array: fill a histogram with the array elements > 100 in each event; tree->Draw('Muon_pt', 'Muon_pt > 100'); . [in]optionThe drawing option.; When an histogram is produced it can be any histogram drawing option listed in THistPainter.; when no option is specified:; the default histogram drawing option is used if the expression is of the form ""e1"".; if the expression is of the form ""e1:e2""or ""e1:e2:e3"" a cloud of unbinned 2D or 3D points is drawn respectively.; if the expression has four fields ""e1:e2:e3:e4"" a cloud of unbinned 3D points is produced with e1 vs e2 vs e3, and e4 is mapped on the current color palette. If option COL is specified when varexp has three fields: tree.Draw(""e1:e2:e3"","""",""col"");; a 2D scatter is produced with e1 vs e2, and e3 is mapped on the current color palette. The colors for e3 are evaluated once in linear scale before painting. Therefore changing the pad to log scale along Z as no effect on the colors.; if expression has more than four fields the option ""PARA""or ""CANDLE"" can be used.; If option contains the string ""goff"", no graphics is generated. . [in]nentriesThe number of entries to process (default is all) ; [in]firstentryThe first entry to process (default is 0). Drawing expressions using arrays and array elements; Let assumes, a leaf fMatrix, on the branch fEvent, which is a 3 by 3 array, or a TClonesArray. In a TTree::Draw expression you can now access fMatrix using the following syntaxes:. String passed What is used for each entry of the tree . fMatrix the 9 elements of fMatrix . fMatrix[][] the 9 elements of fMatrix . fMatrix[2][2] only the elements fMatrix[2][2] . fMatrix[1] the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2] . fMatrix[1][] the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2] . fMatrix[][0] the 3 elements fMatrix[0][0], fMatrix[1][0] and fMatrix[2][0] . ""fEvent.fMatrix...."" same as ""fMatrix..."" (unle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:115016,log,log,115016,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['log'],['log']
Testability,"e < -margin ? 1.0 : 0; });; 22 std::shared_ptr<std::function<double(double)>> InvTanh = std::make_shared<std::function<double(double)>> ([](double value){ return 1.0 - std::pow (value, 2.0); });; 23 std::shared_ptr<std::function<double(double)>> InvTanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return 0.3 + (1.0 - std::pow (value, 2.0)); });; 24 std::shared_ptr<std::function<double(double)>> Linear = std::make_shared<std::function<double(double)>> ([](double value){ return value; });; 25 std::shared_ptr<std::function<double(double)>> ReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.0; return value > margin ? value-margin : 0; });; 26 std::shared_ptr<std::function<double(double)>> Sigmoid = std::make_shared<std::function<double(double)>> ([](double value){ value = std::max (-100.0, std::min (100.0,value)); return 1.0/(1.0 + std::exp (-value)); });; 27 std::shared_ptr<std::function<double(double)>> SoftPlus = std::make_shared<std::function<double(double)>> ([](double value){ return std::log (1.0+ std::exp (value)); });; 28 std::shared_ptr<std::function<double(double)>> ZeroFnc = std::make_shared<std::function<double(double)>> ([](double /*value*/){ return 0; });; 29 std::shared_ptr<std::function<double(double)>> Tanh = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value); });; 30 std::shared_ptr<std::function<double(double)>> SymmReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.3; return value > margin ? value-margin : value < -margin ? value+margin : 0; });; 31 std::shared_ptr<std::function<double(double)>> TanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value-0.3); });; 32 std::shared_ptr<std::function<double(double)>> SoftSign = std::make_shared<std::function<double(double)>> ([](double value){ return value / (1.0 + fabs (value)); });; 33 ; 34 ; 35 double gauss",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:3300,log,log,3300,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,1,['log'],['log']
Testability,"e = ""tgeoatt.C""); // *MENU*; 245 void RestoreMasterVolume(); // *MENU*; 246 void SetMaxVisNodes(Int_t maxnodes = 10000); // *MENU*; 247 //--- geometry checking; 248 void AnimateTracks(Double_t tmin = 0, Double_t tmax = 5E-8, Int_t nframes = 200, Option_t *option = ""/*""); // *MENU*; 249 void CheckBoundaryErrors(Int_t ntracks = 1000000, Double_t radius = -1.); // *MENU*; 250 void CheckBoundaryReference(Int_t icheck = -1);; 251 void CheckGeometryFull(Int_t ntracks = 1000000, Double_t vx = 0., Double_t vy = 0., Double_t vz = 0.,; 252 Option_t *option = ""ob""); // *MENU*; 253 void CheckGeometry(Option_t *option = """");; 254 void CheckOverlaps(Double_t ovlp = 0.1, Option_t *option = """"); // *MENU*; 255 void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t *option = """", Double_t safety = 0.); // *MENU*; 256 void CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option);; 257 void ConvertReflections();; 258 void DrawCurrentPoint(Int_t color = 2); // *MENU*; 259 void DrawTracks(Option_t *option = """"); // *MENU*; 260 void SetParticleName(const char *pname) { fParticleName = pname; }; 261 const char *GetParticleName() const { return fParticleName.Data(); }; 262 void DrawPath(const char *path, Option_t *option = """");; 263 void PrintOverlaps() const; // *MENU*; 264 void RandomPoints(const TGeoVolume *vol, Int_t npoints = 10000, Option_t *option = """");; 265 void RandomRays(Int_t nrays = 1000, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0,; 266 const char *target_vol = nullptr, Bool_t check_norm = kFALSE);; 267 TGeoNode *SamplePoints(Int_t npoints, Double_t &dist, Double_t epsil = 1E-5, const char *g3path = """");; 268 void SetNmeshPoints(Int_t npoints = 1000);; 269 void SetCheckedNode(TGeoNode *node);; 270 void Test(Int_t npoints = 1000000, Option_t *option = """"); // *MENU*; 271 void TestOverlaps(const char *path = """"); // *MENU*; 272 Double_t Weight(Double_t precision = 0.01, Option_t *option = ""va""); // *MENU*; 273 ; 274 //--- GE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:12931,test,testNo,12931,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['test'],['testNo']
Testability,"e = 1024 * 16); Create a THn / THnSparse object from a histogram deriving from TH1. THnBase* CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024 * 16); Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly; converting THn <-> THnSparse. void Add(const TH1* hist, Double_t c = 1.); Fill the THnBase with the bins of hist that have content; or error != 0. TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); Fit a THnSparse with function f. since the data is sparse by default a likelihood fit is performed; merging all the regions with empty bins for betetr performance efficiency. Since the THnSparse is not drawn no graphics options are passed; Here is the list of possible options. = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribution. Bool_t IsInRange(Int_t* coord) const; Check whether bin coord is in range, as defined by TAxis::SetRange(). TObject* ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; Project all bins into a ndim-dimensional THn / THnSparse (whatever; *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram,; keeping only axes in dim (specifying ndim dimensions).; If ""opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnBase.html:13145,log,log-likelihood,13145,root/html602/THnBase.html,https://root.cern,https://root.cern/root/html602/THnBase.html,2,['log'],['log-likelihood']
Testability,"e = TFile::Open( outfileName, ""RECREATE"" );; ; ; ; // background 0; // ____________; TMVA::Factory *factory = new TMVA::Factory( ""TMVAMultiBkg0"", outputFile, factoryOptions );; TMVA::DataLoader *dataloader=new TMVA::DataLoader(""datasetBkg0"");; ; dataloader->AddVariable( ""var1"", ""Variable 1"", """", 'F' );; dataloader->AddVariable( ""var2"", ""Variable 2"", """", 'F' );; dataloader->AddVariable( ""var3"", ""Variable 3"", ""units"", 'F' );; dataloader->AddVariable( ""var4"", ""Variable 4"", ""units"", 'F' );; ; dataloader->AddSignalTree ( signal, signalWeight );; dataloader->AddBackgroundTree( background0, background0Weight );; ; // factory->SetBackgroundWeightExpression(""weight"");; TCut mycuts = """"; // for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; TCut mycutb = """"; // for example: TCut mycutb = ""abs(var1)<0.5"";; ; // tell the factory to use all remaining events in the trees after training for testing:; dataloader->PrepareTrainingAndTestTree( mycuts, mycutb,; ""nTrain_Signal=0:nTrain_Background=0:SplitMode=Random:NormMode=NumEvents:!V"" );; ; // Boosted Decision Trees; factory->BookMethod( dataloader, TMVA::Types::kBDT, ""BDTG"",; ""!H:!V:NTrees=1000:BoostType=Grad:Shrinkage=0.30:UseBaggedBoost:BaggedSampleFraction=0.6:SeparationType=GiniIndex:nCuts=20:MaxDepth=2"" );; factory->TrainAllMethods();; factory->TestAllMethods();; factory->EvaluateAllMethods();; ; outputFile->Close();; ; delete factory;; delete dataloader;; ; ; ; // background 1; // ____________; ; outfileName = ""TMVASignalBackground1.root"";; outputFile = TFile::Open( outfileName, ""RECREATE"" );; dataloader=new TMVA::DataLoader(""datasetBkg1"");; ; factory = new TMVA::Factory( ""TMVAMultiBkg1"", outputFile, factoryOptions );; dataloader->AddVariable( ""var1"", ""Variable 1"", """", 'F' );; dataloader->AddVariable( ""var2"", ""Variable 2"", """", 'F' );; dataloader->AddVariable( ""var3"", ""Variable 3"", ""units"", 'F' );; dataloader->AddVariable( ""var4"", ""Variable 4"", ""units"", 'F' );; ; dataloader->AddSignalTree ( signal, signalWeight );; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:33197,test,testing,33197,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,1,['test'],['testing']
Testability,"e = oldClass->Size();; 1210 char *obj = (char*)addr;; 1211 char *endobj = obj + conf->fLength*objectSize;; 1212 ; 1213 for(; obj<endobj; obj+=objectSize) {; 1214 Int_t nobjects;; 1215 buf.ReadInt(nobjects);; 1216 TVirtualCollectionProxy::TPushPop helper( oldProxy, (char*)obj );; 1217 void* alternative = oldProxy->Allocate(nobjects,true);; 1218 if (nobjects) {; 1219 char startbuf[TVirtualCollectionProxy::fgIteratorArenaSize];; 1220 char endbuf[TVirtualCollectionProxy::fgIteratorArenaSize];; 1221 void *begin = &(startbuf[0]);; 1222 void *end = &(endbuf[0]);; 1223 config->fCreateIterators(alternative, &begin, &end, oldProxy);; 1224 // We can not get here with a split vector of pointer, so we can indeed assume; 1225 // that actions->fConfiguration != null.; 1226 buf.ApplySequence(*actions, begin, end);; 1227 if (begin != &(startbuf[0])) {; 1228 // assert(end != endbuf);; 1229 config->fDeleteTwoIterators(begin,end);; 1230 }; 1231 }; 1232 oldProxy->Commit(alternative);; 1233 }; 1234 ; 1235 } else {; 1236 ; 1237 TClass *oldClass = config->fOldClass;; 1238 ; 1239 TVirtualCollectionProxy *oldProxy = oldClass ? oldClass->GetCollectionProxy() : nullptr;; 1240 if (!oldProxy) {; 1241 // Missing information, broken file ... give up; 1242 return;; 1243 }; 1244 ; 1245 int objectSize = oldClass->Size();; 1246 char *obj = (char*)addr;; 1247 char *endobj = obj + conf->fLength*objectSize;; 1248 ; 1249 for(; obj<endobj; obj+=objectSize) {; 1250 TVirtualCollectionProxy::TPushPop helper( oldProxy, (char*)obj );; 1251 Int_t nobjects;; 1252 buf.ReadInt(nobjects);; 1253 void* env = oldProxy->Allocate(nobjects,true);; 1254 ; 1255 if (nobjects || vers < 7 ) {; 1256 // coverity[dereference] since this is a member streaming action by definition the collection contains objects.; 1257 TStreamerInfo *subinfo = (TStreamerInfo*)oldProxy->GetValueClass()->GetStreamerInfo( 0 );; 1258 ; 1259 subinfo->ReadBufferSTL(buf, oldProxy, nobjects, /* offset */ 0, /* v7 */ kFALSE);; 1260 }; 1261 oldProxy->Commit(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:50863,assert,assert,50863,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['assert'],['assert']
Testability,"e == ""U"" || trName == ""Uniform"") {; 150 if (variables.Length() == 0) variables = ""_V_,_T_"";; 151 transformation = new VariableGaussTransform(dataInfo, ""Uniform"" );; 152 }; 153 else if (trName == ""G"" || trName == ""Gauss"") {; 154 if (variables.Length() == 0) variables = ""_V_"";; 155 transformation = new VariableGaussTransform(dataInfo);; 156 }; 157 else if (trName == ""N"" || trName == ""Norm"" || trName == ""Normalise"" || trName == ""Normalize"") {; 158 if (variables.Length() == 0) variables = ""_V_,_T_"";; 159 transformation = new VariableNormalizeTransform(dataInfo);; 160 }; 161 else; 162 log << kFATAL << Form(""Dataset[%s] : "",dataInfo.GetName()); 163 << ""<ProcessOptions> Variable transform '""; 164 << trName << ""' unknown."" << Endl;; 165 ; 166 ; 167 if (transformation) {; 168 ClassInfo* clsInfo = dataInfo.GetClassInfo(idxCls);; 169 if (clsInfo); 170 log << kHEADER << Form(""[%s] : "",dataInfo.GetName()); 171 << ""Create Transformation \"""" << trName << ""\"" with reference class ""; 172 << clsInfo->GetName() << ""=(""<< idxCls <<"")"" << Endl << Endl;; 173 else; 174 log << kHEADER << Form(""[%s] : "",dataInfo.GetName()); 175 << ""Create Transformation \"""" << trName << ""\"" with events from all classes.""; 176 << Endl << Endl;; 177 ; 178 transformation->SelectInput(variables);; 179 transformationHandler.AddTransformation(transformation, idxCls);; 180 }; 181 }; 182}; 183 ; 184}; DataSetInfo.h; MsgLogger.h; Ranking.h; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; THashTable.h; TList.h; TObjString.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; Tools.h; TransformationHandler.h; VariableDecorrTransform.h; VariableGaussTransform.h; VariableIdentityTransform.h; VariableInfo.h; VariableNormalizeTransform.h; VariablePCATransform.h; VariableTransformBase.h; Version.h; TCollection::GetEntriesvirtual Int_t GetEntries() constDefinition TCollection.h:179; TCollection::GetSizevirtual Int_t GetSize() constRet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/VariableTransform_8cxx_source.html:7191,log,log,7191,doc/master/VariableTransform_8cxx_source.html,https://root.cern,https://root.cern/doc/master/VariableTransform_8cxx_source.html,1,['log'],['log']
Testability,"e Carlo. In the main algorithm, new points in the; parameter space are proposed and then visited based on their relative; likelihoods. This class can use any implementation of the ProposalFunction,; including non-symmetric proposal functions, to propose parameter points and; still maintain detailed balance when constructing the chain. The ""Likelihood"" function that is sampled when deciding what steps to take in; the chain has been given a very generic implementation. The user can create; any RooAbsReal based on the parameters and pass it to a MetropolisHastings; object with the method SetFunction(RooAbsReal&). Be sure to tell; MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale,; so that it knows what logic to use when sampling your RooAbsReal. For example,; a common use is to sample from a -log(Likelihood) distribution (NLL), for which; the appropriate configuration calls are SetType(MetropolisHastings::kLog);; SetSign(MetropolisHastings::kNegative);; If you're using a traditional likelihood function:; SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive);; You must set these type and sign flags or MetropolisHastings will not construct; a MarkovChain. Also note that in ConstructChain(), the values of the variables are randomized; uniformly over their intervals before construction of the MarkovChain begins. Function Members (Methods); public:. virtual~MetropolisHastings(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual RooStats::MarkovChain*ConstructChain(); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MetropolisHastings.html:1274,log,log,1274,root/html528/RooStats__MetropolisHastings.html,https://root.cern,https://root.cern/root/html528/RooStats__MetropolisHastings.html,6,['log'],['log']
Testability,"e Core section of TBuffer3D contains two members relating to reference frames: fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer (bounding box and tessellation vertexes) are in local or master (world frame). fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering) for placing the object into the 3D master frame.; If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This is set by default, and can be reset using SetLocalMasterIdentity() function.; Logical & Physical Objects. There are two cases of object addition:. Add this object as a single independent entity in the world reference frame.; Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have very large number repeated placements of relatively few logical (unique) shapes. Some viewers (OpenGL only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching with considerable performance gains in these cases.; For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. The viewer indicates this through the interface method; PreferLocalFrame(); If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers to the properties of logical object, with the fLocalMaster transform and the fColor and fTransparency attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of fill",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:5576,log,logical,5576,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,2,['log'],['logical']
Testability,"e Layer_t = VGeneralLayer<Architecture_t>> . void TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::SetWeightDecay ; (; Scalar_t ; weightDecay). inline . Definition at line 367 of file DeepNet.h. ◆ Update(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Update ; (; Scalar_t ; learningRate). Function that will update the weights and biases in the layers that contain weights and biases. . Definition at line 1254 of file DeepNet.h. Member Data Documentation. ◆ fBatchDepth. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . size_t TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::fBatchDepth. private . The depth of the batch used for training/testing. ; Definition at line 93 of file DeepNet.h. ◆ fBatchHeight. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . size_t TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::fBatchHeight. private . The height of the batch used for training/testing. ; Definition at line 94 of file DeepNet.h. ◆ fBatchSize. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . size_t TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::fBatchSize. private . Batch size used for training and evaluation. ; Definition at line 88 of file DeepNet.h. ◆ fBatchWidth. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . size_t TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::fBatchWidth. private . The width of the batch used for training/testing. ; Definition at line 95 of file DeepNet.h. ◆ fI. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . EInitialization TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::fI. private . The initialization method of the network. ; Definition at line 100 of file DeepNet.h. ◆ fInputDepth. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . size_t TMVA::DNN::TDeepNet< Archi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html:29692,test,testing,29692,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,1,['test'],['testing']
Testability,"e LikelihoodInterval.cxx. ◆ GetBestFitParameters(). const RooArgSet * RooStats::LikelihoodInterval::GetBestFitParameters ; (; ); const. inline . return a pointer to a snapshot with best fit parameter of interest ; Definition at line 87 of file LikelihoodInterval.h. ◆ GetContourPoints(). Int_t LikelihoodInterval::GetContourPoints ; (; const RooRealVar & ; paramX, . const RooRealVar & ; paramY, . double * ; x, . double * ; y, . Int_t ; npoints = 30 . ). return the 2D-contour points for the given subset of parameters by default make the contour using 30 points. ; The User has to preallocate the x and y array which will return the set of x and y points defining the contour. The return value of the function specify the number of contour point found. In case of error a zero is returned ; Definition at line 365 of file LikelihoodInterval.cxx. ◆ GetLikelihoodRatio(). RooAbsReal * RooStats::LikelihoodInterval::GetLikelihoodRatio ; (; ). inline . return the profile log-likelihood ratio function ; Definition at line 84 of file LikelihoodInterval.h. ◆ GetParameters(). RooArgSet * LikelihoodInterval::GetParameters ; (; ); const. overridevirtual . return a cloned list of parameters of interest. User manages the return object ; returns list of parameters ; Implements RooStats::ConfInterval.; Definition at line 158 of file LikelihoodInterval.cxx. ◆ IsA(). TClass * RooStats::LikelihoodInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 109 of file LikelihoodInterval.h. ◆ IsInInterval(). bool LikelihoodInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if given point is in the interval ; This is the main method to satisfy the RooStats::ConfInterval interface.; It returns true if the parameter point is in the interval. ; Implements RooStats::ConfInterval.; Definition at line 110 of file LikelihoodInterval.cxx. ◆ LowerLimit() [1/2]. doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html:19924,log,log-likelihood,19924,doc/master/classRooStats_1_1LikelihoodInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html,1,['log'],['log-likelihood']
Testability,e PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog C,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:122534,log,log,122534,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,3,['log'],['log']
Testability,e PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PRO,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:118170,log,log,118170,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['log'],['log']
Testability,e PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstrac,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:116709,log,log,116709,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['log'],['log']
Testability,"e PassThrough > ; double operator() (PassThrough &settingsAndBatch, Weights &weights, Gradients &gradients) const;  execute computation of the DNN for one mini-batch (used by the minimizer); returns gradients as well ;  ; template<typename Weights , typename Gradients , typename PassThrough , typename OutContainer > ; double operator() (PassThrough &settingsAndBatch, Weights &weights, Gradients &gradients, ModeOutput eFetch, OutContainer &outputContainer) const;  ; size_t outputSize () const;  output size of the DNN ;  ; template<typename LayerContainer , typename DropContainer , typename ItWeight , typename ItGradient > ; std::vector< std::vector< LayerData > > prepareLayerData (LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) const;  ; template<typename Minimizer > ; void preTrain (std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings);  pre-training for future use ;  ; void removeLayer ();  remove one layer ;  ; void setErrorFunction (ModeErrorFunction eErrorFunction);  which error function is to be used ;  ; void setInputSize (size_t sizeInput);  set the input size of the DNN ;  ; void SetIpythonInteractive (IPythonInteractive *fI, bool *fE, UInt_t *M, UInt_t *C);  ; void setOutputSize (size_t sizeOutput);  set the output size of the DNN ;  ; template<typename Minimizer > ; double train (std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings);  start the training ;  ; template<typename Iterator , typename Minimizer > ; double trainCycle (Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer);  executes one training cycle ;  .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:5323,test,testPattern,5323,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,2,['test'],['testPattern']
Testability,"e Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  TMVAThe Multi Variate Analysis package ;  RooFitRooFit toolkit classes ;  RooFitCoreCore RooFit classes ;  RooStatsRooStats toolkit classes ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  Data FrameThe ROOT Data Frame allows to analyse data stored in TTrees with a high level interface ;  ▼TutorialsA collection of macros illustrating many aspect of ROOT ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of the TDataFrame class ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/modules.html:8094,benchmark,benchmark,8094,doc/v610/modules.html,https://root.cern,https://root.cern/doc/v610/modules.html,2,['benchmark'],['benchmark']
Testability,"e TBenchmark.cxx. ◆ Print(). void TBenchmark::Print ; (; Option_t * ; name = """"); const. overridevirtual . Prints parameters of Benchmark name. ; Reimplemented from TObject.; Definition at line 137 of file TBenchmark.cxx. ◆ Reset(). void TBenchmark::Reset ; (; ). virtual . Reset all Benchmarks. ; Definition at line 147 of file TBenchmark.cxx. ◆ Show(). void TBenchmark::Show ; (; const char * ; name). virtual . Stops Benchmark name and Prints results. ; Definition at line 155 of file TBenchmark.cxx. ◆ Start(). void TBenchmark::Start ; (; const char * ; name). virtual . Starts Benchmark with the specified name. ; An independent timer (see class TStopwatch) is started. The name of the benchmark is entered into the list of benchmarks. Benchmark can be stopped via TBenchmark::Stop(). Results can be printed via TBenchmark::Print(). TBenchmark::Show() can be used to stop benchmark and print results. If name is an already existing benchmark, timing will resume. A summary of all benchmarks can be seen via TBenchmark::Summary(). ; Definition at line 172 of file TBenchmark.cxx. ◆ Stop(). void TBenchmark::Stop ; (; const char * ; name). virtual . Terminates Benchmark with specified name. ; Definition at line 201 of file TBenchmark.cxx. ◆ Streamer(). void TBenchmark::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TBenchmark::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TBenchmark.h. ◆ Summary(). void TBenchmark::Summary ; (; Float_t & ; rt, . Float_t & ; cp . ). virtual . Prints a summary of all benchmarks. ; Definition at line 214 of file TBenchmark.cxx. Member Data Documentation. ◆ fCpuTime. Float_t* TBenchmark::fCpuTime. protected . Definition at line 37 of file TBenchmark.h. ◆ fNames. TString* TBenchmark::fNames. protected . Definition at line 35 of file TBenchmark.h. ◆ fNbench. Int_t TBenchmark::fNbench. protected . Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:15302,benchmark,benchmarks,15302,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['benchmark'],['benchmarks']
Testability,"e TQCommand.cxx. ◆ DeclFileName(). static const char * TQUndoManager::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 133 of file TQCommand.h. ◆ GetCurrent(). TQCommand * TQUndoManager::GetCurrent ; (; ); const. Returns the last executed command. ; Definition at line 1121 of file TQCommand.cxx. ◆ GetCursor(). TQCommand * TQUndoManager::GetCursor ; (; ); const. Returns a command correspondent to the current cursor position in stack. ; Definition at line 1129 of file TQCommand.cxx. ◆ GetLimit(). UInt_t TQUndoManager::GetLimit ; (; ); const. Returns a maximum number of commands which could be located in stack. ; Definition at line 1145 of file TQCommand.cxx. ◆ IsA(). TClass * TQUndoManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TQCommand.; Definition at line 133 of file TQCommand.h. ◆ IsLogging(). Bool_t TQUndoManager::IsLogging ; (; ); const. Returns kTRUE if logging is ON. ; Definition at line 1113 of file TQCommand.cxx. ◆ ls(). void TQUndoManager::ls ; (; Option_t * ; option = """"); const. overridevirtual . Lists all commands in stack. ; Reimplemented from TQCommand.; Definition at line 901 of file TQCommand.cxx. ◆ PrintCollectionEntry(). void TQUndoManager::PrintCollectionEntry ; (; TObject * ; entry, . Option_t * ; option, . Int_t ; recurse . ); const. overrideprotectedvirtual . Print collection entry. ; Reimplemented from TCollection.; Definition at line 921 of file TQCommand.cxx. ◆ Redo(). void TQUndoManager::Redo ; (; Option_t * ; option = """"). overridevirtual . Performs redo action. Move cursor position forward in history stack. ; Reimplemented from TQCommand.; Definition at line 1053 of file TQCommand.cxx. ◆ SetLimit(). void TQUndoManager::SetLimit ; (; UInt_t ; limit). virtual . Returns a maximum number of commands which could be located in stack. ; Definition at line 1137 of file TQCommand.cxx. ◆ SetLogging(). void TQUndoManager",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:31395,log,logging,31395,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['log'],['logging']
Testability,"e UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:31518,log,log,31518,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,6,['log'],['log']
Testability,"e able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IntervalCalculator(); {}. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. Double_t Size() const; Get the size of the test (eg. rate of Type I error). Double_t ConfidenceLevel() const; Get the Confidence level for the test. void SetData(RooAbsData& ); Set the DataSet ( add to the the workspace if not already there ?). void SetModel(const RooStats::ModelConfig& ); Set the Model. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g. 0.95 for a 95% Confidence Interval). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: IntervalCalculator.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__IntervalCalculator.html:2395,test,test,2395,root/html528/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__IntervalCalculator.html,3,['test'],['test']
Testability,"e able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IntervalCalculator(); {}. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. Double_t Size() const; Get the size of the test (eg. rate of Type I error). Double_t ConfidenceLevel() const; Get the Confidence level for the test. void SetData(RooAbsData& ); Set the DataSet ( add to the the workspace if not already there ?). void SetModel(const RooStats::ModelConfig& ); Set the Model. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g. 0.95 for a 95% Confidence Interval). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: IntervalCalculator.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__IntervalCalculator.html:2397,test,test,2397,root/html530/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__IntervalCalculator.html,3,['test'],['test']
Testability,"e able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IntervalCalculator(); {}. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. Double_t Size() const; Get the size of the test (eg. rate of Type I error). Double_t ConfidenceLevel() const; Get the Confidence level for the test. void SetData(RooAbsData& ); Set the DataSet ( add to the the workspace if not already there ?). void SetModel(const RooStats::ModelConfig& ); Set the Model. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g. 0.95 for a 95% Confidence Interval). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: IntervalCalculator.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__IntervalCalculator.html:2397,test,test,2397,root/html532/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__IntervalCalculator.html,3,['test'],['test']
Testability,"e all methods; <HEADER> Factory : Evaluate classifier: BDTG; : ; <HEADER> BDTG : [datasetBkg2] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.31824 0.87725 [ -1.8821 2.9998 ]; : var2: 0.68634 0.81995 [ -1.2800 2.0015 ]; : var3: 0.28439 1.0366 [ -1.8691 3.0223 ]; : var4: 0.66443 1.1236 [ -1.7755 3.3317 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetBkg2 BDTG : 0.943; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : datasetBkg2 BDTG : 0.000 (0.975) 0.000 (0.979) 0.979 (0.986); : -------------------------------------------------------------------------------------------------------------------; : ; <HEADER> Dataset:datasetBkg2 : Created tree 'TestTree' with 200 events; : ; <HEADER> Dataset:datasetBkg2 : Created tree 'TrainTree' with 200 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; ; ========================; --- Application & create combined tree; : Booking ""BDT method"" of type ""BDT"" from datasetBkg0/weights/TMVAMultiBkg0_BDTG.weights.xml.; : Reading weight file: dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:27915,test,test,27915,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,1,['test'],['test']
Testability,"e amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 20 of file TSpectrumFit.h. ◆ fNumberIterations. Int_t TSpectrumFit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 21 of file TSpectrumFit.h. ◆ fPositionCalc. Double_t* TSpectrumFit::fPositionCalc. protected . [fNPeaks] array of calculated values of fitted positions, output parameters ; Definition at line 31 of file TSpectrumFit.h. ◆ fPositionErr. Double_t* TSpectrumFit::fPositionErr. protected . [fNPeaks] array of position errors ; Definition at line 32 of file TSpectrumFit.h. ◆ fPositionInit. Double_t* TSpectrumFit::fPositionInit. protected . [fNPeaks] array of initial values of peaks positions, input parameters ; Definition at line 30 of file TSpectrumFit.h. ◆ fPower. Int_t TSpec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:54547,log,logical,54547,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['log'],['logical']
Testability,"e an HybridCalculator type) and a RooRealVar for the variable. ~HypoTestInverterOriginal(); destructor. void CreateResults(); create a new HypoTestInverterResult to hold all computed results. bool RunAutoScan(double xMin, double xMax, double target, double epsilon = 0.005, unsigned int numAlgorithm = 0); Search for the value of the parameter of interest (vary the; hypothesis being tested) in the specified range [xMin,xMax]; until the confidence level is compatible with the target value; within one time the estimated error (and the estimated error; should also become smaller than the specified parameter epsilon). bool RunFixedScan(int nBins, double xMin, double xMax); Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX); run only one point. HypoTestInverterOriginal(); default constructor (used only for I/O). HypoTestInverterResult* GetInterval() const; { return fResults; }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetData(RooAbsData& ); { }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterOriginal.html:9339,test,test,9339,root/html534/RooStats__HypoTestInverterOriginal.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterOriginal.html,3,['test'],['test']
Testability,"e analysisType );; 149 ; 150 // performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // store and retrieve time used for testing; 165 void SetTestTime ( Double_t testTime ) { fTestTime = testTime; }; 166 Double_t GetTestTime () const { return fTestTime; }; 167 ; 168 // performs classifier testing; 169 virtual void TestClassification();; 170 virtual Double_t GetKSTrainingVsTest(Char_t SorB, TString opt=""X"");; 171 ; 172 // performs multiclass classifier testing; 173 virtual void TestMulticlass();; 174 ; 175 // performs regression testing; 176 virtual void TestRegression( Double_t& bias, Double_t& biasT,; 177 Double_t& dev, Double_t& devT,; 178 Double_t& rms, Double_t& rmsT,; 179 Double_t& mInf, Double_t& mInfT, // mutual information; 180 Double_t& corr,; 181 Types::ETreeType type );; 182 ; 183 // options treatment; 184 virtual void Init() = 0;; 185 virtual void DeclareOptions() = 0;; 186 virtual void ProcessOptions() = 0;; 187 virtual void DeclareCompatibilityOptions(); // declaration of past options; 188 ; 189 // reset the Method --> As if it was not yet trained, just instantiated; 190 // virtual void Reset() = 0;; 191 //for the moment, I provide a dummy (that would not work) default, just to make; 192 // compilation/running w/o parameter optimisation still possible; 193 virtual void Reset(){return;}; 194 ; 195 // classifier response:; 196 // some methods may return a per-event error estimate; 197 // error calculation is skipped if err==",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:5985,test,testing,5985,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['test'],['testing']
Testability,"e and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:7110,test,test,7110,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['test'],['test']
Testability,"e and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalcula",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:7327,test,test,7327,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,5,['test'],['test']
Testability,"e axis labels and titles. ;  ; void Print (Option_t *option="""") const override;  Print the axis main data. ;  ; void SavePrimitive (std::ostream &out, Option_t *options) override;  Save the TParallelCoordVar as a macro. ;  ; void SetBarHisto (bool h);  ; void SetBoxPlot (bool box);  Set the axis to display a candle. ;  ; void SetCurrentLimits (Double_t min, Double_t max);  Set the limits within which one the entries must be painted. ;  ; void SetCurrentMax (Double_t max);  Set the current maximum of the axis. ;  ; void SetCurrentMin (Double_t min);  Set the current minimum of the axis. ;  ; void SetHistogramBinning (Int_t n=100);  Set the histogram binning. ;  ; void SetHistogramHeight (Double_t h=0);  Set the height of the bar histogram. ;  ; void SetHistogramLineWidth (Int_t lw=2);  ; void SetInitMax (Double_t max);  ; void SetInitMin (Double_t min);  ; void SetLiveRangesUpdate (bool on);  If true, the pad is updated while the motion of a dragged range. ;  ; void SetLogScale (bool log);  Set the axis in log scale. ;  ; void SetTitle (const char *) override;  Set the title of the TNamed. ;  ; void SetValues (Long64_t length, Double_t *val);  Set the variable values. ;  ; void SetX (Double_t x, bool gl);  Set the X position of the axis in the case of a vertical axis. ;  ; void SetY (Double_t y, bool gl);  Set the Y position of the axis in the case of a horizontal axis. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Unzoom ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordVar.html:5199,log,log,5199,doc/master/classTParallelCoordVar.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordVar.html,2,['log'],['log']
Testability,"e binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::BinData::GetPointconst double * GetPoint(unsigned int ipoint, double &value) constretrieve at the same time a pointer to the coordinate data and the fit value More efficient than call...Definition BinData.h:381; ROOT::Fit::BinData::Valuedouble Value(unsigned int ipoint) constreturn the value for the given fit pointDefinition BinData.h:220; ROOT::Fit::FitData::Sizeunsigned int Size() constreturn number of fit pointsDefinition FitData.h:293; ROOT::Fit::FitData::NDimunsigned int NDim() constreturn coordinate data dimensionDefinition FitData.h:301; ROOT::Math::GoFTest::GetSigmaNstatic Double_t GetSigmaN(const std::vector< size_t > &ns, size_t N)Computation of sigma_N as described in (1)Definition GoFTest.cxx:311; ROOT::Math::GoFTest::SetCDFvoid SetCDF()Definition GoFTest.cxx:244; ROOT::Math::GoFTest::operator()void operator()(ETestType test, Double_t &pvalue, Double_t &testStat) constThe class's unary functions performing the gif test according to the ETestType provided.Definition GoFTest.cxx:208; ROOT::Math::GoFTest::SetDistributionFunctionvoid SetDistributionFunction(const IGenFunction &cdf, Bool_t isPDF, Double_t xmin, Double_t xmax)Definition GoFTest.cxx:267; ROOT::Math::GoFTest::fCDFstd::unique_ptr< IGenFunction > fCDFPointer to CDF used in 1-sample test.Definition GoFTest.h:235; ROOT::Math::GoFTest::fTestSampleFromH0Bool_t fTestSampleFromH0Definition GoFTest.h:245; ROOT::Math::GoFTest::EDistributionEDistributionH0 distributions for using only with 1-sample tests.Definition GoFTest.h:70; ROOT::Math::GoFTest::kLogNormal@ kLogNormalGaussian distribution with default mean=0, sigma=1.Definition GoFTest.h:74; ROOT::Math::GoFTest::kExponential@ kExponentialLognormal distribution with default meanlog=0, sigmalog=1.Definition GoFTest.h:75; ROOT::Math::GoFTest::kGaussian@ kGaussianFor internal use only within the class's template constructor.Definition GoF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:38482,test,test,38482,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,3,['test'],"['test', 'testStat']"
Testability,"e box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version working with wchar_t and required by TMathText (who uses utf-8(?)). void DrawTextNDC(Double_t u, Double_t v, const char* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. void SaveImage(TVirtualPad* pad, const char* fileName, Int_t type) const; Save the image displayed in the canvas pointed by ""pad"" into a; binary file.; assert(pad != nullptr && ""SaveImage, parameter 'pad' is null"");; assert(fileName != nullptr && ""SaveImage, parameter 'fileName' is null"");. void DrawTextNDC(Double_t u, Double_t v, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. TPadPainter(); Final overriders for TVirtualPadPainter pure virtual functions.; 1. Part, which simply delegates to TVirtualX.; Line attributes. TPadPainter(const TPadPainter& rhs); Let's make this clear:. » Author: Olivier Couet, Timur Pocheptsov 06/05/2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id$ » Last generated: 2015-06-30 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPadPainter.html:7326,assert,assert,7326,root/html602/TPadPainter.html,https://root.cern,https://root.cern/root/html602/TPadPainter.html,2,['assert'],['assert']
Testability,e branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooArgSet*RooAbsOptTestStatistic::_normSetPointer to set with observables used for normalization ; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooAbsOptTestStatistic::_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*RooAbsOptTestStatistic::_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; TListRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_tRooAbsTestStatistic::_simCountTotal number of component p.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNLLVar.html:34467,test,test,34467,root/html526/RooNLLVar.html,https://root.cern,https://root.cern/root/html526/RooNLLVar.html,2,['test'],['test']
Testability,"e checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);. For usage examples see $ROOTSYS/test/stressLinear.cxx. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TDecompBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual Double_tCondition(); virtual voidTObject::Copy(TObject& object) const; virtual Bool_tDecompose(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDet(Double_t& d1, Double_t& d2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompBase.html:4059,test,test,4059,root/html528/TDecompBase.html,https://root.cern,https://root.cern/root/html528/TDecompBase.html,6,['test'],['test']
Testability,"e class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Process Unique Identifier in time and space; TProcessUUID TProcessID managing UUIDs; TProfile Profile histogram class; TProfile2D Profile2D histogram class; TProfile3D Profile3D histogram class; TProof PROOF control class; TProofBench Steering class for PROOF benchmarks; TProofBenchDataSet Handle operations on datasets; TProofBenchRun Abstract base class for PROOF benchmark run; TProofBenchRunCPU CPU-intensive PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:115772,benchmark,benchmark,115772,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,5,['benchmark'],['benchmark']
Testability,"e corresponding nsig quantile in the p values and then; interpolates them. double GetExpectedLimit(double nsig, bool lower, const char* opt = """") const; get expected limit (lower/upper) depending on the flag; for asymptotic is a special case (the distribution is generated an step in sigma values); distringuish asymptotic looking at the hypotest results; if option = ""P"" get expected limit using directly quantiles of p value distribution; else (default) find expected limit by obtaining first a full limit distributions; The last one is in general more correct. double GetLastYValue() const; { return GetYValue( fXValues.size()-1); }. double GetLastXValue() const; { return GetXValue( fXValues.size()-1); }. double GetLastYError() const; { return GetYError( fXValues.size()-1); }. HypoTestResult * GetLastResult() const; { return GetResult( fXValues.size()-1); }. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void SetCLsCleanupThreshold(Double_t th); set CLs threshold for exclusion cleanup function. { fCLsCleanupThreshold = th; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. bool IsOneSided() const; query if one sided result. { return !fIsTwoSided; }. bool IsTwoSided() const; query if two sided result. { return fIsTwoSided; }. SamplingDistribution * GetNullTestStatDist(int index) const; same in terms of alt and null. SamplingDistribution * GetAltTestStatDist(int index) const. SamplingDistribution* GetLowerLimitDistribution() const; get expected lower limit distributions; implemented using interpolation; The size for the sampling distribution is given (by def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:17044,test,test,17044,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['test'],['test']
Testability,"e corresponding nsig quantile in the p values and then; interpolates them. double GetExpectedLimit(double nsig, bool lower, const char* opt = """") const; get expected limit (lower/upper) depending on the flag; for asymptotic is a special case (the distribution is generated an step in sigma values); distringuish asymptotic looking at the hypotest results; if option = ""P"" get expected limit using directly quantiles of p value distribution; else (default) find expected limit by obtaining first a full limit distributions; The last one is in general more correct. double GetLastYValue() const; { return GetYValue( fXValues.size()-1); }. double GetLastXValue() const; { return GetXValue( fXValues.size()-1); }. double GetLastYError() const; { return GetYError( fXValues.size()-1); }. HypoTestResult * GetLastResult() const; { return GetResult( fXValues.size()-1); }. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. SamplingDistribution * GetNullTestStatDist(int index) const; same in terms of alt and null. SamplingDistribution * GetAltTestStatDist(int index) const. SamplingDistribution* GetLowerLimitDistribution() const; get expected lower limit distributions; implemented using interpolation; The size for the sampling distribution is given (by default is given by the average number of toy/point). { return GetLimitDistribution(true); }. SamplingDistribution* GetUpperLimitDistribution() const; get expected upper limit distributions; implemented using interpolation. { return GetLimitDistribution(false); }. void SetInterpola",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:15813,test,test,15813,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,1,['test'],['test']
Testability,"e cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ; For detailed description see K.S. Kölbig and B. Schorr, A program package for the Landau distribution, Computer Phys. Comm. 31 (1984) 97-111 [Erratum-ibid. 178 (2008) 972]. The same algorithms as in CERNLIB (RANLAN) is used.; Parameters. zThe argument \(z\) ; xiThe width parameter \(\xi\) . Definition at line 189 of file QuantFuncMathCore.cxx. ◆ landau_quantile_c(). double ROOT::Math::landau_quantile_c ; (; double ; z, . double ; xi = 1 . ). Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ; Implemented using landau_quantile; Parameters. zThe argument \(z\) ; xiThe width parameter \(\xi\) . Definition at line 396 of file QuantFuncMathCore.cxx. ◆ lognormal_quantile(). double ROOT::Math::lognormal_quantile ; (; double ; x, . double ; m, . double ; s . ). Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the lognormal distribution (lognormal_cdf). ; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 151 of file QuantFuncMathCore.cxx. ◆ lognormal_quantile_c(). double ROOT::Math::lognormal_quantile_c ; (; double ; x, . double ; m, . double ; s . ). Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the lognormal distribution (lognormal_cdf_c). ; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 143 of file QuantFuncMathCore.cxx. ◆ normal_quantile(). double ROOT::Math::normal_quantile ; (; double ; z, . double ; sigma . ). Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ; For detailed description see Mathworld. It can also be evaluated using gaussian_quantile which will call the same implementation. It is implemented using the function ROOT::Math::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__QuantFunc.html:17843,log,lognormal,17843,doc/master/group__QuantFunc.html,https://root.cern,https://root.cern/doc/master/group__QuantFunc.html,1,['log'],['lognormal']
Testability,"e data with only value; 503 */; 504 void BinData::Add( const double* x, double val ); 505 {; 506 assert( kNoError == fErrorType );; 507 ; 508 assert( !fData.empty() && fDataPtr );; 509 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 510 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 511 assert( fDataError.empty() && !fDataErrorPtr );; 512 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 513 ; 514 fData[ fNPoints ] = val;; 515 ; 516 FitData::Add( x );; 517 fSumContent += val;; 518 }; 519 ; 520 /**; 521 add multi-dim coordinate data with only error in value; 522 The class stores internally the inverse of the error in this case; 523 */; 524 void BinData::Add( const double* x, double val, double eval ); 525 {; 526 assert( kValueError == fErrorType );; 527 assert( !fData.empty() && fDataPtr );; 528 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 529 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 530 assert( !fDataError.empty() && fDataErrorPtr );; 531 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 532 ; 533 fData[ fNPoints ] = val;; 534 fDataError[ fNPoints ] = (eval != 0.0) ? 1.0/eval : 0.0;; 535 ; 536 FitData::Add( x );; 537 fSumContent += val;; 538 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 539 if (!fIsWeighted); 540 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 541 }; 542 ; 543 /**; 544 add multi-dim coordinate data with both error in coordinates and value; 545 */; 546 void BinData::Add( const double* x, double val, const double* ex, double eval ); 547 {; 548 assert( kCoordError == fErrorType );; 549 assert( !fData.empty() && fDataPtr );; 550 assert( !fDataError.empty() && fDataErrorPtr );; 551 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 552 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 553 assert( fCoordErrors.size() == fDim );; 554 assert( fCoordErrorsPtr.size() == fDim );; 555 ; 556 fData[ fNPoints ] = val;; 557 ; 558 for( unsigned int i=0; i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:16263,assert,assert,16263,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"e dataset type. This means that if the file does not exist, the constructor will throw an exception. Previously, an exception would be thrown only at a JIT-ting time, before the start of the computations.; Distributed RDataFrame now supports processing an RNTuple dataset.; In distributed RDataFrame, the initialize function useful to run initialization code at the beginning of every task on a worker will now run only in the worker processes. Previously, it was also run eagerly at the point of calling, that is in the main user process. This is done to better separate the user driver environment and the worker environments. If necessary, the function passed to initialize can be called directly by the user in the main application to reproduce the same effect as before.; Some internal details of the RDataFrame implementation were reworked to decrease memory usage and runtime of programs with very deep computation graphs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:16570,test,tests,16570,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['test'],['tests']
Testability,"e default arguments as requested by the user); 3219 std::string alternative;; 3220 gInterpreter->GetInterpreterTypeName(normalizedName.c_str(), alternative, kTRUE);; 3221 if (alternative.empty()); 3222 return nullptr;; 3223 const char *altname = alternative.c_str();; 3224 if (strncmp(altname, ""std::"", 5) == 0) {; 3225 // For namespace (for example std::__1), GetInterpreterTypeName does; 3226 // not strip std::, so we must do it explicitly here.; 3227 altname += 5;; 3228 }; 3229 if (altname != normalizedName && strcmp(altname, name) != 0) {; 3230 // altname now contains the full name of the class including a possible; 3231 // namespace if there has been a using namespace statement.; 3232 ; 3233 // At least in the case C<string [2]> (normalized) vs C<string[2]> (altname); 3234 // the TClassEdit normalization and the TMetaUtils normalization leads to; 3235 // two different space layout. To avoid an infinite recursion, we also; 3236 // add the test on (altname != name); 3237 ; 3238 return GetClass(altname, load);; 3239 }; 3240 ; 3241 TClass *ncl = gInterpreter->GenerateTClass(normalizedName.c_str(), /* emulation = */ kFALSE, silent);; 3242 if (!ncl->IsZombie()) {; 3243 return ncl;; 3244 }; 3245 delete ncl;; 3246 }; 3247 }; 3248 return nullptr;; 3249}; 3250 ; 3251////////////////////////////////////////////////////////////////////////////////; 3252/// Return pointer to class with name.; 3253 ; 3254TClass *TClass::GetClass(const std::type_info& typeinfo, Bool_t load, Bool_t /* silent */, size_t hint_pair_offset, size_t hint_pair_size); 3255{; 3256 if (!gROOT->GetListOfClasses()); 3257 return nullptr;; 3258 ; 3259 //protect access to TROOT::GetIdMap; 3260 R__READ_LOCKGUARD(ROOT::gCoreMutex);; 3261 ; 3262 TClass* cl = GetIdMap()->Find(typeinfo.name());; 3263 ; 3264 if (cl && cl->IsLoaded()) return cl;; 3265 ; 3266 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 3267 ; 3268 // Now that we got the write lock, another thread may have constructed the; 3269 // TClass while we were waitin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:123730,test,test,123730,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['test'],['test']
Testability,"e default arguments as requested by the user); 3286 std::string alternative;; 3287 gInterpreter->GetInterpreterTypeName(normalizedName.c_str(), alternative, kTRUE);; 3288 if (alternative.empty()); 3289 return nullptr;; 3290 const char *altname = alternative.c_str();; 3291 if (strncmp(altname, ""std::"", 5) == 0) {; 3292 // For namespace (for example std::__1), GetInterpreterTypeName does; 3293 // not strip std::, so we must do it explicitly here.; 3294 altname += 5;; 3295 }; 3296 if (altname != normalizedName && strcmp(altname, name) != 0) {; 3297 // altname now contains the full name of the class including a possible; 3298 // namespace if there has been a using namespace statement.; 3299 ; 3300 // At least in the case C<string [2]> (normalized) vs C<string[2]> (altname); 3301 // the TClassEdit normalization and the TMetaUtils normalization leads to; 3302 // two different space layout. To avoid an infinite recursion, we also; 3303 // add the test on (altname != name); 3304 ; 3305 return GetClass(altname, load);; 3306 }; 3307 ; 3308 TClass *ncl = gInterpreter->GenerateTClass(normalizedName.c_str(), /* emulation = */ kFALSE, silent);; 3309 if (!ncl->IsZombie()) {; 3310 return ncl;; 3311 }; 3312 delete ncl;; 3313 }; 3314 }; 3315 return nullptr;; 3316}; 3317 ; 3318////////////////////////////////////////////////////////////////////////////////; 3319/// Return pointer to class with name.; 3320 ; 3321TClass *TClass::GetClass(const std::type_info& typeinfo, Bool_t load, Bool_t /* silent */, size_t hint_pair_offset, size_t hint_pair_size); 3322{; 3323 if (!gROOT->GetListOfClasses()); 3324 return nullptr;; 3325 ; 3326 //protect access to TROOT::GetIdMap; 3327 R__READ_LOCKGUARD(ROOT::gCoreMutex);; 3328 ; 3329 TClass* cl = GetIdMap()->Find(typeinfo.name());; 3330 ; 3331 if (cl && cl->IsLoaded()) return cl;; 3332 ; 3333 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 3334 ; 3335 // Now that we got the write lock, another thread may have constructed the; 3336 // TClass while we were waitin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:126481,test,test,126481,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['test'],['test']
Testability,"e depends on the choice of normalization such as; RooAddPdf. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function to force use of a given normalization range; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on the choice of normalization such as; RooAddPdf. void setCacheCheck(Bool_t flag); Activate cache validation mode. Int_t getMaxVal(const RooArgSet& vars) const; Advertise capability to determine maximum value of function for given set of; observables. If no direct generator method is provided, this information; will assist the accept/reject generator to operate more efficiently as; it can skip the initial trial sampling phase to empirically find the function; maximum. Double_t maxVal(Int_t code) const; Return maximum value for set of observables identified by code assigned; in getMaxVal. void logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); Interface to insert remote error logging messages received by RooRealMPFE into current error loggin stream. void logEvalError(const char* message, const char* serverValueString = 0) const; Log evaluation error message. Evaluation errors may be routed through a different; protocol than generic RooFit warning message (which go straight through RooMsgService); because evaluation errors can occur in very large numbers in the use of likelihood; evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); messages reported through this function are not printed but all stored in a list,; along with server values at the time of reporting. Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:61228,log,logEvalError,61228,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,21,['log'],"['logEvalError', 'loggin', 'logging']"
Testability,"e direction is reset to the steepes descent. How; to use it... TMLP is build from 3 classes: TNeuron, TSynapse and; TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used; explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree; given in the constructor. The network is described by a simple; string: The input/output layers are defined by giving the expression for; each neuron, separated by comas. Hidden layers are just described; by the number of neurons. The layers are separated by colons.; In addition, input/output layer formulas can be preceded by '@' (e.g ""@out""); if one wants to also normalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This can only be done for fixed-size arrays.; If the formula ends with ""!"", softmax functions are used for the output layer.; One defines the training and test datasets by TEventLists. Example:; TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; Both the TTree and the TEventLists can be defined in; the constructor, or later with the suited setter method. The lists; used for training and test can be defined either explicitly, or via; a string containing the formula to be used to define them, exactly as; for a TCut.; The learning method is defined using the; TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :; TMultiLayerPerceptron::kStochastic, ; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS; A weight can be assigned to events, either in the constructor, either; with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight; is taken into account.; Finally, one starts the training with; TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The; first argument is the nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:6988,test,test,6988,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,3,['test'],['test']
Testability,"e directory $ROOTSYS/icons. You can assign a command directly as a parameter of the picture button constructor. The picture of TGPictureButton can be changed by:; fPicture->SetPicture(""h2_s.xpm"");; The advantage of command buttons is that they are always visible, providing a reminder of their existence. They can be inscribed with a meaningful description of what they do by TGToolTip(""Some describing text""). Their activation is much easier and faster than using a two-step menu bar/pull-down sequence. The only disadvantage of the text and picture buttons is that they consume considerable screen space if they are many. Having no more than six command buttons per window or dialog box helps to appropriately balance the application’s effectiveness, its real efficiency, and the operational simplicity.; The classes TGRadioButton and TGCheckButton present the option buttons in ROOT. Like the text buttons, they have text or hot string as a label. Radio buttons are grouped in logical sets of two or more and appear with a text label to the right. The choices are mutually exclusive and only one setting is permitted at one time. They represent visually all alternatives and it is easy to access and compare choices. They facilitate the situations where all alternatives cannot be easily remembered or where displaying the alternatives together helps to understand and select the proper choice. It is very useful to provide a default setting whenever it is possible. When it is not possible to establish a default setting because of the nature of the information, it is better to leave all radio buttons blank. A columnar orientation is the preferred manner of radio buttons presentation. If the vertical space on the window is limited, they can be oriented horizontally. Selection choices should be organized logically in groups. Here is the example that produces the image above:; br = new TGButtonGroup(p,""Coordinate system"",kVerticalFrame);; fR[0] = new TGRadioButton(bg,new TGHotString(""&Pixe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1180697,log,logical,1180697,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability,"e file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t SendCommand(const char* cmd, TProof::ESlaves list = kActive); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command, however commands; like "".x file.C"" or "".L file.C"" will not cause the file.C to be; transfered to the PROOF cluster. In that case use TProof::Exec().; Returns the status send by the remote server as part of the; kPROOF_LOGDONE message. Typically this is the return code of the; command on the remote side. Returns -1 in case of error. Int_t SendCurrentState(TProof::ESlaves list = kActive); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendInitialState(); Transfer the initial (i.e. current) state of the master to all; slave servers. Currently the initial state includes: log level.; Returns the number of active slaves. Returns -1 in case of error. Bool_t CheckFile(const char* file, TSlave* sl, Long_t modtime, Int_t cpopt = (kCp|kCpBin)); Check if a file needs to be send to the slave. Use the following; algorithm:; - check if file appears in file map; - if yes, get file's modtime and check against time in map,; if modtime not same get md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:55129,log,log,55129,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['log'],['log']
Testability,"e files are retrieved; else a max of; fgMaxTransferSize (about 1000 lines) per file is read, starting from; the end (i.e. the last ~1000 lines).; The received buffer is added to the file fname, if the latter is defined.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(const char* ord = ""*"", Int_t from = -10, Int_t to = -1); Display the content associated with worker 'ord' from line 'from'; to line 'to' inclusive. A negative value; for 'from' indicates lines counted from the end (tail action); 'to'; is ignored in such a case.; If 'ord' is ""*"" (default), all the workers are displayed. void Print(Option_t* opt = 0) const; Print head info about the content. void Prt(const char* what); Special printing procedure. Int_t Save(const char* ord = ""*"", const char* fname = 0, Option_t* opt = ""w""); Save the content associated with worker 'ord' to finel 'fname'.; If 'ord' is ""*"" (default), the log from all the workers is saved.; If 'opt' is ""a"" the file is open in append mode; otherwise the file; is truncated. Int_t Grep(const char* txt, Int_t from = 0); Search lines containing 'txt', starting from line 'from'.; Print the lines where this happens. void SetMaxTransferSize(Long64_t maxsz); Set max transfer size. TList * GetListOfLogs() const; { return fElem; }. TDatime StartTime(); { return fStartTime; }. void SetLogToBox(Bool_t lgbox = kFALSE); Where to log. { SetBit(kLogToBox, lgbox); }. Bool_t LogToBox(); { return (TestBit(kLogToBox)) ? kTRUE : kFALSE; }. » Author: G. Ganis 31/08/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofLog.h 28808 2009-06-04 14:18:34Z ganis $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLog.html:11434,log,log,11434,root/html528/TProofLog.html,https://root.cern,https://root.cern/root/html528/TProofLog.html,2,['log'],['log']
Testability,"e files are retrieved; else a max of; fgMaxTransferSize (about 1000 lines) per file is read, starting from; the end (i.e. the last ~1000 lines).; The received buffer is added to the file fname, if the latter is defined.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(const char* ord = ""*"", Int_t from = -10, Int_t to = -1); Display the content associated with worker 'ord' from line 'from'; to line 'to' inclusive. A negative value; for 'from' indicates lines counted from the end (tail action); 'to'; is ignored in such a case.; If 'ord' is ""*"" (default), all the workers are displayed. void Print(Option_t* opt = 0) const; Print head info about the content. void Prt(const char* what); Special printing procedure. Int_t Save(const char* ord = ""*"", const char* fname = 0, Option_t* opt = ""w""); Save the content associated with worker 'ord' to finel 'fname'.; If 'ord' is ""*"" (default), the log from all the workers is saved.; If 'opt' is ""a"" the file is open in append mode; otherwise the file; is truncated. Int_t Grep(const char* txt, Int_t from = 0); Search lines containing 'txt', starting from line 'from'.; Print the lines where this happens. void SetMaxTransferSize(Long64_t maxsz); Set max transfer size. TList * GetListOfLogs() const; { return fElem; }. TDatime StartTime(); { return fStartTime; }. void SetLogToBox(Bool_t lgbox = kFALSE); Where to log. { SetBit(kLogToBox, lgbox); }. Bool_t LogToBox(); { return (TestBit(kLogToBox)) ? kTRUE : kFALSE; }. » Author: G. Ganis 31/08/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofLog.h 28808 2009-06-04 14:18:34Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLog.html:11503,log,log,11503,root/html530/TProofLog.html,https://root.cern,https://root.cern/root/html530/TProofLog.html,2,['log'],['log']
Testability,"e files are retrieved; else a max of; fgMaxTransferSize (about 1000 lines) per file is read, starting from; the end (i.e. the last ~1000 lines).; The received buffer is added to the file fname, if the latter is defined.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(const char* ord = ""*"", Int_t from = -10, Int_t to = -1); Display the content associated with worker 'ord' from line 'from'; to line 'to' inclusive. A negative value; for 'from' indicates lines counted from the end (tail action); 'to'; is ignored in such a case.; If 'ord' is ""*"" (default), all the workers are displayed. void Print(Option_t* opt = 0) const; Print head info about the content. void Prt(const char* what); Special printing procedure. Int_t Save(const char* ord = ""*"", const char* fname = 0, Option_t* opt = ""w""); Save the content associated with worker 'ord' to finel 'fname'.; If 'ord' is ""*"" (default), the log from all the workers is saved.; If 'opt' is ""a"" the file is open in append mode; otherwise the file; is truncated. Int_t Grep(const char* txt, Int_t from = 0); Search lines containing 'txt', starting from line 'from'.; Print the lines where this happens. void SetMaxTransferSize(Long64_t maxsz); Set max transfer size. TList * GetListOfLogs() const; { return fElem; }. TDatime StartTime(); { return fStartTime; }. void SetLogToBox(Bool_t lgbox = kFALSE); Where to log. { SetBit(kLogToBox, lgbox); }. Bool_t LogToBox(); { return (TestBit(kLogToBox)) ? kTRUE : kFALSE; }. » Author: G. Ganis 31/08/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofLog.h 28808 2009-06-04 14:18:34Z ganis $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofLog.html:11503,log,log,11503,root/html532/TProofLog.html,https://root.cern,https://root.cern/root/html532/TProofLog.html,2,['log'],['log']
Testability,"e for generated random numbers ; rng(optional) random number generator pointer ; option(optional) : LOG or LIN to force the usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulated at several points. ; Reimplemented in TF2.; Definition at line 2245 of file TF1.cxx. ◆ GetRandom() [2/2]. Double_t TF1::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape. ; Parameters. rngRandom number generator. By default (or when passing a nullptr) the global gRandom is used ; optionOption string which controls the binning used to compute the integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale whatever the fXmax/fXmin ratio is; Note that the parabolic approximation is very good as s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:85569,log,log,85569,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['log'],['log']
Testability,"e from the RooFit Package.; The basic idea is the following:; - Instantiate an object specifying a signal+background model, a background model and a dataset.; - Perform toy MC experiments to know the distributions of -2lnQ; - Calculate the CLsb and CLs values as ""integrals"" of these distributions. The class allows the user to input models as RooAbsPdf ( TH1 object could be used; by using the RooHistPdf class); The pdfs must be ""extended"": for more information please refer to; http://roofit.sourceforge.net). The dataset can be entered as a; RooAbsData objects. Unlike the TLimit Class a complete MC generation is performed at each step; and not a simple Poisson fluctuation of the contents of the bins.; Another innovation is the treatment of the nuisance parameters. The user; can input in the constructor nuisance parameters.; To include the information that we have about the nuisance parameters a prior; PDF (RooAbsPdf) should be specified. Different test statistic can be used (likelihood ratio, number of events or; profile likelihood ratio. The default is the likelihood ratio.; See the method SetTestStatistic. The number of toys to be generated is controlled by SetNumberOfToys(n). The result of the calculations is returned as a HybridResult object pointer. see also the following interesting references:; - Alex Read, ""Presentation of search results: the CLs technique"",; Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; see http://www.iop.org/EJ/abstract/0954-3899/28/10/313/. - Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)"" CERN 2000-005 (30 May 2000). - V. Bartsch, G.Quast, ""Expected signal observability at future experiments"" CMS NOTE 2005/004. - http://root.cern.ch/root/html/src/TLimit.html. Function Members (Methods); public:. virtual~HybridCalculator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); RooStats::HybridResult*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:1636,test,test,1636,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,1,['test'],['test']
Testability,"e from the RooFit Package.; The basic idea is the following:; - Instantiate an object specifying a signal+background model, a background model and a dataset.; - Perform toy MC experiments to know the distributions of -2lnQ; - Calculate the CLsb and CLs values as ""integrals"" of these distributions. The class allows the user to input models as RooAbsPdf ( TH1 object could be used; by using the RooHistPdf class); The pdfs must be ""extended"": for more information please refer to; http://roofit.sourceforge.net). The dataset can be entered as a; RooAbsData objects. Unlike the TLimit Class a complete MC generation is performed at each step; and not a simple Poisson fluctuation of the contents of the bins.; Another innovation is the treatment of the nuisance parameters. The user; can input in the constructor nuisance parameters.; To include the information that we have about the nuisance parameters a prior; PDF (RooAbsPdf) should be specified. Different test statistic can be used (likelihood ratio, number of events or; profile likelihood ratio. The default is the likelihood ratio.; See the method SetTestStatistic. The number of toys to be generated is controlled by SetNumberOfToys(n). The result of the calculations is returned as a HybridResult object pointer. see also the following interesting references:; - Alex Read, ""Presentation of search results: the CLs technique"",; Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; see http://www.iop.org/EJ/abstract/0954-3899/28/10/313/. - Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)"" CERN 2000-005 (30 May 2000). - V. Bartsch, G.Quast, ""Expected signal observability at future experiments"" CMS NOTE 2005/004. - http://root.cern.ch/root/html/src/TLimit.html. Function Members (Methods); public:. virtual~HybridCalculatorOriginal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); RooStats::Hybri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html:1658,test,test,1658,root/html528/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html,6,['test'],['test']
Testability,"e gif test according to the ETestType provided.Definition GoFTest.cxx:208; ROOT::Math::GoFTest::SetDistributionFunctionvoid SetDistributionFunction(const IGenFunction &cdf, Bool_t isPDF, Double_t xmin, Double_t xmax)Definition GoFTest.cxx:267; ROOT::Math::GoFTest::fCDFstd::unique_ptr< IGenFunction > fCDFPointer to CDF used in 1-sample test.Definition GoFTest.h:235; ROOT::Math::GoFTest::fTestSampleFromH0Bool_t fTestSampleFromH0Definition GoFTest.h:245; ROOT::Math::GoFTest::EDistributionEDistributionH0 distributions for using only with 1-sample tests.Definition GoFTest.h:70; ROOT::Math::GoFTest::kLogNormal@ kLogNormalGaussian distribution with default mean=0, sigma=1.Definition GoFTest.h:74; ROOT::Math::GoFTest::kExponential@ kExponentialLognormal distribution with default meanlog=0, sigmalog=1.Definition GoFTest.h:75; ROOT::Math::GoFTest::kGaussian@ kGaussianFor internal use only within the class's template constructor.Definition GoFTest.h:73; ROOT::Math::GoFTest::kUserDefined@ kUserDefinedDefault value for non templated 1-sample test. Set with SetDistribution.Definition GoFTest.h:72; ROOT::Math::GoFTest::kUndefined@ kUndefinedDefinition GoFTest.h:71; ROOT::Math::GoFTest::fDistEDistribution fDistType of distribution.Definition GoFTest.h:238; ROOT::Math::GoFTest::Instantiatevoid Instantiate(const Double_t *sample, size_t sampleSize)Definition GoFTest.cxx:279; ROOT::Math::GoFTest::fCombinedSamplesstd::vector< Double_t > fCombinedSamplesThe combined data.Definition GoFTest.h:241; ROOT::Math::GoFTest::KolmogorovSmirnovTestvoid KolmogorovSmirnovTest(Double_t &pvalue, Double_t &testStat) constKolmogorov-Smirnov 1-Sample Test.Definition GoFTest.cxx:921; ROOT::Math::GoFTest::fParamsstd::vector< Double_t > fParamsThe distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian)Definition GoFTest.h:239; ROOT::Math::GoFTest::ETestTypeETestTypeGoodness of Fit test types for using with the class's unary functions as a shorthand for the in-built...Definition G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:39617,test,test,39617,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['test']
Testability,"e histograms is scaled; but the histogram originally was unweighted; o by default underflows and overlows are not included:; * ""OF"" = overflows included; * ""UF"" = underflows included; o ""P"" = print chi2, ndf, p_value, igood; o ""CHI2"" = returns chi2 instead of p-value; o ""CHI2/NDF"" = returns ; - res: not empty - computes normalized residuals and returns them in; this array. The current implementation is based on the papers test for comparison; of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006. Introduction:. A frequently used technique in data analysis is the comparison of; histograms. First suggested by Pearson [1] the test of; homogeneity is used widely for comparing usual (unweighted) histograms.; This paper describes the implementation modified tests; for comparison of weighted and unweighted histograms and two weighted; histograms [2] as well as usual Pearson's test for; comparison two usual (unweighted) histograms. Overview:. Comparison of two histograms expect hypotheses that two histograms; represent identical distributions. To make a decision p-value should; be calculated. The hypotheses of identity is rejected if the p-value is; lower then some significance level. Traditionally significance levels; 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; analysis of the residuals which is often helpful in identifying the; bins of histograms responsible for a significant overall value.; Residuals are the difference between bin contents and expected bin; contents. Most convenient for analysis are the normalized residuals. If; hypotheses of identity are valid then normalized residuals are; approximately independent and identically distributed random variables; having N(0,1) distribution. Analysis of residuals expect test of above; mentioned properties of residuals. No",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:44905,test,tests,44905,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,12,['test'],"['test', 'tests']"
Testability,"e html manual and references; Double_tfByCalccalculated value of b parameter for 1D ridges in y direction; Double_tfByErrerror value of b parameter for 1D ridges in y direction; Double_tfByInitinitial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixAmpX1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY[fNPeaks] array of logical values which allow to fix approp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Fit.html:16357,log,logical,16357,root/html602/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Fit.html,2,['log'],['logical']
Testability,"e if fixed aspect ratio; TFrame*TPad::fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! flag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePad.html:24800,log,log,24800,root/html528/TEvePad.html,https://root.cern,https://root.cern/root/html528/TEvePad.html,6,['log'],['log']
Testability,"e if fixed aspect ratio; TFrame*TPad::fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Double_tfMaximumSlider maximum value in [0,1]; TStringfMethodcommand to be executed when slider is changed; Double_tfMinimumSlider minimum value in [0,1]; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; TObject*fObject!Pointer to associated object; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSlider.html:27255,log,log,27255,root/html528/TSlider.html,https://root.cern,https://root.cern/root/html528/TSlider.html,6,['log'],['log']
Testability,"e if fixed aspect ratio; TFrame*TPad::fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); TStringTButton::fMethodMethod to be executed by this button; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGroupButton.html:26167,log,log,26167,root/html528/TGroupButton.html,https://root.cern,https://root.cern/root/html528/TGroupButton.html,6,['log'],['log']
Testability,"e if fixed aspect ratio; TFrame*TPad::fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); TStringfMethodMethod to be executed by this button; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::fRightMarg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TButton.html:27816,log,log,27816,root/html526/TButton.html,https://root.cern,https://root.cern/root/html526/TButton.html,7,['log'],['log']
Testability,"e implemented. First,. Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet). advertises the analytical integrals that are supported. 'integSet'; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to anaIntSet and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. Double_t analyticalIntegral(Int_t code). Implements the actual analytical integral(s) advertised by; getAnalyticalIntegral. This functions will only be called with; codes returned by getAnalyticalIntegral, except code zero. The integration range for real each dependent to be integrated can; be obtained from the dependents' proxy functions min() and; max(). Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g. in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:3274,assert,assert,3274,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,12,['assert'],['assert']
Testability,"e in user's coordinates space.; func : function defining axis labels and tick marks.; ndiv : Number of divisions. ndiv=N1 + 100*N2 + 10000*N3; N1=number of 1st divisions.; N2=number of 2nd divisions.; N3=number of 3rd divisions. e.g.:. ndiv=0 --> no tick marks.; ndiv=2 --> 2 divisions, one tick mark in the middle of the axis. chopt : Drawing options (see below).; gridlength: grid length on main tick marks. Examples:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",10,10,700,500);. gStyle->SetOptStat(0);. TH2F *h2 = new TH2F(""h"",""Axes"",100,0,10,100,-2,2);; h2->Draw();. TF1 *f1=new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();. TF1 *f2=new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();. TF1 *f3=new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,""G"");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.03);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(1.2);; A3->Draw();; return c2;; }; Logarithmic axis; By default axis are linear. To define a TGaxis as logarithmic, it is; enough to create it with the option ""G"". When plotting an histogram or a graph the logarithmic scale can be set using:. gPad->SetLogx(1); set the logarithmic scale on the X axis; gPad->SetLogy(1); set the logarithmic scale on the Y axis. When the SetMoreLogLabels() method is called more labels are drawn; when in logarithmic scale and there is a small number of decades (less than 3).; Blank axis; To draw only the axis tick marks without the axis body, it is enough to specify; the option ""B"". It useful to superpose axis.; Tick marks' orientation; By default tick marks are drawn on the positive side of the axis, except for; vertical axis for which the default is negative. The chop parameter; allows to control the tick marks orientation:. chopt = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGaxis.html:4828,log,logarithmic,4828,root/html604/TGaxis.html,https://root.cern,https://root.cern/root/html604/TGaxis.html,1,['log'],['logarithmic']
Testability,"e input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBarlowBeestonLL(); _obs(""paramOfInterest"",""Parameters of interest"",this),; _par(""nuisanceParam"",""Nuisance parameters"",this,kFALSE,kFALSE),; Default constructor; Should only be used by proof.; _piter = _par.createIterator() ;; _oiter = _obs.createIterator() ;. RooBarlowBeestonLL(const char *name, const char *title, 				 RooAbsReal& nllIn /*, const RooArgSet& observables*/); _obs(""paramOfInterest"",""Parameters of interest"",this),; _par(""nuisanceParam"",""Nuisance parameters"",this,kFALSE,kFALSE),; Constructor of profile likelihood given input likelihood nll w.r.t; the given set of variables. The input log likelihood is minimized w.r.t; to all other variables of the likelihood at each evaluation and the; value of the global log likelihood minimum is always subtracted. RooBarlowBeestonLL(const RooStats::HistFactory::RooBarlowBeestonLL& other, const char* name = 0); _obs(""obs"",this,other._obs),; _par(""par"",this,other._par),; Copy constructor. ~RooBarlowBeestonLL(); Destructor. void initializeBarlowCache(). RooArgSet* getParameters(const RooArgSet* depList, Bool_t stripDisconnected = kTRUE) const. Double_t evaluate() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ). if (_minuit) {; delete _minuit ;; _minuit = 0 ;; }. TObject* clone(const char* newname) const; { return new RooBarlowBeestonLL(*this,newname); }. RooAbsReal& nll(); void setAlwaysStartFromMin(Bool_t flag) { _startFromMin = flag ; }; Bool_t alwaysStartFromMin() const { return _startFromMin ; }; RooMinuit* minuit() { return _minuit ; }. { return const_cast<RooAbsReal&>(_nll.arg()) ; }. void setPdf(RooAbsPdf* pdf); void clearAbsMin() { _absMinValid = kFALSE ; }; Int_t numEval() const { re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html:36944,log,log,36944,root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,3,['log'],['log']
Testability,"e integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale whatever the fXmax/fXmin ratio is; Note that the parabolic approximation is very good as soon as the number of bins is greater than 50. ; Reimplemented in TF2.; Definition at line 2192 of file TF1.cxx. ◆ GetRange() [1/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented in TF2, TF3, and TF3.; Definition at line 2308 of file TF1.cxx. ◆ GetRange() [2/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. virtual . Return range of a 2-D function. ; Reimplemented in TF2, TF3, TF2, and TF3.; Definition at line 2318 of file TF1.cxx. ◆ GetRange() [3/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; zmin, . Double_t & ; xmax, . Double_t & ; ymax, . Double_t & ; zmax . ); const. virtual . Return range of function. ; Reimplemented in TF2, TF3,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:86315,log,log,86315,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,3,['log'],['log']
Testability,"e is like a normal TFile except that it reads and writes; its data via a rootd server (for more on the rootd daemon see the; source files root/rootd/src/*.cxx). TNetFile file names are in; standard URL format with protocol ""root"" or ""roots"". The following; are valid TNetFile URL's:. roots://hpsalo/files/aap.root; root://hpbrun.cern.ch/root/hsimple.root; root://pcna49a:5151/~na49/data/run821.root; root://pcna49d.cern.ch:5050//v1/data/run810.root. The only difference with the well known httpd URL's is that the root; of the remote file tree is the user's home directory. Therefore an; absolute pathname requires a // after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetFile.html:1250,log,login,1250,root/html528/TNetFile.html,https://root.cern,https://root.cern/root/html528/TNetFile.html,12,['log'],['login']
Testability,"e is moved in a pad containing a 2-d view of this histogram a second canvas shows the projection along Y corresponding to the mouse position along X. ;  ; TH1 * ShowBackground (Int_t niter=20, Option_t *option=""same"") override;  This function calculates the background spectrum in this histogram. ;  ; Int_t ShowPeaks (Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05) override;  Interface to TSpectrum2::Search the function finds peaks in this histogram where the width is > sigma and the peak maximum greater than threshold*maximum bin content of this. ;  ; void Smooth (Int_t ntimes=1, Option_t *option="""") override;  Smooth bin contents of this 2-d histogram using kernel algorithms similar to the ones used in the raster graphics community. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:19789,test,test,19789,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,3,['test'],['test']
Testability,"e is read, starting from; the end (i.e. the last ~1000 lines).; The received buffer is added to the file fname, if the latter is defined.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(const char* ord = ""*"", Int_t from = -10, Int_t to = -1); Display the content associated with worker 'ord' from line 'from'; to line 'to' inclusive. A negative value; for 'from' indicates lines counted from the end (tail action); 'to'; is ignored in such a case.; If 'ord' is ""*"" (default), all the workers are displayed. void Print(Option_t* opt = 0) const; Print head info about the content. void Prt(const char* what, Bool_t newline = kTRUE); Special printing procedure. Int_t Save(const char* ord = ""*"", const char* fname = 0, Option_t* opt = ""w""); Save the content associated with worker 'ord' to finel 'fname'.; If 'ord' is ""*"" (default), the log from all the workers is saved.; If 'opt' is ""a"" the file is open in append mode; otherwise the file; is truncated. Int_t Grep(const char* txt, Int_t from = 0); Search lines containing 'txt', starting from line 'from'.; Print the lines where this happens. void SetMaxTransferSize(Long64_t maxsz); Set max transfer size. TProofLog(const char* stag, const char* url, TProofMgr* mgr). TList * GetListOfLogs() const; { return fElem; }. TDatime StartTime(); { return fStartTime; }. void SetLogToBox(Bool_t lgbox = kFALSE); Where to log. { SetBit(kLogToBox, lgbox); }. Bool_t LogToBox(); { return (TestBit(kLogToBox)) ? kTRUE : kFALSE; }. » Author: G. Ganis 31/08/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: 5d579564fccbadad9cd6f81ccb7726dddea80e0d $ » Last generated: 2015-06-02 16:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofLog.html:12182,log,log,12182,root/html604/TProofLog.html,https://root.cern,https://root.cern/root/html604/TProofLog.html,2,['log'],['log']
Testability,"e is read, starting from; the end (i.e. the last ~1000 lines).; The received buffer is added to the file fname, if the latter is defined.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(const char* ord = ""*"", Int_t from = -10, Int_t to = -1); Display the content associated with worker 'ord' from line 'from'; to line 'to' inclusive. A negative value; for 'from' indicates lines counted from the end (tail action); 'to'; is ignored in such a case.; If 'ord' is ""*"" (default), all the workers are displayed. void Print(Option_t* opt = 0) const; Print head info about the content. void Prt(const char* what, Bool_t newline = kTRUE); Special printing procedure. Int_t Save(const char* ord = ""*"", const char* fname = 0, Option_t* opt = ""w""); Save the content associated with worker 'ord' to finel 'fname'.; If 'ord' is ""*"" (default), the log from all the workers is saved.; If 'opt' is ""a"" the file is open in append mode; otherwise the file; is truncated. Int_t Grep(const char* txt, Int_t from = 0); Search lines containing 'txt', starting from line 'from'.; Print the lines where this happens. void SetMaxTransferSize(Long64_t maxsz); Set max transfer size. TProofLog(const char* stag, const char* url, TProofMgr* mgr). TList * GetListOfLogs() const; { return fElem; }. TDatime StartTime(); { return fStartTime; }. void SetLogToBox(Bool_t lgbox = kFALSE); Where to log. { SetBit(kLogToBox, lgbox); }. Bool_t LogToBox(); { return (TestBit(kLogToBox)) ? kTRUE : kFALSE; }. » Author: G. Ganis 31/08/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: 5d579564fccbadad9cd6f81ccb7726dddea80e0d $ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLog.html:12182,log,log,12182,root/html602/TProofLog.html,https://root.cern,https://root.cern/root/html602/TProofLog.html,2,['log'],['log']
Testability,"e it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  mathStudent.C Tutorial illustrating the use of the Student and F distributions ;  multidimSampling.C Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  normalDist.py Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  principal.py Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2 ;  tStudent.C Example macro describing the student t distribution ;  tStudent.py Example macro describing the student t distribution ;  TSVDUnfoldExample.C Data unfolding using Singular Value Decomposition ;  vavilov.C Test of the TMath::Vavilov distribution ;  ► matrix;  invertMatrix.C This macro shows several ways to invert a matrix ;  solveLinear.C This macro shows several ways to perform a linear least-squares analysis ;  ► mc;  CompareMasses.CMacro to compare masses in ROOT data base to the values from pdg pdg ;  ► memstat;  memstatExample.CScript post-processing the file generated by TMemStat (default memstat.root) ;  ► mlp;  mlpHiggs.C Example of a Multi Layer Perceptron ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:135119,test,testrandom,135119,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['test'],['testrandom']
Testability,"e managed by class. TUnuranContDist(const TUnuranContDist& ); Implementation of copy constructor. ~TUnuranContDist(); destructor implementation. void SetCdf(const ROOT::Math::IGenFunction& cdf); set cdf distribution using a generic function interface. void SetCdf(TF1* cdf); set cumulative distribution function from a TF1. double Pdf(double x) const; evaluate the pdf of the distribution. double DPdf(double x) const; evaluate the derivative of the pdf; if derivative function is not given is evaluated numerically. double Cdf(double x) const; evaluate the integral (cdf) on the domain. TUnuranContDist * Clone() const. Clone (required by base class). { return new TUnuranContDist(*this); }. void SetDomain(double xmin, double xmax). Set the distribution domain. If min < max a domain is defined otherwise is undefined. void SetMode(double mode). set the distribution mode (x position of its maximum). { fMode = mode; fHasMode=true;}. void SetPdfArea(double area). set the area below the pdf. { fArea = area; fHasArea=true;}. bool GetDomain(double& xmin, double& xmax) const. check if distribution has a defined domain and return in case its domain. bool HasCdf() const. check if a cdf function is provided for the distribution. { return fCdf != 0; }. bool HasMode() const. check if distribution has a pre-computed mode. { return fHasMode; }. bool HasPdfArea() const. check if distribution has a pre-computed area below the Pdf. { return fHasArea; }. double Mode() const. return the mode (x location of maximum of the pdf). { return fMode; }. double PdfArea() const. return area below the pdf. { return fArea; }. bool IsLogPdf() const. flag to control if given function represent the log of a pdf. { return fIsLogPdf; }. » Last changed: root/unuran:$Id: TUnuranContDist.h 33181 2010-04-25 10:15:08Z moneta $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnuranContDist.html:4247,log,log,4247,root/html528/TUnuranContDist.html,https://root.cern,https://root.cern/root/html528/TUnuranContDist.html,1,['log'],['log']
Testability,"e managed by class. TUnuranContDist(const TUnuranContDist& ); Implementation of copy constructor. ~TUnuranContDist(); destructor implementation. void SetCdf(const ROOT::Math::IGenFunction& cdf); set cdf distribution using a generic function interface. void SetCdf(TF1* cdf); set cumulative distribution function from a TF1. double Pdf(double x) const; evaluate the pdf of the distribution. double DPdf(double x) const; evaluate the derivative of the pdf; if derivative function is not given is evaluated numerically. double Cdf(double x) const; evaluate the integral (cdf) on the domain. TUnuranContDist * Clone() const. Clone (required by base class). { return new TUnuranContDist(*this); }. void SetDomain(double xmin, double xmax). Set the distribution domain. If min < max a domain is defined otherwise is undefined. void SetMode(double mode). set the distribution mode (x position of its maximum). { fMode = mode; fHasMode=true;}. void SetPdfArea(double area). set the area below the pdf. { fArea = area; fHasArea=true;}. bool GetDomain(double& xmin, double& xmax) const. check if distribution has a defined domain and return in case its domain. bool HasCdf() const. check if a cdf function is provided for the distribution. { return fCdf != 0; }. bool HasMode() const. check if distribution has a pre-computed mode. { return fHasMode; }. bool HasPdfArea() const. check if distribution has a pre-computed area below the Pdf. { return fHasArea; }. double Mode() const. return the mode (x location of maximum of the pdf). { return fMode; }. double PdfArea() const. return area below the pdf. { return fArea; }. bool IsLogPdf() const. flag to control if given function represent the log of a pdf. { return fIsLogPdf; }. » Last changed: root/unuran:$Id: TUnuranContDist.h 33181 2010-04-25 10:15:08Z moneta $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TUnuranContDist.html:4247,log,log,4247,root/html530/TUnuranContDist.html,https://root.cern,https://root.cern/root/html530/TUnuranContDist.html,1,['log'],['log']
Testability,"e managed by class. TUnuranContDist(const TUnuranContDist& ); Implementation of copy constructor. ~TUnuranContDist(); destructor implementation. void SetCdf(const ROOT::Math::IGenFunction& cdf); set cdf distribution using a generic function interface. void SetCdf(TF1* cdf); set cumulative distribution function from a TF1. double Pdf(double x) const; evaluate the pdf of the distribution. double DPdf(double x) const; evaluate the derivative of the pdf; if derivative function is not given is evaluated numerically. double Cdf(double x) const; evaluate the integral (cdf) on the domain. TUnuranContDist * Clone() const. Clone (required by base class). { return new TUnuranContDist(*this); }. void SetDomain(double xmin, double xmax). Set the distribution domain. If min < max a domain is defined otherwise is undefined. void SetMode(double mode). set the distribution mode (x position of its maximum). { fMode = mode; fHasMode=true;}. void SetPdfArea(double area). set the area below the pdf. { fArea = area; fHasArea=true;}. bool GetDomain(double& xmin, double& xmax) const. check if distribution has a defined domain and return in case its domain. bool HasCdf() const. check if a cdf function is provided for the distribution. { return fCdf != 0; }. bool HasMode() const. check if distribution has a pre-computed mode. { return fHasMode; }. bool HasPdfArea() const. check if distribution has a pre-computed area below the Pdf. { return fHasArea; }. double Mode() const. return the mode (x location of maximum of the pdf). { return fMode; }. double PdfArea() const. return area below the pdf. { return fArea; }. bool IsLogPdf() const. flag to control if given function represent the log of a pdf. { return fIsLogPdf; }. » Last changed: root/unuran:$Id: TUnuranContDist.h 33181 2010-04-25 10:15:08Z moneta $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUnuranContDist.html:4247,log,log,4247,root/html532/TUnuranContDist.html,https://root.cern,https://root.cern/root/html532/TUnuranContDist.html,1,['log'],['log']
Testability,"e marginalised and the prior distribution of those parameters. HybridCalculatorOriginal(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); Constructor with a ModelConfig object representing the signal + background model and; another model config representig the background only model; a Prior pdf for the nuiscane parameter of the signal and background can be specified in; the s+b model or the b model. If it is specified in the s+b model, the one of the s+b model will be used. ~HybridCalculatorOriginal(); HybridCalculatorOriginal destructor. void SetNullModel(const RooStats::ModelConfig& ); Set the model describing the null hypothesis. void SetAlternateModel(const RooStats::ModelConfig& ); Set the model describing the alternate hypothesis. void SetTestStatistic(int index); set the desired test statistics:; index=1 : likelihood ratio: 2 * log( L_sb / L_b ) (DEFAULT); index=2 : number of generated events; index=3 : profiled likelihood ratio; if the index is different to any of those values, the default is used. HybridResult* Calculate(TH1& data, unsigned int nToys, bool usePriors) const; first compute the test statistics for data and then prepare and run the toy-MC experiments. HybridResult* Calculate(RooAbsData& data, unsigned int nToys, bool usePriors) const; first compute the test statistics for data and then prepare and run the toy-MC experiments. HybridResult* Calculate(unsigned int nToys, bool usePriors) const. void RunToys(vector<double>& bVals, vector<double>& sbVals, unsigned int nToys, bool usePriors) const; do the actual run-MC processing. void PrintMore(const char* options) const; Print out some information about the input models. HybridResult* GetHypoTest() const; perform the hypothesis test and return result of hypothesis test. bool DoCheckInputs() const. explicit HybridCalculatorOriginal(const char* name = 0); Dummy Constructor with only name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html:12472,test,test,12472,root/html528/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html,12,"['log', 'test']","['log', 'test']"
Testability,"e mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoParallel(Int_t nodes, Bool_t accept = kFALSE, Bool_t random = kFALSE); Go in parallel mode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:57609,log,logging,57609,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['log'],['logging']
Testability,"e minimization with MINUIT. ; ; import ROOT; ; ; # Setup pdf and likelihood; # -----------------------------------------------; ; # Observable; x = ROOT.RooRealVar(""x"", ""x"", -20, 20); ; # Model (intentional strong correlations); mean = ROOT.RooRealVar(""mean"", ""mean of g1 and g2"", 0); sigma_g1 = ROOT.RooRealVar(""sigma_g1"", ""width of g1"", 3); g1 = ROOT.RooGaussian(""g1"", ""g1"", x, mean, sigma_g1); ; sigma_g2 = ROOT.RooRealVar(""sigma_g2"", ""width of g2"", 4, 3.0, 6.0); g2 = ROOT.RooGaussian(""g2"", ""g2"", x, mean, sigma_g2); ; frac = ROOT.RooRealVar(""frac"", ""frac"", 0.5, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [g1, g2], [frac]); ; # Generate 1000 events; data = model.generate({x}, 1000); ; # Construct unbinned likelihood of model w.r.t. data; nll = model.createNLL(data); ; # Interactive minimization, error analysis; # -------------------------------------------------------------------------------; ; # Create MINUIT interface object; m = ROOT.RooMinimizer(nll); ; # Activate verbose logging of MINUIT parameter space stepping; m.setVerbose(True); ; # Call MIGRAD to minimize the likelihood; m.migrad(); ; # Print values of all parameters, reflect values (and error estimates); # that are back propagated from MINUIT; model.getParameters({x}).Print(""s""); ; # Disable verbose logging; m.setVerbose(False); ; # Run HESSE to calculate errors from d2L/dp2; m.hesse(); ; # Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT; sigma_g2.Print(); ; # Run MINOS on sigma_g2 parameter only; m.minos({sigma_g2}); ; # Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT; sigma_g2.Print(); ; # Saving results, contour plots; # ---------------------------------------------------------; ; # Save a snapshot of the fit result. ROOT.This object contains the initial; # fit parameters, final fit parameters, complete correlation; # matrix, EDM, minimized FCN , last MINUIT status code and; # the number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf601__intminuit_8py.html:1305,log,logging,1305,doc/master/rf601__intminuit_8py.html,https://root.cern,https://root.cern/doc/master/rf601__intminuit_8py.html,1,['log'],['logging']
Testability,"e mixture, one can use radionuclides as well as stable elements:; TGeoMixture(const char *name, Int_t nelements, Double_t density);; TGeoMixture::AddElement(TGeoElement *elem,; Double_t weight_fraction);; Once defined, one can retrieve the time evolution for the radioactive materials/mixtures by using one of the next two methods:. TGeoMaterial::FillMaterialEvolution(TObjArray *population, Double_t precision=0.001). To use this method, one has to provide an empty TObjArray object that will be filled with all elements coming from the decay chain of the initial radionuclides contained by the material/mixture. The precision represent the cumulative branching ratio for which decay products are still considered. Concentration of C14 derived elements. The population list may contain stable elements as well as radionuclides, depending on the initial elements. To test if an element is a radionuclide:; Bool_t TGeoElement::IsRadioNuclide() const; All radionuclides in the output population list have attached objects that represent the time evolution of their fraction of nuclei with respect to the top radionuclide in the decay chain. These objects (Bateman solutions) can be retrieved and drawn:; TGeoBatemanSol *TGeoElementRN::Ratio();; void TGeoBatemanSol::Draw();; Another method allows to create the evolution of a given radioactive material/mixture at a given moment in time:. TGeoMaterial::DecayMaterial(Double_t time, Double_t precision=0.001). The method will create the mixture that result from the decay of a initial material/mixture at time, while all resulting elements having a fractional weight less than precision are excluded.; A demo macro for radioactive material features is $ROOTSYS/tutorials/geom/RadioNuclides.C It demonstrates also the decay of a mixture made of radionuclides. Concentracion of elements derived fromCa53+Sr78. 18.2.3 Tracking Media; The class TGeoMedium describes tracking media properties. This has a pointer to a material and the additional data members ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:894237,test,test,894237,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"e new header.; if option contains ""Overwrite"", the previous Tree header is deleted; before written the new header. This option is slightly faster, but; the default option is safer in case of a problem (disk quota exceeded); when writing the new header. The function returns the number of bytes written to the file.; if the number of bytes is null, an error has occured while writing; the header to the file. How to write a Tree in one process and view it from another process. The following two scripts illustrate how to do this.; The script treew.C is executed by process1, treer.C by process2. ----- script treew.C; void treew() {; TFile f(""test.root"",""recreate"");; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo"",""px:py:pz:random:i"");; Float_t px, py, pz;; for ( Int_t i=0; i<10000000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ntuple->Fill(px,py,pz,random,i);; if (i%1000 == 1) ntuple->AutoSave(""SaveSelf"");; }; }. ----- script treer.C; void treer() {; TFile f(""test.root"");; TTree *ntuple = (TTree*)f.Get(""ntuple"");; TCanvas c1;; Int_t first = 0;; while(1) {; if (first == 0) ntuple->Draw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }. TBranch* BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch() with added check that addobj matches className. See TTree::Branch() for other details. TBranch* BranchImp(const char* branchname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.; See TTree::Branch for other details. TBranch* BranchImpRef(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:40043,test,test,40043,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['test'],['test']
Testability,"e next option is either a ' ' or a ';'; All recognized settings are removed from the input string opt. If action == 0, set up the output file accordingly, if action == 1 clean related output file settings. If the final target file is local then 'target' is set to the final local path when action == 0 and used to retrieve the file with TFile::Cp when action == 1.; Output file settings are in the form `<previous_option>`of=name `<next_option>`; `<previous_option>`outfile=name,...;`<next_option>`; The separator from the next option is either a ' ' or a ';' Called interanally by TProof::Process.; Returns 0 on success, -1 on error. ; Definition at line 4937 of file TProof.cxx. ◆ HandleSubmerger(). void TProof::HandleSubmerger ; (; TMessage * ; mess, . TSlave * ; sl . ). private . Process a message of type kPROOF_SUBMERGER. ; Definition at line 4014 of file TProof.cxx. ◆ Init(). Int_t TProof::Init ; (; const char * ; masterurl, . const char * ; conffile, . const char * ; confdir, . Int_t ; loglevel, . const char * ; alias = 0 . ). protected . Start the PROOF environment. ; Starting PROOF involves either connecting to a master server, which in turn will start a set of slave servers, or directly starting as master server (if master = """"). For a description of the arguments see the TProof ctor. Returns the number of started master or slave servers, returns 0 in case of error, in which case fValid remains false. ; Definition at line 757 of file TProof.cxx. ◆ InitMembers(). void TProof::InitMembers ; (; ). protected . Default initializations. ; Definition at line 527 of file TProof.cxx. ◆ Interrupt(). void TProof::Interrupt ; (; EUrgent ; type, . ESlaves ; list = kActive . ). private . Send interrupt to master or slave servers. ; Definition at line 2276 of file TProof.cxx. ◆ InterruptCurrentMonitor(). void TProof::InterruptCurrentMonitor ; (; ). private . If in active in a monitor set ready state. ; Definition at line 11335 of file TProof.cxx. ◆ IsA(). TClass * TProof::IsA ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:111103,log,loglevel,111103,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['log'],['loglevel']
Testability,"e nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:16964,sandbox,sandbox,16964,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,2,['sandbox'],['sandbox']
Testability,"e not subdirectory. To recreate; the directory structure do:. TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file);. Long64_t Merge(TCollection* list, Option_t* option = """"); Merge all chains in the collection. (NOT IMPLEMENTED). Long64_t Merge(TFile* file, Int_t basketsize, Option_t* option = """"); Merge all the entries in the chain into a new tree in the current file. Note: The ""file"" parameter is *not* the file where the new; tree will be inserted. The new tree is inserted into; gDirectory, which is usually the most recently opened; file, or the directory most recently cd()'d to. If option = ""C"" is given, the compression level for all branches; in the new Tree is set to the file compression level. By default,; the compression level of all branches is the original compression; level in the old trees. If basketsize > 1000, the basket size for all branches of the; new tree will be set to basketsize. Example using the file generated in $ROOTSYS/test/Event; merge two copies of Event.root. gSystem.Load(""libEvent"");; TChain ch(""T"");; ch.Add(""Event1.root"");; ch.Add(""Event2.root"");; ch.Merge(""all.root"");. If the chain is expecting the input tree inside a directory,; this directory is NOT created by this routine. So if you do:. TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");. The resulting file will not have subdirectories. In order to; preserve the directory structure do the following instead:. TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file);. If 'option' contains the word 'fast' the merge will be done without; unzipping or unstreaming the baskets (i.e., a direct copy of the raw; bytes on disk). When 'fast' is specified, 'option' can also contains a; sorting order for the baskets in the output file. There is currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. When using SortBasketsByOffset the baskets are wri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TChain.html:39662,test,test,39662,root/html528/TChain.html,https://root.cern,https://root.cern/root/html528/TChain.html,1,['test'],['test']
Testability,"e of a TChain, the entry number in the current Tree must be found; 1692/// before calling this function. For example:; 1693///; 1694///~~~ {.cpp}; 1695/// TChain* chain = ...;; 1696/// Long64_t localEntry = chain->LoadTree(entry);; 1697/// branch->GetEntry(localEntry);; 1698///~~~; 1699///; 1700/// The function returns the number of bytes read from the input buffer.; 1701/// If entry does not exist, the function returns 0.; 1702/// If an I/O error occurs, the function returns -1.; 1703///; 1704/// See IMPORTANT REMARKS in TTree::GetEntry.; 1705 ; 1706Int_t TBranch::GetEntry(Long64_t entry, Int_t getall); 1707{; 1708 // Remember which entry we are reading.; 1709 fReadEntry = entry;; 1710 ; 1711 if (R__unlikely(TestBit(kDoNotProcess) && !getall)) { return 0; }; 1712 ; 1713 TBasket *basket; // will be initialized in the if/then clauses.; 1714 Long64_t first;; 1715 ; 1716 Int_t result = GetBasketAndFirst(basket, first, nullptr);; 1717 if (R__unlikely(result < 0)) { return result + 1; }; 1718 ; 1719 basket->PrepareBasket(entry);; 1720 TBuffer* buf = basket->GetBufferRef();; 1721 ; 1722 // This test necessary to read very old Root files (NvE).; 1723 if (R__unlikely(!buf)) {; 1724 TFile* file = GetFile(0);; 1725 if (!file) return -1;; 1726 basket->ReadBasketBuffers(fBasketSeek[fReadBasket], fBasketBytes[fReadBasket], file);; 1727 buf = basket->GetBufferRef();; 1728 }; 1729 ; 1730 // Set entry offset in buffer.; 1731 if (!TestBit(kDoNotUseBufferMap)) {; 1732 buf->ResetMap();; 1733 }; 1734 if (R__unlikely(!buf->IsReading())) {; 1735 basket->SetReadMode();; 1736 }; 1737 ; 1738 Int_t* entryOffset = basket->GetEntryOffset();; 1739 Int_t bufbegin = 0;; 1740 if (entryOffset) {; 1741 bufbegin = entryOffset[entry-first];; 1742 buf->SetBufferOffset(bufbegin);; 1743 Int_t* displacement = basket->GetDisplacement();; 1744 if (R__unlikely(displacement)) {; 1745 buf->SetBufferDisplacement(displacement[entry-first]);; 1746 }; 1747 } else {; 1748 bufbegin = basket->GetKeylen() + ((entry-fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:62861,test,test,62861,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['test'],['test']
Testability,"e of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  ; file  fitLinear2.C;   Fit a 5d hyperplane by n points, using the linear fitter directly ;  ; file  fitLinearRobust.C;   This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers. ;  ; file  fitMultiGraph.C;   fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  ; file  fitNormSum.C;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitNormSum.py;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__fit.html:2930,test,test,2930,doc/master/group__tutorial__fit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html,1,['test'],['test']
Testability,"e of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; RooChi2Var::FuncMode_funcModeFunction, P.d.f. or extended p.d.f?; RooArgSet*RooAbsOptTestStatistic::_funcObsSetList of observables in the pdf expression; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooAbsTestStatistic**RooAbsTestStatistic::_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpModeRooAbsTestStatistic::_gofOpModeOperation mode of test statistic instance ; vector<RooFit::MPSplit>RooAbsTestStatistic::_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsTestStatistic::_init! Is object initialized ; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealMPFE**RooAbsTestStatistic::_mpfeArray! Array of parallel execution frond ends; RooFit::MPSplitRooAbsTestStatistic::_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-split; Int_tRooAbsTestStatistic::_nCPUNumber of processors to use in parallel calculation mode; Int_tRooAbsTestStatistic::_nEventsTotal number of events in test statistic calculation; Int_tRooAbsTestStatistic::_nGofNumber of sub-contexts ; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooArgSet*RooAbsOptTestStatistic::_normSetPointer to set with observables used for normalization; Int_tRooAbsTestStatistic::_num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:39082,test,test,39082,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,3,['test'],['test']
Testability,"e of sigma parameter; fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); positionInit - array of initial values of peaks positions; fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional . Definition at line 2658 of file TSpectrumFit.cxx. ◆ SetTailParameters(). void TSpectrumFit::SetTailParameters ; (; Double_t ; tInit, . Bool_t ; fixT, . Double_t ; bInit, . Bool_t ; fixB, . Double_t ; sInit, . Bool_t ; fixS . ). This function sets the following fitting parameters of tails of peaks. . tInit - initial value of t parameter; fixT - logical value of t parameter, which allows to fix the parameter (not to fit); bInit - initial value of b parameter; fixB - logical value of b parameter, which allows to fix the parameter (not to fit); sInit - initial value of s parameter; fixS - logical value of s parameter, which allows to fix the parameter (not to fit) . Definition at line 2712 of file TSpectrumFit.cxx. ◆ Shape(). Double_t TSpectrumFit::Shape ; (; Int_t ; num_of_fitted_peaks, . Double_t ; i, . const Double_t * ; parameter, . Double_t ; sigma, . Double_t ; t, . Double_t ; s, . Double_t ; b, . Double_t ; a0, . Double_t ; a1, . Double_t ; a2 . ). protected . This function calculates peaks shape function (see manual) Function parameters: . num_of_fitted_peaks-number of fitted peaks; i-channel; parameter-array of peaks parameters (amplitudes and positions); sigma-sigma of peak; t, s-relative amplitudes; b-slope; a0, a1, a2- background coefficients . Definition at line 518 of file TSpectrumFit.cxx. ◆ StiefelInversion(). void TSpectrumFit::StiefelInversion ; (; Double_t ** ; a, . Int_t ; size . ). protected . This function calculates solution of the system of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:47580,log,logical,47580,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,3,['log'],['logical']
Testability,"e of the function on the (xmin, xmax) interval; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetMaximumX and TF1::GetX. Double_t GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; Returns the X value corresponding to the minimum value of the function; on the (xmin, xmax) interval; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetX. Double_t GetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; Returns the X value corresponding to the function value fy for (xmin<x<xmax).; in other words it can find the r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:41947,log,logx,41947,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['log'],['logx']
Testability,"e only minor overhead in c++11.; 480 const double* GetPointError(unsigned int ipoint, double & errlow, double & errhigh) const; 481 {; 482 assert( ipoint < fMaxPoints );; 483 assert( fErrorType == kAsymError );; 484 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 485 assert( fDataError.empty() );; 486 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 487 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 488 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 489 ; 490 errhigh = fDataErrorHighPtr[ ipoint ];; 491 errlow = fDataErrorLowPtr[ ipoint ];; 492 ; 493 return CoordErrors( ipoint );; 494 }; 495 ; 496 /**; 497 returns a single coordinate error component of a point.; 498 This function is threadsafe in contrast to Coords(...); 499 and can easily get vectorized by the compiler in loops; 500 running over the ipoint-index.; 501 */; 502 double GetBinUpEdgeComponent( unsigned int ipoint, unsigned int icoord ) const; 503 {; 504 assert( icoord < fDim );; 505 assert( !fBinEdge.empty() );; 506 assert( ipoint < fBinEdge.front().size() );; 507 ; 508 return fBinEdge[icoord][ipoint];; 509 }; 510 ; 511 /**; 512 return an array containing the upper edge of the bin for coordinate i; 513 In case of empty bin they could be merged in a single larger bin; 514 Return a NULL pointer if the bin width is not stored; 515 */; 516 // not threadsafe, to be replaced with never constructs!; 517 // for example: just return std::array or std::vector, there's; 518 // is going to be only minor overhead in c++11.; 519 const double* BinUpEdge( unsigned int ipoint ) const; 520 {; 521 if ( fBinEdge.empty() || ipoint > fBinEdge.front().size() ); 522 return nullptr;; 523 ; 524 GetBinUpEdgeCoordinates(ipoint, fpTmpBinEdgeVector);; 525 ; 526 return fpTmpBinEdgeVector;; 527 }; 528 ; 529 /**; 530 * Thread save version of function retrieving the bin up-edge in case of multidimensions; 531 */; 532 void GetBinUpEdgeCoordi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:17986,assert,assert,17986,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,2,['assert'],['assert']
Testability,"e pad auto execution of list of TExecs. void ToggleEventStatus(); Toggle event statusbar. void ToggleToolBar(); Toggle toolbar. void ToggleEditor(); Toggle editor. void ToggleToolTips(); Toggle tooltip display. Bool_t SupportAlpha(); Static function returning ""true"" if transparency is supported. void Update(); Update canvas pad buffers. void DisconnectWidget(); Used by friend class TCanvasImp. Bool_t IsGrayscale(); Check whether this canvas is to be drawn in grayscale mode. void SetGrayscale(Bool_t set = kTRUE); Set whether this canvas should be painted in grayscale, and re-paint; it if necessary. void CreatePainter(); Probably, TPadPainter must be placed in a separate ROOT module -; ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; gpad dir, so, in case of default painter, no *.so should be loaded,; no need in plugin managers.; May change in future. TVirtualPadPainter * GetCanvasPainter(); Access and (probably) creation of pad painter. void DeleteCanvasPainter(); assert on IsBatch() == false?. TCanvas(const TCanvas& canvas). TCanvas & operator=(const TCanvas& rhs). void Delete(Option_t* = """"); { MayNotUse(""Delete()""); }. void ForceUpdate(); { fCanvasImp->ForceUpdate(); }. const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelectedY;}. Option_t * GetSelectedOpt() const; {return fSelectedOpt.Data();}. TVirtualPad * GetSelectedPad() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCanvas.html:47147,assert,assert,47147,root/html602/TCanvas.html,https://root.cern,https://root.cern/root/html602/TCanvas.html,2,['assert'],['assert']
Testability,"e population to the predefined size ; Definition at line 299 of file GeneticPopulation.cxx. ◆ VariableDistribution() [1/2]. vector< Double_t > TMVA::GeneticPopulation::VariableDistribution ; (; Int_t ; varNumber). gives back all the values of coefficient ""varNumber"" of the current generation ; Definition at line 268 of file GeneticPopulation.cxx. ◆ VariableDistribution() [2/2]. TH1F * TMVA::GeneticPopulation::VariableDistribution ; (; Int_t ; varNumber, . Int_t ; bins, . Int_t ; min, . Int_t ; max . ). give back a histogram with the distribution of the coefficients. ; Parameters:. int bins : number of bins of the histogram; int min : histogram minimum; int max : maximum value of the histogram . Definition at line 251 of file GeneticPopulation.cxx. Member Data Documentation. ◆ fGenePool. std::vector<TMVA::GeneticGenes> TMVA::GeneticPopulation::fGenePool. private . the ""genePool"" where the individuals of the current generation are stored ; Definition at line 94 of file GeneticPopulation.h. ◆ fLogger. MsgLogger* TMVA::GeneticPopulation::fLogger. mutableprivate . ! message logger ; Definition at line 99 of file GeneticPopulation.h. ◆ fPopulationSizeLimit. Int_t TMVA::GeneticPopulation::fPopulationSizeLimit. private . Definition at line 102 of file GeneticPopulation.h. ◆ fRandomGenerator. TRandom3* TMVA::GeneticPopulation::fRandomGenerator. private . random Generator for this population ; Definition at line 97 of file GeneticPopulation.h. ◆ fRanges. std::vector<TMVA::GeneticRange*> TMVA::GeneticPopulation::fRanges. private . contains the ranges in between the values of the coefficients have to be ; Definition at line 95 of file GeneticPopulation.h. Libraries for TMVA::GeneticPopulation:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/GeneticPopulation.h; tmva/tmva/src/GeneticPopulation.cxx. TMVAGeneticPopulation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:11621,log,logger,11621,doc/master/classTMVA_1_1GeneticPopulation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html,1,['log'],['logger']
Testability,"e real function to find the mode. void ComputeIntervalUsingRooFit(double c1, double c2) const; compute the interval using RooFit. void ComputeIntervalFromCdf(double c1, double c2) const; compute the interval using Cdf integration. void ApproximatePosterior() const; approximate posterior in nbins using a TF1 and; scan the values. void ComputeIntervalFromApproxPosterior(double c1, double c2) const; compute the interval using the approximate posterior function. void ComputeShortestInterval() const; compute the shortest interval. BayesianCalculator(); constructor. void SetData(RooAbsData& data). void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { SetTestSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLevel() const; Get the Confidence level for the test. { return 1.-fSize; }. void SetLeftSideTailFraction(Double_t leftSideFraction); set the fraction of probability content on the left tail; Central limits use 0.5 (default case); for upper limits it is 0 and 1 for lower limit; For shortest intervals a negative value (i.e. -1) must be given. {fLeftSideFraction = leftSideFraction;}. void SetShortestInterval(); set the Bayesian calculator to compute the shorest interval (default is central interval); to switch off SetLeftSideTailFraction to the rght value. { fLeftSideFraction = -1; }. void SetBrfPrecision(double precision); set the precision of the Root Finder. { fBrfPrecision = precision; }. void SetScanOfPosterior(int nbin = 100); use directly the approximate posterior function obtained by binning it in nbins; by default the cdf is used by integrating the posterior; if a value of nbin <= 0 the cdf function will be used. { fNScanBins = nbin; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wout",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__BayesianCalculator.html:11281,test,test,11281,root/html528/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__BayesianCalculator.html,1,['test'],['test']
Testability,"e right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if he wants do delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionViewer.html:27591,log,log,27591,root/html528/TSessionViewer.html,https://root.cern,https://root.cern/root/html528/TSessionViewer.html,4,['log'],['log']
Testability,"e servers. ;  ; TSlave * CreateSlave (const char *url, const char *ord, Int_t perf, const char *image, const char *workdir);  Create a new TSlave of type TSlave::kSlave. ;  ; TSlave * CreateSubmaster (const char *url, const char *ord, const char *image, const char *msd, Int_t nwk=1);  Create a new TSlave of type TSlave::kMaster. ;  ; TList * GetEnabledPackages () const;  ; TList * GetListOfActiveSlaves () const;  ; TVirtualProofPlayer * GetPlayer () const;  ; TPluginHandler * GetProgressDialog () const;  ; Int_t GetSandbox (TString &sb, Bool_t assert=kFALSE, const char *rc=0);  Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ;  ; void HandleLibIncPath (const char *what, Bool_t add, const char *dirs);  Handle lib, inc search paths modification request. ;  ; Int_t HandleOutputOptions (TString &opt, TString &target, Int_t action);  Extract from opt information about output handling settings. ;  ; Int_t Init (const char *masterurl, const char *conffile, const char *confdir, Int_t loglevel, const char *alias=0);  Start the PROOF environment. ;  ; void InitMembers ();  Default initializations. ;  ; virtual Int_t PollForNewWorkers ();  Asks the PROOF Serv for new workers in Dynamic Startup mode and activates them. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; virtual void SendInputDataFile ();  Send the input data objects to the master; the objects are taken from the dedicated list and / or the specified file. ;  ; void SetDSet (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofSuperMaster.html:36702,log,loglevel,36702,doc/master/classTProofSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofSuperMaster.html,1,['log'],['loglevel']
Testability,"e servers. ;  ; TSlave * CreateSlave (const char *url, const char *ord, Int_t perf, const char *image, const char *workdir);  Create a new TSlave of type TSlave::kSlave. ;  ; TSlave * CreateSubmaster (const char *url, const char *ord, const char *image, const char *msd, Int_t nwk=1);  Create a new TSlave of type TSlave::kMaster. ;  ; TList * GetEnabledPackages () const;  ; TList * GetListOfActiveSlaves () const;  ; TVirtualProofPlayer * GetPlayer () const;  ; TPluginHandler * GetProgressDialog () const;  ; Int_t GetSandbox (TString &sb, Bool_t assert=kFALSE, const char *rc=0);  Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ;  ; void HandleLibIncPath (const char *what, Bool_t add, const char *dirs);  Handle lib, inc search paths modification request. ;  ; Int_t HandleOutputOptions (TString &opt, TString &target, Int_t action);  Extract from opt information about output handling settings. ;  ; Int_t Init (const char *masterurl, const char *conffile, const char *confdir, Int_t loglevel, const char *alias=0);  Start the PROOF environment. ;  ; void InitMembers ();  Default initializations. ;  ; virtual TVirtualProofPlayer * MakePlayer (const char *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; virtual Int_t PollForNewWorkers ();  Asks the PROOF Serv for new workers in Dynamic Startup mode and activates them. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; virtual void SendInputDataFile ();  Send the input data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:38238,log,loglevel,38238,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,2,['log'],['loglevel']
Testability,"e servers. ;  ; TSlave * CreateSlave (const char *url, const char *ord, Int_t perf, const char *image, const char *workdir);  Create a new TSlave of type TSlave::kSlave. ;  ; TSlave * CreateSubmaster (const char *url, const char *ord, const char *image, const char *msd, Int_t nwk=1);  Create a new TSlave of type TSlave::kMaster. ;  ; TList * GetEnabledPackages () const;  ; TList * GetListOfActiveSlaves () const;  ; TVirtualProofPlayer * GetPlayer () const;  ; TPluginHandler * GetProgressDialog () const;  ; Int_t GetSandbox (TString &sb, Bool_t assert=kFALSE, const char *rc=0);  Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ;  ; void HandleLibIncPath (const char *what, Bool_t add, const char *dirs);  Handle lib, inc search paths modification request. ;  ; Int_t HandleOutputOptions (TString &opt, TString &target, Int_t action);  Extract from opt information about output handling settings. ;  ; Int_t Init (const char *masterurl, const char *conffile, const char *confdir, Int_t loglevel, const char *alias=0);  Start the PROOF environment. ;  ; void InitMembers ();  Default initializations. ;  ; virtual TVirtualProofPlayer * MakePlayer (const char *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:37677,log,loglevel,37677,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['log'],['loglevel']
Testability,"e specified drawing action on a data set which is stored on the master with name 'dsetname'. ;  ; virtual Int_t Echo (const char *str);  Sends a string to master and workers and expect them to echo it back to the client via a message. ;  ; virtual Int_t Echo (const TObject *obj);  Sends an object to master and workers and expect them to send back a message with the output of its TObject::Print(). ;  ; Int_t EnablePackage (const char *package, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, const char *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, TList *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t Exec (const char *cmd, Bool_t plusMaster=kFALSE);  Send command to be executed on the PROOF master and/or slaves. ;  ; Int_t Exec (const char *cmd, const char *ord, Bool_t logtomacro=kFALSE);  Send command to be executed on node of ordinal 'ord' (use ""0"" for master). ;  ; void Feedback (TList *objs);  Get list of feedback objects. ;  ; Long64_t Finalize (const char *queryref, Bool_t force=kFALSE);  Finalize query with reference ref. ;  ; Long64_t Finalize (Int_t query=-1, Bool_t force=kFALSE);  Finalize the qry-th query in fQueries. ;  ; TList * FindDataSets (const char *searchString, const char *optStr="""");  Find datasets, returns in a TList all found datasets. ;  ; Long64_t GetBytesRead () const;  ; Int_t GetClientProtocol () const;  ; const char * GetConfDir () const;  ; const char * GetConfFile () const;  ; Float_t GetCpuTime () const;  ; const char * GetDataPoolUrl () const;  ; TMap * GetDataSetQuota (const char *optStr="""");  returns a map of the quotas of all groups ;  ; TString Getenv (const char *env, const char *ord=""0"");  Get value of environment variable 'env' on node 'ord'. ;  ; TList * GetFeedbackList () const;  Return feedback list. ;  ; const char * GetGrou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:9919,log,logtomacro,9919,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['log'],['logtomacro']
Testability,"e speeds the algorithm up many times.; 1646/// Then, Brent's method is applied on the bracketed interval; 1647/// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); 1648/// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; 1649/// of iteration of the Brent algorithm; 1650/// If the flag logx is set the grid search is done in log step size; 1651/// This is done automatically if the log scale is set in the current Pad; 1652///; 1653/// NOTE: see also TF1::GetX; 1654 ; 1655Double_t TF1::GetMaximumX(Double_t xmin, Double_t xmax, Double_t epsilon, Int_t maxiter, Bool_t logx) const; 1656{; 1657 if (xmin >= xmax) {; 1658 xmin = fXmin;; 1659 xmax = fXmax;; 1660 }; 1661 ; 1662 if (!logx && gPad != nullptr) logx = gPad->GetLogx();; 1663 ; 1664 ROOT::Math::BrentMinimizer1D bm;; 1665 GInverseFunc g(this);; 1666 ROOT::Math::WrappedFunction<GInverseFunc> wf1(g);; 1667 bm.SetFunction(wf1, xmin, xmax);; 1668 bm.SetNpx(fNpx);; 1669 bm.SetLogScan(logx);; 1670 bm.Minimize(maxiter, epsilon, epsilon);; 1671 Double_t x;; 1672 x = bm.XMinimum();; 1673 ; 1674 return x;; 1675}; 1676 ; 1677 ; 1678////////////////////////////////////////////////////////////////////////////////; 1679/// Returns the minimum value of the function on the (xmin, xmax) interval; 1680///; 1681/// Method:; 1682/// First, the grid search is used to bracket the maximum; 1683/// with the step size = (xmax-xmin)/fNpx. This way, the step size; 1684/// can be controlled via the SetNpx() function. If the function is; 1685/// unimodal or if its extrema are far apart, setting the fNpx to; 1686/// a small value speeds the algorithm up many times.; 1687/// Then, Brent's method is applied on the bracketed interval; 1688/// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); 1689/// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; 1690/// of iteration of the Brent algorithm; 1691/// If the flag logx is set the grid search ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:60844,log,logx,60844,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['logx']
Testability,"e table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. ~TGenericTable(); destructor. TTableDescriptor * GetDescriptorPointer() const; { return fColDescriptors;}. void SetDescriptorPointer(TTableDescriptor* list); { fColDescriptors = list;}. void SetGenericType(); { TTable::SetType(GetDescriptorPointer()->GetName()); }. TGenericTable(); {SetType(""generic"");}. TGenericTable(const char* structName, const char* name); Create TGenericTable by C structure name provided. char * GetTable(Int_t i = 0) const; { return ((char *)GetArray())+i*GetRowSize();}. TTableDescriptor * GetTableDescriptors() const; { return GetDescriptorPointer();}. TTableDescriptor * GetRowDescriptors() const; { return GetDescriptorPointer();}. char & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); return *GetTable(i); }. const char & operator[](Int_t i) const; { assert(i>=0 && i < GetNRows()); return *((const char *)(GetTable(i))); }. iterator begin(); { return ((const TGenericTable *)this)->begin();}. iterator begin() const; { return GetNRows() ? iterator(*this, *GetTable(0)):end();}. iterator end(); { return ((const TGenericTable *)this)->end(); }. iterator end() const; {Long_t i = GetNRows(); return i? iterator(*this, *GetTable(i)):iterator(*this);}. » Last changed: root/table:$Id: TGenericTable.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2010-09-23 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenericTable.html:18272,assert,assert,18272,root/html528/TGenericTable.html,https://root.cern,https://root.cern/root/html528/TGenericTable.html,2,['assert'],['assert']
Testability,"e table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. ~TGenericTable(); destructor. TTableDescriptor * GetDescriptorPointer() const; { return fColDescriptors;}. void SetDescriptorPointer(TTableDescriptor* list); { fColDescriptors = list;}. void SetGenericType(); { TTable::SetType(GetDescriptorPointer()->GetName()); }. TGenericTable(); {SetType(""generic"");}. TGenericTable(const char* structName, const char* name); Create TGenericTable by C structure name provided. char * GetTable(Int_t i = 0) const; { return ((char *)GetArray())+i*GetRowSize();}. TTableDescriptor * GetTableDescriptors() const; { return GetDescriptorPointer();}. TTableDescriptor * GetRowDescriptors() const; { return GetDescriptorPointer();}. char & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); return *GetTable(i); }. const char & operator[](Int_t i) const; { assert(i>=0 && i < GetNRows()); return *((const char *)(GetTable(i))); }. iterator begin(); { return ((const TGenericTable *)this)->begin();}. iterator begin() const; { return GetNRows() ? iterator(*this, *GetTable(0)):end();}. iterator end(); { return ((const TGenericTable *)this)->end(); }. iterator end() const; {Long_t i = GetNRows(); return i? iterator(*this, *GetTable(i)):iterator(*this);}. » Last changed: root/table:$Id: TGenericTable.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGenericTable.html:18372,assert,assert,18372,root/html530/TGenericTable.html,https://root.cern,https://root.cern/root/html530/TGenericTable.html,2,['assert'],['assert']
Testability,"e table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. ~TGenericTable(); destructor. TTableDescriptor * GetDescriptorPointer() const; { return fColDescriptors;}. void SetDescriptorPointer(TTableDescriptor* list); { fColDescriptors = list;}. void SetGenericType(); { TTable::SetType(GetDescriptorPointer()->GetName()); }. TGenericTable(); {SetType(""generic"");}. TGenericTable(const char* structName, const char* name); Create TGenericTable by C structure name provided. char * GetTable(Int_t i = 0) const; { return ((char *)GetArray())+i*GetRowSize();}. TTableDescriptor * GetTableDescriptors() const; { return GetDescriptorPointer();}. TTableDescriptor * GetRowDescriptors() const; { return GetDescriptorPointer();}. char & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); return *GetTable(i); }. const char & operator[](Int_t i) const; { assert(i>=0 && i < GetNRows()); return *((const char *)(GetTable(i))); }. iterator begin(); { return ((const TGenericTable *)this)->begin();}. iterator begin() const; { return GetNRows() ? iterator(*this, *GetTable(0)):end();}. iterator end(); { return ((const TGenericTable *)this)->end(); }. iterator end() const; {Long_t i = GetNRows(); return i? iterator(*this, *GetTable(i)):iterator(*this);}. » Last changed: root/table:$Id: TGenericTable.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGenericTable.html:18372,assert,assert,18372,root/html532/TGenericTable.html,https://root.cern,https://root.cern/root/html532/TGenericTable.html,2,['assert'],['assert']
Testability,"e that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; ; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); ; # *the different layers are separated by the ``"",""`` *; ; #### 2. Define Training Strategy; ; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; ; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test error will be computed); ; ; #### 3. Define general DNN options; ; # We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; # Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; # In addition to input layout, batch layout and training strategy we add now:; ; # - Type of Loss function (e.g. CROSSENTROPY); # - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); # - Variable Transformation; # - Type of Architecture (e.g. CPU, GPU, Standard); ; # We can then book the DL method using the built option string; if useDL:; useDLGPU = ROOT.gSystem.GetFromPipe(""root-config --has-tmva-gpu"") == ""yes""; ; # Define DNN layout; # Define Training strategies; # one can catenate several training strategies; training1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,""; ""ConvergenceSteps=10,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:64314,test,test,64314,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,2,['test'],['test']
Testability,"e the child-side immediately. */; 5759 set_close_on_exec(fdin[1], conn, NULL); /* stdin write */; 5760 set_close_on_exec(fdout[0], conn, NULL); /* stdout read */; 5761 set_close_on_exec(fderr[0], conn, NULL); /* stderr read */; 5762 } else {; 5763 /* Child */; 5764 if (chdir(dir) != 0) {; 5765 mg_cry_internal(; 5766 conn, ""%s: chdir(%s): %s"", __func__, dir, strerror(ERRNO));; 5767 } else if (dup2(fdin[0], 0) == -1) {; 5768 mg_cry_internal(conn,; 5769 ""%s: dup2(%d, 0): %s"",; 5770 __func__,; 5771 fdin[0],; 5772 strerror(ERRNO));; 5773 } else if (dup2(fdout[1], 1) == -1) {; 5774 mg_cry_internal(conn,; 5775 ""%s: dup2(%d, 1): %s"",; 5776 __func__,; 5777 fdout[1],; 5778 strerror(ERRNO));; 5779 } else if (dup2(fderr[1], 2) == -1) {; 5780 mg_cry_internal(conn,; 5781 ""%s: dup2(%d, 2): %s"",; 5782 __func__,; 5783 fderr[1],; 5784 strerror(ERRNO));; 5785 } else {; 5786 struct sigaction sa;; 5787 ; 5788 /* Keep stderr and stdout in two different pipes.; 5789 * Stdout will be sent back to the client,; 5790 * stderr should go into a server error log. */; 5791 (void)close(fdin[0]);; 5792 (void)close(fdout[1]);; 5793 (void)close(fderr[1]);; 5794 ; 5795 /* Close write end fdin and read end fdout and fderr */; 5796 (void)close(fdin[1]);; 5797 (void)close(fdout[0]);; 5798 (void)close(fderr[0]);; 5799 ; 5800 /* After exec, all signal handlers are restored to their default; 5801 * values, with one exception of SIGCHLD. According to; 5802 * POSIX.1-2001 and Linux's implementation, SIGCHLD's handler; 5803 * will leave unchanged after exec if it was set to be ignored.; 5804 * Restore it to default action. */; 5805 memset(&sa, 0, sizeof(sa));; 5806 sa.sa_handler = SIG_DFL;; 5807 sigaction(SIGCHLD, &sa, NULL);; 5808 ; 5809 interp = conn->dom_ctx->config[CGI_INTERPRETER + cgi_config_idx];; 5810 if (interp == NULL) {; 5811 /* no interpreter configured, call the programm directly */; 5812 (void)execle(prog, prog, NULL, envp);; 5813 mg_cry_internal(conn,; 5814 ""%s: execle(%s): %s"",; 5815 __func__,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:170063,log,log,170063,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['log'],['log']
Testability,"e the child-side immediately. */; 5760 set_close_on_exec(fdin[1], conn, NULL); /* stdin write */; 5761 set_close_on_exec(fdout[0], conn, NULL); /* stdout read */; 5762 set_close_on_exec(fderr[0], conn, NULL); /* stderr read */; 5763 } else {; 5764 /* Child */; 5765 if (chdir(dir) != 0) {; 5766 mg_cry_internal(; 5767 conn, ""%s: chdir(%s): %s"", __func__, dir, strerror(ERRNO));; 5768 } else if (dup2(fdin[0], 0) == -1) {; 5769 mg_cry_internal(conn,; 5770 ""%s: dup2(%d, 0): %s"",; 5771 __func__,; 5772 fdin[0],; 5773 strerror(ERRNO));; 5774 } else if (dup2(fdout[1], 1) == -1) {; 5775 mg_cry_internal(conn,; 5776 ""%s: dup2(%d, 1): %s"",; 5777 __func__,; 5778 fdout[1],; 5779 strerror(ERRNO));; 5780 } else if (dup2(fderr[1], 2) == -1) {; 5781 mg_cry_internal(conn,; 5782 ""%s: dup2(%d, 2): %s"",; 5783 __func__,; 5784 fderr[1],; 5785 strerror(ERRNO));; 5786 } else {; 5787 struct sigaction sa;; 5788 ; 5789 /* Keep stderr and stdout in two different pipes.; 5790 * Stdout will be sent back to the client,; 5791 * stderr should go into a server error log. */; 5792 (void)close(fdin[0]);; 5793 (void)close(fdout[1]);; 5794 (void)close(fderr[1]);; 5795 ; 5796 /* Close write end fdin and read end fdout and fderr */; 5797 (void)close(fdin[1]);; 5798 (void)close(fdout[0]);; 5799 (void)close(fderr[0]);; 5800 ; 5801 /* After exec, all signal handlers are restored to their default; 5802 * values, with one exception of SIGCHLD. According to; 5803 * POSIX.1-2001 and Linux's implementation, SIGCHLD's handler; 5804 * will leave unchanged after exec if it was set to be ignored.; 5805 * Restore it to default action. */; 5806 memset(&sa, 0, sizeof(sa));; 5807 sa.sa_handler = SIG_DFL;; 5808 sigaction(SIGCHLD, &sa, NULL);; 5809 ; 5810 interp = conn->dom_ctx->config[CGI_INTERPRETER + cgi_config_idx];; 5811 if (interp == NULL) {; 5812 /* no interpreter configured, call the programm directly */; 5813 (void)execle(prog, prog, NULL, envp);; 5814 mg_cry_internal(conn,; 5815 ""%s: execle(%s): %s"",; 5816 __func__,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:170095,log,log,170095,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['log'],['log']
Testability,"e to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fArrayLimit;  ! limit for array size. when array bigger, its content converted to raw format ;  ; const char ** fBasicTypes;  ! pointer on list of basic types specific for currently connected SQL server ;  ; Bool_t fCanChangeConfig;  ! variable indicates can be basic configuration changed or not ;  ; Bool_t fIdsTableExists;  ! indicate if IdsTable exists ;  ; std::ofstream * fLogFile;  ! log file with SQL statements ;  ; Int_t fModifyCounter;  ! indicates how many changes was done with database tables ;  ; const char ** fOtherTypes;  ! pointer on list of other SQL types like TEXT or blob ;  ; Int_t fQuerisCounter;  ! how many query was applied ;  ; TSQLServer * fSQL;  ! interface to SQL database ;  ; TList * fSQLClassInfos;  ! list of SQL class infos ;  ; Int_t fSQLIOversion;  ! version of SQL I/O which is stored in configurations ;  ; Int_t fStmtCounter;  ! count numbers of active statements ;  ; TString fTablesType;  ! type, used in CREATE TABLE statements ;  ; Int_t fUseIndexes;  ! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal class tables, 3 - all tables ;  ; TString fUserName;  ! user name, used to access objects from database ;  ; Bool_t fUseSuffixes;  ! use suffixes in column names like fValue:Int_t or fObject:pointer ;  ; Int_t fUseTransactions;  ! use transaction statements for writing data into the tables ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra byt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:52058,log,log,52058,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['log'],['log']
Testability,"e to another axis. ;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to an axis. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t FindBin (const char *label);  Find bin number with label. ;  ; virtual Int_t FindBin (Double_t x);  Find bin number corresponding to abscissa x. ;  ; virtual Int_t FindBin (Double_t x) const;  ; virtual Int_t FindFixBin (const char *label) const;  Find bin number with label. ;  ; virtual Int_t FindFixBin (Double_t x) const;  Find bin number corresponding to abscissa x. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return center of bin. ;  ; virtual Double_t GetBinCenterLog (Int_t bin) const;  Return center of bin in log With a log-equidistant binning for a bin with low and up edges, the mean is : 0.5*(ln low + ln up) i.e. ;  ; const char * GetBinLabel (Int_t bin) const;  Return label for bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return low edge of bin. ;  ; virtual Double_t GetBinUpEdge (Int_t bin) const;  Return up edge of bin. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width. ;  ; virtual void GetCenter (Double_t *center) const;  Return an array with the center of all bins. ;  ; Bool_t GetCenterLabels () const;  ; Bool_t GetCenterTitle () const;  ; Bool_t GetDecimals () const;  ; Int_t GetFirst () const;  Return first bin on the axis i.e. ;  ; THashList * GetLabels () const;  ; Int_t GetLast () const;  Return last bin on the axis i.e. ;  ; virtual void GetLowEdge (Double_t *edge) const;  Return an array with the low edge of all bins. ;  ; TList * GetModifiedLabels () const;  ; Bool_t GetMoreLogLabels () const;  ; Int_t GetNbins () const;  ; Int_t GetNlabel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis.html:4313,log,log,4313,doc/master/classTAxis.html,https://root.cern,https://root.cern/doc/master/classTAxis.html,2,['log'],"['log', 'log-equidistant']"
Testability,"e to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program for the TVectorclass. vlazy.cxx; Verification program for lazy matrices. hworld.cxx; Small program showing basic graphics. guitest.cxx; Example usage of the ROOT GUI classes. gui viewer .cxx; Another ROOT GUI example program. Hello.cxx; Dancing text example. Aclock.cxx; Analog clock (a la X11 xclock). Tetris.cxx; The known Tetris game based on the ROOT graphics. stress.cxx; Important ROOT stress testing program. stress*.cxx; Stress testing of different ROOT classes. bench.cxx; STL and ROOT container test and benchmarking program. QpRandomDriver.cx x; Verification program for Quadratic programming classes in Quadp library. DrawTest.sh; Entry script to extensive TTree query test suite. dt_*; Scripts used by DrawTest.sh. The $ROOTSYS/test directory is a gold mine of root-wisdom nuggets, and we encourage you to explore and exploit it. These instructions will compile all programs in $ROOTSYS/test:; If you do not have write permission in the $ROOTSYS/test directory, copy the entire $ROOTSYS/test directory to your area. The Makefile is a useful example of how ROOT applications are linked and built. Edit the Makefile to specify your architecture by changing the ARCH variable, for example, on an SGI machine type:ARCH = sgikcc.; Now compile all programs:; % gmake; This will build several applications and shared libraries. We are especially interested in Event, stress, and guitest.; 20.2.1 Event - An Example of a ROOT Application; Eve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1076761,test,testing,1076761,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['testing']
Testability,"e to use the method TGMainFrame::SetWMSize(). This call tells the Window Manager that it should not resize the window. The option kFixedSize works only for embedded frames like TGCompositeFrame and derived classes (in combination with layout hints).; The TGVerticalFrame and TGHorizontalFrame are composite frames that lay out their child frames in vertical or horizontal way in the same order as they were added and according to their hints preferences.; The TGTransientFrame class defines transient windows that typically are used for dialogs. They extend and complete an interaction within a limited context. Always transient frames are displayed from another window or another dialog. They may appear because of a command button being activated or a menu item being selected. They may also present automatically when an additional input and the user attention are required by a certain condition.; The TGGroupFrame class presents a very convenient frame which surrounds visually a group of logically connected widgets: radio buttons, related check boxes, two or more functionally related controls. It is a composite frame with a border and a title. The title explains the purpose of the group and should be a noun or noun phrase. Here is an example taken from guitest.C:; groupFrame = new TGGroupFrame(tf,""Options"",kVerticalFrame);; groupFrame->SetTitlePos(TGGroupFrame::kLeft);; The second line sets the title position on the left. You can change it to be centered or right aligned if you use TGGroupFrame::kCenter or TGGroupFrame::kRight as a parameter. Be conservative in the use of borders because of the potential for clutter. Do not place them around single entry fields, single combo boxes, list boxes and groups of command buttons. The design of these widgets provides them with a border. The picture above provides kind of borders to avoid.; 25.6 Layout Management; The layout process is an integral part of any GUI. When you create a simple message window, laying out its few buttons and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1156581,log,logically,1156581,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logically']
Testability,"e usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrating the use of TMath::Permute can be run with: ;  ; file  principal.C;   Principal Components Analysis (PCA) example ;  ; file  principal.py;   Principal Components Analysis (PCA) example ;  ; file  quantiles.C;   Demo for quantiles ;  ; file  quasirandom.C;   Example of generating quasi-random numbers ;  ; file  Rolke.C;   Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  ; file  testrandom.C;   Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2. ;  ; file  tStudent.C;   Example macro describing the student t distribution ;  ; file  tStudent.py;   Example macro describing the student t distribution ;  ; file  TSVDUnfoldExample.C;   Data unfolding using Singular Value Decomposition ;  ; file  vavilov.C;   Test of the TMath::Vavilov distribution ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__math.html:5308,test,testrandom,5308,doc/master/group__tutorial__math.html,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html,2,['test'],"['test', 'testrandom']"
Testability,"e user is logged in on; 667 if (tty) {; 668 tty += 5; // remove ""/dev/""; 669 ; 670 TUtmpContent utmp;; 671 utmp.ReadUtmpFile();; 672 ; 673 STRUCT_UTMP *utmp_entry = utmp.SearchUtmpEntry(tty);; 674 if (utmp_entry) {; 675 if (utmp_entry->ut_host[0]) {; 676 TString disp;; 677 for (unsigned n = 0; (n < sizeof(utmp_entry->ut_host)) && utmp_entry->ut_host[n]; n++); 678 disp.Append(utmp_entry->ut_host[n]);; 679 if (disp.First(':') == kNPOS); 680 disp.Append("":0.0"");; 681 Setenv(""DISPLAY"", disp.Data());; 682 Warning(""SetDisplay"", ""DISPLAY not set, setting it to %s"", disp.Data());; 683 }; 684#ifndef UTMP_NO_ADDR; 685 else if (utmp_entry->ut_addr) {; 686 ; 687 struct sockaddr_in addr;; 688 addr.sin_family = AF_INET;; 689 addr.sin_port = 0;; 690 memcpy(&addr.sin_addr, &utmp_entry->ut_addr, sizeof(addr.sin_addr));; 691 memset(&addr.sin_zero[0], 0, sizeof(addr.sin_zero));; 692 struct sockaddr *sa = (struct sockaddr *) &addr; // input; 693 ; 694 char hbuf[NI_MAXHOST + 4];; 695 if (getnameinfo(sa, sizeof(struct sockaddr), hbuf, sizeof(hbuf), nullptr, 0, NI_NAMEREQD) == 0) {; 696 assert( strlen(hbuf) < NI_MAXHOST );; 697 strlcat(hbuf, "":0.0"", sizeof(hbuf));; 698 Setenv(""DISPLAY"", hbuf);; 699 Warning(""SetDisplay"", ""DISPLAY not set, setting it to %s"",; 700 hbuf);; 701 }; 702 }; 703#endif; 704 }; 705 }; 706#ifndef R__HAS_COCOA; 707 if (!gROOT->IsBatch() && !getenv(""DISPLAY"")) {; 708 Error(""SetDisplay"", ""Can't figure out DISPLAY, set it manually\n""; 709 ""In case you run a remote ssh session, restart your ssh session with:\n""; 710 ""=========> ssh -Y"");; 711 }; 712#endif; 713 }; 714}; 715 ; 716////////////////////////////////////////////////////////////////////////////////; 717/// Return system error string.; 718 ; 719const char *TUnixSystem::GetError(); 720{; 721 Int_t err = GetErrno();; 722 if (err == 0 && GetLastErrorString() != """"); 723 return GetLastErrorString();; 724 ; 725#if defined(R__SOLARIS) || defined (R__LINUX) || defined(R__AIX) || \; 726 defined(R__FBSD) || defined(R__OBSD)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:20896,assert,assert,20896,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['assert'],['assert']
Testability,"e values of ; . We call these values; ; . Determine from ; a set of at least five relevant; coordinates ; , using contrains, or; alternative:. Perform a Principal Component Analysis (using; TPrincipal), and use; to get a linear transformation; ; , so that; ; are constrained and linear independent. Perform a Principal Component Analysis on; ; , to get linear; indenpendent (among themselves, but not independent of; ; ) quantities . For each component ; make a mutlidimensional fit,; using ; as the variables, thus determing a set of; coefficents ; . To process data, using this parameterisation, do. Test wether the observation ; within the domain of; the parameterization, using the result from the Principal Component; Analysis. Determine ; as before. Detetmine ; as before. Use the result of the fit to determind ; . Transform back to ; from ; , using; the result from the Principal Component Analysis. Testing the parameterization. The class also provides functionality for testing the, over the; training sample, found parameterization; (TMultiDimFit::Fit). This is done by passing; the class a test sample of tuples of the form ; , where ; are the independent; variables, the known, dependent quantity, and is; the square error in ; (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every ; in the; test sample, and. is evaluated. The relative error over the test sample. should not be to low or high compared to from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representive of; the problem. A large difference in the reduced over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use Minuit; [4] to further improve the fit, using the test sample. Christian Holm; November 2000, NBI. Bibliography; 1. Philip R. Bevington and D. Keith Robinson.; Data Reduction and Error Analysis for the Physical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:11712,test,testing,11712,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['test'],['testing']
Testability,"e values of par, it is better to call; TMath::Gaus(x,par,sqrt(par),kTRUE). /*. */. Double_t PoissonI(Double_t x, Double_t par); compute the Poisson distribution function for (x,par); This is a non-smooth function.; This function is equivalent to ROOT::Math::poisson_pdf. /*. */. Double_t Prob(Double_t chi2, Int_t ndf); Computation of the probability for a certain Chi-squared (chi2); and number of degrees of freedom (ndf). Calculations are based on the incomplete gamma function P(a,x),; where a=ndf/2 and x=chi2/2. P(a,x) represents the probability that the observed Chi-squared; for a correct model should be less than the value chi2. The returned probability corresponds to 1-P(a,x),; which denotes the probability that an observed Chi-squared exceeds; the value chi2 by chance, even for a correct model. --- NvE 14-nov-1998 UU-SAP Utrecht. Double_t KolmogorovProb(Double_t z); Calculates the Kolmogorov distribution function,. /*; ; */. which gives the probability that Kolmogorov's test statistic will exceed; the value z assuming the null hypothesis. This gives a very powerful; test for comparing two one-dimensional distributions.; see, for example, Eadie et al, ""statistocal Methods in Experimental; Physics', pp 269-270). This function returns the confidence level for the null hypothesis, where:; z = dn*sqrt(n), and; dn is the maximum deviation between a hypothetical distribution; function and an experimental distribution with; n events. NOTE: To compare two experimental distributions with m and n events,; use z = sqrt(m*n/(m+n))*dn. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than 10^-15 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1. This function was translated by Rene Brun from PROBKL in CERNLIB. Double_t KolmogorovTest(Int_t na, const Double_t* a, Int_t nb, const Double_t* b, Option_t* option); Statistical test whether two one-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:16324,test,test,16324,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,6,['test'],['test']
Testability,"e values; ; .; ; Determine from ; a set of at least five relevant; coordinates ; , using contrains, or; alternative:. Perform a Principal Component Analysis (using; TPrincipal), and use; to get a linear transformation; ; , so that; ; are constrained and linear independent.; ; Perform a Principal Component Analysis on; ; , to get linear; indenpendent (among themselves, but not independent of; ; ) quantities . For each component ; make a mutlidimensional fit,; using ; as the variables, thus determing a set of; coefficents ; .; . To process data, using this parameterisation, do; ; Test wether the observation ; within the domain of; the parameterization, using the result from the Principal Component; Analysis.; ; Determine ; as before.; ; Detetmine ; as before.; ; Use the result of the fit to determind ; .; ; Transform back to ; from ; , using; the result from the Principal Component Analysis.; . Testing the parameterization; . The class also provides functionality for testing the, over the; training sample, found parameterization; (TMultiDimFit::Fit). This is done by passing; the class a test sample of tuples of the form ; , where ; are the independent; variables, the known, dependent quantity, and is; the square error in ; (TMultiDimFit::AddTestRow).; ; The parameterization is then evaluated at every ; in the; test sample, and; . is evaluated. The relative error over the test sample; . should not be to low or high compared to from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representive of; the problem. A large difference in the reduced over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced.; ; It's possible to use Minuit; [4] to further improve the fit, using the test sample.; . Christian Holm; November 2000, NBI; . Bibliography; 1. Philip R. Bevington and D. Keith Robinson.; Data Reduction and Error Analysis f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:11908,test,testing,11908,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['test'],['testing']
Testability,"e very good reason that the same object could be a member of more than one collection. Object ownership is important when it comes to deleting objects; if nobody owns the object it could end up as wasted memory (i.e. a memory leak) when no longer needed. If a collection is deleted, its objects are not. The user can force a collection to delete its objects, but that is the user’s choice.; 16.1.2 Determining the Class of Contained Objects; Most containers may hold heterogeneous collections of objects and then it is left to the user to correctly cast the TObject pointer to the right class. Casting to the wrong class will give wrong results and may well crash the program! Therefore, the user has to be very careful. Often a container only contains one class of objects, but if it really contains a mixture, it is possible to ask each object about its class using the InheritsFrom method.; For example if myObject is a TObject pointer:; if (myObject->InheritsFrom(""TParticle"") {; printf(""myObject is a TParticlen"");; }; As the name suggests, this test works even if the object is a subclass of TParticle. The member function IsA() can be used instead of InheritsFrom to make the test exact. The InheritsFrom and IsA methods use the extensive Run Time Type Information (RTTI) available via the ROOT meta-classes.; 16.1.3 Types of Collections; The ROOT system implements the following basic types of collections: unordered collections, ordered collections and sorted collections. Next figure shows the inheritance hierarchy for the primary collection classes. All primary collection classes derive from the abstract base class TCollection. The inheritance hierarchy of the primary collection classes. 16.1.4 Ordered Collections (Sequences); Sequences are collections that are externally ordered because they maintain internal elements according to the order in which they were added. The following sequences are available:. TList; THashList; TOrdCollection; TObjArray; TClonesArray. The TOrdCollect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:842124,test,test,842124,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"e vs. number of daughters is produced. ; Definition at line 3811 of file TGeoManager.cxx. ◆ CheckOverlaps(). void TGeoManager::CheckOverlaps ; (; Double_t ; ovlp = 0.1, . Option_t * ; option = """" . ). Check all geometry for illegal overlaps within a limit OVLP. ; Definition at line 3869 of file TGeoManager.cxx. ◆ CheckPath(). Bool_t TGeoManager::CheckPath ; (; const char * ; path); const. Check if a geometry path is valid without changing the state of the current navigator. ; Definition at line 1715 of file TGeoManager.cxx. ◆ CheckPoint(). void TGeoManager::CheckPoint ; (; Double_t ; x = 0, . Double_t ; y = 0, . Double_t ; z = 0, . Option_t * ; option = """", . Double_t ; safety = 0. . ). Classify a given point. See TGeoChecker::CheckPoint(). ; Definition at line 3770 of file TGeoManager.cxx. ◆ CheckShape(). void TGeoManager::CheckShape ; (; TGeoShape * ; shape, . Int_t ; testNo, . Int_t ; nsamples, . Option_t * ; option . ). Test for shape navigation methods. ; Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Definition at line 3783 of file TGeoManager.cxx. ◆ Class(). static TClass * TGeoManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 605 of file TGeoManager.h. ◆ CleanGarbage(). void TGeoManager::CleanGarbage ; (; ). Clean temporary volumes and shapes from garbage collection. ; Definition at line 1627 of file TGeoManager.cxx. ◆ ClearAttributes(). void TGeoManager::ClearAttributes ; (; ). Reset all attributes to default ones. ; Default attributes for visualization are those defined before",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:76733,test,test,76733,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['test'],['test']
Testability,"e when; 3119/// reading more branches (or the full entry).; 3120///; 3121/// When using SortBasketsByEntry the baskets with the lowest starting; 3122/// entry are written first. (i.e. the baskets are sorted by the; 3123/// index/number of the first entry they contain). This means that on; 3124/// the file the baskets will be in the order in which they will be; 3125/// needed when reading the whole tree sequentially.; 3126///; 3127/// For examples of CloneTree, see tutorials:; 3128///; 3129/// - copytree.C:; 3130/// A macro to copy a subset of a TTree to a new TTree.; 3131/// The input file has been generated by the program in; 3132/// $ROOTSYS/test/Event with: Event 1000 1 1 1; 3133///; 3134/// - copytree2.C:; 3135/// A macro to copy a subset of a TTree to a new TTree.; 3136/// One branch of the new Tree is written to a separate file.; 3137/// The input file has been generated by the program in; 3138/// $ROOTSYS/test/Event with: Event 1000 1 1 1; 3139 ; 3140TTree* TTree::CloneTree(Long64_t nentries /* = -1 */, Option_t* option /* = """" */); 3141{; 3142 // Options; 3143 bool fastClone = false;; 3144 ; 3145 TString opt = option;; 3146 opt.ToLower();; 3147 if (opt.Contains(""fast"")) {; 3148 fastClone = true;; 3149 }; 3150 ; 3151 // If we are a chain, switch to the first tree.; 3152 if ((fEntries > 0) && (LoadTree(0) < 0)) {; 3153 // FIXME: We need an error message here.; 3154 return nullptr;; 3155 }; 3156 ; 3157 // Note: For a tree we get the this pointer, for; 3158 // a chain we get the chain's current tree.; 3159 TTree* thistree = GetTree();; 3160 ; 3161 // We will use this to override the IO features on the cloned branches.; 3162 ROOT::TIOFeatures features = this->GetIOFeatures();; 3163 ;; 3164 ; 3165 // Note: For a chain, the returned clone will be; 3166 // a clone of the chain's first tree.; 3167 TTree* newtree = (TTree*) thistree->Clone();; 3168 if (!newtree) {; 3169 return nullptr;; 3170 }; 3171 ; 3172 // The clone should not delete any objects allocated by SetAdd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:125851,test,test,125851,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['test'],['test']
Testability,"e || type || value || error +/-. 0 || x || free ||-1.821e-05 || 2; 1 || y || free ||-1.208e-05 || 2.236; 2 || z || free || 6.224e-06 || 2.449; 3 || w || free ||-3.047e-05 || 1. MnUserCovariance:. 4 1 2 2.70022e-18; 1 5 3 1.87754e-17; 2 3 6 2.29467e-17; 2.70022e-18 1.87754e-17 2.29467e-17 1. MnUserCovariance parameter correlations:. 1 0.223607 0.408248 1.35011e-18; 0.223607 1 0.547723 8.39663e-18; 0.408248 0.547723 1 9.36796e-18; 1.35011e-18 8.39663e-18 9.36796e-18 1. MnGlobalCorrelationCoeff:. 0.408248; 0.547723; 0.621261; 0; 3.3 CVS code repository; How to check out (–in) code from the CVS code repository is described at the M homepage @bib-C++MINUIT. To get the source code from the CVS repository one needs to do:; Kerberos IV authorization:; $ setenv CVSROOT :kserver:SEAL.cvs.cern.ch:/cvs/SEAL. $ cvs co MathLibs/Minuit; Anonymous read-only access (if it’s enabled by the librarian, see details):; $ setenv CVSROOT :pserver:anonymous@SEAL.cvs.cern.ch:/cvs/SEAL. $ cvs login; (Logging in to :pserver:anonymous@seal.cvs.cern.ch:2401/cvs/SEAL) CVS password:cvs; $ cvs co MathLibs/Minuit; (If you want to check out a tagged version SEAL_x_x_x of MINUIT, then do; $ cvs co -r SEAL\_x\_x\_x MathLibs/Minuit ); 3.4 Create a tar.gz from CVS; Once the sources are checked out from the CVS code repository,. change to the directory:; $ cd MathLibs/Minuit; run autogen:; $ ./autogen; create a new directory:; $ cd ..; $ mkdir Minuit-BUILD; $ cd Minuit-BUILD/; run configure:; $ ../Minuit/configure; create the tar.gz:; $ make dist. This will create a Minuit-x.x.x.tar.gz which can be distributed and used as described above.; 3.5 M versions; The version numbers of M follow the release numbers of the SEAL project @bib-SEAL at CERN @bib-CERN.; 3.5.1 From to; The program is entirely written in standard portable . M does not depend on any external library. In its minimal usage the user must only provide an implementation of the FCNBase class to M and parameters and uncertainties in form of std::v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:29598,log,login,29598,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['log'],['login']
Testability,"e"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; any node, hence this tree quality testing will stop there, hence test; the pruned tree (while the full tree is still in place for normal/later use). void CheckEventWithPrunedTree(const TMVA::Event* ) const; pass a single validation event throught a pruned decision tree; on the way down the tree, fill in all the ""intermediate"" information; that would normally be there from training. Double_t GetSumWeights(const TMVA::DecisionTree::EventConstList* validationSample) const; calculate the normalization factor for a pruning validation sample. UInt_t CountLeafNodes(TMVA::Node* n = __null); return the number of terminal nodes in the sub-tree below Node n. void DescendTree(TMVA::Node* n = __null); descend a tree to find all its leaf nodes. void PruneNode(TMVA::DecisionTreeNode* node); prune away the subtree below the node. void PruneNodeInPlace(TMVA::DecisionTreeNode* node); prune a node temporaily (without actually deleting its decendants; which allows testing the pruned tree quality for many different; pruning stages without ""touching"" the tree. TMVA::Node* GetNode(ULong_t sequence, UInt_t depth); retrieve node from the tree. Its position (up to a maximal tree depth of 64); is coded as a sequence of left-right moves starting from the root, coded as; 0-1 bit patterns stored in the ""long-integer"" (i.e. 0:left ; 1:right. void GetRandomisedVariables(Bool_t* useVariable, UInt_t* variableMap, UInt_t& nVars). Double_t TrainNodeFast(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node); Decide how to split a node using one of the variables that gives; the best separation of signal/background. In order to do this, for each; variable a scan of the different cut values in a grid (grid = fNCuts) is; performed and the resulting separation gains are compared.; in addition to the individual variables, one can also ask for a fisher; discriminant being built out of (some) of the variables and used as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTree.html:12842,test,testing,12842,root/html602/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTree.html,2,['test'],['testing']
Testability,"e& instance(); Return reference to singleton instance. void saveState(); Save current state of message service. void restoreState(); Restore last saved state of message service. Bool_t isActive(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t id); { return _streams[id] ; }. Int_t numStreams() const; { return _streams.size() ; }. void reset(); { cleanup() ; }. void setGlobalKillBelow(RooFit::MsgLevel level); { _globMinLevel = level ; }. RooFit::MsgLevel globalKillBelow() const; { return _globMinLevel ; }. void showPid(Bool_t flag); { _showPid = flag ; }. Bool_t silentMode() const; Print level support for RooFit-related messa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMsgService.html:11047,log,log,11047,root/html528/RooMsgService.html,https://root.cern,https://root.cern/root/html528/RooMsgService.html,6,['log'],['log']
Testability,"e( build_loc, libname ) );; 3729 fakeMain += ""_ACLiC_main"";; 3730 fakeMain += extension;; 3731 std::ofstream fakeMainFile( fakeMain, std::ios::out );; 3732 fakeMainFile << ""// File Automatically generated by the ROOT Script Compiler ""; 3733 << std::endl;; 3734 fakeMainFile << ""int main(char*argc,char**argvv) {};"" << std::endl;; 3735 fakeMainFile.close();; 3736 // We could append this fake main routine to the compilation line.; 3737 // But in this case compiler may output the name of the dictionary file; 3738 // and of the fakeMain file while it compiles it. (this would be useless; 3739 // confusing output).; 3740 // We could also the fake main routine to the end of the dictionary file; 3741 // however compilation would fail if a main is already there; 3742 // (like stress.cxx); 3743 // dict.Append("" "").Append(fakeMain);; 3744 TString exec;; 3745 AssignAndDelete( exec, ConcatFileName( build_loc, libname ) );; 3746 exec += ""_ACLiC_exec"";; 3747 testcmd.ReplaceAll(""$SourceFiles"",""-D__ACLIC__ \""$SourceFiles\"""");; 3748 testcmd.ReplaceAll(""$SourceFiles"",dict);; 3749 testcmd.ReplaceAll(""$ObjectFiles"",""\""$ObjectFiles\"""");; 3750 testcmd.ReplaceAll(""$ObjectFiles"",dictObj);; 3751 testcmd.ReplaceAll(""$IncludePath"",includes);; 3752 testcmd.ReplaceAll(""$ExeName"",exec);; 3753 testcmd.ReplaceAll(""$LinkedLibs"",linkLibraries);; 3754 testcmd.ReplaceAll(""$BuildDir"",build_loc);; 3755 if (mode==kDebug); 3756 testcmd.ReplaceAll(""$Opt"",fFlagsDebug);; 3757 else; 3758 testcmd.ReplaceAll(""$Opt"",fFlagsOpt);; 3759 ; 3760#ifdef WIN32; 3761 R__FixLink(testcmd);; 3762 testcmd.ReplaceAll(""-std="", ""-std:"");; 3763#endif; 3764 ; 3765 // ======= Build the library; 3766 if (result) {; 3767 TString cmdAllowUnresolved = cmd;; 3768#ifdef R__MACOSX; 3769 // Allow linking to succeed despite the missing symbols.; 3770 cmdAllowUnresolved.ReplaceAll(""-dynamiclib"", ""-dynamiclib -Wl,-w -Wl,-undefined,dynamic_lookup"");; 3771#endif; 3772 if (verboseLevel > 3 && withInfo) {; 3773 ::Info(""ACLiC"",""compiling the dictiona",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:127259,test,testcmd,127259,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['test'],['testcmd']
Testability,"e() const; Bool_tisValidIndex(Int_t index) const; Bool_tisValidLabel(const char* label) const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; const RooCatType*lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tnumTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_toperator!=(Int_t index); Bool_toperator!=(const char* label); Bool_toperator!=(const RooAbsArg& other); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(Int_t index) const; Bool_toperator==(const char* label) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCategory.html:9341,test,testArg,9341,root/html526/RooAbsCategory.html,https://root.cern,https://root.cern/root/html526/RooAbsCategory.html,2,['test'],['testArg']
Testability,"e() const; Bool_tisValidIndex(Int_t index) const; Bool_tisValidLabel(const char* label) const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; const RooCatType*lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tnumTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_toperator!=(Int_t index); Bool_toperator!=(const char* label); Bool_toperator!=(const RooAbsArg& other); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(Int_t index) const; Bool_toperator==(const char* label) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCategory.html:9509,test,testArg,9509,root/html530/RooAbsCategory.html,https://root.cern,https://root.cern/root/html530/RooAbsCategory.html,1,['test'],['testArg']
Testability,"e());; ; // Dataset d is now a dataset with one observable (x) with 1000 entries and a sum of weights of ~430K; wdata.Print();; ; // U n b i n n e d M L f i t t o w e i g h t e d d a t a; // ---------------------------------------------------------------; ; // Construction quadratic polynomial pdf for fitting; RooRealVar a0(""a0"", ""a0"", 1);; RooRealVar a1(""a1"", ""a1"", 0, -1, 1);; RooRealVar a2(""a2"", ""a2"", 1, 0, 10);; RooPolynomial p2(""p2"", ""p2"", x, RooArgList(a0, a1, a2), 0);; ; // Fit quadratic polynomial to weighted data; ; // NOTE: A plain Maximum likelihood fit to weighted data does in general; // NOT result in correct error estimates, unless individual; // event weights represent Poisson statistics themselves.; //; // Fit with 'wrong' errors; std::unique_ptr<RooFitResult> r_ml_wgt{p2.fitTo(wdata, Save(), PrintLevel(-1))};; ; // A first order correction to estimated parameter errors in an; // (unbinned) ML fit can be obtained by calculating the; // covariance matrix as; //; // V' = V C-1 V; //; // where V is the covariance matrix calculated from a fit; // to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; // matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; // (i.e. the weights are applied squared); //; // A fit in this mode can be performed as follows:; ; std::unique_ptr<RooFitResult> r_ml_wgt_corr{p2.fitTo(wdata, Save(), SumW2Error(true), PrintLevel(-1))};; ; // P l o t w e i g h e d d a t a a n d f i t r e s u l t; // ---------------------------------------------------------------; ; // Construct plot frame; RooPlot *frame = x.frame(Title(""Unbinned ML fit, binned chi^2 fit to weighted data""));; ; // Plot data using sum-of-weights-squared error rather than Poisson errors; wdata.plotOn(frame, DataError(RooAbsData::SumW2));; ; // Overlay result of 2nd order polynomial fit to weighted data; p2.plotOn(frame);; ; // ML Fit of pdf to equivalent unweighted dataset; // ------------------------------------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8C.html:2799,log,logL,2799,doc/master/rf403__weightedevts_8C.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8C.html,4,['log'],"['log', 'logL']"
Testability,"e(); default constructor. Node(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. Node(const TMVA::Node& n); copy constructor, make sure you don't just copy the poiter to the node, but; that the parents/daugthers are initialized to 0 (and set by the copy; constructors of the derived classes. ~Node(); node destructor. int GetCount(); retuns the global number of instantiated nodes. Int_t CountMeAndAllDaughters() const; recursively go through the part of the tree below this node and count all daughters. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = 262656); read attributes from XML. Node* CreateNode() const. Bool_t GoesRight(const TMVA::Event& ) const; test event if i{ decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. Node* GetLeft() const; test event if it is equal to the event that ""makes the node"" (just for the ""search tree""; return pointer to the left/right daughter or parent node. { return fLeft; }. Node* GetRight() const; { return fRight; }. Node* GetParent() const; { return fParent; }. void SetLeft(TMVA::Node* l); set pointer to the left/right daughter or parent node. { fLeft = l;}. void SetRight(TMVA::Node* r); { fRight = r;}. void SetParent(TMVA::Node* p); { fParent = p;}. void Print(ostream& os) const; printout of the node. void PrintRec(ostream& os) const; recursive printout of the node and it daughters. void AddAttributesToNode(void* node) const. void AddContentToNode(stringstream& s) const. void SetDepth(UInt_t d); Set depth, layer of the where the node is within the tree, seen from the top (root). {fDepth=d;}. UInt_t GetDepth() const; Return depth, layer of the where the node is within the tree, seen from the top (root). {return fDepth;}. void SetPos(char s); set node position, i.e, the node is a left (l) or right (r) daugther. {fPos=s;}. char GetPos() const; Return th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Node.html:3700,test,test,3700,root/html602/TMVA__Node.html,https://root.cern,https://root.cern/root/html602/TMVA__Node.html,1,['test'],['test']
Testability,"e(); default constructor. Node(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. Node(const TMVA::Node& n); copy constructor, make sure you don't just copy the poiter to the node, but; that the parents/daugthers are initialized to 0 (and set by the copy; constructors of the derived classes. ~Node(); node destructor. int GetCount(); retuns the global number of instantiated nodes. Int_t CountMeAndAllDaughters() const; recursively go through the part of the tree below this node and count all daughters. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = 262657); read attributes from XML. Node* CreateNode() const. Bool_t GoesRight(const TMVA::Event& ) const; test event if i{ decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. Node* GetLeft() const; test event if it is equal to the event that ""makes the node"" (just for the ""search tree""; return pointer to the left/right daughter or parent node. { return fLeft; }. Node* GetRight() const; { return fRight; }. Node* GetParent() const; { return fParent; }. void SetLeft(TMVA::Node* l); set pointer to the left/right daughter or parent node. { fLeft = l;}. void SetRight(TMVA::Node* r); { fRight = r;}. void SetParent(TMVA::Node* p); { fParent = p;}. void Print(ostream& os) const; printout of the node. void PrintRec(ostream& os) const; recursive printout of the node and it daughters. void AddAttributesToNode(void* node) const. void AddContentToNode(stringstream& s) const. void SetDepth(UInt_t d); Set depth, layer of the where the node is within the tree, seen from the top (root). {fDepth=d;}. UInt_t GetDepth() const; Return depth, layer of the where the node is within the tree, seen from the top (root). {return fDepth;}. void SetPos(char s); set node position, i.e, the node is a left (l) or right (r) daugther. {fPos=s;}. char GetPos() const; Return th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Node.html:3708,test,test,3708,root/html604/TMVA__Node.html,https://root.cern,https://root.cern/root/html604/TMVA__Node.html,1,['test'],['test']
Testability,"e(...).; It takes into account whether the number of events is given explicitly; or whether it should use the expected number of events. It also takes; into account the option to generate a binned data set (ie RooDataHist). void ClearCache(); clear the cache obtained from the pdf used for speeding the toy and global observables generation; needs to be called every time the model pdf (fPdf) changes. ToyMCSampler(); Proof constructor. Do not use. ToyMCSampler(RooStats::TestStatistic& ts, Int_t ntoys). void SetAlwaysUseMultiGen(Bool_t flag); { fgAlwaysUseMultiGen = flag ; }. void SetUseMultiGen(Bool_t flag); { fUseMultiGen = flag ; }. RooAbsData* GenerateToyData(RooArgSet& paramPoint) const; generates toy data; without weight. SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Extended interface to append to sampling distribution more samples. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; { return fTestStat; }. Double_t ConfidenceLevel() const; { return 1. - fSize; }. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); { return fNToys; }. void SetNToys(const Int_t ntoy); { fNToys = ntoy; }. void SetNEventsPerToy(const Int_t nevents); Forces n events even for extended PDFs. Set NEvents=0 to; use the Poisson distributed events from the extended PDF. void SetParametersForTestStat(const RooArgSet& nullpoi); specify the values of parameters used when evaluating test statistic. void SetPdf(RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. { fPdf = &pdf; ClearCache(); }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. { fPriorNuisance = pdf; }. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the parameters). { fNuisancePars = &np; }.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ToyMCSampler.html:7454,test,test,7454,root/html532/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html532/RooStats__ToyMCSampler.html,1,['test'],['test']
Testability,"e(0.2);; 637 ; 638 TDatime da(2003,02,28,12,00,00);; 639 axis->SetTimeOffset(da.Convert());; 640 axis->SetLabelOffset(0.15);; 641 axis->SetTimeFormat(""#splitline{%Y}{%d/%m}"");; 642 axis->Draw();; 643 return c1;; 644}; 645End_Macro; 646 ; 647 ; 648The following example shows time axis on a TGraph:; 649 ; 650Begin_Macro(source); 651{; 652 TDatime da1(2008,02,28,15,52,00);; 653 TDatime da2(2008,02,28,15,53,00);; 654 ; 655 double x[2],y[2];; 656 ; 657 y[0] = 1.;; 658 y[1] = 2.;; 659 x[0] = da1.Convert();; 660 x[1] = da2.Convert();; 661 ; 662 TGraph mgr(2,x,y);; 663 mgr.SetMarkerStyle(20);; 664 ; 665 mgr.Draw(""apl"");; 666 mgr.GetXaxis()->SetTimeDisplay(1);; 667 mgr.GetXaxis()->SetNdivisions(-503);; 668 mgr.GetXaxis()->SetTimeFormat(""%Y-%m-%d %H:%M"");; 669 mgr.GetXaxis()->SetTimeOffset(0,""gmt"");; 670}; 671End_Macro; 672 ; 673The following example compares what the system time function `gmtime`; 674and `localtime` give with what gives `TGaxis`. It can be used; 675as referenced test to check if the time option of `TGaxis` is working properly.; 676 ; 677Begin_Macro(source); 678../../../tutorials/graphs/timeonaxis3.C; 679End_Macro; 680 ; 681 ; 682The following macro illustrates the use, with histograms axis, of the time mode on the axis; 683with different time intervals and time formats.; 684 ; 685Begin_Macro(source); 686../../../tutorials/graphs/timeonaxis.C; 687End_Macro; 688 ; 689*/; 690 ; 691////////////////////////////////////////////////////////////////////////////////; 692/// TGaxis default constructor.; 693 ; 694TGaxis::TGaxis(): TLine(), TAttText(11,0,1,62,0.040); 695{; 696 ; 697 fGridLength = 0.;; 698 fLabelOffset = 0.005;; 699 fLabelSize = 0.040;; 700 fLabelFont = 62;; 701 fLabelColor = 1;; 702 fTickSize = 0.030;; 703 fTitleOffset = 1;; 704 fTitleSize = fLabelSize;; 705 fChopt = """";; 706 fName = """";; 707 fTitle = """";; 708 fTimeFormat = """";; 709 fFunctionName= """";; 710 fFunction = nullptr;; 711 fAxis = nullptr;; 712 fNdiv = 0;; 713 fNModLabs = 0;; 714 fModLabs = null",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:24298,test,test,24298,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['test'],['test']
Testability,"e(TH1* sig, TH1* bkg, TH1* any = 0); Double_tGetEffSForEffBof(Double_t effBref, Double_t& effSerr); TH1*GetMvaBpdf(); TH1*GetMvaSpdf(); TH1*GetPurity(Int_t nStot, Int_t nBtot); TH1D*GetROC(); Double_tGetROCIntegral(); Double_tGetSignalReferenceCut(); TH1*GetSignificance(Int_t nStot, Int_t nBtot); TMVA::ROCCalc&operator=(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(TH1* mvaS, TH1* mvaB, TString nameSuffix = """"). private:. Double_tGetEffForRoot(Double_t theCut); TMVA::MsgLogger&Log() const; Double_tRoot(Double_t). Data Members; private:. Double_tfAbsTolabsolute tolerance deviation; Int_tfCutOrientation+1 if larger mva value means more signal like, -1 otherwise; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; UInt_tfNbins; Double_tfNevtSnumber of signal events (used in error calculation); TH1*fPurity; Double_tfSignalCutMVA cut value for last demanded background rejection or signal efficiency; TH1*fSignificance; TSpline*fSplB; TSpline*fSplS; TSpline*fSpleffBvsS; TSpline*fSplmvaCumBspline of cumulated mva distributions; TSpline*fSplmvaCumS; TStringfSuffix; Bool_tfUseSplines; Float_tfXmaxmin and max of the mva distribution ; Float_tfXmin; TH1*fmvaBthe input mva distributions; TH1*fmvaBcumul; TH1*fmvaBpdfthe normalized (and rebinned) input mva distributions; TH1*fmvaS; TH1*fmvaScumul; TH1*fmvaSpdf; Int_tfnBtot; Int_tfnStot. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROCCalc(TH1* mvaS, TH1* mvaB, TString nameSuffix = """"). void ApplySignalAndBackgroundStyle(TH1* sig, TH1* bkg, TH1* any = 0); Int_t c_Canvas = TColor::GetColor( ""#f0f0f0"" );; Int_t c_FrameFill = TColor::GetColor( ""#fffffd"" );; Int_t c_TitleBox = TColor::GetColor( ""#5D6B7D"" );; Int_t c_TitleBorder = TColor::GetColor( ""#7D8B9D"" );; Int_t c_TitleText = TColor::GetColor( ""#FFFFFF"" );. ~ROCCalc(); destructor. TH1D* GetROC(); get the ROC curve. Double_t GetROCIntegral(); code to compute the ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__ROCCalc.html:1101,log,logger,1101,root/html534/TMVA__ROCCalc.html,https://root.cern,https://root.cern/root/html534/TMVA__ROCCalc.html,1,['log'],['logger']
Testability,"e(file, ""MyTree"");. Compiling; You can also have your code compiled into a shared library, simply by adding a ""+"" behind the file name:; .x printTree.C+(file, ""MyTree"");. In the above example this will fail: we need to add the #includes for he compiler to be able to understand the code, while the interpreter has a lot of contextual knowledge and can automatically include headers and load libraries.; Expressions; You saw that with "".x"", ROOT prints the result of running the function while when using "".L"" and calling th function it does not. The way to trigger the printing of expression results is by omitting the trailing semicolon:; TMath::Gaus(1., 1., 1.). will print; (Double_t) 1.000000e+00. Help!; For TMath::Gaus() as well as for any other ROOT class or function, please check ROOT's reference guide.; Try to find the documentation for TTree::Print()!; We have now covered the basics - let's look at the tree's data!; . ‹ 1. Extracting an object from a TFile; up; 4. Histogramming ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/2-running-code-root.html:4359,test,tests,4359,d/2-running-code-root.html,https://root.cern,https://root.cern/d/2-running-code-root.html,1,['test'],['tests']
Testability,"e) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", ymax);; 7245 return 0;; 7246 }; 7247 }; 7248 else {; 7249 if (ymin > 0) {; 7250 ymin = 0;; 7251 ymax *= 2;; 7252 } else if (ymin < 0) {; 7253 ymax = 0;; 7254 ymin *= 2;; 7255 } else {; 7256 ymin = 0;; 7257 ymax = 1;; 7258 }; 7259 }; 7260 }; 7261 ; 7262 // In some cases, mainly because of precision issues, ymin and ymax could almost equal.; 7263 if (TMath::AreEqualRel(ymin,ymax,1E-15)) {; 7264 ymin = ymin*(1-1E-14);; 7265 ymax = ymax*(1+1E-14);; 7266 }; 7267 ; 7268 // take into account normalization factor; 7269 Hparam.allchan = allchan;; 7270 Double_t factor = allchan;; 7271 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 7272 if (allchan) factor /= allchan;; 7273 if (factor == 0) factor = 1;; 7274 Hparam.factor = factor;; 7275 ymax = factor*ymax;; 7276 ymin = factor*ymin;; 7277 //just in case the norm factor is negative; 7278 // this may happen with a positive norm factor and a negative integral !; 7279 if (ymax < ymin) {; 7280 Double_t temp = ymax;; 7281 ymax = ymin;; 7282 ymin = temp;; 7283 }; 7284 ; 7285 // For log scales, histogram coordinates are LOG10(ymin) and; 7286 // LOG10(ymax). Final adjustment (if not option ""Same""; 7287 // or ""+"" for ymax) of ymax and ymin for logarithmic scale, if; 7288 // Maximum and Minimum are not defined.; 7289 if (Hoption.Logy) {; 7290 if (ymin <=0 || ymax <=0) {; 7291 Error(where, ""Cannot set Y axis to log scale"");; 7292 return 0;; 7293 }; 7294 ymin = TMath::Log10(ymin);; 7295 if (!minimum) ymin += TMath::Log10(0.5);; 7296 ymax = TMath::Log10(ymax);; 7297 if (!maximum) ymax += TMath::Log10(2*(0.9/0.95));; 7298 if (!Hoption.Same) {; 7299 Hparam.ymin = ymin;; 7300 Hparam.ymax = ymax;; 7301 }; 7302 return 1;; 7303 }; 7304 ; 7305 // final adjustment of ymin for linear scale.; 7306 // if minimum is not set , then ymin is set to zero if >0; 7307 // or to ymin - margin if <0.; 7308 if (!minimum) {; 7309 if (Hoption.MinimumZero) {; 7310 if (ymin >= ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:263404,log,log,263404,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['log']
Testability,"e) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidnormLeafServerList(RooArgSet& list) const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooResolutionModel.html:22458,test,testArg,22458,root/html526/RooResolutionModel.html,https://root.cern,https://root.cern/root/html526/RooResolutionModel.html,1,['test'],['testArg']
Testability,"e);  Modify the worker active/inactive list by making the worker identified by the ordinal number 'ord' active (add == TRUE) or inactive (add == FALSE). ;  ; void NotifyLogMsg (const char *msg, const char *sfx=""\n"");  Notify locally 'msg' to the appropriate units (file, stdout, window) If defined, 'sfx' is added after 'msg' (typically a line-feed);. ;  ; void operator= (const TProof &);  ; void ParseConfigField (const char *config);  The config file field may contain special instructions which need to be parsed at the beginning, e.g. ;  ; Int_t Ping (ESlaves list);  Ping PROOF slaves. Returns the number of slaves that responded. ;  ; void PrintProgress (Long64_t total, Long64_t processed, Float_t procTime=-1., Long64_t bytesread=-1);  Print a progress bar on stderr. Used in batch mode. ;  ; Bool_t Prompt (const char *p);  Prompt the question 'p' requiring an answer y,Y,n,N Return kTRUE is the answer was y or Y, kFALSE in all other cases. ;  ; void RecvLogFile (TSocket *s, Int_t size);  Receive the log file of the slave with socket s. ;  ; void RedirectWorker (TSocket *s, TSlave *sl, Int_t output_size);  Redirect output of worker sl to some merger. ;  ; void ReleaseMonitor (TMonitor *mon);  Release the used monitor to be used, making sure to delete newly created monitors. ;  ; void ResetMergePrg ();  Reset the merge progress notificator. ;  ; void ResetMergers ();  ; Int_t RestoreActiveList ();  Restore saved list of active workers. ;  ; void SaveActiveList ();  Save current list of active workers. ;  ; Int_t SendCommand (const char *cmd, ESlaves list=kActive);  Send command to be executed on the PROOF master and/or slaves. ;  ; Int_t SendCurrentState (ESlaves list=kActive);  Transfer the current state of the master to the active slave servers. ;  ; Int_t SendCurrentState (TList *list);  Transfer the current state of the master to the active slave servers. ;  ; Int_t SendGroupView ();  Send to all active slaves servers the current slave group size and their unique id",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:51971,log,log,51971,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['log'],['log']
Testability,"e);; 722 }; 723 }; 724 ; 725 void BinData::InitBinEdge(); 726 {; 727 fBinEdge.resize( fDim );; 728 ; 729 for( unsigned int i=0; i<fDim; i++ ); 730 {; 731 fBinEdge[i].reserve(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 732 }; 733 ; 734 if ( fpTmpBinEdgeVector ); 735 {; 736 delete[] fpTmpBinEdgeVector;; 737 fpTmpBinEdgeVector = nullptr;; 738 }; 739 ; 740 fpTmpBinEdgeVector = new double[ fDim ];; 741 }; 742 ; 743 void BinData::UnWrap( ); 744 {; 745 assert( fWrapped );; 746 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 747 kAsymError == fErrorType || kNoError == fErrorType );; 748 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 749 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 750 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 751 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 752 ; 753 assert( fData.empty() );; 754 assert( fDataPtr );; 755 ; 756 unsigned vectorPadding = FitData::VectorPadding(fNPoints);; 757 fData.resize(fNPoints + vectorPadding);; 758 std::copy( fDataPtr, fDataPtr + fNPoints, fData.begin() );; 759 fDataPtr = fData.empty() ? nullptr : &fData.front();; 760 ; 761 for ( unsigned int i=0; i < fDim; i++ ); 762 {; 763 assert( fCoordErrorsPtr[i] );; 764 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 765 }; 766 ; 767 if( kValueError == fErrorType || kCoordError == fErrorType ); 768 {; 769 assert( fDataError.empty() );; 770 assert( fDataErrorPtr );; 771 ; 772 fDataError.resize(fNPoints + vectorPadding);; 773 std::copy(fDataErrorPtr, fDataErrorPtr + fNPoints + vectorPadding, fDataError.begin());; 774 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 775 }; 776 ; 777 if ( kValueError == fErrorType ); 778 {; 779 for ( unsigned int i=0; i < fNPoints; i++ ); 780 {; 781 fDataError[i] = 1.0 / fDataError[i];; 782 }; 783 }; 784 ; 785 if ( kCoordError == fErrorType || kAsymError == fErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:23011,assert,assert,23011,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"e* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; protected:. Double_tTMVA::IPruneTool::B; Double_tTMVA::IPruneTool::S; Double_tTMVA::IPruneTool::fPruneStrength. private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const TMVA::IPruneTool::EventSample* testEvents = __null, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down the tree, etc... for each node!!. void Optimize(TMVA::DecisionTree* dt, Double_t weights); after the critical alpha values (at which the corresponding nodes would; be pruned away) had been established in the ""InitMetaData"" we need now:; automatic pruning:; find the value of ""alpha"" for which the test sample gives minimal error,; on the tree with all nodes pruned that have alpha_critital < alpha,; fixed parameter pruning. CostComplexityPruneTool( SeparationBase* qualityIndex = NULL ). » Last changed: Tue Sep 8 17:45:53 2015 » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html:2288,test,testEvents,2288,root/html604/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html,2,['test'],"['test', 'testEvents']"
Testability,"e, TObject *inputExample);  setup observable, recycle existing observable if defined ;  ; void updateSampleWeights ();  update sample weight (-?-) ;  . Private Attributes; RooListProxy _binWidths;  ; RooObjCacheManager _cacheMgr;  ; Config _config;  ; std::vector< std::vector< RooListProxy * > > _diagrams;  ; RooListProxy _flags;  ; std::vector< std::vector< std::string > > _nonInterfering;  ; RooListProxy _observables;  ; RooSetProxy _operators;  ; RooListProxy _physics;  ; std::map< std::string, int > _sampleMap;  ; double _scale = 1.0;  The cache manager. ;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:60489,test,testArg,60489,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,4,['test'],['testArg']
Testability,"e, UInt_t w, UInt_t h); Palette editor constructor.; The palette editor aloows the editing of the color palette of the image. ~TASPaletteEditor(); Palette editor destructor. Deletes all frames and their layout hints. void CloseWindow(); Close editor. Bool_t ProcessMessage(Long_t msg, Long_t param1, Long_t param2); Process all editor mouse events. void InsertNewPalette(TImagePalette* newPalette); The newPalette is inserted in the list of palettes (fPaletteList) and; fPalette is set to the newPalette. Protected method,. void Save(); Saves the current palette either into a ROOT file or in an ASCII file.; It is called by the Save - button. Protected method. void Open(); Opens either a ROOT file or an ASCII file and reads a palette.; It is called by the Open - button. Protected method. void UpdateScreen(Bool_t histoUpdate); All widgeds of the screen are updated with the current palette.; Protected method. void LogPalette(); The anchor points are rescaled by a log operation.; It is called by the log - button. Protected method. void ExpPalette(); The anchor points are rescaled by a exp operation.; It is called by the exp - button. Protected method. void LinPalette(); The anchor points are rescaled to be linar.; It is called by the lin - button. Protected method. void InvertPalette(); The palette is inverted.; It is called by the invert - button. Protected method. void NewPalette(Long_t id); A new palette is created, depending on the id.; It is called by the combo box. Protected method. void SetStep(); Create a step palette. This is called by the step - check button.; Protected method. void SetRamp(Long_t ramp); The palette is repeated up to 4 times.; This is called by one of the ramp radio buttons. Protected method. void UpdateRange(); Updates the range of the palette.; This is called after the blue limit lines were moved to define; a new range. TASPaletteEditor(TAttImage* attImage, UInt_t w, UInt_t h). » Author: Reiner Rohlfs 24/03/2002 » Copyright (C) 1995-2002, Rene Brun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TASPaletteEditor.html:24374,log,log,24374,root/html602/TASPaletteEditor.html,https://root.cern,https://root.cern/root/html602/TASPaletteEditor.html,2,['log'],['log']
Testability,"e, UInt_t w, UInt_t h); Palette editor constructor.; The palette editor aloows the editing of the color palette of the image. ~TASPaletteEditor(); Palette editor destructor. Deletes all frames and their layout hints. void CloseWindow(); Close editor. Bool_t ProcessMessage(Long_t msg, Long_t param1, Long_t param2); Process all editor mouse events. void InsertNewPalette(TImagePalette* newPalette); The newPalette is inserted in the list of palettes (fPaletteList) and; fPalette is set to the newPalette. Protected method,. void Save(); Saves the current palette either into a ROOT file or in an ASCII file.; It is called by the Save - button. Protected method. void Open(); Opens either a ROOT file or an ASCII file and reads a palette.; It is called by the Open - button. Protected method. void UpdateScreen(Bool_t histoUpdate); All widgeds of the screen are updated with the current palette.; Protected method. void LogPalette(); The anchor points are rescaled by a log operation.; It is called by the log - button. Protected method. void ExpPalette(); The anchor points are rescaled by a exp operation.; It is called by the exp - button. Protected method. void LinPalette(); The anchor points are rescaled to be linar.; It is called by the lin - button. Protected method. void InvertPalette(); The palette is inverted.; It is called by the invert - button. Protected method. void NewPalette(Long_t id); A new palette is created, depending on the id.; It is called by the combo box. Protected method. void SetStep(); Create a step palette. This is called by the step - check button.; Protected method. void SetRamp(Long_t ramp); The palette is repeated up to 4 times.; This is called by one of the ramp radio buttons. Protected method. void UpdateRange(); Updates the range of the palette.; This is called after the blue limit lines were moved to define; a new range. » Author: Reiner Rohlfs 24/03/2002 » Copyright (C) 1995-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASPaletteEditor.html:23353,log,log,23353,root/html526/TASPaletteEditor.html,https://root.cern,https://root.cern/root/html526/TASPaletteEditor.html,5,['log'],['log']
Testability,"e, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd, Int_t nwk = 1); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TList*TProof::GetEnabledPackages() const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); virtual Int_tTProof::PollForNewWorkers(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetFeedback(TString& opt, TString& optfb, Int_t action); voidTProof::SetPlayer(TVirtualProofPlayer* player); voidTProof::SetupWorkersEnv(TList* wrks, Bool_t increasingpool = kFALSE); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofSuperMaster.html:22203,log,loglevel,22203,root/html604/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html,1,['log'],['loglevel']
Testability,"e, igood; 1741/// - ""CHI2"" = returns chi2 instead of p-value; 1742/// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; 1743/// \param[in] res not empty - computes normalized residuals and returns them in this array; 1744///; 1745/// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; 1746/// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; 1747/// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; 1748/// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; 1749///; 1750/// #### Introduction:; 1751///; 1752/// A frequently used technique in data analysis is the comparison of; 1753/// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; 1754/// homogeneity is used widely for comparing usual (unweighted) histograms.; 1755/// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; 1756/// for comparison of weighted and unweighted histograms and two weighted; 1757/// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; 1758/// comparison two usual (unweighted) histograms.; 1759///; 1760/// #### Overview:; 1761///; 1762/// Comparison of two histograms expect hypotheses that two histograms; 1763/// represent identical distributions. To make a decision p-value should; 1764/// be calculated. The hypotheses of identity is rejected if the p-value is; 1765/// lower then some significance level. Traditionally significance levels; 1766/// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; 1767/// analysis of the residuals which is often helpful in identifying the; 1768/// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; 1769/// Residuals are the difference between bin contents and expected bin; 1770/// contents. Most convenient for analysis are the normalized residuals. If; 1771/// hypotheses of identity are valid then normalized residuals are; 1772/// approximate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:68179,test,tests,68179,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['test'],"['test', 'tests']"
Testability,"e,; 17467 ""%s"",; 17468 ""Invalid parameters"");; 17469 }; 17470 return NULL;; 17471 }; 17472 ; 17473 /* check all known protocolls */; 17474 if (!mg_strcasecmp(protocol, ""http"")) {; 17475 is_ssl = 0;; 17476 is_ws = 0;; 17477 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17478 is_ssl = 1;; 17479 is_ws = 0;; 17480#if defined(USE_WEBSOCKET); 17481 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17482 is_ssl = 0;; 17483 is_ws = 1;; 17484 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17485 is_ssl = 1;; 17486 is_ws = 1;; 17487#endif; 17488 } else {; 17489 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17490 mg_snprintf(NULL,; 17491 NULL, /* No truncation check for error buffers */; 17492 error->text,; 17493 error->text_buffer_size,; 17494 ""Protocol %s not supported"",; 17495 protocol);; 17496 }; 17497 return NULL;; 17498 }; 17499 ; 17500 /* TODO: The current implementation here just calls the old; 17501 * implementations, without using any new options. This is just a first; 17502 * step to test the new interfaces. */; 17503#if defined(USE_WEBSOCKET); 17504 if (is_ws) {; 17505 /* TODO: implement all options */; 17506 return mg_connect_websocket_client(; 17507 host,; 17508 port,; 17509 is_ssl,; 17510 ((error != NULL) ? error->text : NULL),; 17511 ((error != NULL) ? error->text_buffer_size : 0),; 17512 (path ? path : """"),; 17513 NULL /* TODO: origin */,; 17514 experimental_websocket_client_data_wrapper,; 17515 experimental_websocket_client_close_wrapper,; 17516 (void *)init->callbacks);; 17517 }; 17518#endif; 17519 ; 17520 /* TODO: all additional options */; 17521 struct mg_client_options opts;; 17522 memset(&opts, 0, sizeof(opts));; 17523 opts.host = host;; 17524 opts.port = port;; 17525 return mg_connect_client_impl(&opts,; 17526 is_ssl,; 17527 ((error != NULL) ? error->text : NULL),; 17528 ((error != NULL) ? error->text_buffer_size; 17529 : 0));; 17530}; 17531#endif; 17532 ; 17533 ; 17534static const struct {; 17535 const char *proto;; 17536 size_t proto_len;; 175",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:519757,test,test,519757,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['test'],['test']
Testability,"e,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interfaces. */; 17504#if defined(USE_WEBSOCKET); 17505 if (is_ws) {; 17506 /* TODO: implement all options */; 17507 return mg_connect_websocket_client(; 17508 host,; 17509 port,; 17510 is_ssl,; 17511 ((error != NULL) ? error->text : NULL),; 17512 ((error != NULL) ? error->text_buffer_size : 0),; 17513 (path ? path : """"),; 17514 NULL /* TODO: origin */,; 17515 experimental_websocket_client_data_wrapper,; 17516 experimental_websocket_client_close_wrapper,; 17517 (void *)init->callbacks);; 17518 }; 17519#endif; 17520 ; 17521 /* TODO: all additional options */; 17522 struct mg_client_options opts;; 17523 memset(&opts, 0, sizeof(opts));; 17524 opts.host = host;; 17525 opts.port = port;; 17526 return mg_connect_client_impl(&opts,; 17527 is_ssl,; 17528 ((error != NULL) ? error->text : NULL),; 17529 ((error != NULL) ? error->text_buffer_size; 17530 : 0));; 17531}; 17532#endif; 17533 ; 17534 ; 17535static const struct {; 17536 const char *proto;; 17537 size_t proto_len;; 175",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:519790,test,test,519790,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['test'],['test']
Testability,"e->GetLast();; 1493 Long64_t nbytesl= nlast-nfirst+1;; 1494 if (nbytesl > 2000000000) nbytesl = 2000000000;; 1495 Int_t nbytes = -Int_t (nbytesl);; 1496 Int_t nb = sizeof(Int_t);; 1497 char * buffer = new char[nb];; 1498 char * psave = buffer;; 1499 tobuf(buffer, nbytes);; 1500 if (last == fEND-1) fEND = nfirst;; 1501 Seek(nfirst);; 1502 // We could not update the meta data for this block on the file.; 1503 // This is not fatal as this only means that we won't get it 'right'; 1504 // if we ever need to Recover the file before the block is actually; 1505 // (attempted to be reused.; 1506 // coverity[unchecked_value]; 1507 WriteBuffer(psave, nb);; 1508 if (fMustFlush) Flush();; 1509 delete [] psave;; 1510}; 1511 ; 1512////////////////////////////////////////////////////////////////////////////////; 1513/// List the contents of a file sequentially.; 1514/// For each logical record found, it prints:; 1515///; 1516/// Date/Time Record_Adress Logical_Record_Length ClassName CompressionFactor; 1517///; 1518/// Example of output; 1519///; 1520/// 20010404/150437 At:64 N=150 TFile; 1521/// 20010404/150440 At:214 N=28326 TBasket CX = 1.13; 1522/// 20010404/150440 At:28540 N=29616 TBasket CX = 1.08; 1523/// 20010404/150440 At:58156 N=29640 TBasket CX = 1.08; 1524/// 20010404/150440 At:87796 N=29076 TBasket CX = 1.10; 1525/// 20010404/150440 At:116872 N=10151 TBasket CX = 3.15; 1526/// 20010404/150441 At:127023 N=28341 TBasket CX = 1.13; 1527/// 20010404/150441 At:155364 N=29594 TBasket CX = 1.08; 1528/// 20010404/150441 At:184958 N=29616 TBasket CX = 1.08; 1529/// 20010404/150441 At:214574 N=29075 TBasket CX = 1.10; 1530/// 20010404/150441 At:243649 N=9583 TBasket CX = 3.34; 1531/// 20010404/150442 At:253232 N=28324 TBasket CX = 1.13; 1532/// 20010404/150442 At:281556 N=29641 TBasket CX = 1.08; 1533/// 20010404/150442 At:311197 N=29633 TBasket CX = 1.08; 1534/// 20010404/150442 At:340830 N=29091 TBasket CX = 1.10; 1535/// 20010404/150442 At:369921 N=10341 TBasket CX = 3.09; 153",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:54378,log,logical,54378,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['log'],['logical']
Testability,"e-running with ord = ""restore"" restores the saved list; Return <0 if something went wrong (-2 if at least one worker was not found); or the number of workers with status change (on master; 0 on client). void SaveActiveList(); Save current list of active workers. void RestoreActiveList(); Restore saved list of active workers. TProof * Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); Start a PROOF session on a specific cluster. If cluster is 0 (the; default) then the PROOF Session Viewer GUI pops up and 0 is returned.; If cluster is ""lite://"" we start a PROOF-lite session.; If cluster is """" (empty string) then we connect to the cluster specified; by 'Proof.LocalDefault', defaulting to ""lite://"".; If cluster is ""pod://"" (case insensitive), then we connect to a PROOF cluster; managed by PROOF on Demand (PoD, http://pod.gsi.de ).; Via conffile a specific PROOF config file in the confir directory can be specified.; Use loglevel to set the default loging level for debugging.; The appropriate instance of TProofMgr is created, if not; yet existing. The instantiated TProof object is returned.; Use TProof::cd() to switch between PROOF sessions.; For more info on PROOF see the TProof ctor. TProofMgr * Mgr(const char* url); Get instance of the effective manager for 'url'; Return 0 on failure. void Reset(const char* url, Bool_t hard = kFALSE); Wrapper around TProofMgr::Reset(...). const TList * GetEnvVars(); Get environemnt variables. void AddEnvVar(const char* name, const char* value); Add an variable to the list of environment variables passed to proofserv; on the master and slaves. void DelEnvVar(const char* name); Remove an variable from the list of environment variables passed to proofserv; on the master and slaves. void ResetEnvVars(); Clear the list of environment variables passed to proofserv; on the master and slaves. void SaveWorkerInfo(); Save information about the worker set in the file .workers in the working; dir. Call",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:100462,log,loglevel,100462,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['log'],"['loging', 'loglevel']"
Testability,"e-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separate; processed that are connected to this process through a RooAbsRealMPFE front-end class. void initSimMode(RooSimultaneous* pdf, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize simultaneous p.d.f processing mode. Strip simultaneous; p.d.f into individual components, split dataset in subset; matching each component and create component test statistics for; each of them. Bool_t setData(RooAbsData& data, Bool_t cloneData = kTRUE); Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the test statistic was constructed with; a range specification on the data, the cloneData argument is ignore and; the data is always cloned. RooAbsTestStatistic* create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsTestStatistic.html:37490,test,test,37490,root/html530/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html530/RooAbsTestStatistic.html,1,['test'],['test']
Testability,"e-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separate; processed that are connected to this process through a RooAbsRealMPFE front-end class. void initSimMode(RooSimultaneous* pdf, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize simultaneous p.d.f processing mode. Strip simultaneous; p.d.f into individual components, split dataset in subset; matching each component and create component test statistics for; each of them. RooAbsTestStatistic* create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE). Double_t combinedValue(RooAbsReal** gofArray, Int_t nVal) const. Double_t globalNormalization() const; Default value of global normalization factor is 1.0. Double_t evaluatePartition(Int_t firstEvent, Int_t lastEvent, Int_t stepSize) const. void setSimCount(Int_t simCount); Store total number of com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:36672,test,test,36672,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,2,['test'],['test']
Testability,"e. ; Definition at line 109 of file GoFTest.h. ◆ ~GoFTest(). ROOT::Math::GoFTest::~GoFTest ; (; ). virtual . Definition at line 179 of file GoFTest.cxx. ◆ GoFTest() [5/6]. ROOT::Math::GoFTest::GoFTest ; (; ). private . Disallowed default constructor. . ◆ GoFTest() [6/6]. ROOT::Math::GoFTest::GoFTest ; (; GoFTest & ; gof). private . Disallowed copy constructor. . Member Function Documentation. ◆ AndersonDarling2SamplesTest() [1/3]. Double_t ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns by default the p-value; when using option ""t"" returns the test statistic value ""A2"". ; Definition at line 854 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [2/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const ROOT::Fit::BinData & ; data1, . const ROOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ; Used by TH1::AndersonDarling ; Definition at line 750 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [3/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 2-Sample Test. ; The Anderson-Darling K-Sample Test algorithm is described and taken from http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm and from (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented). ; Definition at line 646 of file GoFTest.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t ROOT::Math::GoFTest::AndersonDarlingTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""A2"" ; Definition at line 890 of file GoFTest.cxx. ◆ Anderso",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:11609,test,test,11609,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['test']
Testability,"e. ; Definition at line 2084 of file TGNumberEntry.cxx. ◆ SetText(). virtual void TGNumberEntry::SetText ; (; const char * ; text, . Bool_t ; emit = kTRUE . ). inlinevirtual . Definition at line 192 of file TGNumberEntry.h. ◆ SetTime(). virtual void TGNumberEntry::SetTime ; (; Int_t ; hour, . Int_t ; min, . Int_t ; sec, . Bool_t ; emit = kTRUE . ). inlinevirtual . Definition at line 183 of file TGNumberEntry.h. ◆ Streamer(). void TGNumberEntry::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGNumberEntry::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 273 of file TGNumberEntry.h. ◆ ValueChanged(). void TGNumberEntry::ValueChanged ; (; Long_t ; val). virtual . Emit ValueChanged(Long_t) signal. ; This signal is emitted when fButtonToNum is false. The val has the following meaning: val % 100 is the step size val % 10000 / 100 != 0 indicates log step val / 10000 != 0 indicates button down ; Definition at line 2165 of file TGNumberEntry.cxx. ◆ ValueSet(). void TGNumberEntry::ValueSet ; (; Long_t ; val). virtual . Emit ValueSet(Long_t) signal. ; This signal is emitted when the number entry value is changed. The val has the following meaning: val % 100 is the step size val % 10000 / 100 != 0 indicates log step val / 10000 != 0 indicates button down ; Definition at line 2177 of file TGNumberEntry.cxx. Member Data Documentation. ◆ fButtonDown. TGButton* TGNumberEntry::fButtonDown. protected . Button for decreasing value. ; Definition at line 165 of file TGNumberEntry.h. ◆ fButtonToNum. Bool_t TGNumberEntry::fButtonToNum. protected . Send button messages to parent rather than number entry field. ; Definition at line 166 of file TGNumberEntry.h. ◆ fButtonUp. TGButton* TGNumberEntry::fButtonUp. protected . Button for increasing value. ; Definition at line 164 of file TGNumberEntry.h. ◆ fNumAttr. EAttribute TGNumberEntry::fNumAttr.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntry.html:47182,log,log,47182,doc/master/classTGNumberEntry.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntry.html,1,['log'],['log']
Testability,"e. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; TProofCondor Class Reference. . Definition at line 33 of file TProofCondor.h. Public Member Functions;  TProofCondor (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Start proof using condor. ;  ;  ~TProofCondor () override;  Clean up Condor PROOF environment. ;  ; TClass * IsA () const override;  ; virtual void SetActive ();  ; virtual void SetActive (Bool_t active);  Suspend or resume PROOF via Condor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProof;  TProof (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProof () override;  Clean up PROOF environment. ;  ; Int_t ActivateWorker (const char *ord, Bool_t save=kTRUE);  Make sure that the worker identified by the ordinal number 'ord' is in the active list. ;  ; void AddChain (TChain *chain);  Add chain to data set. ;  ; Int_t AddDynamicPath (const char *libpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'libpath' to the lib path search. ;  ; void AddFeedback (const char *name);  Add object to feedback list. ;  ; Int_t AddIncludePath (const char *incpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'incpath' to the inc path search. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the processing of the selector (see Process()). ;  ; void AddInputData (TObject *obj, Bool_t push=kFALSE);  Add data objects ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:1111,log,loglevel,1111,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['log'],['loglevel']
Testability,"e. Because TH1 derives from TNamed, the key identifier on the file is the histogram name: TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; To read this histogram in another Root session, do: TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; One can save all histograms in memory to the file by: file->Write();. Miscellaneous operations; TH1::KolmogorovTest(): statistical test of compatibility in shape; between two histograms; TH1::Smooth() smooths the bin contents of a 1-d histogram; TH1::Integral() returns the integral of bin contents in a given bin range; TH1::GetMean(int axis) returns the mean value along axis; TH1::GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; d#define d(i)Definition RSha256.hxx:102; a#define a(i)Definition RSha256.hxx:99; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:20361,test,test,20361,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability,"e. OperMode RooAbsArg::_operMode = Auto. mutableprotected . Definition at line 688 of file RooAbsArg.h. ◆ _ownedComponents. RooArgSet* RooAbsArg::_ownedComponents = nullptr. protected . Definition at line 692 of file RooAbsArg.h. ◆ _prohibitServerRedirect. bool RooAbsArg::_prohibitServerRedirect = false. mutableprotected . Set of owned component. ; Definition at line 694 of file RooAbsArg.h. ◆ _proxyList. RooRefArray RooAbsArg::_proxyList. protected . Definition at line 611 of file RooAbsArg.h. ◆ _proxyListCache. ProxyListCache RooAbsArg::_proxyListCache. protected . Definition at line 664 of file RooAbsArg.h. ◆ _serverList. RefCountList_t RooAbsArg::_serverList. protected . Definition at line 606 of file RooAbsArg.h. ◆ _shapeDirty. bool RooAbsArg::_shapeDirty = true. mutableprotected . Definition at line 686 of file RooAbsArg.h. ◆ _stringAttrib. std::map<std::string,std::string> RooAbsArg::_stringAttrib. protected . Definition at line 632 of file RooAbsArg.h. ◆ _valueDirty. bool RooAbsArg::_valueDirty = true. mutableprotected . Definition at line 685 of file RooAbsArg.h. ◆ _verboseDirty. bool RooAbsArg::_verboseDirty. staticprotected . cache of the list of proxies. Avoids type casting. ; Definition at line 667 of file RooAbsArg.h. ◆ const [1/2]. R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg& testArg RooAbsArg::const { return observableOverlaps(dset,testArg). Definition at line 145 of file RooAbsArg.h. ◆ const [2/2]. const RooAbsArg& testArg RooAbsArg::const { return observableOverlaps(depList, testArg). Definition at line 148 of file RooAbsArg.h. Libraries for RooAbsArg:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsArg.h; roofit/roofitcore/src/RooAbsArg.cxx. RooAbsArg. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:111267,test,testArg,111267,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,4,['test'],['testArg']
Testability,"e. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBuffer3D. class TBuffer3D: public TObject. TBuffer3D. Generic 3D primitive description class - see TBuffer3DTypes for; producer classes. ; Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; Some; need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). . The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use; TBuffer3D.; Complete the mandatory Core section.; Complete the ShapeSpecific section; if applicable.; Complete the BoundingBox if you can.; Pass this buffer to the viewer using; one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:1169,test,test,1169,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,7,['test'],['test']
Testability,"e. Such a range is called ""bin"". Let's look at an example: draw the histogram of the momentum (""fPt"") of all electrons with an energy (""fE"") > 80 and fTriggered being true.; Binning; You can tell TTree::Draw() what the binning should be:; tree->Draw(""electrons.fE >> htemp(15, 0., 30.)"",...). will use 15 bins, where the lower bin border of the first bin is at 0. and the upper bin border of the highest is at 30.; Style; ROOT displays a few properties for the histogram in the box in the upper right. You can move things around in the graphical display (""canvas"") of the histogram. You can modify graphical properties of the canvas by showing the editor: in the menu, select ""View"", then ""Editor"". Click on the histogram to select it, then change its visual appearance to magenta line, 5 pixels width, with pink fill. Eeew. This is likely the only time in your life that you are allowed to use this color combination - enjoy! :-); . ‹ 2. Running code in ROOT; up; 3. Examining a TTree's data ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/4-histogramming.html:3962,test,tests,3962,d/4-histogramming.html,https://root.cern,https://root.cern/d/4-histogramming.html,1,['test'],['tests']
Testability,"e...;  ; class  TGLPShapeRef;  Base class for references to TGLPysicalShape that need to be notified when the shape is destroyed. More...;  ; class  TGLQuadric;  Wrapper class for GLU quadric shape drawing object. More...;  ; class  TGLRect;  Viewport (pixel base) 2D rectangle class. More...;  ; class  TGLRnrCtx;  The TGLRnrCtx class aggregates data for a given redering context as needed by various parts of the ROOT's OpenGL infrastructure. More...;  ; class  TGLRotateManip;  Rotate manipulator - attaches to physical shape and draws local axes widgets - rings drawn from attached physical center, in plane defined by axis. More...;  ; class  TGLSAFrame;  Standalone GL Viewer GUI main frame. More...;  ; class  TGLSAViewer;  The top level standalone GL-viewer - created via plugin manager. More...;  ; class  TGLScaleManip;  Scale manipulator - attaches to physical shape and draws local axes widgets with box heads. More...;  ; class  TGLScene;  TGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes. More...;  ; class  TGLSceneBase;  Scene base-class – provides basic interface expected by the TGLViewer or its sub-classes: More...;  ; class  TGLSceneInfo;  Base class for extended scene context. More...;  ; class  TGLScenePad;  Implements VirtualViewer3D interface and fills the base-class visualization structures from pad contents. More...;  ; class  TGLSdfFontMaker;  Helper class for generation of Signed Distance Field (SDF) fonts for REve. More...;  ; class  TGLSelectBuffer;  Encapsulates OpenGL select buffer. More...;  ; class  TGLSelectionBuffer;  ; class  TGLSelectRecord;  Standard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes). More...;  ; class  TGLSelectRecordBase;  Base class for select records. More...;  ; class  TGLSphere;  Implements a native ROOT-GL sphere that can be rendered at differ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__opengl.html:8230,log,logical,8230,doc/master/group__opengl.html,https://root.cern,https://root.cern/doc/master/group__opengl.html,1,['log'],['logical']
Testability,"e.cxx:1640; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf801_mcstudyDefinition rf801_mcstudy.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 990; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 980; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 970; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 960; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 950; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-797.721) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.716236 a1=-0.675686 mean=5.04367 nbkg=115.661 nsig=155.327 sig1frac=0.880121; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 940; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 930; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-867.289) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.907715 a1=-0.26012 mean=4.95881 nbkg=147.451 nsig=156.366 sig1frac=0.890535; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 920; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 910; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 900; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-871.381) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.7163",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:10938,log,log,10938,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,1,['log'],['log']
Testability,"e.h""; 28#include ""cublas_v2.h""; 29#include ""curand_kernel.h""; 30 ; 31#include ""TMatrixT.h""; 32#include ""CudaBuffers.h""; 33 ; 34#define CUDACHECK(ans) {cudaError((ans), __FILE__, __LINE__); }; 35 ; 36namespace TMVA {; 37namespace DNN {; 38 ; 39/** Function to check cuda return code. Taken from; 40 * http://stackoverflow.com/questions/14038589/; 41 */; 42inline void cudaError(cudaError_t code, const char *file, int line, bool abort=true);; 43 ; 44//____________________________________________________________________________; 45//; 46// Cuda Device Reference; 47//____________________________________________________________________________; 48 ; 49/** TCudaDeviceReference; 50 *; 51 * Helper class emulating lvalue references for AFloat values that are; 52 * physically on the device. Allows for example to assign to matrix elements.; 53 * Note that device access through CudaDeviceReferences enforces synchronization; 54 * with all streams and thus qualifies as performance killer. Only used for; 55 * testing.; 56 */; 57template<typename AFloat>; 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//____________________________________________________________________________; 80 ; 81/** TCudaMatrix Class; 82 *; 83 * The TCudaMatrix class represents matrices on a CUDA device. The elements; 84 * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; 85 * the allocation and freeing of the device memory. TCudaMatrices are lightweight; 86 * object, that means on assignment and copy creation only a shallow copy is; 87 * performed and no new element buffer all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaMatrix_8h_source.html:2375,test,testing,2375,doc/master/CudaMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html,1,['test'],['testing']
Testability,"e.h. ◆ fHistoPointsX. Double_t TCandle::fHistoPointsX[kNMAXPOINTS]. protected . x-coord for the polyline of the histo ; Definition at line 78 of file TCandle.h. ◆ fHistoPointsY. Double_t TCandle::fHistoPointsY[kNMAXPOINTS]. protected . y-coord for the polyline of the histo ; Definition at line 79 of file TCandle.h. ◆ fHistoWidth. Double_t TCandle::fHistoWidth. protected . The histo width (the height of the max bin) ; Definition at line 61 of file TCandle.h. ◆ fIsCalculated. bool TCandle::fIsCalculated. protected . Definition at line 55 of file TCandle.h. ◆ fIsRaw. bool TCandle::fIsRaw. protected . 0: for TH1 projection, 1: using raw data ; Definition at line 54 of file TCandle.h. ◆ fLogX. int TCandle::fLogX. protected . make the candle appear logx-like ; Definition at line 84 of file TCandle.h. ◆ fLogY. int TCandle::fLogY. protected . make the candle appear logy-like ; Definition at line 85 of file TCandle.h. ◆ fLogZ. int TCandle::fLogZ. protected . make the candle appear logz-like ; Definition at line 86 of file TCandle.h. ◆ fMean. Double_t TCandle::fMean. protected . Position of the mean. ; Definition at line 63 of file TCandle.h. ◆ fMedian. Double_t TCandle::fMedian. protected . Position of the median. ; Definition at line 64 of file TCandle.h. ◆ fMedianErr. Double_t TCandle::fMedianErr. protected . The size of the notch. ; Definition at line 65 of file TCandle.h. ◆ fNDatapoints. Long64_t TCandle::fNDatapoints. protected . Number of Datapoints within this candle. ; Definition at line 72 of file TCandle.h. ◆ fNDrawPoints. Long64_t TCandle::fNDrawPoints. protected . max number of outliers or other point to be shown ; Definition at line 76 of file TCandle.h. ◆ fNHistoPoints. int TCandle::fNHistoPoints. protected . Definition at line 80 of file TCandle.h. ◆ fOption. CandleOption TCandle::fOption. protected . Setting the style of the candle. ; Definition at line 82 of file TCandle.h. ◆ fOptionStr. TString TCandle::fOptionStr. protected . String to draw the candle. ; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCandle.html:22422,log,logz-like,22422,doc/master/classTCandle.html,https://root.cern,https://root.cern/doc/master/classTCandle.html,1,['log'],['logz-like']
Testability,e.h;  TFileCacheRead.h;  TFileCacheWrite.h;  TFileMerger.h;  TFilePrefetch.h;  TFPBlock.h;  TFree.h;  TGenCollectionProxy.h;  TGenCollectionStreamer.h;  TKey.h;  TKeyMapFile.h;  TLockFile.h;  TMakeProject.h;  TMapFile.h;  TMemFile.h;  TStreamerInfo.h;  TStreamerInfoActions.h;  TVirtualArray.h;  TVirtualCollectionIterators.h;  TVirtualObject.h;  TZIPFile.h;  ► src;  TArchiveFile.cxx;  TBufferFile.cxx;  TBufferJSON.cxx;  TBufferMerger.cxx;  TBufferMergerFile.cxx;  TCollectionProxyFactory.cxx;  TContainerConverters.cxx;  TDirectoryFile.cxx;  TEmulatedCollectionProxy.cxx;  TEmulatedMapProxy.cxx;  TFile.cxx;  TFileCacheRead.cxx;  TFileCacheWrite.cxx;  TFileMerger.cxx;  TFilePrefetch.cxx;  TFPBlock.cxx;  TFree.cxx;  TGenCollectionProxy.cxx;  TGenCollectionStreamer.cxx;  TKey.cxx;  TKeyMapFile.cxx;  TLockFile.cxx;  TMakeProject.cxx;  TMapFile.cxx;  TMemFile.cxx;  TStreamerInfo.cxx;  TStreamerInfoActions.cxx;  TStreamerInfoReadBuffer.cxx;  TStreamerInfoWriteBuffer.cxx;  TZIPFile.cxx;  ► test;  TBufferMerger.cxx;  ► v7;  ► inc;  ► ROOT;  TFile.hxx;  ► src;  TFile.cxx;  ► rfio;  ► inc;  TRFIOFile.h;  ► src;  TRFIOFile.cxx;  ► sql;  ► inc;  TBufferSQL2.h;  TKeySQL.h;  TSQLClassInfo.h;  TSQLFile.h;  TSQLObjectData.h;  TSQLStructure.h;  ► src;  TBufferSQL2.cxx;  TKeySQL.cxx;  TSQLClassInfo.cxx;  TSQLFile.cxx;  TSQLObjectData.cxx;  TSQLStructure.cxx;  ► xml;  ► inc;  TBufferXML.h;  TKeyXML.h;  TXMLEngine.h;  TXMLFile.h;  TXMLPlayer.h;  TXMLSetup.h;  ► src;  TBufferXML.cxx;  TKeyXML.cxx;  TXMLEngine.cxx;  TXMLFile.cxx;  TXMLPlayer.cxx;  TXMLSetup.cxx;  ► xmlparser;  ► inc;  TDOMParser.h;  TSAXParser.h;  TXMLAttr.h;  TXMLDocument.h;  TXMLNode.h;  TXMLParser.h;  ► src;  TDOMParser.cxx;  TSAXParser.cxx;  TXMLAttr.cxx;  TXMLDocument.cxx;  TXMLNode.cxx;  TXMLParser.cxx;  ► math;  ► fftw;  ► inc;  TFFTComplex.h;  TFFTComplexReal.h;  TFFTReal.h;  TFFTRealComplex.h;  ► src;  TFFTComplex.cxx;  TFFTComplexReal.cxx;  TFFTReal.cxx;  TFFTRealComplex.cxx;  ► foam;  ► inc;  TFoam.h;  TFoamCell.h;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:37661,test,test,37661,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['test']
Testability,"e1 != source2; 2896 ; 2897template <class Element>; 2898TMatrixT<Element> TMatrixTAutoloadOps::operator!=(const TMatrixTSym<Element> &source1, const TMatrixT<Element> &source2); 2899{; 2900 return operator!=(source2, source1);; 2901}; 2902 ; 2903/*; 2904////////////////////////////////////////////////////////////////////////////////; 2905/// logical operation source1 != val; 2906 ; 2907template<class Element>; 2908TMatrixT<Element> operator!=(const TMatrixT<Element> &source1,Element val); 2909{; 2910 TMatrixT<Element> target; target.ResizeTo(source1);; 2911 ; 2912 const Element *sp = source1.GetMatrixArray();; 2913 Element *tp = target.GetMatrixArray();; 2914 const Element * const tp_last = tp+target.GetNoElements();; 2915 while (tp != tp_last) {; 2916 *tp++ = (*sp != val); sp++;; 2917 }; 2918 ; 2919 return target;; 2920}; 2921 ; 2922////////////////////////////////////////////////////////////////////////////////; 2923/// logical operation source1 != val; 2924 ; 2925template<class Element>; 2926TMatrixT<Element> operator!=(Element val,const TMatrixT<Element> &source1); 2927{; 2928 return operator!=(source1,val);; 2929}; 2930*/; 2931 ; 2932////////////////////////////////////////////////////////////////////////////////; 2933/// Modify addition: target += scalar * source.; 2934 ; 2935template <class Element>; 2936TMatrixT<Element> &TMatrixTAutoloadOps::Add(TMatrixT<Element> &target, Element scalar, const TMatrixT<Element> &source); 2937{; 2938 if (gMatrixCheck && !AreCompatible(target, source)) {; 2939 ::Error(""Add(TMatrixT &,Element,const TMatrixT &)"", ""matrices not compatible"");; 2940 return target;; 2941 }; 2942 ; 2943 const Element *sp = source.GetMatrixArray();; 2944 Element *tp = target.GetMatrixArray();; 2945 const Element *ftp = tp + target.GetNoElements();; 2946 if (scalar == 0) {; 2947 while (tp < ftp); 2948 *tp++ = scalar * (*sp++);; 2949 } else if (scalar == 1.) {; 2950 while (tp < ftp); 2951 *tp++ = (*sp++);; 2952 } else {; 2953 while (tp < ftp); 2954 *tp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:102197,log,logical,102197,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['log'],['logical']
Testability,"e: TMVAClassificationCategory; 515 //; 516 // --------------------------------------------------------------------------------------------------; 517 // Now you can optimize the setting (configuration) of the MVAs using the set of training events; 518 // STILL EXPERIMENTAL and only implemented for BDT's !; 519 //; 520 // factory->OptimizeAllMethods(""SigEffAtBkg0.01"",""Scan"");; 521 // factory->OptimizeAllMethods(""ROCIntegral"",""FitGA"");; 522 //; 523 // --------------------------------------------------------------------------------------------------; 524 ; 525 // Now you can tell the factory to train, test, and evaluate the MVAs; 526 //; 527 // Train MVAs using the set of training events; 528 factory->TrainAllMethods();; 529 ; 530 // Evaluate all MVAs using the set of test events; 531 factory->TestAllMethods();; 532 ; 533 // Evaluate and compare performance of all configured MVAs; 534 factory->EvaluateAllMethods();; 535 ; 536 // --------------------------------------------------------------; 537 ; 538 // Save the output; 539 outputFile->Write();; 540 ; 541 std::cout << ""==> Wrote root file: "" << outputFile->GetName() << std::endl;; 542 std::cout << ""==> TMVAClassification is done!"" << std::endl;; 543 ; 544 // Launch the GUI for the root macros; 545 if (!gROOT->IsBatch()) TMVA::TMVAGui( outfileName );; 546 ; 547 return 0;; 548}; 549 ; 550int main( int argc, char** argv ); 551{; 552 // Select methods (don't look at this code - not of interest); 553 TString methodList;; 554 for (int i=1; i<argc; i++) {; 555 TString regMethod(argv[i]);; 556 if(regMethod==""-b"" || regMethod==""--batch"") continue;; 557 if (!methodList.IsNull()) methodList += TString("","");; 558 methodList += regMethod;; 559 }; 560 return TMVAClassification(methodList);; 561}; DataLoader.h; mainint main()Definition Prototype.cxx:12; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Double_tdouble Double_tDefinition RtypesCore.h:59; TChain.h; TFile.h; inputOption_t Option_t TPoint TPoint const char GetTextMagn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:26758,test,test,26758,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,2,['test'],['test']
Testability,"e:. RooAbsTestStatistic**_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpMode_gofOpModeOperation mode of test statistic instance ; Bool_t_init! Is object initialized ; RooRealMPFE**_mpfeArray! Array of parallel execution frond ends; Bool_t_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-split; Int_t_nCPUNumber of processors to use in parallel calculation mode; Int_t_nEventsTotal number of events in test statistic calculation; Int_t_nGofNumber of sub-contexts ; Int_t_numSetsTotal number of partitions in parallel calculation mode; Int_t_setNumPartition number of this instance in parallel calculation mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number ident",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:35385,test,test,35385,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,6,['test'],['test']
Testability,"e:. RooAbsTestStatistic**_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpMode_gofOpModeOperation mode of test statistic instance ; Bool_t_init! Is object initialized ; RooRealMPFE**_mpfeArray! Array of parallel execution frond ends; Bool_t_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-split; Int_t_nCPUNumber of processors to use in parallel calculation mode; Int_t_nEventsTotal number of events in test statistic calculation; Int_t_nGofNumber of sub-contexts ; Int_t_numSetsTotal number of partitions in parallel calculation mode; Int_t_setNumPartition number of this instance in parallel calculation mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsTestStatistic.html:36923,test,test,36923,root/html532/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsTestStatistic.html,2,['test'],['test']
Testability,"e::GetNTargets() const; UInt_tTMVA::VariableTransformBase::GetNVariables() const; voidTObject::MakeZombie(); voidTMVA::VariableTransformBase::SetCreated(Bool_t c = kTRUE); voidTMVA::VariableTransformBase::SetName(const TString& c); voidTMVA::VariableTransformBase::SetNVariables(UInt_t i); vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Targets(); vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Variables(). private:. voidCalcSQRMats(const vector<TMVA::Event*,allocator<TMVA::Event*> >&, Int_t maxCls). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. vector<TMatrixD*>fDecorrMatrices! Decorrelation matrix [class0/class1/.../all classes]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableDecorrTransform( DataSetInfo& dsi ); constructor. ~VariableDecorrTransform(); destructor. void Initialize(); initialisation. Bool_t PrepareTransformation(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); calculate the decorrelation matrix and the normalization. std::vector<TString>* GetTransformationStrings(Int_t cls) const; creates string with variable transformations applied. const TMVA::Event* Transform(const TMVA::Event *const , Int_t cls) const; apply the decorrelation transformation. const TMVA::Event* InverseTransform(const TMVA::Event *const , Int_t cls) const; apply the inverse decorrelat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__VariableDecorrTransform.html:7685,log,logger,7685,root/html528/TMVA__VariableDecorrTransform.html,https://root.cern,https://root.cern/root/html528/TMVA__VariableDecorrTransform.html,1,['log'],['logger']
Testability,e::GetPadGridXBool_t GetPadGridX() constDefinition TStyle.h:215; TStyle::SetPadLeftMarginvoid SetPadLeftMargin(Float_t margin=0.1)Definition TStyle.h:360; TStyle::SetPadGridYvoid SetPadGridY(Bool_t gridy)Definition TStyle.h:363; TStyle::SetOptLogyvoid SetOptLogy(Int_t logy=1)Definition TStyle.h:330; TStyle::GetOptFileInt_t GetOptFile() constDefinition TStyle.h:243; TStyle::GetAttDateTAttText * GetAttDate()Definition TStyle.h:168; TStyle::GetPadTickYInt_t GetPadTickY() constDefinition TStyle.h:218; TStyle::GetPadBorderSizeWidth_t GetPadBorderSize() constDefinition TStyle.h:209; TStyle::GetTitleBorderSizeWidth_t GetTitleBorderSize() constDefinition TStyle.h:275; TStyle::GetColorPaletteInt_t GetColorPalette(Int_t i) constReturn color number i in current palette.Definition TStyle.cxx:1101; TStyle::SetTitleFillColorvoid SetTitleFillColor(Color_t color=1)Definition TStyle.h:404; TStyle::GetPadBottomMarginFloat_t GetPadBottomMargin() constDefinition TStyle.h:211; TStyle::SetOptLogzvoid SetOptLogz(Int_t logz=1)Definition TStyle.h:331; TStyle::SetPadColorvoid SetPadColor(Color_t color=19)Definition TStyle.h:355; TStyle::GetTitleTextColorColor_t GetTitleTextColor() constDefinition TStyle.h:272; TStyle::GetOptLogxInt_t GetOptLogx() constDefinition TStyle.h:247; TStyle::GetDateYFloat_t GetDateY() constDefinition TStyle.h:198; TStyle::GetPadBorderModeInt_t GetPadBorderMode() constDefinition TStyle.h:210; TStyle::GetNumberOfColorsInt_t GetNumberOfColors() constReturn number of colors in the color palette.Definition TStyle.cxx:1175; TStyle::GetOptLogzInt_t GetOptLogz() constDefinition TStyle.h:249; TStyle::SetPadBorderSizevoid SetPadBorderSize(Width_t size=1)Definition TStyle.h:356; TStyle::GetHatchesLineWidthInt_t GetHatchesLineWidth() constDefinition TStyle.h:200; TStyle::GetPadTopMarginFloat_t GetPadTopMargin() constDefinition TStyle.h:212; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definit,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:327921,log,logz,327921,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['log'],['logz']
Testability,"e::RElement::GetTitlevirtual std::string GetTitle() constTitle of browsable (optional)Definition RElement.hxx:71; ROOT::Browsable::RElement::ComparePathsstatic int ComparePaths(const RElementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::GetPathAsStringstatic std::string GetPathAsString(const RElementPath_t &path)Converts element path back to string.Definition RElement.cxx:160; ROOT::Browsable::RElement::GetSubElementstatic std::shared_ptr< RElement > GetSubElement(std::shared_ptr< RElement > &elem, const RElementPath_t &path)Returns sub element.Definition RElement.cxx:69; ROOT::Browsable::RElement::CreateItemvirtual std::unique_ptr< RItem > CreateItem() constReturns item with element description.Definition RElement.cxx:105; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; TBufferJSON::ConvertToJSONstatic TString ConvertToJSON(const TObject *obj, Int_t compact=0, const char *member_name=nullptr)Converts object, inherited from TObject class, to JSON string Lower digit of compact parameter define...Definition TBufferJSON.cxx:522; TString::Dataconst char * Data() constDefinition TString.h:376; nconst Int_t nDefinition legend1.C:16; ROOT::BrowsableDefinition RAnyObjectHolder.hxx:15; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOT::BrowsableLogROOT::Experimental::RLogChannel & BrowsableLog()Log channel for Browsable diagnostics.Definition RElement.cxx:20; slashTCanvas * slash()Definition slash.C:1. guibrowsablesrcRElement.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RElement_8cxx_source.html:9083,log,log,9083,doc/master/RElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RElement_8cxx_source.html,1,['log'],['log']
Testability,"e::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. XrdClient*fClientHandle to the client object; void*fInitMtxProtects fInitDone, serializes the; Bool_tfIsRootdNature of remote file server; static TFileStager*fgFileStagerStager for IsStaged checks; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); Create a TXNetFile object. A TXNetFile object is the same as a TNetFile; (from which the former derives) except that the protocol is extended to; support dealing with new xrootd data server or xrootd load balancer; server. The ""url"" argument must be of the form. root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXNetFile.html:24991,log,logicalurl,24991,root/html534/TXNetFile.html,https://root.cern,https://root.cern/root/html534/TXNetFile.html,1,['log'],['logicalurl']
Testability,"e::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Maline 19/07/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGInputDialog.html:24187,test,testInputDialog,24187,root/html604/TGInputDialog.html,https://root.cern,https://root.cern/root/html604/TGInputDialog.html,1,['test'],['testInputDialog']
Testability,"e::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Maline 19/07/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGInputDialog.html:24187,test,testInputDialog,24187,root/html602/TGInputDialog.html,https://root.cern,https://root.cern/root/html602/TGInputDialog.html,1,['test'],['testInputDialog']
Testability,"e::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofProgressMemoryPlot.html:25072,log,log,25072,root/html604/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html,1,['log'],['log']
Testability,"e::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressMemoryPlot.html:25072,log,log,25072,root/html602/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html602/TProofProgressMemoryPlot.html,1,['log'],['log']
Testability,"e; TPolyLine3D A 3-D polyline; TPolyLineShape The base class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Process Unique Identifier in time and space; TProcessUUID TProcessID managing UUIDs; TProfile Profile histogram class; TProfile2D Profile2D histogram class; TProfile3D Profile3D histogram class; TProof PROOF control class; TProofBench Steering class for PROOF benchmarks; TProofBenchDataSet Handle operations on datasets; TProofBenchRun Abstract base class for PROOF benchmark run; TProofBenchRunCPU CPU-intensive PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:115719,benchmark,benchmark,115719,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,5,['benchmark'],['benchmark']
Testability,"e; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void initSlave(RooAbsReal& real, RooAbsData& indata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName). ~RooAbsOptTestStatistic(); Destructor. Double_t combinedValue(RooAbsReal** gofArray, Int_t nVal) const; Method to combined test statistic results calculated into partitions into; the global result. This default implementation adds the partition return; values. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Catch server redirect calls and forward to internal clone of function. void printCompactTreeHook(ostream& os, const char* indent = """"); Catch print hook function and forward to function clone. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Driver function to propagate constant term optimizations in test statistic.; If code Activate is sent, constant term optimization will be executed.; If code Deacivate is sent, any existing constant term optimizations will; be abanoned. If codes ConfigChange or ValueChange are sent, any existing; constant term optimizations will be redone. void optimizeCaching(); This method changes the value caching logic for all nodes that depends o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsOptTestStatistic.html:37740,test,test,37740,root/html532/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsOptTestStatistic.html,2,['test'],['test']
Testability,"e; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Int_tTGScrollBar::fgScrollBarWidth; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHScrollBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = 2, UInt_t options = kHorizontalFrame, Pixel_t back = GetDefaultFrameBackground()); Create a horizontal scrollbar widget. void Layout(); Layout and move horizontal scrollbar components. Bool_t HandleButton(Event_t* event); Handle a mouse button event in a horizontal scrolbar. Bool_t HandleMotion(Event_t* event); Handle mouse motion event in a horizontal scrollbar. void SetRange(Int_t range, Int_t page_size); Set range of horizontal scrollbar. void SetPosition(Int_t pos); Set logical slider position of horizontal scrollbar. void SavePrimitive(ostream& out, Option_t* option = """"); Save an horizontal scrollbar as a C++ statement(s) on output stream out. TGScrollBarElement& operator=(const TGHScrollBar& ). TGHScrollBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = 2, UInt_t options = kHorizontalFrame, Pixel_t back = GetDefaultFrameBackground()); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, GetScrollBarWidth()); }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGHScrollBar.html:21758,log,logical,21758,root/html604/TGHScrollBar.html,https://root.cern,https://root.cern/root/html604/TGHScrollBar.html,1,['log'],['logical']
Testability,"e; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Int_tTGScrollBar::fgScrollBarWidth; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHScrollBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = 2, UInt_t options = kHorizontalFrame, Pixel_t back = GetDefaultFrameBackground()); Create a horizontal scrollbar widget. void Layout(); Layout and move horizontal scrollbar components. Bool_t HandleButton(Event_t* event); Handle a mouse button event in a horizontal scrolbar. Bool_t HandleMotion(Event_t* event); Handle mouse motion event in a horizontal scrollbar. void SetRange(Int_t range, Int_t page_size); Set range of horizontal scrollbar. void SetPosition(Int_t pos); Set logical slider position of horizontal scrollbar. void SavePrimitive(ostream& out, Option_t* option = """"); Save an horizontal scrollbar as a C++ statement(s) on output stream out. TGScrollBarElement& operator=(const TGHScrollBar& ). TGHScrollBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = 2, UInt_t options = kHorizontalFrame, Pixel_t back = GetDefaultFrameBackground()); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, GetScrollBarWidth()); }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHScrollBar.html:21758,log,logical,21758,root/html602/TGHScrollBar.html,https://root.cern,https://root.cern/root/html602/TGHScrollBar.html,1,['log'],['logical']
Testability,"e;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches > 10 * GetMaxVisNodes())) {; 1461 hjson = ""FOUND:Too many "" + std::to_string(nmatches);; 1462 return nmatches;; 1463 }; 1464 ; 1465 // now build all necessary shapes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:43433,test,test,43433,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['test'],['test']
Testability,"e;; 8100 ROOT::Math::GoFTest::AndersonDarling2SamplesTest(data1,data2, pvalue,advalue);; 8101 ; 8102 return pvalue;; 8103}; 8104 ; 8105////////////////////////////////////////////////////////////////////////////////; 8106/// Statistical test of compatibility in shape between; 8107/// this histogram and h2, using Kolmogorov test.; 8108/// Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data; 8109/// and not for binned data as in the case of the histogram (see NOTE 3 below).; 8110/// So, before using this method blindly, read the NOTE 3.; 8111///; 8112/// Default: Ignore under- and overflow bins in comparison; 8113///; 8114/// \param[in] h2 histogram; 8115/// \param[in] option is a character string to specify options; 8116/// - ""U"" include Underflows in test (also for 2-dim); 8117/// - ""O"" include Overflows (also valid for 2-dim); 8118/// - ""N"" include comparison of normalizations; 8119/// - ""D"" Put out a line of ""Debug"" printout; 8120/// - ""M"" Return the Maximum Kolmogorov distance instead of prob; 8121/// - ""X"" Run the pseudo experiments post-processor with the following procedure:; 8122/// make pseudoexperiments based on random values from the parent distribution,; 8123/// compare the KS distance of the pseudoexperiment to the parent; 8124/// distribution, and count all the KS values above the value; 8125/// obtained from the original data to Monte Carlo distribution.; 8126/// The number of pseudo-experiments nEXPT is by default 1000, and; 8127/// it can be changed by specifying the option as ""X=number"",; 8128/// for example ""X=10000"" for 10000 toys.; 8129/// The function returns the probability.; 8130/// (thanks to Ben Kilminster to submit this procedure). Note that; 8131/// this option ""X"" is much slower.; 8132///; 8133/// The returned function value is the probability of test; 8134/// (much less than one means NOT compatible); 8135///; 8136/// Code adapted by Rene Brun from original HBOOK routine HDIFF; 8137///; 8138/// NOTE1; 8",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:318171,test,test,318171,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,"e<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > fmod (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > fmod (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > fmod (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > remainder (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > remainder (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > remainder (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > exp (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > exp2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > expm1 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log10 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log1p (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > pow (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > pow (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > pow (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > sqrt (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > cbrt (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > hypot (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > hypot (const RVec< T0 > &v, const T1 &y); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1VecOps.html:22524,log,log,22524,doc/master/namespaceROOT_1_1VecOps.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1VecOps.html,2,['log'],['log']
Testability,"e='F', Double_t min=0, Double_t max=0);  user inserts discriminating variable in data set info ;  ; void AddVariablesArray (const TString &expression, int size, char type='F', Double_t min=0, Double_t max=0);  user inserts discriminating array of variables in data set info in case input tree provides an array of values ;  ; TTree * CreateEventAssignTrees (const TString &name);  create the data assignment tree (for event-wise data assignment by user) ;  ; DataInputHandler & DataInput ();  ; TH2 * GetCorrelationMatrix (const TString &className);  returns the correlation matrix of datasets ;  ; DataSetInfo & GetDataSetInfo ();  ; const DataSetInfo & GetDefaultDataSetInfo ();  ; virtual TClass * IsA () const;  ; DataLoader * MakeCopy (TString name);  Copy method use in VI and CV. ;  ; void MakeKFoldDataSet (CvSplit &s);  Function required to split the training and testing datasets into a number of folds. ;  ; void PrepareFoldDataSet (CvSplit &s, UInt_t foldNumber, Types::ETreeType tt=Types::kTraining);  Function for assigning the correct folds to the testing or training set. ;  ; void PrepareTrainingAndTestTree (const TCut &cut, const TString &splitOpt);  prepare the training and test trees -> same cuts for signal and background ;  ; void PrepareTrainingAndTestTree (const TCut &cut, Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest, const TString &otherOpt=""SplitMode=Random:!V"");  prepare the training and test trees ;  ; void PrepareTrainingAndTestTree (const TCut &cut, Int_t Ntrain, Int_t Ntest=-1);  prepare the training and test trees kept for backward compatibility ;  ; void PrepareTrainingAndTestTree (TCut sigcut, TCut bkgcut, const TString &splitOpt);  prepare the training and test trees ;  ; void RecombineKFoldDataSet (CvSplit &s, Types::ETreeType tt=Types::kTraining);  Recombines the dataset. ;  ; void SetBackgroundTree (TTree *background, Double_t weight=1.0);  ; void SetBackgroundWeightExpression (const TString &variable);  ; void SetCut (const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:4680,test,testing,4680,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['test'],['testing']
Testability,"e=0.);  Set processing info. ;  ; void SetRecvTime (Float_t recvtime);  ; void SetTermTime (Float_t termtime);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TQueryResult; bool fArchived;  whether the query has been archived ;  ; Long64_t fBytes;  number of bytes processed ;  ; bool fDraw;  true if draw action query ;  ; TDatime fEnd;  time when processing ended ;  ; Long64_t fEntries;  number of entries processed ;  ; bool fFinalized;  whether Terminate has been run ;  ; Long64_t fFirst;  first entry processed ;  ; Float_t fInitTime;  Initialization time (seconds) (millisec precision) ;  ; TList * fInputList;  input list; contains also data sets, entry list, ... ;  ; TString fLibList;  blank-separated list of libs loaded at fStart ;  ; TMacro * fLogFile;  file with log messages from the query ;  ; Float_t fMergeTime;  Merging time (seconds) (millisec precision) ;  ; Int_t fNumMergers;  Number of submergers. ;  ; Int_t fNumWrks;  Number of workers at start. ;  ; TString fOptions;  processing options + aclic mode (< opt >#< aclic_mode >) ;  ; TList * fOutputList;  output list ;  ; TString fParList;  colon-separated list of PAR loaded at fStart ;  ; Float_t fPrepTime;  Prepare time (seconds) (millisec precision) ;  ; Float_t fProcTime;  Processing time (seconds) (millisec precision) ;  ; Float_t fRecvTime;  Transfer-to-client time (seconds) (millisec precision) ;  ; TString fResultFile;  URL of the file where results have been archived. ;  ; TMacro * fSelecHdr;  selector header file ;  ; TMacro * fSelecImp;  selector implementation file ;  ; Int_t fSeqNum;  query unique sequential number ;  ; TDatime fStart;  time when processing started ;  ; EQueryStatus fStatus;  query status ;  ; Float_t fTermTime;  Terminate time (seconds) (millisec precision) ;  ; Float_t fUsedCP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofQueryResult.html:15232,log,log,15232,doc/master/classTProofQueryResult.html,https://root.cern,https://root.cern/doc/master/classTProofQueryResult.html,1,['log'],['log']
Testability,"e=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Double_t fAbsTol;  absolute tolerance deviation ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t fMaxIter;  maximum number of iterations ;  ; MethodBase * fMethod;  ; Double_t fRootMax;  maximum root value ;  ; Double_t fRootMin;  minimum root value ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *locati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RootFinder.html:9357,log,logger,9357,doc/master/classTMVA_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RootFinder.html,1,['log'],['logger']
Testability,"eAD1Sample(A2);; 887 testStat = A2;; 888 }; 889 ; 890 Double_t GoFTest::AndersonDarlingTest(const Char_t* option) const {; 891 Double_t pvalue, testStat;; 892 AndersonDarlingTest(pvalue, testStat);; 893 return (strncmp(option, ""p"", 1) == 0 || strncmp(option, ""t"", 1) != 0) ? pvalue : testStat;; 894 }; 895 ; 896 void GoFTest::KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const {; 897 pvalue = -1;; 898 testStat = -1;; 899 if (fTestSampleFromH0) {; 900 MATH_ERROR_MSG(""KolmogorovSmirnov2SamplesTest"", ""Only 1-sample tests can be issued with a 1-sample constructed GoFTest object!"");; 901 return;; 902 }; 903 const size_t na = fSamples[0].size();; 904 const size_t nb = fSamples[1].size();; 905 std::vector<Double_t> a(na);; 906 std::vector<Double_t> b(nb);; 907 std::copy(fSamples[0].begin(), fSamples[0].end(), a.begin());; 908 std::copy(fSamples[1].begin(), fSamples[1].end(), b.begin());; 909 pvalue = TMath::KolmogorovTest(na, a.data(), nb, b.data(), nullptr);; 910 testStat = TMath::KolmogorovTest(na, a.data(), nb, b.data(), ""M"");; 911 }; 912 ; 913 Double_t GoFTest::KolmogorovSmirnov2SamplesTest(const Char_t* option) const {; 914 Double_t pvalue, testStat;; 915 KolmogorovSmirnov2SamplesTest(pvalue, testStat);; 916 return (strncmp(option, ""p"", 1) == 0 || strncmp(option, ""t"", 1) != 0) ? pvalue : testStat;; 917 }; 918 ; 919/*; 920 Algorithm taken from (3) in page 737; 921*/ void GoFTest::KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const {; 922 pvalue = -1;; 923 testStat = -1;; 924 if (!fTestSampleFromH0) {; 925 MATH_ERROR_MSG(""KolmogorovSmirnovTest"", ""Only 2-sample tests can be issued with a 2-sample constructed GoFTest object!"");; 926 return;; 927 }; 928 if (fDist == kUndefined) {; 929 MATH_ERROR_MSG(""KolmogorovSmirnovTest"", ""Distribution type is undefined! Please use SetDistribution(GoFTest::EDistribution)."");; 930 return;; 931 }; 932 Double_t Fo = 0.0, Dn = 0.0;; 933 size_t n = fSamples[0].size();; 934 for (size_t i = 0; i < n; ++i) {; 93",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:32792,test,testStat,32792,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['testStat']
Testability,"eBase::fMinorStampCounter increased on minimal update.; TStringTGLSceneBase::fNameObject identifier.; UInt_tfNextInternalPID! next internal physical ID (from 1 - 0 reserved); Float_tTGLSceneBase::fOLLineWScene outline line-width.; TVirtualPad*fPad; map<unsigned int,TGLPhysicalShape*>TGLScene::fPhysicalShapes!; UInt_tTGLSceneBase::fSceneIDUnique scene id.; Bool_tTGLSceneBase::fSelectableObjects in the scene are selectable.; Bool_tfSmartRefresh! cache logicals during scene rebuilds; map<TObject*,TGLLogicalShape*>TGLScene::fSmartRefreshCache!; Short_tTGLSceneBase::fStyleScene-style.; UInt_tTGLSceneBase::fTimeStampCounter increased on every update.; TStringTGLSceneBase::fTitleObject title.; list<TGLViewerBase*>TGLSceneBase::fViewers; Float_tTGLSceneBase::fWFLineWScene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLScenePad(TVirtualPad* pad); Constructor. void AddHistoPhysical(TGLLogicalShape* log, const Float_t* histColor = 0); Scale and rotate a histo object to mimic placement in canvas. void SubPadPaint(TVirtualPad* pad); Iterate over pad-primitves and import them. void ObjectPaint(TObject* obj, Option_t* opt = """"); Override of virtual TVirtualViewer3D::ObjectPaint().; Special handling of 2D/3D histograms to activate Timur's; histo-painters. void PadPaintFromViewer(TGLViewer* viewer); Entry point for requesting update of scene's contents from; gl-viewer. void PadPaint(TVirtualPad* pad); Entry point for updating scene contents via VirtualViewer3D; interface.; For now this is handled by TGLViewer as it remains; the 'Viewer3D' of given pad. void BeginScene(); Start building of the scene.; Old contents is dropped, unless smart-refresh is in active. Then; the object supporting it are kept in a cache and possibly reused. TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; for description of viewer architecture. void EndScene(); End building of the scene.; TVirtualViewer3D interface ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLScenePad.html:13160,log,log,13160,root/html530/TGLScenePad.html,https://root.cern,https://root.cern/root/html530/TGLScenePad.html,3,['log'],['log']
Testability,"eBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:5377,test,test,5377,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,15,['test'],['test']
Testability,"eCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static atomic<Int_t>TFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. XrdClient*fClientHandle to the client object; void*fInitMtxProtects fInitDone, serializes the; Bool_tfIsRootdNature of remote file server; static TFileStager*fgFileStagerStager for IsStaged checks; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); Create a TXNetFile object. A TXNetFile object is the same as a TNetFile; (from which the former derives) except that the protocol is extended to; support dealing with new xrootd data server or xrootd load balancer; server. The ""url"" argument must be of the form. root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXNetFile.html:25938,log,logicalurl,25938,root/html604/TXNetFile.html,https://root.cern,https://root.cern/root/html604/TXNetFile.html,1,['log'],['logicalurl']
Testability,"eDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsTestStatistic(); Default constructor. RooAbsTestStatistic(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); Constructor taking function (real), a dataset (data), a set of projected observables (projSet). If; rangeName is not null, only events in the dataset inside the range will be used in the test; statistic calculation. If addCoefRangeName is not null, all RooAddPdf component of 'real' will be; instructed to fix their fraction definitions to the given named range. If nCPU is greater than; 1 the test statistic calculation will be paralellized over multiple processes. By default the data; is split with 'bulk' partitioning (each process calculates a contigious block of fraction 1/nCPU; of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; in each processing block many vary greatly thereby distributing the workload rather unevenly.; If interleave is set to true, the interleave partitioning strategy is used where each partition; i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; If splitCutRange is true, a different rangeName constructed as rangeName_{catName} will be used; as range definition for each index state of a RooSimultaneous. RooAbsTestStatistic(const RooAbsTestStatistic& other, const char* name = 0); Copy constructor. ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the tes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsTestStatistic.html:41864,test,test,41864,root/html602/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsTestStatistic.html,2,['test'],['test']
Testability,eFunctionAdapter.h;  GSLMonteFunctionWrapper.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:48800,test,testDerivation,48800,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testDerivation']
Testability,"eKey; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the Lite environment. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new session. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v | SvcMsg"", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read 'len' bytes from offset 'ofs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofMgrLite.html:9566,log,logs,9566,root/html534/TProofMgrLite.html,https://root.cern,https://root.cern/root/html534/TProofMgrLite.html,2,['log'],"['log', 'logs']"
Testability,"eLayer ; (; ). inline . remove one layer ; Definition at line 1248 of file NeuralNet.h. ◆ setErrorFunction(). void TMVA::DNN::Net::setErrorFunction ; (; ModeErrorFunction ; eErrorFunction). inline . which error function is to be used ; Definition at line 1096 of file NeuralNet.h. ◆ setInputSize(). void TMVA::DNN::Net::setInputSize ; (; size_t ; sizeInput). inline . set the input size of the DNN ; Definition at line 1092 of file NeuralNet.h. ◆ SetIpythonInteractive(). void TMVA::DNN::Net::SetIpythonInteractive ; (; IPythonInteractive * ; fI, . bool * ; fE, . UInt_t * ; M, . UInt_t * ; C . ). inline . Definition at line 1283 of file NeuralNet.h. ◆ setOutputSize(). void TMVA::DNN::Net::setOutputSize ; (; size_t ; sizeOutput). inline . set the output size of the DNN ; Definition at line 1093 of file NeuralNet.h. ◆ train(). template<typename Minimizer > . double TMVA::DNN::Net::train ; (; std::vector< double > & ; weights, . std::vector< Pattern > & ; trainPattern, . const std::vector< Pattern > & ; testPattern, . Minimizer & ; minimizer, . Settings & ; settings . ). start the training ; execute the training until convergence emerges; Parameters. weightsweight vector ; trainPatterntraining pattern ; testPatterntest pattern ; minimizeruse this minimizer for training (e.g. SGD) ; settingssettings used for this training run. Parameters. weightsthe container with the weights (synapses) ; trainPatternthe pattern for the training ; testPatternthe pattern for the testing ; minimizerthe minimizer (e.g. steepest gradient descent) to be used ; settingsthe settings for the training (e.g. multithreading or not, regularization etc.) . Definition at line 712 of file NeuralNet.icc. ◆ trainCycle(). template<typename Iterator , typename Minimizer > . double TMVA::DNN::Net::trainCycle ; (; Minimizer & ; minimizer, . std::vector< double > & ; weights, . Iterator ; itPatternBegin, . Iterator ; itPatternEnd, . Settings & ; settings, . DropContainer & ; dropContainer . ). inline . executes on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:16901,test,testPattern,16901,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,1,['test'],['testPattern']
Testability,"eLevel(Double_t cl); virtual voidSetNuisanceParameters(RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooAbsArg&) const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Double_tfSize; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingSampler(). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fTestStatistic;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. {}. void SetParameters(RooArgSet& ); specify the parameters of interest in the interval. {}. void SetNuisanceParameters(RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). {}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetTestStatistic(RooAbsArg& ) const; Set the TestStatistic (want the argument to be a function of the data & parameter points. {}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__DebuggingSampler.html:2296,test,test,2296,root/html526/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__DebuggingSampler.html,1,['test'],['test']
Testability,"eLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context holding display-list definitions. { return fGLCtxIdentity; }. » Author: Matevz Tadel, Feb 2007 » Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:13765,log,logical,13765,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,4,['log'],['logical']
Testability,"eLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t[4] rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context holding display-list definitions. { return fGLCtxIdentity; }. » Author: Matevz Tadel, Feb 2007 » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:14402,log,logical,14402,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,2,['log'],['logical']
Testability,"eMethod, TString methodTitle, TString theOption = """" );; 102 MethodBase* BookMethod( DataLoader *, TMVA::Types::EMVA /*theMethod*/,; 103 TString /*methodTitle*/,; 104 TString /*methodOption*/,; 105 TMVA::Types::EMVA /*theComposite*/,; 106 TString /*compositeOption = """"*/ ) { return nullptr; }; 107 ; 108 // optimize all booked methods (well, if desired by the method); 109 std::map<TString,Double_t> OptimizeAllMethods (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 110 void OptimizeAllMethodsForClassification(TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 111 void OptimizeAllMethodsForRegression (TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 112 ; 113 // training for all booked methods; 114 void TrainAllMethods ();; 115 void TrainAllMethodsForClassification( void ) { TrainAllMethods(); }; 116 void TrainAllMethodsForRegression ( void ) { TrainAllMethods(); }; 117 ; 118 // testing; 119 void TestAllMethods();; 120 ; 121 // performance evaluation; 122 void EvaluateAllMethods( void );; 123 void EvaluateAllVariables(DataLoader *loader, TString options = """" );; 124 ; 125 TH1F* EvaluateImportance( DataLoader *loader,VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption = """" );; 126 ; 127 // delete all methods and reset the method vector; 128 void DeleteAllMethods( void );; 129 ; 130 // accessors; 131 IMethod* GetMethod( const TString& datasetname, const TString& title ) const;; 132 Bool_t HasMethod( const TString& datasetname, const TString& title ) const;; 133 ; 134 Bool_t Verbose( void ) const { return fVerbose; }; 135 void SetVerbose( Bool_t v=kTRUE );; 136 ; 137 // make ROOT-independent C++ class for classifier response; 138 // (classifier-specific implementation); 139 // If no classifier name is given, help messages for all booked; 140 // classifiers are printed; 141 virtual void MakeClass(const TString& datasetname , const TString&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html:4752,test,testing,4752,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,1,['test'],['testing']
Testability,"eNameNetConfig, . std::string ; _fileNameResult, . std::vector< Pattern > * ; _resultPatternContainer . ). preparation for monitoring output ; Definition at line 520 of file NeuralNet.cxx. ◆ setWeightSums(). void TMVA::DNN::ClassificationSettings::setWeightSums ; (; double ; sumOfSigWeights, . double ; sumOfBkgWeights . ). set the weight sums to be scaled to (preparations for monitoring output) ; Definition at line 512 of file NeuralNet.cxx. ◆ startTestCycle(). void TMVA::DNN::ClassificationSettings::startTestCycle ; (; ). virtual . action to be done when the test cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 316 of file NeuralNet.cxx. ◆ startTrainCycle(). void TMVA::DNN::ClassificationSettings::startTrainCycle ; (; ). virtual . action to be done when the training cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 281 of file NeuralNet.cxx. ◆ testIteration(). void TMVA::DNN::ClassificationSettings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented from TMVA::DNN::Settings.; Definition at line 930 of file NeuralNet.h. ◆ testSample(). void TMVA::DNN::ClassificationSettings::testSample ; (; double ; error, . double ; output, . double ; target, . double ; weight . ). virtual . action to be done after the computation of a test sample (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 304 of file NeuralNet.cxx. Member Data Documentation. ◆ m_ams. std::vector<double> TMVA::DNN::ClassificationSettings::m_ams. Definition at line 1000 of file NeuralNet.h. ◆ m_cutValue. double TMVA::DNN::ClassificationSettings::m_cutValue. Definition at line 1008 of file NeuralNet.h. ◆ m_fileNameNetConfig. std::string TMVA::DNN::ClassificationSettings::m_fileNameNetConfig. Definition at line 1011 of file NeuralNet.h. ◆ m_fileNameResult. std::string TMVA::DNN::Classific",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:8961,test,testIteration,8961,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['test'],['testIteration']
Testability,"eNormSet ; (; RooArgSet const * ; normSet); const. inlineprotected . Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ; Definition at line 299 of file RooAbsPdf.h. ◆ isDirectGenSafe(). bool RooAbsPdf::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. virtual . Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ; Observables on which a PDF depends via more than route are not safe for use with internal generators because they introduce correlations not known to the internal generator ; Reimplemented in RooAbsAnaConvPdf, RooAddModel, RooBinSamplingPdf, and RooProdPdf.; Definition at line 1557 of file RooAbsPdf.cxx. ◆ logBatchComputationErrors(). void RooAbsPdf::logBatchComputationErrors ; (; std::span< const double > & ; outputs, . std::size_t ; begin . ); const. private . Scan through outputs and fix+log all nans and negative values. ; Parameters. [in,out]outputsArray to be scanned & fixed. ; [in]beginBegin of event range. Only needed to print the correct event number where the error occurred. . Definition at line 654 of file RooAbsPdf.cxx. ◆ mustBeExtended(). bool RooAbsPdf::mustBeExtended ; (; ); const. inline . If true PDF must provide extended likelihood term. ; Definition at line 222 of file RooAbsPdf.h. ◆ normalizeWithNaNPacking(). double RooAbsPdf::normalizeWithNaNPacking ; (; double ; rawVal, . double ; normVal . ); const. protected . Definition at line 282 of file RooAbsPdf.cxx. ◆ normRange(). const char * RooAbsPdf::normRange ; (; ); const. inline . Definition at line 250 of file RooAbsPdf.h. ◆ paramOn() [1/2]. RooPlot * RooAbsPdf::paramOn ; (; RooPlot * ; frame, . const RooArgSet & ; params, . bool ; showConstants = false, . const char * ; label = """", . double ; xmin = 0.65, . double ; xmax = 0.99, . double ; ymax = 0.95, . const RooCmdArg * ; formatCmd = nullptr . ). priv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:133186,log,log,133186,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['log'],['log']
Testability,"eNumber of words per point in the cache; TStringTNamed::fTitleobject title; TObject*TVirtualFitter::fUserFuncpointer to user theoretical function (a TF1*); Int_tTVirtualFitter::fXfirstfirst bin on X axis; Int_tTVirtualFitter::fXlastlast bin on X axis; Int_tTVirtualFitter::fYfirstfirst bin on Y axis; Int_tTVirtualFitter::fYlastlast bin on Y axis; Int_tTVirtualFitter::fZfirstfirst bin on Z axis; Int_tTVirtualFitter::fZlastlast bin on Z axis; static TStringTVirtualFitter::fgDefaultname of the default fitter (""Minuit"",""Fumili"",etc); static Double_tTVirtualFitter::fgErrorDefError definition (default=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. Double_t*fCovarCovariance matrix; TMinuit*fMinuitpointer to the TMinuit object; Int_tfNlogNumber of elements in fSunLog; Double_t*fSumLogSum of logs (array of fNlog elements). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitter(Int_t maxpar = 25); default constructor*-*-; *-* ===================. ~TFitter(); default destructor*-*-*-; *-* ==================. Double_t Chisquare(Int_t npar, Double_t* params) const; return a chisquare equivalent. void Clear(Option_t* option = """"); reset the fitter environment. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void FixParameter(Int_t ipar); Fix parameter ipar. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.94999999999999996); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitter.html:11171,log,logs,11171,root/html602/TFitter.html,https://root.cern,https://root.cern/root/html602/TFitter.html,2,['log'],['logs']
Testability,"eNumber of words per point in the cache; TStringTNamed::fTitleobject title; TObject*TVirtualFitter::fUserFuncpointer to user theoretical function (a TF1*); Int_tTVirtualFitter::fXfirstfirst bin on X axis; Int_tTVirtualFitter::fXlastlast bin on X axis; Int_tTVirtualFitter::fYfirstfirst bin on Y axis; Int_tTVirtualFitter::fYlastlast bin on Y axis; Int_tTVirtualFitter::fZfirstfirst bin on Z axis; Int_tTVirtualFitter::fZlastlast bin on Z axis; static TStringTVirtualFitter::fgDefaultname of the default fitter (""Minuit"",""Fumili"",etc); static Double_tTVirtualFitter::fgErrorDefError definition (default=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. Double_t*fCovarCovariance matrix; TMinuit*fMinuitpointer to the TMinuit object; Int_tfNlogNumber of elements in fSunLog; Double_t*fSumLogSum of logs (array of fNlog elements). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitter(Int_t maxpar = 25); default constructor*-*-; *-* ===================. ~TFitter(); default destructor*-*-*-; *-* ==================. Double_t Chisquare(Int_t npar, Double_t* params) const; return a chisquare equivalent. void Clear(Option_t* option = """"); reset the fitter environment. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void FixParameter(Int_t ipar); Fix parameter ipar. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.95); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:10534,log,logs,10534,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,4,['log'],['logs']
Testability,"eOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; Bool_tisHidden() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsHiddenReal.html:16453,log,logEvalError,16453,root/html532/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html532/RooAbsHiddenReal.html,1,['log'],['logEvalError']
Testability,"eOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; const RooAbsReal&ixF(); voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMoment.html:16668,log,logEvalError,16668,root/html532/RooMoment.html,https://root.cern,https://root.cern/root/html532/RooMoment.html,1,['log'],['logEvalError']
Testability,"eOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodDT.h>. Inheritance diagram for TMVA::MethodDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodDT() [1/2]. TMVA::MethodDT::MethodDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). the standard constructor for just an ordinar ""decision trees"" ; Definition at line 127 of file MethodDT.cxx. ◆ MethodDT() [2/2].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:32456,test,testing,32456,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,2,"['log', 'test']","['logger', 'testing']"
Testability,"eOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction4Binding<double,double,double,double,int>&operator=(const RooCFunction4Binding<double,double,double,double,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4Binding_double_double_double_double_int_.html:20090,test,testArg,20090,root/html602/RooCFunction4Binding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4Binding_double_double_double_double_int_.html,2,['test'],['testArg']
Testability,"ePValues(int nsamples, Double_t A2); Double_tLogNormalCDF(Double_t x) const; voidLogSample(); ROOT::Math::GoFTestoperator=(ROOT::Math::GoFTest& gof); Double_tPValueAD1Sample(Double_t A2) const; voidSetCDF(); voidSetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax); voidSetParameters(); voidSetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). Data Members; public:. enum EDistribution { kUndefined; kUserDefined; kGaussian; kLogNormal; kExponential; };; enum EUserDistribution { kCDF; kPDF; };; enum ETestType { kAD; kAD2s; kKS; kKS2s; };. private:. auto_ptr<ROOT::Math::IBaseFunctionOneDim>fCDF; vector<Double_t>fCombinedSamples; ROOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<std::vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GoFTest.html:3556,test,tests,3556,root/html534/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GoFTest.html,1,['test'],['tests']
Testability,"ePalette * ; newPalette). protected . The newPalette is inserted in the list of palettes (fPaletteList) and fPalette is set to the newPalette. ; Protected method, ; Definition at line 397 of file TASPaletteEditor.cxx. ◆ InvertPalette(). void TASPaletteEditor::InvertPalette ; (; ). protected . The palette is inverted. ; It is called by the invert - button. Protected method. ; Definition at line 645 of file TASPaletteEditor.cxx. ◆ IsA(). TClass * TASPaletteEditor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TPaletteEditor.; Definition at line 108 of file TASPaletteEditor.h. ◆ LinPalette(). void TASPaletteEditor::LinPalette ; (; ). protected . The anchor points are rescaled to be linar. ; It is called by the lin - button. Protected method. ; Definition at line 620 of file TASPaletteEditor.cxx. ◆ LogPalette(). void TASPaletteEditor::LogPalette ; (; ). protected . The anchor points are rescaled by a log operation. ; It is called by the log - button. Protected method. ; Definition at line 582 of file TASPaletteEditor.cxx. ◆ NewPalette(). void TASPaletteEditor::NewPalette ; (; Long_t ; id). protected . A new palette is created, depending on the id. ; It is called by the combo box. Protected method. ; Definition at line 670 of file TASPaletteEditor.cxx. ◆ Open(). void TASPaletteEditor::Open ; (; ). protected . Opens either a ROOT file or an ASCII file and reads a palette. ; It is called by the Open - button. Protected method. ; Definition at line 457 of file TASPaletteEditor.cxx. ◆ ProcessMessage(). Bool_t TASPaletteEditor::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; param1, . Longptr_t ; param2 . ). overridevirtual . Process all editor mouse events. ; Reimplemented from TGFrame.; Definition at line 294 of file TASPaletteEditor.cxx. ◆ Save(). void TASPaletteEditor::Save ; (; ). protected . Saves the current palette either into a ROOT file or in an ASCII file. ; It is called by the Save - button. Protected me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor.html:40358,log,log,40358,doc/master/classTASPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor.html,1,['log'],['log']
Testability,"eParameters(const RooArgSet& set); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetModel(const RooStats::ModelConfig& model); virtual voidSetNuisanceParameters(const RooArgSet& set); virtual voidSetNullModel(const RooStats::ModelConfig&); virtual voidSetNullParameters(const RooArgSet& set); virtual voidSetParameters(const RooArgSet& set); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. RooAbsData*GetData() const; RooAbsPdf*GetPdf() const. Data Members; protected:. RooArgSetfAlternateParamsRooArgSet specifying alternate parameters for hypothesis test // Is it used ????; RooAbsData*fData; RooArgSetfNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetfNullParamsRooArgSet specifying null parameters for hypothesis test; RooArgSetfPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*fPdf; Double_tfSizesize of the test (eg. specified rate of Type I error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetTestSize(Double_t size). SetModel(const RooStats::ModelConfig& model). virtual ~CombinedCalculator(); destructor. { }. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. HypoTestResult* GetHypoTest() const; main interface to get a HypoTestResult, pure virtual. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__CombinedCalculator.html:3209,test,test,3209,root/html528/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__CombinedCalculator.html,9,['test'],['test']
Testability,"ePlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voiddeleteSharedProperties(); Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealVar.html:10013,test,testArg,10013,root/html528/RooRealVar.html,https://root.cern,https://root.cern/root/html528/RooRealVar.html,12,['test'],['testArg']
Testability,"eProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooDataHist&dataHist(); const RooDataHist&dataHist() const; virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHistPdf.html:8493,test,testArg,8493,root/html526/RooHistPdf.html,https://root.cern,https://root.cern/root/html526/RooHistPdf.html,2,['test'],['testArg']
Testability,"eRanking(). const Ranking * TMVA::MethodPyTorch::CreateRanking ; (; ). inlinevirtual . Implements TMVA::PyMethodBase.; Definition at line 63 of file MethodPyTorch.h. ◆ DeclareOptions(). void MethodPyTorch::DeclareOptions ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 74 of file MethodPyTorch.cxx. ◆ GetHelpMessage(). void MethodPyTorch::GetHelpMessage ; (; ); const. virtual . Implements TMVA::IMethod.; Definition at line 652 of file MethodPyTorch.cxx. ◆ GetMulticlassValues(). std::vector< Float_t > & MethodPyTorch::GetMulticlassValues ; (; ). virtual . Reimplemented from TMVA::MethodBase.; Definition at line 630 of file MethodPyTorch.cxx. ◆ GetMvaValue(). Double_t MethodPyTorch::GetMvaValue ; (; Double_t * ; errLower, . Double_t * ; errUpper . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 511 of file MethodPyTorch.cxx. ◆ GetMvaValues(). std::vector< Double_t > MethodPyTorch::GetMvaValues ; (; Long64_t ; firstEvt, . Long64_t ; lastEvt, . Bool_t ; logProgress . ). virtual . get all the MVA values for the events of the current Data type ; Implements TMVA::PyMethodBase.; Definition at line 533 of file MethodPyTorch.cxx. ◆ GetNumValidationSamples(). UInt_t TMVA::MethodPyTorch::GetNumValidationSamples ; (; ). private . Validation of the ValidationSize option. ; Allowed formats are 20%, 0.2 and 100 etc.; 20% and 0.2 selects 20% of the training set as validation data.; 100 selects 100 events as the validation data. Returnsnumber of samples in validation set ; Definition at line 100 of file MethodPyTorch.cxx. ◆ GetRegressionValues(). std::vector< Float_t > & MethodPyTorch::GetRegressionValues ; (; ). virtual . Reimplemented from TMVA::MethodBase.; Definition at line 600 of file MethodPyTorch.cxx. ◆ HasAnalysisType(). Bool_t MethodPyTorch::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ;  . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 66 of file MethodPyTorch.cxx. ◆ Init(). void Met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html:31762,log,logProgress,31762,doc/master/classTMVA_1_1MethodPyTorch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html,1,['log'],['logProgress']
Testability,eServer.cxx;  TOracleStatement.cxx;  ► pgsql;  ► inc;  TPgSQLResult.h;  TPgSQLRow.h;  TPgSQLServer.h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.cxx;  TSapDBServer.cxx;  ► sqlite;  ► inc;  TSQLiteResult.h;  TSQLiteRow.h;  TSQLiteServer.h;  TSQLiteStatement.h;  ► src;  TSQLiteResult.cxx;  TSQLiteRow.cxx;  TSQLiteServer.cxx;  TSQLiteStatement.cxx;  ► tmva;  ► pymva;  ► inc;  ► TMVA;  MethodPyAdaBoost.h;  MethodPyGTB.h;  MethodPyKeras.h;  MethodPyRandomForest.h;  PyMethodBase.h;  ► src;  MethodPyAdaBoost.cxx;  MethodPyGTB.cxx;  MethodPyKeras.cxx;  MethodPyRandomForest.cxx;  PyMethodBase.cxx;  ► test;  Classification.C;  testPyAdaBoostClassification.C;  testPyAdaBoostMulticlass.C;  testPyGTBClassification.C;  testPyGTBMulticlass.C;  testPyKerasClassification.C;  testPyKerasMulticlass.C;  testPyKerasRegression.C;  testPyRandomForestClassification.C;  testPyRandomForestMulticlass.C;  ► rmva;  ► inc;  ► TMVA;  MethodC50.h;  MethodRSNNS.h;  MethodRSVM.h;  MethodRXGB.h;  RMethodBase.h;  ► src;  MethodC50.cxx;  MethodRSNNS.cxx;  MethodRSVM.cxx;  MethodRXGB.cxx;  RMethodBase.cxx;  ► test;  Classification.C;  ► tmva;  ► inc;  ► TMVA;  ► DNN;  ► Architectures;  ► Cpu;  Blas.h;  CpuBuffer.h;  CpuMatrix.h;  ► Cuda;  CudaBuffers.h;  CudaMatrix.h;  Device.h;  Cpu.h;  Cuda.h;  Reference.h;  DataLoader.h;  Functions.h;  Layer.h;  Minimizers.h;  Net.h;  BDTEventWrapper.h;  BinarySearchTree.h;  BinarySearchTreeNode.h;  BinaryTree.h;  CCPruner.h;  CCTreeWrapper.h;  ClassifierFactory.h;  ClassInfo.h;  Config.h;  Configurable.h;  ConvergenceTest.h;  CostComplexityPruneTool.h;  CrossEntropy.h;  CrossValidation.h;  DataInputHandler.h;  DataLoader.h;  DataSet.h;  DataSetFactory.h;  DataSetInfo.h;  DataSetManager.h;  DecisionTree.h;  DecisionTreeNode.h;  Envelope.h;  Event.h;  ExpectedErrorPruneTool.h;  Factory.h;  FitterBase.h;  Ge,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:85296,test,testPyRandomForestClassification,85296,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testPyRandomForestClassification']
Testability,eTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.cxx;  mixmax.h;  mixmax_skip_N256.icc;  MixMaxEngine.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  TComplex.cxx;  TDataPointN.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.h;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:46192,test,testIntegration,46192,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testIntegration']
Testability,"eValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooListProxy_set1Set of constraint terms; TIterator*_setIter1! do not persist; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooConstraintSum(); Default constructor. RooConstraintSum(const char* name, const char* title, const RooArgSet& constraintSet, const RooArgSet& paramSet); Constructor with set of constraint p.d.f.s. All elements in constraintSet must inherit from RooAbsPdf. RooConstraintSum(const RooConstraintSum& other, const char* name = 0); Copy constructor. ~RooConstraintSum(); Destructor. Double_t evaluate() const; Return sum of -log of constraint p.d.f.s. TObject* clone(const char* newname) const; { return new RooConstraintSum(*this, newname); }. const RooArgList& list(); { return _set1 ; }. » Last changed: Tue Mar 10 17:16:04 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooConstraintSum.html:36400,log,log,36400,root/html534/RooConstraintSum.html,https://root.cern,https://root.cern/root/html534/RooConstraintSum.html,1,['log'],['log']
Testability,"e_shared<std::function<double(double)>> ([](double value){ return 0.3 + (1.0 - std::pow (value, 2.0)); }). Definition at line 23 of file NeuralNet.cxx. ◆ Linear. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Linear = std::make_shared<std::function<double(double)>> ([](double value){ return value; }). Definition at line 24 of file NeuralNet.cxx. ◆ ReLU. std::shared_ptr< std::function< double(double)> > TMVA::DNN::ReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.0; return value > margin ? value-margin : 0; }). Definition at line 25 of file NeuralNet.cxx. ◆ Sigmoid. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Sigmoid = std::make_shared<std::function<double(double)>> ([](double value){ value = std::max (-100.0, std::min (100.0,value)); return 1.0/(1.0 + std::exp (-value)); }). Definition at line 26 of file NeuralNet.cxx. ◆ SoftPlus. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftPlus = std::make_shared<std::function<double(double)>> ([](double value){ return std::log (1.0+ std::exp (value)); }). Definition at line 27 of file NeuralNet.cxx. ◆ SoftSign. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftSign = std::make_shared<std::function<double(double)>> ([](double value){ return value / (1.0 + fabs (value)); }). Definition at line 32 of file NeuralNet.cxx. ◆ SymmReLU. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SymmReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.3; return value > margin ? value-margin : value < -margin ? value+margin : 0; }). Definition at line 30 of file NeuralNet.cxx. ◆ Tanh. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Tanh = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value); }). Definition at line 29 of file NeuralNet.cxx. ◆ TanhShift. std::shared_ptr< std::function< double(double)> > TMVA::DNN::TanhShift = std::make_sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:39895,log,log,39895,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['log'],['log']
Testability,"e_t & ; meanS, . Double_t & ; meanB, . Double_t & ; rmsS, . Double_t & ; rmsB, . Double_t & ; xmin, . Double_t & ; xmax, . Int_t ; signalClass, . Bool_t ; norm = kFALSE . ). sanity check ; Definition at line 202 of file Tools.cxx. ◆ ComputeVariance(). Double_t TMVA::Tools::ComputeVariance ; (; Double_t ; sumx2, . Double_t ; sumx, . Int_t ; nx . ). inline . compute variance from given sums ; Definition at line 358 of file Tools.h. ◆ ContainsRegularExpression(). Bool_t TMVA::Tools::ContainsRegularExpression ; (; const TString & ; s). check if regular expression helper function to search for ""$!%^&()'<>?= "" in a string ; Definition at line 784 of file Tools.cxx. ◆ DestroyInstance(). void TMVA::Tools::DestroyInstance ; (; ). static . Definition at line 82 of file Tools.cxx. ◆ FormattedOutput() [1/3]. void TMVA::Tools::FormattedOutput ; (; const std::vector< Double_t > & ; values, . const std::vector< TString > & ; V, . const TString ; titleVars, . const TString ; titleValues, . MsgLogger & ; logger, . TString ; format = ""%+1.3f"" . ). formatted output of simple table ; Definition at line 887 of file Tools.cxx. ◆ FormattedOutput() [2/3]. void TMVA::Tools::FormattedOutput ; (; const TMatrixD & ; M, . const std::vector< TString > & ; V, . MsgLogger & ; logger . ). formatted output of matrix (with labels) ; Definition at line 937 of file Tools.cxx. ◆ FormattedOutput() [3/3]. void TMVA::Tools::FormattedOutput ; (; const TMatrixD & ; M, . const std::vector< TString > & ; vert, . const std::vector< TString > & ; horiz, . MsgLogger & ; logger . ). formatted output of matrix (with labels) ; Definition at line 985 of file Tools.cxx. ◆ GetChild(). void * TMVA::Tools::GetChild ; (; void * ; parent, . const char * ; childname = nullptr . ). get child node ; Definition at line 1150 of file Tools.cxx. ◆ GetContent(). const char * TMVA::Tools::GetContent ; (; void * ; node). XML helpers. ; Definition at line 1174 of file Tools.cxx. ◆ GetCorrelationMatrix(). const TMatrixD * TMVA::Tools:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Tools.html:14345,log,logger,14345,doc/master/classTMVA_1_1Tools.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Tools.html,1,['log'],['logger']
Testability,"e_t TMVA::MethodCuts::EstimatorFunction( std::vector<Double_t>& pars ); 879{; 880 return ComputeEstimator( pars );; 881}; 882 ; 883////////////////////////////////////////////////////////////////////////////////; 884/// returns estimator for ""cut fitness"" used by GA.; 885///; 886/// there are two requirements:; 887/// 1. the signal efficiency must be equal to the required one in the; 888/// efficiency scan; 889/// 2. the background efficiency must be as small as possible; 890///; 891/// the requirement 1. has priority over 2.; 892 ; 893Double_t TMVA::MethodCuts::ComputeEstimator( std::vector<Double_t>& pars ); 894{; 895 // caution: the npar gives the _free_ parameters; 896 // however: the ""pars"" array contains all parameters; 897 ; 898 // determine cuts; 899 Double_t effS = 0, effB = 0;; 900 this->MatchParsToCuts( pars, &fTmpCutMin[0], &fTmpCutMax[0] );; 901 ; 902 // retrieve signal and background efficiencies for given cut; 903 switch (fEffMethod) {; 904 case kUsePDFs:; 905 this->GetEffsfromPDFs (&fTmpCutMin[0], &fTmpCutMax[0], effS, effB);; 906 break;; 907 case kUseEventSelection:; 908 this->GetEffsfromSelection (&fTmpCutMin[0], &fTmpCutMax[0], effS, effB);; 909 break;; 910 default:; 911 this->GetEffsfromSelection (&fTmpCutMin[0], &fTmpCutMax[0], effS, effB);; 912 }; 913 ; 914 Double_t eta = 0;; 915 ; 916 // test for a estimator function which optimizes on the whole background-rejection signal-efficiency plot; 917 ; 918 // get the backg-reject. and sig-eff for the parameters given to this function; 919 // effS, effB; 920 ; 921 // get best background rejection for given signal efficiency; 922 Int_t ibinS = fEffBvsSLocal->FindBin( effS );; 923 ; 924 Double_t effBH = fEffBvsSLocal->GetBinContent( ibinS );; 925 Double_t effBH_left = (ibinS > 1 ) ? fEffBvsSLocal->GetBinContent( ibinS-1 ) : effBH;; 926 Double_t effBH_right = (ibinS < fNbins) ? fEffBvsSLocal->GetBinContent( ibinS+1 ) : effBH;; 927 ; 928 Double_t average = 0.5*(effBH_left + effBH_right);; 929 if (effBH < e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:33662,test,test,33662,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['test'],['test']
Testability,"e_t font = 62, Option_t* axis = ""X""); voidSetLabelOffset(Float_t offset = 0.005, Option_t* axis = ""X""); voidSetLabelSize(Float_t size = 0.04, Option_t* axis = ""X""); voidSetLegendBorderSize(Width_t size = 4); voidSetLegendFillColor(Color_t color = 0); voidSetLegendFont(Style_t font = 62); voidSetLegoInnerR(Float_t rad = 0.5); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); voidSetLineScalePS(Float_t scale = 3); virtual voidTAttLine::SetLineStyle(Style_t lstyle); voidSetLineStyleString(Int_t i, const char* text); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNdivisions(Int_t n = 510, Option_t* axis = ""X""); voidSetNumberContours(Int_t number = 20); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptDate(Int_t datefl = 1); voidSetOptFile(Int_t file = 1); voidSetOptFit(Int_t fit = 1); voidSetOptLogx(Int_t logx = 1); voidSetOptLogy(Int_t logy = 1); voidSetOptLogz(Int_t logz = 1); voidSetOptStat(Int_t stat = 1); voidSetOptStat(Option_t* stat); voidSetOptTitle(Int_t tit = 1); voidSetPadBorderMode(Int_t mode = 1); voidSetPadBorderSize(Width_t size = 1); voidSetPadBottomMargin(Float_t margin = 0.1); voidSetPadColor(Color_t color = 19); voidSetPadGridX(Bool_t gridx); voidSetPadGridY(Bool_t gridy); voidSetPadLeftMargin(Float_t margin = 0.1); voidSetPadRightMargin(Float_t margin = 0.1); voidSetPadTickX(Int_t tickx); voidSetPadTickY(Int_t ticky); voidSetPadTopMargin(Float_t margin = 0.1); voidSetPaintTextFormat(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStyle.html:13256,log,logx,13256,root/html534/TStyle.html,https://root.cern,https://root.cern/root/html534/TStyle.html,3,['log'],"['logx', 'logy', 'logz']"
Testability,"e_t nTrainingSamples, const Data_t &testData, size_t nTestSamples, Net_t &net, Scalar_t momentum, size_t nThreads) -> Scalar_t;  ; template<typename Data_t , typename Net_t > ; Scalar_t TrainMomentum (const Data_t &TrainingDataIn, size_t nTrainingSamples, const Data_t &TestDataIn, size_t nTestSamples, Net_t &net, Scalar_t momentum, size_t nThreads=1);  Same as Train(...) but uses the given momentum. ;  . Private Attributes; size_t fBatchSize;  Batch size to use for the training. ;  ; size_t fConvergenceCount;  Current number of training epochs without. ;  ; size_t fConvergenceSteps;  Number of training epochs without considerable. ;  ; Scalar_t fLearningRate;  Learning rate \(\alpha\). ;  ; Scalar_t fMinimumError;  The minimum loss achieved on the training set during the current training session. ;  ; size_t fStepCount;  Number of steps performed in the current training session. ;  ; Scalar_t fTestError;  Holds the most recently computed test loss. ;  ; size_t fTestInterval;  Interval for the computation of the test error. ;  ; Scalar_t fTrainingError;  Holds the most recently computed training loss. ;  . #include <TMVA/DNN/Minimizers.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 59 of file Minimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 58 of file Minimizers.h. Constructor & Destructor Documentation. ◆ TGradientDescent() [1/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent. Definition at line 175 of file Minimizers.h. ◆ TGradientDescent() [2/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent ; (; Scalar_t ; learningRate, . size_t ; convergenceSteps, . size_t ; testInterval . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:5013,test,test,5013,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['test'],['test']
Testability,"e_t& err, Option_t* opt, Bool_t doerr = kFALSE) const; internal function compute integral and optionally the error between the limits; specified by the bin number values working for all histograms (1D, 2D and 3D). Double_t AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; this histogram and h2, using the Anderson-Darling 2 sample test.; The AD 2 sample test formula are derived from the paper; F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class; It is the same formula ( (6) in the paper), and also shown in this preprint; http://arxiv.org/pdf/0804.0380v1.pdf; Binned data are considered as un-binned data; with identical observation happening in the bin center. option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms. Double_t AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; Same funciton as above but returning also the test statistic value. Double_t KolmogorovTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; this histogram and h2, using Kolmogorov test.; Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data; and not for binned data as in the case of the histogram (see NOTE 3 below).; So, before using this method blindly, read the NOTE 3. Default: Ignore under- and overflow bins in comparison. option is a character string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:114489,test,test,114489,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,6,['test'],['test']
Testability,"e_t,Bool_t> iterator;; 815 // In the end iterator we store the bitset pointer; 816 // and do not use the 'second' part of the pair.; 817 // In the other iterator we store the index; 818 // and the value.; 819 ; 820 static void create(void *coll, void **begin_arena, void **end_arena, TVirtualCollectionProxy*) {; 821 iterator *begin = new (*begin_arena) iterator;; 822 begin->first.fIndex = 0;; 823 begin->second = false;; 824 iterator *end = new (*end_arena) iterator;; 825 end->first.fAddress = coll;; 826 end->second = false;; 827 }; 828 static void* copy(void *dest_arena, const void *source_ptr) {; 829 const iterator *source = (const iterator *)(source_ptr);; 830 new (dest_arena) iterator(*source);; 831 return dest_arena;; 832 }; 833 static void* next(void *iter_loc, const void *end_loc) {; 834 const iterator *end = (const iterator *)(end_loc);; 835 PCont_t c = (PCont_t)end->first.fAddress;; 836 iterator *iter = (iterator *)(iter_loc);; 837 if (iter->first.fIndex != c->size()) {; 838 iter->second = c->test(iter->first.fIndex);; 839 ++(iter->first.fIndex);; 840 return &(iter->second);; 841 } else {; 842 return nullptr;; 843 }; 844 }; 845 static void destruct1(void *iter_ptr) {; 846 iterator *start = (iterator *)(iter_ptr);; 847 start->~iterator();; 848 }; 849 static void destruct2(void *begin_ptr, void *end_ptr) {; 850 iterator *start = (iterator *)(begin_ptr);; 851 iterator *end = (iterator *)(end_ptr);; 852 start->~iterator();; 853 end->~iterator();; 854 }; 855 };; 856 typedef Iterators Iterators_t;; 857 };; 858 ; 859 template <typename Bitset_t>; 860 struct TCollectionProxyInfo::Pushback<Internal::TStdBitsetHelper<Bitset_t> > : public TCollectionProxyInfo::Type<Internal::TStdBitsetHelper<Bitset_t> > {; 861 using InfoBase_t = TCollectionProxyInfo::Type<Internal::TStdBitsetHelper<Bitset_t> >;; 862 using typename InfoBase_t::Cont_t;; 863 using typename InfoBase_t::Iter_t;; 864 using typename InfoBase_t::Value_t;; 865 using typename InfoBase_t::Env_t;; 866 using typename",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:29254,test,test,29254,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['test'],['test']
Testability,"e_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tmustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:26204,test,testArg,26204,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,1,['test'],['testArg']
Testability,"e_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tmustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsPdf&operator=(const RooAbsPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:25733,test,testArg,25733,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,2,['test'],['testArg']
Testability,"e_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); virtual Int_tnumBins(const char* rangeName = 0) const; virtual Int_tnumBins(const RooAbsBinning& binning) const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual RooAbsArg&operator=(const RooAbsReal& other); virtual RooAbsArg&operator=(Double_t newValue); virtual RooAbsArg&operator=(Int_t ival); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsRealLValue.html:20354,test,testArg,20354,root/html526/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html526/RooAbsRealLValue.html,2,['test'],['testArg']
Testability,"e_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); virtual Int_tnumBins(const char* rangeName = 0) const; virtual Int_tnumBins(const RooAbsBinning& binning) const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual RooAbsArg&operator=(const RooAbsReal& other); virtual RooAbsArg&operator=(Double_t newValue); virtual RooAbsArg&operator=(Int_t ival); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsRealLValue.html:20721,test,testArg,20721,root/html530/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html530/RooAbsRealLValue.html,2,['test'],['testArg']
Testability,"e_tTF1::GetChisquare() const; virtual Int_tGetContour(Double_t* levels = 0); virtual Double_tGetContourLevel(Int_t level) const; static TF1*TF1::GetCurrent(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Double_tTF1::GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*TF1::GetMethodCall() const; virtual Double_tTF1::GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual voidGetMinimumXY(Double_t& x, Double_t& y); virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTF1::GetNpx() const; Int_tGetNpy() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF2.html:5622,log,logx,5622,root/html530/TF2.html,https://root.cern,https://root.cern/root/html530/TF2.html,2,['log'],['logx']
Testability,"e_tTGeoBBox::fOrigin[3]box origin; Double_tTGeoTube::fRmaxouter radius; Double_tTGeoTube::fRmininner radius; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoEltu(); Dummy constructor. TGeoEltu(Double_t a, Double_t b, Double_t dz); Default constructor specifying X and Y semiaxis length. TGeoEltu(const char* name, Double_t a, Double_t b, Double_t dz); Default constructor specifying X and Y semiaxis length. TGeoEltu(Double_t* params); Default constructor specifying minimum and maximum radius; param[0] = A; param[1] = B; param[2] = dz. ~TGeoEltu(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside the elliptical tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each vertex. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the tube. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube and safe distance. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide the shape along one axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoEltu.html:12755,test,test,12755,root/html528/TGeoEltu.html,https://root.cern,https://root.cern/root/html528/TGeoEltu.html,3,['test'],['test']
Testability,"ea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetDimensions (Double_t *param) override;  ; void Sizeof3D () const override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsComposite () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScaledShape.html:6543,test,testNo,6543,doc/master/classTGeoScaledShape.html,https://root.cern,https://root.cern/doc/master/classTGeoScaledShape.html,1,['test'],['testNo']
Testability,"ea style; Bool_tfFixedAspectRatioTrue if fixed aspect ratio; TFrame*fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tfGLDevice! OpenGL off-screen pixmap identifier; Bool_tfGridxSet to true if grid along X; Bool_tfGridySet to true if grid along Y; Double_tfHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfLogx(=0 if X linear scale, =1 if log scale); Int_tfLogy(=0 if Y linear scale, =1 if log scale); Int_tfLogz(=0 if Z linear scale, =1 if log scale); Bool_tfModifiedSet to true when pad is modified; TPad*fMother! pointer to mother of the list; TStringfNamePad name; Int_tfNumberpad number identifier; Int_tfPadPaintSet to 1 while painting the pad; TObject*fPadPointer! free pointer; TObject*fPadView3D! 3D View of this TPad; Double_tfPhiphi angle to view as lego/surface; Double_tfPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tfPixeltoXkConversion coefficient for pixel to X World; Double_tfPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tfPixeltoYkConversion coefficient for pixel to Y World; Int_tfPixmapID! Off-screen pixmap identifier; TList*fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Double_tfThetatheta angle to view as lego/surface; Int_tfTickx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:25300,log,log,25300,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,6,['log'],['log']
Testability,"ead n-tuples in distinct workers, fill histograms, merge them and fit ;  mp103_processSelector.C Illustrate the usage of the multiproc TSelector interfaces with the h1 analysis example ;  mp201_parallelHistoFill.C Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach ;  mt001_fillHistos.CFill histograms in parallel and write them on file ;  mt101_fillNtuples.CFill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.CRead n-tuples in distinct workers, fill histograms, merge them and fit ;  mt201_parallelHistoFill.CParallel fill of a histogram ;  mtbb001_fillHistos.CFill histograms in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:133680,test,test,133680,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['test']
Testability,"eads to resize of element with JSROOT drawing, one should call resize() to let JSROOT adjust drawing size. One should do:; resize(""drawing"");; As second argument one could specify exact size for draw elements like:; resize(""drawing"", { width: 500, height: 200 });; To correctly cleanup JSROOT drawings from HTML element, one should call:; cleanup(""drawing"");; 1.11.4 File API; JSROOT defines the TFile class, which can be used to access binary ROOT files. One should always remember that all I/O operations are asynchronous in JSROOT. Therefore promises are used to retrieve results when the I/O operation is completed. For example, reading an object from a file and displaying it will look like:; import { openFile, draw } from 'https://root.cern/js/latest/modules/main.mjs';; let filename = ""https://root.cern/js/files/hsimple.root"";; let file = await openFile(filename);; let obj = await file.readObject(""hpxpy;1"");; await draw(""drawing"", obj, ""colz"");; console.log('drawing completed');; Here is running example and source code; 1.11.5 TTree API; Simple TTree::Draw operation can be performed with following code:; import { openFile } from 'https://root.cern/js/latest/modules/io.mjs';; import { draw } from 'https://root.cern/js/latest/modules/draw.mjs';; let file = await openFile(""https://root.cern/js/files/hsimple.root"");; let tree = await file.readObject(""ntuple;1"");; draw(""drawing"", tree, ""px:py::pz>5"");; To get access to selected branches, one should use TSelector class:; import { openFile } from 'https://root.cern/js/latest/modules/io.mjs';; import { draw } from 'https://root.cern/js/latest/modules/draw.mjs';; import { TSelector, treeProcess } from 'https://root.cern/js/latest/modules/tree.mjs';. let file = await openFile(""https://root.cern/js/files/hsimple.root"");; let tree = await file.readObject(""ntuple;1"");; let selector = new TSelector();. selector.AddBranch(""px"");; selector.AddBranch(""py"");. let cnt = 0, sumpx = 0, sumpy = 0;. selector.Begin = function() {; // function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:28471,log,log,28471,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['log'],['log']
Testability,"eal for rotated shapes.; As we need to support orientated (rotated) bounding boxes, TBuffer3D requires the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(), for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference frames: fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer (bounding box and tessellation vertexes) are in local or master (world frame). fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering) for placing the object into the 3D master frame.; If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This is set by default, and can be reset using SetLocalMasterIdentity() function.; Logical & Physical Objects. There are two cases of object addition:. Add this object as a single independent entity in the world reference frame.; Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have very large number repeated placements of relatively few logical (unique) shapes. Some viewers (OpenGL only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching with considerable performance gains in these cases.; For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. The viewer indicates this through the interface method; PreferLocalFrame(); If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:5271,log,logical,5271,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['log'],['logical']
Testability,"eal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tminDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tmustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:24749,test,testArg,24749,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['test'],['testArg']
Testability,"ealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsReal&model() const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:23701,test,testArg,23701,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,1,['test'],['testArg']
Testability,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:47647,log,logEvalError,47647,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,3,['log'],"['logEvalError', 'logging']"
Testability,"eam. Multiple message streams can write to same c++ stream. The return value is the unique ID code of the defined stream. void deleteStream(Int_t id); Delete stream with given unique ID code. void setStreamStatus(Int_t id, Bool_t active); (De)Activate stream with given unique ID. Bool_t getStreamStatus(Int_t id) const; Get activation status of stream with given unique ID. RooMsgService& instance(); Return reference to singleton instance. void saveState(); Save current state of message service. void restoreState(); Restore last saved state of message service. Bool_t isActive(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMsgService.html:10767,log,logging,10767,root/html528/RooMsgService.html,https://root.cern,https://root.cern/root/html528/RooMsgService.html,6,['log'],['logging']
Testability,"eamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. void Initialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. void SetNuisanceParameters(const RooArgSet& ); REMOVE THIS; specify the parameters of interest in the interval; virtual void SetParameters(const RooArgSet&) = 0;; specify the nuisance parameters (eg. the rest of the parameters). void SetObservables(const RooArgSet& ); specify the observables in the dataset (needed to evaluate the test statistic). void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). void SetTestStatistic(RooStats::TestStatistic* testStatistic); Set the TestStatistic (want the argument to be a function of the data & parameter points. void SetSamplingDistName(const char* name); Set the name of the sampling distribution used for plotting. » A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__TestStatSampler.html:2808,test,test,2808,root/html534/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__TestStatSampler.html,1,['test'],['test']
Testability,"eamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TGLScene;  TGLScene ();  ;  ~TGLScene () override;  Destroy scene objects. ;  ; virtual void AdoptLogical (TGLLogicalShape &shape);  Adopt dynamically created logical 'shape' - add to internal map and take responsibility for deleting. ;  ; virtual void AdoptPhysical (TGLPhysicalShape &shape);  Adopt dynamically created physical 'shape' - add to internal map and take responsibility for deleting. ;  ; UInt_t BeginSmartRefresh ();  Moves logicals that support smart-refresh to intermediate cache. ;  ; virtual Bool_t BeginUpdate ();  Put scene in update mode, return true if lock acquired. ;  ; void CalcBoundingBox () const override;  Encapsulates all physical shapes bounding box with axes aligned box. ;  ; TSceneInfo * CreateSceneInfo (TGLViewerBase *view) override;  Create a scene-info instance appropriate for this scene class. ;  ; virtual Bool_t DestroyLogical (TObject *logid, Bool_t mustFind=kTRUE);  Destroy logical shape defined by unique 'ID'. ;  ; virtual Int_t DestroyLogicals ();  Destroy all logical shapes in scene. ;  ; virtual Bool_t DestroyPhysical (UInt_t phid);  Destroy physical shape defined by unique 'ID'. ;  ; virtual Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:11135,log,logical,11135,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['log'],['logical']
Testability,"eans return the working durectory for the default drive. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddStdExceptionHandler (TStdExceptionHandler *eh);  Add an exception handler to list of system exception handlers. ;  ; void Beep (Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE);  Beep for duration milliseconds with a tone of frequency freq. ;  ; Bool_t cd (const char *path);  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; char * DynamicPathName (const char *lib, Bool_t quiet=kFALSE);  Find a dynamic library called lib using the system search paths. ;  ; virtual Func_t DynFindSymbol (const char *module, const char *entry);  Find specific entry point in specified library. ;  ; virtual EAclicMode GetAclicMode () const;  AclicMode indicates whether the library should be built in debug mode or optimized. ;  ; virtual Int_t GetAclicProperties () const;  Return the ACLiC properties field. ;  ; void GetBeepDefaults (Int_t &freq, Int_t &duration) const;  ; virtual const char * GetBuildArch (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:14817,log,log,14817,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['log'],['log']
Testability,"eap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::PDEFoam; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILITY: split cells according to decision tree logic. ;  ; Int_t fEvPerBin;  Maximum number of effective (wt=1) events per bin. ;  ; Bool_t fFillFoamWithOrigWeights;  BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ;  ; EFoamType fFoamType;  BACKWARDS COMPATIBILITY: type of foam. ;  ; TObjArray * fHistEdg;  Histograms of wt, one for each cell edge. ;  ; Int_t * fInhiDiv;  ! [fDim] Flags for inhibiting cell division ;  ; Int_t fLastCe;  Index of the last cell. ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t * fMaskDiv;  ! [fDim] Dynamic Mask for cell division ;  ; UInt_t fMaxDepth;  maximum depth of cell tree ;  ; TString fName;  Name of a given instance of the FOAM class. ;  ; Int_t fNBin;  No. of bins in the edge histogram for cell MC exploration. ;  ; Int_t fNCells;  Maximum number of cells. ;  ; UInt_t fNElements;  BACKWARDS COMPATIBILITY: number of variables in every cell. ;  ; UInt_t fNmin;  minimal number of events in c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamEvent.html:16826,log,logic,16826,doc/master/classTMVA_1_1PDEFoamEvent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamEvent.html,1,['log'],['logic']
Testability,"ear = f1->IsLinear();; 159 Int_t npar = f1->GetNpar();; 160 if (special==299+npar) linear = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fitOption.Gradient || fitOption.More || fitOption.User|| fitOption.Integral || fitOption.Minuit); 163 linear = kFALSE;; 164 ; 165 // create an empty TFitResult; 166 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 167 // create the fitter from an empty fit result; 168 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:6305,log,log-likelihood,6305,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['log'],['log-likelihood']
Testability,"ear();; 1445 ; 1446 if (mixMode == ""RANDOM"") {; 1447 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""shuffling events""<<Endl;; 1448 ; 1449 std::shuffle(trainingEventVector->begin(), trainingEventVector->end(), rndm);; 1450 std::shuffle(testingEventVector->begin(), testingEventVector->end(), rndm);; 1451 }; 1452 ; 1453 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""trainingEventVector "" << trainingEventVector->size() << Endl;; 1454 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""testingEventVector "" << testingEventVector->size() << Endl;; 1455 ; 1456 // create dataset; 1457 DataSet* ds = new DataSet(dsi);; 1458 ; 1459 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal training tree"" << Endl;; 1460 ds->SetEventCollection(trainingEventVector, Types::kTraining );; 1461 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal testing tree"" << Endl;; 1462 ds->SetEventCollection(testingEventVector, Types::kTesting );; 1463 ; 1464 ; 1465 if (ds->GetNTrainingEvents() < 1){; 1466 Log() << kFATAL << ""Dataset "" << std::string(dsi.GetName()) << "" does not have any training events, I better stop here and let you fix that one first "" << Endl;; 1467 }; 1468 ; 1469 if (ds->GetNTestEvents() < 1) {; 1470 Log() << kERROR << ""Dataset "" << std::string(dsi.GetName()) << "" does not have any testing events, guess that will cause problems later..but for now, I continue "" << Endl;; 1471 }; 1472 ; 1473 delete trainingEventVector;; 1474 delete testingEventVector;; 1475 return ds;; 1476 ; 1477}; 1478 ; 1479////////////////////////////////////////////////////////////////////////////////; 1480/// renormalisation of the TRAINING event weights; 1481/// - none (kind of obvious) .. use the weights as supplied by the; 1482/// user.. (we store however the relative weight for later use); 1483/// - numEvents; 1484/// - equalNumEvents reweight the training events such that the sum of all; 1485/// backgr. (class > 0) weights e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:66593,test,testing,66593,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,2,['test'],"['testing', 'testingEventVector']"
Testability,"earValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinningCategory.html:3098,test,testArg,3098,root/html532/RooBinningCategory.html,https://root.cern,https://root.cern/root/html532/RooBinningCategory.html,6,['test'],['testArg']
Testability,ease 5.12/00d - 2006-09-02. Release 5.12/00 - 2006-07-14. Release 5.11/06 - 2006-06-07. Release 5.11/04 - 2006-05-31. Release 5.11/02 - 2006-05-08. Release 5.10/00 - 2006-03-02. Release 5.08/00 - 2005-12-15. Release 5.06/00 - 2005-10-31. Release 5.04/00 - 2005-09-20. Release 5.02/00 - 2005-07-05. Version 4 ; ; Release 4.04/02 - 2005-05-14. Release 4.03/04 - 2005-04-06. Release 4.03/02 - 2005-02-10. Release 4.02/00 - 2004-12-17. Release 4.01/04 - 2004-11-20. Release 4.01/02 - 2004-09-24. Release 4.00/08 - 2004-07-11. Release 4.00/06a - 2004-07-11. Release 4.00/06 - 2004-07-11. Release 4.00/04 - 2004-05-04. Release 4.00/03 - 2004-03-25. Release 4.00/02 - 2004-02-20. Release 4.00/01 - 2004-02-02. Version 3 ; ; Release 3.10/02 - 2004-01-23. Release 3.10/01a - 2004-01-23. Release 3.10/01 - 2004-01-23. Release 3.05/07a - 2003-08-06. Release 3.05/07 - 2003-07-27. Release 3.05/06 - 2003-07-18. Release 3.05/05 - 2003-05-08. Release 3.05/04 - 2003-04-21. Release 3.05/03 - 2003-03-11. Release 3.05/02 - 2003-02-12. Release 3.04/02 - 2002-12-18. Release 3.04/01 - 2002-12-11. Release 3.03/09b - 2002-11-05. Release 3.03/09a - 2002-10-31. Release 3.03/09 - 2002-09-18. Release 3.02/07 - 2002-02-06. . Release notes can be found on the respective release page; release notes for old releases can be found here. ; . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/releases.html:8626,test,tests,8626,d/releases.html,https://root.cern,https://root.cern/d/releases.html,1,['test'],['tests']
Testability,"easured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . or multiple times in a scan to determine the best chouce of tau, method ScanTau() . Unfolding results are retrieved using various GetXXX() methods . A detailed documentation of the various GetXXX() methods to control systematic uncertainties is given with the method TUnfoldSys.; Why to use complex binning schemes; in literature on unfolding, the ""standard"" test case is a one-dimensional distribution without underflow or overflow bins. The migration matrix is almost diagonal. ; This ""standard"" case is rarely realized for real problems. ; Often one has to deal with multi-dimensional distributions. In addition, there are underflow and overflow bins or other background bins, possibly determined with the help of auxillary measurements. ; In TUnfoldDensity, such complex binning schemes are handled with the help of the class TUnfoldBinning. For both the measurement and the truth there is a tree structure. The tree nodes may correspond to single bins (e.g. nuisance parameters) or may hold multi-dimensional distributions. ; For example, the ""measurement"" tree could have two leaves, one for the primary distribution and one for auxillary measurements. Similarly, the ""truth"" tree could have two leaves, one for the signal and one for the background. Each of the leaves may then have a multi-dimensional distribution. ; The class TUnfoldBinning takes c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:2483,test,test,2483,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['test'],['test']
Testability,"eate a new volume by dividing an existing one. NAME Volume name; MOTHER Mother volume name; NDIV Number of divisions; IAXIS Axis value. X,Y,Z of CAXIS will be translated to 1,2,3 for IAXIS.; It divides a previously defined volume. void Gsdvn2(const char* name, const char* mother, Int_t ndiv, Int_t iaxis, Double_t c0i, Int_t numed). Create a new volume by dividing an existing one. Divides mother into ndiv divisions called name; along axis iaxis starting at coordinate value c0.; the new volume created will be medium number numed. void Gsdvt(const char* name, const char* mother, Double_t step, Int_t iaxis, Int_t numed, Int_t ndvmx). Create a new volume by dividing an existing one. Divides MOTHER into divisions called NAME along; axis IAXIS in steps of STEP. If not exactly divisible; will make as many as possible and will centre them; with respect to the mother. Divisions will have medium; number NUMED. If NUMED is 0, NUMED of MOTHER is taken.; NDVMX is the expected maximum number of divisions; (If 0, no protection tests are performed). void Gsdvt2(const char* name, const char* mother, Double_t step, Int_t iaxis, Double_t c0, Int_t numed, Int_t ndvmx). Create a new volume by dividing an existing one. Divides MOTHER into divisions called NAME along; axis IAXIS starting at coordinate value C0 with step; size STEP.; The new volume created will have medium number NUMED.; If NUMED is 0, NUMED of mother is taken.; NDVMX is the expected maximum number of divisions; (If 0, no protection tests are performed). void Gsord(const char* name, Int_t iax). Flags volume CHNAME whose contents will have to be ordered; along axis IAX, by setting the search flag to -IAX; IAX = 1 X axis; IAX = 2 Y axis; IAX = 3 Z axis; IAX = 4 Rxy (static ordering only -> GTMEDI); IAX = 14 Rxy (also dynamic ordering -> GTNEXT); IAX = 5 Rxyz (static ordering only -> GTMEDI); IAX = 15 Rxyz (also dynamic ordering -> GTNEXT); IAX = 6 PHI (PHI=0 => X axis); IAX = 7 THETA (THETA=0 => Z axis). void Gspos(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMCGeometry.html:15526,test,tests,15526,root/html528/TGeoMCGeometry.html,https://root.cern,https://root.cern/root/html528/TGeoMCGeometry.html,6,['test'],['tests']
Testability,"eate a new volume by dividing an existing one.; It divides a previously defined volume; name Volume name; mother Mother volume name; ndiv Number of divisions; iaxis Axis value:; X,Y,Z of CAXIS will be translated to 1,2,3 for IAXIS.; Create a new volume by dividing an existing one.; Divide mother into ndiv divisions called name; along axis iaxis starting at coordinate value c0i.; The new volume created will be medium number numed. void Gsdvt2(const char* name, const char* mother, Double_t step, Int_t iaxis, Double_t c0, Int_t numed, Int_t ndvmx); Create a new volume by dividing an existing one; Divide mother into divisions called name along; axis iaxis in steps of step. If not exactly divisible; will make as many as possible and will center them; with respect to the mother. Divisions will have medium; number numed. If numed is 0, numed of mother is taken.; ndvmx is the expected maximum number of divisions; (If 0, no protection tests are performed in Geant3); Create a new volume by dividing an existing one; Divides mother into divisions called name along; axis iaxis starting at coordinate value c0 with step; size step.; The new volume created will have medium number numed.; If numed is 0, numed of mother is taken.; ndvmx is the expected maximum number of divisions; (If 0, no protection tests are performed in Geant3). void Gspos(const char* name, Int_t nr, const char* mother, Double_t x, Double_t y, Double_t z, Int_t irot, const char* konly = ""ONLY""); Flag volume name whose contents will have to be ordered; along axis iax, by setting the search flag to -iax; (Geant3 only); Position a volume into an existing one.; It positions a previously defined volume in the mother.; name Volume name; nr Copy number of the volume; mother Mother volume name; x X coord. of the volume in mother ref. sys.; y Y coord. of the volume in mother ref. sys.; z Z coord. of the volume in mother ref. sys.; irot Rotation matrix number w.r.t. mother ref. sys.; konly ONLY/MANY flag. void Gsposp(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMCGeometry.html:12834,test,tests,12834,root/html528/TVirtualMCGeometry.html,https://root.cern,https://root.cern/root/html528/TVirtualMCGeometry.html,6,['test'],['tests']
Testability,"eate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = 0;; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; TBranchElementA Branch for the case of an object.Definition TBranchElement.h:39; TBranch::TTreefriend class TTreeDefinition TBranch.h:99; TBranch::FillInt_t Fill()Definition TBranch.h:205; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Notice that the only difference between this example and the following example is that the event pointer is zero when the branch is created.; An example of a branch with an object allocated and owned by the caller: TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = new Event();; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;; If AutoDelete is on (see TBranch::SetAutoDelete), the top level objet will be deleted and recreate each time an entry is read, whether or not the TTree owns the object. ; Reimplemented from TBranch.; Definition at line 4962 of file TBranchElement.cxx. ◆ SetAddressImpl(). void TBranchElement::SetAddressImpl ; (; void * ; addr, . bool ; implied . ). overrideprotectedvirtual . See TBranchElement::SetAddress. ; If implied is true, we do not over-ride existing address for sub-branches. ; Reimplemented from TBranch.; Definition at line 4970 of file TBranchElement.cxx. ◆ SetBasketSize(). void TBranchElement::SetBasketSize ; (; Int_t ; buffsize). overridevirtual . Reset the basket size for all sub-branches of this branch eleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:69853,test,test,69853,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['test'],['test']
Testability,eated by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*_funcClonePointer to internal clone of input function; RooArgSet*_funcCloneSetSet owning all components of internal clone of input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooArgSet*_normSetPointer to set with observables used for normalization; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; TListRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; TString_sealNoticeUser-defined notice shown when reading a sealed likelihood ; Bool_t_sealedIs test statistic sealed -- i.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsOptTestStatistic.html:34117,test,test,34117,root/html528/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsOptTestStatistic.html,3,['test'],['test']
Testability,"eates a tree header (a tree with nonexisting files) object for; the DataSet. TDrawFeedback * CreateDrawFeedback(); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. TList * GetOutputNames(); FIXME: to be written. void Browse(TBrowser* b); Build the PROOF's structure in the browser. void SetPlayer(TVirtualProofPlayer* player); Set a new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is remote. Socket is needed in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent back. TMacro * GetLastLog(); Fill a TMacro with the log lines since the last reading (fLogFileR); Return (TMacro *)0 if no line was logged.; The returned TMacro must be deleted by the caller. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:75868,log,logs,75868,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['log'],['logs']
Testability,"eatmapAnalyzer(). RooFit::MultiProcess::HeatmapAnalyzer::HeatmapAnalyzer ; (; std::string const & ; logs_dir). HeatmapAnalyzer Constructor. ; This method reads the input files in the folder specified by the user and creates internal attributes used by the other methods in this class. Parameters. [in]logs_dirDirectory where log files are stored in the format outputted by RooFit::MultiProcess::ProcessTimer. There can be other files in this directory as well. . Definition at line 95 of file HeatmapAnalyzer.cxx. ◆ ~HeatmapAnalyzer(). RooFit::MultiProcess::HeatmapAnalyzer::~HeatmapAnalyzer ; (; ). default . Member Function Documentation. ◆ analyze(). std::unique_ptr< TH2I > RooFit::MultiProcess::HeatmapAnalyzer::analyze ; (; int ; analyzed_gradient). This method is the main functionality in this class. ; It does the heavy lifting of matching duration timestamps to tasks and partition evaluations. Parameters. [in]analyzed_gradientGradient to analyze. For example, setting to 1 analyzes the first gradient (ordered by time) in the logs. . Definition at line 144 of file HeatmapAnalyzer.cxx. ◆ getMetadata(). std::vector< std::string > const RooFit::MultiProcess::HeatmapAnalyzer::getMetadata ; (; ). Definition at line 226 of file HeatmapAnalyzer.cxx. ◆ getPartitionNames(). std::vector< std::string > const RooFit::MultiProcess::HeatmapAnalyzer::getPartitionNames ; (; ). Definition at line 221 of file HeatmapAnalyzer.cxx. ◆ getTaskNames(). std::vector< std::string > const RooFit::MultiProcess::HeatmapAnalyzer::getTaskNames ; (; ). Definition at line 216 of file HeatmapAnalyzer.cxx. Member Data Documentation. ◆ eval_partitions_names_. std::vector<std::string> RooFit::MultiProcess::HeatmapAnalyzer::eval_partitions_names_. private . Definition at line 51 of file HeatmapAnalyzer.h. ◆ jsonData_. std::unique_ptr<Detail::HeatmapAnalyzerJsonData> RooFit::MultiProcess::HeatmapAnalyzer::jsonData_. private . Definition at line 49 of file HeatmapAnalyzer.h. ◆ matrix_. TH2I RooFit::MultiProces",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html:2929,log,logs,2929,doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,1,['log'],['logs']
Testability,"ec); Effective Time to Write (MB/sec); Total Time to Read All (MB/sec); Total Time to Read Sample (MB/sec). Comp = 0; Split = 1; 19.75 MB; 6.84 s.(2.8 MB/s); 3.56 s.(5.4 MB/s); 0.79s.(24.2 MB/s); 0.79 s.(24.2 MB/s). Comp = 1; Split = 1; 17.73 MB; 6.44 s.(3.0 MB/s); 4.02 s.(4.8 MB/s); 0.90 s.(21.3 MB/s); 0.90 s.(21.3 MB/s). Comp = 2; Split = 1; 13.78 MB; 11.34s.(1.7 MB/s); 9.51 s.(2.0 MB/s); 2.17 s.(8.8 MB/s); 2.17 s.(8.8 MB/s). The Total Time is the real time in seconds to run the program. Effective time is the real time minus the time spent in non I/O operations (essentially the random number generator). The program Event generates in average 600 tracks per event. Each track has 17 data members. The read benchmark runs in the interactive version of ROOT. The ‘Total Time to Read All’ is the real time reported by the execution of the script &ROOTSYS/test/eventa.; We did not correct this time for the overhead coming from the interpreter itself. The Total time to read sample is the execution time of the script $ROOTSYS/test/eventb. This script loops on all events. For each event, the branch containing the number of tracks is read. In case the number of tracks is less than 585, the full event is read in memory. This test is obviously not possible in non-split mode. In non-split mode, the full event must be read in memory. The times reported in the table correspond to complete I/O operations necessary to deal with machine independent binary files. On Linux, this also includes byte-swapping operations. The ROOT file allows for direct access to any event in the file and direct access to any part of an event when split=1.; Note also that the uncompressed file generated with split=0 is 48.7 Mbytes and only 47.17 Mbytes for the option split=1. The difference in size is due to the object identification mechanism overhead when the event is written to a single buffer. This overhead does not exist in split mode because the branch buffers are optimized for homogeneous data types. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:650000,test,test,650000,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"eckConflict . Definition at line 38 of file TSchemaRuleSet.h. Constructor & Destructor Documentation. ◆ TSchemaRuleSet(). TSchemaRuleSet::TSchemaRuleSet ; (; ). Default constructor. ; Definition at line 28 of file TSchemaRuleSet.cxx. ◆ ~TSchemaRuleSet(). TSchemaRuleSet::~TSchemaRuleSet ; (; ). virtual . Destructor. ; Definition at line 40 of file TSchemaRuleSet.cxx. Member Function Documentation. ◆ AddRule(). Bool_t TSchemaRuleSet::AddRule ; (; TSchemaRule * ; rule, . EConsistencyCheck ; checkConsistency = kCheckAll, . TString * ; errmsg = nullptr . ). The consistency check always fails if the TClass object was not set! if checkConsistency is: kNoCheck: no check is done, register the rule as is kCheckConflict: check only for conflicting rules kCheckAll: check for conflict and check for rule about members that are not in the current class layout. ; return kTRUE if the layout is accepted, in which case we take ownership of the rule object. return kFALSE if the rule failed one of the test, the rule now needs to be deleted by the caller. ; Definition at line 81 of file TSchemaRuleSet.cxx. ◆ AddRules(). Bool_t TSchemaRuleSet::AddRules ; (; TSchemaRuleSet * ; rules, . EConsistencyCheck ; checkConsistency = kCheckAll, . TString * ; errmsg = nullptr . ). Definition at line 66 of file TSchemaRuleSet.cxx. ◆ AsString(). void TSchemaRuleSet::AsString ; (; TString & ; out); const. Fill the string 'out' with the string representation of the rule. ; Definition at line 186 of file TSchemaRuleSet.cxx. ◆ Class(). static TClass * ROOT::Detail::TSchemaRuleSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Detail::TSchemaRuleSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Detail::TSchemaRuleSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file TSchemaRuleSet.h. ◆ DeclFileName(). static const char * ROOT::Detai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:13664,test,test,13664,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,1,['test'],['test']
Testability,"ecksPerVolume(TGeoVolume* vol); Compute number of overlaps combinations to check per volume. void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.1, Option_t* option = """"); Check illegal overlaps for volume VOL within a limit OVLP. void PrintOverlaps() const; Print the current list of overlaps held by the manager class. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); --- Draw point (x,y,z) over the picture of the daughers of the volume containing this point.; Generates a report regarding the path to the node containing this point and the distance to; the closest boundary. void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2); 2: Safety test. Sample points inside the bounding and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; Distance to boundary is bigger than safety. void ShapeDistances(TGeoShape* shape, Int_t nsamples, Option_t* option); Test TGeoShape::DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute d1 = DistFromInside and move the; point on the boundary. Compute DistFromOutside and propagate with d2 making sure that; the shape is not re-entered. Swap direction and call DistFromOutside that; should fall back on the same point on the boundary (at d2). Propagate back on boundary; then compute DistFromInside that should be bigger than d1.; Plot d-(d1+d2). void ShapeSafety(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of safe distance for a given shape.; Sample points inside the 2x bounding box and compute safety. Generate; directions randomly in cos(theta) and compu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoChecker.html:14866,test,test,14866,root/html530/TGeoChecker.html,https://root.cern,https://root.cern/root/html530/TGeoChecker.html,3,['test'],['test']
Testability,"eclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Double_t GetBoxVolume ();  Returns the volume of range searching box fBox. ;  ; MsgLogger & Log () const;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; BinarySearchTree * fBst;  Binary tree to find events within a volume. ;  ; MsgLogger * fLogger;  ! message logger ;  . Private Attributes; std::vector< Double_t > fBox;  range-searching box ;  ; Bool_t fBoxHasChanged;  range searching box has changed ;  ; Double_t fBoxVolume;  volume of range searching box ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/PDEFoamDen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html:10652,log,logger,10652,doc/master/classTMVA_1_1PDEFoamDensityBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html,1,['log'],['logger']
Testability,"econd canvas shows a projection type given as option. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:16531,test,test,16531,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['test'],['test']
Testability,"ect. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:19786,test,testArg,19786,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,2,['test'],['testArg']
Testability,"ect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run bef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:173728,benchmark,benchmarks,173728,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['benchmark'],['benchmarks']
Testability,"ect::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamDiscriminant.html:10305,log,logic,10305,root/html602/TMVA__PDEFoamDiscriminant.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamDiscriminant.html,2,['log'],['logic']
Testability,"ect::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tRooAbsArg::isCloneOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsOptTestStatistic::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooChi2Var.html:18230,log,logEvalError,18230,root/html528/RooChi2Var.html,https://root.cern,https://root.cern/root/html528/RooChi2Var.html,4,['log'],['logEvalError']
Testability,"ect::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tRooAbsArg::isCloneOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tisDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tisSealed() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsOptTestStatistic.html:17363,log,logEvalError,17363,root/html528/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsOptTestStatistic.html,2,['log'],['logEvalError']
Testability,"ect::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tisJacobianOK(const RooArgSet& depList) const; virtual Bool_tisLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tisValidReal(Double_t value, Bool_t printError = kFALSE) const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; virtual Double_tjacobian() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); virtual Int_tnumBins(const char* rangeName = 0) const; virtual Int_tnumBins(const RooAbsBinning& binning) const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalError",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsRealLValue.html:19170,log,logEvalError,19170,root/html526/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html526/RooAbsRealLValue.html,3,['log'],['logEvalError']
Testability,"ect::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidSetTestSignalEfficiency(Double_t effS); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodCuts.html:14501,test,testTime,14501,root/html602/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodCuts.html,2,['test'],['testTime']
Testability,"ect::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidSetTestSignalEfficiency(Double_t effS); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodCuts.html:13742,test,testTime,13742,root/html534/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodCuts.html,1,['test'],['testTime']
Testability,"ect::SetObjectStat(Bool_t stat); voidsetPrintEvalErrors(Int_t numEvalErrors); Int_tsetPrintLevel(Int_t newLevel); voidsetProfile(Bool_t flag = kTRUE); voidsetStrategy(Int_t strat); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t flag = kTRUE); virtual voidShowMembers(TMemberInspector& insp); Int_tsimplex(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidapplyCovarianceMatrix(TMatrixDSym& V); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Int_tgetNPar() const; ofstream*logfile() const; voidTObject::MakeZombie(); Double_t&maxFCN(); voidprofileStart(); voidprofileStop(). private:. RooMinimizer(const RooMinimizer&). Data Members; public:. enum Strategy { Speed; Balance; Robustness; };; enum PrintLevel { None; Reduced; Normal; ExtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStopwatch_cumulTimer; TMatrixDSym*_extV; RooMinimizerFcn*_fcn; RooAbsReal*_func; string_minimizerType; Bool_t_optConst; Int_t_printLevel; Bool_t_profile; Int_t_status; static ROOT::Fit::Fitter*_theFitter; TStopwatch_timer; Bool_t_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMinimizer.html:6626,log,logfile,6626,root/html528/RooMinimizer.html,https://root.cern,https://root.cern/root/html528/RooMinimizer.html,2,['log'],['logfile']
Testability,"ect::SetObjectStat(Bool_t stat); voidsetPrintEvalErrors(Int_t numEvalErrors); Int_tsetPrintLevel(Int_t newLevel); voidsetProfile(Bool_t flag = kTRUE); voidsetStrategy(Int_t strat); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t flag = kTRUE); virtual voidShowMembers(TMemberInspector& insp); Int_tsimplex(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidapplyCovarianceMatrix(TMatrixDSym& V); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Int_tgetNPar() const; ofstream*logfile() const; voidTObject::MakeZombie(); Double_t&maxFCN(); voidprofileStart(); voidprofileStop(). private:. RooMinimizer(const RooMinimizer&). Data Members; public:. enum Strategy { Speed; Balance; Robustness; };; enum PrintLevel { None; Reduced; Normal; ExtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStopwatch_cumulTimer; TMatrixDSym*_extV; RooMinimizerFcn*_fcn; RooAbsReal*_func; string_minimizerType; Bool_t_optConst; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static ROOT::Fit::Fitter*_theFitter; TStopwatch_timer; Bool_t_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinimizer.html:6743,log,logfile,6743,root/html532/RooMinimizer.html,https://root.cern,https://root.cern/root/html532/RooMinimizer.html,1,['log'],['logfile']
Testability,"ect::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Float_tGetAverageNeighborsValue(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); voidTObject::MakeZombie(); Float_tWeightGaus(TMVA::PDEFoam*, TMVA::PDEFoamCell*, vector<Float_t>&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger; Float_tfSigmawidth of gauss curve. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelGauss(Float_t sigma); Default constructor for streamer. PDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Gaussian kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates); weighted by the cell values of all other cells, where the weight; is a gaussian function. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t GetAverageNeighborsValue(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases when a cell value is; undefined and the cell value shall be estimated by the; (well-defined) cell values of the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamKernelGauss.html:5723,log,logger,5723,root/html530/TMVA__PDEFoamKernelGauss.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamKernelGauss.html,3,['log'],['logger']
Testability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableIdentityTransform( DataSetInfo& dsi ); constructor. void Initialize(); nothing to initialize. Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); the identity does not need to be prepared, only calculate the normalization. void AttachXMLTo(void* parent); identity transformation to write to XML; Log() << kFATAL << ""Please implement writing of transformation as XML"" << Endl;. void ReadFromXML(void* trfnode); reding the identity transformation from XML. const TMVA::Event* Transform(const TMVA::Event*const , Int_t cls) const; identity transform returns sa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableIdentityTransform.html:9608,log,logger,9608,root/html602/TMVA__VariableIdentityTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableIdentityTransform.html,2,['log'],['logger']
Testability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableRearrangeTransform( DataSetInfo& dsi ); constructor. ~VariableRearrangeTransform(). void Initialize(); initialization of the rearrangement transformation; (nothing to do). Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); prepare transformation --> (nothing to do). const TMVA::Event* Transform(const TMVA::Event*const , Int_t cls) const. const TMVA::Event* InverseTransform(const TMVA::Event*const , Int_t cls) const. std::vector<TString>* GetTransformationStrings(Int_t cls) const; creates string with variable transformations applied. void AttachXMLTo(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableRearrangeTransform.html:9560,log,logger,9560,root/html602/TMVA__VariableRearrangeTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableRearrangeTransform.html,2,['log'],['logger']
Testability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. TMVA::VariableNormalizeTransform::VectorOfFloatVectorsfMax! Max of source range; TMVA::VariableNormalizeTransform::VectorOfFloatVectorsfMin! Min of source range. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableNormalizeTransform( DataSetInfo& dsi ); constructor. ~VariableNormalizeTransform(). void Initialize(); initialization of the normalization transformation. Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); prepare transformation. const TMVA::Event* Transform(const TMVA::Event*const , Int_t cls) const. const TMVA::Event* InverseTransform(const TMVA::Event*const , Int_t cls) const; a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableNormalizeTransform.html:9710,log,logger,9710,root/html602/TMVA__VariableNormalizeTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableNormalizeTransform.html,2,['log'],['logger']
Testability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. vector<TMatrixD*>fDecorrMatrices! Decorrelation matrix [class0/class1/.../all classes]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableDecorrTransform( DataSetInfo& dsi ); constructor. ~VariableDecorrTransform(); destructor. void Initialize(); initialisation. Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); calculate the decorrelation matrix and the normalization. std::vector<TString>* GetTransformationStrings(Int_t cls) const; creates string with variable transformations applied. const TMVA::Event* Transform(const TMVA::Event*const , Int_t cls) const; apply the decorrelation transfor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableDecorrTransform.html:9698,log,logger,9698,root/html602/TMVA__VariableDecorrTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableDecorrTransform.html,2,['log'],['logger']
Testability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. vector<TMatrixD*>fEigenVectorseigenvectors; vector<TVectorD*>fMeanValuesmean values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariablePCATransform( DataSetInfo& dsi ); constructor. ~VariablePCATransform(); destructor. void Initialize(); initialization of the transformation.; Has to be called in the preparation and not in the constructor,; since the number of classes it not known at construction, but; only after the creation of the DataSet which might be later. Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); calculate the principal components using the ROOT class TPrincipal; and the nor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariablePCATransform.html:9759,log,logger,9759,root/html602/TMVA__VariablePCATransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariablePCATransform.html,2,['log'],['logger']
Testability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. vector<vector<TH1F*> >fCumulativeDist! The Cummulative distributions; vector<vector<TMVA::PDF*> >fCumulativePDFThe cumulative PDF; UInt_tfElementsperbinav number of events stored per bin in cum dist; Bool_tfFlatNotGauss; Int_tfPdfMaxSmooth; Int_tfPdfMinSmooth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableGaussTransform(TMVA::DataSetInfo& dsi, TString strcor = """"); constructor; can only be applied one after the other when they are created. But in order to; determine the Gauss transformation. ~VariableGaussTransform( void ); destructor. void Initialize(). Bool_t PrepareTransformation(const vecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableGaussTransform.html:9768,log,logger,9768,root/html602/TMVA__VariableGaussTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableGaussTransform.html,2,['log'],['logger']
Testability,"ect::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfBestBest Edge for division; TReffDaught0Pointer to daughter 1; TReffDaught1Pointer to daughter 2; Short_tfDimDimension of the vector space; Double_tfDriveDriver integral, only for cell build-up; Double_tfIntegralIntegral over cell (estimate from exploration); TReffParentPointer to parent cell; Double_tfPrimaryPrimary integral, only for MC generation; Int_tfSerialSerial number; Int_tfStatusStatus (active, inactive); Double_tfVolumeCartesian Volume of cell; Double_tfXdivFactor for division. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFoamCell(); Default constructor for streamer. TFoamCell(Int_t ); User constructor allocating single empty Cell. TFoamCell(TFoamCell& ); Copy constructor (not tested!). ~TFoamCell(); Destructor. TFoamCell& operator=(const TFoamCell& ); Substitution operator = (never used). void Fill(Int_t , TFoamCell* , TFoamCell* , TFoamCell* ); Fills in certain data into newly allocated cell. void GetHcub(TFoamVect& , TFoamVect& ) const; Provides size and position of the cell; These parameter are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void GetHSize(TFoamVect& ) const; Provides size of the cell; Size parameters are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void CalcVolume(void); Calculates volume of the cell using size params which are calculated. void Print(Option_t* option) const; Printout of the cell geometry parameters for the debug purpose. Double_t GetXdiv() const; Geometry. { return fXdiv;}. Int_t GetBest() const; { return fBest;}. void SetBest(Int_t Best); { fBest =Best;}. void SetXdiv(Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFoamCell.html:7203,test,tested,7203,root/html602/TFoamCell.html,https://root.cern,https://root.cern/root/html602/TFoamCell.html,2,['test'],['tested']
Testability,"ect::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Float_tfCarry; Int_tfCount24; Float_tfFloatSeedTable[24]; Int_tfIlag; const Int_tfIntModulus; Int_tfJlag; Int_tfLuxury; const Double_tfMantissaBit12; const Double_tfMantissaBit24; TStringTNamed::fNameobject identifier; Int_tfNskip; UInt_tTRandom::fSeedRandom number generator seed; const UInt_t*fTheSeeds; TStringTNamed::fTitleobject title; static Int_tfgMaxIndex; static Int_tfgNumEngines. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TRandom. ←; TRandom1. Function documentation; TRandom1(UInt_t seed, Int_t lux = 3); Luxury level is set in the same way as the original FORTRAN routine.; level 0 (p=24): equivalent to the original RCARRY of Marsaglia; and Zaman, very long period, but fails many tests.; level 1 (p=48): considerable improvement in quality over level 0,; now passes the gap test, but still fails spectral test.; level 2 (p=97): passes all known tests, but theoretically still; defective.; level 3 (p=223): DEFAULT VALUE. Any theoretically possible; correlations have very small chance of being observed.; level 4 (p=389): highest possible luxury, all 24 bits chaotic. TRandom1(); default constructor. TRandom1(Int_t rowIndex, Int_t colIndex, Int_t lux); constructor. ~TRandom1(); destructor. void GetTableSeeds(UInt_t* seeds, Int_t index); static function returning the table of seeds. Double_t Rndm(Int_t i = 0); return a random number in ]0,1]. void RndmArray(Int_t size, Float_t* vect); return an array of random numbers in ]0,1]. void RndmArray(Int_t size, Double_t* vect); return an array of random numbers in ]0,1[. void SetSeeds(const UInt_t* seeds, Int_t lux = 3); set seeds. void SetSeed2(UInt_t seed, Int_t lux = 3); The initialisation is carried out using a Multiplicative; Congruential generator using formula constants of L'Ecuyer; as ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRandom1.html:8444,test,test,8444,root/html602/TRandom1.html,https://root.cern,https://root.cern/root/html602/TRandom1.html,4,['test'],['test']
Testability,"ected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Int_t fXp;  horizontal slider x position in pixel coordinates ;  ;  Protected Attributes inherited from TGSlider; const TGPicture * fDisabledPic;  picture to draw disabled slider ;  ; Bool_t fDragging;  true if in dragging mode ;  ; Int_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fRelPos;  slider position in pixel coordinates ;  ; Int_t fScale;  tick mark scale ;  ; const TGPicture * fSliderPic;  picture to draw slider ;  ; Int_t fType;  slider type bits ;  ; Int_t fVmax;  logical upper limit of slider ;  ; Int_t fVmin;  logical lower limit of slider ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SaveP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHSlider.html:25577,log,logical,25577,doc/master/classTGHSlider.html,https://root.cern,https://root.cern/doc/master/classTGHSlider.html,3,['log'],['logical']
Testability,"ected TObject; and last processed event. { return GetCanvas()->GetEvent(); }. Int_t GetEventX() const. { return GetCanvas()->GetEventX(); }. Int_t GetEventY() const. { return GetCanvas()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. TQtCanvasPainter * CanvasDecorator(); { return fCanvasDecorator; }. void SetCanvasDecorator(TQtCanvasPainter* decorator); { fCanvasDecorator = decorator;}. void EnableSignalEvents(UInt_t f); { SetBit (f); }. void DisableSignalEvents(UInt_t f); { ResetBit(f); }. Bool_t IsSignalEventEnabled(UInt_t f) const; { return TestBit (f); }. void EmitSignal(UInt_t f); {if (IsSignalEventEnabled(f)) EmitTestedSignal();}. void SetIgnoreLeaveEnter(int ignore = 1); { fIgnoreLeaveEnter = ignore; }. void operator=(const TQtWidget& ); ----- Private bits, clients can only test but not change them. void ResetCanvas(); { fCanvas = 0;}. bool IsDoubleBuffered() const; { return fDoubleBufferOn; }. void EmitCanvasPainted(); { emit CanvasPainted(); }. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id: TQtWidget.h 33707 2010-06-02 06:27:34Z brun $ » Last generated: 2010-10-05 11:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQtWidget.html:14888,test,test,14888,root/html528/TQtWidget.html,https://root.cern,https://root.cern/root/html528/TQtWidget.html,1,['test'],['test']
Testability,"ected TObject; and last processed event. { return GetCanvas()->GetEvent(); }. Int_t GetEventX() const. { return GetCanvas()->GetEventX(); }. Int_t GetEventY() const. { return GetCanvas()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. TQtCanvasPainter * CanvasDecorator(); { return fCanvasDecorator; }. void SetCanvasDecorator(TQtCanvasPainter* decorator); { fCanvasDecorator = decorator;}. void EnableSignalEvents(UInt_t f); { SetBit (f); }. void DisableSignalEvents(UInt_t f); { ResetBit(f); }. Bool_t IsSignalEventEnabled(UInt_t f) const; { return TestBit (f); }. void EmitSignal(UInt_t f); {if (IsSignalEventEnabled(f)) EmitTestedSignal();}. void SetIgnoreLeaveEnter(int ignore = 1); { fIgnoreLeaveEnter = ignore; }. void operator=(const TQtWidget& ); ----- Private bits, clients can only test but not change them. void ResetCanvas(); { fCanvas = 0;}. bool IsDoubleBuffered() const; { return fDoubleBufferOn; }. void EmitCanvasPainted(); { emit CanvasPainted(); }. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id: TQtWidget.h 33707 2010-06-02 06:27:34Z brun $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQtWidget.html:14888,test,test,14888,root/html532/TQtWidget.html,https://root.cern,https://root.cern/root/html532/TQtWidget.html,1,['test'],['test']
Testability,"ection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tdefaultErrorLevel() const; static RooNumIntConfig*defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:8018,test,testArg,8018,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,2,['test'],['testArg']
Testability,"ectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; namechar name[80]Definition TGX11.cxx:110; ROOT::Experimental::Detail::RLogBuilderBuilds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,...Definition RLogger.hxx:213; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:218; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line, const std::string &funcname)Definition RLogger.hxx:219; ROOT::Experimental::Detail::RLogBuilder::fEntryRLogEntry fEntryThe log entry to be built.Definition RLogger.hxx:215; ROOT::Experimental::Detail::RLogBuilder::~RLogBuilder~RLogBuilder()Emit the log entry through the static log manager.Definition RLogger.hxx:226; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(const std::string &name)Construct a log channel given its name, which is part of the diagnostics.Definition RLogger.hxx:116; ROOT::Experimental::RLogChannel::fVerbosityELogLevel fVerbosityVerbosity of this channel. By default, use the global verbosity.Definition RLogger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:16108,log,log,16108,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['log'],['log']
Testability,"ections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPasswdDialog. class TGPasswdDialog. TGPasswdDialog. Graphic dialog to enter passwords. Usage:. {; Buffer for the passwd; char pwdbuf[128]. Open the dialog box; TGPasswdDialog dialog(""My prompt"", pwdbuf, 128);. Wait until the user is done; while (gROOT->IsInterrupted()); gSystem->DispatchOneEvent(kFALSE);. Password is now in pwdbuf. }. Function Members (Methods); public:. TGPasswdDialog(const TGPasswdDialog&); TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400); virtual~TGPasswdDialog(); static TClass*Class(); voidCloseWindow(); voidDoClose(); virtual TClass*IsA() const; TGPasswdDialog&operator=(const TGPasswdDialog&); voidReturnPressed(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. TGTransientFrame*fDialogmain frame of this widget; TGTextButton*fOkOk button; TGTextEntry*fPasswdPassword TextEntry; TGTextBuffer*fPasswdTextPasswd Buffer; char*fPwdBufbuffer where to store the passwd; Int_tfPwdLenMaxpasswd buffer length. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400); Create an editor in a dialog. ~TGPasswdDialog(); Delete log window. void DoClose(); Handle close button. void CloseWindow(); Called when closed via window manager action. void ReturnPressed(); Handle return. TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). » Author: G. Ganis 10/10/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGPasswdDialog.html:1587,log,log,1587,root/html534/TGPasswdDialog.html,https://root.cern,https://root.cern/root/html534/TGPasswdDialog.html,1,['log'],['log']
Testability,"ectly returns the pointer using a static_cast. If the template parameter of this proxy is not an LValue type, then; in a debug build, a dynamic_cast with an assertion is used.; in a release build, a static_cast is forced, irrespective of what the type of the object actually is. This is dangerous, but equivalent to the behaviour before refactoring the RooFit proxies. Deprecated:This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or RooAbsCategoryLValue (+derived types), as arg() will always return the correct type. . Definition at line 407 of file RooTemplateProxy.h. ◆ lvptr() [2/4]. template<class T > . const LValue_t * RooTemplateProxy< T >::lvptr ; (; const RooAbsArg * ; ); const. inline . Return l-value pointer to contents. ; If the contents derive from RooAbsLValue or RooAbsCategoryLValue, the conversion is safe, and the function directly returns the pointer using a static_cast. If the template parameter of this proxy is not an LValue type, then; in a debug build, a dynamic_cast with an assertion is used.; in a release build, a static_cast is forced, irrespective of what the type of the object actually is. This is dangerous, but equivalent to the behaviour before refactoring the RooFit proxies. Deprecated:This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or RooAbsCategoryLValue (+derived types), as arg() will always return the correct type. . Definition at line 415 of file RooTemplateProxy.h. ◆ lvptr() [3/4]. template<class T > . LValue_t * RooTemplateProxy< T >::lvptr ; (; LValue_t * ; ). inline . Return l-value pointer to contents. ; If the contents derive from RooAbsLValue or RooAbsCategoryLValue, the conversion is safe, and the function directly returns the pointer using a static_cast. If the template parameter of this proxy is not an LValue type, then; in a debug build, a dynamic_cast with an assertion is used.; in a release build, a static_cast is forced, irrespective of wha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:24552,assert,assertion,24552,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['assert'],['assertion']
Testability,"ector) {; 1131 p = 1.0 - p;; 1132 }; 1133 net.SetDropoutProbabilities(dropoutVector);; 1134 net.InitializeGradients();; 1135 auto testNet = net.CreateClone(settings.batchSize);; 1136 ; 1137 using DataLoader_t = TDataLoader<TMVAInput_t, TCpu<>>;; 1138 ; 1139 // Split training data into training and validation set; 1140 const std::vector<Event *> &allData = GetEventCollection(Types::kTraining);; 1141 const std::vector<Event *> trainingInputData =; 1142 std::vector<Event *>(allData.begin(), allData.begin() + nTrainingSamples);; 1143 const std::vector<Event *> testInputData =; 1144 std::vector<Event *>(allData.begin() + nTrainingSamples, allData.end());; 1145 ; 1146 if (trainingInputData.size() != nTrainingSamples) {; 1147 Log() << kFATAL << ""Inconsistent training sample size"" << Endl;; 1148 }; 1149 if (testInputData.size() != nTestSamples) {; 1150 Log() << kFATAL << ""Inconsistent test sample size"" << Endl;; 1151 }; 1152 ; 1153 size_t nThreads = 1;; 1154 TMVAInput_t trainingTuple = std::tie(trainingInputData, DataInfo());; 1155 TMVAInput_t testTuple = std::tie(testInputData, DataInfo());; 1156 DataLoader_t trainingData(trainingTuple, nTrainingSamples,; 1157 net.GetBatchSize(), net.GetInputWidth(),; 1158 net.GetOutputWidth(), nThreads);; 1159 DataLoader_t testData(testTuple, nTestSamples, testNet.GetBatchSize(),; 1160 net.GetInputWidth(), net.GetOutputWidth(),; 1161 nThreads);; 1162 DNN::TGradientDescent<TCpu<>> minimizer(settings.learningRate,; 1163 settings.convergenceSteps,; 1164 settings.testInterval);; 1165 ; 1166 std::vector<TNet<TCpu<>>> nets{};; 1167 std::vector<TBatch<TCpu<>>> batches{};; 1168 nets.reserve(nThreads);; 1169 for (size_t i = 0; i < nThreads; i++) {; 1170 nets.push_back(net);; 1171 for (size_t j = 0; j < net.GetDepth(); j++); 1172 {; 1173 auto &masterLayer = net.GetLayer(j);; 1174 auto &layer = nets.back().GetLayer(j);; 1175 TCpu<>::Copy(layer.GetWeights(),; 1176 masterLayer.GetWeights());; 1177 TCpu<>::Copy(layer.GetBiases(),; 1178 masterLayer.GetBi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:41514,test,test,41514,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,3,['test'],"['test', 'testInputData', 'testTuple']"
Testability,ector.h;  Plane3D.h;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Plane3D.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  Transform3D.cxx;  Translation3D.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  BinPoint.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVector.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  LCG,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:42947,test,testIterator,42947,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testIterator']
Testability,ector.h;  Plane3D.h;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Plane3D.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  Transform3D.cxx;  Translation3D.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  BinPoint.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVector.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  Mat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:42811,test,testIterator,42811,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testIterator']
Testability,"ector3(); {}. TVector3 & Transform(const TRotation& ); transform this vector with a TRotation. Double_t Angle(const TVector3& ) const; return the angle w.r.t. another 3-vector. Double_t Mag() const; return the magnitude (rho in spherical coordinate system). Double_t Perp() const; return the transverse component (R in cylindrical coordinate system). Double_t Perp(const TVector3& ) const; return the transverse component (R in cylindrical coordinate system). Double_t Phi() const; return the azimuth angle. returns phi from -pi to pi. Double_t Theta() const; return the polar angle. TVector3 Unit() const; return unit vector parallel to this. void RotateX(Double_t ); rotate vector around X. void RotateY(Double_t ); rotate vector around Y. void RotateZ(Double_t ); rotate vector around Z. void Rotate(Double_t , const TVector3& ); rotate vector. void RotateUz(const TVector3& ); NewUzVector must be normalized !. Double_t PseudoRapidity() const; Double_t m = Mag();; return 0.5*log( (m+fZ)/(m-fZ) );; guard against Pt=0. void SetPtEtaPhi(Double_t pt, Double_t eta, Double_t phi); set Pt, Eta and Phi. void SetPtThetaPhi(Double_t pt, Double_t theta, Double_t phi); set Pt, Theta and Phi. void SetTheta(Double_t ); Set theta keeping mag and phi constant (BaBar). void SetPhi(Double_t ); Set phi keeping mag and theta constant (BaBar). Double_t DeltaR(const TVector3& ) const; return deltaR with respect to v. void SetMagThetaPhi(Double_t mag, Double_t theta, Double_t phi); setter with mag, theta, phi. void Streamer(TBuffer& ); Stream an object of class TVector3. void Print(Option_t* option = """") const; print vector parameters. Double_t & operator[](int ); { return operator()(i); }. Double_t operator[](int ) const; { return operator()(i); }. Double_t x() const; { return fX; }. Double_t y() const; { return fY; }. Double_t z() const; { return fZ; }. Double_t X() const; { return fX; }. Double_t Y() const; { return fY; }. Double_t Z() const; { return fZ; }. Double_t Px() const; { return fX; }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVector3.html:12731,log,log,12731,root/html602/TVector3.html,https://root.cern,https://root.cern/root/html602/TVector3.html,2,['log'],['log']
Testability,"ector3(); {}. TVector3 & Transform(const TRotation& ); transform this vector with a TRotation. Double_t Angle(const TVector3& ) const; return the angle w.r.t. another 3-vector. Double_t Mag() const; return the magnitude (rho in spherical coordinate system). Double_t Perp() const; return the transverse component (R in cylindrical coordinate system). Double_t Perp(const TVector3& ) const; return the transverse component (R in cylindrical coordinate system). Double_t Phi() const; return the azimuth angle. returns phi from -pi to pi. Double_t Theta() const; return the polar angle. TVector3 Unit() const; return unit vector parallel to this. void RotateX(Double_t ); rotate vector around X. void RotateY(Double_t ); rotate vector around Y. void RotateZ(Double_t ); rotate vector around Z. void Rotate(Double_t , const TVector3& ); rotate vector. void RotateUz(const TVector3& ); NewUzVector must be normalized !. Double_t PseudoRapidity() const; Double_t m = Mag();; return 0.5*log( (m+fZ)/(m-fZ) );; guard against Pt=0. void SetPtEtaPhi(Double_t pt, Double_t eta, Double_t phi); set Pt, Eta and Phi. void SetPtThetaPhi(Double_t pt, Double_t theta, Double_t phi); set Pt, Theta and Phi. void SetTheta(Double_t ); Set theta keeping mag and phi constant (BaBar). void SetPhi(Double_t ); Set phi keeping mag and theta constant (BaBar). Double_t DeltaR(const TVector3& ) const; return deltaR with respect to v. void SetMagThetaPhi(Double_t mag, Double_t theta, Double_t phi); setter with mag, theta, phi. void Streamer(TBuffer& ); Stream an object of class TVector3. void Print(Option_t* option = """") const; print vector parameters. Double_t & operator[](int i); { return operator()(i); }. Double_t operator[](int i) const; { return operator()(i); }. Double_t x() const; { return fX; }. Double_t y() const; { return fY; }. Double_t z() const; { return fZ; }. Double_t X() const; { return fX; }. Double_t Y() const; { return fY; }. Double_t Z() const; { return fZ; }. Double_t Px() const; { return fX; }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVector3.html:12302,log,log,12302,root/html534/TVector3.html,https://root.cern,https://root.cern/root/html534/TVector3.html,1,['log'],['log']
Testability,"ector3(); {}. TVector3 & Transform(const TRotation& ); transform this vector with a TRotation. Double_t Angle(const TVector3& ) const; return the angle w.r.t. another 3-vector. Double_t Mag() const; return the magnitude (rho in spherical coordinate system). Double_t Perp() const; return the transverse component (R in cylindrical coordinate system). Double_t Perp(const TVector3& ) const; return the transverse component (R in cylindrical coordinate system). Double_t Phi() const; return the azimuth angle. returns phi from -pi to pi. Double_t Theta() const; return the polar angle. TVector3 Unit() const; return unit vector parallel to this. void RotateX(Double_t ); rotate vector around X. void RotateY(Double_t ); rotate vector around Y. void RotateZ(Double_t ); rotate vector around Z. void Rotate(Double_t , const TVector3& ); rotate vector. void RotateUz(const TVector3& ); NewUzVector must be normalized !. Double_t PseudoRapidity() const; Double_t m = Mag();; return 0.5*log( (m+fZ)/(m-fZ) );; guard against Pt=0. void SetPtEtaPhi(Double_t pt, Double_t eta, Double_t phi); set Pt, Eta and Phi. void SetPtThetaPhi(Double_t pt, Double_t theta, Double_t phi); set Pt, Theta and Phi. void SetTheta(Double_t ); Set theta keeping mag and phi constant (BaBar). void SetPhi(Double_t ); Set phi keeping mag and theta constant (BaBar). Double_t DeltaR(const TVector3& ) const; return deltaR with respect to v. void SetMagThetaPhi(Double_t mag, Double_t theta, Double_t phi); setter with mag, theta, phi. void Streamer(TBuffer& b); Stream an object of class TVector3. void Print(Option_t* option = """") const; print vector parameters. Double_t & operator[](int i); { return operator()(i); }. Double_t operator[](int i) const; { return operator()(i); }. Double_t x() const; { return fX; }. Double_t y() const; { return fY; }. Double_t z() const; { return fZ; }. Double_t X() const; { return fX; }. Double_t Y() const; { return fY; }. Double_t Z() const; { return fZ; }. Double_t Px() const; { return fX; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVector3.html:12261,log,log,12261,root/html528/TVector3.html,https://root.cern,https://root.cern/root/html528/TVector3.html,3,['log'],['log']
Testability,"ector< const Double_t * > samples, const std::vector< size_t > samplesSizes)set a vector of samplesDefinition GoFTest.cxx:181; ROOT::Math::GoFTest::PValueADKSamplesstatic Double_t PValueADKSamples(size_t nsamples, Double_t A2)Computation of the K-Sample Anderson-Darling Test's p-value as described in (1)Definition GoFTest.cxx:353; ROOT::Math::GoFTest::LogSamplevoid LogSample()Applies the logarithm to the sample when the specified distribution to test is LogNormal.Definition GoFTest.cxx:303; ROOT::Math::GoFTest::~GoFTestvirtual ~GoFTest()Definition GoFTest.cxx:179; ROOT::Math::GoFTest::SetDistributionvoid SetDistribution(EDistribution dist, const std::vector< double > &distParams={})Sets the distribution for the predefined distribution types and optionally its parameters for 1-sampl...Definition GoFTest.cxx:124; ROOT::Math::GoFTest::GaussianCDFDouble_t GaussianCDF(Double_t x) constDefinition GoFTest.cxx:295; ROOT::Math::GoFTest::AndersonDarling2SamplesTestvoid AndersonDarling2SamplesTest(Double_t &pvalue, Double_t &testStat) constPerforms the Anderson-Darling 2-Sample Test.Definition GoFTest.cxx:646; ROOT::Math::GoFTest::GoFTestGoFTest()Disallowed default constructor.; ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTestvoid KolmogorovSmirnov2SamplesTest(Double_t &pvalue, Double_t &testStat) constKolmogorov-Smirnov 2-Samples Test.Definition GoFTest.cxx:896; ROOT::Math::GoFTest::fSamplesstd::vector< std::vector< Double_t > > fSamplesThe input data.Definition GoFTest.h:243; ROOT::Math::GoFTest::PValueAD1SampleDouble_t PValueAD1Sample(Double_t A2) constComputation of the 1-Sample Anderson-Darling Test's p-value.Definition GoFTest.cxx:483; ROOT::Math::GoFTest::AndersonDarlingTestvoid AndersonDarlingTest(Double_t &pvalue, Double_t &testStat) constPerforms the Anderson-Darling 1-Sample Test.Definition GoFTest.cxx:862; ROOT::Math::GoFTest::ExponentialCDFDouble_t ExponentialCDF(Double_t x) constDefinition GoFTest.cxx:299; ROOT::Math::GoFTest::SetParametersvoid SetParameters(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:41986,test,testStat,41986,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['testStat']
Testability,"ectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:84921,log,logical,84921,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"ectrum2Fit::fByCalc. protected . calculated value of b parameter for 1D ridges in y direction ; Definition at line 84 of file TSpectrum2Fit.h. ◆ fByErr. Double_t TSpectrum2Fit::fByErr. protected . error value of b parameter for 1D ridges in y direction ; Definition at line 85 of file TSpectrum2Fit.h. ◆ fByInit. Double_t TSpectrum2Fit::fByInit. protected . initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ; Definition at line 83 of file TSpectrum2Fit.h. ◆ fChi. Double_t TSpectrum2Fit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrum2Fit.h. ◆ fFitTaylor. Int_t TSpectrum2Fit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrum2Fit.h. ◆ fFixA0. Bool_t TSpectrum2Fit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:82845,log,logical,82845,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"ectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 107 of file TSpectrum2Fit.h. ◆ fFixTxy. Bool_t TSpectrum2Fit::fFixTxy. protected . logical value of t parameter fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:86092,log,logical,86092,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"ects that represent a real value that may appear on the left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICReg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:79876,test,test,79876,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['test'],['test']
Testability,"ecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TDLGradientDescent< Architecture_t >; Definition at line 65 of file DLMinimizers.h. Public Types; using DeepNet_t = TDeepNet< Architecture_t >;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TDLGradientDescent ();  ;  TDLGradientDescent (Scalar_t learningRate, size_t convergenceSteps, size_t testInterval);  ; size_t GetConvergenceCount () const;  Getters. ;  ; size_t GetConvergenceSteps () const;  ; Scalar_t GetTestError () const;  ; size_t GetTestInterval () const;  ; Scalar_t GetTrainingError () const;  ; bool HasConverged ();  Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ;  ; bool HasConverged (Scalar_t testError);  Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ;  ; void Reset ();  Reset minimizer object to default state. ;  ; void SetBatchSize (Scalar_t rate);  ; void SetConvergenceSteps (size_t steps);  Setters. ;  ; void SetLearningRate (Scalar_t rate);  ; void SetTestInterval (size_t interval);  ; void Step (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Perform a single optimization step on a given batch. ;  ; void Step (DeepNet_t &master, std::vector< DeepNet_t > &nets, std::vector< TTensorBatch< Architecture_t > > &batches);  Perform multiple optimization steps simultaneously. ;  ; Scalar_t StepLoss (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Same as Step(...) but also evaluate the loss on the given training data. ;  ; void StepMomentum (DeepNet_t &master, std::vector< DeepNet_t > &nets, std::vector< TTensorBatch< Arch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:1240,test,testError,1240,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,3,['test'],"['test', 'testError']"
Testability,ecture_t >::fConvergenceCount. private . Current number of training epochs without. ; considerable decrease in the test error. ; Definition at line 66 of file Minimizers.h. ◆ fConvergenceSteps. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceSteps. private . Number of training epochs without considerable. ; decrease in the test error for convergence. ; Definition at line 64 of file Minimizers.h. ◆ fLearningRate. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fLearningRate. private . Learning rate \(\alpha\). ; Definition at line 71 of file Minimizers.h. ◆ fMinimumError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fMinimumError. private . The minimum loss achieved on the training set during the current training session. ; Definition at line 72 of file Minimizers.h. ◆ fStepCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fStepCount. private . Number of steps performed in the current training session. ; Definition at line 63 of file Minimizers.h. ◆ fTestError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestError. private . Holds the most recently computed test loss. ; Definition at line 70 of file Minimizers.h. ◆ fTestInterval. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestInterval. private . Interval for the computation of the test error. ; Definition at line 68 of file Minimizers.h. ◆ fTrainingError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fTrainingError. private . Holds the most recently computed training loss. ; Definition at line 69 of file Minimizers.h. tmva/tmva/inc/TMVA/DNN/Minimizers.h. TMVADNNTGradientDescent. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:16231,test,test,16231,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,2,['test'],['test']
Testability,"ecuted. In the function/script being executed, one or more of the following actions can be executed:. load a file containing the referenced object. This function typically looks in the file catalog (GRID).; compute a pointer to the referenced object and communicate this pointer back to the calling function TRef::GetObject via: TRef::SetStaticObject(object).; TRef::SetStaticObjectstatic void SetStaticObject(TObject *obj)Static function to set the object found on the Action on Demand function.Definition TRef.cxx:478; When the TExec is called, it has access to the dereferencing TRef by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this"" before the call to TExec). This can be useful for accessing the TRef's fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set to the fUniqueID of the referenced object. At the next call to GetObject, the pointer stored in fPid:fObjects[fUniqueID] will be returned directly.; An example of action on demand is shown in $ROOTSYS/test/Event.h with the member: TRef fWebHistogram; //EXEC:GetWebHistogram; When calling fWebHistogram.GetObject(), the function GetObject will automatically invoke a script GetWebHistogram.C via the interpreter.; An example of a GetWebHistogram.C script is shown below void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; f#define f(i)Definition RSha256.hxx:104; gDirectory#define gDirectoryDefinition TDirectory.h:384; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1TH1 is the base class of all histogram c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRef.html:7823,test,test,7823,doc/master/classTRef.html,https://root.cern,https://root.cern/doc/master/classTRef.html,1,['test'],['test']
Testability,"ed && !isWeightsForDrop); 877 {; 878 dropOutWeightFactor (weights, dropFractions, true); // inverse; 879 isWeightsForDrop = true;; 880 }; 881 }; 882 ++testCycleCount;; 883 ++dropOutChangeCount;; 884 ; 885 ; 886// settings.resetPlot (""errors"");; 887 settings.addPoint (""trainErrors"", cycleCount, trainError);; 888 settings.addPoint (""testErrors"", cycleCount, testError);; 889 settings.plot (""trainErrors"", ""C"", 1, kBlue);; 890 settings.plot (""testErrors"", ""C"", 1, kMagenta);; 891 ; 892 ; 893 // setup error plots and progress bar variables for JsMVA; 894 if (fInteractive){; 895 fInteractive->AddPoint(cycleCount, trainError, testError);; 896 if (*fExitFromTraining) break;; 897 *fIPyCurrentIter = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 898 }; 899 ; 900 if (hasConverged); 901 break;; 902 ; 903 if ((int)cycleCount % 10 == 0) {; 904 ; 905 TString convText = TString::Format( ""(train/test/epo/conv/maxco): %.3g/%.3g/%d/%d/%d"",; 906 trainError,; 907 testError,; 908 (int)cycleCount,; 909 (int)settings.convergenceCount (),; 910 (int)settings.maxConvergenceCount ());; 911 double progress = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 912 settings.cycle (progress, convText);; 913 }; 914 }; 915 while (true);; 916 settings.endTrainCycle (trainError);; 917 ; 918 TString convText = TString::Format( ""(train/test/epoch): %.4g/%.4g/%d"", trainError, testError, (int)cycleCount);; 919 double progress = 100*(double)settings.maxConvergenceCount() /(double)settings.convergenceSteps ();; 920 settings.cycle (progress, convText);; 921 ; 922 return testError;; 923 }; 924 ; 925 ; 926 ; 927/*! \brief execute a single training cycle; 928 *; 929 * uses multithreading if turned on; 930 *; 931 * \param minimizer the minimizer to be used (e.g. SGD); 932 * \param weights the weight container with all the synapse weights; 933 * \param itPatternBegin begin of the pattern container; 934 * \param itPatternEnd the end of the pattern ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:27543,test,testError,27543,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testError']
Testability,"ed . calculate the average response - TODO : rewrite bad dependancy on EvaluateAverage() ! ; note that 0 offset is used ; Definition at line 1512 of file RuleFitParams.cxx. ◆ CalcAverageResponseOLD(). Double_t TMVA::RuleFitParams::CalcAverageResponseOLD ; (; ). protected . ◆ CalcAverageTruth(). Double_t TMVA::RuleFitParams::CalcAverageTruth ; (; ). protected . calculate the average truth ; Definition at line 1527 of file RuleFitParams.cxx. ◆ CalcFStar(). void TMVA::RuleFitParams::CalcFStar ; (; ). protected . Estimates F* (optimum scoring function) for all events for the given sets. ; The result is used in ErrorRateReg(). — NOT USED — ; Definition at line 885 of file RuleFitParams.cxx. ◆ CalcGDNTau(). void TMVA::RuleFitParams::CalcGDNTau ; (; ). inlineprotected . Definition at line 136 of file RuleFitParams.h. ◆ CalcTstAverageResponse(). void TMVA::RuleFitParams::CalcTstAverageResponse ; (; ). protected . calc average response for all test paths - TODO: see comment under CalcAverageResponse() note that 0 offset is used ; Definition at line 1491 of file RuleFitParams.cxx. ◆ ErrorRateBin(). Double_t TMVA::RuleFitParams::ErrorRateBin ; (; ). protected . Estimates the error rate with the current set of parameters It uses a binary estimate of (y-F*(x)) (y-F*(x)) = (Num of events where sign(F)!=sign(y))/Neve y = {+1 if event is signal, -1 otherwise} — NOT USED —. ; Definition at line 1008 of file RuleFitParams.cxx. ◆ ErrorRateReg(). Double_t TMVA::RuleFitParams::ErrorRateReg ; (; ). protected . Estimates the error rate with the current set of parameters This code is pretty messy at the moment. ; Cleanup is needed. – NOT USED — ; Definition at line 964 of file RuleFitParams.cxx. ◆ ErrorRateRoc(). Double_t TMVA::RuleFitParams::ErrorRateRoc ; (; ). protected . Estimates the error rate with the current set of parameters. ; It calculates the area under the bkg rejection vs signal efficiency curve. The value returned is 1-area. This works but is less efficient than calculating t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:9654,test,test,9654,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['test'],['test']
Testability,"ed before and after data storage. If TSQLFile detects any problems, ROLLBACK command will be used to restore previous state of data base. If transactions not supported by SQL server, they can be disabled by SetUseTransactions(kTransactionsOff). Or user can take responsibility to use transactions function himself. By default only indexes for basic tables are created. In most cases usage of indexes increase performance to data reading, but it also can increase time of writing data to database. There are several modes of index usage available in SetUseIndexes() method There is MakeSelectQuery(TClass*) method, which produces SELECT statement to get objects data of specified class. Difference from simple statement like: mysql> SELECT * FROM TH1I_ver1 that not only data for that class, but also data from parent classes will be extracted from other tables and combined in single result table. Such select query can be useful for external access to objects data.; Up to now MySQL 4.1 and Oracle 9i were tested. Some extra work is required for other SQL databases. Hopefully, this should be straightforward.; Known problems and open questions.; TTree is not supported by TSQLFile. There is independent development of TTreeSQL class, which allows to store trees directly in SQL database; TClonesArray is store objects in raw format, which can not be accessed outside ROOT. This will be changed later.; TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); Streamer infos are not written to file, therefore schema evolution is not yet supported. All eforts are done to enable this feature in the near future. Example how TSQLFile can be used; A session saving data to a SQL data base; auto dbname = ""mysql://host.domain:3306/dbname"";; auto username = ""username"";; auto userpass = ""userpass"";; ; // Clean data base and create primary tables; auto f = new TSQLFile(dbname, ""recreate"", username, userpass);; // Write with standard I/O functions; arr->Write(""arr"", TObject::kS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:5451,test,tested,5451,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['test'],['tested']
Testability,"ed by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionQueryFrame.html:19854,log,log,19854,root/html534/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html534/TSessionQueryFrame.html,1,['log'],['log']
Testability,"ed by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionQueryFrame.html:19560,log,log,19560,root/html528/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html528/TSessionQueryFrame.html,3,['log'],['log']
Testability,"ed colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Returns the pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; void ReadGIF (Int_t x0, Int_t y0, const char *file);  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; void RemoveWindow (ULongptr_t qwid) override;  Removes the created by Qt window ""qwid"". ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Requests Locator position. ;  ; Int_t Request",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:19334,log,logically,19334,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['log'],['logically']
Testability,"ed for monitoring ; Definition at line 764 of file NeuralNet.h. ◆ setProgressLimits(). virtual void TMVA::DNN::Settings::setProgressLimits ; (; double ; minProgress = 0, . double ; maxProgress = 100 . ). inlinevirtual . Parameters. maxProgressfor monitoring and logging (set the current ""progress"" limits for the display of the progress); minProgressminimum value; maxProgressmaximum value . Definition at line 790 of file NeuralNet.h. ◆ startTestCycle(). virtual void TMVA::DNN::Settings::startTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 804 of file NeuralNet.h. ◆ startTrainCycle(). virtual void TMVA::DNN::Settings::startTrainCycle ; (; ). inlinevirtual . Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 782 of file NeuralNet.h. ◆ startTraining(). virtual void TMVA::DNN::Settings::startTraining ; (; ). inlinevirtual . Definition at line 795 of file NeuralNet.h. ◆ testIteration(). virtual void TMVA::DNN::Settings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 806 of file NeuralNet.h. ◆ testRepetitions(). size_t TMVA::DNN::Settings::testRepetitions ; (; ); const. inline . how often is the test data tested ; Definition at line 768 of file NeuralNet.h. ◆ testSample(). virtual void TMVA::DNN::Settings::testSample ; (; double ; , . double ; , . double ; , . double ;  . ). inlinevirtual . virtual function to be used for monitoring (callback) ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 781 of file NeuralNet.h. ◆ useMultithreading(). bool TMVA::DNN::Settings::useMultithreading ; (; ); const. inline . is multithreading turned on? ; Definition at line 815 of file NeuralNet.h. Member Data Documentation. ◆ count_dE. size_t TMVA::DNN::Settings::count_dE. Definition at line 843 of file NeuralNet.h. ◆ count_E. size_t TMVA::DNN::Settings",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:12218,test,testIteration,12218,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['test'],['testIteration']
Testability,"ed from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooSimultaneous.h>. Inheritance diagram for RooSimultaneous:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooSimultaneous() [1/7]. RooSimultaneous::RooSimultaneous ; (; ). inline . Definition at line 58 of file RooSimultaneous.h. ◆ RooSimultaneous() [2/7]. RooSimultaneous::RooSimultaneous ; (; const char * ; name, . const char * ; title, . RooAbsCategoryLValue & ; inIndexCat . ). Constructor with index category. ; PDFs associated with indexCat states can be added after construction with the addPdf() function.; RooSimultaneous can function without having a PDF associated with every single state. The normalization in such cases is taken from the number of registered PDFs, but getVal() will assert if when called for an unregistered index state. ; Definition at line 115 of file RooSimultaneous.cxx. ◆ RooSimultaneous() [3/7]. RooSimultaneous::RooSimultaneous ; (; const char * ; name, . const char * ; title, . std::map< std::string, RooAbsPdf * > ; pdfMap, . RooAbsCategoryLValue & ; inIndexCat . ). Definition at line 148 of file RooSimultaneous.cxx. ◆ RooSimultaneous() [4/7]. RooSimultaneous::RooSimultaneous ; (; const char * ; name, . const char * ; title, . RooFit::Detail::FlatMap< std::string, RooAbsPdf * > const & ; pdfMap, . RooAbsCategoryLValue & ; inIndexCat . ). For internal use in RooFit. ; Definition at line 155 of file RooSimultaneous.cxx. ◆ RooSimultaneous() [5/7]. RooSimultaneous::RooSimultaneous ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList, . RooAbsCategoryLValue & ; inIndexCat . ). Constructor from index category and full list of PDFs. ; In this constructor form, a PDF must be supplied for each indexCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:79232,assert,assert,79232,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['assert'],['assert']
Testability,"ed from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Static Protected Member Functions; static Int_t AssertDataSet (TDSet *dset, TList *input, TDataSetManager *mgr, TString &emsg);  Make sure that dataset is in the form to be processed. ;  ; static void AssertMacroPath (const char *macro);  Make sure that the directory path contained by macro is in the macro path. ;  ; static Bool_t GetFileInCmd (const char *cmd, TString &fn);  Static method to extract the filename (if any) form a CINT command. ;  ; static Int_t GetInputData (TList *input, const char *cachedir, TString &emsg);  Get the input data from the file defined in the input list. ;  ; static Int_t SaveInputData (TQueryResult *qr, const char *cachedir, TString &emsg);  Save input data file from 'cachedir' into the sandbox or create a the file with input data objects. ;  ; static Int_t SendInputData (TQueryResult *qr, TProof *p, TString &emsg);  Send the input data file to the workers. ;  ; static void * SlaveStartupThread (void *arg);  ; static void SystemCmd (const char *cmd, Int_t fdout);  Exec system command 'cmd'. If fdout > -1, append the output to fdout. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:41174,sandbox,sandbox,41174,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['sandbox'],['sandbox']
Testability,"ed functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:49491,log,logical,49491,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability,"ed in TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, and TProfile3D.; Definition at line 152 of file TH3.h. ◆ KolmogorovTest(). Double_t TH3::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. overridevirtual . Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ; Default: Ignore under- and overflow bins in comparison; option is a character string to specify options ""U"" include Underflows in test ""O"" include Overflows ""N"" include comparison of normalizations ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob; The returned function value is the probability of test (much less than one means NOT compatible); The KS test uses the distance between the pseudo-CDF's obtained from the histogram. Since in more than 1D the order for generating the pseudo-CDF is arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis. The average of all the maximum distances obtained is used in the tests. ; Reimplemented from TH1.; Definition at line 1532 of file TH3.cxx. ◆ operator=(). TH3 & TH3::operator= ; (; const TH3 & ; ). privatedelete . ◆ Project3D(). TH1 * TH3::Project3D ; (; Option_t * ; option = ""x""); const. virtual . Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. . option = ""x"" return the x projection into a TH1D histogram; option = ""y"" return the y projection into a TH1D histogram; option = ""z"" return the z projection into a TH1D histogram; option = ""xy"" return the x versus y projection into a TH2D histogram; option = ""yx"" return the y versus x projection into a TH2D histogram; option = ""xz"" return the x versus z projection into a TH2D histogram; option = ""zx"" return the z versus x projection into a TH2D histogram; option = ""yz"" return the y versus z projection into a TH2D histogram; option = ""zy"" return the z versus y projection into a TH2D h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:89942,test,tests,89942,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,1,['test'],['tests']
Testability,"ed in derived, concrete page sinks. Note that if compressionSetting is 0 (uncompressed) and the page is mappable and not checksummed, the returned sealed page will point directly to the input page buffer. Otherwise, the sealed page references an internal buffer of fCompressor. Thus, the buffer pointed to by the RSealedPage should never be freed. Usage of this method requires construction of fCompressor. ; Definition at line 656 of file RPageStorage.cxx. ◆ SealPage() [2/2]. ROOT::Experimental::Internal::RPageStorage::RSealedPage ROOT::Experimental::Internal::RPageSink::SealPage ; (; const RSealPageConfig & ; config). static . Seal a page using the provided info. ; Definition at line 619 of file RPageStorage.cxx. ◆ StageCluster(). virtual RStagedCluster ROOT::Experimental::Internal::RPageSink::StageCluster ; (; NTupleSize_t ; nNewEntries). pure virtual . Stage the current cluster and create a new one for the following data. ; Returns the object that must be passed to CommitStagedClusters to logically append the staged cluster to the ntuple descriptor. ; Implemented in ROOT::Experimental::Internal::RPageSinkBuf, ROOT::Experimental::Internal::RPagePersistentSink, and ROOT::Experimental::Internal::RPageNullSink. ◆ UpdateExtraTypeInfo(). virtual void ROOT::Experimental::Internal::RPageSink::UpdateExtraTypeInfo ; (; const RExtraTypeInfoDescriptor & ; extraTypeInfo). pure virtual . Adds an extra type information record to schema. ; The extra type information will be written to the extension header. The information in the record will be merged with the existing information, e.g. duplicate streamer info records will be removed. This method is called by the ""on commit dataset"" callback registered by specific fields (e.g., streamer field) and during merging. ; Implemented in ROOT::Experimental::Internal::RPageNullSink, ROOT::Experimental::Internal::RPageSinkBuf, and ROOT::Experimental::Internal::RPagePersistentSink. ◆ UpdateSchema(). virtual void ROOT::Experimental::Internal::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:16127,log,logically,16127,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,1,['log'],['logically']
Testability,"ed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jso",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:24629,test,tested,24629,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['test'],['tested']
Testability,ed properties that can be stored in RooSharedPropertiesList. More...;  ; class  RooSimGenContext;  Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimSplitGenContext;  Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimultaneous;  Facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset. More...;  ; class  RooStringVar;  A RooAbsArg implementing string values. More...;  ; class  RooStudyManager;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooStudyPackage;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooSubsidiaryL;  Calculates the sum of the -(log) likelihoods of a set of RooAbsPdf objects that represent subsidiary or constraint functions. More...;  ; class  RooFit::TestStatistics::RooSumL;  Likelihood class that sums over multiple -log components. More...;  ; class  RooSuperCategory;  Joins several RooAbsCategoryLValue objects into a single category. More...;  ; class  RooTable;  Abstract interface for table objects. More...;  ; class  RooTemplateProxy< T >;  ; class  RooThresholdCategory;  A real-to-category mapping defined by a series of thresholds. More...;  ; class  RooTrace;  Controls the memory tracing hooks in all RooFit objects. More...;  ; class  RooTreeDataStore;  TTree-backed data storage. More...;  ; class  RooTruthModel;  Implements a RooResolution model that corresponds to a delta function. More...;  ; class  RooUnbinnedL;  A -log(likelihood) calculation from a dataset (assumed to be unbinned) and a PDF. More...;  ; class  RooUniformBinning;  Implementation of RooAbsBinning that provides a uniform binning in 'n' bins between the ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:19463,log,log,19463,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['log'],['log']
Testability,"ed structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. const char * Getenv(const char* name); Get environment variable. void Unsetenv(const char* name); Unset environment variable. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* shellcmd, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; This function saves internally the current state into a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:30453,log,log,30453,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,3,['log'],['log']
Testability,"ed through Convert().; The files' links are sorted alphabetically. void ReferenceEntity(TSubString& str, TClass* entity, const char* comment = 0); Create a reference to a class documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin(): 2; str.Length(): 5; Output:; str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; str.Begin(): 2; str.Length(): 30. void ReferenceEntity(TSubString& str, TDataMember* entity, const char* comment = 0); Create a reference to a data member documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin(): 2; str.Length(): 5; Output:; str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; str.Begin(): 2; str.Length(): 30. void ReferenceEntity(TSubString& str, TDataType* entity, const char* comment = 0); Create a reference to a type documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin(): 2; str.Length(): 5; Output:; str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; str.Begin(): 2; str.Length(): 30. void ReferenceEntity(TSubString& str, TMethod* entity, const char* comment = 0); Create a reference to a method documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocOutput.html:13820,test,test,13820,root/html528/TDocOutput.html,https://root.cern,https://root.cern/root/html528/TDocOutput.html,6,['test'],['test']
Testability,"ed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:120978,log,logEvalError,120978,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['log'],['logEvalError']
Testability,"ed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:122308,log,logEvalError,122308,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['log'],['logEvalError']
Testability,ed value of background a0 parameter; �� Double_t�; fA0Err;������������������������ //error value of background a0 parameter; �� Double_t� fAxInit;��������; ���������������//initial value of background ax parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;������������������������ //error value of background ax parameter; �� Double_t�; fAyInit;����������������������� //initial value of background ay; parameter(backgroud is estimated as a0+ax*x+ay*y); �� Double_t�; fAyCalc;����������������������� //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_t��; *fFixPositionX;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate x positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionX1;������������ ����//[fNPeaks] array of logical values which; allow to fix appropriate x positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY1;���������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t�,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:47565,log,logical,47565,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability,"ed values; // of fitted y positions of 1D ridges, output parameters; double position_err_y1[MAX_NUMBER_OF_PEAKS2]; // y position errors of 1D ridges; bool fix_position_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix; // appropriate y positions of 1D ridges (not fit).; // However they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS2]; // initial values of 2D peaks; // amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 2D peaks, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 2D peaks; bool fix_amp[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows; // to fix appropriate amplitudes of 2D peaks (not fit).; // However they are present in the estimated functional; double amp_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D; // ridges amplitudes, input parameters; double amp_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 1D ridges, output parameters; double amp_err_x1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which alloes to fix; // appropriate amplitudes of 1D ridges (not fit).; // However they are present in the estimated functional; double amp_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D; // ridges amplitudes, input parameters; double amp_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 1D ridges, output parameters; double amp_err_y1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix; // appropriate amplitudes of 1D ridges (not fit).; // However they are present in the estimated functional; double volume[MAX_NUMBER_OF_PEAKS1]; // calculated volumes of peaks; double volume_err[MAX_NUMBER_OF_PEAKS1]; // errors of peak volumes; double sigma_init_x; // sigma x parameter; double sigma_calc_x;; double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:49476,log,logical,49476,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['log'],['logical']
Testability,"ed with never constructs!; 460 // for example: just return std::array or std::vector, there's; 461 // is going to be only minor overhead in c++11.; 462 const double* GetPointError(unsigned int ipoint, double & errvalue) const; 463 {; 464 assert( ipoint < fMaxPoints );; 465 assert( fErrorType == kCoordError || fErrorType == kAsymError );; 466 ; 467 errvalue = Error( ipoint );; 468 return CoordErrors( ipoint );; 469 }; 470 ; 471 /**; 472 Get errors on the point (coordinate errors and asymmetric value errors) for the; 473 given fit point.; 474 It must be called only when the coordinate errors and asymmetric errors are stored; 475 otherwise it will produce an assert.; 476 */; 477 // not threadsafe, to be replaced with never constructs!; 478 // for example: just return std::array or std::vector, there's; 479 // is going to be only minor overhead in c++11.; 480 const double* GetPointError(unsigned int ipoint, double & errlow, double & errhigh) const; 481 {; 482 assert( ipoint < fMaxPoints );; 483 assert( fErrorType == kAsymError );; 484 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 485 assert( fDataError.empty() );; 486 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 487 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 488 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 489 ; 490 errhigh = fDataErrorHighPtr[ ipoint ];; 491 errlow = fDataErrorLowPtr[ ipoint ];; 492 ; 493 return CoordErrors( ipoint );; 494 }; 495 ; 496 /**; 497 returns a single coordinate error component of a point.; 498 This function is threadsafe in contrast to Coords(...); 499 and can easily get vectorized by the compiler in loops; 500 running over the ipoint-index.; 501 */; 502 double GetBinUpEdgeComponent( unsigned int ipoint, unsigned int icoord ) const; 503 {; 504 assert( icoord < fDim );; 505 assert( !fBinEdge.empty() );; 506 assert( ipoint < fBinEdge.front().size() );; 507 ; 508 return fBinEdge[icoor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:17096,assert,assert,17096,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,4,['assert'],['assert']
Testability,ed) sig: 100 bkg: 100; : #events: (unweighted) sig: 100 bkg: 100; : Training 1000 Decision Trees ... patience please; : Elapsed time for training with 200 events: 0.101 sec ; <HEADER> BDTG : [datasetBkg2] : Evaluation of BDTG on training sample (200 events); : Elapsed time for evaluation of 200 events: 0.0159 sec ; : Creating xml weight file: datasetBkg2/weights/TMVAMultiBkg2_BDTG.weights.xml; : Creating standalone class: datasetBkg2/weights/TMVAMultiBkg2_BDTG.class.C; : TMVASignalBackground2.root:/datasetBkg2/Method_BDT/BDTG; <HEADER> Factory : Training finished; : ; : Ranking input variables (method specific)...; <HEADER> BDTG : Ranking result (top variable is best ranked); : --------------------------------------; : Rank : Variable : Variable Importance; : --------------------------------------; : 1 : var4 : 2.842e-01; : 2 : var1 : 2.630e-01; : 3 : var2 : 2.360e-01; : 4 : var3 : 2.168e-01; : --------------------------------------; <HEADER> Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: datasetBkg2/weights/TMVAMultiBkg2_BDTG.weights.xml; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG for Classification performance; : ; <HEADER> BDTG : [datasetBkg2] : Evaluation of BDTG on testing sample (200 events); : Elapsed time for evaluation of 200 events: 0.0111 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDTG; : ; <HEADER> BDTG : [datasetBkg2] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.31824 0.87725 [ -1.8821 2.9998 ]; : var2: 0.68634 0.81995 [ -1.2800 2.0015 ]; : var3: 0.28439 1.0366 [ -1.8691 3.0223 ]; : var4: 0.66443 1.1236 [ -1.7755 3.3317 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); :,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:26395,test,testing,26395,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,1,['test'],['testing']
Testability,ed) sig: 100 bkg: 100; : #events: (unweighted) sig: 100 bkg: 100; : Training 1000 Decision Trees ... patience please; : Elapsed time for training with 200 events: 0.106 sec ; <HEADER> BDTG : [datasetBkg0] : Evaluation of BDTG on training sample (200 events); : Elapsed time for evaluation of 200 events: 0.0159 sec ; : Creating xml weight file: datasetBkg0/weights/TMVAMultiBkg0_BDTG.weights.xml; : Creating standalone class: datasetBkg0/weights/TMVAMultiBkg0_BDTG.class.C; : TMVASignalBackground0.root:/datasetBkg0/Method_BDT/BDTG; <HEADER> Factory : Training finished; : ; : Ranking input variables (method specific)...; <HEADER> BDTG : Ranking result (top variable is best ranked); : --------------------------------------; : Rank : Variable : Variable Importance; : --------------------------------------; : 1 : var1 : 2.673e-01; : 2 : var2 : 2.603e-01; : 3 : var3 : 2.490e-01; : 4 : var4 : 2.234e-01; : --------------------------------------; <HEADER> Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: datasetBkg0/weights/TMVAMultiBkg0_BDTG.weights.xml; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG for Classification performance; : ; <HEADER> BDTG : [datasetBkg0] : Evaluation of BDTG on testing sample (200 events); : Elapsed time for evaluation of 200 events: 0.0119 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDTG; : ; <HEADER> BDTG : [datasetBkg0] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.13613 0.97981 [ -2.0823 2.9998 ]; : var2: 0.085482 0.86846 [ -1.9349 2.0015 ]; : var3: 0.16949 0.99559 [ -2.4774 3.0223 ]; : var4: 0.33525 1.2442 [ -2.9030 3.3317 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area);,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:8246,test,testing,8246,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,1,['test'],['testing']
Testability,"ed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTQueryResult::AddInput(TObject* obj); voidTQueryResult::AddLogLine(const char* logline); TQueryResult*TQueryResult::CloneInfo(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidTQueryResult::SaveSelector(const char* selec); voidTQueryResult::SetArchived(const char* archfile); virtual voidTQueryResult::SetInputList(TList* in, Bool_t adopt = kTRUE); virtual voidTQueryResult::SetOutputList(TList* out, Bool_t adopt = kTRUE); virtual voidTQueryResult::SetProcessInfo(Long64_t ent, Float_t cpu = 0., Long64_t siz = -1, Float_t inittime = 0., Float_t proctime = 0.). private:. TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); virtual voidRecordEnd(TQueryResult::EQueryStatus status, TList* outlist = 0); virtual voidSetFinalized(); voidSetResultFile(const char* rf); voidSetRunning(Int_t startlog, const char* par, Int_t nwrks). Data Members; public:. enum TQueryResult::EQueryStatus { kAborted; kSubmitted; kRunning; kStopped; kCompleted; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofQueryResult.html:6197,log,logline,6197,root/html528/TProofQueryResult.html,https://root.cern,https://root.cern/root/html528/TProofQueryResult.html,3,['log'],['logline']
Testability,"ed; /* Set to 1 if the content is gzipped, in which; 1866 * case we need a ""Content-Eencoding: gzip"" header */; 1867 int location; /* 0 = nowhere, 1 = on disk, 2 = in memory */; 1868};; 1869 ; 1870 ; 1871struct mg_file_access {; 1872 /* File properties filled by mg_fopen: */; 1873 FILE *fp;; 1874};; 1875 ; 1876struct mg_file {; 1877 struct mg_file_stat stat;; 1878 struct mg_file_access access;; 1879};; 1880 ; 1881 ; 1882#define STRUCT_FILE_INITIALIZER \; 1883 { \; 1884 {(uint64_t)0, (time_t)0, 0, 0, 0}, \; 1885 { \; 1886 (FILE *)NULL \; 1887 } \; 1888 }; 1889 ; 1890 ; 1891/* Describes listening socket, or socket which was accept()-ed by the master; 1892 * thread and queued for future handling by the worker thread. */; 1893struct socket {; 1894 SOCKET sock; /* Listening socket */; 1895 union usa lsa; /* Local socket address */; 1896 union usa rsa; /* Remote socket address */; 1897 unsigned char is_ssl; /* Is port SSL-ed */; 1898 unsigned char ssl_redir; /* Is port supposed to redirect everything to SSL; 1899 * port */; 1900 unsigned char in_use; /* 0: invalid, 1: valid, 2: free */; 1901};; 1902 ; 1903 ; 1904/* Enum const for all options must be in sync with; 1905 * static struct mg_option config_options[]; 1906 * This is tested in the unit test (test/private.c); 1907 * ""Private Config Options""; 1908 */; 1909enum {; 1910 /* Once for each server */; 1911 LISTENING_PORTS,; 1912 NUM_THREADS,; 1913 RUN_AS_USER,; 1914 CONFIG_TCP_NODELAY, /* Prepended CONFIG_ to avoid conflict with the; 1915 * socket option typedef TCP_NODELAY. */; 1916 MAX_REQUEST_SIZE,; 1917 LINGER_TIMEOUT,; 1918 CONNECTION_QUEUE_SIZE,; 1919 LISTEN_BACKLOG_SIZE,; 1920#if defined(__linux__); 1921 ALLOW_SENDFILE_CALL,; 1922#endif; 1923#if defined(_WIN32); 1924 CASE_SENSITIVE_FILES,; 1925#endif; 1926 THROTTLE,; 1927 ENABLE_KEEP_ALIVE,; 1928 REQUEST_TIMEOUT,; 1929 KEEP_ALIVE_TIMEOUT,; 1930#if defined(USE_WEBSOCKET); 1931 WEBSOCKET_TIMEOUT,; 1932 ENABLE_WEBSOCKET_PING_PONG,; 1933#endif; 1934 DECODE_URL,; 1935 D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:58079,test,tested,58079,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,3,['test'],"['test', 'tested']"
Testability,"ed; /* Set to 1 if the content is gzipped, in which; 1867 * case we need a ""Content-Eencoding: gzip"" header */; 1868 int location; /* 0 = nowhere, 1 = on disk, 2 = in memory */; 1869};; 1870 ; 1871 ; 1872struct mg_file_access {; 1873 /* File properties filled by mg_fopen: */; 1874 FILE *fp;; 1875};; 1876 ; 1877struct mg_file {; 1878 struct mg_file_stat stat;; 1879 struct mg_file_access access;; 1880};; 1881 ; 1882 ; 1883#define STRUCT_FILE_INITIALIZER \; 1884 { \; 1885 {(uint64_t)0, (time_t)0, 0, 0, 0}, \; 1886 { \; 1887 (FILE *)NULL \; 1888 } \; 1889 }; 1890 ; 1891 ; 1892/* Describes listening socket, or socket which was accept()-ed by the master; 1893 * thread and queued for future handling by the worker thread. */; 1894struct socket {; 1895 SOCKET sock; /* Listening socket */; 1896 union usa lsa; /* Local socket address */; 1897 union usa rsa; /* Remote socket address */; 1898 unsigned char is_ssl; /* Is port SSL-ed */; 1899 unsigned char ssl_redir; /* Is port supposed to redirect everything to SSL; 1900 * port */; 1901 unsigned char in_use; /* 0: invalid, 1: valid, 2: free */; 1902};; 1903 ; 1904 ; 1905/* Enum const for all options must be in sync with; 1906 * static struct mg_option config_options[]; 1907 * This is tested in the unit test (test/private.c); 1908 * ""Private Config Options""; 1909 */; 1910enum {; 1911 /* Once for each server */; 1912 LISTENING_PORTS,; 1913 NUM_THREADS,; 1914 RUN_AS_USER,; 1915 CONFIG_TCP_NODELAY, /* Prepended CONFIG_ to avoid conflict with the; 1916 * socket option typedef TCP_NODELAY. */; 1917 MAX_REQUEST_SIZE,; 1918 LINGER_TIMEOUT,; 1919 CONNECTION_QUEUE_SIZE,; 1920 LISTEN_BACKLOG_SIZE,; 1921#if defined(__linux__); 1922 ALLOW_SENDFILE_CALL,; 1923#endif; 1924#if defined(_WIN32); 1925 CASE_SENSITIVE_FILES,; 1926#endif; 1927 THROTTLE,; 1928 ENABLE_KEEP_ALIVE,; 1929 REQUEST_TIMEOUT,; 1930 KEEP_ALIVE_TIMEOUT,; 1931#if defined(USE_WEBSOCKET); 1932 WEBSOCKET_TIMEOUT,; 1933 ENABLE_WEBSOCKET_PING_PONG,; 1934#endif; 1935 DECODE_URL,; 1936 D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:58111,test,tested,58111,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,3,['test'],"['test', 'tested']"
Testability,"edBackground; static const TGGC*fgDefaultSelectedBackgroundGC; static const TGGC*fgDefaultSelectedGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextEntry(const TGWindow* p, TGTextBuffer* text, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame|kDoubleBorder, Pixel_t back = GetWhitePixel()); Create a text entry widget. It will adopt the TGTextBuffer object; (i.e. the text buffer will be deleted by the text entry widget). TGTextEntry(const TGWindow* parent = 0, const char* text = 0, Int_t id = -1); Simple text entry constructor. TGTextEntry(const TString& contents, const TGWindow* parent, Int_t id = -1); Simple test entry constructor. Notice TString argument comes before the; parent argument (to make this ctor different from the first one taking a; const char*). ~TGTextEntry(); Delete a text entry widget. void Init(); Do default initialization. TGDimension GetDefaultSize() const; Return the default / minimal size of the widget. void SetDefaultSize(UInt_t w, UInt_t h); Set the default / minimal size of the widget. void ReturnPressed(); This signal is emitted when the return or enter key is pressed. void ShiftTabPressed(); This signal is emitted when <SHIFT> and <TAB> keys are pressed. void TabPressed(); This signal is emitted when the <TAB> key is pressed. void TextChanged(const char* text = 0); This signal is emitted every time the text has changed. void CursorOutLeft(); This signal is emitted when cursor is going out of left side. void CursorOutRight(); This signal is emitted when cursor is going out of right side. void CursorOutUp(); This signal is emitted whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEntry.html:26609,test,test,26609,root/html528/TGTextEntry.html,https://root.cern,https://root.cern/root/html528/TGTextEntry.html,4,['test'],['test']
Testability,"ed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooDataSet*_dataSummary dataset to store results; RooRealVar*_dll0hContainer variable for delta NLL ; RooRealVar*_nll0hContainer variable for NLL result on null hypothesis; Double_t_nullValueNumeric value of Nsignal parameter representing the null hypothesis; string_parNameName of Nsignal parameter; RooRealVar*_sig0hContainer variable for NLL result with signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDLLSignificanceMCSModule(const RooRealVar& param, Double_t nullHypoValue = 0); Constructor of module with parameter to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const char* parName, Double_t nullHypoValue = 0); Constructor of module with parameter name to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const RooDLLSignificanceMCSModule& other); Copy constructor. Bool_t initializeInstance(); Initialize module after attachment to RooMCStudy object. Bool_t initializeRun(Int_t ); Initialize module at beginning of RooCMStudy run. RooDataSet* finalizeRun(); Return auxiliary dataset with results of delta(-log(L)); calculations of this module so that it is merged with; RooMCStudy::fitParDataSet() by RooMCStudy. Bool_t processAfterFit(Int_t ); Save likelihood from nominal fit, fix chosen parameter to its; null hypothesis value and rerun fit Save difference in likelihood; and associated Gaussian significance in auxilary dataset. virtual ~RooDLLSignificanceMCSModule(). » Last changed: Mon Jul 4 15:22:35 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDLLSignificanceMCSModule.html:8834,log,log,8834,root/html530/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html530/RooDLLSignificanceMCSModule.html,1,['log'],['log']
Testability,"ed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooDataSet*_dataSummary dataset to store results; RooRealVar*_dll0hContainer variable for delta NLL ; RooRealVar*_nll0hContainer variable for NLL result on null hypothesis; Double_t_nullValueNumeric value of Nsignal parameter representing the null hypothesis; string_parNameName of Nsignal parameter; RooRealVar*_sig0hContainer variable for NLL result with signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDLLSignificanceMCSModule(const RooRealVar& param, Double_t nullHypoValue = 0); Constructor of module with parameter to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const char* parName, Double_t nullHypoValue = 0); Constructor of module with parameter name to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const RooDLLSignificanceMCSModule& other); Copy constructor. Bool_t initializeInstance(); Initialize module after attachment to RooMCStudy object. Bool_t initializeRun(Int_t ); Initialize module at beginning of RooCMStudy run. RooDataSet* finalizeRun(); Return auxiliary dataset with results of delta(-log(L)); calculations of this module so that it is merged with; RooMCStudy::fitParDataSet() by RooMCStudy. Bool_t processAfterFit(Int_t ); Save likelihood from nominal fit, fix chosen parameter to its; null hypothesis value and rerun fit Save difference in likelihood; and associated Gaussian significance in auxilary dataset. virtual ~RooDLLSignificanceMCSModule(). » Last changed: Thu Nov 3 20:07:53 2011 » Last generated: 2011-11-03 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDLLSignificanceMCSModule.html:8834,log,log,8834,root/html532/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html532/RooDLLSignificanceMCSModule.html,1,['log'],['log']
Testability,"ed_len = len64;; 6506 }; 6507 body = conn->buf + conn->request_len + conn->consumed_content;; 6508 memcpy(buf, body, (size_t)buffered_len);; 6509 len64 -= buffered_len;; 6510 conn->consumed_content += buffered_len;; 6511 nread += buffered_len;; 6512 buf = (char *)buf + buffered_len;; 6513 }; 6514 ; 6515 /* We have returned all buffered data. Read new data from the remote; 6516 * socket.; 6517 */; 6518 if ((n = pull_all(NULL, conn, (char *)buf, (int)len64)) >= 0) {; 6519 conn->consumed_content += n;; 6520 nread += n;; 6521 } else {; 6522 nread = ((nread > 0) ? nread : n);; 6523 }; 6524 }; 6525 return (int)nread;; 6526}; 6527 ; 6528 ; 6529/* Forward declarations */; 6530static void handle_request(struct mg_connection *);; 6531static void log_access(const struct mg_connection *);; 6532 ; 6533 ; 6534/* Handle request, update statistics and call access log */; 6535static void; 6536handle_request_stat_log(struct mg_connection *conn); 6537{; 6538#if defined(USE_SERVER_STATS); 6539 struct timespec tnow;; 6540 conn->conn_state = 4; /* processing */; 6541#endif; 6542 ; 6543 handle_request(conn);; 6544 ; 6545 ; 6546#if defined(USE_SERVER_STATS); 6547 conn->conn_state = 5; /* processed */; 6548 ; 6549 clock_gettime(CLOCK_MONOTONIC, &tnow);; 6550 conn->processing_time = mg_difftimespec(&tnow, &(conn->req_time));; 6551 ; 6552 mg_atomic_add64(&(conn->phys_ctx->total_data_read), conn->consumed_content);; 6553 mg_atomic_add64(&(conn->phys_ctx->total_data_written),; 6554 conn->num_bytes_sent);; 6555#endif; 6556 ; 6557 DEBUG_TRACE(""%s"", ""handle_request done"");; 6558 ; 6559 if (conn->phys_ctx->callbacks.end_request != NULL) {; 6560 conn->phys_ctx->callbacks.end_request(conn, conn->status_code);; 6561 DEBUG_TRACE(""%s"", ""end_request callback done"");; 6562 }; 6563 log_access(conn);; 6564}; 6565 ; 6566 ; 6567#if defined(USE_HTTP2); 6568#if defined(NO_SSL); 6569#error ""HTTP2 requires ALPN, APLN requires SSL/TLS""; 6570#endif; 6571#define USE_ALPN; 6572#include ""mod_http2.inl""; 6573/* Not sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:190282,log,log,190282,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['log'],['log']
Testability,"ed_len = len64;; 6507 }; 6508 body = conn->buf + conn->request_len + conn->consumed_content;; 6509 memcpy(buf, body, (size_t)buffered_len);; 6510 len64 -= buffered_len;; 6511 conn->consumed_content += buffered_len;; 6512 nread += buffered_len;; 6513 buf = (char *)buf + buffered_len;; 6514 }; 6515 ; 6516 /* We have returned all buffered data. Read new data from the remote; 6517 * socket.; 6518 */; 6519 if ((n = pull_all(NULL, conn, (char *)buf, (int)len64)) >= 0) {; 6520 conn->consumed_content += n;; 6521 nread += n;; 6522 } else {; 6523 nread = ((nread > 0) ? nread : n);; 6524 }; 6525 }; 6526 return (int)nread;; 6527}; 6528 ; 6529 ; 6530/* Forward declarations */; 6531static void handle_request(struct mg_connection *);; 6532static void log_access(const struct mg_connection *);; 6533 ; 6534 ; 6535/* Handle request, update statistics and call access log */; 6536static void; 6537handle_request_stat_log(struct mg_connection *conn); 6538{; 6539#if defined(USE_SERVER_STATS); 6540 struct timespec tnow;; 6541 conn->conn_state = 4; /* processing */; 6542#endif; 6543 ; 6544 handle_request(conn);; 6545 ; 6546 ; 6547#if defined(USE_SERVER_STATS); 6548 conn->conn_state = 5; /* processed */; 6549 ; 6550 clock_gettime(CLOCK_MONOTONIC, &tnow);; 6551 conn->processing_time = mg_difftimespec(&tnow, &(conn->req_time));; 6552 ; 6553 mg_atomic_add64(&(conn->phys_ctx->total_data_read), conn->consumed_content);; 6554 mg_atomic_add64(&(conn->phys_ctx->total_data_written),; 6555 conn->num_bytes_sent);; 6556#endif; 6557 ; 6558 DEBUG_TRACE(""%s"", ""handle_request done"");; 6559 ; 6560 if (conn->phys_ctx->callbacks.end_request != NULL) {; 6561 conn->phys_ctx->callbacks.end_request(conn, conn->status_code);; 6562 DEBUG_TRACE(""%s"", ""end_request callback done"");; 6563 }; 6564 log_access(conn);; 6565}; 6566 ; 6567 ; 6568#if defined(USE_HTTP2); 6569#if defined(NO_SSL); 6570#error ""HTTP2 requires ALPN, APLN requires SSL/TLS""; 6571#endif; 6572#define USE_ALPN; 6573#include ""mod_http2.inl""; 6574/* Not sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:190314,log,log,190314,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['log'],['log']
Testability,"edef PhysicalShapeMap_t::const_iterator PhysicalShapeMapCIt_t;  ; typedef PhysicalShapeMap_t::iterator PhysicalShapeMapIt_t;  ; typedef PhysicalShapeMap_t::value_type PhysicalShapeMapValueType_t;  ; typedef ShapeVec_t::iterator ShapeVec_i;  ; typedef std::vector< const TGLPhysicalShape * > ShapeVec_t;  ;  Public Types inherited from TGLLockable; enum  ELock { kUnlocked; , kDrawLock; , kSelectLock; , kModifyLock; };  . #include <TGLScenePad.h>. Inheritance diagram for TGLScenePad:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ CSPart_t. typedef std::pair<UInt_t, RootCsg::TBaseMesh*> TGLScenePad::CSPart_t. protected . Definition at line 48 of file TGLScenePad.h. Constructor & Destructor Documentation. ◆ TGLScenePad() [1/2]. TGLScenePad::TGLScenePad ; (; const TGLScenePad & ; ). privatedelete . ◆ TGLScenePad() [2/2]. TGLScenePad::TGLScenePad ; (; TVirtualPad * ; pad). cache logicals during scene rebuilds ; Definition at line 51 of file TGLScenePad.cxx. ◆ ~TGLScenePad(). TGLScenePad::~TGLScenePad ; (; ). inlineoverride . Definition at line 60 of file TGLScenePad.h. Member Function Documentation. ◆ AddCompositeOp(). void TGLScenePad::AddCompositeOp ; (; UInt_t ; operation). overridevirtual . Add composite operation used to combine objects added via AddObject TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ; Implements TVirtualViewer3D.; Definition at line 528 of file TGLScenePad.cxx. ◆ AddHistoPhysical(). void TGLScenePad::AddHistoPhysical ; (; TGLLogicalShape * ; log, . const Float_t * ; histColor = nullptr . ). Scale and rotate a histo object to mimic placement in canvas. ; Definition at line 75 of file TGLScenePad.cxx. ◆ AddObject() [1/2]. Int_t TGLScenePad::AddObject ; (; const TBuffer3D & ; buffer, . Bool_t * ; addChildren = nullptr . ). overridevirtual . Add an object to the viewer, using internal physical IDs TVirtualVie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:25232,log,logicals,25232,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['log'],['logicals']
Testability,"edium() constDefinition TGeoVolume.h:175; (*) Note: If the current point is in fact outside the geometry, the current node pointer will not be NULL, but pointing to the top node.; In order to take decisions in such case one needs always to test:; if (gGeoManager->IsOutside()) {; // current point is actually outside; ... // corresponding action; }; TGeoManager::IsOutsideBool_t IsOutside() constDefinition TGeoManager.h:406; Specific information related to the current volume/node like ID's or shape can be then retrieved from the corresponding objects. Current state index. The number of possible different states of the modeller corresponds to the number of different objects/paths in the geometry. This has nothing to do with the number of nodes, since the same node can be found on different branches. In other words, the number of states corresponds to the number of nodes in the expanded geometry tree. Since unfortunately this expansion from logical to physical hierarchy cannot be stored on regular basis due to the large size of the latter, one cannot directly assign state numbers. If the size of the expansion proves however to be small enough (less than about 50 million objects), a parallel structure storing these state indices is built and stored in memory. In such case each state automatically gets an index that can be retrieved after any state initialization. These indices can prove to be quite useful for being able to keep track of the navigation history and force certain states. Let's illustrate how this works with a simple example:; Suppose we have a simple geometry with a volume B positioned twice inside a container A. Then A is positioned twice in a top container T. The complete list of logical nodes is: T_1, A_1, A_2, B_1, B_2. On the other hand we will have more states than logical nodes:; /T_1- 1 state at level = 0; /T_1/A_1,/T_1/A_2- 2 states at level = 1; /T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2 - 4 states at level = 2; All these states will get au",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:75545,log,logical,75545,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['log'],['logical']
Testability,"eds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWheter the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocket.html:12237,log,login,12237,root/html530/TXSocket.html,https://root.cern,https://root.cern/root/html530/TXSocket.html,2,['log'],['login']
Testability,ee branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooArgSet*RooAbsOptTestStatistic::_normSetPointer to set with observables used for normalization; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooAbsOptTestStatistic::_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*RooAbsOptTestStatistic::_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; TListRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_tRooAbsTestStatistic::_simCountTotal number of component p.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNLLVar.html:34973,test,test,34973,root/html528/RooNLLVar.html,https://root.cern,https://root.cern/root/html528/RooNLLVar.html,2,['test'],['test']
Testability,"eeDepth(TMVA::Node* n = NULL); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidTMVA::BinaryTree::DeleteNode(TMVA::Node*); TMVA::MsgLogger&TMVA::BinaryTree::Log() const. private:. voidDestroyNode(TMVA::BinarySearchTreeNode*); voidInsert(const TMVA::Event*, TMVA::Node*); Bool_tInVolume(const vector<Float_t>&, TMVA::Volume*) const; voidNormalizeTree(vector<pair<double,const TMVA::Event*>,allocator<pair<double,const TMVA::Event*> > >::iterator, vector<pair<double,const TMVA::Event*>,allocator<pair<double,const TMVA::Event*> > >::iterator, UInt_t); TMVA::BinarySearchTreeNode*Search(TMVA::Event*, TMVA::Node*) const; Double_tSearchVolume(TMVA::Node*, TMVA::Volume*, Int_t, vector<const TMVA::BinarySearchTreeNode*>* events). Data Members; protected:. UInt_tTMVA::BinaryTree::fDepthmaximal depth in tree reached; UInt_tTMVA::BinaryTree::fNNodestotal number of nodes in the tree (counted); TMVA::Node*TMVA::BinaryTree::fRootthe root node of the tree; static TMVA::MsgLogger*TMVA::BinaryTree::fgLoggermessage logger, static to save resources . private:. Bool_tfCanNormalizethe tree can be normalised; UInt_tfCurrentDepthinternal variable, counting the depth of the tree during insertion ; vector<Float_t>fMax[2]RMS for signal and background for each variable; vector<Float_t>fMeans[2]mean for signal and background for each variable; vector<Float_t>fMin[2]RMS for signal and background for each variable; Double_tfNEventsW[2]Number of events per class, taking into account event weights; vector<std::pair<Double_t,const TMVA::Event*> >fNormalizeTreeTable; UInt_tfPeriodperiode (number of event variables); vector<Float_t>fRMS[2]RMS for signal and background for each variable; Bool_tfStatisticsIsValidflag if last stat calculation is still valid, set to false if new node is insert; vector<Double_t>fSum[2]Sum for signal and background for each variable; Double_tfSumOfWeightsTotal number of events",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__BinarySearchTree.html:3758,log,logger,3758,root/html534/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html534/TMVA__BinarySearchTree.html,1,['log'],['logger']
Testability,"eeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:39429,test,test,39429,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,1,['test'],['test']
Testability,"eeds to be destructed after the pages source is destructed (an thus be declared before); 75 std::unique_ptr<Internal::RPageStorage::RTaskScheduler> fUnzipTasks;; 76 ; 77 std::unique_ptr<Internal::RPageSource> fSource;; 78 /// Needs to be destructed before fSource; 79 std::unique_ptr<RNTupleModel> fModel;; 80 /// We use a dedicated on-demand reader for Show() and Scan(). Printing data uses all the fields; 81 /// from the full model even if the analysis code uses only a subset of fields. The display reader; 82 /// is a clone of the original reader.; 83 std::unique_ptr<RNTupleReader> fDisplayReader;; 84 /// The ntuple descriptor in the page source is protected by a read-write lock. We don't expose that to the; 85 /// users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the; 86 /// descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale.; 87 /// Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes,; 88 /// not on a hot code path.; 89 std::unique_ptr<RNTupleDescriptor> fCachedDescriptor;; 90 Detail::RNTupleMetrics fMetrics;; 91 ; 92 RNTupleReader(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSource> source,; 93 const RNTupleReadOptions &options);; 94 /// The model is generated from the ntuple metadata on storage.; 95 explicit RNTupleReader(std::unique_ptr<Internal::RPageSource> source, const RNTupleReadOptions &options);; 96 ; 97 void ConnectModel(RNTupleModel &model);; 98 RNTupleReader *GetDisplayReader();; 99 void InitPageSource(bool enableMetrics);; 100 ; 101 DescriptorId_t RetrieveFieldId(std::string_view fieldName) const;; 102 ; 103public:; 104 // Browse through the entries; 105 class RIterator {; 106 private:; 107 NTupleSize_t fIndex = kInvalidNTupleIndex;; 108 ; 109 public:; 110 using iterator = RIterator;; 111 using iterator_category = std::forward_iterator_tag;; 112 using value_type = NTupleSize_t;; 113 using ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleReader_8hxx_source.html:3893,test,testing,3893,doc/master/RNTupleReader_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html,1,['test'],['testing']
Testability,"eepointer to the parent tree to which the Node belongs; charTMVA::Node::fPosposition, i.e. it is a left (l) or right (r) daughter; Float_tfPuritythe node purity; Float_tfRMSresponse RMS of the regression node; Float_tfResponseresponse value in case of regression; TMVA::Node*TMVA::Node::fRightpointers to the two ""daughter"" nodes; Short_tfSelectorindex of variable used in node selection (decision tree); TMVA::DTNodeTrainingInfo*fTrainInfo. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DecisionTreeNode(); constructor of an essentially ""empty"" node floating in space. DecisionTreeNode(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. DecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = __null); copy constructor of a node. It will result in an explicit copy of; the node and recursively all it's daughters. ~DecisionTreeNode(); destructor. Bool_t GoesRight(const TMVA::Event& ) const; test event if it decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. void SetPurity( void ); return the S/(S+B) (purity) for the node; REM: even if nodes with purity 0.01 are very PURE background nodes, they still; get a small value of the purity. void Print(ostream& os) const; print the node. void PrintRec(ostream& os) const; recursively print the node and its daughters (--> print the 'tree'). Bool_t ReadDataRecord(istream& is, UInt_t tmva_Version_Code = 262656); Read the data block. void ClearNodeAndAllDaughters(); clear the nodes (their S/N, Nevents etc), just keep the structure of the tree. void ResetValidationData(); temporary stored node values (number of events, etc.) that originate; not from the training but from the validation data (used in pruning). void PrintPrune(ostream& os) const; printout of the node (can be read in with ReadDataRecord). void PrintRecPrune(ostream& os) const; recursi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTreeNode.html:6903,test,test,6903,root/html602/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTreeNode.html,1,['test'],['test']
Testability,"eepointer to the parent tree to which the Node belongs; charTMVA::Node::fPosposition, i.e. it is a left (l) or right (r) daughter; Float_tfPuritythe node purity; Float_tfRMSresponse RMS of the regression node; Float_tfResponseresponse value in case of regression; TMVA::Node*TMVA::Node::fRightpointers to the two ""daughter"" nodes; Short_tfSelectorindex of variable used in node selection (decision tree); TMVA::DTNodeTrainingInfo*fTrainInfo. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DecisionTreeNode(); constructor of an essentially ""empty"" node floating in space. DecisionTreeNode(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. DecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = __null); copy constructor of a node. It will result in an explicit copy of; the node and recursively all it's daughters. ~DecisionTreeNode(); destructor. Bool_t GoesRight(const TMVA::Event& ) const; test event if it decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. void SetPurity( void ); return the S/(S+B) (purity) for the node; REM: even if nodes with purity 0.01 are very PURE background nodes, they still; get a small value of the purity. void Print(ostream& os) const; print the node. void PrintRec(ostream& os) const; recursively print the node and its daughters (--> print the 'tree'). Bool_t ReadDataRecord(istream& is, UInt_t tmva_Version_Code = 262657); Read the data block. void ClearNodeAndAllDaughters(); clear the nodes (their S/N, Nevents etc), just keep the structure of the tree. void ResetValidationData(); temporary stored node values (number of events, etc.) that originate; not from the training but from the validation data (used in pruning). void PrintPrune(ostream& os) const; printout of the node (can be read in with ReadDataRecord). void PrintRecPrune(ostream& os) const; recursi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__DecisionTreeNode.html:6911,test,test,6911,root/html604/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html604/TMVA__DecisionTreeNode.html,1,['test'],['test']
Testability,"eetype);  ; void AddBackgroundTree (TTree *background, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  number of signal events (used to compute significance) ;  ; void AddCut (const TCut &cut, const TString &className="""");  ; void AddCut (const TString &cut, const TString &className="""");  ; DataSetInfo & AddDataSet (const TString &);  ; DataSetInfo & AddDataSet (DataSetInfo &);  ; void AddEvent (const TString &className, Types::ETreeType tt, const std::vector< Double_t > &event, Double_t weight);  add event vector event : the order of values is: variables + targets + spectators ;  ; void AddRegressionTarget (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  ; void AddRegressionTree (TTree *tree, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  ; void AddSignalTestEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal testing event ;  ; void AddSignalTrainingEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal training event ;  ; void AddSignalTree (TString datFileS, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  add signal tree from text file ;  ; void AddSignalTree (TTree *signal, Double_t weight, const TString &treetype);  ; void AddSignalTree (TTree *signal, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  number of signal events (used to compute significance) ;  ; void AddSpectator (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  user inserts target in data set info ;  ; void AddTarget (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  user inserts target in data set info ;  ; void AddTestEvent (const TString &className, const std::vector< Double_t > &event, Double_t weight);  add signal test event ;  ; void AddTrainingEvent (const TString &classNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:1920,test,testing,1920,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['test'],['testing']
Testability,"ef is 100)Definition BrentMinimizer1D.h:145; ROOT::Math::BrentMinimizer1D::fXMindouble fXMinLower bound of the search interval.Definition BrentMinimizer1D.h:147; ROOT::Math::BrentMinimizer1D::SetFunctionvoid SetFunction(const ROOT::Math::IGenFunction &f, double xlow, double xup)Sets function to be minimized.Definition BrentMinimizer1D.cxx:48; ROOT::Math::BrentMinimizer1D::fNIterint fNIterNumber of iterations needed for the last estimation.Definition BrentMinimizer1D.h:144; ROOT::Math::BrentMinimizer1D::Minimizebool Minimize(int maxIter, double absTol=1.E-8, double relTol=1.E-10) overrideFind minimum position iterating until convergence specified by the absolute and relative tolerance or...Definition BrentMinimizer1D.cxx:76; ROOT::Math::BrentMinimizer1D::SetDefaultNpxstatic void SetDefaultNpx(int npx)set number of default Npx used at construction time (when SetNpx is not called) Default value is 100Definition BrentMinimizer1D.cxx:43; ROOT::Math::BrentMinimizer1D::fLogScanbool fLogScanflag to control usage of a log scanDefinition BrentMinimizer1D.h:143; ROOT::Math::BrentMinimizer1D::fStatusint fStatusStatus of code of the last estimate.Definition BrentMinimizer1D.h:146; ROOT::Math::BrentMinimizer1D::fXMinimumdouble fXMinimumPosition of the estimated minimum.Definition BrentMinimizer1D.h:149; ROOT::Math::BrentMinimizer1D::BrentMinimizer1DBrentMinimizer1D()Default Constructor.Definition BrentMinimizer1D.cxx:33; ROOT::Math::BrentMinimizer1D::Nameconst char * Name() const overrideReturn name of minimization algorithm (""BrentMinimizer1D"")Definition BrentMinimizer1D.cxx:124; ROOT::Math::BrentMinimizer1D::FValMinimumdouble FValMinimum() const overrideReturn function value at current estimate of the minimum.Definition BrentMinimizer1D.cxx:67; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BrentMinimizer1D_8cxx_source.html:6085,log,log,6085,doc/master/BrentMinimizer1D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BrentMinimizer1D_8cxx_source.html,1,['log'],['log']
Testability,"efault (fAddDirectory = kTRUE), histograms are automatically added to the list of objects in memory. Note that one histogram can be removed from its support directory by calling h->SetDirectory(nullptr) or h->SetDirectory(dir) to add it to the list of objects in the directory dir.; NOTE that this is a static function. To call it, use; TH1::AddDirectory ; Definition at line 1294 of file TH1.cxx. ◆ AddDirectoryStatus(). Bool_t TH1::AddDirectoryStatus ; (; ). static . Static function: cannot be inlined on Windows/NT. ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:80183,test,test,80183,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['test'],['test']
Testability,"eference run; ; ; // the right coefficients (before fit); double GoodCoeffsNoFit[] = {; -4.37056,; 43.1468,; 13.432,; 13.4632,; 13.3964,; 13.328,; 13.3016,; 13.3519,; 4.49724,; 4.63876,; 4.89036,; -3.69982,; -3.98618,; -3.86195,; 4.36054,; -4.02597,; 4.57037,; 4.69845,; 2.83819,; -3.48855,; -3.97612; };; ; // the right coefficients (after fit); double GoodCoeffs[] = {; -4.399,; 43.15,; 13.41,; 13.49,; 13.4,; 13.23,; 13.34,; 13.29,; 4.523,; 4.659,; 4.948,; -4.026,; -4.045,; -3.939,; 4.421,; -4.006,; 4.626,; 4.378,; 3.516,; -4.111,; -3.823,; };; ; // Good Powers; int GoodPower[] = {; 1, 1, 1, 1,; 2, 1, 1, 1,; 1, 1, 1, 2,; 1, 1, 2, 1,; 1, 2, 1, 1,; 2, 2, 1, 1,; 2, 1, 1, 2,; 2, 1, 2, 1,; 1, 1, 1, 3,; 1, 3, 1, 1,; 1, 1, 5, 1,; 1, 1, 2, 2,; 1, 2, 1, 2,; 1, 2, 2, 1,; 2, 1, 1, 3,; 2, 2, 1, 2,; 2, 1, 3, 1,; 2, 3, 1, 1,; 1, 2, 2, 2,; 2, 1, 2, 2,; 2, 2, 2, 1; };; ; int nc = fit->GetNCoefficients();; int nv = fit->GetNVariables();; const int *powers = fit->GetPowers();; const int *pindex = fit->GetPowerIndex();; if (nc != 21) return 1;; const TVectorD *coeffs = fit->GetCoefficients();; int k = 0;; for (int i=0;i<nc;i++) {; if (doFit) {; if (!TMath::AreEqualRel((*coeffs)[i],GoodCoeffs[i],1e-3)) return 2;; }; else {; if (TMath::Abs((*coeffs)[i] - GoodCoeffsNoFit[i]) > 5e-5) return 2;; }; for (int j=0;j<nv;j++) {; if (powers[pindex[i]*nv+j] != GoodPower[k]) return 3;; k++;; }; }; ; // now test the result of the generated function; gROOT->ProcessLine("".L MDF.C"");; ; double refMDF = (doFit) ? 43.95 : 43.98;; // this does not work in CLing since the function is not defined; //double x[] = {5,5,5,5};; //double rMDF = MDF(x);; //LM: need to return the address of the result since it is casted to a long (this should not be in a tutorial !); std::intptr_t iret = gROOT->ProcessLine("" double xvalues[] = {5,5,5,5}; double result=MDF(xvalues); &result;"");; double rMDF = * ( (double*)iret);; //printf(""%f\n"",rMDF);; if (TMath::Abs(rMDF -refMDF) > 1e-2) return 4;; return 0;; }; ; //______________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/multidimfit_8C.html:7503,test,test,7503,doc/master/multidimfit_8C.html,https://root.cern,https://root.cern/doc/master/multidimfit_8C.html,1,['test'],['test']
Testability,"efine first somewhere, as a code comment or in a separate page a ; group using the \defgroup tag. ; Example; /**; \defgroup Hist Histogram Library;  ; The Histogram library is documented in the class TH1.;  ; */; Then one needs to add in the class description comments the \ingroup tag. For example in the class TH1, which is part of the Hist group one should add; /**; \class TH1; \ingroup Hist ; ....; */; Include additional documentation pages in HTML or Markdown format; One can add extra pages for the documentation in HTML or Markdown format (preferable) in the package/doc directory (e.g. hist/doc). These page could be used to; provide a general documentation of the package. The pages should be included in a file with name as the package name and the .md or .html suffix (e.g. hist.md).; The file should contain, in addition to the package description, the Doxygen command \page [name] [title] which defines the internal page name (used to reference that page) and ; the page title.; For example; /**;  ; \page HistPage The Histogram Library;  ; This page provides a description of the Histogram library. ;  ; */; Inside page you can reference to groups or other pages using the Doxygen commands \subpage [refname] [""text""] and \ref [refname] [""text""]. ; See as example the existing math/doc/Math.md file. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/formatting-comments-doxygen.html:11603,test,tests,11603,d/formatting-comments-doxygen.html,https://root.cern,https://root.cern/d/formatting-comments-doxygen.html,1,['test'],['tests']
Testability,"efinition TFumili.h:13; TFumili::SetParNumbervoid SetParNumber(Int_t ParNum)Definition TFumili.cxx:168; TFumili::SetDatavoid SetData(Double_t *, Int_t, Int_t)Sets pointer to data array provided by user.Definition TFumili.cxx:1616; TFumili::fINDFLGInt_t fINDFLG[5]internal flags;Definition TFumili.h:25; TFumili::EvalTFNDouble_t EvalTFN(Double_t *, Double_t *)Evaluate theoretical function.Definition TFumili.cxx:362; TFumili::GetZDouble_t * GetZ() constDefinition TFumili.h:102; TFumili::fParamErrorDouble_t * fParamError[fMaxParam] Parameter errorsDefinition TFumili.h:39; TFumili::ChisquareDouble_t Chisquare(Int_t npar, Double_t *params) const overridereturn a chisquare equivalentDefinition TFumili.cxx:227; TFumili::fENDFLGInt_t fENDFLGEnd flag of fit.Definition TFumili.h:24; TFumili::fRDouble_t * fR[fMaxParam] Correlation factorsDefinition TFumili.h:52; TFumili::fDADouble_t * fDA[fMaxParam] Parameter stepDefinition TFumili.h:49; TFumili::SetFitMethodvoid SetFitMethod(const char *name) overrideret fit method (chisquare or log-likelihood)Definition TFumili.cxx:1628; TFumili::fNstepDecInt_t fNstepDecfNstepDec - maximum number of step decreasing counterDefinition TFumili.h:20; TFumili::GetErrorsInt_t GetErrors(Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const overrideReturn errors after MINOs not implemented.Definition TFumili.cxx:882; TFumili::fZ0Double_t * fZ0[fMaxParam2] Matrix of approximate second derivatives of objective function This matrix is diagonal a...Definition TFumili.h:34; TFumili::fPL0Double_t * fPL0[fMaxParam] Step initial boundsDefinition TFumili.h:45; TFumili::fADouble_t * fA[fMaxParam] Fit parameter arrayDefinition TFumili.h:44; TFumili::fAKAPPADouble_t fAKAPPADefinition TFumili.h:60; TFumili::MinimizeInt_t Minimize()Main minimization procedure.Definition TFumili.cxx:1085; TFumili::fNmaxIterInt_t fNmaxIterfNmaxIter - maximum number of iterationsDefinition TFumili.h:22; TFumili::ExecuteSetCommandInt_t ExecuteSetComma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8h_source.html:11502,log,log-likelihood,11502,doc/master/TFumili_8h_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8h_source.html,1,['log'],['log-likelihood']
Testability,"efinition TFumili.h:13; TFumili::SetParNumbervoid SetParNumber(Int_t ParNum)Definition TFumili.cxx:168; TFumili::SetDatavoid SetData(Double_t *, Int_t, Int_t)Sets pointer to data array provided by user.Definition TFumili.cxx:1616; TFumili::fINDFLGInt_t fINDFLG[5]internal flags;Definition TFumili.h:25; TFumili::EvalTFNDouble_t EvalTFN(Double_t *, Double_t *)Evaluate theoretical function.Definition TFumili.cxx:362; TFumili::GetZDouble_t * GetZ() constDefinition TFumili.h:102; TFumili::fParamErrorDouble_t * fParamError[fMaxParam] Parameter errorsDefinition TFumili.h:39; TFumili::ChisquareDouble_t Chisquare(Int_t npar, Double_t *params) const overridereturn a chisquare equivalentDefinition TFumili.cxx:227; TFumili::fENDFLGInt_t fENDFLGEnd flag of fit.Definition TFumili.h:24; TFumili::fRDouble_t * fR[fMaxParam] Correlation factorsDefinition TFumili.h:52; TFumili::fDADouble_t * fDA[fMaxParam] Parameter stepDefinition TFumili.h:49; TFumili::SetFitMethodvoid SetFitMethod(const char *name) overrideret fit method (chisquare or log-likelihood)Definition TFumili.cxx:1628; TFumili::fNstepDecInt_t fNstepDecfNstepDec - maximum number of step decreasing counterDefinition TFumili.h:20; TFumili::GetErrorsInt_t GetErrors(Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const overrideReturn errors after MINOs not implemented.Definition TFumili.cxx:882; TFumili::fZ0Double_t * fZ0[fMaxParam2] Matrix of approximate second derivatives of objective function This matrix is diagonal a...Definition TFumili.h:34; TFumili::fPL0Double_t * fPL0[fMaxParam] Step initial boundsDefinition TFumili.h:45; TFumili::fADouble_t * fA[fMaxParam] Fit parameter arrayDefinition TFumili.h:44; TFumili::fAKAPPADouble_t fAKAPPADefinition TFumili.h:60; TFumili::MinimizeInt_t Minimize()Main minimization procedure.Definition TFumili.cxx:1085; TFumili::fNmaxIterInt_t fNmaxIterfNmaxIter - maximum number of iterationsDefinition TFumili.h:22; TFumili::TFumiliTFumili(Int_t maxpar=25)Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:73675,log,log-likelihood,73675,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['log'],['log-likelihood']
Testability,"efinition THbookFile.cxx:95; TMath.h; double; ROOT::Math::lognormal_pdfdouble lognormal_pdf(double x, double m, double s, double x0=0)Probability density function of the lognormal distribution.Definition PdfFuncMathCore.h:483; ROOT::Math::landau_pdfdouble landau_pdf(double x, double xi=1, double x0=0)Probability density function of the Landau distribution:Definition PdfFuncMathCore.cxx:21; ROOT::Math::inc_gamma_cdouble inc_gamma_c(double a, double x)Calculates the normalized (regularized) upper incomplete gamma function (upper integral)Definition SpecFuncMathCore.cxx:103; ROOT::Math::inc_gammadouble inc_gamma(double a, double x)Calculates the normalized (regularized) lower incomplete gamma function (lower integral)Definition SpecFuncMathCore.cxx:99; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; RooFit::Detail::MathFuncs::logNormalIntegraldouble logNormalIntegral(double xMin, double xMax, double m0, double k)Definition MathFuncs.h:627; RooFit::Detail::MathFuncs::gaussianIntegraldouble gaussianIntegral(double xMin, double xMax, double mean, double sigma)Function to calculate the integral of an un-normalized RooGaussian over x.Definition MathFuncs.h:418; RooFit::Detail::MathFuncs::chebychevIntegraldouble chebychevIntegral(double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull)Definition MathFuncs.h:513; RooFit::Detail::MathFuncs::bifurGaussIntegraldouble bifurGaussIntegral(double xMin, double xMax, double mean, double sigmaL, double sigmaR)Definition MathFuncs.h:453; RooFit::Detail::MathFuncs::cbShapedouble cbShape(double m, double m0, double sigma, double alpha, double n)Definition MathFuncs.h:382; RooFit::Detail::MathFuncs::polynomialdouble polynomial(double const *coeffs, int nCoeffs, int lowestOrder, double x)In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:26435,log,logNormalIntegraldouble,26435,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,2,['log'],"['logNormalIntegral', 'logNormalIntegraldouble']"
Testability,"efinition at line 171 of file TRint.cxx. ◆ ~TRint(). TRint::~TRint ; (; ). virtual . Destructor. ; Definition at line 316 of file TRint.cxx. Member Function Documentation. ◆ Class(). static TClass * TRint::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRint::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRint::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 67 of file TRint.h. ◆ DeclFileName(). static const char * TRint::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 67 of file TRint.h. ◆ ExecLogon(). void TRint::ExecLogon ; (; ). private . Execute logon macro's. ; There are three levels of logon macros that will be executed: the system logon etc/system.rootlogon.C, the global user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward compatibility also the logon macro as specified by the Rint.Logon environment setting, by default ./rootlogon.C, will be executed. No logon macros will be executed when the system is started with the -n option. ; Definition at line 341 of file TRint.cxx. ◆ GetInputHandler(). TFileHandler * TRint::GetInputHandler ; (; ). inline . Definition at line 65 of file TRint.h. ◆ GetPrompt(). char * TRint::GetPrompt ; (; ). virtual . Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". ; Definition at line 575 of file TRint.cxx. ◆ HandleException(). void TRint::HandleException ; (; Int_t ; sig). overridevirtual . Handle signals (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ; Specific TApplication implementations may want something different here. ; Reimplemented from TApplication.; Definition at line 704 of file TRint.cxx. ◆ HandleTermInput(). Bool_t TRint::HandleTermInput ; (; ). overridevirtual . Handle input coming from terminal. ; Reimplement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:23657,log,logon,23657,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['log'],['logon']
Testability,"efinition at line 512 of file NeuralNet.cxx. ◆ startTestCycle(). void TMVA::DNN::ClassificationSettings::startTestCycle ; (; ). virtual . action to be done when the test cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 316 of file NeuralNet.cxx. ◆ startTrainCycle(). void TMVA::DNN::ClassificationSettings::startTrainCycle ; (; ). virtual . action to be done when the training cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 281 of file NeuralNet.cxx. ◆ testIteration(). void TMVA::DNN::ClassificationSettings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented from TMVA::DNN::Settings.; Definition at line 930 of file NeuralNet.h. ◆ testSample(). void TMVA::DNN::ClassificationSettings::testSample ; (; double ; error, . double ; output, . double ; target, . double ; weight . ). virtual . action to be done after the computation of a test sample (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 304 of file NeuralNet.cxx. Member Data Documentation. ◆ m_ams. std::vector<double> TMVA::DNN::ClassificationSettings::m_ams. Definition at line 1000 of file NeuralNet.h. ◆ m_cutValue. double TMVA::DNN::ClassificationSettings::m_cutValue. Definition at line 1008 of file NeuralNet.h. ◆ m_fileNameNetConfig. std::string TMVA::DNN::ClassificationSettings::m_fileNameNetConfig. Definition at line 1011 of file NeuralNet.h. ◆ m_fileNameResult. std::string TMVA::DNN::ClassificationSettings::m_fileNameResult. Definition at line 1010 of file NeuralNet.h. ◆ m_input. std::vector<double> TMVA::DNN::ClassificationSettings::m_input. Definition at line 995 of file NeuralNet.h. ◆ m_output. std::vector<double> TMVA::DNN::ClassificationSettings::m_output. Definition at line 996 of file NeuralNet.h. ◆ m_pResultPatternContainer. std::vector<Pattern>* TMVA::DNN::ClassificationSetting",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:9384,test,test,9384,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['test'],['test']
Testability,"efinition at line 863 of file RooFitResult.cxx. ◆ isIdenticalNoCov(). bool RooFitResult::isIdenticalNoCov ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolErr = 1e-3, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances, ignoring the correlation matrix. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolErrRelative tolerance for parameter errors. ; [in]verboseIf this function will log to the standard output when comparisons fail. . Definition at line 801 of file RooFitResult.cxx. ◆ lastMinuitFit(). RooFitResult * RooFitResult::lastMinuitFit ; (; const RooArgList & ; varList = RooArgList()). static . Import the results of the last fit performed by gMinuit, interpreting the fit parameters as the given varList of parameters. ; Definition at line 917 of file RooFitResult.cxx. ◆ minNll(). double RooFitResult::minNll ; (; ); const. inline . Return minimized -log(L) value. ; Definition at line 99 of file RooFitResult.h. ◆ numInvalidNLL(). Int_t RooFitResult::numInvalidNLL ; (; ); const. inline . Return number of NLL evaluations with problems. ; Definition at line 91 of file RooFitResult.h. ◆ numStatusHistory(). UInt_t RooFitResult::numStatusHistory ; (; ); const. inline . Definition at line 82 of file RooFitResult.h. ◆ plotOn() [1/2]. RooPlot * RooFitResult::plotOn ; (; RooPlot * ; frame, . const RooAbsArg & ; par1, . const RooAbsArg & ; par2, . const char * ; options = ""ME"" . ); const. inline . Add objects to a 2D plot. ; Plot error ellipse in par1 and par2 on frame. ; Definition at line 144 of file RooFitResult.h. ◆ plotOn() [2/2]. RooPlot * RooFitResult::plotOn ; (; RooPlot * ; frame, . const char * ; parName1, . const char * ; parName2, . const char * ; options = ""ME"" . ); const. Add objects to a 2D plot that represent the fit results for the two named parameters. ; The input frame with the objects added is returned, or zero in case ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:31041,log,log,31041,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['log'],['log']
Testability,"efinition at line 89 of file CostComplexityPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). PruningInfo * CostComplexityPruneTool::CalculatePruningInfo ; (; DecisionTree * ; dt, . const IPruneTool::EventSample * ; validationSample = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . the routine that basically ""steers"" the pruning process. ; Call the calculation of the pruning sequence, the tree quality and alike.. ; Implements TMVA::IPruneTool.; Definition at line 98 of file CostComplexityPruneTool.cxx. ◆ InitTreePruningMetaData(). void CostComplexityPruneTool::InitTreePruningMetaData ; (; DecisionTreeNode * ; n). private . initialise ""meta data"" for the pruning, like the ""costcomplexity"", the critical alpha, the minimal alpha down the tree, etc... for each node!! ; Definition at line 181 of file CostComplexityPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::CostComplexityPruneTool::Log ; (; ); const. inlineprivate . output stream to save logging information ; Definition at line 87 of file CostComplexityPruneTool.h. ◆ Optimize(). void CostComplexityPruneTool::Optimize ; (; DecisionTree * ; dt, . Double_t ; weights . ). private . after the critical \( \alpha \) values (at which the corresponding nodes would be pruned away) had been established in the ""InitMetaData"" we need now: automatic pruning: ; find the value of \( \alpha \) for which the test sample gives minimal error, on the tree with all nodes pruned that have \( \alpha_{critical} < \alpha \), fixed parameter pruning ; Definition at line 236 of file CostComplexityPruneTool.cxx. Member Data Documentation. ◆ fLogger. MsgLogger* TMVA::CostComplexityPruneTool::fLogger. mutableprivate . Definition at line 86 of file CostComplexityPruneTool.h. ◆ fOptimalK. Int_t TMVA::CostComplexityPruneTool::fOptimalK. private . ! the optimal index of the prune sequence ; Definition at line 77 of file CostComplexityPruneTool.h. ◆ fPruneSequence. std::vector<DecisionTreeNode*> TMVA::CostComplexityPruneTool::fPru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html:5047,log,logging,5047,doc/master/classTMVA_1_1CostComplexityPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html,1,['log'],['logging']
Testability,"eful for fits done with customized F...Definition Fitter.h:584; ROOT::Fit::Fitter::IGradModelFunctionROOT::Math::IParamMultiGradFunction IGradModelFunctionDefinition Fitter.h:91; ROOT::Fit::Fitter::CalculateMinosErrorsbool CalculateMinosErrors()perform an error analysis on the result using MINOS To be called only after fitting and when a minimi...Definition Fitter.cxx:593; ROOT::Fit::Fitter::FitterFitter(const Fitter &)=deleteCopy constructor (disabled, class is not copyable); ROOT::Fit::Fitter::DoUpdateMinimizerOptionsbool DoUpdateMinimizerOptions(bool canDifferentMinim=true)Definition Fitter.cxx:763; ROOT::Fit::Fitter::Fitbool Fit(const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)fit a data set using any generic model function If data set is binned a least square fit is performed...Definition Fitter.h:144; ROOT::Fit::Fitter::Fitbool Fit(const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)Fit an un-binned data set using the negative log-likelihood method.Definition Fitter.h:188; ROOT::Fit::Fitter::SetFunctionvoid SetFunction(const IModelFunction &func, bool useGradient=false)Set the fitted function (model function) from a parametric function interface.Definition Fitter.cxx:59; ROOT::Fit::Fitter::CalculateHessErrorsbool CalculateHessErrors()perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the...Definition Fitter.cxx:530; ROOT::Fit::Fitter::fConfigFitConfig fConfigfitter configuration (options and parameter settings)Definition Fitter.h:562; ROOT::Fit::Fitter::FitterFitter()Default constructor.Definition Fitter.h:102; ROOT::Fit::Fitter::fFuncstd::shared_ptr< IModelFunction > fFunc! copy of the fitted function containing on output the fit resultDefinition Fitter.h:566; ROOT::Fit::Fitter::SetFCNbool SetFCN(const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:39048,log,log-likelihood,39048,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['log'],['log-likelihood']
Testability,"egative log-likelihood value we have seen so far. RooMinimizerFcn(const RooMinimizerFcn& other). ~RooMinimizerFcn(). ROOT::Math::IBaseFunctionMultiDim* Clone() const. Bool_t Synchronize(vector<ROOT::Fit::ParameterSettings>& parameters, Bool_t optConst, Bool_t verbose). Double_t GetPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t GetPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void ClearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void BackProp(const ROOT::Fit::FitResult& results); Transfer MINUIT fit results back into RooFit objects. Bool_t SetLogFile(const char* inLogfile); Change the file name for logging of a RooMinimizer of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. void ApplyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. Bool_t SetPdfParamVal(const Int_t& index, const Double_t& value) const; RooRealVar* par = (RooRealVar*)_floatParamList->at(index);. void updateFloatVec(). double DoEval(const double* x) const. unsigned int NDim() const; { return _nDim; }. RooArgList* GetFloatParamList(); { return _floatParamList; }. RooArgList* GetConstParamList(); { return _constParamList; }. RooArgList* GetInitFloatParamList(); { return _initFloatParamList; }. RooArgList* GetInitConstParamList(); { return _initConstParamList; }. void SetEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void SetPrintEvalErrors(Int_t numEvalErrors)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinimizerFcn.html:3585,log,logging,3585,root/html602/RooMinimizerFcn.html,https://root.cern,https://root.cern/root/html602/RooMinimizerFcn.html,2,['log'],['logging']
Testability,"egin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](int j); { return (*fMat)(fRow,j); }. const T & operator[](int j); { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:7103,assert,assert,7103,root/html526/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,15,['assert'],['assert']
Testability,"egin();; 856 for (auto pattern_it = batch.begin(); pattern_it != batch.end(); ++pattern_it); 857 {; 858 for (size_t output_index = 1; output_index < outputSize(); ++output_index); 859 {; 860 settings.testSample (0, *output_iterator, (*pattern_it).output ().at (0),; 861 (*pattern_it).weight ());; 862 ++output_iterator;; 863 }; 864 }; 865 }; 866 testError += testPatternError; /// batch.size ();; 867 }; 868 // testError /= testPattern.size ();; 869 }; 870 settings.endTestCycle ();; 871// testError /= weightSum;; 872 ; 873 settings.computeResult (*this, weights);; 874 ; 875 hasConverged = settings.hasConverged (testError);; 876 if (!hasConverged && !isWeightsForDrop); 877 {; 878 dropOutWeightFactor (weights, dropFractions, true); // inverse; 879 isWeightsForDrop = true;; 880 }; 881 }; 882 ++testCycleCount;; 883 ++dropOutChangeCount;; 884 ; 885 ; 886// settings.resetPlot (""errors"");; 887 settings.addPoint (""trainErrors"", cycleCount, trainError);; 888 settings.addPoint (""testErrors"", cycleCount, testError);; 889 settings.plot (""trainErrors"", ""C"", 1, kBlue);; 890 settings.plot (""testErrors"", ""C"", 1, kMagenta);; 891 ; 892 ; 893 // setup error plots and progress bar variables for JsMVA; 894 if (fInteractive){; 895 fInteractive->AddPoint(cycleCount, trainError, testError);; 896 if (*fExitFromTraining) break;; 897 *fIPyCurrentIter = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 898 }; 899 ; 900 if (hasConverged); 901 break;; 902 ; 903 if ((int)cycleCount % 10 == 0) {; 904 ; 905 TString convText = TString::Format( ""(train/test/epo/conv/maxco): %.3g/%.3g/%d/%d/%d"",; 906 trainError,; 907 testError,; 908 (int)cycleCount,; 909 (int)settings.convergenceCount (),; 910 (int)settings.maxConvergenceCount ());; 911 double progress = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 912 settings.cycle (progress, convText);; 913 }; 914 }; 915 while (true);; 916 settings.endTrainCycle (trainError);; 917 ; 918 TString co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:26884,test,testErrors,26884,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,['test'],"['testError', 'testErrors']"
Testability,"egral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  mathStudent.C Tutorial illustrating the use of the Student and F distributions ;  multidimSampling.C Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2 ;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5b.C ;  testUnfold5c.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5d.C Version 17.0 example for multi-dimensional unfolding ;  tStudent.C Example macro describing the student t distribution ;  TSVDUnfoldExample.C Data unfolding using Singular Value Decomposition ;  vavilov.C Test of the TMath::Vavilov distribution ;  ► matrix;  invertMatrix.C This macro shows several ways to invert a matrix ;  solveLinear.C This macro shows several ways to perform a linear least-squares analysis ;  ► mc;  CompareMasses.CMacro to com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:130668,test,test,130668,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['test']
Testability,"eight()));; 727 trainPattern.back().addInput(1.0);; 728 } else if (fAnalysisType == Types::kMulticlass) {; 729 std::vector<Float_t> oneHot(DataInfo().GetNClasses(), 0.0);; 730 oneHot[event->GetClass()] = 1.0;; 731 trainPattern.push_back(Pattern (values.begin(), values.end(),; 732 oneHot.cbegin(), oneHot.cend(),; 733 event->GetWeight()));; 734 trainPattern.back().addInput(1.0);; 735 } else {; 736 const std::vector<Float_t>& targets = event->GetTargets ();; 737 trainPattern.push_back(Pattern(values.begin(),; 738 values.end(),; 739 targets.begin(),; 740 targets.end(),; 741 event->GetWeight ()));; 742 trainPattern.back ().addInput (1.0); // bias node; 743 }; 744 }; 745 ; 746 for (auto &event : eventCollectionTesting) {; 747 const std::vector<Float_t>& values = event->GetValues();; 748 if (fAnalysisType == Types::kClassification) {; 749 double outputValue = event->GetClass () == 0 ? 0.9 : 0.1;; 750 testPattern.push_back(Pattern (values.begin(),; 751 values.end(),; 752 outputValue,; 753 event->GetWeight()));; 754 testPattern.back().addInput(1.0);; 755 } else if (fAnalysisType == Types::kMulticlass) {; 756 std::vector<Float_t> oneHot(DataInfo().GetNClasses(), 0.0);; 757 oneHot[event->GetClass()] = 1.0;; 758 testPattern.push_back(Pattern (values.begin(), values.end(),; 759 oneHot.cbegin(), oneHot.cend(),; 760 event->GetWeight()));; 761 testPattern.back().addInput(1.0);; 762 } else {; 763 const std::vector<Float_t>& targets = event->GetTargets ();; 764 testPattern.push_back(Pattern(values.begin(),; 765 values.end(),; 766 targets.begin(),; 767 targets.end(),; 768 event->GetWeight ()));; 769 testPattern.back ().addInput (1.0); // bias node; 770 }; 771 }; 772 ; 773 TMVA::DNN::Net net;; 774 std::vector<double> weights;; 775 ; 776 net.SetIpythonInteractive(fInteractive, &fExitFromTraining, &fIPyMaxIter, &fIPyCurrentIter);; 777 ; 778 net.setInputSize(fNet.GetInputWidth() + 1);; 779 net.setOutputSize(fNet.GetOutputWidth() + 1);; 780 ; 781 for (size_t i = 0; i < fNet.GetDepth(); i++)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:26655,test,testPattern,26655,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testPattern']
Testability,"eightInitialization = DNN::EInitialization::kGauss;; 318 } else if (fWeightInitializationString == ""UNIFORM"") {; 319 fWeightInitialization = DNN::EInitialization::kUniform;; 320 } else if (fWeightInitializationString == ""ZERO"") {; 321 fWeightInitialization = DNN::EInitialization::kZero;; 322 } else if (fWeightInitializationString == ""IDENTITY"") {; 323 fWeightInitialization = DNN::EInitialization::kIdentity;; 324 } else {; 325 fWeightInitialization = DNN::EInitialization::kGlorotUniform;; 326 }; 327 ; 328 // Training settings.; 329 ; 330 KeyValueVector_t strategyKeyValues = ParseKeyValueString(fTrainingStrategyString, TString(""|""), TString("",""));; 331 for (auto &block : strategyKeyValues) {; 332 TTrainingSettings settings;; 333 ; 334 settings.convergenceSteps = fetchValueTmp(block, ""ConvergenceSteps"", 100);; 335 settings.batchSize = fetchValueTmp(block, ""BatchSize"", 30);; 336 settings.maxEpochs = fetchValueTmp(block, ""MaxEpochs"", 2000);; 337 settings.testInterval = fetchValueTmp(block, ""TestRepetitions"", 7);; 338 settings.weightDecay = fetchValueTmp(block, ""WeightDecay"", 0.0);; 339 settings.learningRate = fetchValueTmp(block, ""LearningRate"", 1e-5);; 340 settings.momentum = fetchValueTmp(block, ""Momentum"", 0.3);; 341 settings.dropoutProbabilities = fetchValueTmp(block, ""DropConfig"", std::vector<Double_t>());; 342 ; 343 TString regularization = fetchValueTmp(block, ""Regularization"", TString(""NONE""));; 344 if (regularization == ""L1"") {; 345 settings.regularization = DNN::ERegularization::kL1;; 346 } else if (regularization == ""L2"") {; 347 settings.regularization = DNN::ERegularization::kL2;; 348 } else {; 349 settings.regularization = DNN::ERegularization::kNone;; 350 }; 351 ; 352 TString optimizer = fetchValueTmp(block, ""Optimizer"", TString(""ADAM""));; 353 settings.optimizerName = optimizer;; 354 if (optimizer == ""SGD"") {; 355 settings.optimizer = DNN::EOptimizer::kSGD;; 356 } else if (optimizer == ""ADAM"") {; 357 settings.optimizer = DNN::EOptimizer::kAdam;; 358 } else i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:12891,test,testInterval,12891,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['test'],['testInterval']
Testability,"eights/TMVACrossValidation_BDTG_fold2.class.C; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG_fold2 for Classification performance; : ; <HEADER> BDTG_fold2 : [datasetcv] : Evaluation of BDTG_fold2 on testing sample (1000 events); : Elapsed time for evaluation of 1000 events: 0.00341 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDTG_fold2; : ; <HEADER> BDTG_fold2 : [datasetcv] : Loop over test events and fill histograms with classifier response...; : ; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetcv BDTG_fold2 : 0.961; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : datasetcv BDTG_fold2 : 0.646 (0.696) 0.868 (0.930) 0.975 (0.976); : -------------------------------------------------------------------------------------------------------------------; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> Factory : Booking method: BDTG; : ; : Reading weightfile: datasetcv/weights/TMVACrossValidation_BDTG_fold1.weights.xml; : Reading weight file: datasetcv/weights/TMVACrossValidation_BDTG_fold1.weights.xml; : Reading weightfile: datasetcv/weights/TMVACrossValidation_BDTG_fold2.weights.xml; : Reading weight file: datasetcv/weights",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:7563,test,test,7563,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['test'],['test']
Testability,"el and write them on file ;  mt101_fillNtuples.C Fill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.C Read n-tuples in distinct workers, fill histograms, merge them and fit ;  mt103_fillNtupleFromMultipleThreads.C Fill the same TNtuple from different threads ;  mt201_parallelHistoFill.C Parallel fill of a histogram ;  mt301_TTaskGroupSimple.C Shows how to run items of work asynchronously with a TTaskGroup ;  mt304_fillHistos.CFill histograms in parallel with automatic binning ;  mtbb001_fillHistos.C Fill histograms in parallel and write them on file ;  mtbb101_fillNtuples.C Fill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.C Parallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:140684,test,test,140684,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['test'],['test']
Testability,"el startup threads. private:. TStringfCacheDirDirectory containing cache of user files; TProofLockPath*fCacheLockCache dir locker; TStringfDataSetDirDirectory containing info about known data sets; TDataSetManager*fDataSetManagerDataset manager; Bool_tfForkStartupStartup N-1 workers forking the first worker; Int_tfNWorkersNumber of workers; TQueryResultManager*fQMgrQuery-result manager; TStringfQueryDirDirectory containing query results and status; TProofLockPath*fQueryLockQuery dir locker; TStringfSandboxPROOF sandbox root dir; TStringfSelectionInternal variable to pass drawing options; TServerSocket*fServSockServer socket to accept call backs; TStringfSockPathUNIX socket path for communication with workers; TStringfVarExpInternal variable to pass drawing options; static Int_tfgWrksMaxMax number of workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Create a PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:25369,log,loglevel,25369,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['log'],['loglevel']
Testability,"el(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. void CheckAutoEnPack(Bool_t checked = kTRUE). TGTab * GetTab() const; { return fTab; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-03-14 16:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionFrame.html:22759,log,log,22759,root/html534/TSessionFrame.html,https://root.cern,https://root.cern/root/html534/TSessionFrame.html,3,['log'],['log']
Testability,el*fListLabellabel 'Available Styles:'; TGPictureButton*fMakeDefaultselected style becom gStyle; const TGPicture*fMakeDefaultPicbutton picture; TGColorSelect*fMarkerColorgeneral marker color selection widget; TGComboBox*fMarkerSizegeneral marker size combo box; TGedMarkerSelect*fMarkerStylegeneral marker style entry; TGMenuBar*fMenuBarthe main window menu bar; TGPopupMenu*fMenuHelpthe 'Help' popup menu; TGPopupMenu*fMenuStylethe 'Style' popup menu; Bool_tfMoreAndNotLess=kTRUE when editor is open; TGTextButton*fMoreLessopen/close the editor; TGNumberEntry*fNumberContourshistograms number of contours number entry; TGCheckButton*fOptDateBoolcanvas date show/hide check box; TGComboBox*fOptDateFormatcanvas date format text entry; TGCheckButton*fOptFitChifit Chi show/hide check box; TGCheckButton*fOptFitErrorsfit errors check box; TGCheckButton*fOptFitProbabilityfit probability show/hide check box; TGCheckButton*fOptFitValuesfit values show/hide check box; TGCheckButton*fOptLogxX axis logarithmic scale check box; TGCheckButton*fOptLogyY axis logarithmic scale check box; TGCheckButton*fOptLogzZ axis logarithmic scale check box; TGCheckButton*fOptStatEntriesstats entries show/hide check box; TGCheckButton*fOptStatErrorsstats errors check box; TGCheckButton*fOptStatIntegralstats integral show/hide check box; TGCheckButton*fOptStatKurtosisstats kurtosis show/hide check box; TGCheckButton*fOptStatMeanstats mean show/hide check box; TGCheckButton*fOptStatNamestats name show/hide check box; TGCheckButton*fOptStatOverflowstats overflow show/hide check box; TGCheckButton*fOptStatRMSstats RMS show/hide check box; TGCheckButton*fOptStatSkewnessstats Skewness show/hide check box; TGCheckButton*fOptStatUnderflowstats underflow show/hide check box; TGCheckButton*fOptTitletitle show/hide check box; TGButtonGroup*fPadBorderModepad border mode button group; TGLineWidthComboBox*fPadBorderSizepad border size combo box; TGNumberEntry*fPadBottomMarginpad bottom margin number entry; TGColorSel,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyleManager.html:40077,log,logarithmic,40077,root/html528/TStyleManager.html,https://root.cern,https://root.cern/root/html528/TStyleManager.html,6,['log'],['logarithmic']
Testability,"el, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_t_debug; TFile*_refFile; list<std::pair<RooPlot*,std::string> >_regPlots; list<std::pair<RooFitResult*,std::string> >_regResults; list<std::pair<TH1*,std::string> >_regTH; list<std::pair<RooTable*,std::string> >_regTables; list<std::pair<Double_t,std::string> >_regValues; list<std::pair<RooWorkspace*,std::string> >_regWS; Int_t_verb; Bool_t_write; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; static TDirectory*gMemDir. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooUnitTest(). void regPlot(RooPlot* frame, const char* refName). void regResult(RooFitResult* r, const char* refName). void regValue(Double_t value, const char* refName). void regTable(RooTable* t, const char* refName). void regWS(RooWorkspace* ws, const char* refName). void regTH(TH1* h, const char* refName). RooWorkspace* getWS(const char* refName). Bool_t areTHidentical(TH1* htest, TH1* href). Bool_t runCompTests(). void setSilentMode(). void clearSilentMode(). Bool_t runTest(). void setMemDir(TDirectory* memDir); Set gMemDir to memDir. void setDebug(Bool_t flag); { _debug = flag ; }. Bool_t isTestAvailable(); { return kTRUE ; }. Bool_t testCode(). Double_t htol(); { return 5e-4 ; }. Double_t ctol(); { return 2e-3 ; }. Double_t fptol(); { return 1e-3 ; }. Double_t fctol(); { return 1e-3 ; }. Double_t vtol(); { return 1e-3 ; }. » Last changed: Tue Mar 10 17:21:08 2015 » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooUnitTest.html:7881,test,testCode,7881,root/html534/RooUnitTest.html,https://root.cern,https://root.cern/root/html534/RooUnitTest.html,1,['test'],['testCode']
Testability,"el.cxx. ◆ pdfList(). const RooArgList & RooAddModel::pdfList ; (; ); const. inline . Return list of component p.d.fs. ; Definition at line 66 of file RooAddModel.h. ◆ printMetaArgs(). void RooAddModel::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 702 of file RooAddModel.cxx. ◆ resetErrorCounters(). void RooAddModel::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 420 of file RooAddModel.cxx. ◆ selectNormalization(). void RooAddModel::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 599 of file RooAddModel.cxx. ◆ selectNormalizationRange(). void RooAddModel::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 621 of file RooAddModel.cxx. ◆ selfNormalized(). bool RooAddModel::selfNormalized ; (; ); const. inlineoverridevirtual . Model is self normalized when used as p.d.f. ; Reimplemented from RooAbsPdf.; Definition at line 52 of file RooAddModel.h. ◆ Streamer(). void RooAddModel::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooAddModel::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:89408,test,test,89408,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['test'],['test']
Testability,"elGauss. friend class PDEFoamKernelGauss. friend . Definition at line 270 of file PDEFoam.h. ◆ PDEFoamKernelLinN. friend class PDEFoamKernelLinN. friend . Definition at line 269 of file PDEFoam.h. ◆ PDEFoamKernelTrivial. friend class PDEFoamKernelTrivial. friend . Definition at line 268 of file PDEFoam.h. Member Data Documentation. ◆ fAlpha. Double_t* TMVA::PDEFoam::fAlpha. protected . [fDim] Internal parameters of the hyperrectangle ; Definition at line 103 of file PDEFoam.h. ◆ fCells. PDEFoamCell** TMVA::PDEFoam::fCells. protected . [fNCells] Array of ALL cells ; Definition at line 96 of file PDEFoam.h. ◆ fDim. Int_t TMVA::PDEFoam::fDim. protected . Dimension of the integration/simulation space. ; Definition at line 84 of file PDEFoam.h. ◆ fDistr. PDEFoamDensityBase* TMVA::PDEFoam::fDistr. protected . ! distribution of training events ; Definition at line 115 of file PDEFoam.h. ◆ fDTSeparation. EDTSeparation TMVA::PDEFoam::fDTSeparation. protected . BACKWARDS COMPATIBILITY: split cells according to decision tree logic. ; Definition at line 113 of file PDEFoam.h. ◆ fEvPerBin. Int_t TMVA::PDEFoam::fEvPerBin. protected . Maximum number of effective (wt=1) events per bin. ; Definition at line 89 of file PDEFoam.h. ◆ fFillFoamWithOrigWeights. Bool_t TMVA::PDEFoam::fFillFoamWithOrigWeights. protected . BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ; Definition at line 112 of file PDEFoam.h. ◆ fFoamType. EFoamType TMVA::PDEFoam::fFoamType. protected . BACKWARDS COMPATIBILITY: type of foam. ; Definition at line 105 of file PDEFoam.h. ◆ fHistEdg. TObjArray* TMVA::PDEFoam::fHistEdg. protected . Histograms of wt, one for each cell edge. ; Definition at line 98 of file PDEFoam.h. ◆ fInhiDiv. Int_t* TMVA::PDEFoam::fInhiDiv. protected . ! [fDim] Flags for inhibiting cell division ; Definition at line 92 of file PDEFoam.h. ◆ fLastCe. Int_t TMVA::PDEFoam::fLastCe. protected . Index of the last cell. ; Definition at line 95 of file PDEFoam.h. ◆ fLogger. MsgLog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html:41104,log,logic,41104,doc/master/classTMVA_1_1PDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html,1,['log'],['logic']
Testability,"elSize(h->GetZaxis()->GetLabelSize());; 4520 palette->SetTitleOffset(h->GetZaxis()->GetTitleOffset());; 4521 palette->SetTitleSize(h->GetZaxis()->GetTitleSize());; 4522 palette->SetNdivisions(h->GetZaxis()->GetNdivisions());; 4523 palette->SetTitle(h->GetZaxis()->GetTitle());; 4524 palette->SetTitleColor(h->GetZaxis()->GetTitleColor());; 4525 palette->SetTitleFont(h->GetZaxis()->GetTitleFont());; 4526 ; 4527 functions->AddFirst(palette);; 4528 }; 4529 if (palette) palette->Paint();; 4530 }; 4531 ; 4532 // Draw markers; 4533 auto nbcol = gStyle->GetNumberOfColors();; 4534 int logx = gPad->GetLogx();; 4535 int logy = gPad->GetLogy();; 4536 int logz = gPad->GetLogz();; 4537 if (theColor && logz) {; 4538 if (minc>0) minc = log10(minc);; 4539 if (maxc>0) maxc = log10(maxc);; 4540 }; 4541 theScatter->SetMarkerColor(theScatter->GetMarkerColor());; 4542 theScatter->TAttMarker::Modify();; 4543 double x,y,c,ms;; 4544 int nc;; 4545 for (int i=0; i<n; i++) {; 4546 if (theColor) {; 4547 if (logz) {; 4548 if (theColor[i]>0) c = log10(theColor[i]);; 4549 else continue;; 4550 } else {; 4551 c = theColor[i];; 4552 }; 4553 if (c<minc) continue;; 4554 if (c>maxc) continue;; 4555 nc = TMath::Nint(((c-minc)/(maxc-minc))*(nbcol-1));; 4556 if (nc > nbcol-1) nc = nbcol-1;; 4557 theScatter->SetMarkerColor(gStyle->GetColorPalette(nc));; 4558 }; 4559 if (theSize) {; 4560 ms = (MaxMarkerSize-MinMarkerSize)*((theSize[i]-mins)/(maxs-mins))+MinMarkerSize;; 4561 theScatter->SetMarkerSize(ms);; 4562 }; 4563 if (theColor || theSize) theScatter->TAttMarker::Modify();; 4564 if (logx) {; 4565 if (theX[i]>0) x = log10(theX[i]);; 4566 else break;; 4567 } else {; 4568 x = theX[i];; 4569 }; 4570 if (logy) {; 4571 if (theY[i]>0) y = log10(theY[i]);; 4572 else break;; 4573 } else {; 4574 y = theY[i];; 4575 }; 4576 gPad->PaintPolyMarker(1,&x,&y);; 4577 }; 4578}; 4579 ; 4580 ; 4581////////////////////////////////////////////////////////////////////////////////; 4582/// Paint a simple graph, without errors bars.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:160801,log,logx,160801,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['log'],"['logx', 'logy']"
Testability,"elThe pdf of the signal+background model; unsigned intfTestStatisticsIdxIndex of the test statistics to use; boolfUsePriorPdfuse a prior for nuisance parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridCalculator(const char *name); constructor with name and title; set default parameters. HybridCalculator( RooAbsPdf& sbModel, RooAbsPdf& bModel, RooArgList& observables, const RooArgSet* nuisance_parameters, RooAbsPdf* priorPdf ,				 bool GenerateBinned, int testStatistics, int numToys); HybridCalculator constructor without specifying a data set; the user need to specify the models in the S+B case and B-only case,; the list of observables of the model(s) (for MC-generation), the list of parameters; that are marginalised and the prior distribution of those parameters. HybridCalculator( RooAbsData & data, RooAbsPdf& sbModel, RooAbsPdf& bModel, const RooArgSet* nuisance_parameters, RooAbsPdf* priorPdf,				 bool GenerateBinned, int testStatistics, int numToys); HybridCalculator constructor for performing hypotesis test; the user need to specify the data set, the models in the S+B case and B-only case.; In case of treatment of nuisance parameter, the user need to specify the; the list of parameters that are marginalised and the prior distribution of those parameters. HybridCalculator(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); Constructor with a ModelConfig object representing the signal + background model and; another model config representig the background only model; a Prior pdf for the nuiscane parameter of the signal and background can be specified in; the s+b model or the b model. If it is specified in the s+b model, the one of the s+b model will be used. ~HybridCalculator(); HybridCalculator destructor. void SetNullModel(const RooStats::ModelConfig& ); Set the model describing the null hypo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:11061,test,testStatistics,11061,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,2,['test'],"['test', 'testStatistics']"
Testability,"eld * TGNumberEntry::GetNumberEntry ; (; ); const. inline . Get the number entry field. ; Definition at line 261 of file TGNumberEntry.h. ◆ GetNumLimits(). virtual ELimit TGNumberEntry::GetNumLimits ; (; ); const. inlinevirtual . Definition at line 230 of file TGNumberEntry.h. ◆ GetNumMax(). virtual Double_t TGNumberEntry::GetNumMax ; (; ); const. inlinevirtual . Definition at line 236 of file TGNumberEntry.h. ◆ GetNumMin(). virtual Double_t TGNumberEntry::GetNumMin ; (; ); const. inlinevirtual . Definition at line 233 of file TGNumberEntry.h. ◆ GetNumStyle(). virtual EStyle TGNumberEntry::GetNumStyle ; (; ); const. inlinevirtual . Definition at line 224 of file TGNumberEntry.h. ◆ GetTime(). virtual void TGNumberEntry::GetTime ; (; Int_t & ; hour, . Int_t & ; min, . Int_t & ; sec . ); const. inlinevirtual . Definition at line 203 of file TGNumberEntry.h. ◆ IncreaseNumber(). virtual void TGNumberEntry::IncreaseNumber ; (; EStepSize ; step = kNSSSmall, . Int_t ; sign = 1, . Bool_t ; logstep = kFALSE . ). inlinevirtual . Definition at line 212 of file TGNumberEntry.h. ◆ IsA(). TClass * TGNumberEntry::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 273 of file TGNumberEntry.h. ◆ IsEditable(). Bool_t TGNumberEntry::IsEditable ; (; ); const. inlineoverridevirtual . Return kTRUE if frame is being edited. ; Reimplemented from TGCompositeFrame.; Definition at line 267 of file TGNumberEntry.h. ◆ IsLogStep(). virtual Bool_t TGNumberEntry::IsLogStep ; (; ); const. inlinevirtual . Definition at line 239 of file TGNumberEntry.h. ◆ Modified(). void TGNumberEntry::Modified ; (; ). virtual . Emit Modified() signal. ; This signal is emitted when the number entry value is changed. ; Definition at line 2186 of file TGNumberEntry.cxx. ◆ operator=(). TGNumberEntry & TGNumberEntry::operator= ; (; const TGNumberEntry & ; ). privatedelete . ◆ ProcessMessage(). Bool_t TGNumberEntry::ProcessMessage ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntry.html:42052,log,logstep,42052,doc/master/classTGNumberEntry.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntry.html,1,['log'],['logstep']
Testability,"eldId ; (; std::string_view ; fieldName); const. private . Definition at line 238 of file RNTupleReader.cxx. ◆ Show(). void ROOT::Experimental::RNTupleReader::Show ; (; NTupleSize_t ; index, . std::ostream & ; output = std::cout . ). Shows the values of the i-th entry/row, starting with 0 for the first entry. ; By default, prints the output in JSON format. Uses the visitor pattern to traverse through each field of the given entry. ; Definition at line 208 of file RNTupleReader.cxx. Member Data Documentation. ◆ fCachedDescriptor. std::unique_ptr<RNTupleDescriptor> ROOT::Experimental::RNTupleReader::fCachedDescriptor. private . The ntuple descriptor in the page source is protected by a read-write lock. ; We don't expose that to the users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale. Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes, not on a hot code path. ; Definition at line 89 of file RNTupleReader.hxx. ◆ fDisplayReader. std::unique_ptr<RNTupleReader> ROOT::Experimental::RNTupleReader::fDisplayReader. private . We use a dedicated on-demand reader for Show() and Scan(). ; Printing data uses all the fields from the full model even if the analysis code uses only a subset of fields. The display reader is a clone of the original reader. ; Definition at line 83 of file RNTupleReader.hxx. ◆ fMetrics. Detail::RNTupleMetrics ROOT::Experimental::RNTupleReader::fMetrics. private . Definition at line 90 of file RNTupleReader.hxx. ◆ fModel. std::unique_ptr<RNTupleModel> ROOT::Experimental::RNTupleReader::fModel. private . Needs to be destructed before fSource. ; Definition at line 79 of file RNTupleReader.hxx. ◆ fSource. std::unique_ptr<Internal::RPageSource> ROOT::Experimental::RNTupleReader::fSource. private . Definition at line 77 of file RNTupleReader.hxx. ◆ fUnzipTasks. std::uni",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:18231,test,testing,18231,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,1,['test'],['testing']
Testability,"electionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer: all function calls during minimization gave invalid NLL values!; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#0] ERROR:Minimization -- RooMinimizer: all function calls during minimization gave invalid NLL values!; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#0] ERROR:Eval -- RooAbsReal::logEvalError(pol3) evaluation error, ; origin : RooPolynomial::pol3[ x=x coefList=(a1,a2,a3) ]; message : p.d.f normalization integral is zero or negative: -2220.000000; server values: x=x=0, coefList=(a1 = 10 +/- 0,a2 = -1 +/- 0,a3 = 0.01); [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:6133,log,logEvalError,6133,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,1,['log'],['logEvalError']
Testability,"elete; };. protected:. Bool_tfArchivedwhether the query has been archived; Long64_tfBytesnumber of bytes processed; Bool_tfDrawtrue if draw action query; TDatimefEndtime when processing ended; Long64_tfEntriesnumber of entries processed; Bool_tfFinalizedwhether Terminate has been run; Long64_tfFirstfirst entry processed; Float_tfInitTimeInitialization time (seconds) (millisec precision); TList*fInputListinput list; contains also data sets, entry list, ...; TStringfLibListblank-separated list of libs loaded at fStart; TMacro*fLogFilefile with log messages from the query; Float_tfMergeTimeMerging time (seconds) (millisec precision); TStringTNamed::fNameobject identifier; Int_tfNumMergersNumber of submergers; Int_tfNumWrksNumber of workers at start; TStringfOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*fOutputListoutput list; TStringfParListcolon-separated list of PAR loaded at fStart; Float_tfPrepTimePrepare time (seconds) (millisec precision); Float_tfProcTimeProcessing time (seconds) (millisec precision); Float_tfRecvTimeTransfer-to-client time (seconds) (millisec precision); TStringfResultFileURL of the file where results have been archived; TMacro*fSelecHdrselector header file; TMacro*fSelecImpselector implementation file; Int_tfSeqNumquery unique sequential number; TDatimefStarttime when processing started; TQueryResult::EQueryStatusfStatusquery status; Float_tfTermTimeTerminate time (seconds) (millisec precision); TStringTNamed::fTitleobject title; Float_tfUsedCPUreal CPU time used (seconds). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, const char* selec); Main constructor. ~TQueryResult(); Destructor. TQueryResult * CloneInfo(); Return an instance of TQueryResult containing only the local; info fields, i.e. no outputlist, liblist, dset, selectors, etc..; Used for fast retrieve of information about existin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQueryResult.html:7708,log,log,7708,root/html534/TQueryResult.html,https://root.cern,https://root.cern/root/html534/TQueryResult.html,1,['log'],['log']
Testability,"elihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod6(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m); Profile Likelihood function for MODEL 6:; background known/ Efficiency binomial. Double_t EvalLikeMod7(Double_t mu, Int_t x, Double_t em, Double_t sde, Double_t b, Int_t what); Calculates the Profile Likelihood for MODEL 7:; background known/Efficiency Gauss; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod7(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t em, Double_t v); Profile Likelihood function for MODEL 6:; background known/ Efficiency gaussian. Double_t EvalPolynomial(Double_t x, const Int_t[] coef, Int_t N); evaluate polynomial. Double_t EvalMonomial(Double_t x, const Int_t[] coef, Int_t N); evaluate mononomial. Double_t LogFactorial(Int_t n); LogFactorial function (use the logGamma function via the relation Gamma(n+1) = n!. TRolke(Double_t CL = 0.90000000000000002, Option_t* option = """"); Constructor. Double_t GetCL() const; Get and set the Confidence Level. void SetCL(Double_t CL). void SetCLSigmas(Double_t CLsigmas); Set the Confidence Level in terms of Sigmas. bool GetBounding() const; Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . void SetBounding(const bool bnd); Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . » Last changed: Tue Jun 2 16:32:13 2015 » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TRolke.html:27256,log,logGamma,27256,root/html604/TRolke.html,https://root.cern,https://root.cern/root/html604/TRolke.html,1,['log'],['logGamma']
Testability,"elihoodIntervalPlotThis class provides simple and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:7066,log,log,7066,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['log'],['log']
Testability,"elihoodIntervalPlotThis class provides simple and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:7283,log,log,7283,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,5,['log'],['log']
Testability,"elpers.h""; 167#include ""RooHelpers.h""; 168#include ""RooFormulaVar.h""; 169#include ""RooDerivative.h""; 170 ; 171#include ""ROOT/StringUtils.hxx""; 172#include ""TMath.h""; 173#include ""TPaveText.h""; 174#include ""TMatrixD.h""; 175#include ""TMatrixDSym.h""; 176 ; 177#include <algorithm>; 178#include <iostream>; 179#include <string>; 180#include <cmath>; 181#include <stdexcept>; 182 ; 183namespace {; 184 ; 185inline double getLog(double prob, RooAbsReal const *caller); 186{; 187 ; 188 if (prob < 0) {; 189 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to a negative number"");; 190 return RooNaNPacker::packFloatIntoNaN(-prob);; 191 }; 192 ; 193 if (std::isinf(prob)) {; 194 oocoutW(caller, Eval) << ""RooAbsPdf::getLogVal("" << caller->GetName(); 195 << "") WARNING: top-level pdf has an infinite value"" << std::endl;; 196 }; 197 ; 198 if (prob == 0) {; 199 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to zero"");; 200 ; 201 return -std::numeric_limits<double>::infinity();; 202 }; 203 ; 204 if (TMath::IsNaN(prob)) {; 205 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to NaN"");; 206 ; 207 return prob;; 208 }; 209 ; 210 return std::log(prob);; 211}; 212 ; 213} // namespace; 214 ; 215using std::endl, std::string, std::ostream, std::vector, std::pair, std::make_pair;; 216 ; 217using RooHelpers::getColonSeparatedNameString;; 218 ; 219ClassImp(RooAbsPdf);; 220 ; 221ClassImp(RooAbsPdf::GenSpec);; 222 ; 223 ; 224Int_t RooAbsPdf::_verboseEval = 0;; 225TString RooAbsPdf::_normRangeOverride;; 226 ; 227////////////////////////////////////////////////////////////////////////////////; 228/// Default constructor; 229 ; 230RooAbsPdf::RooAbsPdf() : _normMgr(this, 10) {}; 231 ; 232////////////////////////////////////////////////////////////////////////////////; 233/// Constructor with name and title only; 234 ; 235RooAbsPdf::RooAbsPdf(const char *name, const char *title) :; 236 RooAbsReal(name,title), _normMgr(this,10), _selectComp(true); 237{; 238 resetErrorCounte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:8419,log,logEvalError,8419,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['logEvalError']
Testability,els from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::LinInterpVar Piecewise linear interpolation; RooStats::HybridCalculator ; RooStats::HybridCalculatorGeneric ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class ; RooStats::HypoTestPlot ; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooStats::MCMCCalculator Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.; RooStats::NumberCountingUtils ; RooStats::PdfProposal ; RooStats::P,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:44574,test,test,44574,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,3,['test'],"['test', 'tests']"
Testability,"else; 842 {; 843 std::vector<double> output;; 844 //for (auto it = begin (testPattern), itEnd = end (testPattern); it != itEnd; ++it); 845 {; 846 //const Pattern& p = (*it);; 847 //double weight = p.weight ();; 848 //Batch batch (it, it+1);; 849 Batch batch (begin (testPattern), end (testPattern));; 850 output.clear ();; 851 pass_through_type passThrough (settings, batch, dropContainerTest);; 852 double testPatternError = (*this) (passThrough, weights, ModeOutput::FETCH, output);; 853 if (output.size() == (outputSize() - 1) * batch.size()); 854 {; 855 auto output_iterator = output.begin();; 856 for (auto pattern_it = batch.begin(); pattern_it != batch.end(); ++pattern_it); 857 {; 858 for (size_t output_index = 1; output_index < outputSize(); ++output_index); 859 {; 860 settings.testSample (0, *output_iterator, (*pattern_it).output ().at (0),; 861 (*pattern_it).weight ());; 862 ++output_iterator;; 863 }; 864 }; 865 }; 866 testError += testPatternError; /// batch.size ();; 867 }; 868 // testError /= testPattern.size ();; 869 }; 870 settings.endTestCycle ();; 871// testError /= weightSum;; 872 ; 873 settings.computeResult (*this, weights);; 874 ; 875 hasConverged = settings.hasConverged (testError);; 876 if (!hasConverged && !isWeightsForDrop); 877 {; 878 dropOutWeightFactor (weights, dropFractions, true); // inverse; 879 isWeightsForDrop = true;; 880 }; 881 }; 882 ++testCycleCount;; 883 ++dropOutChangeCount;; 884 ; 885 ; 886// settings.resetPlot (""errors"");; 887 settings.addPoint (""trainErrors"", cycleCount, trainError);; 888 settings.addPoint (""testErrors"", cycleCount, testError);; 889 settings.plot (""trainErrors"", ""C"", 1, kBlue);; 890 settings.plot (""testErrors"", ""C"", 1, kMagenta);; 891 ; 892 ; 893 // setup error plots and progress bar variables for JsMVA; 894 if (fInteractive){; 895 fInteractive->AddPoint(cycleCount, trainError, testError);; 896 if (*fExitFromTraining) break;; 897 *fIPyCurrentIter = 100*(double)settings.maxConvergenceCount () /(double)settings.conver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:26315,test,testError,26315,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,['test'],"['testError', 'testPattern']"
Testability,em PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TProtoClass Persistent TClass; TProtoClass::TProtoRealData Persistent version of TRealData; TPyArg Python morphing argument type; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelec,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:117207,log,log,117207,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['log'],['log']
Testability,em PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelector Python equivalent base class for PROOF; TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:123556,log,log,123556,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['log'],['log']
Testability,"em error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSQLServer * Connect (const char *db, const char *uid, const char *pw);  The db should be of the form: <dbms>://<host>[:<port>][/<database>], e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, pgsql://... or sqlite://<database>... The uid is the username and pw the password that should be used for the connection. ;  ; static const char * DeclFileName ();  ; static const char * GetFloatFormat ();  return current printf format for float/double members, default ""%e"" ;  ; static void SetFloatFormat (const char *fmt=""%e"");  set printf format for float/double members, default ""%e"" ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSQLServer ();  ; void ClearErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLServer.html:11881,test,test,11881,doc/master/classTSQLServer.html,https://root.cern,https://root.cern/doc/master/classTSQLServer.html,1,['test'],['test']
Testability,"em.rootrc or .rootrc file like: TMacro.Browse : Action; TMacro::Browsevoid Browse(TBrowser *b) overrideWhen clicking in the browser, the following action is performed on this macro, depending the content ...Definition TMacro.cxx:171; or set via gEnv->SetValue, eg gEnv->SetValue(""TMacro.Browse"",""Print"");; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TEnv::SetValuevirtual void SetValue(const char *name, const char *value, EEnvLevel level=kEnvChange, const char *type=nullptr)Set the value of a resource or create a new resource.Definition TEnv.cxx:736; By default TMacro.Browse="""" -if TMacro.Browse ="""" the macro is executed -if TMacro.Browse =""Print"" the macro is printed in stdout -if TMacro.Browse is of the form ""mymacro.C"" the macro void mymacro.C(TMacro *m) is called where m=this macro An example of macro.C saving the macro into a file and viewing it with emacs is shown below: void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653. Reimplemented from TObject.; Definition at line 171 of file TMacro.cxx. ◆ Checksum(). TMD5 * TMacro::Checksum ; (; ). virtual . Returns checksum of the current content. ; The returned TMD5 object must be deleted by the user. Returns 0 in case of error. ; Definition at line 192 of file TMacro.cxx. ◆ Class(). static TClass * TMacro::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMacro::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMacro::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 59 of file TMacro.h. ◆ DeclFileName(). static const char * TMacro::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 59 of file TMacro.h. ◆ Exec(). Longpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacro.html:16467,log,log,16467,doc/master/classTMacro.html,https://root.cern,https://root.cern/doc/master/classTMacro.html,1,['log'],['log']
Testability,"emap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableWrappers(bool value = true); Enable call wrappers (also known as stubs) if value is true;; disable if value is false. void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:19922,stub,stubs,19922,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['stub'],['stubs']
Testability,"ember Functions inherited from RooAbsMoment; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:46101,log,logEvalError,46101,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,9,['log'],"['logEvalError', 'logging']"
Testability,"ember name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated streamers resolve inheritance tree for given class. This allows to have; array (or vector) of object pointers on some basic class, while objects of derived; class(es) are used. To access data from xml files, user should use TXmlFile class, which is different from; ROOT TXMLFile, but provides very similar functionality. For example, to read; object from xml file:. TXmlFile file(""test.xml""); // open xml file; file.ls(); // show list of keys in file; TExample* ex1 = (TExample*) file.Get(""ex1"", TExample_streamer); // get object; file.Close();. To write object to file:. TXmlFile outfile(""test2.xml"", ""recreate""); // create xml file; TExample* ex1 = new TExample;; outfile.Write(ex1, ""ex1"", TExample_streamer); // write object to file; outfile.Close();. Complete example for generating and using of external xml streamers can be taken from; http://www-linux.gsi.de/~linev/xmlreader.tar.gz. Any bug reports and requests for additional functionality are welcome. Sergey Linev, S.Linev@gsi.de. Function Members (Methods); public:. TXMLPlayer(); TXMLPlayer(const TXMLPlayer&); virtual~TXMLPlayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLPlayer.html:3242,test,test,3242,root/html528/TXMLPlayer.html,https://root.cern,https://root.cern/root/html528/TXMLPlayer.html,4,['test'],['test']
Testability,"ember name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated streamers resolve inheritance tree for given class. This allows to have; array (or vector) of object pointers on some basic class, while objects of derived; class(es) are used. To access data from xml files, user should use TXmlFile class, which is different from; ROOT TXMLFile, but provides very similar functionality. For example, to read; object from xml file:. TXmlFile file(""test.xml""); // open xml file; file.ls(); // show list of keys in file; TExample* ex1 = (TExample*) file.Get(""ex1"", TExample_streamer); // get object; file.Close();. To write object to file:. TXmlFile outfile(""test2.xml"", ""recreate""); // create xml file; TExample* ex1 = new TExample;; outfile.Write(ex1, ""ex1"", TExample_streamer); // write object to file; outfile.Close();. Complete example for generating and using of external xml streamers can be taken from; http://www-linux.gsi.de/~linev/xmlreader.tar.gz. Any bug reports and requests for additional functionality are welcome. Sergey Linev, S.Linev@gsi.de. Function Members (Methods); public:. virtual~TXMLPlayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLPlayer.html:3267,test,test,3267,root/html602/TXMLPlayer.html,https://root.cern,https://root.cern/root/html602/TXMLPlayer.html,2,['test'],['test']
Testability,"embers |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUnuranMultiContDist Class ReferenceMath » Unuran. ; TUnuranMultiContDist class describing multi dimensional continuous distributions. ; It is used by TUnuran to generate a set of random numbers according to this distribution via TUnuran::Sample(double *). The class can be constructed from a multi-dimensional function (TF1 pointer, which can be actually also a TF2 or a TF3). It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range of the generated random numbers. By default the domain is [(-inf,-inf,...)(+inf,+inf,...)], independently of the range set in the TF1 class used to construct the distribution.; The derivatives of the pdf which are used by some UNURAN methods are estimated numerically in the Derivative() method. Some extra information (like distribution mode) can be set using SetMode. Some methods require instead of the pdf the log of the pdf. This can also be controlled by setting a flag when constructing this class. ; Definition at line 47 of file TUnuranMultiContDist.h. Public Member Functions;  TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction &pdf, bool isLogPdf=false);  Constructor as before but from a generic function object interface for multi-dim functions. ;  ;  TUnuranMultiContDist (const TUnuranMultiContDist &);  Copy constructor. ;  ;  TUnuranMultiContDist (TF1 *func=nullptr, unsigned int dim=0, bool isLogPdf=false);  Constructor from a TF1 object representing the Probability density function. ;  ;  ~TUnuranMultiContDist () override;  Destructor. ;  ; TUnuranMultiContDist * Clone () const override;  Clone (required by base class) ;  ; double Derivative (const double *x, int icoord) const;  evaluate the partial derivative for the given coordinate. ;  ; const double * GetLowerDomain () const;  get the distribution lower domain values. ;  ; const double * GetMode () const;  ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranMultiContDist.html:1155,log,log,1155,doc/master/classTUnuranMultiContDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranMultiContDist.html,1,['log'],['log']
Testability,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofProgressLog.html:25952,log,log,25952,root/html604/TProofProgressLog.html,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html,4,['log'],"['log', 'logs']"
Testability,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:25952,log,log,25952,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,4,['log'],"['log', 'logs']"
Testability,"ement > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator==() [1/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TMatrixTBase< Element > & ; m1, . const TMatrixTBase< Element > & ; m2 . ). Check to see if two matrices are identical. ; Definition at line 855 of file TMatrixTBase.cxx. ◆ operator==() [2/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Check to see if two vectors are identical. ; Definition at line 1386 of file TVectorT.cxx. ◆ operator>() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2584 of file TMatrixT.cxx. ◆ operator>() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:35537,log,logical,35537,doc/master/namespaceTMatrixTAutoloadOps.html,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html,1,['log'],['logical']
Testability,"ement > TMatrixTAutoloadOps::operator> ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2640 of file TMatrixT.cxx. ◆ operator>=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2649 of file TMatrixT.cxx. ◆ operator>=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2677 of file TMatrixT.cxx. ◆ operator>=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator||() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical OR. ; Definition at line 2525 of file TMatrixT.cxx. ◆ operator||() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). Logical OR. ; Definition at line 2550 of file TMatrixT.cxx. ◆ operator||() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical OR. ; Definition at line 2575 of file TMatrixT.cxx. ◆ OuterProduct() [1/2]. template<class Element1 , class Element2 > . TMatrixT< Element1 > TMatrixTAutoloadOps::OuterProduct ; (; const TVectorT< Element1 > & ; v1, . const TVectorT< Element2 > & ; v2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:37728,log,logical,37728,doc/master/namespaceTMatrixTAutoloadOps.html,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html,1,['log'],['logical']
Testability,"ement; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionFrame.html:22675,log,log,22675,root/html602/TSessionFrame.html,https://root.cern,https://root.cern/root/html602/TSessionFrame.html,2,['log'],['log']
Testability,"en archived; Long64_tTQueryResult::fBytesnumber of bytes processed; Bool_tTQueryResult::fDrawtrue if draw action query; TDatimeTQueryResult::fEndtime when processing ended; Long64_tTQueryResult::fEntriesnumber of entries processed; Bool_tTQueryResult::fFinalizedwhether Terminate has been run; Long64_tTQueryResult::fFirstfirst entry processed; Float_tTQueryResult::fInitTimeInitialization time (seconds) (millisec precision); TList*TQueryResult::fInputListinput list; contains also data sets, entry list, ...; TStringTQueryResult::fLibListblank-separated list of libs loaded at fStart; TMacro*TQueryResult::fLogFilefile with log messages from the query; TStringTNamed::fNameobject identifier; Int_tTQueryResult::fNumWrksNumber of workers at start; TStringTQueryResult::fOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*TQueryResult::fOutputListoutput list; TStringTQueryResult::fParListcolon-separated list of PAR loaded at fStart; Float_tTQueryResult::fProcTimeProcessing time (seconds) (millisec precision); TStringTQueryResult::fResultFileURL of the file where results have been archived; TMacro*TQueryResult::fSelecHdrselector header file; TMacro*TQueryResult::fSelecImpselector implementation file; Int_tTQueryResult::fSeqNumquery unique sequential number; TDatimeTQueryResult::fStarttime when processing started; TQueryResult::EQueryStatusTQueryResult::fStatusquery status; TStringTNamed::fTitleobject title; Float_tTQueryResult::fUsedCPUreal CPU time used (seconds). private:. Int_tfStartLoglog file offset at start. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); Main constructor. void SetRunning(Int_t startlog, const char* par, Int_t nwrks); Call when running starts. TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofQueryResult.html:8186,log,log,8186,root/html528/TProofQueryResult.html,https://root.cern,https://root.cern/root/html528/TProofQueryResult.html,5,['log'],['log']
Testability,"en buffer is full, empty the buffer; fBuffer[0] = number of entries in buffer; fBuffer[1] = w of first entry; fBuffer[2] = x of first entry. bool CheckBinLimits(const TAxis* a1, const TAxis* a2). bool CheckBinLabels(const TAxis* a1, const TAxis* a2); check that axis have same labels. bool CheckAxisLimits(const TAxis* a1, const TAxis* a2); Check that the axis limits of the histograms are the same; if a first and last bin is passed the axis is compared between the given range. bool CheckEqualAxes(const TAxis* a1, const TAxis* a2); Check that the axis are the same. bool CheckConsistentSubAxes(const TAxis* a1, Int_t firstBin1, Int_t lastBin1, const TAxis* a2, Int_t firstBin2 = 0, Int_t lastBin2 = 0); Check that two sub axis are the same; the limits are defined by first bin and last bin; N.B. no check is done in this case for variable bins. bool CheckConsistency(const TH1* h1, const TH1* h2); Check histogram compatibility. Double_t Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; test for comparing weighted and unweighted histograms. Function: Returns p-value. Other return values are specified by the 3rd parameter <br>. Parameters:. - h2: the second histogram; - option:; o ""UU"" = experiment experiment comparison (unweighted-unweighted); o ""UW"" = experiment MC comparison (unweighted-weighted). Note that; the first histogram should be unweighted; o ""WW"" = MC MC comparison (weighted-weighted); o ""NORM"" = to be used when one or both of the histograms is scaled; but the histogram originally was unweighted; o by default underflows and overlows are not included:; * ""OF"" = overflows included; * ""UF"" = underflows included; o ""P"" = print chi2, ndf, p_value, igood; o ""CHI2"" = returns chi2 instead of p-value; o ""CHI2/NDF"" = returns ; - res: not empty - computes normalized residuals and returns them in; this array. The current implementation is based on the papers test for comparison; of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; ""Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:46849,test,test,46849,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,3,['test'],['test']
Testability,"en in the job description file. For example:; ; ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # Use the scale method to send as many jobs as needed; cluster.scale(4); ```; ; In this tutorial, a cluster object is created for the local machine, using; multiprocessing (processes=True) on 2 workers (n_workers=2) each using only; 1 core (threads_per_worker=1) and 2GiB of RAM (memory_limit=""2GiB"").; """"""; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB""); client = Client(cluster); return client; ; ; # This tutorial uses Python multiprocessing, so the creation of the cluster; # needs to be wrapped in the main clause as described in the Python docs; # https://docs.python.org/3/library/multiprocessing.html; if __name__ == ""__main__"":; ; # Create the connection to the mock Dask cluster on the local machine; connection = create_connection(); # Create an RDataFrame that will use Dask as a backend for computations; df = RDataFrame(1000, daskclient=connection); ; # Set the random seed and define two columns of the dataset with random numbers.; ROOT.gRandom.SetSeed(1); df_1 = df.Define(""gaus"", ""gRandom->Gaus(10, 1)"").Define(""exponential"", ""gRandom->Exp(10)""); ; # Book an histogram for each column; h_gaus = df_1.Histo1D((""gaus"", ""Normal distribution"", 50, 0, 30), ""gaus""); h_exp = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""); ; # Plot the histograms side by side on a canvas; c = ROOT.TCanvas(""distrdf002"", ""distrdf002"", 800, 400); c.Divide(2, 1); c.cd(1); h_gaus.DrawCopy(); c.cd(2); h_exp.DrawCopy(); ; # Save the canvas; c.SaveAs(""distrdf002_dask_connection.png""); print(""Saved figure to distrdf002_dask_connection.png""); . DateFebruary 2022 ; AuthorVincenzo Eduardo Padulano ; Definition in file distrdf002_dask_connection.py. tutorialsdataframedistrdf002_dask_connection.py. ROOT master - Reference Guide Generated on Tue No",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/distrdf002__dask__connection_8py.html:3689,mock,mock,3689,doc/master/distrdf002__dask__connection_8py.html,https://root.cern,https://root.cern/doc/master/distrdf002__dask__connection_8py.html,1,['mock'],['mock']
Testability,"en looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector arguments; [#6363] - [IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; [#7055] - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:44465,log,logarithms,44465,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['log'],['logarithms']
Testability,enAlgoOptions.cxx;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:44805,test,testFit,44805,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testFit']
Testability,enAlgoOptions.cxx;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSL,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46231,test,testFit,46231,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testFit']
Testability,"enGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. ""GLLEGO""; Draw a lego plot. It works also for TH2Poly. ""GLLEGO2; Bins with color levels. ""GLLEGO3; Cylindrical bars. Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y.; For surface plots (TF2 and TH2) the supported options are:. ""GLSURF"" ; Draw a surface. ""GLSURF1""; Surface with color levels. ""GLSURF2""; The same as ""GLSURF1"" but without polygon outlines. ""GLSURF3""; Color level projection on top of plot (works only in cartesian coordinate; system). ""GLSURF4""; Same as ""GLSURF"" but without polygon outlines. The surface painting in cartesian coordinates supports logarithmic scales along; X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic,; in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:. "" ""; Default, cartesian coordinates system. ""POL""; Polar coordinates system. ""CYL""; Cylindrical coordinates system. ""SPH""; Spherical coordinates system. TH3 as boxes (spheres); The supported options are:. GLBOX"" ; TH3 as a set of boxes, size of box is proportional to bin content. GLBOX1""; The same as ""glbox"", but spheres are drawn instead of boxes. TH3 as iso-surface(s); The supported option is:. ""GLISO"" ; TH3 is drawn using iso-surfaces. TF3 (implicit function); The supported option is:. GLTF3"" ; Draw a TF3. Parametric surfaces; $ROOTSYS/tutorials/gl/glparametric.C shows how to create parametric; equations and visualize the surface.; Interaction with the plots; All the interactions are implemented via standard methods; DistancetoPrimitive() and ExecuteEvent(). That's why all the; interactions with the OpenGL plots are possible only when the mouse cursor is; in the plot's are",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:70183,log,logarithmic,70183,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['log'],['logarithmic']
Testability,"enGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. ""GLLEGO""; Draw a lego plot. It works also for TH2Poly. ""GLLEGO2; Bins with color levels. ""GLLEGO3; Cylindrical bars. Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y.; For surface plots (TF2 and TH2) the supported options are:. ""GLSURF"" ; Draw a surface. ""GLSURF1""; Surface with color levels. ""GLSURF2""; The same as ""GLSURF1"" but without polygon outlines. ""GLSURF3""; Color level projection on top of plot (works only in cartesian coordinate; system). ""GLSURF4""; Same as ""GLSURF"" but without polygon outlines. The surface painting in cartesian coordinates supports logarithmic scales along; X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic,; in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:. "" ""; Default, cartesian coordinates system. ""POL""; Polar coordinates system. ""CYL""; Cylindrical coordinates system. ""SPH""; Spherical coordinates system. TH3 as color boxes; The supported option is:. ""GLCOL"" ; H3 is drawn using semi-transparent colored boxes.; See $ROOTSYS/tutorials/gl/glvox1.C. TH3 as boxes (spheres); The supported options are:. ""GLBOX"" ; TH3 as a set of boxes, size of box is proportional to bin content. ""GLBOX1""; The same as ""glbox"", but spheres are drawn instead of boxes. TH3 as iso-surface(s); The supported option is:. ""GLISO"" ; TH3 is drawn using iso-surfaces. TF3 (implicit function); The supported option is:. ""GLTF3"" ; Draw a TF3. Parametric surfaces; $ROOTSYS/tutorials/gl/glparametric.C shows how to create parametric; equations and visualize the surface.; Interaction with the plots; All the interactions are implemented via standard methods; DistancetoPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THistPainter.html:79713,log,logarithmic,79713,root/html604/THistPainter.html,https://root.cern,https://root.cern/root/html604/THistPainter.html,1,['log'],['logarithmic']
Testability,"enGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. ""GLLEGO""; Draw a lego plot. It works also for TH2Poly. ""GLLEGO2; Bins with color levels. ""GLLEGO3; Cylindrical bars. Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y.; For surface plots (TF2 and TH2) the supported options are:. ""GLSURF"" ; Draw a surface. ""GLSURF1""; Surface with color levels. ""GLSURF2""; The same as ""GLSURF1"" but without polygon outlines. ""GLSURF3""; Color level projection on top of plot (works only in cartesian coordinate; system). ""GLSURF4""; Same as ""GLSURF"" but without polygon outlines. The surface painting in cartesian coordinates supports logarithmic scales along; X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic,; in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:. "" ""; Default, cartesian coordinates system. ""POL""; Polar coordinates system. ""CYL""; Cylindrical coordinates system. ""SPH""; Spherical coordinates system. TH3 as color boxes; The supported option is:. ""GLCOL"" ; H3 is drawn using semi-transparent colored boxes.; See $ROOTSYS/tutorials/gl/glvox1.C. TH3 as boxes (spheres); The supported options are:. GLBOX"" ; TH3 as a set of boxes, size of box is proportional to bin content. GLBOX1""; The same as ""glbox"", but spheres are drawn instead of boxes. TH3 as iso-surface(s); The supported option is:. ""GLISO"" ; TH3 is drawn using iso-surfaces. TF3 (implicit function); The supported option is:. GLTF3"" ; Draw a TF3. Parametric surfaces; $ROOTSYS/tutorials/gl/glparametric.C shows how to create parametric; equations and visualize the surface.; Interaction with the plots; All the interactions are implemented via standard methods; DistancetoPrimi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:75385,log,logarithmic,75385,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,2,['log'],['logarithmic']
Testability,"en_b;; 865 if (c == ""dyellow"") return gClr_darkyellow;; 866 ; 867 if (c == ""bold"") return gClr_bold;; 868 if (c == ""bblack"") return gClr_black_b;; 869 ; 870 if (c == ""blue_bgd"") return gClr_blue_bg;; 871 if (c == ""red_bgd"" ) return gClr_red_bg;; 872 ; 873 if (c == ""white_on_blue"" ) return gClr_whiteonblue;; 874 if (c == ""white_on_green"") return gClr_whiteongreen;; 875 ; 876 if (c == ""reset"") return gClr_reset;; 877 ; 878 std::cout << ""Unknown color "" << c << std::endl;; 879 exit(1);; 880 ; 881 return gClr_none;; 882}; 883 ; 884////////////////////////////////////////////////////////////////////////////////; 885/// formatted output of simple table; 886 ; 887void TMVA::Tools::FormattedOutput( const std::vector<Double_t>& values, const std::vector<TString>& V,; 888 const TString titleVars, const TString titleValues, MsgLogger& logger,; 889 TString format ); 890{; 891 // sanity check; 892 UInt_t nvar = V.size();; 893 if ((UInt_t)values.size() != nvar) {; 894 logger << kFATAL << ""<FormattedOutput> fatal error with dimensions: ""; 895 << values.size() << "" OR "" << "" != "" << nvar << Endl;; 896 }; 897 ; 898 // find maximum length in V (and column title); 899 UInt_t maxL = 7;; 900 std::vector<UInt_t> vLengths;; 901 for (UInt_t ivar=0; ivar<nvar; ivar++) maxL = TMath::Max( (UInt_t)V[ivar].Length(), maxL );; 902 maxL = TMath::Max( (UInt_t)titleVars.Length(), maxL );; 903 ; 904 // column length; 905 UInt_t maxV = 7;; 906 maxV = TMath::Max( (UInt_t)titleValues.Length() + 1, maxL );; 907 ; 908 // full column length; 909 UInt_t clen = maxL + maxV + 3;; 910 ; 911 // bar line; 912 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 913 logger << Endl;; 914 ; 915 // title bar; 916 logger << setw(maxL) << titleVars << "":"";; 917 logger << setw(maxV+1) << titleValues << "":"";; 918 logger << Endl;; 919 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 920 logger << Endl;; 921 ; 922 // the numbers; 923 for (UInt_t irow=0; irow<nvar; irow++) {; 924 logger << setw(maxL) << V[irow] << "":"";; 925 logger <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:30952,log,logger,30952,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"enable ticks for X axis; ticky - enable ticks for X axis; tick - enable ticks for X and Y axes; rx - reverse X axis; ry - reverse Y axis; rotate - rotate frame; fixframe - disable interactive moving of the frame; nozoomx - disable zooming on X axis; nozoomy - disable zooming on Y axis; cpXY - create palette XY for the canvas like cp50; nopalette - ignore palette stored with TCanvas; nocolors - ignore colors list stored with TCanvas; lcolors - use only locally colors list stored with TCanvas; nomargins - clear frame margins. 1.4 Superimposing draw objects; In the URL string one could use “+” sign to specify objects superposition:. item=hpx+hprof. With similar syntax one could specify individual draw options for superimposed objects. item=hpx+hprof&opt=logy+hist. Here “logy” option will be used for “hpx1” item and “hist” option for “hprof;1” item.; While draw option can include “+” sign itself, for superposition one could specify arrays of items and draw options like:. item=[hpx;1,hprof;1]&opt=[logy,hist]. 1.5 TTree draw; JSROOT provides possibility to display TTree data, using TTree::Draw syntax:. opt=px; opt=px:py; opt=px:py:pz. It is also possible to use branch by id number specifying name like “br_0”, “br_1” and so on:. opt=br_0:br_1. Histogram ranges and binning defined after reading first 1000 entries from the tree. Like in ROOT, one could configure histogram binning and range directly:. opt=px:py>>h(50,-5,5,50,-5,5). One and two dimensional draw expressions can be resulted into TGraph object, using “>>Graph” as output:. opt=px:py>>Graph. For any integer value one can accumulate histogram with value bits distribution, specifying as output “>>bits(16)” or “>>bits”:. opt=event.fTracks.fBits>>bits. There is special handling of TBits objects:. opt=event.fTriggerBits. It is allowed to use different expressions with branch values:. opt=px+py:px-py. Such expression can include arithmetical operations and all methods, provided in JavaScript Math class:. opt=Math.abs(px+",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:8327,log,logy,8327,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['log'],['logy']
Testability,"ename without path or extension. TMacro(const TMacro& ); Copy constructor. ~TMacro(); Delete this macro. TMacro& operator=(const TMacro& ); Copy constructor. TObjString * AddLine(const char* text); Add line with text in the list of lines of this macro. void Browse(TBrowser* b); When clicking in the browser, the following action is performed; on this macro, depending the content of the variable TMacro.Browse.; TMacro.Browse can be set in the system.rootrc or .rootrc file like; TMacro.Browse : Action; or set via gEnv->SetValue, eg; gEnv->SetValue(""TMacro.Browse"",""Print"");; By default TMacro.Browse=""""; -if TMacro.Browse ="""" the macro is executed; -if TMacro.Browse =""Print"" the macro is printed in stdout; -if TMacro.Browse is of the form ""mymacro.C""; the macro void mymacro.C(TMacro *m) is called where m=this macro; An example of macro.C saving the macro into a file and viewing it; with emacs is shown below:; void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }. TMD5 * Checksum(); Returns checksum of the current content. The returned TMD5 object must; be deleted by the user. Returns 0 in case of error. Bool_t Load() const; Load the macro into the interpreter.; Return true in case the loading was successful. Long_t Exec(const char* params = 0, Int_t* error = 0); Execute this macro with params, if params is 0, default parameters; (set via SetParams) are used.; error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; Returns the result of the macro (return value or value of the last; expression), cast to a Long_t. TObjString * GetLineWith(const char* text) const; Search the first line containing text. void Paint(Option_t* option = """"); Execute this macro (called by TPad::Paint). void Print(Option_t* option = """") const; Print contents of this macro. Int_t ReadFile(const char* filename); Read lines in filename in this macro. void SaveSource(const char* filename); Save macro source in filename. void SaveSource(FILE* fp); Sa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMacro.html:8930,log,log,8930,root/html602/TMacro.html,https://root.cern,https://root.cern/root/html602/TMacro.html,2,['log'],['log']
Testability,"ename without path or extension. TMacro(const TMacro& ); Copy constructor. ~TMacro(); Delete this macro. TMacro& operator=(const TMacro& ); Copy constructor. TObjString * AddLine(const char* text); Add line with text in the list of lines of this macro. void Browse(TBrowser* b); When clicking in the browser, the following action is performed; on this macro, depending the content of the variable TMacro.Browse.; TMacro.Browse can be set in the system.rootrc or .rootrc file like; TMacro.Browse : Action; or set via gEnv->SetValue, eg; gEnv->SetValue(""TMacro.Browse"",""Print"");; By default TMacro.Browse=""""; -if TMacro.Browse ="""" the macro is executed; -if TMacro.Browse =""Print"" the macro is printed in stdout; -if TMacro.Browse is of the form ""mymacro.C""; the macro void mymacro.C(TMacro *m) is called where m=this macro; An example of macro.C saving the macro into a file and viewing it; with emacs is shown below:; void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }. TMD5 * Checksum(); Returns checksum of the current content. The returned TMD5 object must; be deleted by the user. Returns 0 in case of error. Long_t Exec(const char* params = 0, Int_t* error = 0); Execute this macro with params, if params is 0, default parameters; (set via SetParams) are used.; error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; Returns the result of the macro (return value or value of the last; expression), cast to a Long_t. TObjString * GetLineWith(const char* text) const; Search the first line containing text. void Paint(Option_t* option = """"); Execute this macro (called by TPad::Paint). void Print(Option_t* option = """") const; Print contents of this macro. Int_t ReadFile(const char* filename); Read lines in filename in this macro. void SaveSource(const char* filename); Save macro source in filename. void SavePrimitive(ostream& out, Option_t* option = """"); Save macro source on stream out. void SetParams(const char* params = 0); Set de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMacro.html:8291,log,log,8291,root/html528/TMacro.html,https://root.cern,https://root.cern/root/html528/TMacro.html,3,['log'],['log']
Testability,"ence. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classification Class ReferenceTMVA. ; Class to perform two class classification. ; The first step before any analysis is to prepare the data, to do that you need to create an object of TMVA::DataLoader, in this object you need to configure the variables and the number of events to train/test. The class TMVA::Experimental::Classification needs a TMVA::DataLoader object, optional a TFile object to save the results and some extra options in a string like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where: V = verbose output Color = coloured screen output Silent = batch mode: boolean silent flag inhibiting any output from TMVA Transformations = list of transformations to test. DrawProgressBar = draw progress bar to display training and testing. ModelPersistence = to save the trained model in xml or serialized files. Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method. Basic example. void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();; ; TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; ; // Register the training and test trees; ; TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");; ; TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");; ; dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');; ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Classification.html:1014,test,test,1014,doc/master/classTMVA_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html,1,['test'],['test']
Testability,"ences ; Definition at line 83 of file TSpectrum2Fit.h. ◆ fChi. Double_t TSpectrum2Fit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrum2Fit.h. ◆ fFitTaylor. Int_t TSpectrum2Fit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrum2Fit.h. ◆ fFixA0. Bool_t TSpectrum2Fit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:83308,log,logical,83308,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"enchmark(const TBenchmark& ); copy constructor. TBenchmark& operator=(const TBenchmark& ); assignment operator. ~TBenchmark(); Benchmark default destructor*-*-*-; *-* ============================. Int_t GetBench(const char* name) const; -*-*-*Returns index of Benchmark name; *-* ===============================. Float_t GetCpuTime(const char* name); -*-*-*Returns Cpu time used by Benchmark name; *-* =======================================. Float_t GetRealTime(const char* name); -*-*-*Returns Realtime used by Benchmark name; *-* =======================================. void Print(Option_t* name = """") const; -*Prints parameters of Benchmark name; *-* ===================================. void Reset(); -*Reset all Benchmarks; *-* ====================. void Show(const char* name); Stops Benchmark name and Prints results*-; *-* =======================================. void Start(const char* name); -*-*-*-*-*Starts Benchmark name; *-* =====================; -; *-* An independent timer (see class TStopwatch) is started.; *-* the name of the benchmark is entered into the list of benchmarks.; *-* Benchmark can be stopped via TBenchmark::Stop; *-* Results can be printed via TBenchmark::Print; *-* TBenchmark::Show can be used to stop benchmark and print results.; *-* If name is an already existing benchmark, existing parameters are reset.; *-* A summary of all benchmarks can be seen via TBenchmark::Summary.; -; *. void Stop(const char* name); Terminates Benchmark name*-; *-* =========================. void Summary(Float_t& rt, Float_t& cp); -*-*-*-*-*-*Prints a summary of all benchmarks; *-* ==================================. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TBenchmark.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2009-12-07 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBenchmark.html:7219,benchmark,benchmark,7219,root/html526/TBenchmark.html,https://root.cern,https://root.cern/root/html526/TBenchmark.html,6,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"enchmark(const TBenchmark& ); copy constructor. TBenchmark& operator=(const TBenchmark& ); assignment operator. ~TBenchmark(); Benchmark default destructor*-*-*-; *-* ============================. Int_t GetBench(const char* name) const; -*-*-*Returns index of Benchmark name; *-* ===============================. Float_t GetCpuTime(const char* name); -*-*-*Returns Cpu time used by Benchmark name; *-* =======================================. Float_t GetRealTime(const char* name); -*-*-*Returns Realtime used by Benchmark name; *-* =======================================. void Print(Option_t* name = """") const; -*Prints parameters of Benchmark name; *-* ===================================. void Reset(); -*Reset all Benchmarks; *-* ====================. void Show(const char* name); Stops Benchmark name and Prints results*-; *-* =======================================. void Start(const char* name); -*-*-*-*-*Starts Benchmark name; *-* =====================; -; *-* An independent timer (see class TStopwatch) is started.; *-* the name of the benchmark is entered into the list of benchmarks.; *-* Benchmark can be stopped via TBenchmark::Stop; *-* Results can be printed via TBenchmark::Print; *-* TBenchmark::Show can be used to stop benchmark and print results.; *-* If name is an already existing benchmark, existing parameters are reset.; *-* A summary of all benchmarks can be seen via TBenchmark::Summary.; -; *. void Stop(const char* name); Terminates Benchmark name*-; *-* =========================. void Summary(Float_t& rt, Float_t& cp); -*-*-*-*-*-*Prints a summary of all benchmarks; *-* ==================================. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TBenchmark.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2010-09-23 20:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBenchmark.html:7205,benchmark,benchmark,7205,root/html528/TBenchmark.html,https://root.cern,https://root.cern/root/html528/TBenchmark.html,6,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"enchmark(const TBenchmark& ); copy constructor. TBenchmark& operator=(const TBenchmark& ); assignment operator. ~TBenchmark(); Benchmark default destructor*-*-*-; *-* ============================. Int_t GetBench(const char* name) const; -*-*-*Returns index of Benchmark name; *-* ===============================. Float_t GetCpuTime(const char* name); -*-*-*Returns Cpu time used by Benchmark name; *-* =======================================. Float_t GetRealTime(const char* name); -*-*-*Returns Realtime used by Benchmark name; *-* =======================================. void Print(Option_t* name = """") const; -*Prints parameters of Benchmark name; *-* ===================================. void Reset(); -*Reset all Benchmarks; *-* ====================. void Show(const char* name); Stops Benchmark name and Prints results*-; *-* =======================================. void Start(const char* name); -*-*-*-*-*Starts Benchmark name; *-* =====================; -; *-* An independent timer (see class TStopwatch) is started.; *-* the name of the benchmark is entered into the list of benchmarks.; *-* Benchmark can be stopped via TBenchmark::Stop; *-* Results can be printed via TBenchmark::Print; *-* TBenchmark::Show can be used to stop benchmark and print results.; *-* If name is an already existing benchmark, existing parameters are reset.; *-* A summary of all benchmarks can be seen via TBenchmark::Summary.; -; *. void Stop(const char* name); Terminates Benchmark name*-; *-* =========================. void Summary(Float_t& rt, Float_t& cp); -*-*-*-*-*-*Prints a summary of all benchmarks; *-* ==================================. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TBenchmark.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBenchmark.html:7274,benchmark,benchmark,7274,root/html530/TBenchmark.html,https://root.cern,https://root.cern/root/html530/TBenchmark.html,6,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"enchmark(const TBenchmark& ); copy constructor. TBenchmark& operator=(const TBenchmark& ); assignment operator. ~TBenchmark(); Benchmark default destructor*-*-*-; *-* ============================. Int_t GetBench(const char* name) const; -*-*-*Returns index of Benchmark name; *-* ===============================. Float_t GetCpuTime(const char* name); -*-*-*Returns Cpu time used by Benchmark name; *-* =======================================. Float_t GetRealTime(const char* name); -*-*-*Returns Realtime used by Benchmark name; *-* =======================================. void Print(Option_t* name = """") const; -*Prints parameters of Benchmark name; *-* ===================================. void Reset(); -*Reset all Benchmarks; *-* ====================. void Show(const char* name); Stops Benchmark name and Prints results*-; *-* =======================================. void Start(const char* name); -*-*-*-*-*Starts Benchmark name; *-* =====================; -; *-* An independent timer (see class TStopwatch) is started.; *-* the name of the benchmark is entered into the list of benchmarks.; *-* Benchmark can be stopped via TBenchmark::Stop; *-* Results can be printed via TBenchmark::Print; *-* TBenchmark::Show can be used to stop benchmark and print results.; *-* If name is an already existing benchmark, existing parameters are reset.; *-* A summary of all benchmarks can be seen via TBenchmark::Summary.; -; *. void Stop(const char* name); Terminates Benchmark name*-; *-* =========================. void Summary(Float_t& rt, Float_t& cp); -*-*-*-*-*-*Prints a summary of all benchmarks; *-* ==================================. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TBenchmark.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBenchmark.html:7274,benchmark,benchmark,7274,root/html532/TBenchmark.html,https://root.cern,https://root.cern/root/html532/TBenchmark.html,6,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"end class CrossValidation;; 114 friend class Factory;; 115 friend class RootFinder;; 116 friend class MethodBoost;; 117 friend class MethodCrossValidation;; 118 friend class Experimental::Classification;; 119 ; 120 public:; 121 ; 122 enum EWeightFileType { kROOT=0, kTEXT };; 123 ; 124 // default constructor; 125 MethodBase( const TString& jobName,; 126 Types::EMVA methodType,; 127 const TString& methodTitle,; 128 DataSetInfo& dsi,; 129 const TString& theOption = """" );; 130 ; 131 // constructor used for Testing + Application of the MVA, only (no training),; 132 // using given weight file; 133 MethodBase( Types::EMVA methodType,; 134 DataSetInfo& dsi,; 135 const TString& weightFile );; 136 ; 137 // default destructor; 138 virtual ~MethodBase();; 139 ; 140 // declaration, processing and checking of configuration options; 141 void SetupMethod();; 142 void ProcessSetup();; 143 virtual void CheckSetup(); // may be overwritten by derived classes; 144 ; 145 // ---------- main training and testing methods ------------------------------; 146 ; 147 // prepare tree branch with the method's discriminating variable; 148 void AddOutput( Types::ETreeType type, Types::EAnalysisType analysisType );; 149 ; 150 // performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // store and retrieve time used for testing; 165 void SetTestTime ( Double_t testTime ) { fTestTime = testTime; }; 166 Double_t GetTestTime () const { return fTestTime; }; 167 ; 168 // performs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:4803,test,testing,4803,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['test'],['testing']
Testability,"end_mbLegend for profiles mbs; TProfile*fProfile_cpu_eff; TProfile*fProfile_perfstat_IO; TProfile*fProfile_perfstat_IOmax; TProfile*fProfile_perfstat_event; TProfile*fProfile_perfstat_evtmax; TProfile*fProfile_queryresult_IO; TProfile*fProfile_queryresult_event; TProof*fProofpointer to proof; TPBReadType*fReadTyperead type; Bool_tfReleaseCacheRelease cache for data reads between runs; Int_tfStartstart number of workers; Int_tfSteptest to be performed every fStep workers; Int_tfStopstop number of workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofBenchRunDataRead(TProofBenchDataSet* pbds, TPBReadType* readtype = 0, TDirectory* dirproofbench = 0, TProof* proof = 0, TProofNodes* nodes = 0, Long64_t nevents = -1, Int_t ntries = 2, Int_t start = 1, Int_t stop = -1, Int_t step = 1, Int_t debug = 0). ~TProofBenchRunDataRead(); Destructor. void Run(const char* dset, Int_t start, Int_t stop, Int_t step, Int_t ntries, Int_t debug, Int_t ); Run benchmark; Input parameters; dset: Dataset on which to run; start: Start scan with 'start' workers.; stop: Stop scan at 'stop workers.; step: Scan every 'step' workers.; ntries: Number of tries. When it is -1, data member fNTries is used.; debug: debug switch.; Int_t: Ignored; Returns; Nothing. TFileCollection * GetDataSet(const char* dset, Int_t nact, Bool_t nx); Get a subsample of dsname suited to run with 'nact' and option 'nx'. void FillPerfStatProfiles(TTree* t, Int_t nactive). void Print(Option_t* option = """") const; Print the content of this object. void DrawPerfProfiles(); Get canvas. TString GetNameStem() const; Get name for this run. Int_t SetParameters(); Set parameters. Int_t DeleteParameters(); Delete parameters set for this run. void BuildHistos(Int_t start, Int_t stop, Int_t step, Bool_t nx); Build histograms, profiles and graphs needed for this run. TProofBenchRunDataRead(TProofBenchDataSet* pbds, TPBReadType* readtype = 0, TDirectory* dirproofbench = 0, TProof* proo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofBenchRunDataRead.html:9521,benchmark,benchmark,9521,root/html602/TProofBenchRunDataRead.html,https://root.cern,https://root.cern/root/html602/TProofBenchRunDataRead.html,2,['benchmark'],['benchmark']
Testability,"endent of; ; ) quantities . For each component ; make a mutlidimensional fit,; using ; as the variables, thus determing a set of; coefficents ; .; . To process data, using this parameterisation, do; ; Test wether the observation ; within the domain of; the parameterization, using the result from the Principal Component; Analysis.; ; Determine ; as before.; ; Detetmine ; as before.; ; Use the result of the fit to determind ; .; ; Transform back to ; from ; , using; the result from the Principal Component Analysis.; . Testing the parameterization; . The class also provides functionality for testing the, over the; training sample, found parameterization; (TMultiDimFit::Fit). This is done by passing; the class a test sample of tuples of the form ; , where ; are the independent; variables, the known, dependent quantity, and is; the square error in ; (TMultiDimFit::AddTestRow).; ; The parameterization is then evaluated at every ; in the; test sample, and; . is evaluated. The relative error over the test sample; . should not be to low or high compared to from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representive of; the problem. A large difference in the reduced over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced.; ; It's possible to use Minuit; [4] to further improve the fit, using the test sample.; . Christian Holm; November 2000, NBI; . Bibliography; 1. Philip R. Bevington and D. Keith Robinson.; Data Reduction and Error Analysis for the Physical Sciences.; McGraw-Hill, 2 edition, 1992.; 2. René Brun et al.; Mudifi.; Long writeup DD/75-23, CERN, 1980.; 3. Gene H. Golub and Charles F. van Loan.; Matrix Computations.; John Hopkins Univeristy Press, Baltimore, 3 edition, 1996.; 4. F. James.; Minuit.; Long writeup D506, CERN, 1998.; 5. H. Wind.; Function parameterization.; In Proceedings of the 1972 CERN Computi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:12320,test,test,12320,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['test'],['test']
Testability,"enderSelTransp(TGLRnrCtx& rnrCtx); Render selected transparent elements. void RenderSelOpaqueForHighlight(TGLRnrCtx& rnrCtx); Render selected opaque elements for highlight. void RenderSelTranspForHighlight(TGLRnrCtx& rnrCtx); Render selected transparent elements for highlight. void RenderHighlight(TGLRnrCtx& rnrCtx, TGLScene::DrawElementPtrVec_t& elVec). void PostDraw(TGLRnrCtx& rnrCtx); Called after the rendering is finished.; In debug mode draw statistcs is dumped.; Parent's PostDraw is called for GL cleanup. void RenderAllPasses(TGLRnrCtx& rnrCtx, TGLScene::DrawElementPtrVec_t& elVec, Bool_t check_timeout); Do full rendering of scene. First draw the opaques, then the transparents. For each we do; the number of passes required by draw mode and clipping setup. void RenderElements(TGLRnrCtx& rnrCtx, TGLScene::DrawElementPtrVec_t& elVec, Bool_t check_timeout, const TGLPlaneSet_t* clipPlanes = 0); Render DrawElements in elementVec with given timeout.; If clipPlanes is non-zero, test each element against its; clipping planes. Bool_t ResolveSelectRecord(TGLSelectRecord& rec, Int_t curIdx); Process selection record rec.; 'curIdx' is the item position where the scene should start; its processing.; Return TRUE if an object has been identified or FALSE otherwise.; The scene-info member of the record is already set by the caller. void CalcBoundingBox() const; Encapsulates all physical shapes bounding box with axes aligned box.; Validity checked in the base-class. void AdoptLogical(TGLLogicalShape& shape); Adopt dynamically created logical 'shape' - add to internal map; and take responsibility for deleting. Bool_t DestroyLogical(TObject* logid, Bool_t mustFind = kTRUE); Destroy logical shape defined by unique 'ID'.; Returns kTRUE if found/destroyed - kFALSE otherwise. If mustFind is true, an error is reported if the logical is not; found. Int_t DestroyLogicals(); Destroy all logical shapes in scene.; Return number of destroyed logicals. TGLLogicalShape * FindLogical(TObject* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLScene.html:10668,test,test,10668,root/html534/TGLScene.html,https://root.cern,https://root.cern/root/html534/TGLScene.html,3,['test'],['test']
Testability,"ending events are removed.; // This may effectively create a false minimum in problem areas. This is clearly; // illustrated in the second plot; ; m0.setError(0.1);; argus.fitTo(*data, PrintEvalErrors(0), EvalErrorWall(false));; ; // P l o t l i k e l i h o o d a s f u n c t i o n o f m 0; // ------------------------------------------------------------------; ; // Construct likelihood function of model and data; std::unique_ptr<RooAbsReal> nll{argus.createNLL(*data)};; ; // Plot likelihood in m0 in range that includes problematic values; // In this configuration no messages are printed for likelihood evaluation errors,; // but if an likelihood value evaluates with error, the corresponding value; // on the curve will be set to the value given in EvalErrorValue().; ; RooPlot *frame2 = m0.frame(Range(5.288, 5.293), Title(""-log(L) scan vs m0, problematic regions masked""));; nll->plotOn(frame2, PrintEvalErrors(-1), ShiftToZero(), EvalErrorValue(nll->getVal() + 10), LineColor(kRed));; frame2->SetMaximum(15);; frame2->SetMinimum(0);; ; TCanvas *c = new TCanvas(""rf606_nllerrorhandling"", ""rf606_nllerrorhandling"", 1200, 400);; c->Divide(2);; c->cd(1);; gPad->SetLeftMargin(0.15);; frame1->GetYaxis()->SetTitleOffset(1.4);; frame1->Draw();; c->cd(2);; gPad->SetLeftMargin(0.15);; frame2->GetYaxis()->SetTitleOffset(1.4);; frame2->Draw();; }; c#define c(i)Definition RSha256.hxx:101; RooArgusBG.h; RooDataSet.h; RooPlot.h; RooRealVar.h; kRed@ kRedDefinition Rtypes.h:66; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; gPad#define gPadDefinition TVirtualPad.h:308; RooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape.Definition RooArgusBG.h:22; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:3114,log,log,3114,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,1,['log'],['log']
Testability,"endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30534,log,log,30534,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['log']
Testability,"ene update mode. If sceneChanged is true (default), the scene timestamp is; increased and basic draw-lists etc will be rebuild on next draw; request. If you only changed colors or some other visual; parameters that do not affect object bounding-box or; transformation matrix, you can set it to false. If updateViewers is true (default), the viewers using this scene; will be tagged as changed. If sceneChanged is true the; updateViewers should be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:13168,log,logid,13168,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,8,['log'],"['logical', 'logid']"
Testability,"ene update mode. If sceneChanged is true (default), the scene timestamp is; increased and basic draw-lists etc will be rebuild on next draw; request. If you only changed colors or some other visual; parameters that do not affect object bounding-box or; transformation matrix, you can set it to false. If updateViewers is true (default), the viewers using this scene; will be tagged as changed. If sceneChanged is true the; updateViewers should be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t[4] rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:13805,log,logid,13805,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,4,['log'],"['logical', 'logid']"
Testability,"ens 'focal length'. Returns kTRUE is redraw required (camera change), kFALSE otherwise. void SetZoomMin(Double_t z); Set minimum zoom factor. If current zoom is less than z it is; set to z. void SetZoomMax(Double_t z); Set maximum zoom factor. If current zoom is greater than z it; is set to z. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Rotate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Rotate the camera - 'swivel round the view volume center'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - ignored for ortho camera. Assumed to be same; as one passed to Setup().; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; zoom - set directly (default = 0.78);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsOrthographic() const; { return kTRUE; }. void SetEnableRotate(Bool_t x); { fEnableRotate = x; }. Bool_t GetEnableRotate() const; { return fEnableRotate; }. Double_t GetZoomMin() const; { return fZoomMin; }. Double_t GetZoomMax() const; { return fZoomMax; }. void SetZoomMinMax(Double_t min, Double_t max); { SetZoomMin(min); SetZo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLOrthoCamera.html:9783,test,tests,9783,root/html528/TGLOrthoCamera.html,https://root.cern,https://root.cern/root/html528/TGLOrthoCamera.html,4,['test'],['tests']
Testability,"ens 'focal length'. Returns kTRUE is redraw required (camera change), kFALSE otherwise. void SetZoomMin(Double_t z); Set minimum zoom factor. If current zoom is less than z it is; set to z. void SetZoomMax(Double_t z); Set maximum zoom factor. If current zoom is greater than z it; is set to z. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Rotate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Rotate the camera - 'swivel round the view volume center'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - ignored for ortho camera. Assumed to be same; as one passed to Setup().; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t zoom, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); Configure the camera state.; zoom - set directly (default = 0.78);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. TGLOrthoCamera(). Bool_t IsOrthographic() const; { return kTRUE; }. void SetEnableRotate(Bool_t x); { fEnableRotate = x; }. Bool_t GetEnableRotate() const; { return fEnableRotate; }. Double_t GetZoomMin() const; { return fZoomMin; }. Double_t GetZoomMax() const; { return fZoomMax; }. void SetZoomMinMax(Double_t min, Double_t max); { Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLOrthoCamera.html:15550,test,tests,15550,root/html602/TGLOrthoCamera.html,https://root.cern,https://root.cern/root/html602/TGLOrthoCamera.html,2,['test'],['tests']
Testability,"ensional distribution object defined by TUnuranDiscrDist; using an empirical distribution defined by TUnuranEmpDist; using pre-defined distributions. Presently only support for Poisson (TUnuran::InitPoisson) and Binomial (TUnuran::InitBinomial) are provided. Other distributions can however be generated using the previous methods (in particular via the string API). The sampling is provided via these methods:; TUnuran::Sample() returns a double for all one-dimensional distribution; TUnuran::SampleDiscr() returns an integer for one-dimensional discrete distribution; TUnuran::Sample(double *) sample a multi-dimensional distribution. A pointer to a vector with size at least equal to the distribution dimension must be passed. In addition is possible to set the random number generator in the constructor of the class, its seed via the TUnuran::SetSeed() method. ; Definition at line 79 of file TUnuran.h. Public Member Functions;  TUnuran (const TUnuran &)=delete;  ;  TUnuran (TRandom *r=nullptr, unsigned int log=0);  Constructor with a generator instance and given level of log output. ;  ;  TUnuran (TUnuran &&)=delete;  ;  ~TUnuran ();  Destructor. ;  ; int GetDimension () const;  Return the dimension of unuran generator method. ;  ; int GetDistType () const;  Return the type of the distribution. ;  ; std::string GetGenId () const;  Return an ID string about the unuran generator method. ;  ; std::string GetInfo (bool extended=false);  Return an information string about the used Unuran generator method. ;  ; TRandom * GetRandom ();  Return instance of the random engine used. ;  ; bool Init (const std::string &distr, const std::string &method);  Initialize with Unuran string API interface. ;  ; bool Init (const TUnuranContDist &distr, const std::string &method=""auto"");  Initialize method for continuous one-dimensional distribution. ;  ; bool Init (const TUnuranDiscrDist &distr, const std::string &method=""auto"");  Initialize method for continuous one-dimensional discrete distri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuran.html:1891,log,log,1891,doc/master/classTUnuran.html,https://root.cern,https://root.cern/doc/master/classTUnuran.html,2,['log'],['log']
Testability,"ent ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:137117,test,test,137117,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['test'],['test']
Testability,"ent = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated a branch; object and is asking us to use it. The caller owns it; and must delete it when it is no longer needed. Example:. Event* event = new Event();; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. These rules affect users of TTree::Branch(),; TTree::SetBranchAddress(), and TChain::SetBranchAddress(); as well because those routines call this one. An example of a tree with branches with objects allocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone(0);; for (Int_t i = 0; i < 10; ++i) {; t1->GetEntry(i);; t2->Fill();; }; t2->Write(); delete f2;; f2 = 0;; delete f1;; f1 = 0;. An example of a branch with an object allocated by us,; but owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = 0;; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. Notice that the only difference between this example; and the following example is that the event pointer; is zero when the branch is created. An example of a branch with an object allocated and; owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = new Event();; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. If AutoDelete is on (see TBranch::SetAutoDelete),; the top level objet will be deleted and recreate; each time an entry is read, whether or not the; TTree owns the object. void SetBasketSiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:25547,test,test,25547,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,7,['test'],['test']
Testability,"ent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::PDEFoamDiscriminant; UInt_t fClass;  ;  Protected Attributes inherited from TMVA::PDEFoam; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILITY: split cells according to decision tree logic. ;  ; Int_t fEvPerBin;  Maximum number of effective (wt=1) events per bin. ;  ; Bool_t fFillFoamWithOrigWeights;  BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ;  ; EFoamType fFoamType;  BACKWARDS COMPATIBILITY: type of foam. ;  ; TObjArray * fHistEdg;  Histograms of wt, one for each cell edge. ;  ; Int_t * fInhiDiv;  ! [fDim] Flags for inhibiting cell division ;  ; Int_t fLastCe;  Index of the last cell. ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t * fMaskDiv;  ! [fDim] Dynamic Mask for cell division ;  ; UInt_t fMaxDepth;  maximum depth of cell tree ;  ; TString fName;  Name of a given instance of the FOAM class. ;  ; Int_t fNBin;  No. of bins in the edge histogram for cell MC exploration. ;  ; Int_t fNCells;  Maximum number of cells. ;  ; UInt_t fNElements;  BACKWARDS COMPATIBILITY: number of variables in every cell. ;  ; UInt_t fNmin;  minimal number of events in c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html:18102,log,logic,18102,doc/master/classTMVA_1_1PDEFoamDecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html,1,['log'],['logic']
Testability,"ent a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:4628,test,test,4628,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['test'],['test']
Testability,"ent is the type of polynomials to use in; parameterisation, one of:; TMultiDimFit::kMonomials; TMultiDimFit::kChebyshev; TMultiDimFit::kLegendre. Options:; K Compute (k)correlation matrix; V Be verbose. Default is no options. ~TMultiDimFit(); Destructor. void AddRow(const Double_t* x, Double_t D, Double_t E = 0); Add a row consisting of fNVariables independent variables, the; known, dependent quantity, and optionally, the square error in; the dependent quantity, to the training sample to be used for the; parameterization.; The mean of the variables and quantity is calculated on the fly,; as outlined in TPrincipal::AddRow.; This sample should be representive of the problem at hand.; Please note, that if no error is given Poisson statistics is; assumed and the square error is set to the value of dependent; quantity. See also the; class description. void AddTestRow(const Double_t* x, Double_t D, Double_t E = 0); Add a row consisting of fNVariables independent variables, the; known, dependent quantity, and optionally, the square error in; the dependent quantity, to the test sample to be used for the; test of the parameterization.; This sample needn't be representive of the problem at hand.; Please note, that if no error is given Poisson statistics is; assumed and the square error is set to the value of dependent; quantity. See also the; class description. void Browse(TBrowser* b); Browse the TMultiDimFit object in the TBrowser. void Clear(Option_t* option = """"); Clear internal structures and variables. Double_t Eval(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalError(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization error at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalControl(const Int_t* po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:26203,test,test,26203,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,12,['test'],['test']
Testability,"ent when all classes in the class hierarchy that overload; 321/// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 322/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 323 ; 324inline ULong_t TObject::CheckedHash(); 325{; 326 // Testing and recording whether we already called HasInconstistentTObjectHash; 327 // for this object could save some cpu cycles in some circuntances (at the cost; 328 // of reserving yet another bit).; 329 // For each insert (CheckedHash is called only for insert in THashList/THashTable), it; 330 // cost one memory fetch, one arithmetic operation and one branching.; 331 // This save a virtual function call which itself contains a static variable memory; 332 // fetch, a branching (of whether the static was already set or not).; 333 // Given that a virtual function call is essentially 2 memory fetches (virtual table; 334 // location and then content), one arithmetic operation and one function call/jump),; 335 // we guess-estimate that the version recording-then-testing-prior-check would start; 336 // saving cpu cycle when each object is inserted in average 1.5 times in a THashList/THashTable.; 337 ; 338 // if ( !fBits & kCheckedHash) {; 339 if (!CheckTObjectHashConsistency()); 340 fBits |= kInconsistent;; 341 // fBits &= kChecked;; 342 //}; 343 return Hash();; 344}; 345 ; 346////////////////////////////////////////////////////////////////////////////////; 347/// @brief Return true is the type of this object is *known* to have an; 348/// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; 349/// RecursiveRemove in destructor).; 350///; 351/// Note: Since the consistency is only tested for during inserts, this; 352/// routine will return true for object that have never been inserted; 353/// whether or not they have a consistent setup. This has no negative; 354/// side-effect as searching for the object with the right or wrong; 355/// Hash will always yield ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:14362,test,testing-prior-check,14362,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['test'],['testing-prior-check']
Testability,"ent)Hide tool tip depending on the event type.Definition TPad.cxx:2847; TPad::fAbsYlowNDCDouble_t fAbsYlowNDCAbsolute Y top left corner of pad in NDC [0,1].Definition TPad.h:70; TPad::fXtoAbsPixelkDouble_t fXtoAbsPixelkConversion coefficient for X World to absolute pixel.Definition TPad.h:41; TPad::SetAttMarkerPSvoid SetAttMarkerPS(Color_t color, Style_t style, Size_t msize) overrideSet postscript marker attributes.Definition TPad.cxx:6227; TPad::DivideSquarevirtual void DivideSquare(Int_t n, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0)""n"" is the total number of sub-pads.Definition TPad.cxx:1341; TPad::AbsCoordinatesvoid AbsCoordinates(Bool_t set) overrideDefinition TPad.h:167; TPad::AbsPixeltoYDouble_t AbsPixeltoY(Int_t py) overrideDefinition TPad.h:169; TPad::IsBatchBool_t IsBatch() const overrideIs pad in batch mode ?Definition TPad.cxx:2856; TPad::GetUymaxDouble_t GetUymax() const overrideReturns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decad...Definition TPad.h:234; TPad::AddExecvoid AddExec(const char *name, const char *command) overrideAdd a new TExec object to the list of Execs.Definition TPad.cxx:498; TPad::SetViewer3Dvoid SetViewer3D(TVirtualViewer3D *viewer3d) overrideDefinition TPad.h:364; TPad::fWNDCDouble_t fWNDCWidth of pad along X in Normalized Coordinates (NDC)Definition TPad.h:66; TPad::SetNamevoid SetName(const char *name) overrideDefinition TPad.h:353; TPad::NextPaletteColorInt_t NextPaletteColor() overrideGet the next autocolor in the pad.Definition TPad.cxx:3118; TPad::VtoPixelInt_t VtoPixel(Double_t v) const overrideConvert Y NDC to pixel.Definition TPad.cxx:7446; TPad::PaintBordervoid PaintBorder(Color_t color, Bool_t tops)Paint the pad border.Definition TPad.cxx:3644; TPad::GetPhiDouble_t GetPhi() const overrideDefinition TPad.h:225; TPad::IsEditableBool_t IsEditable() const overrideDefinition TPad.h:272; TPad::FillCollideGridvoid FillCollideGrid(TObject *o)Initialise the grid used",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:31213,log,log,31213,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['log'],['log']
Testability,ent* TMVA::VariableTransformBase::fBackTransformedEvent. mutableprotected . holds the current back-transformed event ; Definition at line 140 of file VariableTransformBase.h. ◆ fCreated. Bool_t TMVA::VariableTransformBase::fCreated. private . has been created ; Definition at line 154 of file VariableTransformBase.h. ◆ fDsi. DataSetInfo& TMVA::VariableTransformBase::fDsi. protected . Definition at line 130 of file VariableTransformBase.h. ◆ fDsiOutput. DataSetInfo* TMVA::VariableTransformBase::fDsiOutput. protected . Definition at line 131 of file VariableTransformBase.h. ◆ fEnabled. Bool_t TMVA::VariableTransformBase::fEnabled. private . has been enabled ; Definition at line 153 of file VariableTransformBase.h. ◆ fGet. VectorOfCharAndInt TMVA::VariableTransformBase::fGet. protected . get variables/targets/spectators ; Definition at line 143 of file VariableTransformBase.h. ◆ fLogger. MsgLogger* TMVA::VariableTransformBase::fLogger. mutableprotected . ! message logger ; Definition at line 174 of file VariableTransformBase.h. ◆ fNormalise. Bool_t TMVA::VariableTransformBase::fNormalise. private . normalise input variables ; Definition at line 155 of file VariableTransformBase.h. ◆ fNSpectators. UInt_t TMVA::VariableTransformBase::fNSpectators. mutableprivate . number of spectators to be transformed ; Definition at line 165 of file VariableTransformBase.h. ◆ fNTargets. UInt_t TMVA::VariableTransformBase::fNTargets. mutableprivate . number of targets to be transformed ; Definition at line 164 of file VariableTransformBase.h. ◆ fNVariables. UInt_t TMVA::VariableTransformBase::fNVariables. mutableprivate . number of variables to be transformed ; Definition at line 163 of file VariableTransformBase.h. ◆ fNVars. UInt_t TMVA::VariableTransformBase::fNVars. private . number of variables ; Definition at line 156 of file VariableTransformBase.h. ◆ fPut. VectorOfCharAndInt TMVA::VariableTransformBase::fPut. protected . put variables/targets/spectators ; Definition at line 144 of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html:29745,log,logger,29745,doc/master/classTMVA_1_1VariableTransformBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html,1,['log'],['logger']
Testability,"ent*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2PdfBinding<double,unsigned int,double>&operator=(const RooCFunction2PdfBinding<double,unsigned int,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_unsigned_int_double_.html:23794,test,testArg,23794,root/html602/RooCFunction2PdfBinding_double_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_unsigned_int_double_.html,2,['test'],['testArg']
Testability,"ent< Architecture_t >::StepReducedWeightsLoss ; (; Net_t & ; net, . Matrix_t & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ); -> Scalar_t. inline . Definition at line 642 of file Minimizers.h. ◆ Train() [1/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . auto TMVA::DNN::TGradientDescent< Architecture_t >::Train ; (; const Data_t & ; trainingData, . size_t ; nTrainingSamples, . const Data_t & ; testData, . size_t ; nTestSamples, . Net_t & ; net, . size_t ; nThreads . ); -> Scalar_t. Definition at line 196 of file Minimizers.h. ◆ Train() [2/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::Train ; (; const Data_t & ; TrainingDataIn, . size_t ; nTrainingSamples, . const Data_t & ; TestDataIn, . size_t ; nTestSamples, . Net_t & ; net, . size_t ; nThreads = 1 . ). Train the given net using the given training input data (events), training output data (labels), test input data (events), test output data (labels). . ◆ TrainMomentum() [1/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . auto TMVA::DNN::TGradientDescent< Architecture_t >::TrainMomentum ; (; const Data_t & ; trainingData, . size_t ; nTrainingSamples, . const Data_t & ; testData, . size_t ; nTestSamples, . Net_t & ; net, . Scalar_t ; momentum, . size_t ; nThreads . ); -> Scalar_t. Definition at line 259 of file Minimizers.h. ◆ TrainMomentum() [2/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::TrainMomentum ; (; const Data_t & ; TrainingDataIn, . size_t ; nTrainingSamples, . const Data_t & ; TestDataIn, . size_t ; nTestSamples, . Net_t & ; net, . Scalar_t ; momentum, . size_t ; nThreads = 1 . ). Same as Train(...) but uses the given momentum. . Member Data Documentation. ◆ fBatchSize. template<typename Architecture_t > . size_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:13685,test,test,13685,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,2,['test'],['test']
Testability,"entLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input and output layers. ; The formulas associated to each neuron are created and reported to the network formula manager. By default, the branch is not normalised since this would degrade performance for classification jobs. Normalisation can be requested by putting '@' in front of the formula. ; Definition at line 1266 of file TMultiLayerPerce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:33168,test,test,33168,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability,"entation. ◆ CSPart_t. typedef std::pair<UInt_t, RootCsg::TBaseMesh*> TGLScenePad::CSPart_t. protected . Definition at line 48 of file TGLScenePad.h. Constructor & Destructor Documentation. ◆ TGLScenePad() [1/2]. TGLScenePad::TGLScenePad ; (; const TGLScenePad & ; ). privatedelete . ◆ TGLScenePad() [2/2]. TGLScenePad::TGLScenePad ; (; TVirtualPad * ; pad). cache logicals during scene rebuilds ; Definition at line 51 of file TGLScenePad.cxx. ◆ ~TGLScenePad(). TGLScenePad::~TGLScenePad ; (; ). inlineoverride . Definition at line 60 of file TGLScenePad.h. Member Function Documentation. ◆ AddCompositeOp(). void TGLScenePad::AddCompositeOp ; (; UInt_t ; operation). overridevirtual . Add composite operation used to combine objects added via AddObject TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ; Implements TVirtualViewer3D.; Definition at line 528 of file TGLScenePad.cxx. ◆ AddHistoPhysical(). void TGLScenePad::AddHistoPhysical ; (; TGLLogicalShape * ; log, . const Float_t * ; histColor = nullptr . ). Scale and rotate a histo object to mimic placement in canvas. ; Definition at line 75 of file TGLScenePad.cxx. ◆ AddObject() [1/2]. Int_t TGLScenePad::AddObject ; (; const TBuffer3D & ; buffer, . Bool_t * ; addChildren = nullptr . ). overridevirtual . Add an object to the viewer, using internal physical IDs TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ; Implements TVirtualViewer3D.; Definition at line 329 of file TGLScenePad.cxx. ◆ AddObject() [2/2]. Int_t TGLScenePad::AddObject ; (; UInt_t ; physicalID, . const TBuffer3D & ; buffer, . Bool_t * ; addChildren = nullptr . ). overridevirtual . Add an object to the scene, using an external physical ID TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ; Implements TVirtualViewer3D.; Definition at line 342 of file TGLScenePad.cxx. ◆ Attemp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:25896,log,log,25896,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['log'],['log']
Testability,"ented from TSystem.; Definition at line 1184 of file TUnixSystem.cxx. ◆ StackTrace(). void TUnixSystem::StackTrace ; (; ). overridevirtual . Print a stack trace. ; Reimplemented from TSystem.; Definition at line 2281 of file TUnixSystem.cxx. ◆ Streamer(). void TUnixSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TSystem. ◆ StreamerNVirtual(). void TUnixSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 219 of file TUnixSystem.h. ◆ Symlink(). int TUnixSystem::Symlink ; (; const char * ; from, . const char * ; to . ). overridevirtual . Create a symlink from file1 to file2. ; Returns 0 when successful, -1 in case of failure. ; Reimplemented from TSystem.; Definition at line 1695 of file TUnixSystem.cxx. ◆ Syslog(). void TUnixSystem::Syslog ; (; ELogLevel ; level, . const char * ; mess . ). overridevirtual . Send mess to syslog daemon. ; Level is the logging level and mess the message that will be written on the log. ; Reimplemented from TSystem.; Definition at line 2654 of file TUnixSystem.cxx. ◆ TempDirectory(). const char * TUnixSystem::TempDirectory ; (; ); const. overridevirtual . Return a user configured or systemwide directory to create temporary files in. ; Reimplemented from TSystem.; Definition at line 1503 of file TUnixSystem.cxx. ◆ TempFileName(). FILE * TUnixSystem::TempFileName ; (; TString & ; base, . const char * ; dir = nullptr, . const char * ; suffix = nullptr . ). overridevirtual . Create a secure temporary file by appending a unique 6 letter string to base. ; The file will be created in a standard (system) directory or in the directory provided in dir. Optionally one can provide suffix append to the final name - like extension "".txt"" or "".html"". The full filename is returned in base and a filepointer is returned for safely writing to the file (this avoids certain security problems). Returns 0 in case of error. ; Reimplemented from TSyst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:70128,log,logging,70128,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,2,['log'],"['log', 'logging']"
Testability,"ented in TGLOrthoCamera, and TGLPerspectiveCamera.; Definition at line 894 of file TGLCamera.cxx. ◆ Truck() [2/2]. virtual Bool_t TGLCamera::Truck ; (; Int_t ; xDelta, . Int_t ; yDelta, . Bool_t ; mod1, . Bool_t ; mod2 . ). pure virtual . Implemented in TGLOrthoCamera, TGLPerspectiveCamera, TGLOrthoCamera, and TGLPerspectiveCamera. ◆ UpdateCache(). void TGLCamera::UpdateCache ; (; ); const. protected . largest box diagonal seen in OfInterest() - used when bootstrapping interest box ; Update internally cached frustum values. ; Definition at line 108 of file TGLCamera.cxx. ◆ UpdateInterest(). Bool_t TGLCamera::UpdateInterest ; (; Bool_t ; force). Update the internal interest box (fInterestBox) of the camera. ; The interest box is an orientated bounding box, calculated as an expanded container round the frustum. It is used to test if if object bounding boxes are of interest (should be accepted into viewer scene) for a camera - see TGLCamera::OfInterest(); The interest box is updated if the frustum is no longer contained in the existing one, or a new one calculated on the current frustum differs significantly in volume (camera has been zoomed/dollyed sizable amount).; If the interest box is updated we return kTRUE - kFALSE otherwise. ; Definition at line 643 of file TGLCamera.cxx. ◆ ViewportDeltaToWorld(). TGLVector3 TGLCamera::ViewportDeltaToWorld ; (; const TGLVertex3 & ; worldRef, . Double_t ; viewportXDelta, . Double_t ; viewportYDelta, . TGLMatrix * ; modviewMat = nullptr . ); const. Apply a 2D viewport delta (shift) to the projection of worldRef onto viewport, returning the resultant world vector which equates to it. ; Useful for making 3D world objects track mouse moves.; Camera must have valid frustum cache - call Apply() ; Definition at line 546 of file TGLCamera.cxx. ◆ ViewportOverlap(). Rgl::EOverlap TGLCamera::ViewportOverlap ; (; const TGLBoundingBox & ; box); const. Calculate overlap (kInside, kOutside, kPartial) of box projection onto viewport (as rect) ag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLCamera.html:33501,test,test,33501,doc/master/classTGLCamera.html,https://root.cern,https://root.cern/doc/master/classTGLCamera.html,1,['test'],['test']
Testability,"entistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:2731,test,test,2731,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,2,['test'],['test']
Testability,"ently active monitor; TDSet*fDSetcurrent TDSet being validated; Int_tfDrawQueriesnumber of draw queries during this sessions; TList*fEnabledPackagesOnClientlist of packages enabled on client; Bool_tfEndMastertrue for a master in direct contact only with workers; TList*fFeedbacklist of names to be returned as feedback; TProof::FileMap_tfFileMapmap keeping track of a file's md5 and mod time; Bool_tfFinalizationRunning; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupPROOF group of this user; TList*fInactiveSlaveslist of inactive slaves (good but not used for processing); TList*fInputDataInput data objects sent over via file; TStringfInputDataFileFile with input data objects; TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfIsPollingWorkerswill be set to kFALSE to prevent recursive dyn workers check in dyn mode; Bool_tfIsWaitingtrue if queries have been enqueued; Int_tfLastAssignedMerger; Long64_tfLastPollWorkers_stimestamp (in seconds) of last poll for workers, -1 if never checked; TList*fLoadedMacrosList of loaded macros (just file names); TStringfLogFileNamename of the temp file for redirected logs; FILE*fLogFileRtemp file to read redirected logs; FILE*fLogFileWtemp file to redirect logs; Int_tfLogLevelserver debug logging level; Bool_tfLogToWindowOnlysend log to window only; TMacrofMacroLogMacro with the saved (last) log; TStringfMastermaster server ("""" if a master); used in the browser; Int_tfMaxDrawQueriesmax number of draw queries kept; TProofMergePrgfMergePrgMerging progress; TList*fMergers; Bool_tfMergersByHostMergers assigned by host name; Int_tfMergersCount; Bool_tfMergersSetIndicates, if the following variables have been initialized properly; TList*fNonUniqueMasterslist of all active masters with a nonunique file system; Int_tfNotIdleNumber of non-idle sub-nodes; Int_tfOtherQueriesnumber of queries in list from previous sessions; TProofOutputListfOutputListTList implementation filtering ls(.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:31963,log,logs,31963,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,6,['log'],"['log', 'logging', 'logs']"
Testability,"entries.Definition TLegend.h:23; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPad::SetGridxvoid SetGridx(Int_t value=1) overrideDefinition TPad.h:336; TPad::SetGridyvoid SetGridy(Int_t value=1) overrideDefinition TPad.h:337; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetStatXvoid SetStatX(Float_t x=0)Definition TStyle.h:397; TStyle::SetStatWvoid SetStatW(Float_t w=0.19)Definition TStyle.h:399; TStyle::SetStatYvoid SetStatY(Float_t y=0)Definition TStyle.h:398; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; leglegDefinition legend1.C:34; H#define H(x, y, z); TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::TanDouble_t Tan(Double_t)Returns the tangent of an angle of x radians.Definition TMath.h:600; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; surfacesDefinition surfaces.py:1; AuthorOlivier Couet ; Definition in file th2polyEurope.C. tutorialshistth2polyEurope.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/th2polyEurope_8C.html:9310,log,logarithm,9310,doc/master/th2polyEurope_8C.html,https://root.cern,https://root.cern/doc/master/th2polyEurope_8C.html,1,['log'],['logarithm']
Testability,ents and fill histograms with classifier response...; : ; <HEADER> TFHandler_Likelihood : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.014081 1.2910 [ -5.3119 4.5609 ]; : var2: -0.014399 1.3299 [ -4.7537 4.6723 ]; : var3: -0.027971 1.3779 [ -5.2892 4.7007 ]; : var4: 0.12966 1.4883 [ -5.1002 4.9767 ]; : -----------------------------------------------------------; <HEADER> Factory : Evaluate classifier: FisherCat; : ; <HEADER> FisherCat : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_FisherCat : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.014081 1.2910 [ -5.3119 4.5609 ]; : var2: -0.014399 1.3299 [ -4.7537 4.6723 ]; : var3: -0.027971 1.3779 [ -5.2892 4.7007 ]; : var4: 0.12966 1.4883 [ -5.1002 4.9767 ]; : -----------------------------------------------------------; <HEADER> Factory : Evaluate classifier: LikelihoodCat; : ; <HEADER> LikelihoodCat : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_LikelihoodCat : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.014081 1.2910 [ -5.3119 4.5609 ]; : var2: -0.014399 1.3299 [ -4.7537 4.6723 ]; : var3: -0.027971 1.3779 [ -5.2892 4.7007 ]; : var4: 0.12966 1.4883 [ -5.1002 4.9767 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset FisherCat : 0.914; : dataset LikelihoodCat : 0.913; : dataset Fisher : 0.808; : dataset Likelihood : 0.769; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency comp,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:25696,test,test,25696,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['test']
Testability,ents created by this object; Double_tRooAbsTestStatistic::_evalCarry! carry of Kahan sum in evaluatePartition; Int_tRooAbsTestStatistic::_extSet! Number of designated set to calculated extended term; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcObsSetList of observables in the pdf expression; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooAbsTestStatistic**RooAbsTestStatistic::_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpModeRooAbsTestStatistic::_gofOpModeOperation mode of test statistic instance ; vector<RooFit::MPSplit>RooAbsTestStatistic::_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsTestStatistic::_init! Is object initialized ; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealMPFE**RooAbsTestStatistic::_mpfeArray! Array of parallel execution frond ends; RooFit::MPSplitRooAbsTestStatistic::_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-spl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataWeightedAverage.html:37628,test,test,37628,root/html534/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html534/RooDataWeightedAverage.html,1,['test'],['test']
Testability,"ents in test statistic calculation; Int_t_nGofNumber of sub-contexts ; Int_t_numSetsTotal number of partitions in parallel calculation mode; Int_t_setNumPartition number of this instance in parallel calculation mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separate; processed that are connected to this process through a RooAbsRealMPFE front-end class. void initSimMode(RooSimultaneous* pdf, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize simultaneous p.d.f proce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:36039,test,test,36039,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,3,['test'],['test']
Testability,"ents in test statistic calculation; Int_t_nGofNumber of sub-contexts ; Int_t_numSetsTotal number of partitions in parallel calculation mode; Int_t_setNumPartition number of this instance in parallel calculation mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separate; processed that are connected to this process through a RooAbsRealMPFE front-end class. void initSimMode(RooSimultaneous* pdf, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsTestStatistic.html:37577,test,test,37577,root/html532/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsTestStatistic.html,1,['test'],['test']
Testability,"ents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x. Double_t IntegralAndError(Int_t binx1, Int_t binx2, Double_t& err, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2] and its error; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x.; the error is computed using error propagation from the bin errors assumming that; all the bins are uncorrelated. Double_t DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t& err, Option_t* opt, Bool_t doerr = kFALSE) const; internal function compute integral and optionally the error between the limits; specified by the bin number values working for all histograms (1D, 2D and 3D). Double_t AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; this histogram and h2, using the Anderson-Darling 2 sample test.; The AD 2 sample test formula are derived from the paper; F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class; It is the same formula ( (6) in the paper), and also shown in this preprint; http://arxiv.org/pdf/0804.0380v1.pdf; Binned data are considered as un-binned data; with identical observation happening in the bin center. option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms. Double_t AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; Same funciton as above but return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:113791,test,test,113791,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,6,['test'],['test']
Testability,"ents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumFunc.html:45860,log,logging,45860,doc/master/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/master/classRooRealSumFunc.html,1,['log'],['logging']
Testability,"ents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// impl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29959,log,logEvalError,29959,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,4,['log'],"['log', 'logEvalError']"
Testability,ents); : Elapsed time for evaluation of 10000 events: 0.937 sec ; Factory : Test method: PDEFoam for Classification performance; : ; PDEFoam : [dataset] : Evaluation of PDEFoam on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.072 sec ; Factory : Test method: KNN for Classification performance; : ; KNN : [dataset] : Evaluation of KNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.2 sec ; Factory : Test method: LD for Classification performance; : ; LD : [dataset] : Evaluation of LD on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00474 sec ; : Dataset[dataset] : Evaluation of LD on testing sample; Factory : Test method: FDA_GA for Classification performance; : ; FDA_GA : [dataset] : Evaluation of FDA_GA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00327 sec ; Factory : Test method: MLPBNN for Classification performance; : ; MLPBNN : [dataset] : Evaluation of MLPBNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0193 sec ; Factory : Test method: DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.333 sec ; Factory : Test method: SVM for Classification performance; : ; SVM : [dataset] : Evaluation of SVM on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.287 sec ; Factory : Test method: BDT for Classification performance,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:67257,test,testing,67257,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['testing']
Testability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:12337,log,log,12337,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,2,['log'],['log']
Testability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual bool isDirectGenSafe (const RooAbsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:9788,log,log,9788,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,4,['log'],['log']
Testability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:9065,log,log,9065,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,90,['log'],['log']
Testability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; virtual bool isDirectG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:9016,log,log,9016,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,2,['log'],['log']
Testability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:11278,log,log,11278,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,4,['log'],['log']
Testability,"ents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:48875,log,logEvalError,48875,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,3,['log'],"['logEvalError', 'logging']"
Testability,"entzRotation l; // l is initialized as identity; TLorentzRotation m(l);// m = l; TRotation r;; TLorentzRotation lr(r);; TLorentzRotation lb1(bx,by,bz);; TVector3 b;; TLorentzRotation lb2(b);; The Matrix for a Lorentz boosts is:; \[; \left|; \begin{array}{cccc}; 1+gamma'*bx*bx & gamma'*bx*by & gamma'*bx*bz & gamma*bx \\; gamma'*bx*bz & 1+gamma'*by*by & gamma'*by*by & gamma*by \\; gamma'*bz*bx & gamma'*bz*by & 1+gamma'*bz*bz & gamma*bz \\; gamma*bx & gamma*by & gamma*bz & gamma; \end{array}; \right|; \]; with the boost vector b=(bx,by,bz); gamma=1/Sqrt(1-beta*beta);gamma'=(gamma-1)/beta*beta.; 17.5.2 Access to the Matrix Components/Comparisons; The access to the matrix components is possible with the methods XX(), XY() … TT(), and with the operator(int,int):; Double_t xx;; TLorentzRotation l;; xx = l.XX(); // gets the xx component; xx = l(0,0); // gets the xx component; if (l == m) {...} // test for equality; if (l != m) {...} // test for inequality; if (l.IsIdentity()) {...} // test for identity; 17.5.3 Transformations of a Lorentz Rotation; There are four possibilities to find the product of two TLorentzRotation transformations:; TLorentzRotation a,b,c;; c = b*a; // product; c = a.MatrixMultiplication(b); // a is unchanged; a *= b; // a=a*b; c = a.Transform(b) // a=b*a then c=a; Lorentz boosts:; Double_t bx, by, bz;; TVector3 v(bx,by,bz);; TLorentzRotation l;; l.Boost(v);; l.Boost(bx,by,bz);; Rotations:; TVector3 axis;; l.RotateX(TMath::Pi()); // rotation around x-axis; l.Rotate(.5,axis); // rotation around specified vector; Inverse transformation: use the method Inverse()to return the inverse transformation keeping the current one unchanged. The method Invert() inverts the current TLorentzRotation:; l1 = l2.Inverse(); // l1 is inverse of l2, l2 unchanged; l1 = l2.Invert(); // invert l2, then l1=l2; The matrix for the inverse transformation of a TLorentzRotation is as follows:; \[; \left|; \begin{array}{cccc}; xx & xy & xz & -tx \\; yx & yy & yz & -ty \\; zx & zy & z",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:872734,test,test,872734,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the Lite environment. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new session. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v | SvcMsg""); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read 'len' bytes from offset 'ofs' of the loc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofMgrLite.html:8956,log,logs,8956,root/html528/TProofMgrLite.html,https://root.cern,https://root.cern/root/html528/TProofMgrLite.html,2,['log'],"['log', 'logs']"
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsHiddenReal.h>. Inheritance diagram for RooAbsHiddenReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsHiddenReal() [1/4]. RooAbsHiddenReal::RooAbsHiddenReal ; (; ). inline . Definition at line 28 of file RooAbsHiddenReal.h. ◆ RooAbsHiddenReal() [2/4]. RooAbsHiddenReal::RooAbsHiddenReal ; (; const char * ; name, . const char * ; title, . const char * ; unit = """" . ). Constructor. ; Definition at line 46 of file RooAbsHiddenRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsHiddenReal.html:60190,test,testArg,60190,doc/master/classRooAbsHiddenReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsHiddenReal.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCrystalBall.html:71020,test,testArg,71020,doc/master/classRooCrystalBall.html,https://root.cern,https://root.cern/doc/master/classRooCrystalBall.html,12,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from tree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:56367,test,testArg,56367,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,28,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTruthModel.html:70954,test,testArg,70954,doc/master/classRooTruthModel.html,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsHiddenReal; static RooCategory * _dummyBlindState = nullptr;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooUnbli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindCPAsymVar.html:60968,test,testArg,60968,doc/master/classRooUnblindCPAsymVar.html,https://root.cern,https://root.cern/doc/master/classRooUnblindCPAsymVar.html,16,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #incl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:72036,test,testArg,72036,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,164,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddition.h>. Inheritance diagram for RooAddition:. This browser is not able to show SVG: try Firefox, Chrome, Safari, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:59137,test,testArg,59137,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction1Binding.h>. Inheritance diagram for RooCFunction1Binding< VO, VI >:. This browser is not able to show SVG: tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:59135,test,testArg,59135,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction2Binding.h>. Inheritance diagram for RooCFunction2Binding< VO, VI1, VI2 >:. This browser is not able to show S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2Binding.html:59215,test,testArg,59215,doc/master/classRooCFunction2Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2Binding.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction3Binding.h>. Inheritance diagram for RooCFunction3Binding< VO, VI1, VI2, VI3 >:. This browser is not able to s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3Binding.html:59289,test,testArg,59289,doc/master/classRooCFunction3Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3Binding.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction4Binding.h>. Inheritance diagram for RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >:. This browser is not able",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4Binding.html:59360,test,testArg,59360,doc/master/classRooCFunction4Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4Binding.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooChangeTracker.h>. Inheritance diagram for RooChangeTracker:. This browser is not able to show SVG: try Firefox, Chrome,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChangeTracker.html:59515,test,testArg,59515,doc/master/classRooChangeTracker.html,https://root.cern,https://root.cern/doc/master/classRooChangeTracker.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooConstraintSum.h>. Inheritance diagram for RooConstraintSum:. This browser is not able to show SVG: try Firefox, Chrome,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstraintSum.html:59429,test,testArg,59429,doc/master/classRooConstraintSum.html,https://root.cern,https://root.cern/doc/master/classRooConstraintSum.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooDerivative.h>. Inheritance diagram for RooDerivative:. This browser is not able to show SVG: try Firefox, Chrome, Safar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDerivative.html:59081,test,testArg,59081,doc/master/classRooDerivative.html,https://root.cern,https://root.cern/doc/master/classRooDerivative.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooErrorVar.h>. Inheritance diagram for RooErrorVar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:68477,test,testArg,68477,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooExtendedBinding.h>. Inheritance diagram for RooExtendedBinding:. This browser is not able to show SVG: try Firefox, Chr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendedBinding.html:58437,test,testArg,58437,doc/master/classRooExtendedBinding.html,https://root.cern,https://root.cern/doc/master/classRooExtendedBinding.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFirstMoment.h>. Inheritance diagram for RooFirstMoment:. This browser is not able to show SVG: try Firefox, Chrome, Saf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:59678,test,testArg,59678,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFracRemainder.h>. Inheritance diagram for RooFracRemainder:. This browser is not able to show SVG: try Firefox, Chrome,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFracRemainder.html:58775,test,testArg,58775,doc/master/classRooFracRemainder.html,https://root.cern,https://root.cern/doc/master/classRooFracRemainder.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFunctor1DBinding.h>. Inheritance diagram for RooFunctor1DBinding:. This browser is not able to show SVG: try Firefox, C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DBinding.html:59068,test,testArg,59068,doc/master/classRooFunctor1DBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DBinding.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFunctorBinding.h>. Inheritance diagram for RooFunctorBinding:. This browser is not able to show SVG: try Firefox, Chrom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorBinding.html:59214,test,testArg,59214,doc/master/classRooFunctorBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorBinding.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooHistFunc.h>. Inheritance diagram for RooHistFunc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:61383,test,testArg,61383,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooLegendre.h>. Inheritance diagram for RooLegendre:. This browser is not able to show SVG: try Firefox, Chrome, Safari, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:58969,test,testArg,58969,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooLinearVar.h>. Inheritance diagram for RooLinearVar:. This browser is not able to show SVG: try Firefox, Chrome, Safari,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:67959,test,testArg,67959,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooMoment.h>. Inheritance diagram for RooMoment:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMoment.html:59750,test,testArg,59750,doc/master/classRooMoment.html,https://root.cern,https://root.cern/doc/master/classRooMoment.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooNumConvolution.h>. Inheritance diagram for RooNumConvolution:. This browser is not able to show SVG: try Firefox, Chrom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:63278,test,testArg,63278,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooParamHistFunc.h>. Inheritance diagram for RooParamHistFunc:. This browser is not able to show SVG: try Firefox, Chrome,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamHistFunc.html:59502,test,testArg,59502,doc/master/classRooParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooParamHistFunc.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPolyFunc.h>. Inheritance diagram for RooPolyFunc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyFunc.html:60052,test,testArg,60052,doc/master/classRooPolyFunc.html,https://root.cern,https://root.cern/doc/master/classRooPolyFunc.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPolyVar.h>. Inheritance diagram for RooPolyVar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:59161,test,testArg,59161,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooProduct.h>. Inheritance diagram for RooProduct:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:59766,test,testArg,59766,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooProfileLL.h>. Inheritance diagram for RooProfileLL:. This browser is not able to show SVG: try Firefox, Chrome, Safari,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:60095,test,testArg,60095,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPullVar.h>. Inheritance diagram for RooPullVar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPullVar.html:58849,test,testArg,58849,doc/master/classRooPullVar.html,https://root.cern,https://root.cern/doc/master/classRooPullVar.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooRangeBoolean.h>. Inheritance diagram for RooRangeBoolean:. This browser is not able to show SVG: try Firefox, Chrome, S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRangeBoolean.html:58539,test,testArg,58539,doc/master/classRooRangeBoolean.html,https://root.cern,https://root.cern/doc/master/classRooRangeBoolean.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooRatio.h>. Inheritance diagram for RooRatio:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Oper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRatio.html:58878,test,testArg,58878,doc/master/classRooRatio.html,https://root.cern,https://root.cern/doc/master/classRooRatio.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooRecursiveFraction.h>. Inheritance diagram for RooRecursiveFraction:. This browser is not able to show SVG: try Firefox,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRecursiveFraction.html:58804,test,testArg,58804,doc/master/classRooRecursiveFraction.html,https://root.cern,https://root.cern/doc/master/classRooRecursiveFraction.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooSecondMoment.h>. Inheritance diagram for RooSecondMoment:. This browser is not able to show SVG: try Firefox, Chrome, S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSecondMoment.html:59816,test,testArg,59816,doc/master/classRooSecondMoment.html,https://root.cern,https://root.cern/doc/master/classRooSecondMoment.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooStats/Heaviside.h>. Inheritance diagram for RooStats::Heaviside:. This browser is not able to show SVG: try Firefox, Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1Heaviside.html:58659,test,testArg,58659,doc/master/classRooStats_1_1Heaviside.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1Heaviside.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooStats/HistFactory/FlexibleInterpVar.h>. Inheritance diagram for RooStats::HistFactory::FlexibleInterpVar:. This browser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html:59971,test,testArg,59971,doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooStats/HistFactory/LinInterpVar.h>. Inheritance diagram for RooStats::HistFactory::LinInterpVar:. This browser is not ab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html:58863,test,testArg,58863,doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooStats/HistFactory/PiecewiseInterpolation.h>. Inheritance diagram for PiecewiseInterpolation:. This browser is not able ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPiecewiseInterpolation.html:60873,test,testArg,60873,doc/master/classPiecewiseInterpolation.html,https://root.cern,https://root.cern/doc/master/classPiecewiseInterpolation.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooStats/HistFactory/RooBarlowBeestonLL.h>. Inheritance diagram for RooStats::HistFactory::RooBarlowBeestonLL:. This brows",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html:59478,test,testArg,59478,doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,4,['test'],['testArg']
Testability,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTFnBinding.h>. Inheritance diagram for RooTFnBinding:. This browser is not able to show SVG: try Firefox, Chrome, Safar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTFnBinding.html:58926,test,testArg,58926,doc/master/classRooTFnBinding.html,https://root.cern,https://root.cern/doc/master/classRooTFnBinding.html,4,['test'],['testArg']
Testability,"eoPainter(TGeoManager* manager); -*-*Geometry painter default constructor; *-* ====================================. ~TVirtualGeoPainter(); -*-*Geometry painter default destructor; *-* ===================================. TVirtualGeoPainter * GeoPainter(); Static function returning a pointer to the geometry painter.; The painter will paint objects from the specified geometry.; If the geometry painter does not exist a default painter is created. void SetPainter(const TVirtualGeoPainter* painter); Static function to set an alternative histogram painter. TVirtualGeoPainter(TGeoManager* manager). void AddSize3D(Int_t numpoints, Int_t numsegs, Int_t numpolys). TVirtualGeoTrack * AddTrack(Int_t id, Int_t pdgcode, TObject* particle). void AddTrackPoint(Double_t* point, Double_t* box, Bool_t reset = kFALSE). void BombTranslation(const Double_t* tr, Double_t* bombtr). void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"). void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option). void CheckBoundaryErrors(Int_t ntracks = 1000000, Double_t radius = -1.). void CheckBoundaryReference(Int_t icheck = -1). void CheckGeometryFull(Bool_t checkoverlaps = kTRUE, Bool_t checkcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = __null). void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const. void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.10000000000000001, Option_t* option = """") const. Int_t CountVisibleNodes(). void DefaultAngles(). void DefaultColors(). Int_t DistanceToPrimitiveVol(TGeoVolume* vol, Int_t px, Int_t py). void Draw(Option_t* option = """"). void DrawBatemanSol(TGeoBatemanSol* sol, Option_t* option = """"). void DrawShape(TGeoShape* shape, Option_t* option = """"). void DrawOnly(Option_t* option = """"). void DrawOverlap(void* ovlp, Option_t* option = """"). void DrawCurrentPoint(Int_t color). void DrawPanel(). void DrawPath(const char* path, Option_t* option = """"). voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualGeoPainter.html:12642,test,testNo,12642,root/html602/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html602/TVirtualGeoPainter.html,2,['test'],['testNo']
Testability,"eoVolume* vol); Compute number of overlaps combinations to check per volume. void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.10000000000000001, Option_t* option = """"); Check illegal overlaps for volume VOL within a limit OVLP. void PrintOverlaps() const; Print the current list of overlaps held by the manager class. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); --- Draw point (x,y,z) over the picture of the daughers of the volume containing this point.; Generates a report regarding the path to the node containing this point and the distance to; the closest boundary. void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2); 2: Safety test. Sample points inside the bounding and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; Distance to boundary is bigger than safety. void ShapeDistances(TGeoShape* shape, Int_t nsamples, Option_t* option); Test TGeoShape::DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute d1 = DistFromInside and move the; point on the boundary. Compute DistFromOutside and propagate with d2 making sure that; the shape is not re-entered. Swap direction and call DistFromOutside that; should fall back on the same point on the boundary (at d2). Propagate back on boundary; then compute DistFromInside that should be bigger than d1.; Plot d-(d1+d2). void ShapeSafety(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of safe distance for a given shape.; Sample points inside the 2x bounding box and compute safety. Generate; directions randomly in cos(theta) and compu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoChecker.html:15514,test,test,15514,root/html602/TGeoChecker.html,https://root.cern,https://root.cern/root/html602/TGeoChecker.html,2,['test'],['test']
Testability,"epNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Does not evaluate the loss and therefore not trigger a possible synchronization with the device. ;  ; Scalar_t StepReducedWeightsLoss (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Similar to StepReducedWeights(...) but also evaluates the loss. ;  . Private Attributes; size_t fBatchSize;  Batch size to use for the training. ;  ; size_t fConvergenceCount;  Current number of training epochs without. ;  ; size_t fConvergenceSteps;  Number of training epochs without considerable. ;  ; Scalar_t fLearningRate;  Learning rate \(\alpha\). ;  ; Scalar_t fMinimumError;  The minimum loss achieved on the training set during the current training session. ;  ; size_t fStepCount;  Number of steps performed in the current training session. ;  ; Scalar_t fTestError;  Holds the most recently computed test loss. ;  ; size_t fTestInterval;  Interval for the computation of the test error. ;  ; Scalar_t fTrainingError;  Holds the most recently computed training loss. ;  . #include <TMVA/DNN/DLMinimizers.h>; Member Typedef Documentation. ◆ DeepNet_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::DeepNet_t = TDeepNet<Architecture_t>. Definition at line 67 of file DLMinimizers.h. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 69 of file DLMinimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 68 of file DLMinimizers.h. Constructor & Destructor Documentation. ◆ TDLGradientDescent() [1/2]. template<typename Architecture_t > . TMVA::DNN::TDLGradientDescent< Architecture_t >::TDLGradientDescent. Definition at line 163 of file DLMinimizers.h. ◆ TDLGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:3715,test,test,3715,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['test'],['test']
Testability,"epest node"" that geometrically contains P (in our case let us suppose it is B\_3). Since a node is just a positioned volume, we can then get a pointer to the volume, medium or material objects related to it. ""Deepest"" means that B\_3 still contains point P (as well as A\_1 and TOP\_1), but none of the daughters of volume B does. After finding out the node containing the particle, one can check if the geometry state is different compared to the last located point:; Bool_t *TGeoManager::IsSameLocation(); The algorithm for finding where a point is located in geometry is presented in the figure 17-36.; It always starts by checking if the last computed modeller state is the answer. This optimizes the search when continuously tracking a particle. The main actions performed are:. moving up and down in the logical node tree while updating the current node and its global matrix; converting the global position into the local frame of the current node/volume; checking whether the local position lies within the geometrical shape of the current volume - if this is the case continue the search downwards for the daughters of the current node, otherwise search upwards its containers until the top level is reached.; the number of candidate nodes to be checked at a given level is minimized by an additional optimization structure: voxels. This is effective even in case there is only one daughter of the current volume.; in case the current node is declared as possibly overlapping, the method FindInCluster() is invoked. This method checks all different possibilities within the cluster of overlapping candidates. One of the candidates is prioritized if one of the following conditions id fulfilled (in order):; Is declared as non-overlapping (these are anyway searched first); Has at least one daughter that contains the current point; Was already declared as containing the point at a previous step. Finding the location of a point in the geometry hierarchy. Finding the Distance to Next Crosse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:128413,log,logical,128413,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['log'],['logical']
Testability,"epping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:25157,log,log,25157,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,2,['log'],['log']
Testability,"epresentation of binned data based on the TGraphAsymmErrors class.Definition RooHist.h:29; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Deletevoid Delete(Option_t *o=nullptr) overrideRemove all elements in collection and delete all elements NB: Collection does not own elements,...Definition RooLinkedList.cxx:578; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::beginRooLinkedListIterImpl begin() constDefinition RooLinkedList.cxx:761; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooMomentDefinition RooMoment.h:26; RooMsgService::instancestatic RooMsgService & instance()Return reference to singleton instance.Definition RooMsgService.cxx:345; RooMsgService::isActivebool isActive(T self, RooFit::MsgTopic topic, RooFit::MsgLevel level)Check if logging is active for given object/topic/RooFit::MsgLevel combination.Definition RooMsgService.h:186; RooNumIntConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumIntConfig.h:25; RooNumIntConfig::defaultConfigstatic RooNumIntConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumIntConfig.cxx:44; RooParamBinningImplementation of RooAbsBinning that constructs a binning with a range definition that depends on ext...Definition RooParamBinning.h:24; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::removevoid remove(const char *name=nullptr, bool deleteToo=true)Remove object with given name, or last object added if no name is given.Definition RooPlot.cxx:868; RooPlot::drawBeforebool drawBefore(const char *before, const char *target)Change the order in which our contained objects are dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:244835,log,logging,244835,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['log'],['logging']
Testability,"ept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package list,; does not currently remove entry from interpreter include path.; Returns -1 in case of error, 0 otherwise. Int_t UnloadPackages(); Unloads all enabled packages. Returns -1 in case of error, 0 otherwise. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on failure. Int_t SetupCommon(); Common part (between TProofServ and TXProofServ) of the setup phase.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. Bool_t UnlinkDataDir(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:23484,log,log,23484,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,6,['log'],['log']
Testability,"equal to the corresponding class name, e.g. the default name of TList is “TList”.; 12.13 Examples for Writing and Reading Trees; The following sections are examples of writing and reading trees increasing in complexity from a simple tree with a few variables to a tree containing folders and complex Event objects. Each example has a named script in the $ROOTSYS/tutorials/tree directory. They are called tree1.C to tree4.C. The examples are:. tree1.C: a tree with several simple (integers and floating point) variables.; tree2.C: a tree built from a C structure (struct). This example uses the Geant3 C wrapper as an example of a FORTRAN common block ported to C with a C structure.; tree3.C: in this example, we will show how to extend a tree with a branch from another tree with the Friends feature. These trees have branches with variable length arrays. Each entry has a variable number of tracks, and each track has several variables.; tree4.C: a tree with a class (Event). The class Event is defined in $ROOTSYS/test. In this example we first encounter the impact of splitting a branch. Each script contains the main function, with the same name as the file (i.e. tree1), the function to write - tree1w, and the function to read - tree1r. If the script is not run in batch mode, it displays the tree in the browser and tree viewer. To study the example scripts, you can either execute the main script, or load the script and execute a specific function. For example:; // execute the function that writes, reads, shows the tree; root[] x tree1.C; // use ACLiC to build shared library, check syntax, execute; root[] x tree1.C++; // Load the script and select a function to execute; root[] L tree1.C; root[] tree1w(); root[] tree1r(); 12.14 Example 1: A Tree with Simple Variables; This example shows how to write, view, and read a tree with several simple (integers and floating-point) variables.; 12.14.1 Writing the Tree; Below is the function that writes the tree (tree1w). First, the variables",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:551650,test,test,551650,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"equal"");; 7381 ; 7382 for (size_t i = 0; i < nPaths; i += 2) {; 7383 if (i); 7384 fIncludePath.Append(' ');; 7385 fIncludePath.Append(includePaths[i].c_str());; 7386 ; 7387 if (includePaths[i] != ""-I""); 7388 fIncludePath.Append(' ');; 7389 fIncludePath.Append('""');; 7390 fIncludePath.Append(includePaths[i + 1], includePaths[i + 1].length());; 7391 fIncludePath.Append('""');; 7392 }; 7393 }; 7394 ; 7395 return fIncludePath;; 7396}; 7397 ; 7398////////////////////////////////////////////////////////////////////////////////; 7399/// Return the directory containing CINT's stl cintdlls.; 7400 ; 7401const char* TCling::GetSTLIncludePath() const; 7402{; 7403 return """";; 7404}; 7405 ; 7406//______________________________________________________________________________; 7407// M I S C; 7408//______________________________________________________________________________; 7409 ; 7410int TCling::DisplayClass(FILE* /*fout*/, const char* /*name*/, int /*base*/, int /*start*/) const; 7411{; 7412 // Interface to cling function; 7413 return 0;; 7414}; 7415 ; 7416////////////////////////////////////////////////////////////////////////////////; 7417/// Interface to cling function; 7418 ; 7419int TCling::DisplayIncludePath(FILE *fout) const; 7420{; 7421 assert(fout != nullptr && ""DisplayIncludePath, 'fout' parameter is null"");; 7422 ; 7423 llvm::SmallVector<std::string, 10> includePaths;//Why 10? Hell if I know.; 7424 //false - no system header, true - with flags.; 7425 fInterpreter->GetIncludePaths(includePaths, false, true);; 7426 if (const size_t nPaths = includePaths.size()) {; 7427 assert(!(nPaths & 1) && ""DisplayIncludePath, number of paths and options is not equal"");; 7428 ; 7429 std::string allIncludes(""include path:"");; 7430 for (size_t i = 0; i < nPaths; i += 2) {; 7431 allIncludes += ' ';; 7432 allIncludes += includePaths[i];; 7433 ; 7434 if (includePaths[i] != ""-I""); 7435 allIncludes += ' ';; 7436 allIncludes += includePaths[i + 1];; 7437 }; 7438 ; 7439 fprintf(fout, ""%s\n"", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:289737,assert,assert,289737,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"equest will be forwarded to the master in direct contact with the worker. The end-master will move the worker from one list to the other active and rebuild the list of unique active workers. Use ord = ""*"" to deactivate all active workers. If save is TRUE the current active list is saved before any modification is done; re-running with ord = ""restore"" restores the saved list Return <0 if something went wrong (-2 if at least one worker was not found) or the number of workers with status change (on master; 0 on client). ; Definition at line 11389 of file TProof.cxx. ◆ NotifyLogMsg(). void TProof::NotifyLogMsg ; (; const char * ; msg, . const char * ; sfx = ""\n"" . ). private . Notify locally 'msg' to the appropriate units (file, stdout, window) If defined, 'sfx' is added after 'msg' (typically a line-feed);. ; Definition at line 6358 of file TProof.cxx. ◆ Open(). TProof * TProof::Open ; (; const char * ; cluster = 0, . const char * ; conffile = 0, . const char * ; confdir = 0, . Int_t ; loglevel = 0 . ). static . Start a PROOF session on a specific cluster. ; If cluster is 0 (the default) then the PROOF Session Viewer GUI pops up and 0 is returned. If cluster is ""lite://"" we start a PROOF-lite session. If cluster is """" (empty string) then we connect to the cluster specified by 'Proof.LocalDefault', defaulting to ""lite://"". If cluster is ""pod://"" (case insensitive), then we connect to a PROOF cluster managed by PROOF on Demand (PoD, http://pod.gsi.de ). Via conffile a specific PROOF config file in the confir directory can be specified. Use loglevel to set the default loging level for debugging. The appropriate instance of TProofMgr is created, if not yet existing. The instantiated TProof object is returned. Use TProof::cd() to switch between PROOF sessions. For more info on PROOF see the TProof ctor. ; Definition at line 11583 of file TProof.cxx. ◆ operator=(). void TProof::operator= ; (; const TProof & ; ). private . ◆ ParseConfigField(). void TProof::ParseConfigField ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:118553,log,loglevel,118553,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['log'],['loglevel']
Testability,"er () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:7877,log,logical,7877,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,2,['log'],['logical']
Testability,er (class TSpectrum2) ;  SearchHR1.C Example to illustrate high resolution peak searching function (class TSpectrum) ;  SearchHR3.C Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlcreatedb.py Create a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlfilldb.py Fill run catalog with nfiles entries ;  SQLiteIPLocation.C ;  SQLitePlatformDistribution.C ;  SQLiteTimeVersionOfRoot.C ;  SQLiteVersionsOfRoot.C ;  sqlselect.CQuery example to MySQL test database ;  sqlselect.py Query example to MySQL test database ;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:164121,test,test,164121,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['test'],['test']
Testability,"er << ""-"";; 913 logger << Endl;; 914 ; 915 // title bar; 916 logger << setw(maxL) << titleVars << "":"";; 917 logger << setw(maxV+1) << titleValues << "":"";; 918 logger << Endl;; 919 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 920 logger << Endl;; 921 ; 922 // the numbers; 923 for (UInt_t irow=0; irow<nvar; irow++) {; 924 logger << setw(maxL) << V[irow] << "":"";; 925 logger << setw(maxV+1) << Form( format.Data(), values[irow] );; 926 logger << Endl;; 927 }; 928 ; 929 // bar line; 930 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 931 logger << Endl;; 932}; 933 ; 934////////////////////////////////////////////////////////////////////////////////; 935/// formatted output of matrix (with labels); 936 ; 937void TMVA::Tools::FormattedOutput( const TMatrixD& M, const std::vector<TString>& V, MsgLogger& logger ); 938{; 939 // sanity check: matrix must be quadratic; 940 UInt_t nvar = V.size();; 941 if ((UInt_t)M.GetNcols() != nvar || (UInt_t)M.GetNrows() != nvar) {; 942 logger << kFATAL << ""<FormattedOutput> fatal error with dimensions: ""; 943 << M.GetNcols() << "" OR "" << M.GetNrows() << "" != "" << nvar << "" ==> abort"" << Endl;; 944 }; 945 ; 946 // get length of each variable, and maximum length; 947 UInt_t minL = 7;; 948 UInt_t maxL = minL;; 949 std::vector<UInt_t> vLengths;; 950 for (UInt_t ivar=0; ivar<nvar; ivar++) {; 951 vLengths.push_back(TMath::Max( (UInt_t)V[ivar].Length(), minL ));; 952 maxL = TMath::Max( vLengths.back(), maxL );; 953 }; 954 ; 955 // count column length; 956 UInt_t clen = maxL+1;; 957 for (UInt_t icol=0; icol<nvar; icol++) clen += vLengths[icol]+1;; 958 ; 959 // bar line; 960 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 961 logger << Endl;; 962 ; 963 // title bar; 964 logger << setw(maxL+1) << "" "";; 965 for (UInt_t icol=0; icol<nvar; icol++) logger << setw(vLengths[icol]+1) << V[icol];; 966 logger << Endl;; 967 ; 968 // the numbers; 969 for (UInt_t irow=0; irow<nvar; irow++) {; 970 logger << setw(maxL) << V[irow] << "":"";; 971 for (UInt_t icol=0; icol<n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:32581,log,logger,32581,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"er << ""_|_|_|_|_| _| _| _| _| _|_| "" << Endl;; 1371 logger << "" _| _|_| _|_| _| _| _| _| "" << Endl;; 1372 logger << "" _| _| _| _| _| _| _|_|_|_| "" << Endl;; 1373 logger << "" _| _| _| _| _| _| _| "" << Endl;; 1374 logger << "" _| _| _| _| _| _| "" << Endl << Endl;; 1375 break;; 1376 ; 1377 case kLeanWelcomeMsg:; 1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |_| |_| \\_/_/ \\_\\"" << Endl << Endl;; 1400 break;; 1401 ; 1402 case kSmall2WelcomeMsg:; 1403 logger << "" _____ __ ____ ___ "" << Endl;; 1404 logger << ""|_ _| \\/ \\ \\ / / \\ "" << Endl;; 1405 logger << "" | | | |\\/| |\\ \\ / / _ \\ "" << Endl;; 1406 logger << "" | | | | | | \\ V / ___ \\ "" << Endl;; 1407 logger << "" |_| |_| |_| \\_/_/ \\_\\ "" << Endl << Endl;; 1408 break;; 1409 ; 1410 case kOriginalWelcomeMsgColor:; 1411 logger << kINFO << """" << Color(""red""); 1412 << ""_______________________________________"" << Color(""reset"") << Endl;; 1413 logger << kINFO << """" << Color(""blue""); 1414 << Color(""red_bgd"") << Color(""bwhite"") << "" // "" << Color(""reset""); 1415 << Color(""white"") << Color(""blue_bgd""); 1416 << ""|\\ /|| \\ // /\\\\\\\\\\\\\\\\\\\\\\\\ \\ \\ \\ "" << Color(""reset"") << Endl;; 1417 logger << kINFO << """"<< Color(""blue""); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:49319,log,logger,49319,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"er = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 898 }; 899 ; 900 if (hasConverged); 901 break;; 902 ; 903 if ((int)cycleCount % 10 == 0) {; 904 ; 905 TString convText = TString::Format( ""(train/test/epo/conv/maxco): %.3g/%.3g/%d/%d/%d"",; 906 trainError,; 907 testError,; 908 (int)cycleCount,; 909 (int)settings.convergenceCount (),; 910 (int)settings.maxConvergenceCount ());; 911 double progress = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 912 settings.cycle (progress, convText);; 913 }; 914 }; 915 while (true);; 916 settings.endTrainCycle (trainError);; 917 ; 918 TString convText = TString::Format( ""(train/test/epoch): %.4g/%.4g/%d"", trainError, testError, (int)cycleCount);; 919 double progress = 100*(double)settings.maxConvergenceCount() /(double)settings.convergenceSteps ();; 920 settings.cycle (progress, convText);; 921 ; 922 return testError;; 923 }; 924 ; 925 ; 926 ; 927/*! \brief execute a single training cycle; 928 *; 929 * uses multithreading if turned on; 930 *; 931 * \param minimizer the minimizer to be used (e.g. SGD); 932 * \param weights the weight container with all the synapse weights; 933 * \param itPatternBegin begin of the pattern container; 934 * \param itPatternEnd the end of the pattern container; 935 * \param settings the settings for this training (e.g. multithreading or not, regularization, etc.); 936 * \param dropContainer the data for dropping-out nodes (regularization technique); 937 */; 938 template <typename Iterator, typename Minimizer>; 939 inline double Net::trainCycle (Minimizer& minimizer, std::vector<double>& weights,; 940 Iterator itPatternBegin, Iterator itPatternEnd, Settings& settings, DropContainer& dropContainer); 941 {; 942 double error = 0.0;; 943 size_t numPattern = std::distance (itPatternBegin, itPatternEnd);; 944 size_t numBatches = numPattern/settings.batchSize ();; 945 size_t numBatches_stored = numBatches;; 946 ; 947 std::shuffle(itPatter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:28172,test,testError,28172,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testError']
Testability,"er = TMVA.DataLoader('dataset'); for branch in signal.GetListOfBranches():; dataloader.AddVariable(branch.GetName()); ; dataloader.AddSignalTree(signal, 1.0); dataloader.AddBackgroundTree(background, 1.0); dataloader.PrepareTrainingAndTestTree(TCut(''),; 'nTrain_Signal=4000:nTrain_Background=4000:SplitMode=Random:NormMode=NumEvents:!V'); ; # Generate model; ; # Define model; model = Sequential(); model.add(Dense(64, activation='relu', input_dim=4)); model.add(Dense(2, activation='softmax')); ; # Set loss and optimizer; model.compile(loss='categorical_crossentropy',; optimizer=SGD(learning_rate=0.01), weighted_metrics=['accuracy', ]); ; # Store model to file; model.save('modelClassification.h5'); model.summary(); ; # Book methods; factory.BookMethod(dataloader, TMVA.Types.kFisher, 'Fisher',; '!H:!V:Fisher:VarTransform=D,G'); factory.BookMethod(dataloader, TMVA.Types.kPyKeras, 'PyKeras',; 'H:!V:VarTransform=D,G:FilenameModel=modelClassification.h5:FilenameTrainedModel=trainedModelClassification.h5:NumEpochs=20:BatchSize=32'); ; # Run training, test and evaluation; factory.TrainAllMethods(); factory.TestAllMethods(); factory.EvaluateAllMethods(); TCutA specialized string object used for TTree selections.Definition TCut.h:25; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TMVA::DataLoaderDefinition DataLoader.h:50; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::PyMethodBase::PyInitializestatic void PyInitialize()Initialize Python interpreter.Definition PyMethodBase.cxx:153; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; Date2017 ; AuthorTMVA Team ; Definition in file ClassificationKeras.py. tutorialstmvakerasClassificationKeras.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ClassificationKeras_8py.html:2213,test,test,2213,doc/master/ClassificationKeras_8py.html,https://root.cern,https://root.cern/doc/master/ClassificationKeras_8py.html,1,['test'],['test']
Testability,"er Z surface (+dz); Double_tfDyhalf length in Y; Double_tfDzhalf length in Z; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrd1(); dummy ctor. TGeoTrd1(Double_t dx1, Double_t dx2, Double_t dy, Double_t dz); constructor. TGeoTrd1(const char* name, Double_t dx1, Double_t dx2, Double_t dy, Double_t dz); constructor. TGeoTrd1(Double_t* params); ctor with an array of parameters; param[0] = dx1; param[1] = dx2; param[2] = dy; param[3] = dz. ~TGeoTrd1(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box for a trd1. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this shape; check Z range. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the trd1; Boundary safe algorithm. void GetVisibleCorner(const Double_t* point, Double_t* vertex, Double_t* normals) const; get the most visible corner from outside point and the normals. void GetOppositeCorner(const Double_t* point, Int_t inorm, Double_t* vertex, Double_t* normals) const; get the opposite corner of the intersected face. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the trd1; Boundary safe algorithm. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this trd1 shape belonging to volume ""voldiv"" into ndiv vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd1.html:13365,test,test,13365,root/html534/TGeoTrd1.html,https://root.cern,https://root.cern/root/html534/TGeoTrd1.html,3,['test'],['test']
Testability,"er active/inactive list by making the worker identified by; the ordinal number 'ord' active (add == TRUE) or inactive (add == FALSE).; The string 'ord' can also be a comma-separated list of ordinal numbers the; status of which will be modified at once.; If needed, the request will be forwarded to the master in direct contact; with the worker. The end-master will move the worker from one list to the; other active and rebuild the list of unique active workers.; Use ord = ""*"" to deactivate all active workers.; If save is TRUE the current active list is saved before any modification is; done; re-running with ord = ""restore"" restores the saved list; Return <0 if something went wrong (-2 if at least one worker was not found); or the number of workers with status change (on master; 0 on client). void SaveActiveList(); Save current list of active workers. Int_t RestoreActiveList(); Restore saved list of active workers. TProof * Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); Start a PROOF session on a specific cluster. If cluster is 0 (the; default) then the PROOF Session Viewer GUI pops up and 0 is returned.; If cluster is ""lite://"" we start a PROOF-lite session.; If cluster is """" (empty string) then we connect to the cluster specified; by 'Proof.LocalDefault', defaulting to ""lite://"".; If cluster is ""pod://"" (case insensitive), then we connect to a PROOF cluster; managed by PROOF on Demand (PoD, http://pod.gsi.de ).; Via conffile a specific PROOF config file in the confir directory can be specified.; Use loglevel to set the default loging level for debugging.; The appropriate instance of TProofMgr is created, if not; yet existing. The instantiated TProof object is returned.; Use TProof::cd() to switch between PROOF sessions.; For more info on PROOF see the TProof ctor. TProofMgr * Mgr(const char* url); Get instance of the effective manager for 'url'; Return 0 on failure. void Reset(const char* url, Bool_t hard = kFALSE); W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:97754,log,loglevel,97754,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,2,['log'],['loglevel']
Testability,"er and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. The class stores coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. The parameter \f$\kappa\f$ must be in the range \f$0.01 \le \kappa \le 12\f$. The parameter \f$\beta^2\f$ must be in the range \f$0 \le \beta^2 \le 1\f$. Average times on a Pentium Core2 Duo P8400 2.26GHz:; - 9.9us per call to SetKappaBeta2 or constructor; - 0.095us per call to Pdf, Cdf; - 3.7us per first call to Quantile after SetKappaBeta2 or constructor; - 0.137us per subsequent call to Quantile. Benno List, June 2010. @ingroup StatFunc. Function Mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VavilovFast.html:2148,log,log,2148,root/html528/ROOT__Math__VavilovFast.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VavilovFast.html,6,['log'],['log']
Testability,"er limit only; kNELLimitMax - upper limit only; kNELLimitMinMax - both lower and upper limits. fN1 = new TGNumberEntry(parent, 0.005, 9, kENTRY1,; TGNumberFormat::kNESRealThree, //style; TGNumberFormat::kNEAAnyNumber, //input value filter; TGNumberFormat::kNELLimitMinMax, //specify limits; -1.,1.); //limit values; TGNumberEntryField is a number entry input widget.; Nent = new TGNumberEntryField(hgrunf2, kNENT_ID, 0.6,; TGNumberFormat::kNESRealThree,; TGNumberFormat::kNEAAnyNumber);; TGNumberEntryField is a plain vanilla entry field, whereas TGNumberEntry adds two small buttons to increase and decrease the numerical value in the field. The number entry widgets also support using the up and down cursor keys to change the numerical values. The step size can be selected with control and shift keys:. –small step (1 unit/factor of 3); Shift medium step (10 units/factor of 10); Controllarge step (100 units/factor of 30); Shift+Controlhuge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behavior is set when the entry field is created, but it can be changed by pressing the alt key at the same time.; 25.8.4 Menus; Menus provide a list of commands or options helping the user to select and to perform a task. The menu system classes are TGMenuBar, TGMenuTitle, TGPopupMenu, and TGMenuEntry.; The TGMenuBar class implements a menu bar widget. It is used to specify and provide access to common and frequently used application actions described in menu titles, implemented by TGMenuTitle class. The menu bar is the highest-level of the menu system and it is a starting point for all interactions. Also, it is always visible and allows using the keyboard equivalents. The geometry of the menu bar is automatically set to the parent widget, i.e. the menu bar automatically resizes itself so that it has the same width as its parent (typically TGMainFrame).; The menu bar is as a container for its menus - objects of the type TGPopupMenu. Popup menus can ap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1189240,log,logarithmic,1189240,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logarithmic']
Testability,"er name and passwd from the ~/.rootnetrc or ~/.netrc files. ; For more info see the version with 4 arguments. This version is maintained for backward compatability reasons. ; Definition at line 878 of file TAuthenticate.cxx. ◆ CheckNetrc() [2/2]. Bool_t TAuthenticate::CheckNetrc ; (; TString & ; user, . TString & ; passwd, . Bool_t & ; pwhash, . Bool_t ; srppwd . ). Try to get user name and passwd from the ~/.rootnetrc or ~/.netrc files. ; First ~/.rootnetrc is tried, after that ~/.netrc. These files will only be used when their access masks are 0600. Returns kTRUE if user and passwd were found for the machine specified in the URL. If kFALSE, user and passwd are """". The boolean pwhash is set to kTRUE if the returned passwd is to be understood as password hash, i.e. if the 'password-hash' keyword is found in the 'machine' lines; not implemented for 'secure' and the .netrc file. The format of these files are:. this is a comment line; machine <machine fqdn> login <user> password <passwd> machine <machine fqdn> login <user> password-hash <passwd>; and in addition ~/.rootnetrc also supports:; secure <machine fqdn> login <user> password <passwd>; <machine fqdn> may be a domain name or contain the wild card '*'.; for the secure protocols. All lines must start in the first column. ; Definition at line 908 of file TAuthenticate.cxx. ◆ CheckProofAuth(). Bool_t TAuthenticate::CheckProofAuth ; (; Int_t ; cSec, . TString & ; det . ). static . Check if the authentication method can be attempted for the client. ; Definition at line 3541 of file TAuthenticate.cxx. ◆ Class(). static TClass * TAuthenticate::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TAuthenticate::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TAuthenticate::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TAuthenticate.h. ◆ ClearAuth(). Int_t TAuthent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:23787,log,login,23787,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,2,['log'],['login']
Testability,"er object ;  CTGLFloatHolder;  CTGLFontA wrapper class for FTFont ;  CTGLFontManagerA FreeType GL font manager ;  CTGLFormatEncapsulation of format / contents of an OpenGL buffer ;  CTGLH2PolyPainterPaint TH2Poly ;  CTGLHistPainterThe histogram painter class using OpenGL ;  CTGLineLBEntry;  CTGLineStyleComboBox;  CTGLineWidthComboBox;  CTGLIsoPainter""gliso"" option for TH3 ;  CTGListBox;  CTGListDetailsLayout;  CTGListLayout;  CTGListTree;  CTGListTreeItem;  CTGListTreeItemStd;  CTGListView;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc ;  CTGLManager;  CTGLManipAbstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:175970,log,logical,175970,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['log'],['logical']
Testability,"er of bins in high-binned reference histogram ;  . Friends; std::ostream & operator<< (std::ostream &os, const PDF &tree);  ; std::istream & operator>> (std::istream &istr, PDF &tree);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/PDF.h>. Inheritance diagram for TMVA::PDF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterpolateMethod. enum TMVA::PDF::EInterpolateMethod. EnumeratorkSpline0 ; kSpline1 ; kSpline2 ; kSpline3 ; kSpline5 ; kKDE . Definition at line 70 of file PDF.h. Constructor & Destructor Documentation. ◆ PDF() [1/4]. TMVA::PDF::PDF ; (; const TString & ; name, . Bool_t ; norm = kTRUE . ). explicit . default constructor needed for ROOT I/O ; Definition at line 69 of file PDF.cxx. ◆ PDF() [2/4]. TMVA::PDF::PDF ; (; const TString & ; name, . const TH1 * ; theHist, . PDF::EInterpolateMethod ; method = kSpline2, . Int_t ; minnsmooth = 0, . Int_t ; maxnsmooth = 0, . Bool_t ; checkHist = kFALSE, . Bool_t ; norm = kTRUE . ). explicit . constructor of spline based PDF: ; Definition at line 107 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDF.html:18676,log,logger,18676,doc/master/classTMVA_1_1PDF.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDF.html,1,['log'],['logger']
Testability,er of events in test statistic calculation; Int_tRooAbsTestStatistic::_nGofNumber of sub-contexts ; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooArgSet*RooAbsOptTestStatistic::_normSetPointer to set with observables used for normalization; Int_tRooAbsTestStatistic::_numSetsTotal number of partitions in parallel calculation mode; Double_tRooAbsTestStatistic::_offset! Offset; Double_tRooAbsTestStatistic::_offsetCarry! avoids loss of precision; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooAbsOptTestStatistic::_optimized!; RooAbsData*RooAbsOptTestStatistic::_origDataOriginal data ; RooAbsReal*RooAbsOptTestStatistic::_origFuncOriginal function ; Bool_tRooAbsOptTestStatistic::_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*RooAbsOptTestStatistic::_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; RooRefArrayRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; TStringRooAbsOptTestStatistic::_sealNoticeUser-defined notice shown when reading a sealed likelihood ; Bool_tRooAbsOptTestStatistic::_sealedIs test statistic sealed -- i.e. no access to data ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Int_tRooAbsTest,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:41192,test,test,41192,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,6,['test'],['test']
Testability,"er of points used for the underlying histogram. The number of bins will be num_points - 1. . Definition at line 217 of file ROCCurve.cxx. ◆ GetMvas(). const std::vector< std::tuple< Float_t, Float_t, Bool_t > > TMVA::ROCCurve::GetMvas ; (; ); const. inline . Definition at line 68 of file ROCCurve.h. ◆ GetROCCurve(). TGraph * TMVA::ROCCurve::GetROCCurve ; (; const UInt_t ; num_points = 100). Returns a new TGraph containing the ROC curve. ; Sensitivity is on the x-axis, specificity on the y-axis.; Parameters. num_pointsGranularity of the resulting curve. The curve will be subdivided into num_points - 1 regions where the performance of the classifier is sampled. Larger number means more accurate, but more costly, evaluation. . Definition at line 274 of file ROCCurve.cxx. ◆ GetROCIntegral(). Double_t TMVA::ROCCurve::GetROCIntegral ; (; const UInt_t ; num_points = 41). Calculates the ROC integral (AUC) ; Parameters. num_pointsGranularity of the resulting curve used for integration. The curve will be subdivided into num_points - 1 regions where the performance of the classifier is sampled. Larger number means more accurate, but more costly, evaluation. . Definition at line 248 of file ROCCurve.cxx. ◆ Log(). TMVA::MsgLogger & TMVA::ROCCurve::Log ; (; ); const. private . Definition at line 128 of file ROCCurve.cxx. Member Data Documentation. ◆ fGraph. TGraph* TMVA::ROCCurve::fGraph. private . Definition at line 73 of file ROCCurve.h. ◆ fLogger. MsgLogger* TMVA::ROCCurve::fLogger. mutableprivate . ! message logger ; Definition at line 70 of file ROCCurve.h. ◆ fMva. std::vector<std::tuple<Float_t, Float_t, Bool_t> > TMVA::ROCCurve::fMva. private . Definition at line 75 of file ROCCurve.h. Libraries for TMVA::ROCCurve:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ROCCurve.h; tmva/tmva/src/ROCCurve.cxx. TMVAROCCurve. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html:5258,log,logger,5258,doc/master/classTMVA_1_1ROCCurve.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html,1,['log'],['logger']
Testability,"er that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:135490,test,test,135490,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['test'],['test']
Testability,"er to the matrix of source spectrum; p pointer to the two_dim_fit structure pointer, see manual; sizex length x of source spectrum; sizey length y of source spectrum. The two_dim_fit structure has the form; class TSpectrumTwoDimFit{. public:. int number_of_peaks; // input parameter, shoul be>0; int number_of_iterations; // input parameter, should be >0; int xmin; // first fitted channel in x direction; int xmax; // last fitted channel in x direction; int ymin; // first fitted channel in y direction; int ymax; // last fitted channel in y direction; double alpha; // convergence coefficient, input parameter, it should be positive; // number and <=1; double chi; // here the function returns resulting chi square; int statistic_type; // type of statistics, possible values; // FIT2_OPTIM_CHI_COUNTS (chi square statistics with; // counts as weighting coefficients),; // FIT2_OPTIM_CHI_FUNC_VALUES (chi square statistics; // with function values as weighting; // coefficients),FIT2_OPTIM_MAX_LIKELIHOOD; int alpha_optim; // optimization of convergence coefficients, possible values; // FIT2_ALPHA_HALVING, FIT2_ALPHA_OPTIMAL; int power; // possible values FIT21_FIT_POWER2,4,6,8,10,12; int fit_taylor; // order of Taylor expansion, possible values; // FIT2_TAYLOR_ORDER_FIRST,; // FIT2_TAYLOR_ORDER_SECOND; double position_init_x[MAX_NUMBER_OF_PEAKS2]; // initial values of x; // positions of 2D peaks, input parameters; double position_calc_x[MAX_NUMBER_OF_PEAKS2]; // calculated values; // of fitted x positions of 2D peaks, output parameters; double position_err_x[MAX_NUMBER_OF_PEAKS2]; // x position errors of 2D peaks; bool fix_position_x[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate; // x positions of 2D peaks (not fit).; // However they are present in the estimated functional; double position_init_y[MAX_NUMBER_OF_PEAKS2]; // initial values of y; // positions of 2D peaks, input parameters; double position_calc_y[MAX_NUMBER_OF_PEAKS2]; // calculated values; /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:46974,log,logical,46974,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['log'],['logical']
Testability,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:53734,test,test,53734,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['test'],['test']
Testability,er values: a0=0.907715 a1=-0.26012 mean=4.95881 nbkg=147.451 nsig=156.366 sig1frac=0.890535; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 920; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 910; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 900; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-871.381) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.716361 a1=-0.355239 mean=5.05578 nbkg=159.647 nsig=151.993 sig1frac=0.742914; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 890; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 880; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 870; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-903.916) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.877959 a1=-0.428367 mean=4.99746 nbkg=167.444 nsig=157.288 sig1frac=0.424997; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 860; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 850; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 840; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 830; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-970.563) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.867793 a1=-0.296045 mean=5.10353 nbkg=164.822 nsig=173.566 sig1frac=0.899431; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 820; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 810; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 800; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 790; [#0] PROGRESS:Gen,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:12410,log,log,12410,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"er& ClassDef_StreamerNVirtual_b); voidUseAdaptiveSampling(bool flag = true). private:. voidCreateParameterPoints() const; voidCreateTestStatSampler() const. Data Members; private:. Bool_tfAdaptiveSamplingcontrols use of adaptive sampling algorithm; Double_tfAdditionalNToysFactorgive user ability to ask for more toys; RooStats::ConfidenceBelt*fConfBelt; Bool_tfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData&fDatadata set ; Bool_tfDoProfileConstructioninstead of full construction over nuisance parametrs, do profile; Bool_tfFluctuateDatatell ToyMCSampler to fluctuate number of entries in dataset; RooStats::ModelConfig&fModel; Int_tfNbinsnumber of samples per variable; RooAbsData*fPOIToTestvalue of POI points to perform the construction; RooAbsData*fPointsToTestpoints to perform the construction; Bool_tfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::ToyMCSampler*fTestStatSamplerthe test statistic sampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); standard constructor. ~FeldmanCousins(); destructor; if(fOwnsWorkspace && fWS) delete fWS;. void SetModel(const RooStats::ModelConfig& ); set the model. TestStatSampler* GetTestStatSampler() const. void CreateTestStatSampler() const; specify the Test Statistic and create a ToyMC test statistic sampler. void CreateParameterPoints() const; specify the parameter points to perform the construction.; allow ability to profile on some nuisance paramters. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::PointSetInterval. FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); FeldmanCousins();; Common constructor. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t Confi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__FeldmanCousins.html:3989,test,test,3989,root/html534/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html534/RooStats__FeldmanCousins.html,1,['test'],['test']
Testability,"er(type.c_str() );; ; std::string name;; name = ""h1_"" + type;; TH1D * h1 = new TH1D(name.c_str(),""Chi2 Fit"",100, -5, 5. );; name = ""h2_"" + type;; TH1D * h2 = new TH1D(name.c_str(),""Chi2 Fit with Minos Error"",100, -5, 5. );; name = ""h3_"" + type;; TH1D * h3 = new TH1D(name.c_str(),""Chi2 Fit with Integral and Minos"",100, -5, 5. );; name = ""h4_"" + type;; TH1D * h4 = new TH1D(name.c_str(),""Likelihood Fit with Minos Error"",100, -5, 5. );; ; gStyle->SetOptStat(1111111);; gStyle->SetOptFit(1111111);; ; for (int i = 0; i < n; ++i) {; double x = gRandom->Gaus(0,1);; h1->Fill( x );; h2->Fill( x );; h3->Fill( x );; h4->Fill( x );; }; ; std::string cname = type + ""Canvas"" ;; std::string ctitle = type + "" Gaussian Fit"" ;; TCanvas *c1 = new TCanvas(cname.c_str(),cname.c_str(),10,10,900,900);; c1->Divide(2,2);; ; c1->cd(1);; std::cout << ""\nDo Fit 1\n"";; h1->Fit(""gaus"",""Q"");; h1->Draw();; c1->cd(2);; std::cout << ""\nDo Fit 2\n"";; h2->Fit(""gaus"",""E"");; h2->Draw();; c1->cd(3);; std::cout << ""\nDo Fit 3\n"";; h3->Fit(""gaus"",""IGE"");; h3->Draw();; c1->cd(4);; std::cout << ""\nDo Fit 4\n"";; h4->Fit(""gaus"",""LE"");; h4->Draw();; ; }; ; void minuit2GausFit() {; ; int n = 1000;; testGausFit(""Minuit2"",n);; testGausFit(""Fumili2"",n);; ; }; TCanvas.h; TF1.h; cnameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char cnameDefinition TGWin32VirtualXProxy.cxx:230; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/minuit2GausFit_8C.html:3770,test,testGausFit,3770,doc/master/minuit2GausFit_8C.html,https://root.cern,https://root.cern/doc/master/minuit2GausFit_8C.html,2,['test'],['testGausFit']
Testability,"er). operator = ; Definition at line 109 of file HypoTestInverterResult.cxx. ◆ SetCLsCleanupThreshold(). void RooStats::HypoTestInverterResult::SetCLsCleanupThreshold ; (; double ; th). inline . set CLs threshold for exclusion cleanup function ; Definition at line 105 of file HypoTestInverterResult.h. ◆ SetConfidenceLevel(). void RooStats::HypoTestInverterResult::SetConfidenceLevel ; (; double ; cl). inlineoverridevirtual . set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval) ; Implements RooStats::ConfInterval.; Definition at line 102 of file HypoTestInverterResult.h. ◆ SetInterpolationOption(). void RooStats::HypoTestInverterResult::SetInterpolationOption ; (; InterpolOption_t ; opt). inline . set the interpolation option, linear (kLinear ) or spline (kSpline) ; Definition at line 165 of file HypoTestInverterResult.h. ◆ SetTestSize(). virtual void RooStats::HypoTestInverterResult::SetTestSize ; (; double ; size). inlinevirtual . set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval) ; Definition at line 99 of file HypoTestInverterResult.h. ◆ Streamer(). void RooStats::HypoTestInverterResult::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ConfInterval. ◆ StreamerNVirtual(). void RooStats::HypoTestInverterResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 213 of file HypoTestInverterResult.h. ◆ UpperLimit(). double HypoTestInverterResult::UpperLimit ; (; ). overridevirtual . return the interval upper limit ; Reimplemented from RooStats::SimpleInterval.; Definition at line 954 of file HypoTestInverterResult.cxx. ◆ UpperLimitEstimatedError(). double HypoTestInverterResult::UpperLimitEstimatedError ; (; ). Estimate of lower limit error function evaluates only a rough error on the lower limit. ; Be careful when using this estimation ; Definition at line 1097 of file HypoTestInverterResult.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:37558,test,test,37558,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['test'],['test']
Testability,"er).; 225 ; 226void TGeoPainter::CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const; 227{; 228 fChecker->CheckGeometry(nrays, startx, starty, startz);; 229}; 230 ; 231////////////////////////////////////////////////////////////////////////////////; 232/// Check overlaps for the top volume of the geometry, within a limit OVLP.; 233 ; 234void TGeoPainter::CheckOverlaps(const TGeoVolume *vol, Double_t ovlp, Option_t *option) const; 235{; 236 fChecker->CheckOverlaps(vol, ovlp, option);; 237}; 238 ; 239////////////////////////////////////////////////////////////////////////////////; 240/// Check current point in the geometry.; 241 ; 242void TGeoPainter::CheckPoint(Double_t x, Double_t y, Double_t z, Option_t *option, Double_t safety); 243{; 244 fChecker->CheckPoint(x, y, z, option, safety);; 245}; 246 ; 247////////////////////////////////////////////////////////////////////////////////; 248/// Test for shape navigation methods. Summary for test numbers:; 249/// - 1: DistFromInside/Outside. Sample points inside the shape. Generate; 250/// directions randomly in cos(theta). Compute DistFromInside and move the; 251/// point with bigger distance. Compute DistFromOutside back from new point.; 252/// Plot d-(d1+d2); 253 ; 254void TGeoPainter::CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option); 255{; 256 fChecker->CheckShape(shape, testNo, nsamples, option);; 257}; 258 ; 259////////////////////////////////////////////////////////////////////////////////; 260/// Clear the list of visible volumes; 261/// reset the kVisOnScreen bit for volumes previously in the list; 262 ; 263void TGeoPainter::ClearVisibleVolumes(); 264{; 265 if (!fVisVolumes); 266 return;; 267 TIter next(fVisVolumes);; 268 TGeoVolume *vol;; 269 while ((vol = (TGeoVolume *)next())) {; 270 vol->ResetAttBit(TGeoAtt::kVisOnScreen);; 271 }; 272 fVisVolumes->Clear();; 273}; 274 ; 275////////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:8301,test,test,8301,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['test'],['test']
Testability,"er); Merge SamplingDistributions (does nothing if NULL is given).; If variable name was not set before, it is copied from the added; SamplingDistribution. Double_t Integral(Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Returns the integral in the open/closed/mixed interval. Default is [low,high) interval.; Normalization can be turned off. Double_t IntegralAndError(Double_t& error, Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Returns the integral in the open/closed/mixed interval. Default is [low,high) interval.; Normalization can be turned off.; compute also the error on the integral. Double_t CDF(Double_t x) const; returns the closed integral [-inf,x]. Double_t InverseCDF(Double_t pvalue); returns the inverse of the cumulative distribution function. Double_t InverseCDF(Double_t pvalue, Double_t sigmaVariaton, Double_t& inverseVariation); returns the inverse of the cumulative distribution function, with variations depending on number of samples. Double_t InverseCDFInterpolate(Double_t pvalue); returns the inverse of the cumulative distribution function. SamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, const char* varName = 0); Constructor for SamplingDistribution. Int_t GetSize() const; size of samples. {return fSamplingDist.size();}. const std::vector<Double_t> & GetSamplingDistribution() const; Get test statistics values. {return fSamplingDist;}. const std::vector<Double_t> & GetSampleWeights() const; Get the sampling weights. {return fSampleWeights;}. const TString GetVarName() const; {return fVarName;}. » Last changed: root/roostats:$Id: SamplingDistribution.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SamplingDistribution.html:10122,test,test,10122,root/html530/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html530/RooStats__SamplingDistribution.html,1,['test'],['test']
Testability,"er* b); Build the PROOF's structure in the browser. void SetPlayer(TVirtualProofPlayer* player); Set a new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is remote. Socket is needed in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent back. TMacro * GetLastLog(); Fill a TMacro with the log lines since the last reading (fLogFileR); Return (TMacro *)0 if no line was logged.; The returned TMacro must be deleted by the caller. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* , TList* , const char* = 0, Int_t = 0, TLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:87101,log,log,87101,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['log'],['log']
Testability,"er* b); Build the PROOF's structure in the browser. void SetPlayer(TVirtualProofPlayer* player); Set a new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is remote. Socket is needed in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent back. TMacro * GetLastLog(); Fill a TMacro with the log lines since the last reading (fLogFileR); Return (TMacro *)0 if no line was logged.; The returned TMacro must be deleted by the caller. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* dataset, TList* files, const char* dest = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:76316,log,log,76316,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['log'],['log']
Testability,"er* b); How to browse a volume. Double_t Capacity() const; Computes the capacity of this [cm^3] as the capacity of its shape.; In case of assemblies, the capacity is computed as the sum of daughter's capacities. void CheckGeometry(Int_t nrays = 1, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0) const; Shoot nrays with random directions from starting point (startx, starty, startz); in the reference frame of this volume. Track each ray until exiting geometry, then; shoot backwards from exiting point and compare boundary crossing points. void CheckOverlaps(Double_t ovlp = 0.1, Option_t* option = """") const; Overlap checking tool. Check for illegal overlaps within a limit OVLP.; Use option=""s[number]"" to force overlap checking by sampling volume with; [number] points.; Ex: myVol->CheckOverlaps(0.01, ""s10000000""); // shoot 10000000 points; myVol->CheckOverlaps(0.01, ""s""); // shoot the default value of 1e6 points. void CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape(). void CleanAll(); Clean data of the volume. void ClearShape(); Clear the shape of this volume from the list held by the current manager. void CheckShapes(); check for negative parameters in shapes.; THIS METHOD LEAVES SOME GARBAGE NODES -> memory leak, to be fixed; printf(""---Checking daughters of volume %s\n"", GetName());. Int_t CountNodes(Int_t nlevels = 1000, Int_t option = 0); Count total number of subnodes starting from this volume, nlevels down; option = 0 (default) - count only once per volume; option = 1 - count every time; option = 2 - count volumes on visible branches; option = 3 - return maximum level counted already with option = 0. Bool_t IsAllInvisible() const; Return TRUE if volume and all daughters are invisible. void InvisibleAll(Bool_t flag = kTRUE); Make volume and each of it daughters (in)visible. Bool_t IsFolder() const; Return TRUE if volume contains nodes; return (GetNda",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoVolume.html:22825,test,testNo,22825,root/html530/TGeoVolume.html,https://root.cern,https://root.cern/root/html530/TGeoVolume.html,3,['test'],['testNo']
Testability,"er, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsTestStatistic::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsOptTestStatistic::isSealed() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:19938,log,logEvalError,19938,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,12,['log'],['logEvalError']
Testability,"er, const char *filename, TString option);  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; typedef std::map< TString, Bool_t > NameList;  ; typedef std::map< TString, Float_t > NameListF;  ; typedef std::map< TString, Int_t > NameListI;  ; typedef std::map< TString, TString > NameListS;  ; typedef std::set< const TGeoNode * > NodeList;  ; typedef std::set< const TGeoOpticalSurface * > SurfaceList;  ; typedef std::set< const TGeoVolume * > VolList;  . Private Member Functions; Bool_t CanProcess (TObject *pointer);  Method which tests whether solids can be processed. ;  ; XMLNodePointer_t ChooseObject (TGeoShape *geoShape);  Chooses the object and method that should be used for processing object. ;  ; XMLNodePointer_t CreateArb8N (TGeoArb8 *geoShape);  Creates ""arb8"" node for GDML. ;  ; XMLNodePointer_t CreateAtomN (Double_t atom, const char *unit=""g/mole"");  Creates ""atom"" node for GDML. ;  ; XMLNodePointer_t CreateBorderSurfaceN (TGeoBorderSurface *geoSurf);  Creates ""bordersurface"" node for GDML. ;  ; XMLNodePointer_t CreateBoxN (TGeoBBox *geoShape);  Creates ""box"" node for GDML. ;  ; XMLNodePointer_t CreateCommonBoolN (TGeoCompositeShape *geoShape);  Creates common part of union intersection and subtraction nodes. ;  ; XMLNodePointer_t CreateConeN (TGeoCone *geoShape);  Creates ""cone"" node for GDML from TGeoCone object. ;  ; XMLNodePointer_t CreateConeN (TGeoConeSeg *geoShape);  Creates ""cone"" node for GDML from TGeoConeSeg object. ;  ; XMLNodePointer_t CreateConstantN (const char *name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:17250,test,tests,17250,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['test'],['tests']
Testability,"er, const char *name=nullptr);  Copy constructor. ;  ;  Public Member Functions inherited from RooProjectedPdf;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:1990,log,logic,1990,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['log'],['logic']
Testability,"er, size_t totalNumWeights) constDefinition NeuralNet.icc:1355; TMVA::DNN::SettingsSettings for the training of the neural net.Definition NeuralNet.h:730; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:67690,test,testError,67690,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testError']
Testability,"er, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; ampInitY1 - array of initial values of amplitudes of 1D ridges in y direction; fixAmpY1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional . Definition at line 5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logica",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:73852,log,logical,73852,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"er, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;������������������������ //logical value of ay parameter, which allows; to fix the parameter (not to fit).; �; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:49805,log,logical,49805,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability,"er. They are contained in the event object on the event branch, because we specified no splitting. Split Level = 1:; Setting the split level to 1 will create a branch for each data member in the Event object. First we execute Event and set the split level to 1 and start the browser to examine the split tree:; > Event 400 1 1 1; > root; root[] TFile f(""Event.root""); root[] TBrowser browser. 20.2.2 stress - Test and Benchmark; The executable stress is created by compiling stress.cxx. It completes sixteen tests covering the following capabilities of the ROOT framework. Functions, Random Numbers, Histogram Fits; Size & compression factor of a ROOT file; Purge, Reuse of gaps in TFile; 2D Histograms, Functions, 2D Fits; Graphics & PostScript; Subdirectories in a ROOT file; TNtuple, Selections, TCutG, TEventList; Split and Compression modes for Trees; Analyze Event.root file of stress 8; Create 10 files starting from Event.root; Test chains of Trees using the 10 files; Compare histograms of test 9 and 11; Merging files of a chain; Check correct rebuilt of Event.root in test 13; Divert Tree branches to separate files; Cling test (3 nested loops) with LHCb trigger. The program stress takes one argument, the number of events to process. The default is 1000 events. Be aware that executing stress with 1000 eventswill create several files consuming about 100 MB of disk space; running stress with 30 events will consume about 20 MB. The disk space is released once stress is done.; There are two ways to run stress:; From the system prompt or from the ROOT prompt using the interpreter.; > cd $ROOTSYS/test; > stress // default 1000 events; > stress 30 // test with 30 events; Start ROOT with the batch mode option (-b) to suppress the graphic output.; > root -b; root[] .L stress.cxx; root[] stress(1000)// test with 1000 events; root[] stress(30)// test with 30 events; The output of stress includes a pass/fail conclusion for each test, the total number of bytes read and written, and the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1083058,test,test,1083058,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,er.cxx;  ChebyshevPol.cxx;  DataRange.cxx;  DataVector.cxx;  Delaunay2D.cxx;  DistSampler.cxx;  DistSamplerOptions.cxx;  Factory.cxx;  FitConfig.cxx;  FitResult.cxx;  Fitter.cxx;  FitUtil.cxx;  FitUtilParallel.cxx;  GaussIntegrator.cxx;  GaussLegendreIntegrator.cxx;  GenAlgoOptions.cxx;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.cxx;  mixmax.h;  mixmax_skip_N256.icc;  MixMaxEngine.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  TComplex.cxx;  TDataPointN.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.h;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  G,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:45776,test,test,45776,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['test']
Testability,er.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:49189,test,testFunctor,49189,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testFunctor']
Testability,er.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSpa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:47767,test,testFunctor,47767,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testFunctor']
Testability,"er1D(const ROOT::Math::BrentMinimizer1D&); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual const char*Name() const; ROOT::Math::BrentMinimizer1D&operator=(const ROOT::Math::BrentMinimizer1D&); static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); voidSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(); ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(const ROOT::Math::IMinimizer1D&). Data Members; private:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; boolfLogScanflag to control usage of a log scan; intfNIterNumber of iterations needed for the last estimation.; intfNpxNumber of points to bracket minimum with grid (def is 100); intfStatusStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval.; doublefXMinimumPosition of the stimated minimum. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentMinimizer1D(); Default Constructor. . virtual ~BrentMinimizer1D(); Default Destructor. . {}. double XMinimum() const; Return current estimate of the position of the minimum. . { return fXMinimum; }. double XLower() const; Return current lower bound of the minimization interval. . { return fXMin; }. double XUpper() const; Return current upper bound of the minimization interval. . { return fXMax; }. double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__BrentMinimizer1D.html:2652,log,log,2652,root/html602/ROOT__Math__BrentMinimizer1D.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__BrentMinimizer1D.html,2,['log'],['log']
Testability,"er::SetCut( const TString& cut, const TString& className ) {; 576 SetCut( TCut(cut), className );; 577}; 578 ; 579////////////////////////////////////////////////////////////////////////////////; 580 ; 581void TMVA::DataLoader::SetCut( const TCut& cut, const TString& className ); 582{; 583 DefaultDataSetInfo().SetCut( cut, className );; 584}; 585 ; 586////////////////////////////////////////////////////////////////////////////////; 587 ; 588void TMVA::DataLoader::AddCut( const TString& cut, const TString& className ); 589{; 590 AddCut( TCut(cut), className );; 591}; 592 ; 593////////////////////////////////////////////////////////////////////////////////; 594void TMVA::DataLoader::AddCut( const TCut& cut, const TString& className ); 595{; 596 DefaultDataSetInfo().AddCut( cut, className );; 597}; 598 ; 599////////////////////////////////////////////////////////////////////////////////; 600/// prepare the training and test trees; 601 ; 602void TMVA::DataLoader::PrepareTrainingAndTestTree( const TCut& cut,; 603 Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest,; 604 const TString& otherOpt ); 605{; 606 SetInputTreesFromEventAssignTrees();; 607 ; 608 AddCut( cut );; 609 ; 610 DefaultDataSetInfo().SetSplitOptions( TString::Format(""nTrain_Signal=%i:nTrain_Background=%i:nTest_Signal=%i:nTest_Background=%i:%s"",; 611 NsigTrain, NbkgTrain, NsigTest, NbkgTest, otherOpt.Data()).Data() );; 612}; 613 ; 614////////////////////////////////////////////////////////////////////////////////; 615/// prepare the training and test trees; 616/// kept for backward compatibility; 617 ; 618void TMVA::DataLoader::PrepareTrainingAndTestTree( const TCut& cut, Int_t Ntrain, Int_t Ntest ); 619{; 620 SetInputTreesFromEventAssignTrees();; 621 ; 622 AddCut( cut );; 623 ; 624 DefaultDataSetInfo().SetSplitOptions( TString::Format(""nTrain_Signal=%i:nTrain_Background=%i:nTest_Signal=%i:nTest_Background=%i:SplitMode=Random:EqualTrainSample:!V"",; 625 Ntrain, Ntrain, Ntest, Ntest).Data() );; 6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8cxx_source.html:23734,test,test,23734,doc/master/DataLoader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html,1,['test'],['test']
Testability,"er::Solve:"" << Name() << "" max iterations "" << maxIter << "" and tolerance "" << absTol << std::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10374,test,test,10374,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,1,['test'],['test']
Testability,"er::fPointScale! size scale for points; TGLViewer::EPushActionTGLViewer::fPushAction; TGLRedrawTimer*TGLViewer::fRedrawTimer! timer for triggering redraws; Bool_tTGLViewer::fReferenceOn! reference marker on?; TGLVertex3TGLViewer::fReferencePos! reference position; Bool_tTGLViewer::fResetCamerasOnNextUpdatereposition camera on next update; Bool_tTGLViewer::fResetCamerasOnUpdatereposition camera on each update; Bool_tTGLViewerBase::fResetSceneInfosOnRenderRequest rebuild of view-specific scene data.; TGLRnrCtx*TGLViewerBase::fRnrCtx; list<TGLSceneInfo*>TGLViewerBase::fScenesRegistered scenes.; TGLSelectRecordTGLViewer::fSecSelRec! select record from last secondary select (should go to context); TGLSelectRecordTGLViewer::fSelRec! select record from last select (should go to context); TGLManipSet*TGLViewer::fSelectedPShapeRef!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTGLViewer::fSmartRefresh! cache logicals during scene rebuilds; Bool_tTGLViewer::fSmoothLines! smooth line edge rendering; Bool_tTGLViewer::fSmoothPoints! smooth point edge rendering; Bool_tTGLViewer::fStereo! use stereo rendering; Float_tTGLViewer::fStereoEyeOffsetFac!; Float_tTGLViewer::fStereoFrustumAsymFac!; Float_tTGLViewer::fStereoZeroParallax! position of zero-parallax plane: 0 - near clipping plane, 1 - far clipping plane; Short_tTGLViewerBase::fStyleViewer-style for rendering.; TGLRectTGLViewer::fViewport! viewport - drawn area; vector<TGLSceneInfo*>TGLViewerBase::fVisScenesVisible scenes.; Float_tTGLViewerBase::fWFLineWOptional override of scene wire-frame line-width; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TGLColorSetTGLViewer::fgDefaultColorSet! a shared, default color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. Int_tfBorder; TGCompositeFrame*fFrame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLEmbeddedViewer(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLEmbeddedViewer.html:23434,log,logicals,23434,root/html530/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html530/TGLEmbeddedViewer.html,3,['log'],['logicals']
Testability,"er::fPointScale! size scale for points; TGLViewer::EPushActionTGLViewer::fPushAction; TGLRedrawTimer*TGLViewer::fRedrawTimer! timer for triggering redraws; Bool_tTGLViewer::fReferenceOn! reference marker on?; TGLVertex3TGLViewer::fReferencePos! reference position; Bool_tTGLViewer::fResetCamerasOnNextUpdatereposition camera on next update; Bool_tTGLViewer::fResetCamerasOnUpdatereposition camera on each update; Bool_tTGLViewerBase::fResetSceneInfosOnRenderRequest rebuild of view-specific scene data.; TGLRnrCtx*TGLViewerBase::fRnrCtx; list<TGLSceneInfo*>TGLViewerBase::fScenesRegistered scenes.; TGLSelectRecordTGLViewer::fSecSelRec! select record from last secondary select (should go to context); TGLSelectRecordTGLViewer::fSelRec! select record from last select (should go to context); TGLManipSet*TGLViewer::fSelectedPShapeRef!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTGLViewer::fSmartRefresh! cache logicals during scene rebuilds; Bool_tTGLViewer::fSmoothLines! smooth line edge rendering; Bool_tTGLViewer::fSmoothPoints! smooth point edge rendering; Bool_tTGLViewer::fStereo! use stereo rendering; Float_tTGLViewer::fStereoEyeOffsetFac!; Float_tTGLViewer::fStereoFrustumAsymFac!; Float_tTGLViewer::fStereoZeroParallax! position of zero-parallax plane: 0 - near clipping plane, 1 - far clipping plane; Short_tTGLViewerBase::fStyleViewer-style for rendering.; TGLRectTGLViewer::fViewport! viewport - drawn area; vector<TGLSceneInfo*>TGLViewerBase::fVisScenesVisible scenes.; Float_tTGLViewerBase::fWFLineWOptional override of scene wire-frame line-width; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TGLColorSetTGLViewer::fgDefaultColorSet! a shared, default color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. TGPopupMenu*fCameraMenu; Bool_tfDeleteMenuBar; TStringfDirName; TGPopupMenu*fFileMenu; TGPopupMenu*fFileSaveMenu; TGLFormat*fFormat; TGLSAFrame*fFrame; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSAViewer.html:23923,log,logicals,23923,root/html528/TGLSAViewer.html,https://root.cern,https://root.cern/root/html528/TGLSAViewer.html,4,['log'],['logicals']
Testability,"er; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separate; processed that are connected to this process through a RooAbsRealMPFE front-end class. void initSimMode(RooSimultaneous* pdf, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize simultaneous p.d.f processing mode. Strip simultaneous; p.d.f into individual components, split dataset in subset; matching each component and create component test sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:40003,test,test,40003,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,1,['test'],['test']
Testability,"er;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Histogram ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile2Poly2D Profile Histogram with Polygonal Bins ;  CTProfile2PolyBinHelper class to represent a bin in the TProfile2Poly histogram ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:195407,benchmark,benchmark,195407,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['benchmark'],['benchmark']
Testability,"er>. ROOT::ESTLType UnderlyingIsSTLCont(string_view type); Return the type of STL collection, if any, that is the underlying type; of the given type. Namely return the value of IsSTLCont after stripping; pointer, reference and constness from the type.; UnderlyingIsSTLCont(""vector<int>*"") == IsSTLCont(""vector<int>""); See TClassEdit::IsSTLCont. type : type name: vector<list<classA,allocator>,allocator>*; result: 0 : not stl container; code of container 1=vector,2=list,3=deque,4=map; 5=multimap,6=set,7=multiset. ROOT::ESTLType IsSTLCont(string_view type); type : type name: vector<list<classA,allocator>,allocator>; result: 0 : not stl container; code of container 1=vector,2=list,3=deque,4=map; 5=multimap,6=set,7=multiset. int IsSTLCont(const char* type, int testAlloc); type : type name: vector<list<classA,allocator>,allocator>; testAlloc: if true, we test allocator, if it is not default result is negative; result: 0 : not stl container; abs(result): code of container 1=vector,2=list,3=deque,4=map; 5=multimap,6=set,7=multiset; positive val: we have a vector or list with default allocator to any depth; like vector<list<vector<int>>>; negative val: STL container other than vector or list, or non default allocator; For example: vector<deque<int>> has answer -1. bool IsStdClass(const char* type); return true if the class belongs to the std namespace. bool IsVectorBool(const char* name). string ResolveTypedef(const char* tname, bool resolveAll = false). string InsertStd(const char* tname). char* DemangleTypeIdName(const type_info& ti, int& errorCode); Demangle in a portable way the type id name.; IMPORTANT: The caller is responsible for freeing the returned const char*. EComplexType GetComplexType(const char* ). char* DemangleName(const char* mangled_name, int& errorCode); Demangle in a portable way the name.; IMPORTANT: The caller is responsible for freeing the returned const char*. » Author: Victor Perev 10/04/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClassEdit.html:6179,test,testAlloc,6179,root/html604/TClassEdit.html,https://root.cern,https://root.cern/root/html604/TClassEdit.html,3,['test'],"['test', 'testAlloc']"
Testability,"erCopy(seedloader, loader);; 2398 ; 2399 // Booking Seed; 2400 BookMethod(seedloader, theMethod, methodTitle, theOption);; 2401 ; 2402 // Train/Test/Evaluation; 2403 TrainAllMethods();; 2404 TestAllMethods();; 2405 EvaluateAllMethods();; 2406 ; 2407 // getting ROC; 2408 SROC = GetROCIntegral(xbitset.to_string(), methodTitle);; 2409 ; 2410 // cleaning information to process sub-seeds; 2411 TMVA::MethodBase *smethod = dynamic_cast<TMVA::MethodBase *>(fMethodsMap[xbitset.to_string().c_str()][0][0]);; 2412 TMVA::ResultsClassification *sresults = (TMVA::ResultsClassification *)smethod->Data()->GetResults(; 2413 smethod->GetMethodName(), Types::kTesting, Types::kClassification);; 2414 delete sresults;; 2415 delete seedloader;; 2416 this->DeleteAllMethods();; 2417 fMethodsMap.clear();; 2418 ; 2419 // removing global result because it is requiring a lot of RAM for all seeds; 2420 ; 2421 for (uint32_t i = 0; i < VIBITS; ++i) {; 2422 if (x & (1 << i)) {; 2423 y = x & ~(uint64_t(1) << i);; 2424 std::bitset<VIBITS> ybitset(y);; 2425 // need at least one variable; 2426 // NOTE: if sub-seed is zero then is the special case; 2427 // that count in xbitset is 1; 2428 uint32_t ny = static_cast<uint32_t>(log(x - y) / 0.693147);; 2429 if (y == 0) {; 2430 importances[ny] = SROC - 0.5;; 2431 continue;; 2432 }; 2433 ; 2434 // creating loader for sub-seed; 2435 TMVA::DataLoader *subseedloader = new TMVA::DataLoader(ybitset.to_string());; 2436 // adding variables from sub-seed; 2437 for (int index = 0; index < nbits; index++) {; 2438 if (ybitset[index]); 2439 subseedloader->AddVariable(varNames[index], 'F');; 2440 }; 2441 ; 2442 // Loading Dataset; 2443 DataLoaderCopy(subseedloader, loader);; 2444 ; 2445 // Booking SubSeed; 2446 BookMethod(subseedloader, theMethod, methodTitle, theOption);; 2447 ; 2448 // Train/Test/Evaluation; 2449 TrainAllMethods();; 2450 TestAllMethods();; 2451 EvaluateAllMethods();; 2452 ; 2453 // getting ROC; 2454 SSROC = GetROCIntegral(ybitset.to_string(), methodTitle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:101207,log,log,101207,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['log'],['log']
Testability,"erData.deltasEnd (),; 615 currLayerData.valueGradientsBegin (), currLayerData.gradientsBegin (),; 616 currLayerData.weightsBegin (), factorWeightDecay);; 617 }; 618 else; 619 {; 620 update (prevLayerData.valuesBegin (), prevLayerData.valuesEnd (),; 621 currLayerData.deltasBegin (), currLayerData.deltasEnd (),; 622 currLayerData.valueGradientsBegin (), currLayerData.gradientsBegin ());; 623 }; 624 ; 625 else; 626 { // no weight regularization; 627 update (prevLayerData.valuesBegin (), prevLayerData.valuesEnd (),; 628 currLayerData.deltasBegin (), currLayerData.deltasEnd (),; 629 currLayerData.valueGradientsBegin (), currLayerData.gradientsBegin ());; 630 }; 631 }; 632 ; 633 ; 634 ; 635 ; 636 ; 637 ; 638 ; 639 ; 640 ; 641 ; 642 ; 643 ; 644/*! \brief compute the drop-out-weight factor; 645 *; 646 * when using drop-out a fraction of the nodes is turned off at each cycle of the computation; 647 * once all nodes are turned on again (for instances when the test samples are evaluated),; 648 * the weights have to be adjusted to account for the different number of active nodes; 649 * this function computes the factor and applies it to the weights; 650 */; 651 template <typename WeightsType, typename DropProbabilities>; 652 void Net::dropOutWeightFactor (WeightsType& weights,; 653 const DropProbabilities& drops,; 654 bool inverse); 655 {; 656 if (drops.empty () || weights.empty ()); 657 return;; 658 ; 659 auto itWeight = std::begin (weights);; 660 auto itWeightEnd = std::end (weights);; 661 auto itDrop = std::begin (drops);; 662 auto itDropEnd = std::end (drops);; 663 size_t numNodesPrev = inputSize ();; 664 double dropFractionPrev = *itDrop;; 665 ++itDrop;; 666 ; 667 for (auto& layer : layers ()); 668 {; 669 if (itDrop == itDropEnd); 670 break;; 671 ; 672 size_t _numNodes = layer.numNodes ();; 673 ; 674 double dropFraction = *itDrop;; 675 double pPrev = 1.0 - dropFractionPrev;; 676 double p = 1.0 - dropFraction;; 677 p *= pPrev;; 678 ; 679 if (inverse); 680 {; 681 p = 1.0/p;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:19069,test,test,19069,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['test']
Testability,"erElement*) info->GetElements()->At(0);; 1588 TStreamerElement *s = (TStreamerElement*) info->GetElements()->At(1);; 1589 ; 1590 // Since we do not create TClass for pair of unknown types, old->GetValueClass can; 1591 // be nullptr even-though the type used be known. An example of such change; 1592 // is `RooExpensiveObjectCache::ExpensiveObject` which used to be recorded; 1593 // as `ExpensiveObject` in the name of the map ... making it unknown; 1594 // (and this is precisely the type of change we are trying to handle here/below!); 1595 info = old->GetValueClass() ? old->GetValueClass()->GetStreamerInfo() : nullptr;; 1596 assert(!info || info->GetElements()->GetEntriesFast() == 2);; 1597 TStreamerElement *of = info ? (TStreamerElement*) info->GetElements()->At(0) : nullptr;; 1598 TStreamerElement *os = info ? (TStreamerElement*) info->GetElements()->At(1) : nullptr;; 1599 ; 1600 TClass *firstNewCl = f ? f->GetClass() : 0;; 1601 TClass *secondNewCl = s ? s->GetClass() : 0;; 1602 ; 1603 TClass *firstOldCl = of ? of->GetClass() : 0;; 1604 TClass *secondOldCl = os ? os->GetClass() : 0;; 1605 ; 1606 if ((firstNewCl && !firstOldCl) || (secondNewCl && !secondOldCl)); 1607 {; 1608 std::vector<std::string> inside;; 1609 int nestedLoc;; 1610 TClassEdit::GetSplit( oldClass->GetName(), inside, nestedLoc, TClassEdit::kLong64 );; 1611 ; 1612 TClass *firstAltCl = firstOldCl;; 1613 TClass *secondAltCl = secondOldCl;; 1614 std::string firstNewName;; 1615 std::string secondNewName;; 1616 if (!info && !firstOldCl) {; 1617 firstOldCl = TClass::GetClass(inside[1].c_str(), kTRUE, kTRUE);; 1618 }; 1619 if (!info && !secondOldCl) {; 1620 secondOldCl = TClass::GetClass(inside[2].c_str(), kTRUE, kTRUE);; 1621 }; 1622 if (firstNewCl && !firstOldCl) {; 1623 firstAltCl = FindAlternate(context, inside[1], firstNewName);; 1624 } else if (firstAltCl) {; 1625 firstNewName = firstAltCl->GetName();; 1626 } else {; 1627 firstNewName = inside[1];; 1628 }; 1629 if (secondNewCl && !secondOldCl) {; 1630 s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:61492,assert,assert,61492,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['assert'],['assert']
Testability,"erNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsMoment; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:46040,log,logging,46040,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,3,['log'],['logging']
Testability,"erNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 731 of file MethodBase.h. ◆ TestClassification(). void TMVA::MethodBase::TestClassification ; (; ). virtual . initialization ; Reimplemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodBoost, and TMVA::MethodCuts.; Definition at line 1127 of file MethodBase.cxx. ◆ TestMulticlass(). void TMVA::MethodBase::TestMulticlass ; (; ). virtual . test multiclass classification ; Definition at line 1100 of file MethodBase.cxx. ◆ TestRegression(). void TMVA::MethodBase::TestRegression ; (; Double_t & ; bias, . Double_t & ; biasT, . Double_t & ; dev, . Double_t & ; devT, . Double_t & ; rms, . Double_t & ; rmsT, . Double_t & ; mInf, . Double_t & ; mInfT, . Double_t & ; corr, . Types::ETreeType ; type . ). virtual . calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample . bias = average deviation; dev = average absolute deviation; rms = rms of deviation . Definition at line 992 of file MethodBase.cxx. ◆ Train(). virtual void TMVA::MethodBase::Train ; (; ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodHMatrix, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::PyMethodBase, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodCompositeBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:76728,test,test,76728,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['test'],['test']
Testability,"erPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfIsClient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TSelector* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector object 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector file 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; Process specified TDSet on PROOF worker with TSelector object; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. void SetupFeedback(). public: // fix for broken compilers so TCleanup can call StopFeedback(). Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). Bool_t IsClient() const; { return kFALSE; }. TProofPlayerLocal(Bool_t client = kTRUE); { }. virtual ~TProofPlayerLocal(); { }. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"). » Author: Maarten Ballintijn 07/01/02 » Copyr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerLocal.html:16888,test,test,16888,root/html534/TProofPlayerLocal.html,https://root.cern,https://root.cern/root/html534/TProofPlayerLocal.html,3,['test'],['test']
Testability,erParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  LinkDef.h;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:55316,test,testMinimizer,55316,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['test'],['testMinimizer']
Testability,erParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:53858,test,testMinimizer,53858,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testMinimizer']
Testability,erSparse.cxx;  TQpProbBase.cxx;  TQpProbDens.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► misc;  ► memstat;  ► inc;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemStatHook.cxx;  TMemStatMng.cxx;  ► test;  leak_test.C;  run.C;  ► table;  ► inc;  tableDescriptor.h;  TCernLib.h;  TChair.h;  TColumnView.h;  TDataSet.h;  TDataSetIter.h;  TDsKey.h;  TFileIter.h;  TFi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:55914,test,testOperations,55914,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testOperations']
Testability,"erType()) {; 771 // if a different minimizer is allowed (e.g. when calling Hesse); 772 if (canDifferentMinim) {; 773 std::string msg = ""Using now "" + newMinimType;; 774 MATH_INFO_MSG(""Fitter::DoUpdateMinimizerOptions: "", msg.c_str());; 775 if (!DoInitMinimizer() ); 776 return false;; 777 }; 778 else {; 779 std::string msg = ""Cannot change minimizer. Continue using "" + fResult->MinimizerType();; 780 MATH_WARN_MSG(""Fitter::DoUpdateMinimizerOptions"",msg.c_str());; 781 }; 782 }; 783 ; 784 // create minimizer if it was not done before; 785 if (!fMinimizer) {; 786 if (!DoInitMinimizer()); 787 return false;; 788 }; 789 ; 790 // set new minimizer options (but not functions and parameters); 791 fMinimizer->SetOptions(fConfig.MinimizerOptions());; 792 return true;; 793}; 794 ; 795bool Fitter::DoMinimization(const ROOT::Math::IMultiGenFunction * chi2func) {; 796 // perform the minimization (assume we have already initialized the minimizer); 797 ; 798 assert(fMinimizer );; 799 ; 800 bool isValid = fMinimizer->Minimize();; 801 ; 802 if (!fResult) fResult = std::make_unique<FitResult>();; 803 ; 804 fResult->FillResult(fMinimizer,fConfig, fFunc, isValid, fDataSize, fFitType, chi2func );; 805 ; 806 // if requested run Minos after minimization; 807 if (isValid && fConfig.MinosErrors()) {; 808 // minos error calculation will update also FitResult; 809 CalculateMinosErrors();; 810 }; 811 ; 812 // when possible get number of calls from FCN and set in fit result; 813 if (fResult->fNCalls == 0 && fFitType != ROOT::Math::FitMethodFunction::kUndefined) {; 814 fResult->fNCalls = GetNCallsFromFCN();; 815 }; 816 ; 817 // fill information in fit result; 818 // if using an external obj function clone it for storing in FitResult; 819 if (fExtObjFunction) fObjFunction.reset(fExtObjFunction->Clone());; 820 fResult->fObjFunc = fObjFunction;; 821 fResult->fFitData = fData;; 822 ; 823#ifdef DEBUG; 824 std::cout << ""ROOT::Fit::Fitter::DoMinimization : ncalls = "" << fResult->fNCalls << "" type of objfunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:30719,assert,assert,30719,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['assert'],['assert']
Testability,"erType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true)c'torDefinition NeuralNet.h:901; TMVA::DNN::ClassificationSettings::m_inputstd::vector< double > m_inputDefinition NeuralNet.h:995; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::~ClassificationSettingsvirtual ~ClassificationSettings()d'torDefinition NeuralNet.h:924; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_amsstd::vector< double > m_amsDefinition NeuralNet.h:1000; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:99",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:52721,test,testSamplevoid,52721,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,3,['test'],"['test', 'testSample', 'testSamplevoid']"
Testability,"er_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); Int_tCopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); TSlave*TProof::CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd, Int_t nwk = 1); Int_tCreateSymLinks(TList* files); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tInit(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*TProof::MakePlayer(const char* player = 0, TSocket* s = 0); TProofQueryResult*MakeQueryResult(Long64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); voidTObject::MakeZombie(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:21300,assert,assert,21300,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,1,['assert'],['assert']
Testability,"erating inference code for the Keras model from "",modelFile,""in the header "", generatedHeaderFile); #Generating inference code using a ROOT binary file; model.Generate(ROOT.TMVA.Experimental.SOFIE.Options.kRootBinaryWeightFile); # add option to append to the same file the generated headers (pass True for append flag); model.OutputGenerated(generatedHeaderFile, True); #model.PrintGenerated(); return generatedHeaderFile; ; ; generatedHeaderFile = ""Higgs_Model.hxx""; #need to remove existing header file since we are appending on same one; import os; if (os.path.exists(generatedHeaderFile)):; weightFile = ""Higgs_Model.root""; print(""removing existing files"", generatedHeaderFile,weightFile); os.remove(generatedHeaderFile); os.remove(weightFile); ; GenerateModelCode(model1, generatedHeaderFile); GenerateModelCode(model2, generatedHeaderFile); GenerateModelCode(model3, generatedHeaderFile); ; #compile the generated code; ; ROOT.gInterpreter.Declare('#include ""' + generatedHeaderFile + '""'); ; ; #run the inference on the test data; session1 = ROOT.TMVA_SOFIE_Higgs_Model_4L_50.Session(""Higgs_Model.root""); session2 = ROOT.TMVA_SOFIE_Higgs_Model_4L_200.Session(""Higgs_Model.root""); session3 = ROOT.TMVA_SOFIE_Higgs_Model_2L_500.Session(""Higgs_Model.root""); ; hs1 = ROOT.TH1D(""hs1"",""Signal result 4L 50"",100,0,1); hs2 = ROOT.TH1D(""hs2"",""Signal result 4L 200"",100,0,1); hs3 = ROOT.TH1D(""hs3"",""Signal result 2L 500"",100,0,1); ; hb1 = ROOT.TH1D(""hb1"",""Background result 4L 50"",100,0,1); hb2 = ROOT.TH1D(""hb2"",""Background result 4L 200"",100,0,1); hb3 = ROOT.TH1D(""hb3"",""Background result 2L 500"",100,0,1); ; def EvalModel(session, x) :; result = session.infer(x); return result[0]; ; for i in range(0,x_test.shape[0]):; result1 = EvalModel(session1, x_test[i,:]); result2 = EvalModel(session2, x_test[i,:]); result3 = EvalModel(session3, x_test[i,:]); if (y_test[i] == 1) :; hs1.Fill(result1); hs2.Fill(result2); hs3.Fill(result3); else:; hb1.Fill(result1); hb2.Fill(result2); hb3.Fill(result3); ; de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html:4224,test,test,4224,doc/master/TMVA__SOFIE__Models_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html,1,['test'],['test']
Testability,"eration source1 > source2; 2582 ; 2583template <class Element>; 2584TMatrixT<Element> TMatrixTAutoloadOps::operator>(const TMatrixT<Element> &source1, const TMatrixT<Element> &source2); 2585{; 2586 TMatrixT<Element> target;; 2587 ; 2588 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2589 Error(""operator|(const TMatrixT&,const TMatrixT&)"", ""matrices not compatible"");; 2590 return target;; 2591 }; 2592 ; 2593 target.ResizeTo(source1);; 2594 ; 2595 const Element *sp1 = source1.GetMatrixArray();; 2596 const Element *sp2 = source2.GetMatrixArray();; 2597 Element *tp = target.GetMatrixArray();; 2598 const Element *const tp_last = tp + target.GetNoElements();; 2599 while (tp < tp_last) {; 2600 *tp++ = (*sp1) > (*sp2);; 2601 sp1++;; 2602 sp2++;; 2603 }; 2604 ; 2605 return target;; 2606}; 2607 ; 2608////////////////////////////////////////////////////////////////////////////////; 2609/// logical operation source1 > source2; 2610 ; 2611template <class Element>; 2612TMatrixT<Element> TMatrixTAutoloadOps::operator>(const TMatrixT<Element> &source1, const TMatrixTSym<Element> &source2); 2613{; 2614 TMatrixT<Element> target;; 2615 ; 2616 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2617 Error(""operator>(const TMatrixT&,const TMatrixTSym&)"", ""matrices not compatible"");; 2618 return target;; 2619 }; 2620 ; 2621 target.ResizeTo(source1);; 2622 ; 2623 const Element *sp1 = source1.GetMatrixArray();; 2624 const Element *sp2 = source2.GetMatrixArray();; 2625 Element *tp = target.GetMatrixArray();; 2626 const Element *const tp_last = tp + target.GetNoElements();; 2627 while (tp < tp_last) {; 2628 *tp++ = (*sp1) > (*sp2);; 2629 sp1++;; 2630 sp2++;; 2631 }; 2632 ; 2633 return target;; 2634}; 2635 ; 2636////////////////////////////////////////////////////////////////////////////////; 2637/// logical operation source1 > source2; 2638 ; 2639template <class Element>; 2640TMatrixT<Element> TMatrixTAutoloadOps::operator>(const TMatrixTSym<Element> &source1, const TMatrixT<E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:91583,log,logical,91583,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['log'],['logical']
Testability,"erator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); RooThresholdCategory&operator=(const RooThresholdCategory&); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); voidRooAbsArg::printDirty(Bool_t depth = kTRUE) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooAbsArg::printMetaArgs(ostream&) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooThresholdCategory.html:11499,test,testArg,11499,root/html602/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html602/RooThresholdCategory.html,2,['test'],['testArg']
Testability,"erator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooMinuit*_minuit! Internal minuit instance; static Int_tRooPrintable::_nameLength; RooRealProxy_nllInput -log(L) function; RooSetProxy_obsParameters of profile likelihood; RooArgSet_obsAbsMinObservable values at absolute minimum; TIterator*_oiter! Iterator of profile likelihood output parameter(s); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_parMarginialized parameters of likelihood; RooArgSet_paramAbsMinParameter values at absolute minimum; map<std::string,bool>_paramFixedParameter constant status at last time of use; TIterator*_piter! Iterator over profile likelihood parameters to be minimized ; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProfileLL.html:31536,log,log,31536,root/html526/RooProfileLL.html,https://root.cern,https://root.cern/root/html526/RooProfileLL.html,2,['log'],['log']
Testability,"erenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:25269,test,test,25269,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability,"erenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. THashList*fFileListList of files already uploaded; TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfInterruptflag interrupt state; TStringfLogFilePathFull remote path to log file; TMonitor*fMonitormonitor for the input socket; TStringfNameUnique name identifying this instance; Int_tfProtocolserver protocol version number; TObject*fReceivedObjectlast received object; TSeqCollection*fRootFileslist of (remote) root files; TSocket*fSocketsocket connection to server; TUrlfUrlserver's url; TRemoteObject*fWorkingDirworking (remote) directory; static Int_tfgPortAttemptsnumber of attempts to find a port; static Int_tfgPortLowerlower bound for ports; static Int_tfgPortUpperupper bound for ports. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TApplicationRemote(const char* url, Int_t debug = 0, const char* script = 0); Main constructor: start a remote session at 'url' accepting callbacks; on local port 'port'; if port is already in use scan up to 'scan - 1'; ports starting from port + 1, i.e. port + 1, ... , port + scan - 1. ~TApplicationRemote(); Destructor. Int_t Broadcast(const TMessage& mess); Broadcast a message to the remote session.; Returns 0 on success, -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, Int_t type = kRRT_Undef); Broadcast a cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationRemote.html:12816,log,log,12816,root/html526/TApplicationRemote.html,https://root.cern,https://root.cern/root/html526/TApplicationRemote.html,5,['log'],['log']
Testability,"erenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TF1*fApproxPosteriorTF1 representing the scanned posterior function; doublefBrfPrecisionroot finder precision; RooAbsData*fDatadata set ; RooAbsReal*fIntegratedLikelihoodintegrated likelihood function, i.e - unnormalized posterior function ; TStringfIntegrationType; doublefLeftSideFractionfraction of probability content on left side of interval; RooAbsReal*fLikelihoodinternal pointer to likelihood function ; RooAbsReal*fLogLikeinternal pointer to log likelihood function; Double_tfLowercomputer lower interval bound; Double_tfNLLMinminimum value of Nll ; intfNScanBinsnumber of bins to scan, if = -1 no scan is done (default); RooArgSetfNuisanceParameters; RooAbsPdf*fNuisancePdfnuisance pdf (needed when using nuisance sampling technique); intfNumIterationsnumber of iterations (when using ToyMC); RooArgSetfPOIPOI; RooAbsPdf*fPdfmodel pdf (could contain the nuisance pdf as constraint term); ROOT::Math::IBaseFunctionOneDim*fPosteriorFunctionfunction representing the posterior; RooAbsPdf*fPosteriorPdfnormalized (on the poi) posterior pdf ; RooAbsPdf*fPriorPOIprior pdf for POI; RooAbsPdf*fProductPdfinternal pointer to model * prior; doublefSizesize used for getting the interval; Double_tfUpperupper interval bound; Bool_tfValidInterval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BayesianCalculator(); default constructor. BayesianCalculator( /* const char* name, const char* title, */ RooAbsData& data, RooAbsPdf& pdf,						 const RooArgSet& POI,						 RooAbsPdf& priorPOI,						 const RooArgSet* nuisanceParameters ); Constructor from data set, model pdf, parameter of interests and prior pdf; If nuisance parameters are given they will be integrated according eith",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:9419,log,log,9419,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,2,['log'],['log']
Testability,"eries of cuts (""rules""); Use[""RuleFit""] = 1;; // ---------------------------------------------------------------; ; std::cout << std::endl;; std::cout << ""==> Start TMVAClassification"" << std::endl;; ; // Select methods (don't look at this code - not of interest); if (myMethodList != """") {; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; ; std::vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );; for (UInt_t i=0; i<mlist.size(); i++) {; std::string regMethod(mlist[i]);; ; if (Use.find(regMethod) == Use.end()) {; std::cout << ""Method \"""" << regMethod << ""\"" not known in TMVA under this name. Choose among the following:"" << std::endl;; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) std::cout << it->first << "" "";; std::cout << std::endl;; return 1;; }; Use[regMethod] = 1;; }; }; ; // --------------------------------------------------------------------------------------------------; ; // Here the preparation phase begins; ; // Read training and test data; // (it is also possible to use ASCII format as input -> see TMVA Users Guide); // Set the cache directory for the TFile to the current directory. The input; // data file will be downloaded here if not present yet, then it will be read; // from the cache path directly.; TFile::SetCacheFileDir(""."");; std::unique_ptr<TFile> input{TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"")};; if (!input || input->IsZombie()) {; throw std::runtime_error(""ERROR: could not open data file"");; }; std::cout << ""--- TMVAClassification : Using input file: "" << input->GetName() << std::endl;; ; // Register the training and test trees; ; TTree *signalTree = (TTree*)input->Get(""TreeS"");; TTree *background = (TTree*)input->Get(""TreeB"");; ; // Create a ROOT output file where TMVA will store ntuples, histograms, etc.; TString outfileName(""TMVAC.root"");; std::unique_ptr<TFile> outputFile{TFile::Open(outfileName, ""RECRE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:84779,test,test,84779,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,"erits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the value of 'obj' into a pointer to the class described by 'cl'. void SetUnloaded(); Call this method to indicate that the shared library containing this; class's code has been removed (unloaded) from the process's memory. TVirtualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. Bool_t MatchL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClass.html:42102,test,test,42102,root/html534/TClass.html,https://root.cern,https://root.cern/root/html534/TClass.html,1,['test'],['test']
Testability,"erits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the value of 'obj' into a pointer to the class described by 'cl'. void SetUnloaded(); Call this method to indicate that the shared library containing this; class's code has been removed (unloaded) from the process's memory. TVirtualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. UInt_t GetChe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:35804,test,test,35804,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,4,['test'],['test']
Testability,"ermind ; . Transform back to ; from ; , using; the result from the Principal Component Analysis. Testing the parameterization. The class also provides functionality for testing the, over the; training sample, found parameterization; (TMultiDimFit::Fit). This is done by passing; the class a test sample of tuples of the form ; , where ; are the independent; variables, the known, dependent quantity, and is; the square error in ; (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every ; in the; test sample, and. is evaluated. The relative error over the test sample. should not be to low or high compared to from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representive of; the problem. A large difference in the reduced over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use Minuit; [4] to further improve the fit, using the test sample. Christian Holm; November 2000, NBI. Bibliography; 1. Philip R. Bevington and D. Keith Robinson.; Data Reduction and Error Analysis for the Physical Sciences.; McGraw-Hill, 2 edition, 1992.; 2. René Brun et al.; Mudifi.; Long writeup DD/75-23, CERN, 1980.; 3. Gene H. Golub and Charles F. van Loan.; Matrix Computations.; John Hopkins Univeristy Press, Baltimore, 3 edition, 1996.; 4. F. James.; Minuit.; Long writeup D506, CERN, 1998.; 5. H. Wind.; Function parameterization.; In Proceedings of the 1972 CERN Computing and Data Processing; School, volume 72-21 of Yellow report. CERN, 1972.; 6. H. Wind.; 1. principal component analysis, 2. pattern recognition for track; finding, 3. interpolation and functional representation.; Yellow report EP/81-12, CERN, 1981. */. Function Members (Methods); public:. TMultiDimFit(); TMultiDimFit(const TMultiDimFit&); TMultiDimFit(Int_t dimension, TMultiDimFit::EMDFPolyType type = kMonomials, Option_t* option = """");",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:12573,test,test,12573,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['test'],['test']
Testability,"ernally, randomly, and by accept/reject sampling; Int_t_updateFMaxPerEventIf true, maximum p.d.f value needs to be recalculated for each event; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0); Initialize a new context for generating events with the specified; variables, using the specified PDF model. A prototype dataset (if provided); is not cloned and still belongs to the caller. The contents and shape; of this dataset can be changed between calls to generate() as long as the; expected columns to be copied to the generated dataset are present.; Any argument supplied in the forceDirect RooArgSet are always offered; for internal generation to the p.d.f., even if this is deemed unsafe by; the logic of RooGenContext. ~RooGenContext(); Destructor. void attach(const RooArgSet& params); Attach the cloned model to the event buffer we will be filling. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of the generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate one event. The 'remaining' integer is not used other than; for printing messages. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0). » Last changed: Sat Sep 5 17:29:32 2015 » Last generated: 2015-09-05 17:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooGenContext.html:11605,log,logic,11605,root/html604/RooGenContext.html,https://root.cern,https://root.cern/root/html604/RooGenContext.html,1,['log'],['logic']
Testability,"ero or negative @ numerator=g=2.2451e-08, denominator=g_Int[x]=-0.905133; p.d.f normalization integral is zero or negative @ numerator=g=2.2451e-08, denominator=g_Int[x]=-0.905133; p.d.f normalization integral is zero or negative @ numerator=g=2.2451e-08, denominator=g_Int[x]=-0.905133; p.d.f normalization integral is zero or negative @ numerator=g=2.2451e-08, denominator=g_Int[x]=-0.905133; p.d.f normalization integral is zero or negative @ numerator=g=2.2451e-08, denominator=g_Int[x]=-0.905133; p.d.f normalization integral is zero or negative @ numerator=g=2.2451e-08, denominator=g_Int[x]=-0.905133; p.d.f normalization integral is zero or negative @ numerator=g=2.2451e-08, denominator=g_Int[x]=-0.905133; ; ; prevFCN = 122.3539561 f=0.2285, m=1.706, p0=7.868e-05, s=0.8134, ; prevFCN = 28.78647388 f=0.1125, m=2.24, p0=0.006973, s=-0.6231, RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (31.8407) to force MIGRAD to back out of this region. Error log follows.; Parameter values: f=0.112499 m=2.24008 p0=0.00697315 s=-0.623113; RooAddPdf::model[ f * g_over_g_Int[x] + [%] * p_over_p_Int[x] ]; getLogVal() top-level p.d.f evaluates to NaN @ !refCoefNorm=(x = 0), !pdfs=(g_over_g_Int[x] = nan,p_over_p_Int[x] = 0.05), !coefficients=(f = 0.112499); getLogVal() top-level p.d.f evaluates to NaN @ !refCoefNorm=(x = 0), !pdfs=(g_over_g_Int[x] = nan,p_over_p_Int[x] = 0.05), !coefficients=(f = 0.112499); getLogVal() top-level p.d.f evaluates to NaN @ !refCoefNorm=(x = 0), !pdfs=(g_over_g_Int[x] = nan,p_over_p_Int[x] = 0.05), !coefficients=(f = 0.112499); getLogVal() top-level p.d.f evaluates to NaN @ !refCoefNorm=(x = 0), !pdfs=(g_over_g_Int[x] = nan,p_over_p_Int[x] = 0.05), !coefficients=(f = 0.112499); getLogVal() top-level p.d.f evaluates to NaN @ !refCoefNorm=(x = 0), !pdfs=(g_over_g_Int[x] = nan,p_over_p_Int[x] = 0.05), !coefficients=(f = 0.112499); getLogVal() top-level p.d.f evaluates to NaN @ !refCoefNorm=(x = 0), !pdfs=(g_over_g_Int[x] =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8C.html:15055,log,log,15055,doc/master/rf506__msgservice_8C.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8C.html,2,['log'],['log']
Testability,"errideReturn function value at current estimate of the minimum.Definition BrentMinimizer1D.cxx:67; ROOT::Math::BrentRootFinderClass for finding the root of a one dimensional function using the Brent algorithm.Definition BrentRootFinder.h:51; ROOT::Math::BrentRootFinder::SetFunctionbool SetFunction(const ROOT::Math::IGenFunction &f, double xlow, double xup) overrideSets the function for the rest of the algorithms.Definition BrentRootFinder.cxx:42; ROOT::Math::BrentRootFinder::Solvebool Solve(int maxIter=100, double absTol=1E-8, double relTol=1E-10) overrideReturns the X value corresponding to the function value fy for (xmin<x<xmax).Definition BrentRootFinder.cxx:66; ROOT::Math::BrentRootFinder::Rootdouble Root() const overrideReturns root value.Definition BrentRootFinder.h:98; ROOT::Math::BrentRootFinder::SetNpxvoid SetNpx(int npx)Set the number of point used to bracket root using a grid.Definition BrentRootFinder.h:89; ROOT::Math::BrentRootFinder::SetLogScanvoid SetLogScan(bool on)Set a log grid scan (default is equidistant bins) will work only if xlow > 0.Definition BrentRootFinder.h:95; ROOT::Math::ChebyshevPolDefinition ChebyshevPol.h:129; ROOT::Math::Factory::CreateMinimizerstatic ROOT::Math::Minimizer * CreateMinimizer(const std::string &minimizerType="""", const std::string &algoType="""")static method to create the corresponding Minimizer given the string Supported Minimizers types are: ...Definition Factory.cxx:63; ROOT::Math::Functor1DFunctor1D class for one-dimensional functions.Definition Functor.h:95; ROOT::Math::GaussIntegratorUser class for performing function integration.Definition GaussIntegrator.h:40; ROOT::Math::GaussIntegrator::Errordouble Error() const overrideReturn the estimate of the absolute Error of the last Integral calculation.Definition GaussIntegrator.cxx:176; ROOT::Math::GaussIntegrator::SetRelTolerancevoid SetRelTolerance(double eps) overrideSet the desired relative Error.Definition GaussIntegrator.h:65; ROOT::Math::GaussIntegrator::Integr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:156965,log,log,156965,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['log']
Testability,"erridevirtual . Implements RooAbsArg.; Definition at line 34 of file RooRealMPFE.h. ◆ constOptimizeTestStatistic(). void RooRealMPFE::constOptimizeTestStatistic ; (; ConstOpCode ; opcode, . bool ; doAlsoTracking = true . ). overrideprotectedvirtual . Intercept call to optimize constant term in test statistics and forward it to object on server side. ; Reimplemented from RooAbsArg.; Definition at line 681 of file RooRealMPFE.cxx. ◆ doApplyNLLW2(). void RooRealMPFE::doApplyNLLW2 ; (; bool ; flag). protected . Definition at line 741 of file RooRealMPFE.cxx. ◆ enableOffsetting(). void RooRealMPFE::enableOffsetting ; (; bool ; flag). overridevirtual . Control verbose messaging related to inter process communication on both client and server side. ; Reimplemented from RooAbsReal.; Definition at line 754 of file RooRealMPFE.cxx. ◆ evaluate(). double RooRealMPFE::evaluate ; (; ); const. overrideprotectedvirtual . Send message to server process to retrieve output value If error were logged use logEvalError() on remote side transfer those errors to the local eval error queue. ; Implements RooAbsReal.; Definition at line 558 of file RooRealMPFE.cxx. ◆ followAsSlave(). void RooRealMPFE::followAsSlave ; (; RooRealMPFE & ; master). inline . Definition at line 47 of file RooRealMPFE.h. ◆ getCarry(). double RooRealMPFE::getCarry ; (; ); const. protectedvirtual . Definition at line 185 of file RooRealMPFE.cxx. ◆ getValV(). double RooRealMPFE::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . If value needs recalculation and calculation has not been started with a call to calculate() start it now. ; This function blocks until remote process has finished calculation and returns remote value ; Reimplemented from RooAbsReal.; Definition at line 530 of file RooRealMPFE.cxx. ◆ initialize(). void RooRealMPFE::initialize ; (; ). protected . Initialize the remote process and message passing pipes between current process and remote process. ; Definition at line 200 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealMPFE.html:66329,log,logged,66329,doc/master/classRooRealMPFE.html,https://root.cern,https://root.cern/doc/master/classRooRealMPFE.html,2,['log'],"['logEvalError', 'logged']"
Testability,"error = softMaxCrossEntropy (begin (probabilities), end (probabilities),; 1615 begin (truth), end (truth),; 1616 layerData.deltasBegin (), layerData.deltasEnd (),; 1617 layerData.inverseActivationFunction (),; 1618 patternWeight);; 1619 break;; 1620 }; 1621 }; 1622 if (factorWeightDecay != 0 && eRegularization != EnumRegularization::NONE); 1623 {; 1624 error = weightDecay (error, itWeight, itWeightEnd, factorWeightDecay, eRegularization);; 1625 }; 1626 return error;; 1627 }; 1628 ; 1629 ; 1630 ; 1631 ; 1632 ; 1633 ; 1634 ; 1635// /*! \brief pre-training; 1636// *; 1637// * in development; 1638// */; 1639// template <typename Minimizer>; 1640// void Net::preTrain (std::vector<double>& weights,; 1641// std::vector<Pattern>& trainPattern,; 1642// const std::vector<Pattern>& testPattern,; 1643// Minimizer& minimizer, Settings& settings); 1644// {; 1645// auto itWeightGeneral = std::begin (weights);; 1646// std::vector<Pattern> prePatternTrain (trainPattern.size ());; 1647// std::vector<Pattern> prePatternTest (testPattern.size ());; 1648 ; 1649// size_t _inputSize = inputSize ();; 1650 ; 1651// // transform pattern using the created preNet; 1652// auto initializePrePattern = [&](const std::vector<Pattern>& pttrnInput, std::vector<Pattern>& pttrnOutput); 1653// {; 1654// pttrnOutput.clear ();; 1655// std::transform (std::begin (pttrnInput), std::end (pttrnInput),; 1656// std::back_inserter (pttrnOutput),; 1657// [](const Pattern& p); 1658// {; 1659// Pattern pat (p.input (), p.input (), p.weight ());; 1660// return pat;; 1661// });; 1662// };; 1663 ; 1664// initializePrePattern (trainPattern, prePatternTrain);; 1665// initializePrePattern (testPattern, prePatternTest);; 1666 ; 1667// std::vector<double> originalDropFractions = settings.dropFractions ();; 1668 ; 1669// for (auto& _layer : layers ()); 1670// {; 1671// // compute number of weights (as a function of the number of incoming nodes); 1672// // fetch number of nodes; 1673// size_t numNodes = _layer.numNodes ();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:54649,test,testPattern,54649,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testPattern']
Testability,"error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0); Build specified package on the client. Executes the PROOF-INF/BUILD.sh; script if it exists on the client.; If opt == 0, both the preparation and building phases are run.; If opt == 1, only the preparation phase (asserting and, eventually, downloading; of the package) is done; '*path' contains the full path to the; package to be passed in the next call; If opt == 2, only the building phase is run using *path .; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::kBuildPackage; case). Keep in sync in case of changes. Int_t LoadPackage(const char* package, Bool_t notOnClient = kFALSE, TList* loadopts = 0); Load specified package. Executes the PROOF-INF/SETUP.C script; on all active nodes. If notOnClient = true, don't load package; on the client. The default is to load the package also on the client.; The argument 'loadopts' specify a list of objects to be passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t LoadPackageOnClient(const char* package, TList* loadopts = 0); Load specified package in the client. Executes the PROOF-INF/SETUP.C; script on the client. Returns 0 in cas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:62024,assert,asserting,62024,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['assert'],['asserting']
Testability,"ers for hypothesis test // Is it used ????; RooArgSetfConditionalObsRooArgSet specifying the conditional observables; RooAbsData*fData; RooArgSetfNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetfNullParamsRooArgSet specifying null parameters for hypothesis test; RooArgSetfPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*fPdf; Double_tfSizesize of the test (eg. specified rate of Type I error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetTestSize(Double_t size). SetModel(const RooStats::ModelConfig& model). virtual ~CombinedCalculator(); destructor. { }. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. HypoTestResult* GetHypoTest() const; main interface to get a HypoTestResult, pure virtual. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet, add to the the workspace if not already there. void SetNullModel(const RooStats::ModelConfig& ). void SetAlternateModel(const RooStats::ModelConfig& ). void SetPdf(RooAbsPdf& pdf); specific setting - keep for convenience- some of them could be removed; Set the Pdf. { fPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetNullParameters(const RooArgSet& set); set parameter values for the null if using a common PDF. {fNullParams.removeAll(); fNullParams.add(set);}. void SetAlternateParameters(const RooArgSet& set); set p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__CombinedCalculator.html:4300,test,test,4300,root/html534/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__CombinedCalculator.html,1,['test'],['test']
Testability,"ers is of course defined by the user,; who uses the values of those parameters to calculate his function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__FCNBase.html:2555,log,log,2555,root/html534/ROOT__Minuit2__FCNBase.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__FCNBase.html,1,['log'],['log']
Testability,"ers |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::MethodPyRandomForest Class Reference. . Definition at line 33 of file MethodPyRandomForest.h. Public Member Functions;  MethodPyRandomForest (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodPyRandomForest (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodPyRandomForest (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::PyMethodBase;  PyMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  PyMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~PyMethodBase ();  ; PyObject * Eval (TString code);  Evaluate Python code. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyRandomForest.html:989,log,logProgress,989,doc/master/classTMVA_1_1MethodPyRandomForest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyRandomForest.html,1,['log'],['logProgress']
Testability,"ers; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__NumEventsTestStat.html:1647,test,test,1647,root/html534/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__NumEventsTestStat.html,1,['test'],['test']
Testability,"erson-Darling Tests"" by F.W. Scholz ; 358 and M.A. Stephens (1987), Journal of the American Statistical Association, ; 359 Vol 82, No. 399, pp 918-924.; 360 Code from kSamples package from R (author F. Scholtz); 361 ; 362 This function uses the upper T_m quantiles as obtained via simulation of; 363 the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; 364 for each sample, and after standardization, in order to emulate the Table 1 ; 365 values given in the above reference. However, here we estimate p-quantiles; 366 for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; 367 .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; 368 .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; 369 First the appropriate p-quantiles are determined from those simulated; 370 for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; 371 Since we use only m=2 we avoid this interpolation. ; 372 ; 373 Next linear inetrpolation to find the observed p value given the observed test statistic value. ; 374 We use interpolation in the test statistic -> log((1-p)/p) domain; 375 and we extrapolatelinearly) beyond p = .00001 and .99999.; 376 */; 377 ; 378 // sample values ; 379 //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; 380 //int ns = ms.size();; 381 const int ns = 8;; 382 double ts[ ] = { -1.1954, -1.5806, -1.8172, ; 383 -2.0032, -2.2526, -2.4204, -2.5283, -4.2649, -1.1786, -1.5394, ; 384 -1.7728, -1.9426, -2.1685, -2.3288, -2.4374, -3.8906, -1.166, ; 385 -1.5193, -1.7462, -1.9067, -2.126, -2.2818, -2.3926, -3.719, ; 386 -1.1407, -1.4659, -1.671, -1.8105, -2.0048, -2.1356, -2.2348, ; 387 -3.2905, -1.1253, -1.4371, -1.6314, -1.7619, -1.9396, -2.0637, ; 388 -2.1521, -3.0902, -1.0777, -1.3503, -1.5102, -1.6177, -1.761, ; 389 -1.8537, -1.9178, -2.5758, -1.0489, -1.2984, -1.4415, -1.5355, ; 390 -1.6625, -1.738, -1.7936, -2.3263, -0.9978, -1.2098, -1.3251, ; 391 -1.4007, -1.4977, -1.5555, -1.5941, -1.96, -0.9417, -1.1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:13141,test,test,13141,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['test']
Testability,"ertainty ();  Boltzmann's constant uncertainty. ;  ; Double_t TMath::Landau (Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE);  The LANDAU function. ;  ; Double_t TMath::LandauI (Double_t x);  Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ;  ; Double_t TMath::LaplaceDist (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t TMath::LaplaceDistI (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t TMath::Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t TMath::Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t TMath::LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator TMath::LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t TMath::LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator TMath::LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t TMath::LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t TMath::Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t TMath::Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t TMath::Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t TMath::LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t TMath::LogNormal (Double_t x, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:11497,log,log,11497,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,2,['log'],['log']
Testability,"erterPlot (HypoTestInverterResult *results);  constructor ;  ;  ~HypoTestInverterPlot () override;  destructor ;  ; void Draw (Option_t *opt="""") override;  Draw the scan result in the current canvas Possible options: """" (default): draw observed + expected with 1 and 2 sigma bands SAME : draw in the current axis OBS : draw only the observed plot EXP : draw only the expected plot CLB : draw also CLb 2CL : drow both CLs+b and CLs. ;  ; TClass * IsA () const override;  ; TMultiGraph * MakeExpectedPlot (double sig1=1, double sig2=2);  Make the expected plot and the bands nsig1 and nsig2 indicates the n-sigma value for the bands if nsig1 = 0 no band is computed (only expected value) if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also done. ;  ; TGraphErrors * MakePlot (Option_t *opt="""");  return a TGraphErrors with the obtained observed p-values resultinf from the scan By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently of the flag ;  ; SamplingDistPlot * MakeTestStatPlot (int index, int type=0, int nbins=100);  Plot the test statistic distributions. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:2103,test,test,2103,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['test'],['test']
Testability,"erthe test statistic sampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); standard constructor. ~FeldmanCousins(); destructor; if(fOwnsWorkspace && fWS) delete fWS;. void SetModel(const RooStats::ModelConfig& ); set the model. TestStatSampler* GetTestStatSampler() const. void CreateTestStatSampler() const; specify the Test Statistic and create a ToyMC test statistic sampler. void CreateParameterPoints() const; specify the parameter points to perform the construction.; allow ability to profile on some nuisance paramters. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::PointSetInterval. FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); FeldmanCousins();; Common constructor. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& ); Set the DataSet. void SetPdf(RooAbsPdf& ); Set the Pdf. void SetParameters(const RooArgSet& ); specify the parameters of interest in the interval. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). void SetParameterPointsToTest(RooAbsData& pointsToTest); User-defined set of points to test. void SetPOIPointsToTest(RooAbsData& poiToTest); User-defined set of points to test. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. RooAbsData* GetPointsToScan(). ConfidenceBelt* GetConfidenceBelt(); {return fConfBelt;}. void UseAdaptiveSampling(bool flag = true); {fAdaptiveSampling=flag;}. void AdditionalNToysFactor(double fac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__FeldmanCousins.html:4996,test,test,4996,root/html530/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html530/RooStats__FeldmanCousins.html,5,['test'],['test']
Testability,"erthe test statistic sampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); standard constructor. ~FeldmanCousins(); destructor; if(fOwnsWorkspace && fWS) delete fWS;. void SetModel(const RooStats::ModelConfig& ); set the model. TestStatSampler* GetTestStatSampler() const. void CreateTestStatSampler() const; specify the Test Statistic and create a ToyMC test statistic sampler. void CreateParameterPoints() const; specify the parameter points to perform the construction.; allow ability to profile on some nuisance paramters. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::PointSetInterval. FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); FeldmanCousins();; Common constructor. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& ); Set the DataSet. void SetPdf(RooAbsPdf& ); Set the Pdf. void SetParameters(const RooArgSet& ); specify the parameters of interest in the interval. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. RooAbsData* GetPointsToScan(). ConfidenceBelt* GetConfidenceBelt(); {return fConfBelt;}. void UseAdaptiveSampling(bool flag = true); {fAdaptiveSampling=flag;}. void AdditionalNToysFactor(double fact); {fAdditionalNToysFactor = fact;}. void SetNBins(Int_t bins); {fNbins = bins;}. void FluctuateNumDataEntries(bool flag = true); {fFluctuateData = flag;}. void SaveBeltToFile(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__FeldmanCousins.html:4823,test,test,4823,root/html528/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html528/RooStats__FeldmanCousins.html,1,['test'],['test']
Testability,"erty(ClassInfo_t* info) const final;; 414 void ClassInfo_Delete(ClassInfo_t* info) const final;; 415 void ClassInfo_Delete(ClassInfo_t* info, void* arena) const final;; 416 void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const final;; 417 void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const final;; 418 ClassInfo_t* ClassInfo_Factory(Bool_t all = kTRUE) const final;; 419 ClassInfo_t* ClassInfo_Factory(ClassInfo_t* cl) const final;; 420 ClassInfo_t* ClassInfo_Factory(const char* name) const final;; 421 ClassInfo_t* ClassInfo_Factory(DeclId_t declid) const final;; 422 Longptr_t ClassInfo_GetBaseOffset(ClassInfo_t* fromDerived, ClassInfo_t* toBase, void * address, bool isDerivedObject) const final;; 423 int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto, Bool_t objectIsConst = false, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch) const final;; 424 bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info, Bool_t testio = kFALSE) const final;; 425 bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const final;; 426 void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const final;; 427 void ClassInfo_Init(ClassInfo_t* info, int tagnum) const final;; 428 bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const final;; 429 bool ClassInfo_IsEnum(const char* name) const final;; 430 bool ClassInfo_IsScopedEnum(ClassInfo_t* info) const final;; 431 EDataType ClassInfo_GetUnderlyingType(ClassInfo_t* info) const final;; 432 bool ClassInfo_IsLoaded(ClassInfo_t* info) const final;; 433 bool ClassInfo_IsValid(ClassInfo_t* info) const final;; 434 bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Longptr_t* offset, ROOT::EFunctionMatchMode /* mode */ = ROOT::kConversionMatch) const final;; 435 bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Bool_t objectIsConst, Longptr_t* offset, ROOT::EFunctionMatchMode /* mod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:22524,test,testio,22524,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['test'],['testio']
Testability,"ervables is returned. Double_t findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval). Return value of x (in range xmin,xmax) at which function equals yval.; (Calculation is performed with Brent root finding algorithm). RooGenFunction* iGenFunction(RooRealVar& x, const RooArgSet& nset = RooArgSet()). RooMultiGenFunction* iGenFunction(const RooArgSet& observables, const RooArgSet& nset = RooArgSet()). RooFitResult* chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Perform a chi^2 fit to given histogram By default the fit is executed through the MINUIT; commands MIGRAD, HESSE in succession. The following named arguments are supported. Options to control construction of -log(L). Range(const char* name) -- Fit only data inside range with given name; Range(Double_t lo, Double_t hi) -- Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; Multiple comma separated range names can be specified.; NumCPU(int num) -- Parallelize NLL calculation on num CPUs; Optimize(Bool_t flag) -- Activate constant term optimization (on by default). Options to control flow of fit procedure. InitialHesse(Bool_t flag) -- Flag controls if HESSE before MIGRAD as well, off by default; Hesse(Bool_t flag) -- Flag controls if HESSE is run after MIGRAD, on by default; Minos(Bool_t flag) -- Flag controls if MINOS is run after HESSE, on by default; Minos(const RooArgSet& set) -- Only run MINOS on given subset of arguments; Save(Bool_t flag) -- Flac controls if RooFitResult object is produced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Ste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:71258,log,log,71258,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,6,['log'],['log']
Testability,"erver(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tRooAbsCategory::numTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBinningCategory.html:9456,test,testArg,9456,root/html526/RooBinningCategory.html,https://root.cern,https://root.cern/root/html526/RooBinningCategory.html,8,['test'],['testArg']
Testability,"erver(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tRooAbsCategory::numTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& obser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBinningCategory.html:9624,test,testArg,9624,root/html530/RooBinningCategory.html,https://root.cern,https://root.cern/root/html530/RooBinningCategory.html,8,['test'],['testArg']
Testability,"erverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); RooMinimizer*minimizer(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; RooAbsReal&nll(); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tnumEval() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooProfileLL&operator=(const RooProfileLL&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProfileLL.html:18896,test,testArg,18896,root/html602/RooProfileLL.html,https://root.cern,https://root.cern/root/html602/RooProfileLL.html,2,['test'],['testArg']
Testability,"erwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  . #include <RooRealVar.h>. Inheritance diagram for RooRealVar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ SharedPropertiesMap. using RooRealVar::SharedPropertiesMap = std::map<RooSharedProperties::UUID,std::weak_ptr<RooRealVarSharedProperties> >. protected . Definition at line 165 of file RooRealVar.h. Constructor & Destructor Documentation. ◆ RooRealVar() [1/5]. RooRealVar::RooRealVar ; (; ). Default constructor. ; Definition at line 111 of file RooRealVar.cxx. ◆ RooRealVar() [2/5]. RooRealVar::RooRealVar ; (; const char * ; name, . const char * ; title, . double ; value, . const char * ; unit = """" . ). Create a constant variable with a value and optional unit. ; Definition at line 120 of file RooRealVar.cxx. ◆ RooRealVar() [3/5]. RooRealVar::RooRealVar ; (; const char * ; name, . const char * ; title, . double ; minVal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:72857,test,testArg,72857,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,4,['test'],['testArg']
Testability,"eryStatuskStopped; static TQueryResult::EQueryStatuskSubmitted; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfArchivedwhether the query has been archived; Long64_tfBytesnumber of bytes processed; Bool_tfDrawtrue if draw action query; TDatimefEndtime when processing ended; Long64_tfEntriesnumber of entries processed; Bool_tfFinalizedwhether Terminate has been run; Long64_tfFirstfirst entry processed; Float_tfInitTimeInitialization time (seconds) (millisec precision); TList*fInputListinput list; contains also data sets, entry list, ...; TStringfLibListblank-separated list of libs loaded at fStart; TMacro*fLogFilefile with log messages from the query; TStringTNamed::fNameobject identifier; Int_tfNumWrksNumber of workers at start; TStringfOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*fOutputListoutput list; TStringfParListcolon-separated list of PAR loaded at fStart; Float_tfProcTimeProcessing time (seconds) (millisec precision); TStringfResultFileURL of the file where results have been archived; TMacro*fSelecHdrselector header file; TMacro*fSelecImpselector implementation file; Int_tfSeqNumquery unique sequential number; TDatimefStarttime when processing started; TQueryResult::EQueryStatusfStatusquery status; TStringTNamed::fTitleobject title; Float_tfUsedCPUreal CPU time used (seconds). Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TQueryResult. ←. TProofQueryResult. Function documentation; TQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, const char* selec); Main constructor. ~TQueryResult(); Destructor. TQueryResult * CloneInfo(); Return an instance of TQueryResult containing only the local; info fields, i.e. no outputlist, liblist, dset, selectors, etc..; Used for fast retrieve of information about existing queries; and their status. void SaveSelector(const char* selec); Save the selector header and implementation into the de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQueryResult.html:8016,log,log,8016,root/html602/TQueryResult.html,https://root.cern,https://root.cern/root/html602/TQueryResult.html,1,['log'],['log']
Testability,"es and rasters are shown; int raster_long; // decides whether the rasters are drawn as long lines; int raster_color; // color of the rasters; char *raster_description_x; // x axis description; char *raster_description_y; // y axis description. int pen_color; // color of spectrum; int pen_dash; // style of pen; int pen_width; // width of line. int chanmark_style; // style of channel marks; int chanmark_width; // width of channel marks; int chanmark_height; // height of channel marks; int chanmark_en_dis; // decides whether the channel marks are shown; int chanmark_color; // color of channel marks. // auxiliary variables, transform coefficients, for internal use only; double mx;; double my;; double px;; double py;. // auxiliary internal variables, working place; double gbezx,gbezy;; TPoint bz[4];; };; The examples using different display parameters are shown in the next few Figures. Display mode -polyline, width of pen=3. Display mode- bars, shown channel marks. Display mode- steps, log scale, shown channel marks. Display mode -Bezier curve interpolation, shown channel marks. Display mode- rainbow bars, color algorithm (model) RGB, number of color levels=1024, pen width=3. Display mode-empty bars, color algorithm YIQ, number of color levels 2048. 7.2 2-DIMENSIONAL SPECTRA; The 2-dimensional visualization function displays spectrum (or its part) on the Canvas of a form. Before calling the function, one has to fill in the two_dim_pic structure containing all parameters of the display. The function has a form of; char *display2(struct two_dim_pic* p);; This function displays the source two-dimensional spectrum on Canvas. All parameters are grouped in the two_dim_pic structure. Before calling the display2 function, the structure should be filled in and the address of two_dim_pic should be passed as a parameter to display2 function. The meaning of corresponding parameters is apparent from the description of one_dim_pic structure. The constants, which can be used for appropr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:70122,log,log,70122,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['log'],['log']
Testability,"es and rasters are shown; int raster_long; // decides whether the rasters are drawn as long lines; int raster_color; // color of the rasters; char *raster_description_x; // x axis description; char *raster_description_y; // y axis description. int pen_color; // color of spectrum; int pen_dash; // style of pen; int pen_width; // width of line. int chanmark_style; // style of channel marks; int chanmark_width; // width of channel marks; int chanmark_height; // height of channel marks; int chanmark_en_dis; // decides whether the channel marks are shown; int chanmark_color; // color of channel marks. // auxiliary variables, transform coefficients, for internal use only; double mx;; double my;; double px;; double py;. // auxiliary internal variables, working place; double gbezx,gbezy;; TPoint bz[4];; };; The examples using different display parameters are shown in the next few Figures. Display mode -polyline, width of pen=3. Display mode- bars, shown channel marks. Display mode- steps, log scale, shown channel marks. Display mode -Bezier curve interpolation, shown channel marks. Display mode- rainbow bars, color algorithm (model) RGB, number of color levels=1024, pen width=3. Display mode-empty bars, color algorithm YIQ, number of color levels 2048. 7.2 2-DIMENSIONAL SPECTRA; The 2-dimensional visualization function displays spectrum (or part of it) on the Canvas of a form. Before calling the function one has to fill in two_dim_pic structure containing all parameters of the display. The function has the form; char *display2(struct two-dim-pic* p);; This function displays the source two dimensional spectrum on Canvas. All parameters are grouped in two_dim_pic structure. Before calling display2 function the structure should be filled in and the address of two_dim_pic passed as parameter to display2 function. The meaning of appropriate parameters is apparent from description of one_dim_pic structure. The constants , which can be used for appropriate parameters are defined in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:69165,log,log,69165,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['log'],['log']
Testability,"es appropriately). ;  ; Int_t AddWorkers (TList *wrks);  Works on the master node only. ;  ; Int_t AssertPath (const char *path, Bool_t writable);  Make sure that 'path' exists; if 'writable' is kTRUE, make also sure that the path is writable. ;  ; Int_t Collect (ESlaves list=kActive, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; Int_t Collect (TList *slaves, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; TSlave * CreateSlave (const char *url, const char *ord, Int_t perf, const char *image, const char *workdir);  Create a new TSlave of type TSlave::kSlave. ;  ; TSlave * CreateSubmaster (const char *url, const char *ord, const char *image, const char *msd, Int_t nwk=1);  Create a new TSlave of type TSlave::kMaster. ;  ; TList * GetEnabledPackages () const;  ; TList * GetListOfActiveSlaves () const;  ; TVirtualProofPlayer * GetPlayer () const;  ; TPluginHandler * GetProgressDialog () const;  ; Int_t GetSandbox (TString &sb, Bool_t assert=kFALSE, const char *rc=0);  Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ;  ; void HandleLibIncPath (const char *what, Bool_t add, const char *dirs);  Handle lib, inc search paths modification request. ;  ; Int_t HandleOutputOptions (TString &opt, TString &target, Int_t action);  Extract from opt information about output handling settings. ;  ; Int_t Init (const char *masterurl, const char *conffile, const char *confdir, Int_t loglevel, const char *alias=0);  Start the PROOF environment. ;  ; void InitMembers ();  Default initializations. ;  ; virtual Int_t PollForNewWorkers ();  Asks the PROOF Serv for new workers in Dynamic Startup mode and activates them. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofSuperMaster.html:36237,assert,assert,36237,doc/master/classTProofSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofSuperMaster.html,2,"['assert', 'sandbox']","['assert', 'sandbox']"
Testability,"es appropriately). ;  ; Int_t AddWorkers (TList *wrks);  Works on the master node only. ;  ; Int_t AssertPath (const char *path, Bool_t writable);  Make sure that 'path' exists; if 'writable' is kTRUE, make also sure that the path is writable. ;  ; Int_t Collect (ESlaves list=kActive, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; Int_t Collect (TList *slaves, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; TSlave * CreateSlave (const char *url, const char *ord, Int_t perf, const char *image, const char *workdir);  Create a new TSlave of type TSlave::kSlave. ;  ; TSlave * CreateSubmaster (const char *url, const char *ord, const char *image, const char *msd, Int_t nwk=1);  Create a new TSlave of type TSlave::kMaster. ;  ; TList * GetEnabledPackages () const;  ; TList * GetListOfActiveSlaves () const;  ; TVirtualProofPlayer * GetPlayer () const;  ; TPluginHandler * GetProgressDialog () const;  ; Int_t GetSandbox (TString &sb, Bool_t assert=kFALSE, const char *rc=0);  Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ;  ; void HandleLibIncPath (const char *what, Bool_t add, const char *dirs);  Handle lib, inc search paths modification request. ;  ; Int_t HandleOutputOptions (TString &opt, TString &target, Int_t action);  Extract from opt information about output handling settings. ;  ; Int_t Init (const char *masterurl, const char *conffile, const char *confdir, Int_t loglevel, const char *alias=0);  Start the PROOF environment. ;  ; void InitMembers ();  Default initializations. ;  ; virtual TVirtualProofPlayer * MakePlayer (const char *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; virtual Int_t PollForNewWorkers ();  Asks the PROOF Serv for new workers in Dynamic Startup mode and activates them. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:37773,assert,assert,37773,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,4,"['assert', 'sandbox']","['assert', 'sandbox']"
Testability,"es appropriately). ;  ; Int_t AddWorkers (TList *wrks);  Works on the master node only. ;  ; Int_t AssertPath (const char *path, Bool_t writable);  Make sure that 'path' exists; if 'writable' is kTRUE, make also sure that the path is writable. ;  ; Int_t Collect (ESlaves list=kActive, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; Int_t Collect (TList *slaves, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; TSlave * CreateSlave (const char *url, const char *ord, Int_t perf, const char *image, const char *workdir);  Create a new TSlave of type TSlave::kSlave. ;  ; TSlave * CreateSubmaster (const char *url, const char *ord, const char *image, const char *msd, Int_t nwk=1);  Create a new TSlave of type TSlave::kMaster. ;  ; TList * GetEnabledPackages () const;  ; TList * GetListOfActiveSlaves () const;  ; TVirtualProofPlayer * GetPlayer () const;  ; TPluginHandler * GetProgressDialog () const;  ; Int_t GetSandbox (TString &sb, Bool_t assert=kFALSE, const char *rc=0);  Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ;  ; void HandleLibIncPath (const char *what, Bool_t add, const char *dirs);  Handle lib, inc search paths modification request. ;  ; Int_t HandleOutputOptions (TString &opt, TString &target, Int_t action);  Extract from opt information about output handling settings. ;  ; Int_t Init (const char *masterurl, const char *conffile, const char *confdir, Int_t loglevel, const char *alias=0);  Start the PROOF environment. ;  ; void InitMembers ();  Default initializations. ;  ; virtual TVirtualProofPlayer * MakePlayer (const char *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:37212,assert,assert,37212,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,2,"['assert', 'sandbox']","['assert', 'sandbox']"
Testability,"es as identifiers, the created Boolean nodes will assume that the shapes are positioned with an identity transformation with respect to the frame of the created composite. In order to provide some positioning of the combination components, we have to attach after each shape identifier the name of an existing transformation, separated by a colon. Obviously all transformations created for this purpose have to be objects with unique names in order to be properly substituted during parsing.; 18.3.3.2 Composite Shape Example; One should have in mind that the same shape or matrix identifiers can be used many times in the same expression, as in the following example:; const Double_t sq2 = TMath::Sqrt(2.);; gSystem->Load(""libGeom"");; TGeoManager *mgr =; new TGeoManager(""Geom"",""composite shape example"");; TGeoMedium *medium = 0;; TGeoVolume *top = mgr->MakeBox(""TOP"",medium,100,250,250);; mgr->SetTopVolume(top);. // make shape components; TGeoBBox *sbox = new TGeoBBox(""B"",100,125*sq2,125*sq2);; TGeoTube *stub = new TGeoTube(""T"",0,100,250);; TGeoPgon *spgon = new TGeoPgon(""P"",0.,360.,6,2);; spgon->DefineSection(0,-250,0,80);; spgon->DefineSection(1,250,0,80);. // define some rotations; TGeoRotation *r1 = new TGeoRotation(""r1"",90,0,0,180,90,90);; r1->RegisterYourself();; TGeoRotation *r2 = new TGeoRotation(""r2"",90,0,45,90,45,270);; r2->RegisterYourself();; // create a composite; TGeoCompositeShape *cs = new TGeoCompositeShape(""cs"",; ""((T+T:r1)-(P+P:r1))*B:r2"");; TGeoVolume *comp = new TGeoVolume(""COMP"",cs);; comp->SetLineColor(5);. // put it in the top volume; top->AddNode(comp,1);; mgr->CloseGeometry();; // visualize it with ray tracing; top->Raytrace();. A composite shape example. Composite shapes can be subsequently used for defining volumes. Moreover, these volumes contain other volumes, following the general criteria. Volumes created based on composite shapes cannot be divided.; 18.3.4 Navigation Methods Performed By Shapes; Shapes are named objects and register themselves",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:920067,stub,stub,920067,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['stub'],['stub']
Testability,"es can be accessed from your PC, from the web and from large-scale file delivery systems used e.g. in the GRID. ROOT trees spread over several files can be chained and accessed as a unique object, allowing for loops over huge amounts of data.; Mine data Powerful mathematical and statistical tools are provided to operate on your data. The full power of a C++ application and of parallel processing is available for any kind of data manipulation. Data can also be generated following any statistical distribution and modeled, making it possible to simulate complex systems.; Publish results Results can be displayed with histograms, scatter plots, fitting functions. ROOT graphics may be adjusted real-time by few mouse clicks. Publication-quality figures can be saved in PDF or other formats.; Run interactively or build your own application You can use the Cling C++ interpreter for your interactive sessions and to write macros, or you can compile your program to run at full speed. In both cases, you can also create a graphical user interface.; Use ROOT within other languages ROOT provides a set of bindings in order to seamlessly integrate with existing languages such as Python, R and Mathematica. Save dataAccess dataProcess dataShow resultsInteractive or built applicationIntegration with other languages. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/about-root.html:4492,test,tests,4492,d/about-root.html,https://root.cern,https://root.cern/d/about-root.html,1,['test'],['tests']
Testability,"es can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& testArg, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg); Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* nset, const RooAbsArg& testArg); Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsArg* source) const; Mark this object as having changed its shape, and propagate this status; change to all of our clients. Bool_t redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, server",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:23358,test,testArg,23358,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,2,['test'],['testArg']
Testability,"es containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:137366,benchmark,benchmarks,137366,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['benchmark'],['benchmarks']
Testability,"es in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:26156,log,logical,26156,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"es not exist,; 1853/// 0 otherwise). When the system flag is kTRUE, the library is considered; 1854/// a permanent system library that should not be unloaded during the; 1855/// course of the session.; 1856 ; 1857int TSystem::Load(const char *module, const char *entry, Bool_t system); 1858{; 1859 // don't load libraries that have already been loaded; 1860 TString libs( GetLibraries() );; 1861 TString l(BaseName(module));; 1862 ; 1863 Ssiz_t idx = l.Last('.');; 1864 if (idx != kNPOS) {; 1865 l.Remove(idx+1);; 1866 }; 1867 for (idx = libs.Index(l); idx != kNPOS; idx = libs.Index(l,idx+1)) {; 1868 // The libs contains the sub-string 'l', let's make sure it is; 1869 // not just part of a larger name.; 1870 if (idx == 0 || libs[idx-1] == '/' || libs[idx-1] == '\\') {; 1871 Ssiz_t len = libs.Length();; 1872 idx += l.Length();; 1873 if (!l.EndsWith(""."") && libs[idx]=='.'); 1874 idx++;; 1875 // Skip the soversion.; 1876 while (idx < len && isdigit(libs[idx])) {; 1877 ++idx;; 1878 // No need to test for len here, at worse idx==len and lib[idx]=='\0'; 1879 if (libs[idx] == '.') {; 1880 ++idx;; 1881 }; 1882 }; 1883 while (idx < len && libs[idx] != '.') {; 1884 if (libs[idx] == ' ' || idx+1 == len) {; 1885 return 1;; 1886 }; 1887 ++idx;; 1888 }; 1889 }; 1890 }; 1891 if (l[l.Length()-1] == '.') {; 1892 l.Remove(l.Length()-1);; 1893 }; 1894 if (l.BeginsWith(""lib"")) {; 1895 l.Replace(0, 3, ""-l"");; 1896 for(idx = libs.Index(l); idx != kNPOS; idx = libs.Index(l,idx+1)) {; 1897 if ((idx == 0 || libs[idx-1] == ' ') &&; 1898 (libs[idx+l.Length()] == ' ' || libs[idx+l.Length()] == 0)) {; 1899 return 1;; 1900 }; 1901 }; 1902 }; 1903 ; 1904 char *path = DynamicPathName(module);; 1905 ; 1906 int ret = -1;; 1907 if (path) {; 1908 // load any dependent libraries; 1909 TString deplibs = gInterpreter->GetSharedLibDeps(path);; 1910 if (!deplibs.IsNull()) {; 1911 TString delim("" "");; 1912 TObjArray *tokens = deplibs.Tokenize(delim);; 1913 for (Int_t i = tokens->GetEntriesFast()-1; i > 0; i--) {; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:60807,test,test,60807,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['test'],['test']
Testability,"es not; 956 // match in the 'current' in memory TStreamerInfo for; 957 // a non foreign class (we can not get here if this is; 958 // a foreign class so we do not need to test it),; 959 // we need to add this one more test since the CINT behaviour; 960 // with enums changed over time, so verify the checksum ignoring; 961 // members of type enum. We also used to not count the //[xyz] comment; 962 // in the checksum, so test for that too.; 963 if ( (fCheckSum == fClass->GetCheckSum() || fClass->MatchLegacyCheckSum(fCheckSum) ); 964 &&(info->GetCheckSum() == fClass->GetCheckSum() || fClass->MatchLegacyCheckSum(info->GetCheckSum())); 965 ); 966 {; 967 match = kTRUE;; 968 }; 969 if (fOldVersion <= 2) {; 970 // Names of STL base classes was modified in vers==3. Allocators removed; 971 // (We could be more specific (see test for the same case below); 972 match = kTRUE;; 973 }; 974 if (!match && CompareContent(0,info,kFALSE,kFALSE,file)) {; 975 match = kTRUE;; 976 }; 977#ifdef TEST_FOR_BACKWARD_COMPATIBILITY_ABSTRACT_CLASSES; 978 if (!match && file->GetVersion() < 51800 && fClass && (fClass->Property() & kIsAbstract); 979 && fClass->GetListOfDataMembers()->GetEntries() != 0); 980 {; 981 // In some instances of old files (v5.17 and less), some StreamerInfo for; 982 // an abstract class where not written correctly, and add no; 983 // data member listed. If in addition one of the data member; 984 // was declared using a typedef _and_ the current class definition; 985 // uses a different typedef, we are unable to recalculate the; 986 // checksum as it was, because the information is missing from; 987 // the StreamerInfo, and for the same reason CompareContent can; 988 // not know whether this is okay or not ...; 989 //; 990 // Since this is such an unlikely scenario, let's complain; 991 // about it anyway (The class layout *may* have changed, we; 992 // don't know).; 993 ; 994 // if (this has only base classes) {; 995 // match = kTRUE;; 996 // }; 997 }; 998#endif; 999 } else {; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:35870,test,test,35870,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['test'],['test']
Testability,"es of the event; int fEventSize; // size (in bytes) of the event; };. The data members of the Particle class describe the particle properties as shown below:; class Particle {; public:; double fPosX,fPosY,fPosZ; // particle position nearest to interaction point; double fMomentum; // particle momentum; double fMomentumPhi; // particle direction (phi); double fMomentumEta; // particle direction (eta); Long64_t fTags[128]; // particle tags; };. The TTree contains a branch event, which in turn contains the branches fParticles and fEventSize. It simply reflects the layout of class EventData. Each TTree entry has one object of type class EventData, which in turn has a collection of particles. Each tree entry can have a different number of particles. There are 200 TTree entries containing a total of 22994 particles.; If you are curious how we generated the TTree: the script is in our git repository.; . ‹ Introductory Tutorials; up; Accessing a TTree With a TBrowser ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meet-ttree.html:5197,test,tests,5197,d/meet-ttree.html,https://root.cern,https://root.cern/d/meet-ttree.html,1,['test'],['tests']
Testability,"es only if -cxxmodule; 1451 // flag is passed.; 1452 if (fCxxModulesEnabled && !fromRootCling) {; 1453 // For now we prefer rootcling to enumerate explicitly its modulemaps.; 1454 std::vector<std::string> ModuleMaps;; 1455 std::string ModuleMapSuffix = ROOT::FoundationUtils::GetPathSeparator() + ""ROOT.modulemap"";; 1456 ModuleMaps.push_back(TROOT::GetIncludeDir().Data() + ModuleMapSuffix);; 1457 GetEnvVarPath(""CLING_MODULEMAP_FILES"", ModuleMaps);; 1458 ; 1459 std::string cwd = gSystem->WorkingDirectory();; 1460 // Give highest precedence of the modulemap in the cwd if any.; 1461 if (llvm::sys::fs::exists(cwd + ModuleMapSuffix)); 1462 ModuleMaps.push_back(cwd + ModuleMapSuffix);; 1463 ; 1464 for (const std::string& M : ModuleMaps); 1465 clingArgsStorage.push_back(""-fmodule-map-file="" + M);; 1466 ; 1467 std::string ModulesCachePath;; 1468 EnvOpt = llvm::sys::Process::GetEnv(""CLING_MODULES_CACHE_PATH"");; 1469 if (EnvOpt.has_value()){; 1470 StringRef Env(*EnvOpt);; 1471 assert(llvm::sys::fs::exists(Env) && ""Path does not exist!"");; 1472 ModulesCachePath = Env.str();; 1473 } else {; 1474 ModulesCachePath = TROOT::GetSharedLibDir();; 1475 }; 1476 ; 1477 clingArgsStorage.push_back(""-fmodules-cache-path="" + ModulesCachePath);; 1478 }; 1479 ; 1480 std::vector<const char*> interpArgs;; 1481 for (std::vector<std::string>::const_iterator iArg = clingArgsStorage.begin(),; 1482 eArg = clingArgsStorage.end(); iArg != eArg; ++iArg); 1483 interpArgs.push_back(iArg->c_str());; 1484 ; 1485 // Activate C++ modules support. If we are running within rootcling, it's up; 1486 // to rootcling to set this flag depending on whether it wants to produce; 1487 // C++ modules.; 1488 TString vfsArg;; 1489 if (fCxxModulesEnabled) {; 1490 if (!fromRootCling) {; 1491 // We only set this flag, rest is done by the CIFactory.; 1492 interpArgs.push_back(""-fmodules"");; 1493 interpArgs.push_back(""-fno-implicit-module-maps"");; 1494 // We should never build modules during runtime, so let's enable the; 1495 // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:54111,assert,assert,54111,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"es served by this object. . ReturnsTrue if values are served. ; Definition at line 108 of file RooAbsArg.h. ◆ expensiveObjectCache(). RooExpensiveObjectCache & RooAbsArg::expensiveObjectCache ; (; ); const. Definition at line 2324 of file RooAbsArg.cxx. ◆ fillTreeBranch(). virtual void RooAbsArg::fillTreeBranch ; (; TTree & ; t). protectedpure virtual . Implemented in RooAbsCategory, RooAbsReal, RooRealVar, and RooStringVar. ◆ findConstantNodes() [1/2]. bool RooAbsArg::findConstantNodes ; (; const RooArgSet & ; observables, . RooArgSet & ; cacheList . ). Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ; Definition at line 1859 of file RooAbsArg.cxx. ◆ findConstantNodes() [2/2]. bool RooAbsArg::findConstantNodes ; (; const RooArgSet & ; observables, . RooArgSet & ; cacheList, . RooLinkedList & ; processedNodes . ). Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ; Definition at line 1877 of file RooAbsArg.cxx. ◆ findNewServer(). RooAbsArg * RooAbsArg::findNewServer ; (; const RooAbsCollection & ; newSet, . bool ; nameChange . ); const. Find the new server in the specified set that matches the old server. ; Parameters. [in]newSetSearch this set by name for a new server. ; [in]nameChangeIf true, search for an item with the bool attribute ""ORIGNAME:<oldName>"" set. Use <object>.setAttribute(""ORIGNAME:<oldName>"") to set this attribute. . ReturnsPointer to the new server or nullptr if there's no unique match. ; Definition at line 1201 of file RooAbsArg.cxx. ◆ findServer() [1/3]. RooAbsArg * RooAbsArg::findServer ; (; const char * ; name); const. inline . Return server of this with name name. Returns nullptr if not found. ; Definition at line 184 of file RooAbsArg.h. ◆ findServer() [2/3]. RooAbsArg * RooAbsArg::findServer ; (; const RooAbsArg & ; arg); const. inline . Return s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:59990,test,test,59990,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['test'],['test']
Testability,"es the TMVA version string from the training version code on the fly. TString GetTrainingROOTVersionString() const; calculates the ROOT version string from the training version code on the fly. TMVA::MethodBase* GetThisBase(); return a pointer the base class of this method. void ResetThisBase(); reset required for RootFinder. Double_t GetKSTrainingVsTest(Char_t SorB, TString opt = ""X""). const TMVA::Event* GetEvent(const TMVA::Event* ev) const. const TMVA::Event* GetEvent() const. const TMVA::Event* GetEvent(Long64_t ievt) const. const TMVA::Event* GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const. const TMVA::Event* GetTrainingEvent(Long64_t ievt) const. const TMVA::Event* GetTestingEvent(Long64_t ievt) const. void Train(). void SetTrainTime(Double_t trainTime); store and retrieve time used for training. { fTrainTime = trainTime; }. Double_t GetTrainTime() const; { return fTrainTime; }. void SetTestTime(Double_t testTime); store and retrieve time used for testing. { fTestTime = testTime; }. Double_t GetTestTime() const; { return fTestTime; }. void Init(); options treatment. void DeclareOptions(). void ProcessOptions(). void Reset(); reset the Method --> As if it was not yet trained, just instantiated; virtual void Reset() = 0;; for the moment, I provide a dummy (that would not work) default, just to make; compilation/running w/o parameter optimisation still possible. {return;}. Double_t GetMvaValue(Double_t* errLower = 0, Double_t* errUpper = 0); classifier response:; some methods may return a per-event error estimate; error calculation is skipped if err==0. const std::vector<Float_t>& GetRegressionValues(const TMVA::Event *const ev); regression response. const std::vector<Float_t>& GetRegressionValues(). const std::vector<Float_t>& GetMulticlassValues(); multiclass classification response. const Ranking* CreateRanking(); create ranking. void AddWeightsXMLTo(void* parent) const; the actual ""weights"". void ReadWeightsFromXML(void* wghtnode). void ReadWeightsF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBase.html:31261,test,testTime,31261,root/html534/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBase.html,1,['test'],['testTime']
Testability,"es the ratio of profiled likelihoods. 	 By default the calculation is:. 	 Lambda(mu_alt , conditional MLE for alt nuisance); 	log --------------------------------------------; 	 Lambda(mu_null , conditional MLE for null nuisance). 	where Lambda is the profile likeihood ratio, so the; 	MLE for the null and alternate are subtracted off. 	If SetSubtractMLE(false) then it calculates:. 	 L(mu_alt , conditional MLE for alt nuisance); 	log --------------------------------------------; 	 L(mu_null , conditional MLE for null nuisance). 	The values of the parameters of interest for the alternative; 	hypothesis are taken at the time of the construction.; 	If empty, it treats all free parameters as nuisance parameters. 	The value of the parameters of interest for the null hypotheses; 	are given at each call of Evaluate(data,nullPOI). ~RatioOfProfiledLikelihoodsTestStat(void). Double_t ProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf); returns -logL(poi, conditional MLE of nuisance params); it does not subtract off the global MLE; because nuisance parameters of null and alternate may not; be the same. Double_t Evaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest); evaluate the ratio of profile likelihood. void EnableDetailedOutput(bool e = true). void SetAlwaysReuseNLL(Bool_t flag). void SetReuseNLL(Bool_t flag). void SetMinimizer(const char* minimizer). void SetStrategy(Int_t strategy). void SetTolerance(Double_t tol). void SetPrintLevel(Int_t printLevel). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. const RooArgSet* GetDetailedOutput(void); Returns detailed output. The value returned by this function is updated after each call to Evaluate().; The returned RooArgSet contains the following for the alternative and null hypotheses:; <ul>; <li> the minimum nll, fitstatus and convergence",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__RatioOfProfiledLikelihoodsTestStat.html:3332,log,logL,3332,root/html534/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__RatioOfProfiledLikelihoodsTestStat.html,1,['log'],['logL']
Testability,"es to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:7236,log,logical,7236,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,2,['log'],['logical']
Testability,"es to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:5894,log,logical,5894,doc/v632/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html,5,['log'],['logical']
Testability,"es to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; virtual Long64_t GetSize () const;  Returns the current file size. ;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; TClass * IsA () const override;  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:10181,log,logical,10181,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,3,['log'],['logical']
Testability,"es()).fWeightFileDir = ""myWeightDirectory"";; 156 ; 157 // Define the input variables that shall be used for the MVA training; 158 // note that you may also use variable expressions, such as: ""3*var1/var2*abs(var3)""; 159 // [all types of expressions that can also be parsed by TTree::Draw( ""expression"" )]; 160 dataloader->AddVariable( ""var1"", ""Variable 1"", ""units"", 'F' );; 161 dataloader->AddVariable( ""var2"", ""Variable 2"", ""units"", 'F' );; 162 ; 163 // You can add so-called ""Spectator variables"", which are not used in the MVA training,; 164 // but will appear in the final ""TestTree"" produced by TMVA. This TestTree will contain the; 165 // input variables, the response values of all trained MVAs, and the spectator variables; 166 dataloader->AddSpectator( ""spec1:=var1*2"", ""Spectator 1"", ""units"", 'F' );; 167 dataloader->AddSpectator( ""spec2:=var1*3"", ""Spectator 2"", ""units"", 'F' );; 168 ; 169 // Add the variable carrying the regression target; 170 dataloader->AddTarget( ""fvalue"" );; 171 ; 172 // It is also possible to declare additional targets for multi-dimensional regression, ie:; 173 // factory->AddTarget( ""fvalue2"" );; 174 // BUT: this is currently ONLY implemented for MLP; 175 ; 176 // Read training and test data (see TMVAClassification for reading ASCII files); 177 // load the signal and background event samples from ROOT trees; 178 TFile *input(0);; 179 TString fname = ""./tmva_reg_example.root"";; 180 if (!gSystem->AccessPathName( fname )) {; 181 input = TFile::Open( fname ); // check if file in local directory exists; 182 }; 183 else {; 184 TFile::SetCacheFileDir(""."");; 185 input = TFile::Open(""http://root.cern/files/tmva_reg_example.root"", ""CACHEREAD""); // if not: download from ROOT server; 186 }; 187 if (!input) {; 188 std::cout << ""ERROR: could not open data file"" << std::endl;; 189 exit(1);; 190 }; 191 std::cout << ""--- TMVARegression : Using input file: "" << input->GetName() << std::endl;; 192 ; 193 // Register the regression tree; 194 ; 195 TTree *regTree = (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C_source.html:6574,test,test,6574,doc/master/TMVARegression_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C_source.html,1,['test'],['test']
Testability,es(). std::vector< TString > * TMVA::TActivationChooser::GetAllActivationNames ; (; ); const. returns the names of all know activation functions ; Definition at line 107 of file TActivationChooser.cxx. ◆ IsA(). virtual TClass * TMVA::TActivationChooser::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 72 of file TActivationChooser.h. ◆ Log(). MsgLogger & TMVA::TActivationChooser::Log ; (; ); const. inlineprivate . Definition at line 70 of file TActivationChooser.h. ◆ Streamer(). virtual void TMVA::TActivationChooser::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::TActivationChooser::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file TActivationChooser.h. Member Data Documentation. ◆ fLINEAR. TString TMVA::TActivationChooser::fLINEAR. private . activation function name ; Definition at line 63 of file TActivationChooser.h. ◆ fLogger. MsgLogger* TMVA::TActivationChooser::fLogger. mutableprivate . ! message logger ; Definition at line 69 of file TActivationChooser.h. ◆ fRADIAL. TString TMVA::TActivationChooser::fRADIAL. private . activation function name ; Definition at line 67 of file TActivationChooser.h. ◆ fRELU. TString TMVA::TActivationChooser::fRELU. private . activation function name ; Definition at line 66 of file TActivationChooser.h. ◆ fSIGMOID. TString TMVA::TActivationChooser::fSIGMOID. private . activation function name ; Definition at line 64 of file TActivationChooser.h. ◆ fTANH. TString TMVA::TActivationChooser::fTANH. private . activation function name ; Definition at line 65 of file TActivationChooser.h. Libraries for TMVA::TActivationChooser:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TActivationChooser.h; tmva/tmva/src/TActivationChooser.cxx. TMVATActivationChooser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationChooser.html:4706,log,logger,4706,doc/master/classTMVA_1_1TActivationChooser.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationChooser.html,1,['log'],['logger']
Testability,"es(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tmustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:25819,test,testArg,25819,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['test'],['testArg']
Testability,"es::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTMVA::MethodBase::SetCurrentEvent(Long64_t ievt) const; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodMLP.html:11845,test,testTime,11845,root/html530/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodMLP.html,2,['test'],['testTime']
Testability,"es; relies on the following characteristics (only): overall sample means,; xi, for each input variable, i,; class-specific sample means, xS(B),i,; and total covariance matrix Tij. The covariance matrix; can be decomposed into the sum of a within- (Wij); and a between-class (Bij) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, Fi, are then given by . where in TMVA is set NS=NB, so that the factor; in front of the sum simplifies to ½.; The Fisher discriminant then reads. The offset F0 centers the sample mean of xFi; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. with resulting xMa that are very similar to the; xFi. ; TMVA provides two outputs for the ranking of the input variables:. Fisher test: the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: Bii/Wii.; ; Discrimination power: the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar; . The corresponding numbers are printed on standard output.; ; . Function Members (Methods); public:. virtual~MethodFisher(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFisher.html:2102,test,test,2102,root/html528/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFisher.html,6,['test'],['test']
Testability,"escription of the formalism itself, called \(\hbox{$_s$}{\cal P}lot\), is given in [1]. The method; The \(\hbox{$_s$}{\cal P}lot\) technique is developed in the above context of a maximum Likelihood method making use of discriminating variables.; One considers a data sample in which are merged several species of events. These species represent various signal components and background components which all together account for the data sample. The different terms of the log-Likelihood are:. \(N\) : the total number of events in the data sample,; \({\rm N}_{\rm s}\) : the number of species of events populating the data sample,; \(N_i\) : the number of events expected on the average for the \(i^{\rm th}\) species,; \({\rm f}_i(y_e)\) : the value of the PDFs of the discriminating variables \(y\) for the \(i^{th}\) species and for event \(e\),; \(x\) : the set of control variables which, by definition, do not appear in the expression of the Likelihood function \({\cal L}\). The extended log-Likelihood reads:. \[; {\cal L}=\sum_{e=1}^{N}\ln \Big\{ \sum_{i=1}^{{\rm N}_{\rm s}}N_i{\rm f}_i(y_e) \Big\} -\sum_{i=1}^{{\rm N}_{\rm s}}N_i \tag{1}; \]. From this expression, after maximization of \({\cal L}\) with respect to the \(N_i\) parameters, a weight can be computed for every event and each species, in order to obtain later the true distribution \(\hbox{M}_i(x)\) of variable \(x\). If \({\rm n}\) is one of the \({\rm N}_{\rm s}\) species present in the data sample, the weight for this species is defined by:. \[; \fbox{$; {_s{\cal P}}_{\rm n}(y_e)={\sum_{j=1}^{{\rm N}_{\rm s}} \hbox{V}_{{\rm n}j}{\rm f}_j(y_e)\over\sum_{k=1}^{{\rm N}_{\rm s}}N_k{\rm f}_k(y_e) } $} , \tag{2}; \]. where \(\hbox{V}_{{\rm n}j}\); is the covariance matrix resulting from the Likelihood maximization. This matrix can be used directly from the fit, but this is numerically less accurate than the direct computation:. \[; \hbox{ V}^{-1}_{{\rm n}j}~=~; {\partial^2(-{\cal L})\over\partial N_{\rm n}\partial",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPlot.html:2985,log,log-Likelihood,2985,doc/master/classTSPlot.html,https://root.cern,https://root.cern/doc/master/classTSPlot.html,1,['log'],['log-Likelihood']
Testability,"escription; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatSampler. class RooStats::TestStatSampler. TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. ; Tools that implement this interface are expected to be used for coverage studies, the Neyman Construction, etc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual voidInitialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); virtual TClass*IsA() const; RooStats::TestStatSampler&operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetNuisanceParameters(RooArgSet&); virtual voidSetObservables(RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooAbsArg&) const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__TestStatSampler.html:1032,test,testStatistic,1032,root/html526/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__TestStatSampler.html,1,['test'],['testStatistic']
Testability,"escriptorId_t FindFieldId (std::string_view fieldName, DescriptorId_t parentId) const;  ; DescriptorId_t FindLogicalColumnId (DescriptorId_t fieldId, std::uint32_t columnIndex, std::uint16_t representationIndex) const;  ; DescriptorId_t FindNextClusterId (DescriptorId_t clusterId) const;  ; DescriptorId_t FindPhysicalColumnId (DescriptorId_t fieldId, std::uint32_t columnIndex, std::uint16_t representationIndex) const;  ; DescriptorId_t FindPrevClusterId (DescriptorId_t clusterId) const;  ; const RClusterDescriptor & GetClusterDescriptor (DescriptorId_t clusterId) const;  ; const RClusterGroupDescriptor & GetClusterGroupDescriptor (DescriptorId_t clusterGroupId) const;  ; RClusterGroupDescriptorIterable GetClusterGroupIterable () const;  ; RClusterDescriptorIterable GetClusterIterable () const;  ; const RColumnDescriptor & GetColumnDescriptor (DescriptorId_t columnId) const;  ; RColumnDescriptorIterable GetColumnIterable () const;  ; RColumnDescriptorIterable GetColumnIterable (const RFieldDescriptor &fieldDesc) const;  ; RColumnDescriptorIterable GetColumnIterable (DescriptorId_t fieldId) const;  ; const std::string & GetDescription () const;  ; RExtraTypeInfoDescriptorIterable GetExtraTypeInfoIterable () const;  ; std::vector< std::uint64_t > GetFeatureFlags () const;  ; const RFieldDescriptor & GetFieldDescriptor (DescriptorId_t fieldId) const;  ; RFieldDescriptorIterable GetFieldIterable (const RFieldDescriptor &fieldDesc) const;  ; RFieldDescriptorIterable GetFieldIterable (const RFieldDescriptor &fieldDesc, const std::function< bool(DescriptorId_t, DescriptorId_t)> &comparator) const;  ; RFieldDescriptorIterable GetFieldIterable (DescriptorId_t fieldId) const;  ; RFieldDescriptorIterable GetFieldIterable (DescriptorId_t fieldId, const std::function< bool(DescriptorId_t, DescriptorId_t)> &comparator) const;  ; const RFieldDescriptor & GetFieldZero () const;  ; DescriptorId_t GetFieldZeroId () const;  Returns the logical parent of all top-level NTuple data fields.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:5116,log,logical,5116,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,1,['log'],['logical']
Testability,"ess=false) const ;; 295 ; 296 // I/O streaming interface (machine readable); 297 bool readFromStream(std::istream& is, bool compact, bool verbose=false) override ;; 298 void writeToStream(std::ostream& os, bool compact) const override ;; 299 ; 300 // Printing interface (human readable); 301 void printValue(std::ostream& os) const override ;; 302 void printMultiline(std::ostream& os, Int_t contents, bool verbose=false, TString indent="""") const override ;; 303 ; 304 inline void setCachedValue(double value, bool notifyClients = true) final;; 305 ; 306 // Evaluation error logging; 307 class EvalError {; 308 public:; 309 EvalError() { }; 310 EvalError(const EvalError& other) : _msg(other._msg), _srvval(other._srvval) { }; 311 void setMessage(const char* tmp) { std::string s(tmp); s.swap(_msg); }; 312 void setServerValues(const char* tmp) { std::string s(tmp); s.swap(_srvval); }; 313 std::string _msg;; 314 std::string _srvval;; 315 } ;; 316 ; 317 enum ErrorLoggingMode { PrintErrors, CollectErrors, CountErrors, Ignore } ;; 318 ; 319 /// Context to temporarily change the error logging mode as long as the context is alive.; 320 class EvalErrorContext {; 321 public:; 322 EvalErrorContext(ErrorLoggingMode m) : _old{evalErrorLoggingMode()} { setEvalErrorLoggingMode(m); }; 323 ; 324 EvalErrorContext(EvalErrorContext const&) = delete;; 325 EvalErrorContext(EvalErrorContext &&) = delete;; 326 EvalErrorContext& operator=(EvalErrorContext const&) = delete;; 327 EvalErrorContext& operator=(EvalErrorContext &&) = delete;; 328 ; 329 ~EvalErrorContext() { setEvalErrorLoggingMode(_old); }; 330 private:; 331 ErrorLoggingMode _old;; 332 };; 333 ; 334 static ErrorLoggingMode evalErrorLoggingMode() ;; 335 static void setEvalErrorLoggingMode(ErrorLoggingMode m) ;; 336 void logEvalError(const char* message, const char* serverValueString=nullptr) const ;; 337 static void logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString=nullptr) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:15667,log,logging,15667,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['log'],['logging']
Testability,"essBar * GetConnectProg () const;  ; TContextMenu * GetContextMenu () const;  ; TSessionInputFrame * GetInputFrame () const;  ; const TGPicture * GetLocalPict () const;  ; TGPopupMenu * GetOptionsMenu () const;  ; TSessionOutputFrame * GetOutputFrame () const;  ; TGPopupMenu * GetPopupQry () const;  ; TGPopupMenu * GetPopupSrv () const;  ; const TGPicture * GetProofConPict () const;  ; const TGPicture * GetProofDisconPict () const;  ; const TGPicture * GetQueryConPict () const;  ; const TGPicture * GetQueryDisconPict () const;  ; TSessionQueryFrame * GetQueryFrame () const;  ; TSessionServerFrame * GetServerFrame () const;  ; TSessionFrame * GetSessionFrame () const;  ; TGListTree * GetSessionHierarchy () const;  ; TGListTreeItem * GetSessionItem () const;  ; TList * GetSessions () const;  ; TGStatusBar * GetStatusBar () const;  ; Bool_t HandleTimer (TTimer *) override;  Handle animation timer. ;  ; TClass * IsA () const override;  ; Bool_t IsAutoSave () const;  ; Bool_t IsBusy () const;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame. ;  ; void MyHandleMenu (Int_t);  Handle session viewer custom popup menus. ;  ; void OnCascadeMenu ();  Handle feedback histograms configuration menu. ;  ; void OnListTreeClicked (TGListTreeItem *entry, Int_t btn, Int_t x, Int_t y);  Handle mouse clicks in list tree. ;  ; void OnListTreeDoubleClicked (TGListTreeItem *entry, Int_t btn);  Handle mouse double clicks in list tree (connect to server). ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t) override;  Handle messages send to the TSessionViewer object. ;  ; void QueryResultReady (char *query);  Handle signal ""query result ready"" coming from Proof session. ;  ; void ReadConfiguration (const char *filename=nullptr);  Read configuration file and populate list of sessions list of queries and list of packages. ;  ; void ResetSession ();  Reset Proof session. ;  ; void SetBusy (Bool_t busy=kTRUE);  ; void SetChangePic (Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:2546,log,log,2546,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,2,['log'],['log']
Testability,"essNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.1); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<std::vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase *constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; TStringfOptimizationFitTypewhich type of optimisation procedure to be used ; map<TString,TMVA::Interval>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase *const method, map<TString,TMVA::Interval> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__OptimizeConfigParameters.html:1936,log,logger,1936,root/html530/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html530/TMVA__OptimizeConfigParameters.html,2,['log'],['logger']
Testability,"essages at WARNING level; or higher (e.g. ERROR and FATAL) and for all INFO message on topics Generation,Plotting,; Integration and Minimization and redirects them to stdout. Users can create additional streams ; for logging of e.g. DEBUG messages on particular topics or objects and or redirect streams to; C++ streams or files.; ; The singleton instance is accessible through RooMsgService::instance() ;; . Function Members (Methods); public:. ~StreamConfig(); voidaddTopic(RooFit::MsgTopic newTopic); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const RooAbsArg* obj); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const TObject* obj); RooMsgService::StreamConfig&operator=(const RooMsgService::StreamConfig&); RooMsgService::StreamConfig&operator=(RooMsgService::StreamConfig&&); voidremoveTopic(RooFit::MsgTopic oldTopic); RooMsgService::StreamConfigStreamConfig(); RooMsgService::StreamConfigStreamConfig(const RooMsgService::StreamConfig&); RooMsgService::StreamConfigStreamConfig(RooMsgService::StreamConfig&&). Data Members; public:. Bool_tactive; stringbaseClassName; stringclassName; Color_tcolor; RooFit::MsgLevelminLevel; stringobjectName; ostream*os; Bool_tprefix; stringtagName; Int_ttopic; Bool_tuniversal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t match(RooFit::MsgLevel level, RooFit::MsgTopic facility, const RooAbsArg* obj); Determine if message from given object at given level on given topic is logged. Bool_t match(RooFit::MsgLevel level, RooFit::MsgTopic facility, const TObject* obj); Determine if message from given object at given level on given topic is logged. void addTopic(RooFit::MsgTopic newTopic). void removeTopic(RooFit::MsgTopic oldTopic). » Last changed: Tue Jun 30 14:34:07 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMsgService__StreamConfig.html:2572,log,logged,2572,root/html602/RooMsgService__StreamConfig.html,https://root.cern,https://root.cern/root/html602/RooMsgService__StreamConfig.html,2,['log'],['logged']
Testability,"essages from objects with given base class name; LabelName(const chat*) -- Restrict stream to messages from objects setAtrribute(const char*) tag with given name. Output redirection options. OutputFile(const char*) -- Send output to file with given name. Multiple streams can write to same file.; OutputStream(ostream&) -- Send output to given C++ stream. Multiple message streams can write to same c++ stream. The return value is the unique ID code of the defined stream. void deleteStream(Int_t id); Delete stream with given unique ID code. void setStreamStatus(Int_t id, Bool_t active); (De)Activate stream with given unique ID. Bool_t getStreamStatus(Int_t id) const; Get activation status of stream with given unique ID. RooMsgService& instance(); Return reference to singleton instance. void saveState(); Save current state of message service. void restoreState(); Restore last saved state of message service. Bool_t isActive(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMsgService.html:10416,log,logging,10416,root/html528/RooMsgService.html,https://root.cern,https://root.cern/root/html528/RooMsgService.html,6,['log'],['logging']
Testability,"essing by GetOptions(); in which case you should specify numOptions<0. All options will; still be available via the Argv() method for later use. ~TApplication(); TApplication dtor. void NeedGraphicsLibs(); Static method. This method should be called from static library; initializers if the library needs the low level graphics system. void InitializeGraphics(); Initialize the graphics environment. void ClearInputFiles(); Clear list containing macro files passed as program arguments.; This method is called from TRint::Run() to ensure that the macro; files are only executed the first time Run() is called. char * Argv(Int_t index) const; Return specified argument. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Arguments handled are removed; from the argument array. The following arguments are handled:; -b : run in batch mode without graphics; -x : exit on exception; -e expression: request execution of the given C++ expression.; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; The last three options are only relevant in conjunction with TRint.; The following help and info arguments are supported:; -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; -memstat : run with memory usage monitoring; In addition to the above options the arguments that are not options,; i.e. they don't start with - or + are treated as follows (and also removed; from the argument array):; <dir> is considered the desired working directory and available; via WorkingDirectory(), if more than one dir is specified the; first one will prevail; <file> if the file exists its added to the InputFiles() list; <file>.root are considered ROOT files and added to the InputFiles() list,; the file may be a remote file url; <macro>.C are considered ROOT macros and also added to the InputFiles() list; In TRint we set the working directory ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplication.html:15065,log,logon,15065,root/html602/TApplication.html,https://root.cern,https://root.cern/root/html602/TApplication.html,4,['log'],"['logoff', 'logon']"
Testability,"est (eg. specified rate of Type I error); RooStats::ToyMCSampler*fTestStatSamplerthe test statistic sampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FeldmanCousins(); default constructor; fWS = new RooWorkspace(""FeldmanCousinsWS"");; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. ~FeldmanCousins(); destructor; if(fOwnsWorkspace && fWS) delete fWS;. void SetModel(const RooStats::ModelConfig& ); set the model. void CreateTestStatSampler() const; specify the Test Statistic and create a ToyMC test statistic sampler. void CreateParameterPoints() const; specify the parameter points to perform the construction.; allow ability to profile on some nuisance paramters. ConfInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::PointSetInterval. FeldmanCousins(). Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf. { fPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. RooAbsData* GetPointsToScan(). ConfidenceBelt* GetConfidenceBelt(); {return fConfBelt;}. void UseAdaptiveSampling(bool flag = true); {fAdaptiveSampling=flag;}. void SetNBins(Int_t bins); {fNbins = bins;}. void FluctuateNumDataEntries(b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__FeldmanCousins.html:9388,test,test,9388,root/html526/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html526/RooStats__FeldmanCousins.html,1,['test'],['test']
Testability,"est ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of file GoFTest.cxx. ◆ PValueADKSamples(). Double_t ROOT::Math::GoFTest::PValueADKSamples ; (; size_t ; nsamples, . Double_t ; A2 . ). static . Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ; Definition at line 353 of file GoFTest.cxx. ◆ SetCDF()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16374,test,test,16374,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['test']
Testability,est in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisanceParameters.removeAll(); fNuisanceParameters.add(set);}. void SetPriorPdf(RooAbsPdf& pdf); Set only the Prior Pdf. { fPriorPdf = &pdf; }. void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { SetTestSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLevel() const; Get the Confidence level for the test. { return 1.-fSize; }. void SetLeftSideTailFraction(Double_t leftSideFraction); set the fraction of probability content on the left tail; Central limits use 0.5 (default case); for upper limits it is 0 and 1 for lower limit; For shortest intervals a negative value (i.e. -1) must be given. {fLeftSideFraction = leftSideFraction;}. void SetShortestInterval(); set the Bayesian calculator to compute the shorest interval (default is central interval); to switch off SetLeftSideTailFraction to the rght value. { fLeftSideFraction = -1; }. void SetBrfPrecision(double precision); set the precision of the Root Finder. { fBrfPrecision = precision; }. void SetScanOfPosterior(int nbin = 100); use directly the approximate posterior function obtained by binning it in nbins; by default the cdf is used by integrating the posterior; if a value of nbin <= 0 the cdf function will be used. { fNScanBins = nbin; }. void SetNumIters(Int_t numIters); set the number of iteratio,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__BayesianCalculator.html:17266,test,test,17266,root/html534/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__BayesianCalculator.html,3,['test'],['test']
Testability,"est of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:4165,log,log,4165,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,1,['log'],['log']
Testability,"est of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:4166,log,log,4166,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,1,['log'],['log']
Testability,"est statistic will exceed; the value z assuming the null hypothesis. This gives a very powerful; test for comparing two one-dimensional distributions.; see, for example, Eadie et al, ""statistocal Methods in Experimental; Physics', pp 269-270). This function returns the confidence level for the null hypothesis, where:; z = dn*sqrt(n), and; dn is the maximum deviation between a hypothetical distribution; function and an experimental distribution with; n events. NOTE: To compare two experimental distributions with m and n events,; use z = sqrt(m*n/(m+n))*dn. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than 10^-15 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1. This function was translated by Rene Brun from PROBKL in CERNLIB. Double_t KolmogorovTest(Int_t na, const Double_t* a, Int_t nb, const Double_t* b, Option_t* option); Statistical test whether two one-dimensional sets of points are compatible; with coming from the same parent distribution, using the Kolmogorov test.; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively.; The elements of a and b must be given in ascending order.; option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a; statistical test for compatibility of a and b.; Values of prob close to zero are taken as indicating a small probability; of compatibility. For two point sets drawn randomly from the same parent; distribution, the value of prob should be uniformly distributed between; zero and one.; in case of error the function return -1; If the 2 sets have a different number of points, the minimum of; the two sets is used. Method:; The Kolmogorov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:17314,test,test,17314,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,12,['test'],['test']
Testability,"est to the target which is 3 sigma from the target; and has smaller error; if mode = 1; find 2 closest point to target in X and between these two take the one closer to the target; if mode = 2 as in mode = 1 but return the lower point not the closest one; if mode = 3 as in mode = 1 but return the upper point not the closest one. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target, bool lower = true, double xmin = 1, double xmax = 0); Return an error estimate on the upper(lower) limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(); need to have compute first lower limit. Double_t UpperLimitEstimatedError(). SamplingDistribution * GetBackgroundTestStatDist(int index) const; get the background test statistic distribution. SamplingDistribution * GetSignalAndBackgroundTestStatDist(int index) const; get the signal and background test statistic distribution. SamplingDistribution * GetExpectedPValueDist(int index) const; get the expected p-value distribution at the scanned point index. SamplingDistribution * GetLimitDistribution(bool lower) const; get the limit distribution (lower/upper depending on the flag); by interpolating the expected p values for each point. double GetExpectedLowerLimit(double nsig = 0, const char* opt = """") const; Get the expected lower limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (default value) returns the expected value; nsig = -1 returns the lower band value at -1 sigma; nsig + 1 return the upper value; opt = """" (default) : compute limit by interpolating all the p values, find the corresponding limit distribution; and then find the quantiles in the limit distribution; ioption = ""P"" is the method used for plotting. One Finds the corresponding nsig quantile in the p values and then; interp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:14417,test,test,14417,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,3,['test'],['test']
Testability,"est"", msg.c_str());; 150 assert(!badSampleArg);; 151 }; 152 std::vector<const Double_t*> samples(2);; 153 std::vector<size_t> samplesSizes(2);; 154 samples[0] = sample1;; 155 samples[1] = sample2;; 156 samplesSizes[0] = sample1Size;; 157 samplesSizes[1] = sample2Size;; 158 SetSamples(samples, samplesSizes);; 159 }; 160 ; 161 GoFTest::GoFTest(size_t sampleSize, const Double_t* sample, EDistribution dist, const std::vector<double> & distParams); 162 : fDist(dist),; 163 fSamples(std::vector<std::vector<Double_t> >(1)),; 164 fTestSampleFromH0(kTRUE) {; 165 Bool_t badSampleArg = sample == nullptr || sampleSize == 0;; 166 if (badSampleArg) {; 167 std::string msg = ""'sample"";; 168 msg += !sampleSize ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 169 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 170 assert(!badSampleArg);; 171 }; 172 std::vector<const Double_t*> samples(1, sample);; 173 std::vector<size_t> samplesSizes(1, sampleSize);; 174 SetSamples(samples, samplesSizes);; 175 SetParameters(distParams);; 176 SetCDF();; 177 }; 178 ; 179 GoFTest::~GoFTest() {}; 180 ; 181 void GoFTest::SetSamples(std::vector<const Double_t*> samples, const std::vector<size_t> samplesSizes) {; 182 fCombinedSamples.assign(std::accumulate(samplesSizes.begin(), samplesSizes.end(), 0u), 0.0);; 183 size_t combinedSamplesSize = 0;; 184 for (size_t i = 0; i < samples.size(); ++i) {; 185 fSamples[i].assign(samples[i], samples[i] + samplesSizes[i]);; 186 std::sort(fSamples[i].begin(), fSamples[i].end());; 187 for (size_t j = 0; j < samplesSizes[i]; ++j) {; 188 fCombinedSamples[combinedSamplesSize + j] = samples[i][j];; 189 }; 190 combinedSamplesSize += samplesSizes[i];; 191 }; 192 std::sort(fCombinedSamples.begin(), fCombinedSamples.end());; 193 ; 194 Bool_t degenerateSamples = *(fCombinedSamples.begin()) == *(fCombinedSamples.end() - 1);; 195 if (degenerateSamples) {; 196 std::string msg = ""Degenerate sample"";; 197 msg += samplesSizes.size() > 1 ? ""s!"" : ""!"";; 198 msg += "" Sampling values all ident",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:5668,assert,assert,5668,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['assert'],['assert']
Testability,"est.h:70; ROOT::Math::GoFTest::kLogNormal@ kLogNormalGaussian distribution with default mean=0, sigma=1.Definition GoFTest.h:74; ROOT::Math::GoFTest::kExponential@ kExponentialLognormal distribution with default meanlog=0, sigmalog=1.Definition GoFTest.h:75; ROOT::Math::GoFTest::kGaussian@ kGaussianFor internal use only within the class's template constructor.Definition GoFTest.h:73; ROOT::Math::GoFTest::kUserDefined@ kUserDefinedDefault value for non templated 1-sample test. Set with SetDistribution.Definition GoFTest.h:72; ROOT::Math::GoFTest::kUndefined@ kUndefinedDefinition GoFTest.h:71; ROOT::Math::GoFTest::fDistEDistribution fDistType of distribution.Definition GoFTest.h:238; ROOT::Math::GoFTest::Instantiatevoid Instantiate(const Double_t *sample, size_t sampleSize)Definition GoFTest.cxx:279; ROOT::Math::GoFTest::fCombinedSamplesstd::vector< Double_t > fCombinedSamplesThe combined data.Definition GoFTest.h:241; ROOT::Math::GoFTest::KolmogorovSmirnovTestvoid KolmogorovSmirnovTest(Double_t &pvalue, Double_t &testStat) constKolmogorov-Smirnov 1-Sample Test.Definition GoFTest.cxx:921; ROOT::Math::GoFTest::fParamsstd::vector< Double_t > fParamsThe distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian)Definition GoFTest.h:239; ROOT::Math::GoFTest::ETestTypeETestTypeGoodness of Fit test types for using with the class's unary functions as a shorthand for the in-built...Definition GoFTest.h:85; ROOT::Math::GoFTest::kKS@ kKSAnderson-Darling 2-Samples Test.Definition GoFTest.h:88; ROOT::Math::GoFTest::kAD@ kADDefinition GoFTest.h:86; ROOT::Math::GoFTest::kKS2s@ kKS2sKolmogorov-Smirnov Test.Definition GoFTest.h:89; ROOT::Math::GoFTest::kAD2s@ kAD2sAnderson-Darling Test. Default value.Definition GoFTest.h:87; ROOT::Math::GoFTest::SetSamplesvoid SetSamples(std::vector< const Double_t * > samples, const std::vector< size_t > samplesSizes)set a vector of samplesDefinition GoFTest.cxx:181; ROOT::Math::GoFTest::PValueADKSamplesstatic Double_t PValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:40170,test,testStat,40170,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['testStat']
Testability,"estBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger; UInt_tfTargetthe target to calculate the density for. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTargetDensity(); {}. PDEFoamTargetDensity(vector<Double_t> box, UInt_t target); User construcor. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - target - the target number to calculate the density for. PDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average target value within the range-searching box at point; Xarg, divided by volume (specified by fBox). Parameters:. - Xarg - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Average target value in the range-searching volume at point; 'Xarg', divided by the box volume. virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamTargetDensity.html:6061,log,logger,6061,root/html530/TMVA__PDEFoamTargetDensity.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamTargetDensity.html,2,['log'],['logger']
Testability,"estBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger; UInt_tfTargetthe target to calculate the density for. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTargetDensity(); {}. PDEFoamTargetDensity(vector<Double_t> box, UInt_t target); User construcor. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - target - the target number to calculate the density for. PDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average target value within the range-searching box at point; xev, divided by volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Average target value in the range-searching volume at point; 'xev', divided by the box volume. virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamTargetDensity.html:6080,log,logger,6080,root/html534/TMVA__PDEFoamTargetDensity.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamTargetDensity.html,1,['log'],['logger']
Testability,"estStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic). {fTestStatSampler = &sampler;}. void SetLeftSideTailFraction(Double_t leftSideFraction = 0.); fLeftSideTailFraction*fSize defines lower edge of acceptance region.; Unified limits use 0, central limits use 0.5,; for upper/lower limits it is 0/1 depends on sign of test statistic w.r.t. parameter. {fLeftSideFraction = leftSideFraction;}. void SetParameterPointsToTest(RooAbsData& pointsToTest); User-defined set of points to test. Double_t Size() const; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (common for each dimension); void SetNumSteps(Int_t);; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (specific for each dimension); void SetNumSteps(map<RooAbsArg, Int_t>); Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetModel(const RooStats::ModelConfig& model); Set ModelConfig. {fModel = model;}. void SetData(RooAbsData& data); Set the DataSet. { fData = data; }. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetParameters(const RooArgSet& ); specify the parameters of interest in the interval. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. ConfidenceBelt* GetConfidenceBelt(); get confidence belt. {return fConfBelt;}. void UseAdaptiveSampling(bool flag = true); adaptive sampling algorithm to speed up interval caculation. {fAdaptiveSampling=flag;}. void A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:6089,test,test,6089,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,3,['test'],['test']
Testability,"est_uri, conn);; 18582 if (hostend) {; 18583 conn->request_info.local_uri_raw = hostend;; 18584 } else {; 18585 conn->request_info.local_uri_raw = NULL;; 18586 }; 18587 break;; 18588 default:; 18589 mg_snprintf(conn,; 18590 NULL, /* No truncation check for ebuf */; 18591 ebuf,; 18592 sizeof(ebuf),; 18593 ""Invalid URI"");; 18594 mg_send_http_error(conn, 400, ""%s"", ebuf);; 18595 conn->request_info.local_uri_raw = NULL;; 18596 break;; 18597 }; 18598 conn->request_info.local_uri =; 18599 (char *)conn->request_info.local_uri_raw;; 18600 }; 18601 ; 18602 if (ebuf[0] != '\0') {; 18603 conn->protocol_type = -1;; 18604 ; 18605 } else {; 18606 /* HTTP/1 allows protocol upgrade */; 18607 conn->protocol_type = should_switch_to_protocol(conn);; 18608 ; 18609 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 18610 /* This will occur, if a HTTP/1.1 request should be upgraded; 18611 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 18612 * Since most (all?) major browsers only support HTTP/2 using; 18613 * ALPN, this is hard to test and very low priority.; 18614 * Deactivate it (at least for now).; 18615 */; 18616 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18617 }; 18618 }; 18619 ; 18620 DEBUG_TRACE(""http: %s, error: %s"",; 18621 (ri->http_version ? ri->http_version : ""none""),; 18622 (ebuf[0] ? ebuf : ""none""));; 18623 ; 18624 if (ebuf[0] == '\0') {; 18625 if (conn->request_info.local_uri) {; 18626 ; 18627 /* handle request to local server */; 18628 handle_request_stat_log(conn);; 18629 ; 18630 } else {; 18631 /* TODO: handle non-local request (PROXY) */; 18632 conn->must_close = 1;; 18633 }; 18634 } else {; 18635 conn->must_close = 1;; 18636 }; 18637 ; 18638 /* Response complete. Free header buffer */; 18639 free_buffered_response_header_list(conn);; 18640 ; 18641 if (ri->remote_user != NULL) {; 18642 mg_free((void *)ri->remote_user);; 18643 /* Important! When having connections with and without auth; 18644 * would cause double free and then crash */; 18645 ri->remote_user ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:552441,test,test,552441,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['test'],['test']
Testability,"est_uri, conn);; 18583 if (hostend) {; 18584 conn->request_info.local_uri_raw = hostend;; 18585 } else {; 18586 conn->request_info.local_uri_raw = NULL;; 18587 }; 18588 break;; 18589 default:; 18590 mg_snprintf(conn,; 18591 NULL, /* No truncation check for ebuf */; 18592 ebuf,; 18593 sizeof(ebuf),; 18594 ""Invalid URI"");; 18595 mg_send_http_error(conn, 400, ""%s"", ebuf);; 18596 conn->request_info.local_uri_raw = NULL;; 18597 break;; 18598 }; 18599 conn->request_info.local_uri =; 18600 (char *)conn->request_info.local_uri_raw;; 18601 }; 18602 ; 18603 if (ebuf[0] != '\0') {; 18604 conn->protocol_type = -1;; 18605 ; 18606 } else {; 18607 /* HTTP/1 allows protocol upgrade */; 18608 conn->protocol_type = should_switch_to_protocol(conn);; 18609 ; 18610 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 18611 /* This will occur, if a HTTP/1.1 request should be upgraded; 18612 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 18613 * Since most (all?) major browsers only support HTTP/2 using; 18614 * ALPN, this is hard to test and very low priority.; 18615 * Deactivate it (at least for now).; 18616 */; 18617 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18618 }; 18619 }; 18620 ; 18621 DEBUG_TRACE(""http: %s, error: %s"",; 18622 (ri->http_version ? ri->http_version : ""none""),; 18623 (ebuf[0] ? ebuf : ""none""));; 18624 ; 18625 if (ebuf[0] == '\0') {; 18626 if (conn->request_info.local_uri) {; 18627 ; 18628 /* handle request to local server */; 18629 handle_request_stat_log(conn);; 18630 ; 18631 } else {; 18632 /* TODO: handle non-local request (PROXY) */; 18633 conn->must_close = 1;; 18634 }; 18635 } else {; 18636 conn->must_close = 1;; 18637 }; 18638 ; 18639 /* Response complete. Free header buffer */; 18640 free_buffered_response_header_list(conn);; 18641 ; 18642 if (ri->remote_user != NULL) {; 18643 mg_free((void *)ri->remote_user);; 18644 /* Important! When having connections with and without auth; 18645 * would cause double free and then crash */; 18646 ri->remote_user ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:552474,test,test,552474,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['test'],['test']
Testability,estatic . ReturnsName of the file containing the class declaration ; Definition at line 74 of file RootFinder.h. ◆ IsA(). virtual TClass * TMVA::RootFinder::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 74 of file RootFinder.h. ◆ Log(). MsgLogger & TMVA::RootFinder::Log ; (; ); const. inlineprivate . Definition at line 72 of file RootFinder.h. ◆ Root(). Double_t TMVA::RootFinder::Root ; (; Double_t ; refValue). Root finding using Brents algorithm; taken from CERNLIB function RZERO. ; Definition at line 71 of file RootFinder.cxx. ◆ Streamer(). virtual void TMVA::RootFinder::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::RootFinder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file RootFinder.h. Member Data Documentation. ◆ fAbsTol. Double_t TMVA::RootFinder::fAbsTol. private . absolute tolerance deviation ; Definition at line 66 of file RootFinder.h. ◆ fLogger. MsgLogger* TMVA::RootFinder::fLogger. mutableprivate . ! message logger ; Definition at line 71 of file RootFinder.h. ◆ fMaxIter. Int_t TMVA::RootFinder::fMaxIter. private . maximum number of iterations ; Definition at line 65 of file RootFinder.h. ◆ fMethod. MethodBase* TMVA::RootFinder::fMethod. private . Definition at line 69 of file RootFinder.h. ◆ fRootMax. Double_t TMVA::RootFinder::fRootMax. private . maximum root value ; Definition at line 64 of file RootFinder.h. ◆ fRootMin. Double_t TMVA::RootFinder::fRootMin. private . minimum root value ; Definition at line 63 of file RootFinder.h. Libraries for TMVA::RootFinder:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RootFinder.h; tmva/tmva/src/RootFinder.cxx. TMVARootFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RootFinder.html:12769,log,logger,12769,doc/master/classTMVA_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RootFinder.html,1,['log'],['logger']
Testability,"ested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development ROOT 7. For the first time since 20 year (i.e. ever), the ROOT team plans to break backward compatibility for crucial interfaces - once.; This new major version of ROOT will make ROOT much simpler and safer to use: we want to increase clarity and usability.; If you are a physicist, please read on - this is about your ROOT.; The ROOT team will be releasing parts of ROOT 7 throughout the coming years.; Previews will gradually sneak into the ROOT sources, in the namespace ROOT::Experimental for those parts that are not yet cast in stone, and in the namespace ROOT for those that are.; We will use standard C++ types, standard interface behavior (e.g. with respect to ownership and thread safety), good documentation and tests: we are trying to be nice!; Feedback; The main point of the meeting and this page is to solicit your feedback. Most of it has been taken care of in the code already.; Building ROOT 7; Pre-requisites; Support for the c++14 standard is required. Usage of g++ >= 5 or clang >= 3.4 is recommended.; Relevant cmake variables; The CMAKE_CXX_STANDARD cmake variables must be set to at least 14.; Building from source would look similar to this:; $ mkdir root7_build; $ cd root7_build; $ cmake -DCMAKE_CXX_STANDARD=14 path/to/root/source; $ cmake --build . -- -j4. Examples; See the relevant tutorials, for instance for drawing and styling the new histograms.; The new interfaces are not about shortening your code - but about robustness. Here are a few examples of what can go wrong with the ROOT6 interfaces:; ROOT6 interfaces, showing what can go wrong.; #include ""TFile.h""#include ""TH2.h""#include ""TTreeReader.h""#include ""TTreeReaderArray.h""#include ""TTree.h"" // Another function. Who knows what it does in a month from n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:2578,test,tests,2578,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,1,['test'],['tests']
Testability,"estingSumBackgrWeights = 0; // Backgr. includes all classes that are not signal; 1643 ; 1644 for( UInt_t cls = 0, clsEnd = dsi.GetNClasses(); cls < clsEnd; ++cls ){; 1645 trainingSumWeightsPerClass.at(cls) =; 1646 std::accumulate(tmpEventVector[Types::kTraining].at(cls).begin(),; 1647 tmpEventVector[Types::kTraining].at(cls).end(),; 1648 Double_t(0), [](Double_t w, const TMVA::Event *E) { return w + E->GetOriginalWeight(); });; 1649 ; 1650 testingSumWeightsPerClass.at(cls) =; 1651 std::accumulate(tmpEventVector[Types::kTesting].at(cls).begin(),; 1652 tmpEventVector[Types::kTesting].at(cls).end(),; 1653 Double_t(0), [](Double_t w, const TMVA::Event *E) { return w + E->GetOriginalWeight(); });; 1654 ; 1655 if ( cls == dsi.GetSignalClassIndex()){; 1656 trainingSumSignalWeights += trainingSumWeightsPerClass.at(cls);; 1657 testingSumSignalWeights += testingSumWeightsPerClass.at(cls);; 1658 }else{; 1659 trainingSumBackgrWeights += trainingSumWeightsPerClass.at(cls);; 1660 testingSumBackgrWeights += testingSumWeightsPerClass.at(cls);; 1661 }; 1662 ; 1663 // output statistics; 1664 ; 1665 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1666 << setiosflags(ios::left) << std::setw(maxL); 1667 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1668 << ""training events : "" << trainingSizePerClass.at(cls) << Endl;; 1669 Log() << kDEBUG << ""\t(sum of weights: "" << trainingSumWeightsPerClass.at(cls) << "")""; 1670 << "" - requested were "" << eventCounts[cls].nTrainingEventsRequested << "" events"" << Endl;; 1671 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1672 << setiosflags(ios::left) << std::setw(maxL); 1673 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1674 << ""testing events : "" << testingSizePerClass.at(cls) << Endl;; 1675 Log() << kDEBUG << ""\t(sum of weights: "" << testingSumWeightsPerClass.at(cls) << "")""; 1676 << "" - requested were "" << eventCounts[cls].nTestingEventsRequested << "" events"" << Endl;; 1677 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:77328,test,testingSumBackgrWeights,77328,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,2,['test'],"['testingSumBackgrWeights', 'testingSumWeightsPerClass']"
Testability,"esult) :; 52 fResult(result); 53{; 54 if (result->fFitFunc) SetFunction(*fResult->fFitFunc); // this will create also the configuration; 55 if (result->fObjFunc) fObjFunction = fResult->fObjFunc;; 56 if (result->fFitData) fData = fResult->fFitData;; 57}; 58 ; 59void Fitter::SetFunction(const IModelFunction & func, bool useGradient); 60{; 61 ; 62 fUseGradient = useGradient;; 63 if (fUseGradient) {; 64 const IGradModelFunction * gradFunc = dynamic_cast<const IGradModelFunction*>(&func);; 65 if (gradFunc) {; 66 SetFunction(*gradFunc, true);; 67 return;; 68 }; 69 else {; 70 MATH_WARN_MSG(""Fitter::SetFunction"",""Requested function does not provide gradient - use it as non-gradient function "");; 71 }; 72 }; 73 fUseGradient = false;; 74 ; 75 // set the fit model function (clone the given one and keep a copy ); 76 //std::cout << ""set a non-grad function"" << std::endl;; 77 ; 78 fFunc = std::shared_ptr<IModelFunction>(dynamic_cast<IModelFunction *>(func.Clone() ) );; 79 assert(fFunc);; 80 ; 81 // creates the parameter settings; 82 fConfig.CreateParamsSettings(*fFunc);; 83 fFunc_v.reset();; 84}; 85 ; 86void Fitter::SetFunction(const IModel1DFunction & func, bool useGradient); 87{; 88 fUseGradient = useGradient;; 89 if (fUseGradient) {; 90 const IGradModel1DFunction * gradFunc = dynamic_cast<const IGradModel1DFunction*>(&func);; 91 if (gradFunc) {; 92 SetFunction(*gradFunc, true);; 93 return;; 94 }; 95 else {; 96 MATH_WARN_MSG(""Fitter::SetFunction"",""Requested function does not provide gradient - use it as non-gradient function "");; 97 }; 98 }; 99 fUseGradient = false;; 100 //std::cout << ""set a 1d function"" << std::endl;; 101 ; 102 // function is cloned when creating the adapter; 103 fFunc = std::shared_ptr<IModelFunction>(new ROOT::Math::MultiDimParamFunctionAdapter(func));; 104 ; 105 // creates the parameter settings; 106 fConfig.CreateParamsSettings(*fFunc);; 107 fFunc_v.reset();; 108}; 109 ; 110void Fitter::SetFunction(const IGradModelFunction & func, bool useGradient); 111{;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:2681,assert,assert,2681,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['assert'],['assert']
Testability,"et Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  pyroot001_arrayInterface.py This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data ;  pyroot002_TTreeAsMatrix.py This tutorial shows how a TTree can be quickly converted to a numpy array or a pandas.DataFrame ;  pyroot003_prettyPrinting.py This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:146591,benchmark,benchmarks,146591,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['benchmark'],['benchmarks']
Testability,"et md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and wo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:65461,sandbox,sandbox,65461,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['sandbox'],['sandbox']
Testability,"et md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:56494,sandbox,sandbox,56494,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['sandbox'],['sandbox']
Testability,"et of variables that can be integrated; by all components. If such a set exists, it reconfirms that each component is capable of; analytically integrating the common set, and combines the components individual integration; codes into a single integration code valid for RooAddPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms, multiplied with the fraction that; is in the current range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs; return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Loop over components for plot sampling hints and merge them if there are multiple. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; P.d.f is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:46376,test,test,46376,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,1,['test'],['test']
Testability,"et this range via the SetRange function If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Definition at line 465 of file TF2.cxx. ◆ GetMinimum() [2/2]. Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 498 of file TF1.cxx. ◆ GetMinimumXY(). Double_t TF2::GetMinimumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:59128,log,logx,59128,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,1,['log'],['logx']
Testability,"et&) const; Bool_tRooAbsArg::isCloneOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tisDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooConstVar.html:16465,log,logEvalError,16465,root/html532/RooConstVar.html,https://root.cern,https://root.cern/root/html532/RooConstVar.html,1,['log'],['logEvalError']
Testability,"et&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tmustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsPdf&operator=(const RooAbsPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:26701,test,testArg,26701,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,2,['test'],['testArg']
Testability,"et, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsTestStatistic::offset() const; virtual Double_tRooAbsTestStatistic::offsetCarry() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooXYChi2Var&operator=(const RooXYChi2Var&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooXYChi2Var.html:20416,test,testArg,20416,root/html602/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html602/RooXYChi2Var.html,2,['test'],['testArg']
Testability,"et, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMinimizer1D.html:4295,test,test,4295,root/html602/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMinimizer1D.html,1,['test'],['test']
Testability,"et, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLMinimizer1D.html:4132,test,test,4132,root/html534/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLMinimizer1D.html,1,['test'],['test']
Testability,"et, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:4295,test,test,4295,root/html604/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html,1,['test'],['test']
Testability,"et::setWindowFlags(Qt::WindowFlags type); voidQWidget::setWindowIcon(const QIcon& icon); voidQWidget::setWindowIconText(const QString&); voidQWidget::setWindowModality(Qt::WindowModality windowModality); voidQWidget::setWindowModified(bool); voidQWidget::setWindowOpacity(qreal level); voidQWidget::setWindowRole(const QString&); voidQWidget::setWindowState(Qt::WindowStates state); voidQWidget::setWindowSurface(QWindowSurface* surface); voidQWidget::setWindowTitle(const QString&); voidQWidget::show(); voidQWidget::showFullScreen(); voidQWidget::showMaximized(); voidQWidget::showMinimized(); voidQWidget::showNormal(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQWidget::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringQWidget::tr(const char* s, const char* c = 0); static QStringQWidget::tr(const char* s, const char* c, int n); static QStringQWidget::trUtf8(const char* s, const char* c = 0); static QStringQWidget::trUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQRootCanvas.html:11979,test,testAttribute,11979,root/html602/TQRootCanvas.html,https://root.cern,https://root.cern/root/html602/TQRootCanvas.html,2,['test'],['testAttribute']
Testability,"et::setWindowModality(Qt::WindowModality windowModality); voidQWidget::setWindowModified(bool); voidQWidget::setWindowOpacity(qreal level); voidQWidget::setWindowRole(const QString&); voidQWidget::setWindowState(Qt::WindowStates state); voidQWidget::setWindowSurface(QWindowSurface* surface); voidQWidget::setWindowTitle(const QString&); voidQWidget::show(); voidQWidget::showFullScreen(); voidQWidget::showMaximized(); virtual voidShowMembers(TMemberInspector& insp) const; voidQWidget::showMinimized(); voidQWidget::showNormal(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQFrame::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidUnSetButtonMask(bool dtor = false); voidQWidget::unsetCursor(); voidUnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::wid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQtClientWidget.html:14240,test,testAttribute,14240,root/html602/TQtClientWidget.html,https://root.cern,https://root.cern/root/html602/TQtClientWidget.html,2,['test'],['testAttribute']
Testability,et; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; Bool_t_doOffsetApply interval value offset to control numeric precision?; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_t_evalCarry! carry of Kahan sum in evaluatePartition; Int_t_extSet! Number of designated set to calculated extended term; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*_funcPointer to original input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; pRooAbsTestStatistic*_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpMode_gofOpModeOperation mode of test statistic instance; vector<RooFit::MPSplit>_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! Is object initialized; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; pRooRealMPFE*_mpfeArray! Array of parallel execution frond ends; RooFit::MPSplit_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-split; Int_t_nCPUNumber of processors to use in parallel calculation mode; Int_t_nEventsTotal number of events in test statistic calculation; Int_t_nGofNumber of sub-contexts; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsTestStatistic.html:38747,test,test,38747,root/html602/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsTestStatistic.html,2,['test'],['test']
Testability,"et; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWheter the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue for asynchronous processi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSocket.html:11783,log,login,11783,root/html528/TXSocket.html,https://root.cern,https://root.cern/root/html528/TXSocket.html,1,['log'],['login']
Testability,"etCovariance (Int_t axis1=1, Int_t axis2=2) const;  Return covariance between axis1 and axis2. ;  ; virtual void GetRandom2 (Double_t &x, Double_t &y, TRandom *rng=nullptr);  Return 2 random numbers along axis x and y distributed according to the cell-contents of this 2-D histogram. ;  ; virtual Double_t Integral (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; virtual Double_t Integral (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *="""") const;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; TProfile * ProfileX (const char *name=""_pfx"", Int_t firstybin=1, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along X. ;  ; TProfile * ProfileY (const char *name=""_pfy"", Int_t firstxbin=1, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along Y. ;  ; TH1D * ProjectionX (const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""_qx"") const;  Compute the X distribution of quant",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:15897,test,test,15897,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,4,['test'],['test']
Testability,"etDataSets (const char *uri="""", const char *optStr="""");  Lists all datasets that match given uri. ;  ; TString Getenv (const char *env, const char *ord=""0"");  Get value of environment variable 'env' on node 'ord'. ;  ; TList * GetFeedbackList () const;  Return feedback list. ;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TList * GetInputList ();  Get input list. ;  ; TMacro * GetLastLog ();  Fill a TMacro with the log lines since the last reading (fLogFileR) Return (TMacro *)0 if no line was logged. ;  ; TList * GetListOfEnabledPackages ();  Get from the master the list of names of the packages enabled. ;  ; TList * GetListOfPackages ();  Get from the master the list of names of the packages available. ;  ; virtual TList * GetListOfQueries (Option_t *opt="""");  Ask the master for the list of queries. ;  ; TList * GetListOfSlaveInfos ();  Returns list of TSlaveInfo's. In case of error return 0. ;  ; TList * GetLoadedMacros () const;  ; void GetLog (Int_t start=-1, Int_t end=-1);  Ask for remote logs in the range [start, end]. ;  ; Int_t GetLogLevel () const;  ; TMacro * GetMacroLog ();  ; TProofMgr * GetManager ();  ; const char * GetMaster () const;  ; void GetMaxQueries ();  Get max number of queries whose full results are kept in the remote sandbox. ;  ; TFileCollection * GetMissingFiles (TQueryResult *qr=0);  Get a TFileCollection with the files missing in the query described by 'qr' or the last query if qr is null (default). ;  ; Int_t GetNumberOfDrawQueries ();  ; Int_t GetNumberOfQueries ();  Number of queries processed by this session. ;  ; TObject * GetOutput (const char *name);  Get specified object that has been produced during the processing (see Process()). ;  ; TList * GetOutputList ();  Get list with all object created during processing (see Process()). ;  ; TList * GetOutputNames ();  FIXME: to be written. ;  ; Int_t GetParallel () const;  Returns number of slaves active in parallel mode. ;  ; TObject * GetParameter (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:9489,log,logs,9489,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['log'],['logs']
Testability,"etDecimals(Bool_t dot = kTRUE); Set the Decimals flag; By default, blank characters are stripped, and then the; label is correctly aligned. The dot, if last character of the string,; is also stripped, unless this option is specified.; One can disable the option by calling axis.SetDecimals(kTRUE).; Note the bit is set in fBits (as opposed to fBits2 in TAxis!). void SetFunction(const char* funcname = """"); Specify a function to map the axis values. void SetMaxDigits(Int_t maxd = 5); Static function to set fgMaxDigits for axis.; fgMaxDigits is the maximum number of digits permitted for the axis; labels above which the notation with 10^N is used.; For example, to accept 6 digits number like 900000 on an axis; call TGaxis::SetMaxDigits(6). The default value is 5.; fgMaxDigits must be greater than 0. void SetName(const char* name); Change the name of the axis. void SetMoreLogLabels(Bool_t more = kTRUE); Set the kMoreLogLabels bit flag.; When this option is selected more labels are drawn when in log scale; and there is a small number of decades (<3).; Note that this option is automatically inherited from TAxis. void SetNoExponent(Bool_t noExponent = kTRUE); Set the NoExponent flag.; By default, an exponent of the form 10^N is used when the label values; are either all very small or very large.; One can disable the exponent by calling axis.SetNoExponent(kTRUE). void SetOption(Option_t* option = """"); To set axis options. void SetTitle(const char* title = """"); Change the title of the axis. void SetTimeFormat(const char* tformat); Change the format used for time plotting.; The format string for date and time use the same options as the one used; in the standard strftime C function, i.e. :; for date :; %a abbreviated weekday name; %b abbreviated month name; %d day of the month (01-31); %m month (01-12); %y year without century. for time :; %H hour (24-hour clock); %I hour (12-hour clock); %p local equivalent of AM or PM; %M minute (00-59); %S seconds (00-61); %% %. void SetTimeO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGaxis.html:20674,log,log,20674,root/html530/TGaxis.html,https://root.cern,https://root.cern/root/html530/TGaxis.html,4,['log'],['log']
Testability,"etDirDirectory containing info about known data sets; TDataSetManager*fDataSetManagerDataset manager; TDataSetManagerFile*fDataSetStgRepoDataset manager for staging requests; Bool_tfForkStartupStartup N-1 workers forking the first worker; Int_tfNWorkersNumber of workers; TQueryResultManager*fQMgrQuery-result manager; TStringfQueryDirDirectory containing query results and status; TProofLockPath*fQueryLockQuery dir locker; TPMERegexp*fReInvalidRegular expression matching invalid dataset URIs; TStringfSandboxPROOF sandbox root dir; TStringfSelectionInternal variable to pass drawing options; TServerSocket*fServSockServer socket to accept call backs; TStringfSockPathUNIX socket path for communication with workers; TStringfVarExpInternal variable to pass drawing options; static Int_tfgWrksMaxMax number of workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Create a PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:28877,log,loglevel,28877,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,1,['log'],['loglevel']
Testability,"etInfo.GetName()); 1812 << ""Note: no correlations and overlap with cut method are provided at present"" << Endl;; 1813 ; 1814 if (nmeth > 1) {; 1815 Log() << kINFO << Endl;; 1816 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1817 << ""Inter-MVA overlap matrix (signal):"" << Endl;; 1818 gTools().FormattedOutput(*overlapS, *theVars, Log());; 1819 Log() << kINFO << Endl;; 1820 ; 1821 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1822 << ""Inter-MVA overlap matrix (background):"" << Endl;; 1823 gTools().FormattedOutput(*overlapB, *theVars, Log());; 1824 }; 1825 ; 1826 // cleanup; 1827 delete tpSig;; 1828 delete tpBkg;; 1829 delete corrMatS;; 1830 delete corrMatB;; 1831 delete theVars;; 1832 delete overlapS;; 1833 delete overlapB;; 1834 delete[] dvec;; 1835 }; 1836 }; 1837 }; 1838 // -----------------------------------------------------------------------; 1839 // Third part of evaluation process; 1840 // --> output; 1841 // -----------------------------------------------------------------------; 1842 ; 1843 if (doRegression) {; 1844 ; 1845 Log() << kINFO << Endl;; 1846 TString hLine =; 1847 ""--------------------------------------------------------------------------------------------------"";; 1848 Log() << kINFO << ""Evaluation results ranked by smallest RMS on test sample:"" << Endl;; 1849 Log() << kINFO << ""(\""Bias\"" quotes the mean deviation of the regression from true target."" << Endl;; 1850 Log() << kINFO << "" \""MutInf\"" is the \""Mutual Information\"" between regression and target."" << Endl;; 1851 Log() << kINFO << "" Indicated by \""_T\"" are the corresponding \""truncated\"" quantities ob-"" << Endl;; 1852 Log() << kINFO << "" tained when removing events deviating more than 2sigma from average.)"" << Endl;; 1853 Log() << kINFO << hLine << Endl;; 1854 // Log() << kINFO << ""DataSet Name: MVA Method: <Bias> <Bias_T> RMS RMS_T | MutInf; 1855 // MutInf_T"" << Endl;; 1856 Log() << kINFO << hLine << Endl;; 1857 ; 1858 for (Int_t i = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:76597,test,test,76597,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['test'],['test']
Testability,"etLabelSize(h->GetZaxis()->GetLabelSize());; 4520 palette->SetTitleOffset(h->GetZaxis()->GetTitleOffset());; 4521 palette->SetTitleSize(h->GetZaxis()->GetTitleSize());; 4522 palette->SetNdivisions(h->GetZaxis()->GetNdivisions());; 4523 palette->SetTitle(h->GetZaxis()->GetTitle());; 4524 palette->SetTitleColor(h->GetZaxis()->GetTitleColor());; 4525 palette->SetTitleFont(h->GetZaxis()->GetTitleFont());; 4526 ; 4527 functions->AddFirst(palette);; 4528 }; 4529 if (palette) palette->Paint();; 4530 }; 4531 ; 4532 // Draw markers; 4533 auto nbcol = gStyle->GetNumberOfColors();; 4534 int logx = gPad->GetLogx();; 4535 int logy = gPad->GetLogy();; 4536 int logz = gPad->GetLogz();; 4537 if (theColor && logz) {; 4538 if (minc>0) minc = log10(minc);; 4539 if (maxc>0) maxc = log10(maxc);; 4540 }; 4541 theScatter->SetMarkerColor(theScatter->GetMarkerColor());; 4542 theScatter->TAttMarker::Modify();; 4543 double x,y,c,ms;; 4544 int nc;; 4545 for (int i=0; i<n; i++) {; 4546 if (theColor) {; 4547 if (logz) {; 4548 if (theColor[i]>0) c = log10(theColor[i]);; 4549 else continue;; 4550 } else {; 4551 c = theColor[i];; 4552 }; 4553 if (c<minc) continue;; 4554 if (c>maxc) continue;; 4555 nc = TMath::Nint(((c-minc)/(maxc-minc))*(nbcol-1));; 4556 if (nc > nbcol-1) nc = nbcol-1;; 4557 theScatter->SetMarkerColor(gStyle->GetColorPalette(nc));; 4558 }; 4559 if (theSize) {; 4560 ms = (MaxMarkerSize-MinMarkerSize)*((theSize[i]-mins)/(maxs-mins))+MinMarkerSize;; 4561 theScatter->SetMarkerSize(ms);; 4562 }; 4563 if (theColor || theSize) theScatter->TAttMarker::Modify();; 4564 if (logx) {; 4565 if (theX[i]>0) x = log10(theX[i]);; 4566 else break;; 4567 } else {; 4568 x = theX[i];; 4569 }; 4570 if (logy) {; 4571 if (theY[i]>0) y = log10(theY[i]);; 4572 else break;; 4573 } else {; 4574 y = theY[i];; 4575 }; 4576 gPad->PaintPolyMarker(1,&x,&y);; 4577 }; 4578}; 4579 ; 4580 ; 4581////////////////////////////////////////////////////////////////////////////////; 4582/// Paint a simple graph, without errors ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:160225,log,logz,160225,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['log'],['logz']
Testability,"etModelFull(); voidSetModelLinear(); voidSetModelRules(); voidSetMsgType(TMVA::EMsgType t); voidSetRuleMinDist(Double_t d); voidSetTrainingEvents(const vector<TMVA::Event*>& el); voidSetVisHistsUseImp(Bool_t f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidUseCoefficientsVisHists(); voidUseImportanceVisHists(). private:. voidCopy(const TMVA::RuleFit& other); TMVA::MsgLogger&Log() const; TMVA::RuleFitRuleFit(const TMVA::RuleFit& other). Data Members; private:. vector<Double_t>fEventWeightsoriginal weights of the events - follows fTrainingEvents; vector<const TMVA::DecisionTree*>fForestthe input forest of decision trees; TMVA::MsgLogger*fLoggermessage logger; const TMVA::MethodBase*fMethodBasepointer the method base which initialized this RuleFit instance; const TMVA::MethodRuleFit*fMethodRuleFitpointer the method which initialized this RuleFit instance; Double_tfNEveEffTrainreweighted number of events = sum(wi); UInt_tfNTreeSamplenumber of events in sub sample = frac*neve; TMVA::RuleEnsemblefRuleEnsemblethe ensemble of rules; TMVA::RuleFitParamsfRuleFitParamsfit rule parameters; vector<TMVA::Event*>fTrainingEventsall training events; vector<TMVA::Event*>fTrainingEventsRndmidem, but randomly shuffled; Bool_tfVisHistsUseImpif true, use importance as weight; else coef in vis hists; static const Int_trandSEEDset to 1 for debugging purposes or to zero for random seeds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RuleFit( const MethodBase *rfbase ); constructor. RuleFit(); default constructor. ~RuleFit(); destructor. void InitNEveEff(); init effective number of events (using event weights). void InitPtrs(const TMVA::MethodBase* rfbase); initialize pointers. void Initialize(const TMVA::MethodBase* rfbase); initialize the parameters of the RuleFit method and make rules. void SetMethodBase(const TMVA::MethodBase* rfbase); set MethodBase. void Copy(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__RuleFit.html:2939,log,logger,2939,root/html528/TMVA__RuleFit.html,https://root.cern,https://root.cern/root/html528/TMVA__RuleFit.html,3,['log'],['logger']
Testability,"etModelRules(); voidSetMsgType(TMVA::EMsgType t); voidSetRuleMinDist(Double_t d); voidSetTrainingEvents(const vector<const TMVA::Event*>& el); voidSetVisHistsUseImp(Bool_t f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUseCoefficientsVisHists(); voidUseImportanceVisHists(). private:. voidCopy(const TMVA::RuleFit& other); TMVA::MsgLogger&Log() const; TMVA::RuleFitRuleFit(const TMVA::RuleFit& other). Data Members; private:. vector<Double_t>fEventWeightsoriginal weights of the events - follows fTrainingEvents; vector<const TMVA::DecisionTree*>fForestthe input forest of decision trees; TMVA::MsgLogger*fLoggermessage logger; const TMVA::MethodBase*fMethodBasepointer the method base which initialized this RuleFit instance; const TMVA::MethodRuleFit*fMethodRuleFitpointer the method which initialized this RuleFit instance; Double_tfNEveEffTrainreweighted number of events = sum(wi); UInt_tfNTreeSamplenumber of events in sub sample = frac*neve; TMVA::RuleEnsemblefRuleEnsemblethe ensemble of rules; TMVA::RuleFitParamsfRuleFitParamsfit rule parameters; vector<const TMVA::Event*>fTrainingEventsall training events; vector<const TMVA::Event*>fTrainingEventsRndmidem, but randomly shuffled; Bool_tfVisHistsUseImpif true, use importance as weight; else coef in vis hists; static const Int_trandSEEDset to 1 for debugging purposes or to zero for random seeds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RuleFit( const MethodBase *rfbase ); constructor. RuleFit(); default constructor. ~RuleFit(); destructor. void InitNEveEff(); init effective number of events (using event weights). void InitPtrs(const TMVA::MethodBase* rfbase); initialize pointers. void Initialize(const TMVA::MethodBase* rfbase); initialize the parameters of the RuleFit method and make rules. void SetMethodBase(const TMVA::MethodBase* rfbase); set MethodBase. void Copy(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__RuleFit.html:3033,log,logger,3033,root/html602/TMVA__RuleFit.html,https://root.cern,https://root.cern/root/html602/TMVA__RuleFit.html,2,['log'],['logger']
Testability,"etOriginalWeight(); });; 1535 ; 1536 if ( cls == dsi.GetSignalClassIndex()){; 1537 trainingSumSignalWeights += trainingSumWeightsPerClass.at(cls);; 1538 testingSumSignalWeights += testingSumWeightsPerClass.at(cls);; 1539 }else{; 1540 trainingSumBackgrWeights += trainingSumWeightsPerClass.at(cls);; 1541 testingSumBackgrWeights += testingSumWeightsPerClass.at(cls);; 1542 }; 1543 }; 1544 ; 1545 // ---------------------------------; 1546 // compute renormalization factors; 1547 ; 1548 ValuePerClass renormFactor( dsi.GetNClasses() );; 1549 ; 1550 ; 1551 // for information purposes; 1552 dsi.SetNormalization( normMode );; 1553 // !! these will be overwritten later by the 'rescaled' ones if; 1554 // NormMode != None !!!; 1555 dsi.SetTrainingSumSignalWeights(trainingSumSignalWeights);; 1556 dsi.SetTrainingSumBackgrWeights(trainingSumBackgrWeights);; 1557 dsi.SetTestingSumSignalWeights(testingSumSignalWeights);; 1558 dsi.SetTestingSumBackgrWeights(testingSumBackgrWeights);; 1559 ; 1560 ; 1561 if (normMode == ""NONE"") {; 1562 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""No weight renormalisation applied: use original global and event weights"" << Endl;; 1563 return;; 1564 }; 1565 //changed by Helge 27.5.2013 What on earth was done here before? I still remember the idea behind this which apparently was; 1566 //NOT understood by the 'programmer' :) .. the idea was to have SAME amount of effective TRAINING data for signal and background.; 1567 // Testing events are totally irrelevant for this and might actually skew the whole normalisation!!; 1568 else if (normMode == ""NUMEVENTS"") {; 1569 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1570 << ""\tWeight renormalisation mode: \""NumEvents\"": renormalises all event classes "" << Endl;; 1571 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1572 << "" such that the effective (weighted) number of events in each class equals the respective "" << Endl;; 1573 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:71047,test,testingSumBackgrWeights,71047,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testingSumBackgrWeights']
Testability,"etPadTopMarginvoid SetPadTopMargin(Float_t margin=0.1)Definition TStyle.h:359; TStyle::GetStatTextColorColor_t GetStatTextColor() constDefinition TStyle.h:258; TStyle::SetLegendFontvoid SetLegendFont(Style_t font=62)Definition TStyle.h:353; TStyle::SetTitleXvoid SetTitleX(Float_t x=0)Definition TStyle.h:413; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::fCanvasDefWInt_t fCanvasDefWDefault canvas width.Definition TStyle.h:89; TStyle::SetHistFillColorvoid SetHistFillColor(Color_t color=1)Definition TStyle.h:379; TStyle::fHatchesLineWidthInt_t fHatchesLineWidthHatches line width for hatch styles > 3100.Definition TStyle.h:68; TStyle::fScreenFactorFloat_t fScreenFactorMultiplication factor for canvas size and position.Definition TStyle.h:105; TStyle::SetLegoInnerRvoid SetLegoInnerR(Float_t rad=0.5)Definition TStyle.h:316; TStyle::SetOptLogxvoid SetOptLogx(Int_t logx=1)Definition TStyle.h:329; TStyle::fYAxisExpXOffsetFloat_t fYAxisExpXOffsetY axis exponent label X offset.Definition TStyle.h:147; TStyle::fTitleFontSizeFloat_t fTitleFontSizeFont size in pixels for fonts with precision type 3.Definition TStyle.h:123; TStyle::SetDateXvoid SetDateX(Float_t x=0.01)Definition TStyle.h:337; TStyle::fCanvasDefXInt_t fCanvasDefXDefault canvas top X position.Definition TStyle.h:90; TStyle::SetStatFormatvoid SetStatFormat(const char *format=""6.4g"")Definition TStyle.h:396; TStyle::SetPadBottomMarginvoid SetPadBottomMargin(Float_t margin=0.1)Definition TStyle.h:358; TStyle::GetTitleXFloat_t GetTitleX() constDefinition TStyle.h:280; TStyle::fViolinScaledBool_t fViolinScaledViolin plot, shall the violin or histos be scaled to each other by the maximum height?Definition TStyle.h:144; TStyle::SetLegendFillColorvoid SetLegendFillColor(Color_t color=0)Definition TStyle.h:351; TStyle::fPadRightMarginFloat_t fPadRightMarginPad right margin.Definition TSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8h_source.html:34538,log,logx,34538,doc/master/TStyle_8h_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8h_source.html,1,['log'],['logx']
Testability,"etRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; zmin, . Double_t & ; xmax, . Double_t & ; ymax, . Double_t & ; zmax . ); const. virtual . Return range of function. ; Reimplemented in TF2, TF3, TF2, and TF3.; Definition at line 2330 of file TF1.cxx. ◆ GetRange() [4/4]. void TF1::GetRange ; (; Double_t * ; xmin, . Double_t * ; xmax . ); const. protectedvirtual . Return range of a generic N-D function. ; Reimplemented in TF2, and TF3.; Definition at line 2281 of file TF1.cxx. ◆ GetSave(). Double_t TF1::GetSave ; (; const Double_t * ; x). virtual . Get value corresponding to X in array of fSave values. ; Reimplemented in TF2, and TF3.; Definition at line 2344 of file TF1.cxx. ◆ GetVariable(). virtual Double_t TF1::GetVariable ; (; const TString & ; name). inlinevirtual . Definition at line 591 of file TF1.h. ◆ GetX(). Double_t TF1::GetX ; (; Double_t ; fy, . Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the function value fy for (xmin<x<xmax). ; in other words it can find the roots of the function when fy=0 and successive calls by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX, TF1::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:88220,log,logx,88220,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['log'],['logx']
Testability,"etReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fFcnCall;  ; Volume * fHelpVolume;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  EKernelEstimator { ;   kBox = 0; , kSphere; , kTeepee; , kGauss; , ;   kSinc3; , kSinc5; , kSinc7; , kSinc9; , ;   kSinc11; , kLanczos2; , kLanczos3; , kLanczos5; , ;   kLanczos8; , kTrim. };  ; enum  EVolumeRangeMode { ;   kUnsupported = 0; , kMinMax; , kRMS; , kAdaptive; , ;   kUnscaled; , kkNN. };  . Private Member Functions; void CalcAverages ();  compute also average RMS values required for adaptive Gaussian ;  ; void CreateBinarySearchTree (Types::ETreeType ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:29280,test,testing,29280,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,2,"['log', 'test']","['logger', 'testing']"
Testability,"etUxmax());; 2972 }; 2973 if (optSAME.Length()) {; 2974 // Completely outside; 2975 if (xmax < pmin) return;; 2976 if (xmin > pmax) return;; 2977 }; 2978 ; 2979 // create an histogram using the function content (re-use it if already existing); 2980 fHistogram = DoCreateHistogram(xmin, xmax, kFALSE);; 2981 ; 2982 auto is_pfc = opt0.Index(""PFC""); // Automatic Fill Color; 2983 auto is_plc = opt0.Index(""PLC""); // Automatic Line Color; 2984 auto is_pmc = opt0.Index(""PMC""); // Automatic Marker Color; 2985 if (is_pfc != kNPOS || is_plc != kNPOS || is_pmc != kNPOS) {; 2986 Int_t i = gPad->NextPaletteColor();; 2987 if (is_pfc != kNPOS) { opt0.Replace(is_pfc, 3, "" ""); fHistogram->SetFillColor(i); }; 2988 if (is_plc != kNPOS) { opt0.Replace(is_plc, 3, "" ""); fHistogram->SetLineColor(i); }; 2989 if (is_pmc != kNPOS) { opt0.Replace(is_pmc, 3, "" ""); fHistogram->SetMarkerColor(i); }; 2990 }; 2991 ; 2992 // set the optimal minimum and maximum; 2993 Double_t minimum = fHistogram->GetMinimumStored();; 2994 Double_t maximum = fHistogram->GetMaximumStored();; 2995 if (minimum <= 0 && gPad && gPad->GetLogy()) minimum = -1111; // This can happen when switching from lin to log scale.; 2996 if (gPad && gPad->GetUymin() < fHistogram->GetMinimum() &&; 2997 !fHistogram->TestBit(TH1::kIsZoomed)) minimum = -1111; // This can happen after unzooming a fit.; 2998 if (minimum == -1111) { // This can happen after unzooming.; 2999 if (fHistogram->TestBit(TH1::kIsZoomed)) {; 3000 minimum = fHistogram->GetYaxis()->GetXmin();; 3001 } else {; 3002 minimum = fMinimum;; 3003 // Optimize the computation of the scale in Y in case the min/max of the; 3004 // function oscillate around a constant value; 3005 if (minimum == -1111) {; 3006 Double_t hmin;; 3007 if (optSAME.Length() && gPad) hmin = gPad->GetUymin();; 3008 else hmin = fHistogram->GetMinimum();; 3009 if (hmin > 0) {; 3010 Double_t hmax;; 3011 Double_t hminpos = hmin;; 3012 if (optSAME.Length() && gPad) hmax = gPad->GetUymax();; 3013 else hmax = fHisto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:114687,log,log,114687,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['log']
Testability,"etVal(0.50); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.625); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.75); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.875); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.95); lmorph.plotOn(frame1, LineColor=""r""); ; # Show 2D distribution of pdf(x,alpha); # -----------------------------------------------------------------------; ; # Create 2D histogram; hh = lmorph.createHistogram(""hh"", x, Binning=40, YVar=dict(var=alpha, Binning=40)); hh.SetLineColor(ROOT.kBlue); ; # Fit pdf to dataset with alpha=0.8; # -----------------------------------------------------------------; ; # Generate a toy dataset alpha = 0.8; alpha.setVal(0.8); data = lmorph.generate({x}, 1000); ; # Fit pdf to toy data; lmorph.setCacheAlpha(True); lmorph.fitTo(data, Verbose=True, PrintLevel=-1); ; # Plot fitted pdf and data overlaid; frame2 = x.frame(Bins=100); data.plotOn(frame2); lmorph.plotOn(frame2); ; # Scan -log(L) vs alpha; # -----------------------------------------; ; # Show scan -log(L) of dataset w.r.t alpha; frame3 = alpha.frame(Bins=100, Range=(0.1, 0.9)); ; # Make 2D pdf of histogram; nll = lmorph.createNLL(data); nll.plotOn(frame3, ShiftToZero=True); ; lmorph.setCacheAlpha(False); ; c = ROOT.TCanvas(""rf705_linearmorph"", ""rf705_linearmorph"", 800, 800); c.Divide(2, 2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.6); frame1.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.20); hh.GetZaxis().SetTitleOffset(2.5); hh.Draw(""surf""); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame3.GetYaxis().SetTitleOffset(1.4); frame3.Draw(); c.cd(4); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.4); frame2.Draw(); ; c.SaveAs(""rf705_linearmorph.png""); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x8bddf40 with pdf g1_MORPH_g2_CACHE_Obs[x]_NORM_x for nset (x) with code 0; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x8bddf40 with pdf g1_MOR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf705__linearmorph_8py.html:2639,log,log,2639,doc/master/rf705__linearmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf705__linearmorph_8py.html,2,['log'],['log']
Testability,"eta)<=1.3""; : Dataset[Category_Fisher_1_dsi] : Signal -- number of events passed: 5123 / sum of weights: 5123 ; : Dataset[Category_Fisher_1_dsi] : Signal -- efficiency : 0.5123; : Dataset[Category_Fisher_1_dsi] : Background requirement: ""abs(eta)<=1.3""; : Dataset[Category_Fisher_1_dsi] : Background -- number of events passed: 5134 / sum of weights: 5134 ; : Dataset[Category_Fisher_1_dsi] : Background -- efficiency : 0.5134; : Dataset[Category_Fisher_1_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.5123 preselection efficiency); : Dataset[Category_Fisher_1_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.5134 preselection efficiency); : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 2561; : Signal -- testing events : 2561; : Signal -- training and testing events: 5122; : Dataset[Category_Fisher_1_dsi] : Signal -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.5123; : Background -- training events : 2567; : Background -- testing events : 2567; : Background -- training and testing events: 5134; : Dataset[Category_Fisher_1_dsi] : Background -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.5134; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 -0.017 +0.004 +0.001; : var2: -0.017 +1.000 -0.019 -0.003; : var3: +0.004 -0.019 +1.000 -0.012; : var4: +0.001 -0.003 -0.012 +1.000; : ----------------------------------------; <HEADER> DataSetInfo : Correlation matrix (Background):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 -0.019 -0.022 +0.003; : var2: -0.019 +1.000 -0.018 +0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:6594,test,testing,6594,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,3,['test'],['testing']
Testability,"eta[bin];; 2068 xp[i] = alpha[bin] + xx;; 2069 } else {; 2070 xp[i] = alpha[bin];; 2071 if (integral[bin + 1] == r) xp[i] += dx;; 2072 }; 2073 }; 2074 ; 2075 return n;; 2076}; 2077////////////////////////////////////////////////////////////////////////////////; 2078///; 2079/// Compute the cumulative function at fNpx points between fXmin and fXmax.; 2080/// Option can be used to force a log scale (option = ""log""), linear (option = ""lin"") or automatic if empty.; 2081Bool_t TF1::ComputeCdfTable(Option_t * option) {; 2082 ; 2083 fIntegral.resize(fNpx + 1);; 2084 fAlpha.resize(fNpx + 1);; 2085 fBeta.resize(fNpx);; 2086 fGamma.resize(fNpx);; 2087 fIntegral[0] = 0;; 2088 fAlpha[fNpx] = 0;; 2089 Double_t integ;; 2090 Int_t intNegative = 0;; 2091 Int_t i;; 2092 Bool_t logbin = kFALSE;; 2093 Double_t dx;; 2094 Double_t xmin = fXmin;; 2095 Double_t xmax = fXmax;; 2096 TString opt(option);; 2097 opt.ToUpper();; 2098 // perform a log binning if specified by user (option=""Log"") or if some conditions are met; 2099 // and the user explicitly does not specify a Linear binning option; 2100 if (opt.Contains(""LOG"") || ((xmin > 0 && xmax / xmin > fNpx) && !opt.Contains(""LIN""))) {; 2101 logbin = kTRUE;; 2102 fAlpha[fNpx] = 1;; 2103 xmin = TMath::Log10(fXmin);; 2104 xmax = TMath::Log10(fXmax);; 2105 if (gDebug); 2106 Info(""GetRandom"", ""Use log scale for tabulating the integral in [%f,%f] with %d points"", fXmin, fXmax, fNpx);; 2107 }; 2108 dx = (xmax - xmin) / fNpx;; 2109 ; 2110 std::vector<Double_t> xx(fNpx + 1);; 2111 for (i = 0; i < fNpx; i++) {; 2112 xx[i] = xmin + i * dx;; 2113 }; 2114 xx[fNpx] = xmax;; 2115 for (i = 0; i < fNpx; i++) {; 2116 if (logbin) {; 2117 integ = Integral(TMath::Power(10, xx[i]), TMath::Power(10, xx[i + 1]), 0.0);; 2118 } else {; 2119 integ = Integral(xx[i], xx[i + 1], 0.0);; 2120 }; 2121 if (integ < 0) {; 2122 intNegative++;; 2123 integ = -integ;; 2124 }; 2125 fIntegral[i + 1] = fIntegral[i] + integ;; 2126 }; 2127 if (intNegative > 0) {; 2128 Warning(""GetRand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:76942,log,log,76942,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['log']
Testability,"ete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:19340,test,test,19340,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,2,"['log', 'test']","['logger', 'test']"
Testability,"ete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/VariableImportance.h>. Inheritance diagram for TMVA::VariableImportance:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ VariableImportance(). TMVA::VariableImportance::VariableImportance ; (; TMVA::DataLoader * ; dataloader). explicit . Definition at line 91 of file VariableImportance.cxx. ◆ ~VariableImportance(). TMVA::VariableImportance::~VariableImportance ; (; ). Definition at line 98 of file VariableImportance.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::VariableImportance::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::VariableImportance::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html:17302,test,test,17302,doc/master/classTMVA_1_1VariableImportance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html,2,"['log', 'test']","['logger', 'test']"
Testability,"eter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 20 of file TSpectrumFit.h. ◆ fNumberIterations. Int_t TSpectrumFit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 21 of file TSpectrumFit.h. ◆ fPositionCalc. Double_t* TSpectrumFit::fPositionCalc. protected . [fNPeaks] array of calculated values of fitted positions, output parameters ; Definition at line 31 of file TSpectrumFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:54185,log,logical,54185,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['log'],['logical']
Testability,"eter of interest for interval. ~LikelihoodInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const; This is the main method to satisfy the RooStats::ConfInterval interface.; It returns true if the parameter point is in the interval. RooArgSet* GetParameters() const; returns list of parameters. Bool_t CheckParameters(const RooArgSet& ) const; check that the parameters are correct. Double_t LowerLimit(const RooRealVar& param); compute the interval lower limit for the specified confidence level; or size using MINOS; Note that both lower and upper limit are computed and cached internally so; any subsequent calls (for the same CL will be fast to execute). Double_t UpperLimit(const RooRealVar& param); compute the interval upper limit for the specified confidence level; or size using MINOS.; Note that both lower and upper limit are computed and cached internally so; any subsequent calls (for the same CL will be fast to execute). void ResetLimits(); reset map with cached limits - called every time the test size or CL has been changed. bool CreateMinimizer(); internal function to create minimizer object needed to find contours or interval limits; (running MINOS).; Minimizer must be Minuit or Minuit2. bool FindLimits(const RooRealVar& param, double& lower, double& upper); Method to find both lower and upper limits using MINOS; If cached values exist (limits have been already found) return them in that case. Int_t GetContourPoints(const RooRealVar& paramX, const RooRealVar& paramY, Double_t* x, Double_t* y, Int_t npoints = 30); use Minuit to find the contour of the likelihood function at the desired CL. explicit LikelihoodInterval(const char* name = 0); defult constructor. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g 0.682 for a 1-sigma interval). {fConfidenceLevel = cl; ResetLimits(); }. Double_t ConfidenceLevel() const; return confidence level. {return fConfidenceLevel;}. RooAbsReal* GetLikelihoodRatio(); return the profile ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__LikelihoodInterval.html:9628,test,test,9628,root/html526/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__LikelihoodInterval.html,1,['test'],['test']
Testability,"eter value. It is user responsability to give the current parameters to rebuild the distributions; It returns a upper or lower limit distribution depending on the isUpper flag, however it computes also the lower limit distribution and it is saved in the; output file as an histogram. void SetFixedScan(int nBins, double xMin = 1, double xMax = -1, bool scanLog = false); set for a fixed scan in nbins. void SetAutoScan(); set auto scan (default). { SetFixedScan(0); }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. HypoTestCalculatorGeneric * GetHypoTestCalculator() const; retrieved a reference to the internally used HypoTestCalculator; it might be invalid when the class is deleted. { return fCalculator0; }. void SetVerbose(int level = 1); set verbose level (0,1,2). { fVerbose = level; }. void SetMaximumToys(int ntoys); set maximum number of toys. { fMaxToys = ntoys;}. void SetNumErr(double err); set numerical error in test statistic evaluation (default is zero). { fNumErr = err; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverter.html:12397,test,test,12397,root/html534/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverter.html,3,['test'],['test']
Testability,"eter value. It is user responsability to give the current parameters to rebuild the distributions; It returns a upper or lower limit distribution depending on the isUpper flag, however it computes also the lower limit distribution and it is saved in the; output file as an histogram. void SetFixedScan(int nBins, double xMin = 1, double xMax = -1, bool scanLog = false); set for a fixed scan in nbins. void SetAutoScan(); set auto scan (default). { SetFixedScan(0); }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. HypoTestCalculatorGeneric * GetHypoTestCalculator() const; retrieved a reference to the internally used HypoTestCalculator; it might be invalid when the class is deleted. { return fCalculator0; }. void SetVerbose(int level = 1); set verbose level (0,1,2). { fVerbose = level; }. void SetMaximumToys(int ntoys); set maximum number of toys. { fMaxToys = ntoys;}. void SetNumErr(double err); set numerical error in test statistic evaluation (default is zero). { fNumErr = err; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HypoTestInverter.html:12923,test,test,12923,root/html604/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html604/RooStats__HypoTestInverter.html,3,['test'],['test']
Testability,"eter value. It is user responsability to give the current parameters to rebuild the distributions; It returns a upper or lower limit distribution depending on the isUpper flag, however it computes also the lower limit distribution and it is saved in the; output file as an histogram. void SetFixedScan(int nBins, double xMin = 1, double xMax = -1, bool scanLog = false); set for a fixed scan in nbins. void SetAutoScan(); set auto scan (default). { SetFixedScan(0); }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. HypoTestCalculatorGeneric * GetHypoTestCalculator() const; retrieved a reference to the internally used HypoTestCalculator; it might be invalid when the class is deleted. { return fCalculator0; }. void SetVerbose(int level = 1); set verbose level (0,1,2). { fVerbose = level; }. void SetMaximumToys(int ntoys); set maximum number of toys. { fMaxToys = ntoys;}. void SetNumErr(double err); set numerical error in test statistic evaluation (default is zero). { fNumErr = err; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverter.html:12923,test,test,12923,root/html602/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverter.html,3,['test'],['test']
Testability,"ether two one-dimensional sets of points are compatible; with coming from the same parent distribution, using the Kolmogorov test.; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively.; The elements of a and b must be given in ascending order.; option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a; statistical test for compatibility of a and b.; Values of prob close to zero are taken as indicating a small probability; of compatibility. For two point sets drawn randomly from the same parent; distribution, the value of prob should be uniformly distributed between; zero and one.; in case of error the function return -1; If the 2 sets have a different number of points, the minimum of; the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation; between the two integrated distribution functions, multiplied by the; normalizing factor (rdmax*sqrt(na*nb/(na+nb)). Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; Statistical Methods in Experimental Physics, (North-Holland,; Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov). The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; over the two sorted arrays a and b representing empirical distribution; functions. The for-loop handles 3 cases: when the next points to be; evaluated satisfy a>b, a<b, or a=b:. for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:18327,test,test,18327,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,6,['test'],['test']
Testability,"ether with TProcessExecutor to allow the execution of functions in server processes ;  CTPoolWorker< F, T, void >;  CTPoolWorker< F, void, R >;  CTPosixCondition;  CTPosixMutex;  CTPosixThread;  CTPosixThreadCleanUp;  CTPosixThreadFactory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimaryOld version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:177224,benchmark,benchmarks,177224,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['benchmark'],['benchmarks']
Testability,"ethod SetDefaultNSearch. This class is implemented from TF1::GetX() method. @ingroup RootFinders. Function Members (Methods); public:. virtual~BrentRootFinder(); ROOT::Math::BrentRootFinderBrentRootFinder(); ROOT::Math::BrentRootFinderBrentRootFinder(const ROOT::Math::BrentRootFinder&); virtual intROOT::Math::IRootFinderMethod::Iterate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&ROOT::Math::IRootFinderMethod::operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); virtual boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual boolSolve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intStatus() const. Data Members; private:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; boolfLogScanflag to control usage of a log scan ; intfNIterNumber of iterations needed for the last estimation.; intfNpxNumber of points to bracket root with initial grid (def is 100); doublefRootCurrent stimation of the function root.; intfStatusStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentRootFinder(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BrentRootFinder.html:2259,log,log,2259,root/html528/ROOT__Math__BrentRootFinder.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BrentRootFinder.html,4,['log'],['log']
Testability,"ethod of selecting the target (only mulit target regr.) ;  ; TString fTargetSelectionStr;  method of selecting the target (only mulit target regr.) ;  ; Bool_t fUseYesNoCell;  return -1 or 1 for bg or signal like event ;  ; Float_t fVolFrac;  volume fraction (used for density calculation during buildup) ;  ; std::vector< Float_t > fXmax;  range for histograms and foams ;  ; std::vector< Float_t > fXmin;  . Additional Inherited Members;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodPDEFoam.h>. Inheritance diagram for TMVA::MethodPDEFoam:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EKernel. typedef enum TMVA::MethodPDEFoam::EKernel TMVA::MethodPDEFoam::EKernel. Member Enumeration Documentation. ◆ EKernel. enum TMVA::MethodPDEFoam::EKernel. EnumeratorkNone ; kGaus ; kLinN . Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html:32738,test,testing,32738,doc/master/classTMVA_1_1MethodPDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html,2,"['log', 'test']","['logger', 'testing']"
Testability,"ethod to check if this package manager has package 'pack'. ;  ; Int_t Install (const char *par, Bool_t rmold=kFALSE);  Install package from par (unpack the file in the directory); par can be an URL for remote retrieval. ;  ; TClass * IsA () const override;  ; Bool_t IsInDir (const char *path);  Method to check if 'path' is in the managed directory Return kTRUE or kFALSE. ;  ; Bool_t IsPackageEnabled (const char *pack);  ; Int_t Load (const char *pack, const char *opts);  Method to load a package taking an option const char * Return -1 on error, 0 otherwise. ;  ; Int_t Load (const char *pack, TList *optls=0);  Method to load a package taking an option list Return -1 on error, 0 otherwise. ;  ; TMD5 * ReadMD5 (const char *pack);  Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ;  ; Int_t Remove (const char *pack=0, Bool_t dolock=kTRUE);  Remove package 'pack' If 'pack' is null or empty all packages are cleared. ;  ; void SetLogger (TPackMgrLog_t logger);  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetPrefix (const char *pfx);  ; void Show (const char *title=0);  Show available packages. ;  ; void ShowEnabled (const char *title=0);  Show enabled packages. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unload (const char *pack);  Method to unload a package. ;  ; Int_t Unpack (const char *pack, TMD5 *sum=0);  Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:3884,log,logger,3884,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['log'],['logger']
Testability,"ethod) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); virtual Int_tRooAbsRealLValue::numBins(const char* rangeName = 0) const; virtual Int_tRooAbsRealLValue::numBins(const RooAbsBinning& binning) const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual RooAbsArg&RooAbsRealLValue::operator=(const RooAbsReal& other); virtual RooAbsArg&RooAbsRealLValue::operator=(Double_t newValue); virtual RooAbsArg&RooAbsRealLValue::operator=(Int_t ival); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& obs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooErrorVar.html:21406,test,testArg,21406,root/html532/RooErrorVar.html,https://root.cern,https://root.cern/root/html532/RooErrorVar.html,2,['test'],['testArg']
Testability,"ethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodTMlpANN.html:15395,test,testing,15395,root/html530/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodTMlpANN.html,3,['test'],['testing']
Testability,"ethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodTMlpANN.html:14854,test,testing,14854,root/html528/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodTMlpANN.html,1,['test'],['testing']
Testability,"ethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidComputeCovariance(Bool_t, TMatrixD*); virtual voidDeclareOptions(); Double_tGetChi2(TMVA::Types::ESBType); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fInvHMatrixB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodHMatrix.html:15853,test,testing,15853,root/html530/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodHMatrix.html,3,['test'],['testing']
Testability,"ethods and parameters) ; Definition at line 690 of file TMultiLayerPerceptron.cxx. ◆ SetReset(). void TMultiLayerPerceptron::SetReset ; (; Int_t ; reset). Sets number of epochs between two resets of the search direction to the steepest descent. ; (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 751 of file TMultiLayerPerceptron.cxx. ◆ SetTau(). void TMultiLayerPerceptron::SetTau ; (; Double_t ; tau). Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 740 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [1/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; const char * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control. Note that the tree must be already defined. ; Definition at line 666 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [2/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; TEventList * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control ; Definition at line 633 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [1/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; const char * ; train). Sets the Training dataset. ; Those events will be used for the minimization. Note that the tree must be already defined. ; Definition at line 645 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [2/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; TEventList * ; train). Sets the Training dataset. ; Those events will be used for the minimization ; Definition at line 622 of file TMultiLayerPerceptron.cxx. ◆ Shuffle(). void TMultiLayerPerceptron::Shuffle ; (; Int_t * ; index, . Int_t ; n . ); const. private . Shuffle the Int_t index[n] in input. ; Input:; index: the array to shuffle; n: the size of the array. Output:; index: the shuffled indexes. This method is used for stochastic train",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:47539,test,test,47539,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability,"ets are sorted by their offset in the original file; Usually; this also means that the baskets are sorted by the index/number of; the _last_ entry they contain). When using SortBasketsByBranch all the baskets of each individual; branches are stored contiguously. This tends to optimize reading; speed when reading a small number (1->5) of branches, since all; their baskets will be clustered together instead of being spread; across the file. However it might decrease the performance when; reading more branches (or the full entry). When using SortBasketsByEntry the baskets with the lowest starting; entry are written first. (i.e. the baskets are sorted by the; index/number of the first entry they contain). This means that on; the file the baskets will be in the order in which they will be; needed when reading the whole tree sequentially. For examples of CloneTree, see tutorials:. -- copytree. A macro to copy a subset of a TTree to a new TTree. The input file has been generated by the program in; $ROOTSYS/test/Event with: Event 1000 1 1 1. -- copytree2. A macro to copy a subset of a TTree to a new TTree. One branch of the new Tree is written to a separate file. The input file has been generated by the program in; $ROOTSYS/test/Event with: Event 1000 1 1 1. void CopyAddresses(TTree* , Bool_t undo = kFALSE); Set branch addresses of passed tree equal to ours.; If undo is true, reset the branch address instead of copying them.; This insures 'separation' of a cloned tree from its original. Long64_t CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); Copy nentries from given tree to this tree.; This routines assumes that the branches that intended to be copied are; already connected. The typical case is that this tree was created using; tree->CloneTree(0). By default copy all entries. Returns number of bytes copied to this tree. If 'option' contains the word 'fast' and nentries is -1, the cloning will be; done without unzipping or unstreaming the baskets (i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:62812,test,test,62812,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['test'],['test']
Testability,ettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavil,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:45223,test,testRootFinder,45223,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testRootFinder']
Testability,"ettings; 123(see TGeoPainter class) should not be provided at build time, otherwise the; 124drawing package will be loaded. There is also a list of specific rules :; 125positioned daughters should not extrude their mother or intersect with sisters; 126unless this is specified (see TGeoVolume::AddNodeOverlap()), the top volume; 127(containing all geometry tree) must be specified before closing the geometry; 128and must not be positioned - it represents the global reference frame. After; 129building the full geometry tree, the geometry must be closed; 130(see TGeoManager::CloseGeometry()). Voxelization can be redone per volume after; 131this process.; 132 ; 133 ; 134 Below is the general scheme of the manager class.; 135 ; 136\image html geom_mgr.jpg; 137 ; 138## An interactive session; 139 ; 140 Provided that a geometry was successfully built and closed (for instance the; 141previous example $ROOTSYS/tutorials/geom/rootgeom.C ), the manager class will register; 142itself to ROOT and the logical/physical structures will become immediately browsable.; 143The ROOT browser will display starting from the geometry folder : the list of; 144transformations and media, the top volume and the top logical node. These last; 145two can be fully expanded, any intermediate volume/node in the browser being subject; 146of direct access context menu operations (right mouse button click). All user; 147utilities of classes TGeoManager, TGeoVolume and TGeoNode can be called via the; 148context menu.; 149 ; 150\image html geom_browser.jpg; 151 ; 152### Drawing the geometry; 153 ; 154 Any logical volume can be drawn via TGeoVolume::Draw() member function.; 155This can be directly accessed from the context menu of the volume object; 156directly from the browser.; 157 There are several drawing options that can be set with; 158TGeoManager::SetVisOption(Int_t opt) method :; 159 ; 160#### opt=0; 161 only the content of the volume is drawn, N levels down (default N=3).; 162 This is the default be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:8417,log,logical,8417,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['log'],['logical']
Testability,"eturn 0 ;; 3401}; 3402 ; 3403 ; 3404 ; 3405////////////////////////////////////////////////////////////////////////////////; 3406/// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.; 3407 ; 3408void RooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString); 3409{; 3410 if (evalErrorData().mode == Ignore) {; 3411 return ;; 3412 }; 3413 ; 3414 if (evalErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:147059,log,logEvalError,147059,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['log'],['logEvalError']
Testability,"eturn a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelih",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendedTerm.html:3572,log,log,3572,doc/master/classRooExtendedTerm.html,https://root.cern,https://root.cern/doc/master/classRooExtendedTerm.html,5,['log'],['log']
Testability,"eturn fDeviceReturn;}; 152 inline static curandState_t * GetCurandStatesPointer() {return fCurandStates;}; 153 ; 154 /** Blocking synchronization with the associated compute stream, if it's; 155 * not the default stream. */; 156 inline void Synchronize(const TCudaMatrix &) const;; 157 ; 158 static size_t GetNDim() {return 2;}; 159 size_t GetNrows() const {return fNRows;}; 160 size_t GetNcols() const {return fNCols;}; 161 size_t GetNoElements() const {return fNRows * fNCols;}; 162 ; 163 const AFloat * GetDataPointer() const {return fElementBuffer.data();}; 164 AFloat * GetDataPointer() {return fElementBuffer.data();}; 165 const cublasHandle_t & GetCublasHandle() const {return fCublasHandle;}; 166 ; 167 inline TCudaDeviceBuffer<AFloat> GetDeviceBuffer() const { return fElementBuffer;}; 168 ; 169 /** Access to elements of device matrices provided through TCudaDeviceReference; 170 * class. Note that access is synchronous end enforces device synchronization; 171 * on all streams. Only used for testing. */; 172 TCudaDeviceReference<AFloat> operator()(size_t i, size_t j) const;; 173 ; 174 void Print() const {; 175 TMatrixT<AFloat> mat(*this);; 176 mat.Print();; 177 }; 178 ; 179 void Zero() {; 180 cudaMemset(GetDataPointer(), 0, sizeof(AFloat) * GetNoElements());; 181 }; 182 ; 183 ; 184private:; 185 ; 186 /** Initializes all shared devices resource and makes sure that a sufficient; 187 * number of curand states are allocated on the device and initialized as; 188 * well as that the one-vector for the summation over columns has the right; 189 * size. */; 190 void InitializeCuda();; 191 void InitializeCurandStates();; 192 ; 193};; 194 ; 195//; 196// Inline Functions.; 197//______________________________________________________________________________; 198inline void cudaError(cudaError_t code, const char *file, int line, bool abort); 199{; 200 if (code != cudaSuccess); 201 {; 202 fprintf(stderr,""CUDA Error: %s %s %d\n"", cudaGetErrorString(code), file, line);; 203 if (abort) exi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaMatrix_8h_source.html:6996,test,testing,6996,doc/master/CudaMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html,1,['test'],['testing']
Testability,"eturn the number of free parameters. Double_t GetParError(Int_t ipar) const; return error of parameter ipar. Double_t GetParameter(Int_t ipar) const; return current value of parameter ipar. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const; return current values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter; WARNING! parname must be suitably dimensionned in the calling function. const char * GetParName(Int_t ipar) const; return name of parameter ipar. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Double_t GetSumLog(Int_t i); return Sum(log(i) i=0,n; used by log likelihood fits. Bool_t IsFixed(Int_t ipar) const; return kTRUE if parameter ipar is fixed, kFALSE othersise). void PrintResults(Int_t level, Double_t amin) const; Print fit results. void ReleaseParameter(Int_t ipar); Release parameter ipar. void SetFCN(void* fcn); Specify the address of the fitting algorithm (from the interpreter). void SetFCN(void (*)(Int_t&, Double_t*, Double_t&f, Double_t*, Int_t) fcn); Specify the address of the fitting algorithm. void SetFitMethod(const char* name); ret fit method (chisquare or loglikelihood). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. void FitChisquare(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:14256,log,log,14256,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,8,['log'],['log']
Testability,"eturn the number of free parameters. Double_t GetParError(Int_t ipar) const; return error of parameter ipar. Double_t GetParameter(Int_t ipar) const; return current value of parameter ipar. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const; return current values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter; WARNING! parname must be suitably dimensionned in the calling function. const char * GetParName(Int_t ipar) const; return name of parameter ipar. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Double_t GetSumLog(Int_t i); return Sum(log(i) i=0,n; used by log likelihood fits. Bool_t IsFixed(Int_t ipar) const; return kTRUE if parameter ipar is fixed, kFALSE othersise). void PrintResults(Int_t level, Double_t amin) const; Print fit results. void ReleaseParameter(Int_t ipar); Release parameter ipar. void SetFCN(void* fcn); Specify the address of the fitting algorithm (from the interpreter). void SetFCN(void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t) fcn); Specify the address of the fitting algorithm. void SetFitMethod(const char* name); ret fit method (chisquare or loglikelihood). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. void FitChisquare(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Mini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitter.html:14923,log,log,14923,root/html602/TFitter.html,https://root.cern,https://root.cern/root/html602/TFitter.html,4,['log'],['log']
Testability,"eturns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Long64_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Double_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t AssertDataSet(TDSet* dset, TList* input, TDataSetManager* mgr, TString& emsg); Make sure that dataset is in the form to be processed. This may mean; retrieving the relevant info from the dataset manager or from the; attached input list.; Returns 0 on success, -1 on error. Int_t SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); Save input data file from 'cachedir' into the sandbox or create a the file; with input data objects. Int_t SendInputData(TQueryResult* qr, TProof* p, TString& emsg); Send the input data file to the workers. Int_t GetInputData(TList* input, const char* cachedir, TString& emsg); Get the input data from the file defined in the input list. void LogViewer(const char* url = 0, Int_t sessionidx = 0); Start the log viewer window usign the plugin manager. void SetProgressDialog(Bool_t on = kTRUE); Enable/Disable the graphic progress dialog.; By default the dialog is enabled. void ShowMissingFiles(TQueryResult* qr = 0); Show information about missing files during query described by 'qr' or the; last query if qr is null (default).; A short summary is printed in the end. TFileCollection * GetMissingFiles(TQueryResult* qr = 0); Get a TFileCollection with the files missing in the query described by 'qr'; or the last query if qr is null (default).; Return a null pointer if none were found, for whatever reason.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:87292,sandbox,sandbox,87292,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['sandbox'],['sandbox']
Testability,"etween zero and one, have; a mean value of about 0.56. We can apply a useful; rule: As long as the bin width is small compared with any significant; physical effect (for example the experimental resolution) then the binning; cannot have an important effect. Therefore, we believe that for all; practical purposes, the probability value PROB is calculated correctly; provided the user is aware that:. 1. The value of PROB should not be expected to have exactly the correct; distribution for binned data.; 2. The user is responsible for seeing to it that the bin widths are; small compared with any physical phenomena of interest.; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less.""; Note also that for GoF test of unbinned data ROOT provides also the class ROOT::Math::GoFTest. The class has also method for doing one sample tests (i.e. comparing the data with a given distribution). ; Reimplemented in TH2, and TH3.; Definition at line 8178 of file TH1.cxx. ◆ LabelsDeflate(). void TH1::LabelsDeflate ; (; Option_t * ; ax = ""X""). virtual . Reduce the number of bins for the axis passed in the option to the number of bins having a label. ; The method will remove only the extra bins existing after the last ""labeled"" bin. Note that if there are ""un-labeled"" bins present between ""labeled"" bins they will not be removed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5245 of file TH1.cxx. ◆ LabelsInflate(). void TH1::LabelsInflate ; (; Option_t * ; ax = ""X""). virtual . Double the number of bins for axis. ; Refill histogram. This function is called by TAxis::FindBin(const char *label) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5315 of file TH1.cxx. ◆ LabelsOption(). void TH1::LabelsOption ; (; Option_t * ; option = ""h"", . Option_t * ; a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:186751,test,tests,186751,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['tests']
Testability,"etwork on CPU using batches with size = 100; : ; TMVA_DNN_CPU : [dataset] : Evaluation of TMVA_DNN_CPU on training sample (1600 events); : Elapsed time for evaluation of 1600 events: 0.0796 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_CNN_CPU for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 7 Input = ( 1, 16, 16 ) Batch size = 100 Loss function = C; Layer 0 CONV LAYER: ( W = 16 , H = 16 , D = 10 ) Filter ( W = 3 , H = 3 ) Output = ( 100 , 10 , 10 , 256 ) Activation Function = Relu; Layer 1 BATCH NORM Layer: Input/Output = ( 10 , 256 , 100 ) Norm dim = 10 axis = 1; ; Layer 2 CONV LAYER: ( W = 16 , H = 16 , D = 10 ) Filter ( W = 3 , H = 3 ) Output = ( 100 , 10 , 10 , 256 ) Activation Function = Relu; Layer 3 POOL Layer: ( W = 15 , H = 15 , D = 10 ) Filter ( W = 2 , H = 2 ) Output = ( 100 , 10 , 10 , 225 ) ; Layer 4 RESHAPE Layer Input = ( 10 , 15 , 15 ) Output = ( 1 , 100 , 2250 ) ; Layer 5 DENSE Layer: ( Input = 2250 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 6 DENSE Layer: ( Input = 100 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 1280 events for training and 320 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 13.2274; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 1.28042 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:13953,test,testing,13953,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['test'],['testing']
Testability,"ev;; 678 ; 679 if (inverse); 680 {; 681 p = 1.0/p;; 682 }; 683 size_t _numWeights = layer.numWeights (numNodesPrev);; 684 for (size_t iWeight = 0; iWeight < _numWeights; ++iWeight); 685 {; 686 if (itWeight == itWeightEnd); 687 break;; 688 ; 689 *itWeight *= p;; 690 ++itWeight;; 691 }; 692 numNodesPrev = _numNodes;; 693 dropFractionPrev = dropFraction;; 694 ++itDrop;; 695 }; 696 }; 697 ; 698 ; 699 ; 700 ; 701 ; 702 ; 703/*! \brief execute the training until convergence emerges; 704 *; 705 * \param weights the container with the weights (synapses); 706 * \param trainPattern the pattern for the training; 707 * \param testPattern the pattern for the testing; 708 * \param minimizer the minimizer (e.g. steepest gradient descent) to be used; 709 * \param settings the settings for the training (e.g. multithreading or not, regularization etc.); 710 */; 711 template <typename Minimizer>; 712 double Net::train (std::vector<double>& weights,; 713 std::vector<Pattern>& trainPattern,; 714 const std::vector<Pattern>& testPattern,; 715 Minimizer& minimizer,; 716 Settings& settings); 717 {; 718// std::cout << ""START TRAINING"" << std::endl;; 719 settings.startTrainCycle ();; 720 ; 721 // JsMVA progress bar maximum (100%); 722 if (fIPyMaxIter) *fIPyMaxIter = 100;; 723 ; 724 settings.pads (4);; 725 settings.create (""trainErrors"", 100, 0, 100, 100, 0,1);; 726 settings.create (""testErrors"", 100, 0, 100, 100, 0,1);; 727 ; 728 size_t cycleCount = 0;; 729 size_t testCycleCount = 0;; 730 double testError = 1e20;; 731 double trainError = 1e20;; 732 size_t dropOutChangeCount = 0;; 733 ; 734 DropContainer dropContainer;; 735 DropContainer dropContainerTest;; 736 const std::vector<double>& dropFractions = settings.dropFractions ();; 737 bool isWeightsForDrop = false;; 738 ; 739 ; 740 // until convergence; 741 do; 742 {; 743 ++cycleCount;; 744 ; 745 // if dropOut enabled; 746 size_t dropIndex = 0;; 747 if (!dropFractions.empty () && dropOutChangeCount % settings.dropRepetitions () == 0); 748 {; 7",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:21072,test,testPattern,21072,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testPattern']
Testability,"evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/// A string with server names and values is constructed automatically for error logging; 3462/// purposes, unless a custom string with similar information is passed as argument.; 3463 ; 3464void RooAbsReal::logEvalError(const char* message, const char* serverValueString) const; 3465{; 3466 if (evalErrorData().mode == Ignore) {; 3467 return ;; 3468 }; 3469 ; 3470 if (evalErrorData().mode == CountErrors) {; 3471 evalErrorData().count++ ;; 3472 return ;; 3473 }; 3474 ; 3475 static bool inLogEvalError = false ;; 3476 ; 3477 if (inLogEvalError) {; 3478 return ;; 3479 }; 3480 inLogEvalError = true ;; 3481 ; 3482 EvalError ee ;; 3483 ee.setMessage(message) ;; 3484 ; 3485 if (serverValueString) {; 3486 ee.setServerValues(serverValueString) ;; 3487 } else {; 3488 std::string srvval ;; 3489 std::ostringstream oss ;; 3490 bool first(true) ;; 3491 for (Int_t i=0 ; i<numProxies() ; i++) {; 3492 RooAbsProxy* p = getProxy(i) ;; 3493 if (!p) continue ;; 3494 //if (p->name()[0]=='!') continue ;; 3495 if (first) {; 3496 first=false ;; 3497 } else {; 3498 oss << "", "" ;; 3499 }; 3500 p->p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:148660,log,logging,148660,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['log'],['logging']
Testability,"evel p.d.f evaluates to NaN @ numerator=wrap_pdf=59.1285, denominator=wrap_pdf_Int[pTV]=200921; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.338546 cHl3=0.879879 cHq3=-1.35856; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.372361 cHl3=0.491134 cHq3=-0.886807; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=5.8312, denominator=wrap_pdf_Int[pTV]=12183.6; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(wrap_pdf) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:InputArguments -- RooAbsData::plotOn(pseudo_dh) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 7389.24 will supersede previous event count of 9313.81 for normalization of PDF projections; DateJanuary 2022 ; AuthorRahul Balasubramanian ; Definition in file rf712_lagrangianmorphfit.py. tutorialsroofitrf712_lagrangianmorphfit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html:13995,log,log,13995,doc/master/rf712__lagrangianmorphfit_8py.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html,1,['log'],['log']
Testability,"evelcontrol print level (0 minimal, 1 normal, 2 debug). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetPrintLevel(int level); set print level (static function); 0 minimal, 1 normal, 2 debug. AsymptoticCalculator(RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel); constructor for asymptotic calculator from Data set and ModelConfig; The constructor will perform a global fit of the model to the data; and build an Asimov data set.; It will then also fit the model to the Asimov data set to find the likelihood value; of the Asimov data set; NOTE: If a fit has been done before, one for speeding up could set all the initial prameters; to the fit value and in addition set the null snapshot to the best fit. Double_t EvaluateNLL(RooAbsPdf& pdf, RooAbsData& data, const RooArgSet* poiSet = 0). HypoTestResult* GetHypoTest() const; It performs an hypothesis tests using the likelihood function; and computes the p values for the null and the alternate using the asymptotic; formulae for the profile likelihood ratio.; See G. Cowan, K. Cranmer, E. Gross and O. Vitells.; Asymptotic formulae for likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; The formulae are valid only for one POI. If more than one POI exists consider as POI only the; first one. double GetExpectedPValues(double pnull, double palt, double nsigma, bool usecls); function given the null and the alt p value - return the expected one given the N - sigma value. void FillBins(const RooAbsPdf& pdf, const RooArgList& obs, RooAbsData& data, int& index, double& binVolume, int& ibin); fill bins by looping recursivly on observables. void SetObsToExpected(RooProdPdf& prod, const RooArgSet& obs); iterate a Prod pdf to find the Poisson part to set the observed value to expected one. void SetObsToExpected(RooPoisson& pois, const RooArgSet& obs); set observed value in Poisson to the expected one; need to iterate on the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__AsymptoticCalculator.html:5204,test,tests,5204,root/html532/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__AsymptoticCalculator.html,1,['test'],['tests']
Testability,"eviation. Float_t GetCompressionFactor(); Return the file compression factor.; Add total number of compressed/uncompressed bytes for each key.; return ratio of the two. Int_t GetErrno() const; Method returning errno. Is overriden in TRFIOFile. void ResetErrno() const; Method resetting the errno. Is overridden in TRFIOFile. TFileCacheRead * GetCacheRead() const; Return a pointer to the current read cache. TFileCacheWrite * GetCacheWrite() const; Return a pointer to the current write cache. Int_t GetRecordHeader(char* buf, Long64_t first, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Read the logical record header starting at position first.; Maxbytes bytes are read into buf the function reads nread bytes; where nread is the minimum of maxbytes and the number of bytes; before the end of file. The function returns nread.; In output arguments:; nbytes : number of bytes in record; if negative, this is a deleted record; if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header; Note that the arguments objlen and keylen are returned only; if maxbytes >=16. Long64_t GetSize() const; Returns the current file size. Returns -1 in case the file could not; be stat'ed. const TList * GetStreamerInfoCache(); Returns the cached list of StreamerInfos used in this file. TList * GetStreamerInfoList(); Read the list of TStreamerInfo objects written to this file.; The function returns a TList. It is the user'responsability; to delete the list created by this function. Using the list, one can access additional information,eg:; TFile f(""myfile.root"");; TList *list = f.GetStreamerInfoList();; TStreamerInfo *info = (TStreamerInfo*)list->FindObject(""MyClass"");; Int_t classversionid = info->GetClassVersion();; delete list;. void ls(Option_t* option = """") const; List File contents.; Indentation is used to identify the file tree.; Subdirectories are listed first, then objects in memory,; then objects on the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:30071,log,logical,30071,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,3,['log'],['logical']
Testability,"ew logical (unique) shapes. Some viewers (OpenGL only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching with considerable performance gains in these cases.; For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. The viewer indicates this through the interface method PreferLocalFrame(); TVirtualViewer3D::PreferLocalFramevirtual Bool_t PreferLocalFrame() const =0; If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers to the properties of logical object, with the fLocalMaster transform and the fColor and fTransparency attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of filling the raw tessellation of the object buffer, in the master reference frame. Conversely viewers must always be capable of displaying the object described by this buffer. Scene Rebuilds; It should be understood that AddObject is not an explicit command to the viewer; it may for various reasons decide to ignore it:; It already has the object internally cached .; The object falls outside some 'interest' limits of the viewer camera.; The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition, simply indicating it does not require you to provide further information about this object. You should not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially millions o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:8424,log,logical,8424,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,2,['log'],['logical']
Testability,"ewer to suspend redraws etc, and after; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]; Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; Some; need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). . The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use; TBuffer3D.; Complete the mandatory Core section.; Complete the ShapeSpecific section; if applicable.; Complete the BoundingBox if you can.; Pass this buffer to the viewer using; one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualViewer3D.html:3220,test,test,3220,root/html528/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html528/TVirtualViewer3D.html,6,['test'],['test']
Testability,"ex category as listed by the index categories type iterator. PDFs may not overlap (i.e. share any variables) with the index category (function). RooSimultaneous(const char *name, const char *title, 				 map<string,RooAbsPdf*> pdfMap, RooAbsCategoryLValue& inIndexCat). void initialize(RooAbsCategoryLValue& inIndexCat, std::map<std::string,RooAbsPdf*> pdfMap); First see if there are any RooSimultaneous input components. RooSimultaneous(const RooSimultaneous& other, const char* name = 0); Copy constructor. ~RooSimultaneous(); Destructor. RooAbsPdf* getPdf(const char* catName) const; Return the p.d.f associated with the given index category name. Bool_t addPdf(const RooAbsPdf& pdf, const char* catLabel); Associate given PDF with index category state label 'catLabel'.; The names state must be already defined in the index category. RooSimultaneous can function without having a PDF associated; with every single state. The normalization in such cases is taken; from the number of registered PDFs, but getVal() will assert if; when called for an unregistered index state. PDFs may not overlap (i.e. share any variables) with the index category (function). RooAbsPdf::ExtendMode extendMode() const; WVE NEEDS FIX. Double_t evaluate() const; Return the current value:; the value of the PDF associated with the current index category state. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events: If the index is in nset,; then return the sum of the expected events of all components,; otherwise return the number of expected events of the PDF; associated with the current index category state. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Forward determination of analytical integration capabilities to component p.d.f.s; A unique code is assigned to the combined integration capabilities of all associated; p.d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimultaneous.html:42473,assert,assert,42473,root/html526/RooSimultaneous.html,https://root.cern,https://root.cern/root/html526/RooSimultaneous.html,1,['assert'],['assert']
Testability,"ex::ClassBuilder&AddOnDemandFunctionMemberBuilder(Reflex::OnDemandBuilderForScope* odb); Reflex::ClassBuilder&AddTypedef(const Reflex::Type& typ, const char* def); Reflex::ClassBuilder&AddTypedef(const char* typ, const char* def); Reflex::ClassBuilderClassBuilder(Reflex::Class* cl); Reflex::ClassBuilderClassBuilder(const Reflex::ClassBuilder&); Reflex::ClassBuilderClassBuilder(const char* nam, const type_info& ti, size_t size, unsigned int modifiers = 0, Reflex::TYPE typ = CLASS); Reflex::ClassBuilder&operator=(const Reflex::ClassBuilder&); Reflex::ClassBuilder&SetSizeOf(size_t size); Reflex::TypeToType(). protected:. Reflex::ClassBuilder&EnableCallback(bool enable = true). Data Members; private:. Reflex::ClassBuilderImplfClassBuilderImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AddBase(unsigned int modifiers). AddDataMember(const char* nam, size_t offs, unsigned int modifiers). AddFunctionMember(const char* nam, StubFunction stubFP, void* stubCtx, const char* params, unsigned int modifiers). AddTypedef(const char* def). AddEnum(const char* values, unsigned int modifiers). void AddTypedef(const Type& typ, const char* def). void AddOnDemandDataMemberBuilder(Reflex::OnDemandBuilderForScope* odb). * Register an on demand builder for data members with this class. void AddOnDemandFunctionMemberBuilder(Reflex::OnDemandBuilderForScope* odb). * Register an on demand builder for function members with this class. void SetSizeOf(size_t size); SetSizeOf will set the SizeOf property for this class.; * It currently ignore all actual content.; * @size Size of the class. Type ToType(). * ToType will return the currently produced Type (class); * @return the type currently being built. void EnableCallback(bool enable = true). * EnableCallback Enable or disable the callback call in the destructor; * @param enable true to enable callback call, false to disable callback call. ClassBuilder(const char* nam, const type_info& ti, size_t siz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__ClassBuilder.html:1961,stub,stubFP,1961,root/html526/Reflex__ClassBuilder.html,https://root.cern,https://root.cern/root/html526/Reflex__ClassBuilder.html,10,['stub'],"['stubCtx', 'stubFP']"
Testability,"ex::Member& dm) const. * AddDataMember will add the information about a data member; * @param dm data member to add. Member AddDataMember(const char* name, const Reflex::Type& type, size_t offset, unsigned int modifiers = 0, char* interpreterOffset = 0) const. * AddDataMember will add the information about a data member; * @param nam the name of the data member; * @param typ the type of the data member; * @param offs the offset of the data member relative to the beginning of the scope; * @param modifiers of the data member. Member AddFunctionMember(const char* name, const Reflex::Type& type, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0) const. * AddFunctionMember will add the information about a function member; * @param fm function member to add. * AddFunctionMember will add the information about a function member; * @param nam the name of the function member; * @param typ the type of the function member; * @param stubFP a pointer to the stub function; * @param stubCtx a pointer to the context of the function member; * @param params a semi colon separated list of parameters; * @param modifiers of the function member. void AddSubType(const Reflex::Type& ty) const. * AddSubType will add a sub type to this type; * @param ty sub type to add. void AddSubType(const char* type, size_t size, Reflex::TYPE typeType, const type_info& typeInfo, unsigned int modifiers = 0) const. * AddSubType will add a sub type to this type; * @param typ the name of the sub type; * @param size the sizeof of the sub type; * @param typeType the enum specifying the sub type; * @param ti the type_info of the sub type; * @param modifiers of the sub type. void RemoveDataMember(const Reflex::Member& dm) const. * RemoveDataMember will remove the information about a data member; * @param dm data member to remove. void RemoveFunctionMember(const Reflex::Member& fm) const. * RemoveFunctionMember will remove the information about a function member; * @",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__Scope.html:21555,stub,stubFP,21555,root/html526/Reflex__Scope.html,https://root.cern,https://root.cern/root/html526/Reflex__Scope.html,15,['stub'],"['stub', 'stubCtx', 'stubFP']"
Testability,"ex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Float_t fCharge; //Charge of this track; Float_t fVertex[3]; //Track vertex position; Int_t fNpoint; //Number of points for this track; Short_t fValid; //Validity criterion. // method definitions ...; ClassDef(Track,1) //A track segment; };; 12.17.4 Writing the Tree; We create a simple tree with two branches both holding Event objects. One is split and the other is not. We also create a pointer to an Event object (event).; void tree4w() {; // check to see if the event class is in the dictionary; // if it is not load the definition in libEvent.so; if (!TClassTable::GetDict(""Event"")) {; gSystem->Load(""$ROOTSYS/test/libEvent.so"");; }; // create a Tree file tree4.root; TFile f(""tree4.root"",""RECREATE"");; // create a ROOT Tree; TTree t4(""t4"",""A Tree with Events"");; // create a pointer to an Event object; Event *event = new Event();; // create two branches, split one; t4.Branch(""event_branch"", ""Event"", &event,16000,2);; t4.Branch(""event_not_split"", ""Event"", &event,16000,0);. // a local variable for the event type; char etype[20];. // fill the tree; for (Int_t ev = 0; ev <100; ev++) {; Float_t sigmat, sigmas;; gRandom->Rannor(sigmat,sigmas);; Int_t ntrack = Int_t(600 + 600 *sigmat/120.);; Float_t random = gRandom->Rndm(1);; sprintf(etype,""type%d"",ev%5);; event->SetType(etype);; event->SetHeader(ev, 200, 960312, random);; event->SetNseg(Int_t(10*ntrack+20*sigmas));; event->SetNvertex(Int_t(1+20*gRandom->Rndm()));; event->SetFlag(UInt_t(random+0.5));; event->SetTemperature(random+20.);; for(UChar_t m = 0; m < 10; m++) {; event->SetMeasure(m, Int_t(gRandom->Gaus(m,m+1)));; }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:578915,test,test,578915,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"example, Eadie et al, ""statistical Methods in Experimental; Physics', pp 269-270). This function returns the confidence level for the null hypothesis, where:; - \_form#593, and; - \_form#594 is the maximum deviation between a hypothetical distribution; function and an experimental distribution with; - \_form#354 events. NOTE: To compare two experimental distributions with m and n events,; use \_form#595. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than \_form#596 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1; This function was translated by Rene Brun from PROBKL in CERNLIB. ; Definition at line 679 of file TMath.cxx. ◆ KolmogorovTest(). Double_t TMath::KolmogorovTest ; (; Int_t ; na, . const Double_t * ; a, . Int_t ; nb, . const Double_t * ; b, . Option_t * ; option . ). Statistical test whether two one-dimensional sets of points are compatible with coming from the same parent distribution, using the Kolmogorov test. ; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation bet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:51185,test,test,51185,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,2,['test'],['test']
Testability,"execute rf_go.exe ;  ; void SetRFPredict ();  ; void SetRFTrain ();  ; void SetRFVarimp ();  ; void SetTestParms ();  set the test params ;  ; void SetTrainParms ();  set the training parameters ;  ; Bool_t WriteAll ();  write all files read by rf_go.exe ;  ; Bool_t WriteFloat (std::ofstream &f, const Float_t *v, Int_t n=1);  ; Bool_t WriteInt (std::ofstream &f, const Int_t *v, Int_t n=1);  ; Bool_t WriteIntParms ();  write int params file ;  ; Bool_t WriteLx ();  Save input variable mask. ;  ; Bool_t WriteProgram ();  write command to rf_go.exe ;  ; Bool_t WriteRealParms ();  write int params file ;  ; Bool_t WriteRealVarImp ();  write the minimum importance to be considered ;  ; Bool_t WriteRfOut ();  written by rf_go.exe; write rulefit output (rfout) ;  ; Bool_t WriteRfStatus ();  written by rf_go.exe; write rulefit status ;  ; Bool_t WriteRuleFitMod ();  written by rf_go.exe (NOTE:Format unknown!) ;  ; Bool_t WriteRuleFitSum ();  written by rf_go.exe (NOTE: format unknown!) ;  ; Bool_t WriteTest ();  Write test data. ;  ; Bool_t WriteTrain ();  write training data, column wise ;  ; Bool_t WriteVarImp ();  ; Bool_t WriteVarNames ();  write variable names, ascii ;  ; Bool_t WriteYhat ();  written by rf_go.exe ;  . Private Member Functions;  RuleFitAPI ();  . Private Attributes; MsgLogger fLogger;  ! message logger ;  ; const MethodRuleFit * fMethodRuleFit;  parent method - set in constructor ;  ; TString fModelType;  model type string ;  ; IntParms fRFIntParms;  integer parameters ;  ; std::vector< int > fRFLx;  variable selector ;  ; ERFProgram fRFProgram;  what to run ;  ; RealParms fRFRealParms;  real parameters ;  ; std::vector< Float_t > fRFVarImp;  variable importances ;  ; std::vector< Int_t > fRFVarImpInd;  variable index ;  ; TString fRFWorkDir;  working directory ;  ; std::vector< Float_t > fRFYhat;  score results from test sample ;  ; RuleFit * fRuleFit;  non const ptr to RuleFit class in MethodRuleFit ;  . #include <TMVA/RuleFitAPI.h>; Member Enumeratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html:3640,test,test,3640,doc/master/classTMVA_1_1RuleFitAPI.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html,1,['test'],['test']
Testability,"exponents (they would be 0 or 1)"");; pave3->Draw();; }; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAxis::SetMoreLogLabelsvoid SetMoreLogLabels(Bool_t more=kTRUE)Set the kMoreLogLabels bit flag When this option is selected more labels are drawn when in log scale ...Definition TAxis.h:223; TAxis::SetNoExponentvoid SetNoExponent(Bool_t noExponent=kTRUE)Set the NoExponent flag By default, an exponent of the form 10^N is used when the label value are eit...Definition TAxis.h:233; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::GetYaxisTAxis * GetYaxis() constGet y axis of the function.Definition TF1.cxx:2411; TF1::SetNpxvirtual void SetNpx(Int_t npx=100)Set the number of points used to draw the function.Definition TF1.cxx:3433; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TF1::GetXaxisTAxis * GetXaxis() constGet x axis of the function.Definition TF1.cxx:2400; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/logscales_8C.html:4534,log,log,4534,doc/master/logscales_8C.html,https://root.cern,https://root.cern/doc/master/logscales_8C.html,1,['log'],['log']
Testability,"expr Version_t TApplicationServer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 94 of file TApplicationServer.h. ◆ DeclFileName(). static const char * TApplicationServer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 94 of file TApplicationServer.h. ◆ ErrorHandler(). void TApplicationServer::ErrorHandler ; (; Int_t ; level, . Bool_t ; abort, . const char * ; location, . const char * ; msg . ). staticprotected . The error handler function. ; It prints the message on stderr and if abort is set it aborts the application. ; Definition at line 1088 of file TApplicationServer.cxx. ◆ ExecLogon(). void TApplicationServer::ExecLogon ; (; ). private . Execute logon macro's. ; There are three levels of logon macros that will be executed: the system logon etc/system.rootlogon.C, the global user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward compatibility also the logon macro as specified by the Rint.Logon environment setting, by default ./rootlogon.C, will be executed. No logon macros will be executed when the system is started with the -n option. ; Definition at line 1277 of file TApplicationServer.cxx. ◆ GetHost(). const char * TApplicationServer::GetHost ; (; ); const. inline . Definition at line 73 of file TApplicationServer.h. ◆ GetOptions(). void TApplicationServer::GetOptions ; (; Int_t * ; argc, . char ** ; argv . ). overridevirtual . Get and handle command line options. ; Fixed format: ""protocol url"" ; Reimplemented from TApplication.; Definition at line 449 of file TApplicationServer.cxx. ◆ GetPort(). Int_t TApplicationServer::GetPort ; (; ); const. inline . Definition at line 71 of file TApplicationServer.h. ◆ GetProtocol(). Int_t TApplicationServer::GetProtocol ; (; ); const. inline . Definition at line 70 of file TApplicationServer.h. ◆ GetSocket(). TSocket * TApplicationServer::GetSocket ; (; ); const. inline . Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:25453,log,logon,25453,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['log'],['logon']
Testability,"ext(x1, y, ""\\deg""); l.DrawText(x2, y, ""\\deg"");; y -= step ; l.DrawMathText(x1, y, ""\\det""); l.DrawText(x2, y, ""\\det"");; y -= step ; l.DrawMathText(x1, y, ""\\dim""); l.DrawText(x2, y, ""\\dim"");; y -= step ; l.DrawMathText(x1, y, ""\\exp""); l.DrawText(x2, y, ""\\exp"");; y -= step ; l.DrawMathText(x1, y, ""\\gcd""); l.DrawText(x2, y, ""\\gcd"");; y -= step ; l.DrawMathText(x1, y, ""\\hom""); l.DrawText(x2, y, ""\\hom"");; y -= step ; l.DrawMathText(x1, y, ""\\inf""); l.DrawText(x2, y, ""\\inf"");; y -= step ; l.DrawMathText(x1, y, ""\\ker""); l.DrawText(x2, y, ""\\ker"");; y -= step ; l.DrawMathText(x1, y, ""\\lg""); l.DrawText(x2, y, ""\\lg"");; y -= step ; l.DrawMathText(x1, y, ""\\lim""); l.DrawText(x2, y, ""\\lim"");; y -= step ; l.DrawMathText(x1, y, ""\\liminf""); l.DrawText(x2, y, ""\\liminf"");; y -= step ; l.DrawMathText(x1, y, ""\\limsup""); l.DrawText(x2, y, ""\\limsup"");; y -= step ; l.DrawMathText(x1, y, ""\\ln""); l.DrawText(x2, y, ""\\ln"");; y -= step ; l.DrawMathText(x1, y, ""\\log""); l.DrawText(x2, y, ""\\log"");; y -= step ; l.DrawMathText(x1, y, ""\\max""); l.DrawText(x2, y, ""\\max"");; y -= step ; l.DrawMathText(x1, y, ""\\min""); l.DrawText(x2, y, ""\\min"");; y -= step ; l.DrawMathText(x1, y, ""\\sec""); l.DrawText(x2, y, ""\\sec"");; y -= step ; l.DrawMathText(x1, y, ""\\sin""); l.DrawText(x2, y, ""\\sin"");; y -= step ; l.DrawMathText(x1, y, ""\\sinh""); l.DrawText(x2, y, ""\\sinh"");; y -= step ; l.DrawMathText(x1, y, ""\\sup""); l.DrawText(x2, y, ""\\sup"");; y -= step ; l.DrawMathText(x1, y, ""\\tan""); l.DrawText(x2, y, ""\\tan"");; y -= step ; l.DrawMathText(x1, y, ""\\tanh""); l.DrawText(x2, y, ""\\tanh"");. return c1;; }. Function Members (Methods); public:. virtual~TMathText(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMathText.html:52227,log,log,52227,root/html602/TMathText.html,https://root.cern,https://root.cern/root/html602/TMathText.html,2,['log'],['log']
Testability,"ext(x1, y, ""\\deg""); l.DrawText(x2, y, ""\\deg"");; y -= step ; l.DrawMathText(x1, y, ""\\det""); l.DrawText(x2, y, ""\\det"");; y -= step ; l.DrawMathText(x1, y, ""\\dim""); l.DrawText(x2, y, ""\\dim"");; y -= step ; l.DrawMathText(x1, y, ""\\exp""); l.DrawText(x2, y, ""\\exp"");; y -= step ; l.DrawMathText(x1, y, ""\\gcd""); l.DrawText(x2, y, ""\\gcd"");; y -= step ; l.DrawMathText(x1, y, ""\\hom""); l.DrawText(x2, y, ""\\hom"");; y -= step ; l.DrawMathText(x1, y, ""\\inf""); l.DrawText(x2, y, ""\\inf"");; y -= step ; l.DrawMathText(x1, y, ""\\ker""); l.DrawText(x2, y, ""\\ker"");; y -= step ; l.DrawMathText(x1, y, ""\\lg""); l.DrawText(x2, y, ""\\lg"");; y -= step ; l.DrawMathText(x1, y, ""\\lim""); l.DrawText(x2, y, ""\\lim"");; y -= step ; l.DrawMathText(x1, y, ""\\liminf""); l.DrawText(x2, y, ""\\liminf"");; y -= step ; l.DrawMathText(x1, y, ""\\limsup""); l.DrawText(x2, y, ""\\limsup"");; y -= step ; l.DrawMathText(x1, y, ""\\ln""); l.DrawText(x2, y, ""\\ln"");; y -= step ; l.DrawMathText(x1, y, ""\\log""); l.DrawText(x2, y, ""\\log"");; y -= step ; l.DrawMathText(x1, y, ""\\max""); l.DrawText(x2, y, ""\\max"");; y -= step ; l.DrawMathText(x1, y, ""\\min""); l.DrawText(x2, y, ""\\min"");; y -= step ; l.DrawMathText(x1, y, ""\\sec""); l.DrawText(x2, y, ""\\sec"");; y -= step ; l.DrawMathText(x1, y, ""\\sin""); l.DrawText(x2, y, ""\\sin"");; y -= step ; l.DrawMathText(x1, y, ""\\sinh""); l.DrawText(x2, y, ""\\sinh"");; y -= step ; l.DrawMathText(x1, y, ""\\sup""); l.DrawText(x2, y, ""\\sup"");; y -= step ; l.DrawMathText(x1, y, ""\\tan""); l.DrawText(x2, y, ""\\tan"");; y -= step ; l.DrawMathText(x1, y, ""\\tanh""); l.DrawText(x2, y, ""\\tanh"");; ; return c1;; }. Function Members (Methods); public:. TMathText(); TMathText(const TMathText& text); TMathText(Double_t x, Double_t y, const char* text); virtual~TMathText(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMathText.html:52245,log,log,52245,root/html534/TMathText.html,https://root.cern,https://root.cern/root/html534/TMathText.html,1,['log'],['log']
Testability,"extfile from xml weightfile and load this file into MLP ; Implements TMVA::MethodBase.; Definition at line 379 of file MethodTMlpANN.cxx. ◆ SetHiddenLayer(). void TMVA::MethodTMlpANN::SetHiddenLayer ; (; TString ; hiddenlayer = """"). inline . Definition at line 81 of file MethodTMlpANN.h. ◆ Streamer(). virtual void TMVA::MethodTMlpANN::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodTMlpANN::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 121 of file MethodTMlpANN.h. ◆ Train(). void TMVA::MethodTMlpANN::Train ; (; void ; ). virtual . performs TMlpANN training available learning methods: . TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once so merge the training and testing trees from the MVA factory first: ; Implements TMVA::MethodBase.; Definition at line 260 of file MethodTMlpANN.cxx. Member Data Documentation. ◆ fHiddenLayer. TString TMVA::MethodTMlpANN::fHiddenLayer. private . string containing the hidden layer structure ; Definition at line 111 of file MethodTMlpANN.h. ◆ fLayerSpec. TString TMVA::MethodTMlpANN::fLayerSpec. private . Layer specification option. ; Definition at line 106 of file MethodTMlpANN.h. ◆ fLearningMethod. TString TMVA::MethodTMlpANN::fLearningMethod. private . the learning method (given via option string) ; Definition at line 116 of file MethodTMlpANN.h. ◆ fLocalTrainingTree. TTree* TMVA::MethodTMlpANN::fLocalTrainingTree. private . local copy of training tree ; Definition at line 109 of file MethodTMlpANN.h. ◆ fMLP. TMultiLayerPerceptron* TMVA::MethodTMlpANN::fMLP. private . the TMLP ; Definition at line 108 of file MethodTMlpANN.h. ◆ fMLPBuildOptions. TString TMVA::MethodTMlpANN::fMLPBuildOptions. private . op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:35699,test,test,35699,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,2,['test'],"['test', 'testing']"
Testability,"eyValueSettings ; (; ). inline . Definition at line 283 of file MethodDL.h. ◆ GetKeyValueSettings() [2/2]. const KeyValueVector_t & TMVA::MethodDL::GetKeyValueSettings ; (; ); const. inline . Definition at line 282 of file MethodDL.h. ◆ GetLayoutString(). TString TMVA::MethodDL::GetLayoutString ; (; ); const. inline . Definition at line 274 of file MethodDL.h. ◆ GetLossFunction(). DNN::ELossFunction TMVA::MethodDL::GetLossFunction ; (; ); const. inline . Definition at line 270 of file MethodDL.h. ◆ GetMulticlassValues(). virtual const std::vector< Float_t > & TMVA::MethodDL::GetMulticlassValues ; (; ). virtual . Reimplemented from TMVA::MethodBase. ◆ GetMvaValue(). Double_t TMVA::MethodDL::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Implements TMVA::MethodBase.; Definition at line 1772 of file MethodDL.cxx. ◆ GetMvaValues(). std::vector< Double_t > TMVA::MethodDL::GetMvaValues ; (; Long64_t ; firstEvt, . Long64_t ; lastEvt, . Bool_t ; logProgress . ). protectedvirtual . Evaluate the DeepNet on a vector of input values stored in the TMVA Event class Here we will evaluate using a default batch size and the same architecture used for Training. ; Reimplemented from TMVA::MethodBase.; Definition at line 2022 of file MethodDL.cxx. ◆ GetNumValidationSamples(). UInt_t TMVA::MethodDL::GetNumValidationSamples ; (; ). private . parce the validation string and return the number of event data used for validation . ◆ GetOutputFunction(). DNN::EOutputFunction TMVA::MethodDL::GetOutputFunction ; (; ); const. inline . Definition at line 269 of file MethodDL.h. ◆ GetRegressionValues(). virtual const std::vector< Float_t > & TMVA::MethodDL::GetRegressionValues ; (; ). virtual . Reimplemented from TMVA::MethodBase. ◆ GetTrainingSettings() [1/2]. std::vector< TTrainingSettings > & TMVA::MethodDL::GetTrainingSettings ; (; ). inline . Definition at line 281 of file MethodDL.h. ◆ GetTrainingSettings() [2/2]. const std::vector< TTrainingSetti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:42065,log,logProgress,42065,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['log'],['logProgress']
Testability,"f (namePtr() == other.namePtr()). NoteTNamed::GetName() will return a pointer that's different for each object, but namePtr() always points to a unique instance. ; Definition at line 535 of file RooAbsArg.h. ◆ numCaches(). Int_t RooAbsArg::numCaches ; (; ); const. Return number of registered caches. ; Definition at line 2136 of file RooAbsArg.cxx. ◆ numProxies(). Int_t RooAbsArg::numProxies ; (; ); const. Return the number of registered proxies. ; Definition at line 1457 of file RooAbsArg.cxx. ◆ observableOverlaps() [1/2]. bool RooAbsArg::observableOverlaps ; (; const RooAbsData * ; dset, . const RooAbsArg & ; testArg . ); const. Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ; Definition at line 914 of file RooAbsArg.cxx. ◆ observableOverlaps() [2/2]. bool RooAbsArg::observableOverlaps ; (; const RooArgSet * ; depList, . const RooAbsArg & ; testArg . ); const. Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ; Definition at line 924 of file RooAbsArg.cxx. ◆ operator=(). RooAbsArg & RooAbsArg::operator= ; (; const RooAbsArg & ; other). delete . ◆ operator==(). virtual bool RooAbsArg::operator== ; (; const RooAbsArg & ; other); const. pure virtual . Implemented in RooAbsCategory, RooAbsReal, and RooStringVar. ◆ operMode(). OperMode RooAbsArg::operMode ; (; ); const. inline . Query the operation mode of this node. ; Definition at line 456 of file RooAbsArg.h. ◆ operModeHook(). virtual void RooAbsArg::operModeHook ; (; ). inlineprotectedvirtual . Reimplemented in RooCachedReal, and RooGenProdProj.; Definition at line 562 of file RooAbsArg.h. ◆ optimizeCacheMode() [1/2]. void RooAbsArg::optimizeCacheMode ; (; const RooArgSet & ; observables). virtual . Activate cache mode optimization with given definition of observables. ; The cache operation mode of all objects in the expression tree will modified such that all nodes that depend direc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:77276,test,testArg,77276,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['test'],['testArg']
Testability,"f ConfidenceBelt should be saved to a TFile; RooAbsData&fDatadata set ; Bool_tfDoProfileConstructioninstead of full construction over nuisance parametrs, do profile; Bool_tfFluctuateDatatell ToyMCSampler to fluctuate number of entries in dataset; RooStats::ModelConfig&fModel; Int_tfNbinsnumber of samples per variable; RooAbsData*fPointsToTestpoints to perform the construction; Bool_tfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::ToyMCSampler*fTestStatSamplerthe test statistic sampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); standard constructor. ~FeldmanCousins(); destructor; if(fOwnsWorkspace && fWS) delete fWS;. void SetModel(const RooStats::ModelConfig& ); set the model. TestStatSampler* GetTestStatSampler() const. void CreateTestStatSampler() const; specify the Test Statistic and create a ToyMC test statistic sampler. void CreateParameterPoints() const; specify the parameter points to perform the construction.; allow ability to profile on some nuisance paramters. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::PointSetInterval. FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); FeldmanCousins();; Common constructor. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& ); Set the DataSet. void SetPdf(RooAbsPdf& ); Set the Pdf. void SetParameters(const RooArgSet& ); specify the parameters of interest in the interval. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__FeldmanCousins.html:4256,test,test,4256,root/html528/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html528/RooStats__FeldmanCousins.html,1,['test'],['test']
Testability,"f Cont_t *PCont_t;; 763 typedef Value_t *PValue_t;; 764 ; 765 virtual ~Type() {}; 766 ; 767 static inline PCont_t object(void* ptr) {; 768 return PCont_t(PEnv_t(ptr)->fObject);; 769 }; 770 static void* size(void* env) {; 771 PEnv_t e = PEnv_t(env);; 772 e->fSize = PCont_t(e->fObject)->size();; 773 return &e->fSize;; 774 }; 775 static void* clear(void* env) {; 776 object(env)->reset();; 777 return nullptr;; 778 }; 779 static void* first(void* env) {; 780 PEnv_t e = PEnv_t(env);; 781 PCont_t c = PCont_t(e->fObject);; 782 e->fIterator.first = 0;; 783 e->fIterator.second = c->size() > 0 ? c->test(e->fIterator.first) : false ; // Iterator actually hold the value.; 784 e->fSize = c->size();; 785 return &(e->fIterator.second);; 786 }; 787 static void* next(void* env) {; 788 PEnv_t e = PEnv_t(env);; 789 PCont_t c = PCont_t(e->fObject);; 790 for (; e->fIdx > 0 && e->fIterator.first != c->size(); ++(e->fIterator.first), --e->fIdx){ }; 791 e->fIterator.second = (e->fIterator.first != c->size()) ? c->test(e->fIterator.first) : false;; 792 return &(e->fIterator.second);; 793 }; 794 static void* construct(void*,size_t) {; 795 // Nothing to construct.; 796 return nullptr;; 797 }; 798 static void* collect(void *coll, void *array) {; 799 PCont_t c = PCont_t(coll);; 800 PValue_t m = PValue_t(array); // 'start' is a buffer outside the container.; 801 for (size_t i=0; i != c->size(); ++i, ++m ); 802 *m = c->test(i);; 803 return nullptr;; 804 }; 805 static void destruct(void*,size_t) {; 806 // Nothing to destruct.; 807 }; 808 ; 809 //static const bool fgLargeIterator = sizeof(typename Cont_t::iterator) > fgIteratorArenaSize;; 810 //typedef Iterators<Cont_t,fgLargeIterator> Iterators_t;; 811 ; 812 struct Iterators {; 813 union PtrSize_t { size_t fIndex; void *fAddress; };; 814 typedef std::pair<PtrSize_t,Bool_t> iterator;; 815 // In the end iterator we store the bitset pointer; 816 // and do not use the 'second' part of the pair.; 817 // In the other iterator we store the index; 818 // an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:27433,test,test,27433,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['test'],['test']
Testability,"f Laplace distribution at point x, with location parameter alpha and shape parameter beta.; 2375/// By default, alpha=0, beta=1; 2376/// This distribution is known under different names, most common is; 2377/// double exponential distribution, but it also appears as; 2378/// the two-tailed exponential or the bilateral exponential distribution; 2379 ; 2380Double_t TMath::LaplaceDistI(Double_t x, Double_t alpha, Double_t beta); 2381{; 2382 Double_t temp;; 2383 if (x<=alpha){; 2384 temp = 0.5*TMath::Exp(-TMath::Abs((x-alpha)/beta));; 2385 } else {; 2386 temp = 1-0.5*TMath::Exp(-TMath::Abs((x-alpha)/beta));; 2387 }; 2388 return temp;; 2389}; 2390 ; 2391////////////////////////////////////////////////////////////////////////////////; 2392/// Computes the density of LogNormal distribution at point x.; 2393/// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; 2394///; 2395/// \param[in] x is the evaluation point; 2396/// \param[in] sigma is the shape parameter; 2397/// \param[in] theta is the location parameter; 2398/// \param[in] m is the scale parameter; 2399///; 2400/// The formula was taken from ""Engineering Statistics Handbook"" on site; 2401/// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; 2402/// Implementation using ROOT::Math::lognormal_pdf; 2403///; 2404/// Begin_Macro; 2405/// {; 2406/// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; 2407///; 2408/// c1->SetLogy();; 2409/// c1->SetGridx();; 2410/// c1->SetGridy();; 2411///; 2412/// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; 2413/// logn->SetMinimum(1e-3);; 2414///; 2415/// logn->SetParameters(0.5, 0., 1.);; 2416/// logn->SetLineColor(2);; 2417/// TF1 *logn1 = logn->DrawCopy(""L"");; 2418/// logn->SetParameters(1.0, 0., 1.);; 2419/// logn->SetLineColor(3);; 2420/// TF1 *logn2 = logn->DrawCopy(""LSAME"");; 2421/// logn->SetParameters(2.0, 0., 1.);; 2422/// logn->SetLineColor(4);; 2423/// TF1 *logn3 = logn->DrawCopy(""LSAME"");; 2424/// logn->Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:81501,log,lognormal,81501,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['log'],['lognormal']
Testability,"f TObjArray and its base classes are not supported.; 16.8.1 The Idea Behind TClonesArray; To reduce the very large number of new and delete calls in large loops like this (O(100000) x O(10000) times new/delete):; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000); for (int i = 0; i < ev->Ntracks; i++) { // O(10000); a[i] = new TTrack(x,y,z,...);; ...; }; ...; a.Delete();; }; You better use a TClonesArray which reduces the number of new/delete calls to only O(10000):; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000); for (int i = 0; i < ev->Ntracks; i++) { // O(10000); TTrack *track = (Track*)a.ConstructedAt(i);; track->Set(x,y,z,...);; ...; }; ...; a.Clear(); // Or Clear(""C"") if the track objects must be returned (via Track::Clear) to a default state.; }; Considering that a pair of new/delete calls on average cost about 70 ms, O(109) new/deletes will save about 19 hours. For the other collections, see the class reference guide on the web and the test program $ROOTSYS/test/tcollex.cxx.; 16.9 Template Containers and STL; Some people dislike polymorphic containers because they are not truly “type safe”. In the end, the compiler leaves it the user to ensure that the types are correct. This only leaves the other alternative: creating a new class each time a new (container organization) / (contained object) combination is needed. To say the least this could be very tedious. Most people faced with this choice would, for each type of container:; Define the class leaving a dummy name for the contained object type. When a particular container was needed, copy the code and then do a global search and replace for the contained class. C++ has a built in template scheme that effectively does just this. For example:; template<class T>; class ArrayContainer {; private:; T *member[10];; ...; };; This is an array container with a 10-element array of pointers to T, it could hold up to 10 T objects. This array is flawed becau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:855490,test,test,855490,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['test'],['test']
Testability,"f any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: Rene Brun 17/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRint.html:14774,log,logoff,14774,root/html530/TRint.html,https://root.cern,https://root.cern/root/html530/TRint.html,3,['log'],['logoff']
Testability,"f any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); Calls ProcessLine() possibly prepending a #line directive for; better diagnostics. Must be called after fNcmd has been increased for; the next line. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward ta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRint.html:15619,log,logoff,15619,root/html602/TRint.html,https://root.cern,https://root.cern/root/html602/TRint.html,2,['log'],['logoff']
Testability,"f any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: Rene Brun 17/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TRint.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-27 22:33; This",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRint.html:14637,log,logoff,14637,root/html528/TRint.html,https://root.cern,https://root.cern/root/html528/TRint.html,1,['log'],['logoff']
Testability,"f b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:26350,log,logical,26350,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"f basic types declared in the source property of the rule. 11.5.6.2 The C++ API; The schema evolution C++ API consists of two classes: ROOT::TSchemaRuleSet and ROOT::TSchemaRule. Objects of the TSchemaRule class represent the rules and their fields have exactly the same meaning as the ones of rules specified in the dictionaries. TSchemaRuleSet objects manage the sets of rules and ensure their consistency. There can be no conflicting rules in the rule sets. The rule sets are owned by the TClass objects corresponding to the target classes defined in the rules and can be accessed using TClass::{Get|Adopt}SchemaRules.; 11.5.7 Manual Schema Evolution; If you have written your own Streamer as described in the section “Streamers with Special Additions”, you will have to manually add code for each version and manage the evolution of your class. When you add or remove data members, you must modify the Streamer by hand. ROOT assumes that you have increased the class version number in the ClassDef statement and introduced the relevant test in the read part of the Streamer. For example, if a new version of the Event class above includes a new member: Int_t fNew the ClassDef statement should be changed to ClassDef(Event,2) and the following lines should be added to the read part of the Streamer:; if (R__v > 1) R__b >> fNew;; else fNew = 0; // set to some default value; If, in the same new version 2 you remove the member fH, you must add the following code to read the histogram object into some temporary object and delete it:; if (R__v) < 2 {; TH1F *dummy = 0;; R__b >> dummy;; delete dummy;; }; Our experience with manual schema evolution shows that it is easy to make and mismatches between Streamer writers and readers are frequent and increase as the number of classes increase. We recommend you use rootcling generated Streamers whenever you can, and profit from the automatic schema evolution.; 11.5.8 Building Class Definitions with the StreamerInfo; A ROOT file’s StreamerInfolist ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:504701,test,test,504701,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"f file GoFTest.h. ◆ SetUserCDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserCDF ; (; Dist & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a cumulative distribution function for 1-sample tests. ; The CDF must return zero for x=xmin and 1 for x=xmax. ; Definition at line 142 of file GoFTest.h. ◆ SetUserDistribution() [1/2]. void ROOT::Math::GoFTest::SetUserDistribution ; (; const IGenFunction & ; dist, . GoFTest::EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ; Definition at line 124 of file GoFTest.h. ◆ SetUserDistribution() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserDistribution ; (; Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ; Definition at line 135 of file GoFTest.h. ◆ SetUserPDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserPDF ; (; Dist & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a probability density function for 1-sample tests. ; Definition at line 130 of file GoFTest.h. Member Data Documentation. ◆ fCDF. std::unique_ptr<IGenFunction> ROOT::Math::GoFTest::fCDF. private . Pointer to CDF used in 1-sample test. ; Definition at line 235 of file GoFTest.h. ◆ fCombinedSamples. std::vector<Double_t> ROOT::Math::GoFTest::fCombinedSamples. private . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:19718,test,test,19718,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['test']
Testability,"f file TEveScene.h. ◆ DestroyElementRenderers(). void TEveSceneList::DestroyElementRenderers ; (; TEveElement * ; element). Loop over all scenes and remove all instances of element from them. ; Definition at line 287 of file TEveScene.cxx. ◆ DestroyScenes(). void TEveSceneList::DestroyScenes ; (; ). Destroy all scenes and their contents. ; Tho object with non-zero deny-destroy will still survive. ; Definition at line 247 of file TEveScene.cxx. ◆ IsA(). TClass * TEveSceneList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 100 of file TEveScene.h. ◆ operator=(). TEveSceneList & TEveSceneList::operator= ; (; const TEveSceneList & ; ). private . ◆ ProcessSceneChanges(). void TEveSceneList::ProcessSceneChanges ; (; Bool_t ; dropLogicals, . TExMap * ; stampMap . ). Loop over all scenes and update them accordingly: . if scene is marked as changed, it is repainted;; otherwise iteration is done over the set of stamped elements and their physical/logical shapes are updated accordingly. This allows much finer update granularity without resetting of complex GL-viewer and GL-scene state. ; Definition at line 307 of file TEveScene.cxx. ◆ RepaintAllScenes(). void TEveSceneList::RepaintAllScenes ; (; Bool_t ; dropLogicals). Repaint all scenes. ; Definition at line 276 of file TEveScene.cxx. ◆ RepaintChangedScenes(). void TEveSceneList::RepaintChangedScenes ; (; Bool_t ; dropLogicals). Repaint scenes that are tagged as changed. ; Definition at line 261 of file TEveScene.cxx. ◆ Streamer(). void TEveSceneList::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveSceneList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TEveScene.h. Libraries for TEveSceneList:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveScene.h; graf3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSceneList.html:35643,log,logical,35643,doc/master/classTEveSceneList.html,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html,1,['log'],['logical']
Testability,f file TGScrollBar.h. ◆ fHighColor. Pixel_t TGScrollBar::fHighColor. protected . highlight color ; Definition at line 87 of file TGScrollBar.h. ◆ fPos. Int_t TGScrollBar::fPos. protected . logical current position ; Definition at line 74 of file TGScrollBar.h. ◆ fPsize. Int_t TGScrollBar::fPsize. protected . logical page size of scrollbar ; Definition at line 73 of file TGScrollBar.h. ◆ fRange. Int_t TGScrollBar::fRange. protected . logical upper range of scrollbar ; Definition at line 72 of file TGScrollBar.h. ◆ fRepeat. TTimer* TGScrollBar::fRepeat. protected . repeat rate timer (when mouse stays pressed) ; Definition at line 83 of file TGScrollBar.h. ◆ fSlider. TGScrollBarElement* TGScrollBar::fSlider. protected . slider ; Definition at line 80 of file TGScrollBar.h. ◆ fSliderRange. Int_t TGScrollBar::fSliderRange. protected . logical slider range ; Definition at line 76 of file TGScrollBar.h. ◆ fSliderSize. Int_t TGScrollBar::fSliderSize. protected . logical slider size ; Definition at line 75 of file TGScrollBar.h. ◆ fSmallInc. Int_t TGScrollBar::fSmallInc. protected . Small Increment in the sliding algorithm. ; Definition at line 77 of file TGScrollBar.h. ◆ fSubw. Window_t TGScrollBar::fSubw. protected . sub window in which mouse is pressed ; Definition at line 84 of file TGScrollBar.h. ◆ fTail. TGScrollBarElement* TGScrollBar::fTail. protected . tail button of scrollbar ; Definition at line 79 of file TGScrollBar.h. ◆ fTailPic. const TGPicture* TGScrollBar::fTailPic. protected . picture in tail (down or right arrow) ; Definition at line 82 of file TGScrollBar.h. ◆ fX0. Int_t TGScrollBar::fX0. protected . Definition at line 68 of file TGScrollBar.h. ◆ fXp. Int_t TGScrollBar::fXp. protected . Definition at line 69 of file TGScrollBar.h. ◆ fY0. Int_t TGScrollBar::fY0. protected . current slider position in pixels ; Definition at line 68 of file TGScrollBar.h. ◆ fYp. Int_t TGScrollBar::fYp. protected . previous slider position in pixels ; Definition at line 69 of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBar.html:39668,log,logical,39668,doc/master/classTGScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGScrollBar.html,1,['log'],['logical']
Testability,"f file TUnfold.cxx. ◆ RegularizeSize(). Int_t TUnfold::RegularizeSize ; (; int ; bin, . Double_t ; scale = 1.0 . ). add a regularisation condition on the magnitude of a truth bin ; Parameters. [in]binbin number ; [in]scale(default=1) scale factor. this adds one row to L, where the element bin takes the value scale; return value: 0 if ok, 1 if the condition has not been added. Conditions which are not added typically correspond to bin numbers where the truth can not be unfolded (either response matrix is empty or the data do not constrain).; The RegularizeXXX() methods can be used to set up a custom matrix of regularisation conditions. In this case, start with an empty matrix L (argument regmode=kRegModeNone in the constructor) ; Definition at line 2025 of file TUnfold.cxx. ◆ ScanLcurve(). Int_t TUnfold::ScanLcurve ; (; Int_t ; nPoint, . Double_t ; tauMin, . Double_t ; tauMax, . TGraph ** ; lCurve, . TSpline ** ; logTauX = nullptr, . TSpline ** ; logTauY = nullptr, . TSpline ** ; logTauCurvature = nullptr . ). virtual . scan the L curve, determine tau and unfold at the final value of tau ; Parameters. [in]nPointnumber of points used for the scan ; [in]tauMinsmallest tau value to study ; [in]tauMaxlargest tau value to study. If tauMin=tauMax=nullptr, a scan interval is determined automatically. ; [out]lCurveif nonzero, a new TGraph is returned, containing the L-curve ; [out]logTauXif nonzero, a new TSpline is returned, to parameterize the L-curve's x-coordinates as a function of log10(tau) ; [out]logTauYif nonzero, a new TSpline is returned, to parameterize the L-curve's y-coordinates as a function of log10(tau) ; [out]logTauCurvatureif nonzero, a new TSpline is returned of the L-curve curvature as a function of log10(tau). return value: the coordinate number in the logTauX,logTauY graphs corresponding to the ""final"" choice of tau; Recommendation: always check logTauCurvature, it should be a peaked function (similar to a Gaussian), the maximum corresponding to the fina",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:54517,log,logTauCurvature,54517,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['log'],['logTauCurvature']
